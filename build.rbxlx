<roblox version="4">
  <Item class="HttpService" referent="0">
    <Properties>
      <string name="Name">HttpService</string>
      <bool name="HttpEnabled">true</bool>
    </Properties>
  </Item>
  <Item class="ReplicatedStorage" referent="1">
    <Properties>
      <string name="Name">ReplicatedStorage</string>
    </Properties>
    <Item class="Folder" referent="2">
      <Properties>
        <string name="Name">TS</string>
      </Properties>
      <Item class="Folder" referent="3">
        <Properties>
          <string name="Name">components</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="4">
        <Properties>
          <string name="Name">module</string>
          <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.2.0
local function makeHello(name)
	return "Hello from " .. (name .. "!")
end
return {
	makeHello = makeHello,
}
]]></string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="5">
        <Properties>
          <string name="Name">network</string>
          <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.2.0
local TS = require(game:GetService("ReplicatedStorage"):WaitForChild("rbxts_include"):WaitForChild("RuntimeLib"))
local createNetworkingEvent = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@flamework", "networking", "out", "events", "createNetworkingEvent").createNetworkingEvent
local t = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "t", "lib", "ts").t
local createNetworkingFunction = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@flamework", "networking", "out", "functions", "createNetworkingFunction").createNetworkingFunction
local GlobalEvents = createNetworkingEvent("shared/network@GlobalEvents", {
	confirmPepper = { { t.string }, nil },
}, {
	announce = { { t.string }, nil },
	pepperPrompt = { { t.array(t.interface({
		icon = t.string,
		name = t.string,
		description = t.string,
	})) }, nil },
	cancelPepperPrompt = { {}, nil },
}, nil, nil, nil)
local GlobalFunctions = createNetworkingFunction("shared/network@GlobalFunctions", {}, {}, nil, nil, nil)
return {
	GlobalEvents = GlobalEvents,
	GlobalFunctions = GlobalFunctions,
}
]]></string>
        </Properties>
      </Item>
    </Item>
    <Item class="Folder" referent="6">
      <Properties>
        <string name="Name">rbxts_include</string>
      </Properties>
      <Item class="ModuleScript" referent="7">
        <Properties>
          <string name="Name">Promise</string>
          <string name="Source"><![CDATA[--[[
	An implementation of Promises similar to Promise/A+.
]]

local ERROR_NON_PROMISE_IN_LIST = "Non-promise value passed into %s at index %s"
local ERROR_NON_LIST = "Please pass a list of promises to %s"
local ERROR_NON_FUNCTION = "Please pass a handler function to %s!"
local MODE_KEY_METATABLE = { __mode = "k" }

local function isCallable(value)
	if type(value) == "function" then
		return true
	end

	if type(value) == "table" then
		local metatable = getmetatable(value)
		if metatable and type(rawget(metatable, "__call")) == "function" then
			return true
		end
	end

	return false
end

--[[
	Creates an enum dictionary with some metamethods to prevent common mistakes.
]]
local function makeEnum(enumName, members)
	local enum = {}

	for _, memberName in ipairs(members) do
		enum[memberName] = memberName
	end

	return setmetatable(enum, {
		__index = function(_, k)
			error(string.format("%s is not in %s!", k, enumName), 2)
		end,
		__newindex = function()
			error(string.format("Creating new members in %s is not allowed!", enumName), 2)
		end,
	})
end

--[=[
	An object to represent runtime errors that occur during execution.
	Promises that experience an error like this will be rejected with
	an instance of this object.

	@class Error
]=]
local Error
do
	Error = {
		Kind = makeEnum("Promise.Error.Kind", {
			"ExecutionError",
			"AlreadyCancelled",
			"NotResolvedInTime",
			"TimedOut",
		}),
	}
	Error.__index = Error

	function Error.new(options, parent)
		options = options or {}
		return setmetatable({
			error = tostring(options.error) or "[This error has no error text.]",
			trace = options.trace,
			context = options.context,
			kind = options.kind,
			parent = parent,
			createdTick = os.clock(),
			createdTrace = debug.traceback(),
		}, Error)
	end

	function Error.is(anything)
		if type(anything) == "table" then
			local metatable = getmetatable(anything)

			if type(metatable) == "table" then
				return rawget(anything, "error") ~= nil and type(rawget(metatable, "extend")) == "function"
			end
		end

		return false
	end

	function Error.isKind(anything, kind)
		assert(kind ~= nil, "Argument #2 to Promise.Error.isKind must not be nil")

		return Error.is(anything) and anything.kind == kind
	end

	function Error:extend(options)
		options = options or {}

		options.kind = options.kind or self.kind

		return Error.new(options, self)
	end

	function Error:getErrorChain()
		local runtimeErrors = { self }

		while runtimeErrors[#runtimeErrors].parent do
			table.insert(runtimeErrors, runtimeErrors[#runtimeErrors].parent)
		end

		return runtimeErrors
	end

	function Error:__tostring()
		local errorStrings = {
			string.format("-- Promise.Error(%s) --", self.kind or "?"),
		}

		for _, runtimeError in ipairs(self:getErrorChain()) do
			table.insert(
				errorStrings,
				table.concat({
					runtimeError.trace or runtimeError.error,
					runtimeError.context,
				}, "\n")
			)
		end

		return table.concat(errorStrings, "\n")
	end
end

--[[
	Packs a number of arguments into a table and returns its length.

	Used to cajole varargs without dropping sparse values.
]]
local function pack(...)
	return select("#", ...), { ... }
end

--[[
	Returns first value (success), and packs all following values.
]]
local function packResult(success, ...)
	return success, select("#", ...), { ... }
end

local function makeErrorHandler(traceback)
	assert(traceback ~= nil, "traceback is nil")

	return function(err)
		-- If the error object is already a table, forward it directly.
		-- Should we extend the error here and add our own trace?

		if type(err) == "table" then
			return err
		end

		return Error.new({
			error = err,
			kind = Error.Kind.ExecutionError,
			trace = debug.traceback(tostring(err), 2),
			context = "Promise created at:\n\n" .. traceback,
		})
	end
end

--[[
	Calls a Promise executor with error handling.
]]
local function runExecutor(traceback, callback, ...)
	return packResult(xpcall(callback, makeErrorHandler(traceback), ...))
end

--[[
	Creates a function that invokes a callback with correct error handling and
	resolution mechanisms.
]]
local function createAdvancer(traceback, callback, resolve, reject)
	return function(...)
		local ok, resultLength, result = runExecutor(traceback, callback, ...)

		if ok then
			resolve(unpack(result, 1, resultLength))
		else
			reject(result[1])
		end
	end
end

local function isEmpty(t)
	return next(t) == nil
end

--[=[
	An enum value used to represent the Promise's status.
	@interface Status
	@tag enum
	@within Promise
	.Started "Started" -- The Promise is executing, and not settled yet.
	.Resolved "Resolved" -- The Promise finished successfully.
	.Rejected "Rejected" -- The Promise was rejected.
	.Cancelled "Cancelled" -- The Promise was cancelled before it finished.
]=]
--[=[
	@prop Status Status
	@within Promise
	@readonly
	@tag enums
	A table containing all members of the `Status` enum, e.g., `Promise.Status.Resolved`.
]=]
--[=[
	A Promise is an object that represents a value that will exist in the future, but doesn't right now.
	Promises allow you to then attach callbacks that can run once the value becomes available (known as *resolving*),
	or if an error has occurred (known as *rejecting*).

	@class Promise
	@__index prototype
]=]
local Promise = {
	Error = Error,
	Status = makeEnum("Promise.Status", { "Started", "Resolved", "Rejected", "Cancelled" }),
	_getTime = os.clock,
	_timeEvent = game:GetService("RunService").Heartbeat,
	_unhandledRejectionCallbacks = {},
}
Promise.prototype = {}
Promise.__index = Promise.prototype

function Promise._new(traceback, callback, parent)
	if parent ~= nil and not Promise.is(parent) then
		error("Argument #2 to Promise.new must be a promise or nil", 2)
	end

	local self = {
		-- Used to locate where a promise was created
		_source = traceback,

		_status = Promise.Status.Started,

		-- A table containing a list of all results, whether success or failure.
		-- Only valid if _status is set to something besides Started
		_values = nil,

		-- Lua doesn't like sparse arrays very much, so we explicitly store the
		-- length of _values to handle middle nils.
		_valuesLength = -1,

		-- Tracks if this Promise has no error observers..
		_unhandledRejection = true,

		-- Queues representing functions we should invoke when we update!
		_queuedResolve = {},
		_queuedReject = {},
		_queuedFinally = {},

		-- The function to run when/if this promise is cancelled.
		_cancellationHook = nil,

		-- The "parent" of this promise in a promise chain. Required for
		-- cancellation propagation upstream.
		_parent = parent,

		-- Consumers are Promises that have chained onto this one.
		-- We track them for cancellation propagation downstream.
		_consumers = setmetatable({}, MODE_KEY_METATABLE),
	}

	if parent and parent._status == Promise.Status.Started then
		parent._consumers[self] = true
	end

	setmetatable(self, Promise)

	local function resolve(...)
		self:_resolve(...)
	end

	local function reject(...)
		self:_reject(...)
	end

	local function onCancel(cancellationHook)
		if cancellationHook then
			if self._status == Promise.Status.Cancelled then
				cancellationHook()
			else
				self._cancellationHook = cancellationHook
			end
		end

		return self._status == Promise.Status.Cancelled
	end

	coroutine.wrap(function()
		local ok, _, result = runExecutor(self._source, callback, resolve, reject, onCancel)

		if not ok then
			reject(result[1])
		end
	end)()

	return self
end

--[=[
	Construct a new Promise that will be resolved or rejected with the given callbacks.

	If you `resolve` with a Promise, it will be chained onto.

	You can safely yield within the executor function and it will not block the creating thread.

	```lua
	local myFunction()
		return Promise.new(function(resolve, reject, onCancel)
			wait(1)
			resolve("Hello world!")
		end)
	end

	myFunction():andThen(print)
	```

	You do not need to use `pcall` within a Promise. Errors that occur during execution will be caught and turned into a rejection automatically. If `error()` is called with a table, that table will be the rejection value. Otherwise, string errors will be converted into `Promise.Error(Promise.Error.Kind.ExecutionError)` objects for tracking debug information.

	You may register an optional cancellation hook by using the `onCancel` argument:

	* This should be used to abort any ongoing operations leading up to the promise being settled.
	* Call the `onCancel` function with a function callback as its only argument to set a hook which will in turn be called when/if the promise is cancelled.
	* `onCancel` returns `true` if the Promise was already cancelled when you called `onCancel`.
	* Calling `onCancel` with no argument will not override a previously set cancellation hook, but it will still return `true` if the Promise is currently cancelled.
	* You can set the cancellation hook at any time before resolving.
	* When a promise is cancelled, calls to `resolve` or `reject` will be ignored, regardless of if you set a cancellation hook or not.

	@param executor (resolve: (...: any) -> (), reject: (...: any) -> (), onCancel: (abortHandler?: () -> ()) -> boolean) -> ()
	@return Promise
]=]
function Promise.new(executor)
	return Promise._new(debug.traceback(nil, 2), executor)
end

function Promise:__tostring()
	return string.format("Promise(%s)", self._status)
end

--[=[
	The same as [Promise.new](/api/Promise#new), except execution begins after the next `Heartbeat` event.

	This is a spiritual replacement for `spawn`, but it does not suffer from the same [issues](https://eryn.io/gist/3db84579866c099cdd5bb2ff37947cec) as `spawn`.

	```lua
	local function waitForChild(instance, childName, timeout)
	  return Promise.defer(function(resolve, reject)
		local child = instance:WaitForChild(childName, timeout)

		;(child and resolve or reject)(child)
	  end)
	end
	```

	@param executor (resolve: (...: any) -> (), reject: (...: any) -> (), onCancel: (abortHandler?: () -> ()) -> boolean) -> ()
	@return Promise
]=]
function Promise.defer(executor)
	local traceback = debug.traceback(nil, 2)
	local promise
	promise = Promise._new(traceback, function(resolve, reject, onCancel)
		local connection
		connection = Promise._timeEvent:Connect(function()
			connection:Disconnect()
			local ok, _, result = runExecutor(traceback, executor, resolve, reject, onCancel)

			if not ok then
				reject(result[1])
			end
		end)
	end)

	return promise
end

-- Backwards compatibility
Promise.async = Promise.defer

--[=[
	Creates an immediately resolved Promise with the given value.

	```lua
	-- Example using Promise.resolve to deliver cached values:
	function getSomething(name)
		if cache[name] then
			return Promise.resolve(cache[name])
		else
			return Promise.new(function(resolve, reject)
				local thing = getTheThing()
				cache[name] = thing

				resolve(thing)
			end)
		end
	end
	```

	@param ... any
	@return Promise<...any>
]=]
function Promise.resolve(...)
	local length, values = pack(...)
	return Promise._new(debug.traceback(nil, 2), function(resolve)
		resolve(unpack(values, 1, length))
	end)
end

--[=[
	Creates an immediately rejected Promise with the given value.

	:::caution
	Something needs to consume this rejection (i.e. `:catch()` it), otherwise it will emit an unhandled Promise rejection warning on the next frame. Thus, you should not create and store rejected Promises for later use. Only create them on-demand as needed.
	:::

	@param ... any
	@return Promise<...any>
]=]
function Promise.reject(...)
	local length, values = pack(...)
	return Promise._new(debug.traceback(nil, 2), function(_, reject)
		reject(unpack(values, 1, length))
	end)
end

--[[
	Runs a non-promise-returning function as a Promise with the
  given arguments.
]]
function Promise._try(traceback, callback, ...)
	local valuesLength, values = pack(...)

	return Promise._new(traceback, function(resolve)
		resolve(callback(unpack(values, 1, valuesLength)))
	end)
end

--[=[
	Begins a Promise chain, calling a function and returning a Promise resolving with its return value. If the function errors, the returned Promise will be rejected with the error. You can safely yield within the Promise.try callback.

	:::info
	`Promise.try` is similar to [Promise.promisify](#promisify), except the callback is invoked immediately instead of returning a new function.
	:::

	```lua
	Promise.try(function()
		return math.random(1, 2) == 1 and "ok" or error("Oh an error!")
	end)
		:andThen(function(text)
			print(text)
		end)
		:catch(function(err)
			warn("Something went wrong")
		end)
	```

	@param callback (...: T...) -> ...any
	@param ... T... -- Additional arguments passed to `callback`
	@return Promise
]=]
function Promise.try(callback, ...)
	return Promise._try(debug.traceback(nil, 2), callback, ...)
end

--[[
	Returns a new promise that:
		* is resolved when all input promises resolve
		* is rejected if ANY input promises reject
]]
function Promise._all(traceback, promises, amount)
	if type(promises) ~= "table" then
		error(string.format(ERROR_NON_LIST, "Promise.all"), 3)
	end

	-- We need to check that each value is a promise here so that we can produce
	-- a proper error rather than a rejected promise with our error.
	for i, promise in pairs(promises) do
		if not Promise.is(promise) then
			error(string.format(ERROR_NON_PROMISE_IN_LIST, "Promise.all", tostring(i)), 3)
		end
	end

	-- If there are no values then return an already resolved promise.
	if #promises == 0 or amount == 0 then
		return Promise.resolve({})
	end

	return Promise._new(traceback, function(resolve, reject, onCancel)
		-- An array to contain our resolved values from the given promises.
		local resolvedValues = {}
		local newPromises = {}

		-- Keep a count of resolved promises because just checking the resolved
		-- values length wouldn't account for promises that resolve with nil.
		local resolvedCount = 0
		local rejectedCount = 0
		local done = false

		local function cancel()
			for _, promise in ipairs(newPromises) do
				promise:cancel()
			end
		end

		-- Called when a single value is resolved and resolves if all are done.
		local function resolveOne(i, ...)
			if done then
				return
			end

			resolvedCount = resolvedCount + 1

			if amount == nil then
				resolvedValues[i] = ...
			else
				resolvedValues[resolvedCount] = ...
			end

			if resolvedCount >= (amount or #promises) then
				done = true
				resolve(resolvedValues)
				cancel()
			end
		end

		onCancel(cancel)

		-- We can assume the values inside `promises` are all promises since we
		-- checked above.
		for i, promise in ipairs(promises) do
			newPromises[i] = promise:andThen(function(...)
				resolveOne(i, ...)
			end, function(...)
				rejectedCount = rejectedCount + 1

				if amount == nil or #promises - rejectedCount < amount then
					cancel()
					done = true

					reject(...)
				end
			end)
		end

		if done then
			cancel()
		end
	end)
end

--[=[
	Accepts an array of Promises and returns a new promise that:
	* is resolved after all input promises resolve.
	* is rejected if *any* input promises reject.

	:::info
	Only the first return value from each promise will be present in the resulting array.
	:::

	After any input Promise rejects, all other input Promises that are still pending will be cancelled if they have no other consumers.

	```lua
	local promises = {
		returnsAPromise("example 1"),
		returnsAPromise("example 2"),
		returnsAPromise("example 3"),
	}

	return Promise.all(promises)
	```

	@param promises {Promise<T>}
	@return Promise<{T}>
]=]
function Promise.all(promises)
	return Promise._all(debug.traceback(nil, 2), promises)
end

--[=[
	Folds an array of values or promises into a single value. The array is traversed sequentially.

	The reducer function can return a promise or value directly. Each iteration receives the resolved value from the previous, and the first receives your defined initial value.

	The folding will stop at the first rejection encountered.
	```lua
	local basket = {"blueberry", "melon", "pear", "melon"}
	Promise.fold(basket, function(cost, fruit)
		if fruit == "blueberry" then
			return cost -- blueberries are free!
		else
			-- call a function that returns a promise with the fruit price
			return fetchPrice(fruit):andThen(function(fruitCost)
				return cost + fruitCost
			end)
		end
	end, 0)
	```

	@since v3.1.0
	@param list {T | Promise<T>}
	@param reducer (accumulator: U, value: T, index: number) -> U | Promise<U>
	@param initialValue U
]=]
function Promise.fold(list, reducer, initialValue)
	assert(type(list) == "table", "Bad argument #1 to Promise.fold: must be a table")
	assert(isCallable(reducer), "Bad argument #2 to Promise.fold: must be a function")

	local accumulator = Promise.resolve(initialValue)
	return Promise.each(list, function(resolvedElement, i)
		accumulator = accumulator:andThen(function(previousValueResolved)
			return reducer(previousValueResolved, resolvedElement, i)
		end)
	end):andThen(function()
		return accumulator
	end)
end

--[=[
	Accepts an array of Promises and returns a Promise that is resolved as soon as `count` Promises are resolved from the input array. The resolved array values are in the order that the Promises resolved in. When this Promise resolves, all other pending Promises are cancelled if they have no other consumers.

	`count` 0 results in an empty array. The resultant array will never have more than `count` elements.

	```lua
	local promises = {
		returnsAPromise("example 1"),
		returnsAPromise("example 2"),
		returnsAPromise("example 3"),
	}

	return Promise.some(promises, 2) -- Only resolves with first 2 promises to resolve
	```

	@param promises {Promise<T>}
	@param count number
	@return Promise<{T}>
]=]
function Promise.some(promises, count)
	assert(type(count) == "number", "Bad argument #2 to Promise.some: must be a number")

	return Promise._all(debug.traceback(nil, 2), promises, count)
end

--[=[
	Accepts an array of Promises and returns a Promise that is resolved as soon as *any* of the input Promises resolves. It will reject only if *all* input Promises reject. As soon as one Promises resolves, all other pending Promises are cancelled if they have no other consumers.

	Resolves directly with the value of the first resolved Promise. This is essentially [[Promise.some]] with `1` count, except the Promise resolves with the value directly instead of an array with one element.

	```lua
	local promises = {
		returnsAPromise("example 1"),
		returnsAPromise("example 2"),
		returnsAPromise("example 3"),
	}

	return Promise.any(promises) -- Resolves with first value to resolve (only rejects if all 3 rejected)
	```

	@param promises {Promise<T>}
	@return Promise<T>
]=]
function Promise.any(promises)
	return Promise._all(debug.traceback(nil, 2), promises, 1):andThen(function(values)
		return values[1]
	end)
end

--[=[
	Accepts an array of Promises and returns a new Promise that resolves with an array of in-place Statuses when all input Promises have settled. This is equivalent to mapping `promise:finally` over the array of Promises.

	```lua
	local promises = {
		returnsAPromise("example 1"),
		returnsAPromise("example 2"),
		returnsAPromise("example 3"),
	}

	return Promise.allSettled(promises)
	```

	@param promises {Promise<T>}
	@return Promise<{Status}>
]=]
function Promise.allSettled(promises)
	if type(promises) ~= "table" then
		error(string.format(ERROR_NON_LIST, "Promise.allSettled"), 2)
	end

	-- We need to check that each value is a promise here so that we can produce
	-- a proper error rather than a rejected promise with our error.
	for i, promise in pairs(promises) do
		if not Promise.is(promise) then
			error(string.format(ERROR_NON_PROMISE_IN_LIST, "Promise.allSettled", tostring(i)), 2)
		end
	end

	-- If there are no values then return an already resolved promise.
	if #promises == 0 then
		return Promise.resolve({})
	end

	return Promise._new(debug.traceback(nil, 2), function(resolve, _, onCancel)
		-- An array to contain our resolved values from the given promises.
		local fates = {}
		local newPromises = {}

		-- Keep a count of resolved promises because just checking the resolved
		-- values length wouldn't account for promises that resolve with nil.
		local finishedCount = 0

		-- Called when a single value is resolved and resolves if all are done.
		local function resolveOne(i, ...)
			finishedCount = finishedCount + 1

			fates[i] = ...

			if finishedCount >= #promises then
				resolve(fates)
			end
		end

		onCancel(function()
			for _, promise in ipairs(newPromises) do
				promise:cancel()
			end
		end)

		-- We can assume the values inside `promises` are all promises since we
		-- checked above.
		for i, promise in ipairs(promises) do
			newPromises[i] = promise:finally(function(...)
				resolveOne(i, ...)
			end)
		end
	end)
end

--[=[
	Accepts an array of Promises and returns a new promise that is resolved or rejected as soon as any Promise in the array resolves or rejects.

	:::warning
	If the first Promise to settle from the array settles with a rejection, the resulting Promise from `race` will reject.

	If you instead want to tolerate rejections, and only care about at least one Promise resolving, you should use [Promise.any](#any) or [Promise.some](#some) instead.
	:::

	All other Promises that don't win the race will be cancelled if they have no other consumers.

	```lua
	local promises = {
		returnsAPromise("example 1"),
		returnsAPromise("example 2"),
		returnsAPromise("example 3"),
	}

	return Promise.race(promises) -- Only returns 1st value to resolve or reject
	```

	@param promises {Promise<T>}
	@return Promise<T>
]=]
function Promise.race(promises)
	assert(type(promises) == "table", string.format(ERROR_NON_LIST, "Promise.race"))

	for i, promise in pairs(promises) do
		assert(Promise.is(promise), string.format(ERROR_NON_PROMISE_IN_LIST, "Promise.race", tostring(i)))
	end

	return Promise._new(debug.traceback(nil, 2), function(resolve, reject, onCancel)
		local newPromises = {}
		local finished = false

		local function cancel()
			for _, promise in ipairs(newPromises) do
				promise:cancel()
			end
		end

		local function finalize(callback)
			return function(...)
				cancel()
				finished = true
				return callback(...)
			end
		end

		if onCancel(finalize(reject)) then
			return
		end

		for i, promise in ipairs(promises) do
			newPromises[i] = promise:andThen(finalize(resolve), finalize(reject))
		end

		if finished then
			cancel()
		end
	end)
end

--[=[
	Iterates serially over the given an array of values, calling the predicate callback on each value before continuing.

	If the predicate returns a Promise, we wait for that Promise to resolve before moving on to the next item
	in the array.

	:::info
	`Promise.each` is similar to `Promise.all`, except the Promises are ran in order instead of all at once.

	But because Promises are eager, by the time they are created, they're already running. Thus, we need a way to defer creation of each Promise until a later time.

	The predicate function exists as a way for us to operate on our data instead of creating a new closure for each Promise. If you would prefer, you can pass in an array of functions, and in the predicate, call the function and return its return value.
	:::

	```lua
	Promise.each({
		"foo",
		"bar",
		"baz",
		"qux"
	}, function(value, index)
		return Promise.delay(1):andThen(function()
		print(("%d) Got %s!"):format(index, value))
		end)
	end)

	--[[
		(1 second passes)
		> 1) Got foo!
		(1 second passes)
		> 2) Got bar!
		(1 second passes)
		> 3) Got baz!
		(1 second passes)
		> 4) Got qux!
	]]
	```

	If the Promise a predicate returns rejects, the Promise from `Promise.each` is also rejected with the same value.

	If the array of values contains a Promise, when we get to that point in the list, we wait for the Promise to resolve before calling the predicate with the value.

	If a Promise in the array of values is already Rejected when `Promise.each` is called, `Promise.each` rejects with that value immediately (the predicate callback will never be called even once). If a Promise in the list is already Cancelled when `Promise.each` is called, `Promise.each` rejects with `Promise.Error(Promise.Error.Kind.AlreadyCancelled`). If a Promise in the array of values is Started at first, but later rejects, `Promise.each` will reject with that value and iteration will not continue once iteration encounters that value.

	Returns a Promise containing an array of the returned/resolved values from the predicate for each item in the array of values.

	If this Promise returned from `Promise.each` rejects or is cancelled for any reason, the following are true:
	- Iteration will not continue.
	- Any Promises within the array of values will now be cancelled if they have no other consumers.
	- The Promise returned from the currently active predicate will be cancelled if it hasn't resolved yet.

	@since 3.0.0
	@param list {T | Promise<T>}
	@param predicate (value: T, index: number) -> U | Promise<U>
	@return Promise<{U}>
]=]
function Promise.each(list, predicate)
	assert(type(list) == "table", string.format(ERROR_NON_LIST, "Promise.each"))
	assert(isCallable(predicate), string.format(ERROR_NON_FUNCTION, "Promise.each"))

	return Promise._new(debug.traceback(nil, 2), function(resolve, reject, onCancel)
		local results = {}
		local promisesToCancel = {}

		local cancelled = false

		local function cancel()
			for _, promiseToCancel in ipairs(promisesToCancel) do
				promiseToCancel:cancel()
			end
		end

		onCancel(function()
			cancelled = true

			cancel()
		end)

		-- We need to preprocess the list of values and look for Promises.
		-- If we find some, we must register our andThen calls now, so that those Promises have a consumer
		-- from us registered. If we don't do this, those Promises might get cancelled by something else
		-- before we get to them in the series because it's not possible to tell that we plan to use it
		-- unless we indicate it here.

		local preprocessedList = {}

		for index, value in ipairs(list) do
			if Promise.is(value) then
				if value:getStatus() == Promise.Status.Cancelled then
					cancel()
					return reject(Error.new({
						error = "Promise is cancelled",
						kind = Error.Kind.AlreadyCancelled,
						context = string.format(
							"The Promise that was part of the array at index %d passed into Promise.each was already cancelled when Promise.each began.\n\nThat Promise was created at:\n\n%s",
							index,
							value._source
						),
					}))
				elseif value:getStatus() == Promise.Status.Rejected then
					cancel()
					return reject(select(2, value:await()))
				end

				-- Chain a new Promise from this one so we only cancel ours
				local ourPromise = value:andThen(function(...)
					return ...
				end)

				table.insert(promisesToCancel, ourPromise)
				preprocessedList[index] = ourPromise
			else
				preprocessedList[index] = value
			end
		end

		for index, value in ipairs(preprocessedList) do
			if Promise.is(value) then
				local success
				success, value = value:await()

				if not success then
					cancel()
					return reject(value)
				end
			end

			if cancelled then
				return
			end

			local predicatePromise = Promise.resolve(predicate(value, index))

			table.insert(promisesToCancel, predicatePromise)

			local success, result = predicatePromise:await()

			if not success then
				cancel()
				return reject(result)
			end

			results[index] = result
		end

		resolve(results)
	end)
end

--[=[
	Checks whether the given object is a Promise via duck typing. This only checks if the object is a table and has an `andThen` method.

	@param object any
	@return boolean -- `true` if the given `object` is a Promise.
]=]
function Promise.is(object)
	if type(object) ~= "table" then
		return false
	end

	local objectMetatable = getmetatable(object)

	if objectMetatable == Promise then
		-- The Promise came from this library.
		return true
	elseif objectMetatable == nil then
		-- No metatable, but we should still chain onto tables with andThen methods
		return isCallable(object.andThen)
	elseif
		type(objectMetatable) == "table"
		and type(rawget(objectMetatable, "__index")) == "table"
		and isCallable(rawget(rawget(objectMetatable, "__index"), "andThen"))
	then
		-- Maybe this came from a different or older Promise library.
		return true
	end

	return false
end

--[=[
	Wraps a function that yields into one that returns a Promise.

	Any errors that occur while executing the function will be turned into rejections.

	:::info
	`Promise.promisify` is similar to [Promise.try](#try), except the callback is returned as a callable function instead of being invoked immediately.
	:::

	```lua
	local sleep = Promise.promisify(wait)

	sleep(1):andThen(print)
	```

	```lua
	local isPlayerInGroup = Promise.promisify(function(player, groupId)
		return player:IsInGroup(groupId)
	end)
	```

	@param callback (...: any) -> ...any
	@return (...: any) -> Promise
]=]
function Promise.promisify(callback)
	return function(...)
		return Promise._try(debug.traceback(nil, 2), callback, ...)
	end
end

--[=[
	Returns a Promise that resolves after `seconds` seconds have passed. The Promise resolves with the actual amount of time that was waited.

	This function is **not** a wrapper around `wait`. `Promise.delay` uses a custom scheduler which provides more accurate timing. As an optimization, cancelling this Promise instantly removes the task from the scheduler.

	:::warning
	Passing `NaN`, infinity, or a number less than 1/60 is equivalent to passing 1/60.
	:::

	```lua
		Promise.delay(5):andThenCall(print, "This prints after 5 seconds")
	```

	@function delay
	@within Promise
	@param seconds number
	@return Promise<number>
]=]
do
	-- uses a sorted doubly linked list (queue) to achieve O(1) remove operations and O(n) for insert

	-- the initial node in the linked list
	local first
	local connection

	function Promise.delay(seconds)
		assert(type(seconds) == "number", "Bad argument #1 to Promise.delay, must be a number.")
		-- If seconds is -INF, INF, NaN, or less than 1 / 60, assume seconds is 1 / 60.
		-- This mirrors the behavior of wait()
		if not (seconds >= 1 / 60) or seconds == math.huge then
			seconds = 1 / 60
		end

		return Promise._new(debug.traceback(nil, 2), function(resolve, _, onCancel)
			local startTime = Promise._getTime()
			local endTime = startTime + seconds

			local node = {
				resolve = resolve,
				startTime = startTime,
				endTime = endTime,
			}

			if connection == nil then -- first is nil when connection is nil
				first = node
				connection = Promise._timeEvent:Connect(function()
					local threadStart = Promise._getTime()

					while first ~= nil and first.endTime < threadStart do
						local current = first
						first = current.next

						if first == nil then
							connection:Disconnect()
							connection = nil
						else
							first.previous = nil
						end

						current.resolve(Promise._getTime() - current.startTime)
					end
				end)
			else -- first is non-nil
				if first.endTime < endTime then -- if `node` should be placed after `first`
					-- we will insert `node` between `current` and `next`
					-- (i.e. after `current` if `next` is nil)
					local current = first
					local next = current.next

					while next ~= nil and next.endTime < endTime do
						current = next
						next = current.next
					end

					-- `current` must be non-nil, but `next` could be `nil` (i.e. last item in list)
					current.next = node
					node.previous = current

					if next ~= nil then
						node.next = next
						next.previous = node
					end
				else
					-- set `node` to `first`
					node.next = first
					first.previous = node
					first = node
				end
			end

			onCancel(function()
				-- remove node from queue
				local next = node.next

				if first == node then
					if next == nil then -- if `node` is the first and last
						connection:Disconnect()
						connection = nil
					else -- if `node` is `first` and not the last
						next.previous = nil
					end
					first = next
				else
					local previous = node.previous
					-- since `node` is not `first`, then we know `previous` is non-nil
					previous.next = next

					if next ~= nil then
						next.previous = previous
					end
				end
			end)
		end)
	end
end

--[=[
	Returns a new Promise that resolves if the chained Promise resolves within `seconds` seconds, or rejects if execution time exceeds `seconds`. The chained Promise will be cancelled if the timeout is reached.

	Rejects with `rejectionValue` if it is non-nil. If a `rejectionValue` is not given, it will reject with a `Promise.Error(Promise.Error.Kind.TimedOut)`. This can be checked with [[Error.isKind]].

	```lua
	getSomething():timeout(5):andThen(function(something)
		-- got something and it only took at max 5 seconds
	end):catch(function(e)
		-- Either getting something failed or the time was exceeded.

		if Promise.Error.isKind(e, Promise.Error.Kind.TimedOut) then
			warn("Operation timed out!")
		else
			warn("Operation encountered an error!")
		end
	end)
	```

	Sugar for:

	```lua
	Promise.race({
		Promise.delay(seconds):andThen(function()
			return Promise.reject(
				rejectionValue == nil
				and Promise.Error.new({ kind = Promise.Error.Kind.TimedOut })
				or rejectionValue
			)
		end),
		promise
	})
	```

	@param seconds number
	@param rejectionValue? any -- The value to reject with if the timeout is reached
	@return Promise
]=]
function Promise.prototype:timeout(seconds, rejectionValue)
	local traceback = debug.traceback(nil, 2)

	return Promise.race({
		Promise.delay(seconds):andThen(function()
			return Promise.reject(rejectionValue == nil and Error.new({
				kind = Error.Kind.TimedOut,
				error = "Timed out",
				context = string.format(
					"Timeout of %d seconds exceeded.\n:timeout() called at:\n\n%s",
					seconds,
					traceback
				),
			}) or rejectionValue)
		end),
		self,
	})
end

--[=[
	Returns the current Promise status.

	@return Status
]=]
function Promise.prototype:getStatus()
	return self._status
end

--[[
	Creates a new promise that receives the result of this promise.

	The given callbacks are invoked depending on that result.
]]
function Promise.prototype:_andThen(traceback, successHandler, failureHandler)
	self._unhandledRejection = false

	-- Create a new promise to follow this part of the chain
	return Promise._new(traceback, function(resolve, reject)
		-- Our default callbacks just pass values onto the next promise.
		-- This lets success and failure cascade correctly!

		local successCallback = resolve
		if successHandler then
			successCallback = createAdvancer(traceback, successHandler, resolve, reject)
		end

		local failureCallback = reject
		if failureHandler then
			failureCallback = createAdvancer(traceback, failureHandler, resolve, reject)
		end

		if self._status == Promise.Status.Started then
			-- If we haven't resolved yet, put ourselves into the queue
			table.insert(self._queuedResolve, successCallback)
			table.insert(self._queuedReject, failureCallback)
		elseif self._status == Promise.Status.Resolved then
			-- This promise has already resolved! Trigger success immediately.
			successCallback(unpack(self._values, 1, self._valuesLength))
		elseif self._status == Promise.Status.Rejected then
			-- This promise died a terrible death! Trigger failure immediately.
			failureCallback(unpack(self._values, 1, self._valuesLength))
		elseif self._status == Promise.Status.Cancelled then
			-- We don't want to call the success handler or the failure handler,
			-- we just reject this promise outright.
			reject(Error.new({
				error = "Promise is cancelled",
				kind = Error.Kind.AlreadyCancelled,
				context = "Promise created at\n\n" .. traceback,
			}))
		end
	end, self)
end

--[=[
	Chains onto an existing Promise and returns a new Promise.

	:::warning
	Within the failure handler, you should never assume that the rejection value is a string. Some rejections within the Promise library are represented by [[Error]] objects. If you want to treat it as a string for debugging, you should call `tostring` on it first.
	:::

	Return a Promise from the success or failure handler and it will be chained onto.

	@param successHandler (...: any) -> ...any
	@param failureHandler? (...: any) -> ...any
	@return Promise<...any>
]=]
function Promise.prototype:andThen(successHandler, failureHandler)
	assert(successHandler == nil or isCallable(successHandler), string.format(ERROR_NON_FUNCTION, "Promise:andThen"))
	assert(failureHandler == nil or isCallable(failureHandler), string.format(ERROR_NON_FUNCTION, "Promise:andThen"))

	return self:_andThen(debug.traceback(nil, 2), successHandler, failureHandler)
end

--[=[
	Shorthand for `Promise:andThen(nil, failureHandler)`.

	Returns a Promise that resolves if the `failureHandler` worked without encountering an additional error.

	:::warning
	Within the failure handler, you should never assume that the rejection value is a string. Some rejections within the Promise library are represented by [[Error]] objects. If you want to treat it as a string for debugging, you should call `tostring` on it first.
	:::


	@param failureHandler (...: any) -> ...any
	@return Promise<...any>
]=]
function Promise.prototype:catch(failureHandler)
	assert(failureHandler == nil or isCallable(failureHandler), string.format(ERROR_NON_FUNCTION, "Promise:catch"))
	return self:_andThen(debug.traceback(nil, 2), nil, failureHandler)
end

--[=[
	Similar to [Promise.andThen](#andThen), except the return value is the same as the value passed to the handler. In other words, you can insert a `:tap` into a Promise chain without affecting the value that downstream Promises receive.

	```lua
		getTheValue()
		:tap(print)
		:andThen(function(theValue)
			print("Got", theValue, "even though print returns nil!")
		end)
	```

	If you return a Promise from the tap handler callback, its value will be discarded but `tap` will still wait until it resolves before passing the original value through.

	@param tapHandler (...: any) -> ...any
	@return Promise<...any>
]=]
function Promise.prototype:tap(tapHandler)
	assert(isCallable(tapHandler), string.format(ERROR_NON_FUNCTION, "Promise:tap"))
	return self:_andThen(debug.traceback(nil, 2), function(...)
		local callbackReturn = tapHandler(...)

		if Promise.is(callbackReturn) then
			local length, values = pack(...)
			return callbackReturn:andThen(function()
				return unpack(values, 1, length)
			end)
		end

		return ...
	end)
end

--[=[
	Attaches an `andThen` handler to this Promise that calls the given callback with the predefined arguments. The resolved value is discarded.

	```lua
		promise:andThenCall(someFunction, "some", "arguments")
	```

	This is sugar for

	```lua
		promise:andThen(function()
		return someFunction("some", "arguments")
		end)
	```

	@param callback (...: any) -> any
	@param ...? any -- Additional arguments which will be passed to `callback`
	@return Promise
]=]
function Promise.prototype:andThenCall(callback, ...)
	assert(isCallable(callback), string.format(ERROR_NON_FUNCTION, "Promise:andThenCall"))
	local length, values = pack(...)
	return self:_andThen(debug.traceback(nil, 2), function()
		return callback(unpack(values, 1, length))
	end)
end

--[=[
	Attaches an `andThen` handler to this Promise that discards the resolved value and returns the given value from it.

	```lua
		promise:andThenReturn("some", "values")
	```

	This is sugar for

	```lua
		promise:andThen(function()
			return "some", "values"
		end)
	```

	:::caution
	Promises are eager, so if you pass a Promise to `andThenReturn`, it will begin executing before `andThenReturn` is reached in the chain. Likewise, if you pass a Promise created from [[Promise.reject]] into `andThenReturn`, it's possible that this will trigger the unhandled rejection warning. If you need to return a Promise, it's usually best practice to use [[Promise.andThen]].
	:::

	@param ... any -- Values to return from the function
	@return Promise
]=]
function Promise.prototype:andThenReturn(...)
	local length, values = pack(...)
	return self:_andThen(debug.traceback(nil, 2), function()
		return unpack(values, 1, length)
	end)
end

--[=[
	Cancels this promise, preventing the promise from resolving or rejecting. Does not do anything if the promise is already settled.

	Cancellations will propagate upwards and downwards through chained promises.

	Promises will only be cancelled if all of their consumers are also cancelled. This is to say that if you call `andThen` twice on the same promise, and you cancel only one of the child promises, it will not cancel the parent promise until the other child promise is also cancelled.

	```lua
		promise:cancel()
	```
]=]
function Promise.prototype:cancel()
	if self._status ~= Promise.Status.Started then
		return
	end

	self._status = Promise.Status.Cancelled

	if self._cancellationHook then
		self._cancellationHook()
	end

	if self._parent then
		self._parent:_consumerCancelled(self)
	end

	for child in pairs(self._consumers) do
		child:cancel()
	end

	self:_finalize()
end

--[[
	Used to decrease the number of consumers by 1, and if there are no more,
	cancel this promise.
]]
function Promise.prototype:_consumerCancelled(consumer)
	if self._status ~= Promise.Status.Started then
		return
	end

	self._consumers[consumer] = nil

	if next(self._consumers) == nil then
		self:cancel()
	end
end

--[[
	Used to set a handler for when the promise resolves, rejects, or is
	cancelled. Returns a new promise chained from this promise.
]]
function Promise.prototype:_finally(traceback, finallyHandler, onlyOk)
	if not onlyOk then
		self._unhandledRejection = false
	end

	-- Return a promise chained off of this promise
	return Promise._new(traceback, function(resolve, reject)
		local finallyCallback = resolve
		if finallyHandler then
			finallyCallback = createAdvancer(traceback, finallyHandler, resolve, reject)
		end

		if onlyOk then
			local callback = finallyCallback
			finallyCallback = function(...)
				if self._status == Promise.Status.Rejected then
					return resolve(self)
				end

				return callback(...)
			end
		end

		if self._status == Promise.Status.Started then
			-- The promise is not settled, so queue this.
			table.insert(self._queuedFinally, finallyCallback)
		else
			-- The promise already settled or was cancelled, run the callback now.
			finallyCallback(self._status)
		end
	end, self)
end

--[=[
	Set a handler that will be called regardless of the promise's fate. The handler is called when the promise is resolved, rejected, *or* cancelled.

	Returns a new promise chained from this promise.

	:::caution
	If the Promise is cancelled, any Promises chained off of it with `andThen` won't run. Only Promises chained with `finally` or `done` will run in the case of cancellation.
	:::

	```lua
	local thing = createSomething()

	doSomethingWith(thing)
		:andThen(function()
			print("It worked!")
			-- do something..
		end)
		:catch(function()
			warn("Oh no it failed!")
		end)
		:finally(function()
			-- either way, destroy thing

			thing:Destroy()
		end)

	```

	@param finallyHandler (status: Status) -> ...any
	@return Promise<...any>
]=]
function Promise.prototype:finally(finallyHandler)
	assert(finallyHandler == nil or isCallable(finallyHandler), string.format(ERROR_NON_FUNCTION, "Promise:finally"))
	return self:_finally(debug.traceback(nil, 2), finallyHandler)
end

--[=[
	Same as `andThenCall`, except for `finally`.

	Attaches a `finally` handler to this Promise that calls the given callback with the predefined arguments.

	@param callback (...: any) -> any
	@param ...? any -- Additional arguments which will be passed to `callback`
	@return Promise
]=]
function Promise.prototype:finallyCall(callback, ...)
	assert(isCallable(callback), string.format(ERROR_NON_FUNCTION, "Promise:finallyCall"))
	local length, values = pack(...)
	return self:_finally(debug.traceback(nil, 2), function()
		return callback(unpack(values, 1, length))
	end)
end

--[=[
	Attaches a `finally` handler to this Promise that discards the resolved value and returns the given value from it.

	```lua
		promise:finallyReturn("some", "values")
	```

	This is sugar for

	```lua
		promise:finally(function()
			return "some", "values"
		end)
	```

	@param ... any -- Values to return from the function
	@return Promise
]=]
function Promise.prototype:finallyReturn(...)
	local length, values = pack(...)
	return self:_finally(debug.traceback(nil, 2), function()
		return unpack(values, 1, length)
	end)
end

--[=[
	Set a handler that will be called only if the Promise resolves or is cancelled. This method is similar to `finally`, except it doesn't catch rejections.

	:::caution
	`done` should be reserved specifically when you want to perform some operation after the Promise is finished (like `finally`), but you don't want to consume rejections (like in <a href="/roblox-lua-promise/lib/Examples.html#cancellable-animation-sequence">this example</a>). You should use `andThen` instead if you only care about the Resolved case.
	:::

	:::warning
	Like `finally`, if the Promise is cancelled, any Promises chained off of it with `andThen` won't run. Only Promises chained with `done` and `finally` will run in the case of cancellation.
	:::

	Returns a new promise chained from this promise.

	@param doneHandler (status: Status) -> ...any
	@return Promise<...any>
]=]
function Promise.prototype:done(doneHandler)
	assert(doneHandler == nil or isCallable(doneHandler), string.format(ERROR_NON_FUNCTION, "Promise:done"))
	return self:_finally(debug.traceback(nil, 2), doneHandler, true)
end

--[=[
	Same as `andThenCall`, except for `done`.

	Attaches a `done` handler to this Promise that calls the given callback with the predefined arguments.

	@param callback (...: any) -> any
	@param ...? any -- Additional arguments which will be passed to `callback`
	@return Promise
]=]
function Promise.prototype:doneCall(callback, ...)
	assert(isCallable(callback), string.format(ERROR_NON_FUNCTION, "Promise:doneCall"))
	local length, values = pack(...)
	return self:_finally(debug.traceback(nil, 2), function()
		return callback(unpack(values, 1, length))
	end, true)
end

--[=[
	Attaches a `done` handler to this Promise that discards the resolved value and returns the given value from it.

	```lua
		promise:doneReturn("some", "values")
	```

	This is sugar for

	```lua
		promise:done(function()
			return "some", "values"
		end)
	```

	@param ... any -- Values to return from the function
	@return Promise
]=]
function Promise.prototype:doneReturn(...)
	local length, values = pack(...)
	return self:_finally(debug.traceback(nil, 2), function()
		return unpack(values, 1, length)
	end, true)
end

--[=[
	Yields the current thread until the given Promise completes. Returns the Promise's status, followed by the values that the promise resolved or rejected with.

	@yields
	@return Status -- The Status representing the fate of the Promise
	@return ...any -- The values the Promise resolved or rejected with.
]=]
function Promise.prototype:awaitStatus()
	self._unhandledRejection = false

	if self._status == Promise.Status.Started then
		local bindable = Instance.new("BindableEvent")

		self:finally(function()
			bindable:Fire()
		end)

		bindable.Event:Wait()
		bindable:Destroy()
	end

	if self._status == Promise.Status.Resolved then
		return self._status, unpack(self._values, 1, self._valuesLength)
	elseif self._status == Promise.Status.Rejected then
		return self._status, unpack(self._values, 1, self._valuesLength)
	end

	return self._status
end

local function awaitHelper(status, ...)
	return status == Promise.Status.Resolved, ...
end

--[=[
	Yields the current thread until the given Promise completes. Returns true if the Promise resolved, followed by the values that the promise resolved or rejected with.

	:::caution
	If the Promise gets cancelled, this function will return `false`, which is indistinguishable from a rejection. If you need to differentiate, you should use [[Promise.awaitStatus]] instead.
	:::

	```lua
		local worked, value = getTheValue():await()

	if worked then
		print("got", value)
	else
		warn("it failed")
	end
	```

	@yields
	@return boolean -- `true` if the Promise successfully resolved
	@return ...any -- The values the Promise resolved or rejected with.
]=]
function Promise.prototype:await()
	return awaitHelper(self:awaitStatus())
end

local function expectHelper(status, ...)
	if status ~= Promise.Status.Resolved then
		error((...) == nil and "Expected Promise rejected with no value." or (...), 3)
	end

	return ...
end

--[=[
	Yields the current thread until the given Promise completes. Returns the values that the promise resolved with.

	```lua
	local worked = pcall(function()
		print("got", getTheValue():expect())
	end)

	if not worked then
		warn("it failed")
	end
	```

	This is essentially sugar for:

	```lua
	select(2, assert(promise:await()))
	```

	**Errors** if the Promise rejects or gets cancelled.

	@error any -- Errors with the rejection value if this Promise rejects or gets cancelled.
	@yields
	@return ...any -- The values the Promise resolved with.
]=]
function Promise.prototype:expect()
	return expectHelper(self:awaitStatus())
end

-- Backwards compatibility
Promise.prototype.awaitValue = Promise.prototype.expect

--[[
	Intended for use in tests.

	Similar to await(), but instead of yielding if the promise is unresolved,
	_unwrap will throw. This indicates an assumption that a promise has
	resolved.
]]
function Promise.prototype:_unwrap()
	if self._status == Promise.Status.Started then
		error("Promise has not resolved or rejected.", 2)
	end

	local success = self._status == Promise.Status.Resolved

	return success, unpack(self._values, 1, self._valuesLength)
end

function Promise.prototype:_resolve(...)
	if self._status ~= Promise.Status.Started then
		if Promise.is((...)) then
			(...):_consumerCancelled(self)
		end
		return
	end

	-- If the resolved value was a Promise, we chain onto it!
	if Promise.is((...)) then
		-- Without this warning, arguments sometimes mysteriously disappear
		if select("#", ...) > 1 then
			local message = string.format(
				"When returning a Promise from andThen, extra arguments are " .. "discarded! See:\n\n%s",
				self._source
			)
			warn(message)
		end

		local chainedPromise = ...

		local promise = chainedPromise:andThen(function(...)
			self:_resolve(...)
		end, function(...)
			local maybeRuntimeError = chainedPromise._values[1]

			-- Backwards compatibility < v2
			if chainedPromise._error then
				maybeRuntimeError = Error.new({
					error = chainedPromise._error,
					kind = Error.Kind.ExecutionError,
					context = "[No stack trace available as this Promise originated from an older version of the Promise library (< v2)]",
				})
			end

			if Error.isKind(maybeRuntimeError, Error.Kind.ExecutionError) then
				return self:_reject(maybeRuntimeError:extend({
					error = "This Promise was chained to a Promise that errored.",
					trace = "",
					context = string.format(
						"The Promise at:\n\n%s\n...Rejected because it was chained to the following Promise, which encountered an error:\n",
						self._source
					),
				}))
			end

			self:_reject(...)
		end)

		if promise._status == Promise.Status.Cancelled then
			self:cancel()
		elseif promise._status == Promise.Status.Started then
			-- Adopt ourselves into promise for cancellation propagation.
			self._parent = promise
			promise._consumers[self] = true
		end

		return
	end

	self._status = Promise.Status.Resolved
	self._valuesLength, self._values = pack(...)

	-- We assume that these callbacks will not throw errors.
	for _, callback in ipairs(self._queuedResolve) do
		coroutine.wrap(callback)(...)
	end

	self:_finalize()
end

function Promise.prototype:_reject(...)
	if self._status ~= Promise.Status.Started then
		return
	end

	self._status = Promise.Status.Rejected
	self._valuesLength, self._values = pack(...)

	-- If there are any rejection handlers, call those!
	if not isEmpty(self._queuedReject) then
		-- We assume that these callbacks will not throw errors.
		for _, callback in ipairs(self._queuedReject) do
			coroutine.wrap(callback)(...)
		end
	else
		-- At this point, no one was able to observe the error.
		-- An error handler might still be attached if the error occurred
		-- synchronously. We'll wait one tick, and if there are still no
		-- observers, then we should put a message in the console.

		local err = tostring((...))

		coroutine.wrap(function()
			Promise._timeEvent:Wait()

			-- Someone observed the error, hooray!
			if not self._unhandledRejection then
				return
			end

			-- Build a reasonable message
			local message = string.format("Unhandled Promise rejection:\n\n%s\n\n%s", err, self._source)

			for _, callback in ipairs(Promise._unhandledRejectionCallbacks) do
				task.spawn(callback, self, unpack(self._values, 1, self._valuesLength))
			end

			if Promise.TEST then
				-- Don't spam output when we're running tests.
				return
			end

			warn(message)
		end)()
	end

	self:_finalize()
end

--[[
	Calls any :finally handlers. We need this to be a separate method and
	queue because we must call all of the finally callbacks upon a success,
	failure, *and* cancellation.
]]
function Promise.prototype:_finalize()
	for _, callback in ipairs(self._queuedFinally) do
		-- Purposefully not passing values to callbacks here, as it could be the
		-- resolved values, or rejected errors. If the developer needs the values,
		-- they should use :andThen or :catch explicitly.
		coroutine.wrap(callback)(self._status)
	end

	self._queuedFinally = nil
	self._queuedReject = nil
	self._queuedResolve = nil

	-- Clear references to other Promises to allow gc
	if not Promise.TEST then
		self._parent = nil
		self._consumers = nil
	end
end

--[=[
	Chains a Promise from this one that is resolved if this Promise is already resolved, and rejected if it is not resolved at the time of calling `:now()`. This can be used to ensure your `andThen` handler occurs on the same frame as the root Promise execution.

	```lua
	doSomething()
		:now()
		:andThen(function(value)
			print("Got", value, "synchronously.")
		end)
	```

	If this Promise is still running, Rejected, or Cancelled, the Promise returned from `:now()` will reject with the `rejectionValue` if passed, otherwise with a `Promise.Error(Promise.Error.Kind.NotResolvedInTime)`. This can be checked with [[Error.isKind]].

	@param rejectionValue? any -- The value to reject with if the Promise isn't resolved
	@return Promise
]=]
function Promise.prototype:now(rejectionValue)
	local traceback = debug.traceback(nil, 2)
	if self._status == Promise.Status.Resolved then
		return self:_andThen(traceback, function(...)
			return ...
		end)
	else
		return Promise.reject(rejectionValue == nil and Error.new({
			kind = Error.Kind.NotResolvedInTime,
			error = "This Promise was not resolved in time for :now()",
			context = ":now() was called at:\n\n" .. traceback,
		}) or rejectionValue)
	end
end

--[=[
	Repeatedly calls a Promise-returning function up to `times` number of times, until the returned Promise resolves.

	If the amount of retries is exceeded, the function will return the latest rejected Promise.

	```lua
	local function canFail(a, b, c)
		return Promise.new(function(resolve, reject)
			-- do something that can fail

			local failed, thing = doSomethingThatCanFail(a, b, c)

			if failed then
				reject("it failed")
			else
				resolve(thing)
			end
		end)
	end

	local MAX_RETRIES = 10
	local value = Promise.retry(canFail, MAX_RETRIES, "foo", "bar", "baz") -- args to send to canFail
	```

	@since 3.0.0
	@param callback (...: P) -> Promise<T>
	@param times number
	@param ...? P
]=]
function Promise.retry(callback, times, ...)
	assert(isCallable(callback), "Parameter #1 to Promise.retry must be a function")
	assert(type(times) == "number", "Parameter #2 to Promise.retry must be a number")

	local args, length = { ... }, select("#", ...)

	return Promise.resolve(callback(...)):catch(function(...)
		if times > 0 then
			return Promise.retry(callback, times - 1, unpack(args, 1, length))
		else
			return Promise.reject(...)
		end
	end)
end

--[=[
	Repeatedly calls a Promise-returning function up to `times` number of times, waiting `seconds` seconds between each
	retry, until the returned Promise resolves.

	If the amount of retries is exceeded, the function will return the latest rejected Promise.

	@since v3.2.0
	@param callback (...: P) -> Promise<T>
	@param times number
	@param seconds number
	@param ...? P
]=]
function Promise.retryWithDelay(callback, times, seconds, ...)
	assert(isCallable(callback), "Parameter #1 to Promise.retry must be a function")
	assert(type(times) == "number", "Parameter #2 (times) to Promise.retry must be a number")
	assert(type(seconds) == "number", "Parameter #3 (seconds) to Promise.retry must be a number")

	local args, length = { ... }, select("#", ...)

	return Promise.resolve(callback(...)):catch(function(...)
		if times > 0 then
			Promise.delay(seconds):await()

			return Promise.retryWithDelay(callback, times - 1, seconds, unpack(args, 1, length))
		else
			return Promise.reject(...)
		end
	end)
end

--[=[
	Converts an event into a Promise which resolves the next time the event fires.

	The optional `predicate` callback, if passed, will receive the event arguments and should return `true` or `false`, based on if this fired event should resolve the Promise or not. If `true`, the Promise resolves. If `false`, nothing happens and the predicate will be rerun the next time the event fires.

	The Promise will resolve with the event arguments.

	:::tip
	This function will work given any object with a `Connect` method. This includes all Roblox events.
	:::

	```lua
	-- Creates a Promise which only resolves when `somePart` is touched
	-- by a part named `"Something specific"`.
	return Promise.fromEvent(somePart.Touched, function(part)
		return part.Name == "Something specific"
	end)
	```

	@since 3.0.0
	@param event Event -- Any object with a `Connect` method. This includes all Roblox events.
	@param predicate? (...: P) -> boolean -- A function which determines if the Promise should resolve with the given value, or wait for the next event to check again.
	@return Promise<P>
]=]
function Promise.fromEvent(event, predicate)
	predicate = predicate or function()
		return true
	end

	return Promise._new(debug.traceback(nil, 2), function(resolve, _, onCancel)
		local connection
		local shouldDisconnect = false

		local function disconnect()
			connection:Disconnect()
			connection = nil
		end

		-- We use shouldDisconnect because if the callback given to Connect is called before
		-- Connect returns, connection will still be nil. This happens with events that queue up
		-- events when there's nothing connected, such as RemoteEvents

		connection = event:Connect(function(...)
			local callbackValue = predicate(...)

			if callbackValue == true then
				resolve(...)

				if connection then
					disconnect()
				else
					shouldDisconnect = true
				end
			elseif type(callbackValue) ~= "boolean" then
				error("Promise.fromEvent predicate should always return a boolean")
			end
		end)

		if shouldDisconnect and connection then
			return disconnect()
		end

		onCancel(disconnect)
	end)
end

--[=[
	Registers a callback that runs when an unhandled rejection happens. An unhandled rejection happens when a Promise
	is rejected, and the rejection is not observed with `:catch`.

	The callback is called with the actual promise that rejected, followed by the rejection values.

	@since v3.2.0
	@param callback (promise: Promise, ...: any) -- A callback that runs when an unhandled rejection happens.
	@return () -> () -- Function that unregisters the `callback` when called
]=]
function Promise.onUnhandledRejection(callback)
	table.insert(Promise._unhandledRejectionCallbacks, callback)

	return function()
		local index = table.find(Promise._unhandledRejectionCallbacks, callback)

		if index then
			table.remove(Promise._unhandledRejectionCallbacks, index)
		end
	end
end

return Promise
]]></string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="8">
        <Properties>
          <string name="Name">RuntimeLib</string>
          <string name="Source"><![CDATA[local Promise = require(script.Parent.Promise)

local RunService = game:GetService("RunService")

local OUTPUT_PREFIX = "roblox-ts: "
local NODE_MODULES = "node_modules"
local DEFAULT_SCOPE = "@rbxts"

local TS = {}

TS.Promise = Promise

local function isPlugin(context)
	return RunService:IsStudio() and context:FindFirstAncestorWhichIsA("Plugin") ~= nil
end

function TS.getModule(context, scope, moduleName)
	-- legacy call signature
	if moduleName == nil then
		moduleName = scope
		scope = DEFAULT_SCOPE
	end

	-- ensure modules have fully replicated
	if RunService:IsRunning() and RunService:IsClient() and not isPlugin(context) and not game:IsLoaded() then
		game.Loaded:Wait()
	end

	local object = context
	repeat
		local nodeModulesFolder = object:FindFirstChild(NODE_MODULES)
		if nodeModulesFolder then
			local scopeFolder = nodeModulesFolder:FindFirstChild(scope)
			if scopeFolder then
				local module = scopeFolder:FindFirstChild(moduleName)
				if module then
					return module
				end
			end
		end
		object = object.Parent
	until object == nil

	error(OUTPUT_PREFIX .. "Could not find module: " .. moduleName, 2)
end

-- This is a hash which TS.import uses as a kind of linked-list-like history of [Script who Loaded] -> Library
local currentlyLoading = {}
local registeredLibraries = {}

function TS.import(context, module, ...)
	for i = 1, select("#", ...) do
		module = module:WaitForChild((select(i, ...)))
	end

	if module.ClassName ~= "ModuleScript" then
		error(OUTPUT_PREFIX .. "Failed to import! Expected ModuleScript, got " .. module.ClassName, 2)
	end

	currentlyLoading[context] = module

	-- Check to see if a case like this occurs:
	-- module -> Module1 -> Module2 -> module

	-- WHERE currentlyLoading[module] is Module1
	-- and currentlyLoading[Module1] is Module2
	-- and currentlyLoading[Module2] is module

	local currentModule = module
	local depth = 0

	while currentModule do
		depth = depth + 1
		currentModule = currentlyLoading[currentModule]

		if currentModule == module then
			local str = currentModule.Name -- Get the string traceback

			for _ = 1, depth do
				currentModule = currentlyLoading[currentModule]
				str = str .. "  ⇒ " .. currentModule.Name
			end

			error(OUTPUT_PREFIX .. "Failed to import! Detected a circular dependency chain: " .. str, 2)
		end
	end

	if not registeredLibraries[module] then
		if _G[module] then
			error(
				OUTPUT_PREFIX
				.. "Invalid module access! Do you have multiple TS runtimes trying to import this? "
				.. module:GetFullName(),
				2
			)
		end

		_G[module] = TS
		registeredLibraries[module] = true -- register as already loaded for subsequent calls
	end

	local data = require(module)

	if currentlyLoading[context] == module then -- Thread-safe cleanup!
		currentlyLoading[context] = nil
	end

	return data
end

function TS.instanceof(obj, class)
	-- custom Class.instanceof() check
	if type(class) == "table" and type(class.instanceof) == "function" then
		return class.instanceof(obj)
	end

	-- metatable check
	if type(obj) == "table" then
		obj = getmetatable(obj)
		while obj ~= nil do
			if obj == class then
				return true
			end
			local mt = getmetatable(obj)
			if mt then
				obj = mt.__index
			else
				obj = nil
			end
		end
	end

	return false
end

function TS.async(callback)
	return function(...)
		local n = select("#", ...)
		local args = { ... }
		return Promise.new(function(resolve, reject)
			coroutine.wrap(function()
				local ok, result = pcall(callback, unpack(args, 1, n))
				if ok then
					resolve(result)
				else
					reject(result)
				end
			end)()
		end)
	end
end

function TS.await(promise)
	if not Promise.is(promise) then
		return promise
	end

	local status, value = promise:awaitStatus()
	if status == Promise.Status.Resolved then
		return value
	elseif status == Promise.Status.Rejected then
		error(value, 2)
	else
		error("The awaited Promise was cancelled", 2)
	end
end

local SIGN = 2 ^ 31
local COMPLEMENT = 2 ^ 32
local function bit_sign(num)
	-- Restores the sign after an unsigned conversion according to 2s complement.
	if bit32.btest(num, SIGN) then
		return num - COMPLEMENT
	else
		return num
	end
end

function TS.bit_lrsh(a, b)
	return bit_sign(bit32.arshift(a, b))
end

TS.TRY_RETURN = 1
TS.TRY_BREAK = 2
TS.TRY_CONTINUE = 3

function TS.try(func, catch, finally)
	local err, traceback
	local success, exitType, returns = xpcall(
		func,
		function(errInner)
			err = errInner
			traceback = debug.traceback()
		end
	)
	if not success and catch then
		local newExitType, newReturns = catch(err, traceback)
		if newExitType then
			exitType, returns = newExitType, newReturns
		end
	end
	if finally then
		local newExitType, newReturns = finally()
		if newExitType then
			exitType, returns = newExitType, newReturns
		end
	end
	return exitType, returns
end

function TS.generator(callback)
	local co = coroutine.create(callback)
	return {
		next = function(...)
			if coroutine.status(co) == "dead" then
				return { done = true }
			else
				local success, value = coroutine.resume(co, ...)
				if success == false then
					error(value, 2)
				end
				return {
					value = value,
					done = coroutine.status(co) == "dead",
				}
			end
		end,
	}
end

return TS
]]></string>
        </Properties>
      </Item>
      <Item class="Folder" referent="9">
        <Properties>
          <string name="Name">node_modules</string>
        </Properties>
        <Item class="Folder" referent="10">
          <Properties>
            <string name="Name">@flamework</string>
          </Properties>
          <Item class="Folder" referent="11">
            <Properties>
              <string name="Name">components</string>
            </Properties>
            <Item class="ModuleScript" referent="12">
              <Properties>
                <string name="Name">out</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.0
local TS = _G[script]
local Maid = TS.import(script, TS.getModule(script, "@rbxts", "maid").Maid)
local _services = TS.import(script, TS.getModule(script, "@rbxts", "services"))
local CollectionService = _services.CollectionService
local ReplicatedStorage = _services.ReplicatedStorage
local RunService = _services.RunService
local ServerStorage = _services.ServerStorage
local _core = TS.import(script, TS.getModule(script, "@flamework", "core").out)
local Service = _core.Service
local Controller = _core.Controller
local Flamework = _core.Flamework
local Reflect = _core.Reflect
local Modding = _core.Modding
local Signal = TS.import(script, TS.getModule(script, "@rbxts", "signal"))
local ComponentTracker = TS.import(script, script, "componentTracker").ComponentTracker
local DEFAULT_ANCESTOR_BLACKLIST = { ServerStorage, ReplicatedStorage }
--[[
	*
	* Register a class as a Component.
	*
	* @metadata flamework:implements flamework:parameters injectable
]]
local Component = Modding.createMetaDecorator("Class")
local BaseComponent
do
	BaseComponent = setmetatable({}, {
		__tostring = function()
			return "BaseComponent"
		end,
	})
	BaseComponent.__index = BaseComponent
	function BaseComponent.new(...)
		local self = setmetatable({}, BaseComponent)
		return self:constructor(...) or self
	end
	function BaseComponent:constructor()
		self.maid = Maid.new()
		self._attributeChangeHandlers = {}
	end
	function BaseComponent:setInstance(instance, attributes)
		self.instance = instance
		self.attributes = attributes
	end
	function BaseComponent:setAttribute(key, value, postfix)
		local previousValue = self.attributes[key]
		self.attributes[key] = value
		self.instance:SetAttribute(key, value)
		return if postfix then previousValue else value
	end
	function BaseComponent:onAttributeChanged(name, cb)
		local __attributeChangeHandlers = self._attributeChangeHandlers
		local _name = name
		local list = __attributeChangeHandlers[_name]
		if not list then
			local __attributeChangeHandlers_1 = self._attributeChangeHandlers
			local _exp = name
			list = Signal.new()
			local _list = list
			__attributeChangeHandlers_1[_exp] = _list
		end
		return list:Connect(cb)
	end
	function BaseComponent:destroy()
		self.maid:Destroy()
		for _, changeHandler in self._attributeChangeHandlers do
			changeHandler:Destroy()
		end
	end
end
--[[
	*
	* This class is responsible for loading and managing
	* all components in the game.
]]
local Components
do
	Components = setmetatable({}, {
		__tostring = function()
			return "Components"
		end,
	})
	Components.__index = Components
	function Components.new(...)
		local self = setmetatable({}, Components)
		return self:constructor(...) or self
	end
	function Components:constructor()
		self.components = {}
		self.classParentCache = {}
		self.activeComponents = {}
		self.activeInheritedComponents = {}
		self.reverseComponentsMapping = {}
		self.trackers = {}
		self.componentWaiters = {}
	end
	function Components:onInit()
		local components = {}
		local componentConstructors = Modding.getDecorators("$c:init@Component")
		for _, _binding in componentConstructors do
			local ctor = _binding.object
			local args = _binding.arguments
			local identifier = Reflect.getMetadata(ctor, "identifier")
			local componentDependencies = {}
			local parameters = Reflect.getMetadata(ctor, "flamework:parameters")
			if parameters then
				for _1, dependency in parameters do
					local object = Reflect.idToObj[dependency]
					if not object then
						continue
					end
					if not Modding.getDecorator(object, nil, "$c:init@Component") then
						continue
					end
					table.insert(componentDependencies, object)
				end
			end
			local _arg1 = {
				ctor = ctor,
				config = args[1] or {},
				componentDependencies = componentDependencies,
				identifier = identifier,
			}
			components[ctor] = _arg1
		end
		self.components = components
	end
	function Components:onStart()
		for _, _binding in self.components do
			local config = _binding.config
			local ctor = _binding.ctor
			local identifier = _binding.identifier
			local ancestorBlacklist = config.ancestorBlacklist or DEFAULT_ANCESTOR_BLACKLIST
			local ancestorWhitelist = config.ancestorWhitelist
			if config.tag ~= nil then
				local tracker = self:getComponentTracker(ctor)
				local predicate = self:getConfigValue(ctor, "predicate")
				local listener = function(isQualified, instance)
					if isQualified then
						self:addComponent(instance, ctor, true)
					else
						self:removeComponent(instance, ctor)
					end
				end
				local instanceAdded = function(instance)
					if predicate ~= nil and not predicate(instance) then
						return nil
					end
					local _isWhitelisted = ancestorWhitelist
					if _isWhitelisted ~= nil then
						local _arg0 = function(ancestor)
							return instance:IsDescendantOf(ancestor)
						end
						-- ▼ ReadonlyArray.some ▼
						local _result = false
						for _k, _v in _isWhitelisted do
							if _arg0(_v, _k - 1, _isWhitelisted) then
								_result = true
								break
							end
						end
						-- ▲ ReadonlyArray.some ▲
						_isWhitelisted = _result
					end
					local isWhitelisted = _isWhitelisted
					if isWhitelisted == false then
						return nil
					end
					local _arg0 = function(ancestor)
						return instance:IsDescendantOf(ancestor)
					end
					-- ▼ ReadonlyArray.some ▼
					local _result = false
					for _k, _v in ancestorBlacklist do
						if _arg0(_v, _k - 1, ancestorBlacklist) then
							_result = true
							break
						end
					end
					-- ▲ ReadonlyArray.some ▲
					local isBlacklisted = _result
					if isBlacklisted and isWhitelisted == nil then
						return nil
					end
					tracker:trackInstance(instance, listener)
					tracker:setHasTag(instance, true)
				end
				CollectionService:GetInstanceAddedSignal(config.tag):Connect(instanceAdded)
				CollectionService:GetInstanceRemovedSignal(config.tag):Connect(function(instance)
					tracker:untrackInstance(instance, listener)
					tracker:setHasTag(instance, false)
					self:removeComponent(instance, ctor)
				end)
				for _1, instance in CollectionService:GetTagged(config.tag) do
					self:safeCall({ "[Flamework] Failed to instantiate '" .. (tostring(ctor) .. "' for"), instance, "[" .. (instance:GetFullName() .. "]") }, function()
						return instanceAdded(instance)
					end, false)
				end
			end
		end
	end
	function Components:getComponentTracker(component)
		local _trackers = self.trackers
		local _component = component
		local existingTracker = _trackers[_component]
		if existingTracker then
			return existingTracker
		end
		local _components = self.components
		local _component_1 = component
		local componentInfo = _components[_component_1]
		assert(componentInfo, "Provided component does not exist")
		local instanceGuard = self:getConfigValue(component, "instanceGuard")
		local dependencies = {}
		for _, dependency in componentInfo.componentDependencies do
			local _arg0 = self:getComponentTracker(dependency)
			table.insert(dependencies, _arg0)
		end
		local tracker = ComponentTracker.new(componentInfo.identifier, {
			tag = componentInfo.config.tag,
			typeGuard = instanceGuard,
			typeGuardPoll = RunService:IsClient(),
			warningTimeout = componentInfo.config.warningTimeout,
			dependencies = dependencies,
		})
		local _trackers_1 = self.trackers
		local _component_2 = component
		_trackers_1[_component_2] = tracker
		return tracker
	end
	function Components:getParentConstructor(ctor)
		local metatable = getmetatable(ctor)
		if metatable and type(metatable) == "table" then
			local parentConstructor = rawget(metatable, "__index")
			return parentConstructor
		end
	end
	function Components:getOrderedParents(ctor, omitBaseComponent)
		if omitBaseComponent == nil then
			omitBaseComponent = true
		end
		local _classParentCache = self.classParentCache
		local _ctor = ctor
		local cache = _classParentCache[_ctor]
		if cache then
			return cache
		end
		local classes = { ctor }
		local nextParent = ctor
		while true do
			nextParent = self:getParentConstructor(nextParent)
			if not (nextParent ~= nil) then
				break
			end
			if not omitBaseComponent or nextParent ~= BaseComponent then
				local _nextParent = nextParent
				table.insert(classes, _nextParent)
			end
		end
		local _classParentCache_1 = self.classParentCache
		local _ctor_1 = ctor
		_classParentCache_1[_ctor_1] = classes
		return classes
	end
	function Components:getAttributeGuards(ctor)
		local attributes = {}
		local _components = self.components
		local _ctor = ctor
		local metadata = _components[_ctor]
		if metadata then
			if metadata.config.attributes ~= nil then
				for attribute, guard in pairs(metadata.config.attributes) do
					attributes[attribute] = guard
				end
			end
			local parentCtor = getmetatable(ctor)
			if parentCtor.__index ~= nil then
				for attribute, guard in self:getAttributeGuards(parentCtor.__index) do
					if not (attributes[attribute] ~= nil) then
						attributes[attribute] = guard
					end
				end
			end
		end
		return attributes
	end
	function Components:getAttributes(instance, componentInfo, guards)
		local attributes = instance:GetAttributes()
		local newAttributes = {}
		local defaults = self:getConfigValue(componentInfo.ctor, "defaults")
		for key, guard in pairs(guards) do
			local attribute = attributes[key]
			if not guard(attribute) then
				local _result = defaults
				if _result ~= nil then
					_result = _result[key]
				end
				if _result ~= nil then
					local _arg1 = defaults[key]
					newAttributes[key] = _arg1
					instance:SetAttribute(key, defaults[key])
				else
					error(instance:GetFullName() .. (" has invalid attribute '" .. (key .. ("' for '" .. (componentInfo.identifier .. "'")))))
				end
			else
				newAttributes[key] = attribute
			end
		end
		return newAttributes
	end
	function Components:getConfigValue(ctor, key)
		local _components = self.components
		local _ctor = ctor
		local metadata = _components[_ctor]
		if metadata then
			if metadata.config[key] ~= nil then
				return metadata.config[key]
			end
			local parentCtor = getmetatable(ctor)
			if parentCtor.__index ~= nil then
				return self:getConfigValue(parentCtor.__index, key)
			end
		end
	end
	function Components:safeCall(message, func, printStack)
		if printStack == nil then
			printStack = true
		end
		task.spawn(function()
			xpcall(func, function(err)
				local _err = err
				local _condition = type(_err) == "string"
				if _condition then
					_condition = printStack
				end
				if _condition then
					local stack = debug.traceback(err, 2)
					warn(unpack(message))
					warn(stack)
				else
					warn(unpack(message))
					warn(err)
					if printStack then
						warn(debug.traceback(nil, 2))
					end
				end
			end)
		end)
	end
	function Components:setupComponent(instance, attributes, component, construct, _param)
		local config = _param.config
		local ctor = _param.ctor
		local identifier = _param.identifier
		component:setInstance(instance, attributes)
		construct()
		if Flamework._implements(component, "$:flamework@OnStart") then
			self:safeCall({ "[Flamework] Component '" .. (tostring(ctor) .. "' failed to start for"), instance, "[" .. (instance:GetFullName() .. "]") }, function()
				return component:onStart()
			end)
		end
		Modding.addListener(component)
		component.maid:GiveTask(function()
			return Modding.removeListener(component)
		end)
		local refreshAttributes = self:getConfigValue(ctor, "refreshAttributes")
		if refreshAttributes == nil or refreshAttributes then
			local attributeCache = table.clone(attributes)
			local attributeGuards = self:getAttributeGuards(ctor)
			for attribute, guard in pairs(attributeGuards) do
				if type(attribute) == "string" then
					component.maid:GiveTask(instance:GetAttributeChangedSignal(attribute):Connect(function()
						local signal = component._attributeChangeHandlers[attribute]
						local value = instance:GetAttribute(attribute)
						local attributes = component.attributes
						if guard(value) then
							local _result = signal
							if _result ~= nil then
								_result:Fire(value, attributeCache[attribute])
							end
							attributes[attribute] = value
							attributeCache[attribute] = value
						end
					end))
				end
			end
		end
		local _componentWaiters = self.componentWaiters
		local _instance = instance
		local instanceWaiters = _componentWaiters[_instance]
		local _componentWaiters_1 = instanceWaiters
		if _componentWaiters_1 ~= nil then
			_componentWaiters_1 = _componentWaiters_1[ctor]
		end
		local componentWaiters = _componentWaiters_1
		if componentWaiters then
			instanceWaiters[ctor] = nil
			-- ▼ ReadonlyMap.size ▼
			local _size = 0
			for _ in instanceWaiters do
				_size += 1
			end
			-- ▲ ReadonlyMap.size ▲
			if _size == 0 then
				local _componentWaiters_2 = self.componentWaiters
				local _instance_1 = instance
				_componentWaiters_2[_instance_1] = nil
			end
			for waiter in componentWaiters do
				waiter(component)
			end
		end
	end
	function Components:getComponentFromSpecifier(componentSpecifier)
		local _componentSpecifier = componentSpecifier
		local _result
		if type(_componentSpecifier) == "string" then
			local _idToObj = Reflect.idToObj
			local _componentSpecifier_1 = componentSpecifier
			_result = (_idToObj[_componentSpecifier_1])
		else
			_result = componentSpecifier
		end
		return _result
	end
	function Components:getIdFromSpecifier(componentSpecifier)
		if componentSpecifier ~= nil then
			local _componentSpecifier = componentSpecifier
			return if type(_componentSpecifier) == "string" then componentSpecifier else Reflect.getMetadata(componentSpecifier, "identifier")
		end
	end
	function Components:addIdMapping(value, id, inheritedComponents)
		local _inheritedComponents = inheritedComponents
		local _id = id
		local instances = _inheritedComponents[_id]
		if not instances then
			local _inheritedComponents_1 = inheritedComponents
			local _exp = id
			instances = {}
			local _instances = instances
			_inheritedComponents_1[_exp] = _instances
		end
		local _reverseComponentsMapping = self.reverseComponentsMapping
		local _id_1 = id
		local inheritedLookup = _reverseComponentsMapping[_id_1]
		if not inheritedLookup then
			local _reverseComponentsMapping_1 = self.reverseComponentsMapping
			local _exp = id
			inheritedLookup = {}
			local _inheritedLookup = inheritedLookup
			_reverseComponentsMapping_1[_exp] = _inheritedLookup
		end
		local _instances = instances
		local _value = value
		_instances[_value] = true
		local _inheritedLookup = inheritedLookup
		local _value_1 = value
		_inheritedLookup[_value_1] = true
	end
	function Components:removeIdMapping(instance, value, id)
		local _activeInheritedComponents = self.activeInheritedComponents
		local _instance = instance
		local inheritedComponents = _activeInheritedComponents[_instance]
		if not inheritedComponents then
			return nil
		end
		local _id = id
		local instances = inheritedComponents[_id]
		if not instances then
			return nil
		end
		local _reverseComponentsMapping = self.reverseComponentsMapping
		local _id_1 = id
		local inheritedLookup = _reverseComponentsMapping[_id_1]
		if not inheritedLookup then
			return nil
		end
		local _value = value
		instances[_value] = nil
		local _value_1 = value
		inheritedLookup[_value_1] = nil
		-- ▼ ReadonlySet.size ▼
		local _size = 0
		for _ in inheritedLookup do
			_size += 1
		end
		-- ▲ ReadonlySet.size ▲
		if _size == 0 then
			local _reverseComponentsMapping_1 = self.reverseComponentsMapping
			local _id_2 = id
			_reverseComponentsMapping_1[_id_2] = nil
		end
		-- ▼ ReadonlySet.size ▼
		local _size_1 = 0
		for _ in instances do
			_size_1 += 1
		end
		-- ▲ ReadonlySet.size ▲
		if _size_1 == 0 then
			local _id_2 = id
			inheritedComponents[_id_2] = nil
		end
		-- ▼ ReadonlyMap.size ▼
		local _size_2 = 0
		for _ in inheritedComponents do
			_size_2 += 1
		end
		-- ▲ ReadonlyMap.size ▲
		if _size_2 == 0 then
			local _activeInheritedComponents_1 = self.activeInheritedComponents
			local _instance_1 = instance
			_activeInheritedComponents_1[_instance_1] = nil
		end
	end
	function Components:canCreateComponentEager(instance, component)
		local _components = self.components
		local _component = component
		local componentInfo = _components[_component]
		if not componentInfo then
			return false
		end
		local tag = componentInfo.config.tag
		if tag ~= nil and (instance.Parent and CollectionService:HasTag(instance, tag)) then
			local tracker = self:getComponentTracker(component)
			return tracker:checkInstance(instance)
		end
	end
	function Components:getDependencyResolutionOptions(componentInfo, instance)
		if #componentInfo.componentDependencies == 0 then
			return nil
		end
		return {
			handle = function(id)
				local _idToObj = Reflect.idToObj
				local _id = id
				local ctor = _idToObj[_id]
				if ctor and Modding.getDecorator(ctor, nil, "$c:init@Component") then
					local component = self:getComponent(instance, ctor)
					if component == nil then
						local name = instance:GetFullName()
						error("Could not resolve component '" .. (id .. ("' while constructing '" .. (componentInfo.identifier .. ("' (" .. (name .. ")"))))))
					end
					return component
				end
			end,
		}
	end
	function Components:getComponent(instance, componentSpecifier)
		local component = self:getComponentFromSpecifier(componentSpecifier)
		local _arg1 = "Could not find component from specifier: " .. tostring(componentSpecifier)
		assert(component, _arg1)
		local _activeComponents = self.activeComponents
		local _instance = instance
		local activeComponents = _activeComponents[_instance]
		if activeComponents then
			local activeComponent = activeComponents[component]
			if activeComponent then
				return activeComponent
			end
		end
		if self:canCreateComponentEager(instance, component) then
			return self:addComponent(instance, component, true)
		end
	end
	function Components:getComponents(instance, componentSpecifier)
		local componentIdentifier = self:getIdFromSpecifier(componentSpecifier)
		if componentIdentifier == nil then
			return {}
		end
		local _activeInheritedComponents = self.activeInheritedComponents
		local _instance = instance
		local activeComponents = _activeInheritedComponents[_instance]
		if not activeComponents then
			return {}
		end
		local componentsSet = activeComponents[componentIdentifier]
		if not componentsSet then
			return {}
		end
		local _array = {}
		local _length = #_array
		for _v in componentsSet do
			_length += 1
			_array[_length] = _v
		end
		return _array
	end
	function Components:addComponent(instance, componentSpecifier, skipInstanceCheck)
		local component = self:getComponentFromSpecifier(componentSpecifier)
		local _arg1 = "Could not find component from specifier: " .. tostring(componentSpecifier)
		assert(component, _arg1)
		local componentInfo = self.components[component]
		assert(componentInfo, "Provided componentSpecifier does not exist")
		local attributeGuards = self:getAttributeGuards(component)
		local attributes = self:getAttributes(instance, componentInfo, attributeGuards)
		if skipInstanceCheck ~= true then
			local instanceGuard = self:getConfigValue(component, "instanceGuard")
			if instanceGuard ~= nil then
				local _arg0 = instanceGuard(instance)
				local _arg1_1 = instance:GetFullName() .. (" did not pass instance guard check for '" .. (componentInfo.identifier .. "'"))
				assert(_arg0, _arg1_1)
			end
		end
		local _activeComponents = self.activeComponents
		local _instance = instance
		local activeComponents = _activeComponents[_instance]
		if not activeComponents then
			local _activeComponents_1 = self.activeComponents
			local _exp = instance
			activeComponents = {}
			local _activeComponents_2 = activeComponents
			_activeComponents_1[_exp] = _activeComponents_2
		end
		local _activeInheritedComponents = self.activeInheritedComponents
		local _instance_1 = instance
		local inheritedComponents = _activeInheritedComponents[_instance_1]
		if not inheritedComponents then
			local _activeInheritedComponents_1 = self.activeInheritedComponents
			local _exp = instance
			inheritedComponents = {}
			local _inheritedComponents = inheritedComponents
			_activeInheritedComponents_1[_exp] = _inheritedComponents
		end
		local existingComponent = activeComponents[component]
		if existingComponent ~= nil then
			return existingComponent
		end
		local resolutionOptions = self:getDependencyResolutionOptions(componentInfo, instance)
		local _binding = Modding.createDeferredDependency(component, resolutionOptions)
		local componentInstance = _binding[1]
		local construct = _binding[2]
		activeComponents[component] = componentInstance
		for _, parentClass in self:getOrderedParents(component) do
			local parentId = Reflect.getOwnMetadata(parentClass, "identifier")
			if parentId == nil then
				continue
			end
			self:addIdMapping(componentInstance, parentId, inheritedComponents)
		end
		local implementedList = Reflect.getMetadatas(component, "flamework:implements")
		for _, implemented in implementedList do
			for _1, id in implemented do
				self:addIdMapping(componentInstance, id, inheritedComponents)
			end
		end
		self:setupComponent(instance, attributes, componentInstance, construct, componentInfo)
		return componentInstance
	end
	function Components:removeComponent(instance, componentSpecifier)
		local component = self:getComponentFromSpecifier(componentSpecifier)
		local _arg1 = "Could not find component from specifier: " .. tostring(componentSpecifier)
		assert(component, _arg1)
		local _activeComponents = self.activeComponents
		local _instance = instance
		local activeComponents = _activeComponents[_instance]
		if not activeComponents then
			return nil
		end
		local existingComponent = activeComponents[component]
		if not existingComponent then
			return nil
		end
		existingComponent:destroy()
		activeComponents[component] = nil
		for _, parentClass in self:getOrderedParents(component) do
			local parentId = Reflect.getOwnMetadata(parentClass, "identifier")
			if parentId == nil then
				continue
			end
			self:removeIdMapping(instance, existingComponent, parentId)
		end
		local implementedList = Reflect.getMetadatas(component, "flamework:implements")
		for _, implemented in implementedList do
			for _1, id in implemented do
				self:removeIdMapping(instance, existingComponent, id)
			end
		end
		-- ▼ ReadonlyMap.size ▼
		local _size = 0
		for _ in activeComponents do
			_size += 1
		end
		-- ▲ ReadonlyMap.size ▲
		if _size == 0 then
			local _activeComponents_1 = self.activeComponents
			local _instance_1 = instance
			_activeComponents_1[_instance_1] = nil
		end
	end
	function Components:getAllComponents(componentSpecifier)
		local componentIdentifier = self:getIdFromSpecifier(componentSpecifier)
		if componentIdentifier == nil then
			return {}
		end
		local reverseMapping = self.reverseComponentsMapping[componentIdentifier]
		if not reverseMapping then
			return {}
		end
		local _array = {}
		local _length = #_array
		for _v in reverseMapping do
			_length += 1
			_array[_length] = _v
		end
		return _array
	end
	function Components:waitForComponent(instance, componentSpecifier)
		local component = self:getComponentFromSpecifier(componentSpecifier)
		local _arg1 = "Could not find component from specifier: " .. tostring(componentSpecifier)
		assert(component, _arg1)
		return TS.Promise.new(function(resolve, _, onCancel)
			local existingComponent = self:getComponent(instance, componentSpecifier)
			if existingComponent ~= nil then
				return resolve(existingComponent)
			end
			local _componentWaiters = self.componentWaiters
			local _instance = instance
			local instanceWaiters = _componentWaiters[_instance]
			if not instanceWaiters then
				local _componentWaiters_1 = self.componentWaiters
				local _exp = instance
				instanceWaiters = {}
				local _instanceWaiters = instanceWaiters
				_componentWaiters_1[_exp] = _instanceWaiters
			end
			local componentWaiters = instanceWaiters[component]
			if not componentWaiters then
				local _instanceWaiters = instanceWaiters
				componentWaiters = {}
				local _componentWaiters_1 = componentWaiters
				_instanceWaiters[component] = _componentWaiters_1
			end
			onCancel(function()
				local _componentWaiters_1 = componentWaiters
				local _resolve = resolve
				_componentWaiters_1[_resolve] = nil
				-- ▼ ReadonlySet.size ▼
				local _size = 0
				for _1 in componentWaiters do
					_size += 1
				end
				-- ▲ ReadonlySet.size ▲
				if _size == 0 then
					instanceWaiters[component] = nil
				end
				-- ▼ ReadonlyMap.size ▼
				local _size_1 = 0
				for _1 in instanceWaiters do
					_size_1 += 1
				end
				-- ▲ ReadonlyMap.size ▲
				if _size_1 == 0 then
					local _componentWaiters_2 = self.componentWaiters
					local _instance_1 = instance
					_componentWaiters_2[_instance_1] = nil
				end
			end)
			local _componentWaiters_1 = componentWaiters
			local _resolve = resolve
			_componentWaiters_1[_resolve] = true
		end)
	end
end
-- (Flamework) Components metadata
Reflect.defineMetadata(Components, "identifier", "$c:init@Components")
Reflect.defineMetadata(Components, "flamework:implements", { "$:flamework@OnInit", "$:flamework@OnStart" })
Reflect.decorate(Components, "$:flamework@Service", Service, { {
	loadOrder = 0,
} })
Reflect.decorate(Components, "$:flamework@Controller", Controller, { {
	loadOrder = 0,
} })
return {
	Component = Component,
	BaseComponent = BaseComponent,
	Components = Components,
}
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="13">
                <Properties>
                  <string name="Name">componentTracker</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.0
local TS = _G[script]
local CollectionService = TS.import(script, TS.getModule(script, "@rbxts", "services")).CollectionService
local ComponentTracker
do
	ComponentTracker = setmetatable({}, {
		__tostring = function()
			return "ComponentTracker"
		end,
	})
	ComponentTracker.__index = ComponentTracker
	function ComponentTracker.new(...)
		local self = setmetatable({}, ComponentTracker)
		return self:constructor(...) or self
	end
	function ComponentTracker:constructor(identifier, criteria)
		self.identifier = identifier
		self.criteria = criteria
		self.instances = {}
	end
	function ComponentTracker:getInstanceTracker(instance, create)
		if create == nil then
			create = true
		end
		local _instances = self.instances
		local _instance = instance
		local tracker = _instances[_instance]
		if not tracker and create then
			tracker = {
				unmetCriteria = {},
				listeners = {},
				cleanup = {},
				isQualified = true,
			}
			local _instances_1 = self.instances
			local _instance_1 = instance
			local _tracker = tracker
			_instances_1[_instance_1] = _tracker
		end
		return tracker
	end
	function ComponentTracker:updateListeners(instance, tracker)
		local isQualified = next(tracker.unmetCriteria) == nil
		if isQualified ~= tracker.isQualified then
			tracker.isQualified = isQualified
			for listener in tracker.listeners do
				listener(isQualified, instance)
			end
			local warningThread = tracker.timeoutWarningThread
			if isQualified and warningThread then
				tracker.timeoutWarningThread = nil
				task.cancel(warningThread)
			end
		end
	end
	function ComponentTracker:setupTracker(instance, tracker)
		local _binding = self.criteria
		local typeGuard = _binding.typeGuard
		local typeGuardPoll = _binding.typeGuardPoll
		local dependencies = _binding.dependencies
		if typeGuard and typeGuardPoll then
			local addedConnection
			local removingConnection
			local connectRemoving
			local connectAdded = function()
				if removingConnection then
					removingConnection:Disconnect()
					removingConnection = nil
				end
				local isScheduled = false
				addedConnection = instance.DescendantAdded:Connect(function()
					if not isScheduled then
						isScheduled = true
						task.defer(function()
							isScheduled = false
							if typeGuard(instance) then
								connectRemoving()
								tracker.unmetCriteria["type guard"] = nil
								self:updateListeners(instance, tracker)
							end
						end)
					end
				end)
			end
			connectRemoving = function()
				if addedConnection then
					addedConnection:Disconnect()
					addedConnection = nil
				end
				local isScheduled = false
				removingConnection = instance.DescendantRemoving:Connect(function()
					if not isScheduled then
						isScheduled = true
						task.defer(function()
							isScheduled = false
							if not typeGuard(instance) then
								connectAdded()
								tracker.unmetCriteria["type guard"] = true
								self:updateListeners(instance, tracker)
							end
						end)
					end
				end)
			end
			local _cleanup = tracker.cleanup
			local _arg0 = function()
				local _result = addedConnection
				if _result ~= nil then
					_result:Disconnect()
				end
				local _result_1 = removingConnection
				if _result_1 ~= nil then
					_result_1:Disconnect()
				end
			end
			_cleanup[_arg0] = true
			if tracker.unmetCriteria["type guard"] ~= nil then
				connectAdded()
			else
				connectRemoving()
			end
		end
		if dependencies then
			for _, dependency in dependencies do
				local listener = function(isQualified)
					if isQualified then
						tracker.unmetCriteria[dependency] = nil
					else
						tracker.unmetCriteria[dependency] = true
					end
					self:updateListeners(instance, tracker)
				end
				dependency:trackInstance(instance, listener)
				local _cleanup = tracker.cleanup
				local _arg0 = function()
					dependency:untrackInstance(instance, listener)
				end
				_cleanup[_arg0] = true
			end
		end
		if not tracker.isQualified and self.criteria.warningTimeout ~= 0 then
			local _fn = task
			local _condition = self.criteria.warningTimeout
			if _condition == nil then
				_condition = 5
			end
			tracker.timeoutWarningThread = _fn.delay(_condition, function()
				local reasons = {}
				for criteria in tracker.unmetCriteria do
					if type(criteria) == "string" then
						table.insert(reasons, criteria)
					end
				end
				if dependencies then
					for _, dependency in dependencies do
						if tracker.unmetCriteria[dependency] ~= nil then
							local _arg0 = "dependency '" .. (dependency.identifier .. "'")
							table.insert(reasons, _arg0)
						end
					end
				end
				warn("[Flamework] Infinite yield possible on instance '" .. (instance:GetFullName() .. "'"))
				warn("Waiting for component '" .. (self.identifier .. "'"))
				warn("Waiting for the following criteria: " .. table.concat(reasons, ", "))
			end)
		end
	end
	function ComponentTracker:testInstance(instance, tracker)
		local result = true
		if self.criteria.dependencies then
			for _, dependency in self.criteria.dependencies do
				if not dependency:checkInstance(instance) then
					result = false
					if tracker then
						tracker.unmetCriteria[dependency] = true
						self:updateListeners(instance, tracker)
					else
						return result
					end
				end
			end
		end
		if self.criteria.typeGuard then
			if not self.criteria.typeGuard(instance) then
				result = false
				if tracker then
					tracker.unmetCriteria["type guard"] = true
					self:updateListeners(instance, tracker)
				else
					return result
				end
			end
		end
		if self.criteria.tag ~= nil then
			if not CollectionService:HasTag(instance, self.criteria.tag) then
				result = false
				if tracker then
					tracker.unmetCriteria["CollectionService tag"] = true
					self:updateListeners(instance, tracker)
				else
					return result
				end
			end
		end
		return result
	end
	function ComponentTracker:setHasTag(instance, hasTag)
		local tracker = self:getInstanceTracker(instance, false)
		if tracker then
			if hasTag then
				tracker.unmetCriteria["CollectionService tag"] = nil
			else
				tracker.unmetCriteria["CollectionService tag"] = true
			end
			self:updateListeners(instance, tracker)
		end
	end
	function ComponentTracker:checkInstance(instance)
		local tracker = self:getInstanceTracker(instance, false)
		if tracker then
			return tracker.isQualified
		end
		return self:testInstance(instance, tracker)
	end
	function ComponentTracker:isTracked(instance)
		local _instances = self.instances
		local _instance = instance
		return _instances[_instance] ~= nil
	end
	function ComponentTracker:trackInstance(instance, listener)
		local _instances = self.instances
		local _instance = instance
		local isNewInstance = not (_instances[_instance] ~= nil)
		local tracker = self:getInstanceTracker(instance)
		if isNewInstance then
			self:testInstance(instance, tracker)
			self:setupTracker(instance, tracker)
		end
		local _listeners = tracker.listeners
		local _listener = listener
		_listeners[_listener] = true
		listener(tracker.isQualified, instance)
	end
	function ComponentTracker:untrackInstance(instance, listener)
		local tracker = self:getInstanceTracker(instance, false)
		if tracker then
			local _listeners = tracker.listeners
			local _listener = listener
			_listeners[_listener] = nil
			if next(tracker.listeners) == nil then
				for cleanup in tracker.cleanup do
					cleanup()
				end
				local _instances = self.instances
				local _instance = instance
				_instances[_instance] = nil
			end
		end
	end
end
return {
	ComponentTracker = ComponentTracker,
}
]]></string>
                </Properties>
              </Item>
            </Item>
          </Item>
          <Item class="Folder" referent="14">
            <Properties>
              <string name="Name">core</string>
            </Properties>
            <Item class="ModuleScript" referent="15">
              <Properties>
                <string name="Name">out</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.0
local TS = _G[script]
local exports = {}
exports.Reflect = TS.import(script, script, "reflect").Reflect
exports.Modding = TS.import(script, script, "modding").Modding
local _flamework = TS.import(script, script, "flamework")
exports.Controller = _flamework.Controller
exports.Dependency = _flamework.Dependency
exports.External = _flamework.External
exports.Service = _flamework.Service
exports.Flamework = _flamework.Flamework
return exports
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="16">
                <Properties>
                  <string name="Name">flamework</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.0
local TS = _G[script]
local _services = TS.import(script, TS.getModule(script, "@rbxts", "services"))
local Players = _services.Players
local RunService = _services.RunService
local Metadata = TS.import(script, script.Parent, "metadata").Metadata
local Modding = TS.import(script, script.Parent, "modding").Modding
local Reflect = TS.import(script, script.Parent, "reflect").Reflect
local ArtificialDependency, Flamework
local Flamework = {}
do
	local _container = Flamework
	local flameworkConfig = {
		isDefault = true,
	}
	_container.flameworkConfig = flameworkConfig
	_container.isInitialized = false
	local isPreloading = false
	-- * @hidden
	local hasFlameworkIgnited
	local function resolveDependency(id)
		if isPreloading then
			local source, line = debug.info(2, "sl")
			warn("[Flamework] Attempting to load dependency '" .. (id .. "' during preloading."))
			warn("This is prone to race conditions and is not guaranteed to succeed.")
			warn("Script '" .. (source .. ("', Line " .. tostring(line))))
		elseif not hasFlameworkIgnited and Metadata.gameConfig.disableDependencyWarnings ~= true then
			local source, line = debug.info(2, "sl")
			warn("[Flamework] Dependency '" .. (id .. "' was loaded before ignition."))
			warn("This is considered bad practice and should be avoided.")
			warn("You can disable this warning in flamework.json")
			warn("Script '" .. (source .. ("', Line " .. tostring(line))))
		end
		return Modding.resolveDependency(ArtificialDependency, id, 0, {})
	end
	_container.resolveDependency = resolveDependency
	-- * @hidden
	local logIfVerbose
	local function _addPaths(...)
		local args = { ... }
		local preloadPaths = {}
		for _, arg in args do
			local service = table.remove(arg, 1)
			local currentPath = game:GetService(service)
			if service == "StarterPlayer" then
				if arg[1] ~= "StarterPlayerScripts" then
					error("StarterPlayer only supports StarterPlayerScripts")
				end
				if not RunService:IsClient() then
					error("The server cannot load StarterPlayer content")
				end
				currentPath = Players.LocalPlayer:WaitForChild("PlayerScripts")
				table.remove(arg, 1)
			end
			do
				local i = 0
				local _shouldIncrement = false
				while true do
					if _shouldIncrement then
						i += 1
					else
						_shouldIncrement = true
					end
					if not (i < #arg) then
						break
					end
					currentPath = currentPath:WaitForChild(arg[i + 1])
				end
			end
			local _currentPath = currentPath
			table.insert(preloadPaths, _currentPath)
		end
		local preload = function(moduleScript)
			isPreloading = true
			local start = os.clock()
			local success, value = pcall(require, moduleScript)
			local endTime = math.floor((os.clock() - start) * 1000)
			isPreloading = false
			if not success then
				error(moduleScript:GetFullName() .. (" failed to preload (" .. (tostring(endTime) .. ("ms): " .. tostring(value)))))
			end
		end
		for _, path in preloadPaths do
			logIfVerbose("Preloading directory " .. path:GetFullName())
			if path:IsA("ModuleScript") then
				preload(path)
			end
			for _1, instance in path:GetDescendants() do
				if instance:IsA("ModuleScript") then
					preload(instance)
				end
			end
		end
	end
	_container._addPaths = _addPaths
	-- * @hidden
	local function _implements(object, id)
		local _exp = Reflect.getMetadatas(object, "flamework:implements")
		local _arg0 = function(impl)
			local _impl = impl
			local _id = id
			return table.find(_impl, _id) ~= nil
		end
		-- ▼ ReadonlyArray.some ▼
		local _result = false
		for _k, _v in _exp do
			if _arg0(_v, _k - 1, _exp) then
				_result = true
				break
			end
		end
		-- ▲ ReadonlyArray.some ▲
		return _result
	end
	_container._implements = _implements
	function logIfVerbose(...)
		local args = { ... }
		if Metadata.getLogLevel() == "verbose" then
			print("[Flamework (verbose)]", unpack(args))
		end
	end
	local function isConstructor(obj)
		return obj.new ~= nil and obj.constructor ~= nil
	end
	local function getIdentifier(obj, suffix)
		if suffix == nil then
			suffix = ""
		end
		local _condition = Reflect.getMetadata(obj, "identifier")
		if _condition == nil then
			_condition = "UnidentifiedFlameworkListener" .. suffix
		end
		return _condition
	end
	-- This returns a Map rather than an Array because table.sort is unstable and will not preserve element order.
	local function topologicalSort(objects)
		-- This implementation ignores circular dependency trees.
		local currentSize = 0
		local sorted = {}
		local visited = {}
		local visitor
		visitor = function(node)
			local _node = node
			if visited[_node] ~= nil then
				return nil
			end
			local _node_1 = node
			visited[_node_1] = true
			local _idToObj = Reflect.idToObj
			local _node_2 = node
			local object = _idToObj[_node_2]
			if not object then
				return nil
			end
			local dependencies = Reflect.getMetadata(object, "flamework:parameters")
			for _, dependency in dependencies or {} do
				visitor(dependency)
			end
			local _exp = node
			local _original = currentSize
			currentSize += 1
			sorted[_exp] = _original
		end
		for _, node in objects do
			visitor(node)
		end
		return sorted
	end
	local externalClasses = {}
	local isProfiling = Metadata.isProfiling()
	local inactiveThread
	local function reusableThread(func)
		local thread = coroutine.running()
		while true do
			if inactiveThread == thread then
				inactiveThread = nil
			end
			func()
			-- If there's a different idle thread, we should end the current thread.
			if inactiveThread ~= nil then
				break
			end
			inactiveThread = thread
			func = coroutine.yield()
		end
	end
	local function profileYielding(func, identifier)
		if isProfiling then
			return function()
				-- `profilebegin` will end when this thread dies or yields.
				debug.profilebegin(identifier)
				debug.setmemorycategory(identifier)
				func()
				debug.resetmemorycategory()
			end
		else
			return func
		end
	end
	local function reuseThread(func)
		if inactiveThread then
			task.spawn(inactiveThread, func)
		else
			task.spawn(reusableThread, func)
		end
	end
	--[[
		*
		* Allow an external module to be bootstrapped by Flamework.ignite()
	]]
	local function registerExternalClass(ctor)
		local _ctor = ctor
		externalClasses[_ctor] = true
	end
	_container.registerExternalClass = registerExternalClass
	hasFlameworkIgnited = false
	--[[
		*
		* Initialize Flamework.
		*
		* This will start up the lifecycle events on all currently registered
		* classes.
		*
		* You should preload all necessary directories before calling this
		* as newly registered classes will not run their lifecycle events.
		*
		* @returns All the dependencies that have been loaded.
	]]
	local function ignite(patchedConfig)
		if hasFlameworkIgnited then
			error("Flamework.ignite() should only be called once")
		end
		hasFlameworkIgnited = true
		if patchedConfig then
			for key, value in pairs(patchedConfig) do
				flameworkConfig[key] = value
			end
		end
		for ctor in Reflect.objToId do
			if not isConstructor(ctor) then
				continue
			end
			if not Reflect.getMetadata(ctor, "flamework:singleton") then
				continue
			end
			local isPatched = Reflect.getOwnMetadata(ctor, "flamework:isPatched")
			if flameworkConfig.loadOverride and (not (table.find(flameworkConfig.loadOverride, ctor) ~= nil) and not isPatched) then
				continue
			end
			local isExternal = Reflect.getOwnMetadata(ctor, "flamework:isExternal")
			if isExternal and not (externalClasses[ctor] ~= nil) then
				continue
			end
			Modding.resolveSingleton(ctor)
			logIfVerbose("Resolving singleton " .. tostring(ctor))
		end
		local dependencies = {}
		for ctor, dependency in Modding.getSingletons() do
			local _condition = Reflect.getMetadata(ctor, "flamework:loadOrder")
			if _condition == nil then
				_condition = 1
			end
			local loadOrder = _condition
			local _arg0 = { dependency, loadOrder }
			table.insert(dependencies, _arg0)
		end
		local _arg0 = function(_param)
			local obj = _param[1]
			return getIdentifier(obj)
		end
		-- ▼ ReadonlyArray.map ▼
		local _newValue = table.create(#dependencies)
		for _k, _v in dependencies do
			_newValue[_k] = _arg0(_v, _k - 1, dependencies)
		end
		-- ▲ ReadonlyArray.map ▲
		local sortedDependencies = topologicalSort(_newValue)
		local start = {}
		local init = {}
		local tick = {}
		local render = {}
		local physics = {}
		local _arg0_1 = function(_param, _param_1)
			local depA = _param[1]
			local aOrder = _param[2]
			local depB = _param_1[1]
			local bOrder = _param_1[2]
			if aOrder ~= bOrder then
				return aOrder < bOrder
			end
			local _arg0_2 = getIdentifier(depA)
			local aIndex = sortedDependencies[_arg0_2]
			local _arg0_3 = getIdentifier(depB)
			local bIndex = sortedDependencies[_arg0_3]
			return aIndex < bIndex
		end
		table.sort(dependencies, _arg0_1)
		Modding.onListenerAdded(function(object)
			local _object = object
			local _arg1 = getIdentifier(object, "/OnTick")
			tick[_object] = _arg1
			return tick
		end, "$:flamework@OnTick")
		Modding.onListenerAdded(function(object)
			local _object = object
			local _arg1 = getIdentifier(object, "/OnPhysics")
			physics[_object] = _arg1
			return physics
		end, "$:flamework@OnPhysics")
		Modding.onListenerAdded(function(object)
			local _object = object
			local _arg1 = getIdentifier(object, "/OnRender")
			render[_object] = _arg1
			return render
		end, "$:flamework@OnRender")
		Modding.onListenerRemoved(function(object)
			local _object = object
			-- ▼ Map.delete ▼
			local _valueExisted = tick[_object] ~= nil
			tick[_object] = nil
			-- ▲ Map.delete ▲
			return _valueExisted
		end, "$:flamework@OnTick")
		Modding.onListenerRemoved(function(object)
			local _object = object
			-- ▼ Map.delete ▼
			local _valueExisted = physics[_object] ~= nil
			physics[_object] = nil
			-- ▲ Map.delete ▲
			return _valueExisted
		end, "$:flamework@OnPhysics")
		Modding.onListenerRemoved(function(object)
			local _object = object
			-- ▼ Map.delete ▼
			local _valueExisted = render[_object] ~= nil
			render[_object] = nil
			-- ▲ Map.delete ▲
			return _valueExisted
		end, "$:flamework@OnRender")
		for _, _binding in dependencies do
			local dependency = _binding[1]
			if Flamework._implements(dependency, "$:flamework@OnInit") then
				local _arg0_2 = { dependency, getIdentifier(dependency) }
				table.insert(init, _arg0_2)
			end
			if Flamework._implements(dependency, "$:flamework@OnStart") then
				local _arg0_2 = { dependency, getIdentifier(dependency) }
				table.insert(start, _arg0_2)
			end
		end
		for _, _binding in init do
			local dependency = _binding[1]
			local identifier = _binding[2]
			if isProfiling then
				debug.setmemorycategory(identifier)
			end
			logIfVerbose("OnInit " .. identifier)
			local initResult = dependency:onInit()
			if TS.Promise.is(initResult) then
				local status, value = initResult:awaitStatus()
				if status == TS.Promise.Status.Rejected then
					error("OnInit failed for dependency '" .. (identifier .. ("'. " .. tostring(value))))
				end
			end
		end
		debug.resetmemorycategory()
		_container.isInitialized = true
		RunService.Heartbeat:Connect(function(dt)
			for dependency, identifier in tick do
				reuseThread(profileYielding(function()
					return dependency:onTick(dt)
				end, identifier))
			end
		end)
		RunService.Stepped:Connect(function(time, dt)
			for dependency, identifier in physics do
				reuseThread(profileYielding(function()
					return dependency:onPhysics(dt, time)
				end, identifier))
			end
		end)
		if RunService:IsClient() then
			RunService.RenderStepped:Connect(function(dt)
				for dependency, identifier in render do
					reuseThread(profileYielding(function()
						return dependency:onRender(dt)
					end, identifier))
				end
			end)
		end
		for _, _binding in start do
			local dependency = _binding[1]
			local identifier = _binding[2]
			logIfVerbose("OnStart " .. identifier)
			reuseThread(profileYielding(function()
				return dependency:onStart()
			end, identifier))
		end
	end
	_container.ignite = ignite
	--[[
		*
		* Preload the specified paths by requiring all ModuleScript descendants.
	]]
	--[[
		*
		* Preload the specified paths by requiring all ModuleScript descendants.
	]]
	--[[
		*
		* Retrieve the identifier for the specified type.
	]]
	--[[
		*
		* Check if the constructor implements the specified interface.
	]]
	--[[
		*
		* Check if object implements the specified interface.
	]]
	--[[
		*
		* Creates a type guard from any arbitrary type.
	]]
	--[[
		*
		* Hash a function using the method used internally by Flamework.
		* If a context is provided, then Flamework will create a new hash
		* if the specified string does not have one in that context.
		* @param str The string to hash
		* @param context A scope for the hash
	]]
	--[[
		*
		* Utility for use in test suites, not recommended for anything else.
	]]
	local Testing = {}
	do
		local _container_1 = Testing
		local function patchDependency(patchedClass, id)
			if id == nil then
				error("Patching failed, no ID")
			end
			local _idToObj = Reflect.idToObj
			local _id = id
			local idCtor = _idToObj[_id]
			if idCtor == nil then
				error("Dependency " .. (id .. " was not found and cannot be patched."))
			end
			if Modding.getSingletons()[idCtor] ~= nil then
				error(id .. " has already been resolved, continuing is unsafe")
			end
			local objMetadata = Reflect.metadata[idCtor]
			if not objMetadata then
				error("Dependency " .. (id .. " has no existing metadata."))
			end
			Reflect.defineMetadata(idCtor, "flamework:isPatched", true)
			Reflect.metadata[idCtor] = nil
			local _metadata = Reflect.metadata
			local _patchedClass = patchedClass
			_metadata[_patchedClass] = objMetadata
			local _objToId = Reflect.objToId
			local _patchedClass_1 = patchedClass
			local _id_1 = id
			_objToId[_patchedClass_1] = _id_1
			local _idToObj_1 = Reflect.idToObj
			local _id_2 = id
			local _patchedClass_2 = patchedClass
			_idToObj_1[_id_2] = _patchedClass_2
		end
		_container_1.patchDependency = patchDependency
	end
	_container.Testing = Testing
end
--[[
	*
	* An internal class used for resolving the Dependency<T> macro.
]]
do
	ArtificialDependency = setmetatable({}, {
		__tostring = function()
			return "ArtificialDependency"
		end,
	})
	ArtificialDependency.__index = ArtificialDependency
	function ArtificialDependency.new(...)
		local self = setmetatable({}, ArtificialDependency)
		return self:constructor(...) or self
	end
	function ArtificialDependency:constructor()
	end
end
Reflect.defineMetadata(ArtificialDependency, "identifier", "$:flamework@ArtificialDependency")
Reflect.defineMetadata(ArtificialDependency, "flamework:isArtificial", true)
--[[
	*
	* Register a class as a Service.
	*
	* @server
	* @metadata flamework:implements flamework:parameters injectable
]]
local Service = Modding.createDecorator("Class", function(descriptor, _param)
	local cfg = _param[1]
	if RunService:IsServer() then
		Reflect.defineMetadata(descriptor.object, "flamework:singleton", true)
		local _fn = Reflect
		local _exp = descriptor.object
		local _result = cfg
		if _result ~= nil then
			_result = _result.loadOrder
		end
		_fn.defineMetadata(_exp, "flamework:loadOrder", _result)
	end
end)
--[[
	*
	* Register a class as a Controller.
	*
	* @client
	* @metadata flamework:implements flamework:parameters injectable
]]
local Controller = Modding.createDecorator("Class", function(descriptor, _param)
	local cfg = _param[1]
	if RunService:IsClient() then
		Reflect.defineMetadata(descriptor.object, "flamework:singleton", true)
		local _fn = Reflect
		local _exp = descriptor.object
		local _result = cfg
		if _result ~= nil then
			_result = _result.loadOrder
		end
		_fn.defineMetadata(_exp, "flamework:loadOrder", _result)
	end
end)
--[[
	*
	* Marks this class as an external class.
	*
	* External classes are designed for packages and won't be
	* bootstrapped unless explicitly specified. Excluding this
	* inside of a package will make the class load as long as
	* it has been loaded.
]]
local External = Modding.createDecorator("Class", function(descriptor)
	Reflect.defineMetadata(descriptor.object, "flamework:isExternal", true)
end)
--[[
	*
	* Hook into the OnInit lifecycle event.
]]
--[[
	*
	* Hook into the OnStart lifecycle event.
]]
--[[
	*
	* Hook into the OnTick lifecycle event.
	* Equivalent to: RunService.Heartbeat
]]
--[[
	*
	* Hook into the OnPhysics lifecycle event.
	* Equivalent to: RunService.Stepped
]]
--[[
	*
	* Hook into the OnRender lifecycle event.
	* Equivalent to: RunService.RenderStepped
	*
	* @client
]]
return {
	Flamework = Flamework,
	Service = Service,
	Controller = Controller,
	External = External,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="17">
                <Properties>
                  <string name="Name">metadata</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.0
local TS = _G[script]
local RunService = TS.import(script, TS.getModule(script, "@rbxts", "services")).RunService
--[[
	*
	* Metadata exposed by the Flamework transformer.
]]
local Metadata = {}
do
	local _container = Metadata
	--[[
		*
		* Runtime metadata generated by the transformer
	]]
	--[[
		*
		* Runtime metadata generated by the transformer
	]]
	local function getConfigContainer()
		local current = script
		while current do
			local flamework = current:FindFirstChild("flamework")
			if flamework then
				local metadata = flamework:FindFirstChild("config")
				if metadata then
					return require(metadata)
				end
			end
			current = current.Parent
		end
	end
	local configContainer
	local function getConfig(packageId)
		local _result
		if packageId == nil then
			local _result_1 = configContainer
			if _result_1 ~= nil then
				_result_1 = _result_1.game
			end
			_result = _result_1
		else
			local _result_1 = configContainer
			if _result_1 ~= nil then
				local _packages = _result_1.packages
				local _packageId = packageId
				_result_1 = _packages[_packageId]
			end
			_result = _result_1
		end
		return _result
	end
	configContainer = getConfigContainer()
	_container.configContainer = configContainer
	local _result = configContainer
	if _result ~= nil then
		_result = _result.game
	end
	local _condition = _result
	if _condition == nil then
		_condition = {}
	end
	local gameConfig = _condition
	_container.gameConfig = gameConfig
	local function getLogLevel(packageId)
		local config = getConfig(packageId)
		if not config or config.logLevel == nil then
			return "none"
		end
		return config.logLevel
	end
	_container.getLogLevel = getLogLevel
	local function isProfiling(packageId)
		local config = getConfig(packageId)
		if not config or config.profiling == nil then
			return RunService:IsStudio()
		end
		return config.profiling
	end
	_container.isProfiling = isProfiling
end
return {
	Metadata = Metadata,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="18">
                <Properties>
                  <string name="Name">modding</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.0
local TS = _G[script]
local Signal = TS.import(script, TS.getModule(script, "@rbxts", "signal"))
local Reflect = TS.import(script, script.Parent, "reflect").Reflect
local getDeferredConstructor, isConstructor
local Modding = {}
do
	local _container = Modding
	local listeners = {}
	local lifecycleListeners = {}
	local decoratorListeners = {}
	local listenerAdded = Signal.new()
	local listenerRemoved = Signal.new()
	local listenerAddedEvents = {}
	local listenerRemovedEvents = {}
	local dependencyResolution = {}
	local resolvedSingletons = {}
	local loadingList = {}
	--[[
		*
		* Registers a listener for lifecycle events.
	]]
	local function addListener(object)
		local listener = {
			eventIds = {},
			involvement = {},
		}
		for _, lifecycleEvents in Reflect.getMetadatas(object, "flamework:implements") do
			for _1, lifecycleEvent in lifecycleEvents do
				if listener.eventIds[lifecycleEvent] ~= nil then
					continue
				end
				local lifecycleListener = lifecycleListeners[lifecycleEvent]
				if not lifecycleListener then
					lifecycleListener = {}
					local _lifecycleListener = lifecycleListener
					lifecycleListeners[lifecycleEvent] = _lifecycleListener
				end
				local _lifecycleListener = lifecycleListener
				local _object = object
				_lifecycleListener[_object] = true
				listener.eventIds[lifecycleEvent] = true
				local _involvement = listener.involvement
				local _lifecycleListener_1 = lifecycleListener
				table.insert(_involvement, _lifecycleListener_1)
				local _result = listenerAddedEvents[lifecycleEvent]
				if _result ~= nil then
					_result:Fire(object)
				end
			end
		end
		local decorators = Reflect.getMetadata(object, "flamework:decorators")
		if decorators then
			for _, decorator in decorators do
				if listener.eventIds[decorator] ~= nil then
					continue
				end
				local decoratorListener = decoratorListeners[decorator]
				if not decoratorListener then
					decoratorListener = {}
					local _decoratorListener = decoratorListener
					decoratorListeners[decorator] = _decoratorListener
				end
				local _decoratorListener = decoratorListener
				local _object = object
				_decoratorListener[_object] = true
				listener.eventIds[decorator] = true
				local _involvement = listener.involvement
				local _decoratorListener_1 = decoratorListener
				table.insert(_involvement, _decoratorListener_1)
				local _result = listenerAddedEvents[decorator]
				if _result ~= nil then
					_result:Fire(object)
				end
			end
		end
		local _object = object
		listeners[_object] = listener
		listenerAdded:Fire(object)
	end
	_container.addListener = addListener
	--[[
		*
		* Removes a listener for lifecycle events and decorators.
	]]
	local function removeListener(object)
		local _object = object
		local listener = listeners[_object]
		if not listener then
			return nil
		end
		for _, set in listener.involvement do
			local _object_1 = object
			set[_object_1] = nil
		end
		for id in listener.eventIds do
			local _result = listenerRemovedEvents[id]
			if _result ~= nil then
				_result:Fire(object)
			end
		end
		local _object_1 = object
		listeners[_object_1] = nil
		listenerRemoved:Fire(object)
	end
	_container.removeListener = removeListener
	--[[
		*
		* Registers a listener added event.
		* Fires whenever any listener is added.
		*
		* Fires for all existing listeners.
	]]
	--[[
		*
		* Registers a listener added event.
		* Fires whenever a listener has a decorator with the specified ID.
		*
		* Fires for all existing listeners.
	]]
	--[[
		*
		* Registers a listener added event.
		* Fires whenever a listener has a lifecycle event with the specified ID.
		*
		* Fires for all existing listeners.
	]]
	--[[
		*
		* Registers a listener added event.
	]]
	local function onListenerAdded(func, id)
		if id ~= nil then
			local _id = id
			local listenerAddedEvent = listenerAddedEvents[_id]
			if not listenerAddedEvent then
				local _exp = id
				listenerAddedEvent = Signal.new()
				local _listenerAddedEvent = listenerAddedEvent
				listenerAddedEvents[_exp] = _listenerAddedEvent
			end
			local _id_1 = id
			local _condition = lifecycleListeners[_id_1]
			if not _condition then
				local _id_2 = id
				_condition = decoratorListeners[_id_2]
			end
			local existingListeners = _condition
			if existingListeners then
				for listener in existingListeners do
					task.spawn(func, listener)
				end
			end
			return listenerAddedEvent:Connect(func)
		else
			for listener in listeners do
				task.spawn(func, listener)
			end
			return listenerAdded:Connect(func)
		end
	end
	_container.onListenerAdded = onListenerAdded
	--[[
		*
		* Registers a listener removed event.
		*
		* Fires whenever any listener is removed.
	]]
	--[[
		*
		* Registers a listener removed event.
		*
		* Fires whenever a listener has a decorator with the specified ID.
	]]
	--[[
		*
		* Registers a listener removed event.
		*
		* Fires whenever a listener has a lifecycle event with the specified ID.
	]]
	--[[
		*
		* Registers a listener removed event.
	]]
	local function onListenerRemoved(func, id)
		if id ~= nil then
			local _id = id
			local listenerRemovedEvent = listenerRemovedEvents[_id]
			if not listenerRemovedEvent then
				local _exp = id
				listenerRemovedEvent = Signal.new()
				local _listenerRemovedEvent = listenerRemovedEvent
				listenerRemovedEvents[_exp] = _listenerRemovedEvent
			end
			return listenerRemovedEvent:Connect(func)
		else
			return listenerRemoved:Connect(func)
		end
	end
	_container.onListenerRemoved = onListenerRemoved
	--[[
		*
		* Registers a class decorator.
	]]
	--[[
		*
		* Registers a method decorator.
	]]
	--[[
		*
		* Registers a property decorator.
	]]
	--[[
		*
		* Registers a decorator.
	]]
	local defineDecoratorMetadata
	local function createDecorator(_kind, func)
		return {
			func = function(descriptor, config)
				defineDecoratorMetadata(descriptor, config)
				func(descriptor, config)
			end,
		}
	end
	_container.createDecorator = createDecorator
	--[[
		*
		* Registers a metadata class decorator.
	]]
	--[[
		*
		* Registers a metadata method decorator.
	]]
	--[[
		*
		* Registers a metadata property decorator.
	]]
	--[[
		*
		* Registers a metadata decorator.
	]]
	local function createMetaDecorator(_kind)
		return {
			func = function(descriptor, config)
				defineDecoratorMetadata(descriptor, config)
			end,
		}
	end
	_container.createMetaDecorator = createMetaDecorator
	--[[
		*
		* Retrieves registered decorators.
	]]
	local function getDecorators(id)
		local _arg0 = id ~= nil
		assert(_arg0)
		local _decorators = Reflect.decorators
		local _id = id
		local decorators = _decorators[_id]
		if not decorators then
			return {}
		end
		local _arg0_1 = function(object)
			local decoratorConfig = Reflect.getOwnMetadata(object, "flamework:decorators." .. id)
			assert(decoratorConfig)
			return {
				object = object,
				arguments = decoratorConfig.arguments,
			}
		end
		-- ▼ ReadonlyArray.map ▼
		local _newValue = table.create(#decorators)
		for _k, _v in decorators do
			_newValue[_k] = _arg0_1(_v, _k - 1, decorators)
		end
		-- ▲ ReadonlyArray.map ▲
		return _newValue
	end
	_container.getDecorators = getDecorators
	--[[
		*
		* Creates a map of every property using the specified decorator.
	]]
	local getDecorator
	local function getPropertyDecorators(obj, id)
		local decorators = {}
		local _arg0 = id ~= nil
		assert(_arg0)
		for _, prop in Reflect.getProperties(obj) do
			local decorator = getDecorator(obj, prop, id)
			if decorator then
				decorators[prop] = decorator
			end
		end
		return decorators
	end
	_container.getPropertyDecorators = getPropertyDecorators
	--[[
		*
		* Retrieves a decorator from an object or its properties.
	]]
	function getDecorator(object, property, id)
		local decorator = Reflect.getMetadata(object, "flamework:decorators." .. tostring(id), property)
		if not decorator then
			return nil
		end
		return decorator
	end
	_container.getDecorator = getDecorator
	--[[
		*
		* Retrieves a singleton or instantiates one if it does not exist.
	]]
	local createDependency
	local function resolveSingleton(ctor)
		local _ctor = ctor
		local resolvedDependency = resolvedSingletons[_ctor]
		if resolvedDependency ~= nil then
			return resolvedDependency
		end
		local _ctor_1 = ctor
		if table.find(loadingList, _ctor_1) ~= nil then
			-- ▼ ReadonlyArray.join ▼
			local _result = table.create(#loadingList)
			for _k, _v in loadingList do
				_result[_k] = tostring(_v)
			end
			-- ▲ ReadonlyArray.join ▲
			error("Circular dependency detected " .. (table.concat(_result, " <=> ") .. (" <=> " .. tostring(ctor))))
		end
		local _ctor_2 = ctor
		table.insert(loadingList, _ctor_2)
		-- Flamework can resolve singletons at any arbitrary point,
		-- so we should fetch custom dependency resolution (added via decorator) through the Reflect api.
		local opts = Reflect.getOwnMetadata(ctor, "flamework:dependency_resolution")
		local dependency = createDependency(ctor, opts)
		local _ctor_3 = ctor
		resolvedSingletons[_ctor_3] = dependency
		loadingList[#loadingList] = nil
		addListener(dependency)
		return dependency
	end
	_container.resolveSingleton = resolveSingleton
	-- * @internal Used for bootstrapping
	local function getSingletons()
		return resolvedSingletons
	end
	_container.getSingletons = getSingletons
	--[[
		*
		* Modifies dependency resolution for a specific ID.
		*
		* If a function is passed, it will be called, passing the target constructor, every time that ID needs to be resolved.
		* Otherwise, the passed object is returned directly.
	]]
	local function registerDependency(dependency, id)
		local _arg0 = id ~= nil
		assert(_arg0)
		local _dependency = dependency
		if type(_dependency) == "function" then
			local _id = id
			local _dependency_1 = dependency
			dependencyResolution[_id] = _dependency_1
		else
			local _id = id
			local _arg1 = function()
				return dependency
			end
			dependencyResolution[_id] = _arg1
		end
	end
	_container.registerDependency = registerDependency
	--[[
		*
		* Instantiates this class using dependency injection.
	]]
	local createDeferredDependency
	function createDependency(ctor, options)
		if options == nil then
			options = {}
		end
		local _binding = createDeferredDependency(ctor, options)
		local obj = _binding[1]
		local construct = _binding[2]
		construct()
		return obj
	end
	_container.createDependency = createDependency
	--[[
		*
		* Creates an object for this class and returns a deferred constructor.
	]]
	local resolveDependency
	function createDeferredDependency(ctor, options)
		if options == nil then
			options = {}
		end
		local _binding = getDeferredConstructor(ctor)
		local obj = _binding[1]
		local construct = _binding[2]
		return { obj, function()
			local dependencies = Reflect.getMetadata(ctor, "flamework:parameters")
			local constructorDependencies = {}
			if dependencies then
				for index, dependencyId in pairs(dependencies) do
					constructorDependencies[index - 1 + 1] = resolveDependency(ctor, dependencyId, index - 1, options)
				end
			end
			construct(unpack(constructorDependencies))
		end }
	end
	_container.createDeferredDependency = createDeferredDependency
	--[[
		*
		* Dependency resolution logic.
		* @internal
	]]
	function resolveDependency(ctor, dependencyId, index, options)
		if options.handle ~= nil then
			local dependency = options.handle(dependencyId, index)
			if dependency ~= nil then
				return dependency
			end
		end
		local _dependencyId = dependencyId
		local resolution = dependencyResolution[_dependencyId]
		if resolution ~= nil then
			return resolution(ctor)
		end
		local _idToObj = Reflect.idToObj
		local _dependencyId_1 = dependencyId
		local dependencyCtor = _idToObj[_dependencyId_1]
		if dependencyCtor and isConstructor(dependencyCtor) then
			return resolveSingleton(dependencyCtor)
		end
		if string.sub(dependencyId, 1, 2) == "$p" then
			if string.sub(dependencyId, 1, 3) == "$ps" then
				return string.sub(dependencyId, 5)
			end
			if string.sub(dependencyId, 1, 3) == "$pn" then
				local _condition = tonumber(string.sub(dependencyId, 5))
				if _condition == nil then
					_condition = 0
				end
				return _condition
			end
			if options.handlePrimitive ~= nil then
				return options.handlePrimitive(dependencyId, index)
			end
			error("Unexpected primitive dependency '" .. (dependencyId .. ("' while constructing " .. tostring(ctor))))
		end
		error("Could not find constructor for " .. (dependencyId .. (" while constructing " .. tostring(ctor))))
	end
	_container.resolveDependency = resolveDependency
	--[[
		*
		* This function is able to utilize Flamework's user macros to generate and inspect types.
		* This function supports all values natively supported by Flamework's user macros.
		*
		* For example, if you want to retrieve the properties of an instance, you could write code like this:
		* ```ts
		* // Returns an array of all keys part of the union.
		* const basePartKeys = Modding.inspect<InstancePropertyNames<BasePart>[]>();
		* ```
		*
		* @metadata macro
	]]
	local function inspect(value)
		local _value = value
		assert(_value)
		return value
	end
	_container.inspect = inspect
	--[[
		*
		* @hidden
		* @deprecated
	]]
	local function macro(values, directValue)
		local _values = values
		if type(_values) == "string" then
			return {
				[values] = directValue,
			}
		end
		local result = {}
		for _, _binding in values do
			local name = _binding[1]
			local value = _binding[2]
			result[name] = value
		end
		return result
	end
	_container.macro = macro
	--[[
		*
		* This API allows you to use more complex queries, inspect types, generate arbitrary objects based on types, etc.
		*
		* @experimental This API is considered experimental and may change.
	]]
	--[[
		*
		* Hashes a string literal type (such as an event name) under Flamework's {@link Many `Many`} API.
		*
		* The second type argument, `C`, is for providing a context to the hashing which will generate new hashes
		* for strings which already have a hash under another context.
		*
		* @experimental This API is considered experimental and may change.
	]]
	--[[
		*
		* This is equivalent to {@link Hash `Hash`} except it will only hash strings when `obfuscation` is turned on.
		*
		* @experimental This API is considered experimental and may change.
	]]
	--[[
		*
		* Retrieves the labels from this tuple under Flamework's {@link Many `Many`} API.
		*
		* This can also be used to extract parameter names via `Parameters<T>`
		*
		* @experimental This API is considered experimental and may change.
	]]
	--[[
		*
		* Retrieves metadata about the specified type using Flamework's user macros.
	]]
	--[[
		*
		* Retrieves metadata about the callsite using Flamework's user macros.
	]]
	function defineDecoratorMetadata(descriptor, config)
		local propertyKey = if descriptor.isStatic then "static:" .. descriptor.property else descriptor.property
		Reflect.defineMetadata(descriptor.object, "flamework:decorators." .. descriptor.id, {
			arguments = config,
		}, propertyKey)
		local decoratorList = Reflect.getMetadata(descriptor.object, "flamework:decorators", propertyKey)
		if not decoratorList then
			local _fn = Reflect
			local _exp = descriptor.object
			decoratorList = {}
			_fn.defineMetadata(_exp, "flamework:decorators", decoratorList, propertyKey)
		end
		local _decoratorList = decoratorList
		local _id = descriptor.id
		table.insert(_decoratorList, _id)
	end
end
function isConstructor(obj)
	return obj.new ~= nil and obj.constructor ~= nil
end
function getDeferredConstructor(ctor)
	local obj = setmetatable({}, ctor)
	return { obj, function(...)
		local args = { ... }
		local result = obj:constructor(unpack(args))
		local _arg0 = result == nil or result == obj
		assert(_arg0, "Deferred constructors are not allowed to return values.")
	end }
end
return {
	Modding = Modding,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="19">
                <Properties>
                  <string name="Name">reflect</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.0
--[[
	*
	* Reflection/metadata API
]]
local Reflect = {}
do
	local _container = Reflect
	-- object -> property -> key -> value
	local metadata = setmetatable({}, {
		__mode = "k",
	})
	_container.metadata = metadata
	local decorators = {}
	_container.decorators = decorators
	local idToObj = {}
	_container.idToObj = idToObj
	local objToId = {}
	_container.objToId = objToId
	local NO_PROP_MARKER = {}
	local function getObjMetadata(obj, prop, create)
		local _condition = prop
		if _condition == nil then
			_condition = NO_PROP_MARKER
		end
		local realProp = _condition
		if create then
			local _obj = obj
			local objMetadata = metadata[_obj]
			if not objMetadata then
				local _exp = obj
				objMetadata = {}
				local _objMetadata = objMetadata
				metadata[_exp] = _objMetadata
			end
			local propMetadata = objMetadata[realProp]
			if not propMetadata then
				local _objMetadata = objMetadata
				propMetadata = {}
				local _propMetadata = propMetadata
				_objMetadata[realProp] = _propMetadata
			end
			return propMetadata
		else
			local _obj = obj
			local _result = metadata[_obj]
			if _result ~= nil then
				_result = _result[realProp]
			end
			return _result
		end
	end
	local function getParentConstructor(obj)
		local metatable = getmetatable(obj)
		if metatable and type(metatable) == "table" then
			return rawget(metatable, "__index")
		end
	end
	--[[
		*
		* Apply metadata onto this object.
	]]
	local function defineMetadata(obj, key, value, property)
		-- 'identifier' is a special, unique ID across all metadata classes.
		if key == "identifier" then
			local _value = value
			local _arg0 = type(_value) == "string"
			assert(_arg0, "identifier must be a string.")
			local _obj = obj
			local _arg0_1 = not (objToId[_obj] ~= nil)
			assert(_arg0_1, "obj is already registered.")
			local _value_1 = value
			local _arg0_2 = not (idToObj[_value_1] ~= nil)
			assert(_arg0_2, "id is already registered.")
			local _obj_1 = obj
			local _value_2 = value
			objToId[_obj_1] = _value_2
			local _value_3 = value
			local _obj_2 = obj
			idToObj[_value_3] = _obj_2
		end
		local metadata = getObjMetadata(obj, property, true)
		local _key = key
		local _value = value
		metadata[_key] = _value
	end
	_container.defineMetadata = defineMetadata
	--[[
		*
		* Apply metadata in batch onto this object.
	]]
	local function defineMetadataBatch(obj, list, property)
		local metadata = getObjMetadata(obj, property, true)
		for key, value in pairs(list) do
			metadata[key] = value
		end
	end
	_container.defineMetadataBatch = defineMetadataBatch
	--[[
		*
		* Delete metadata from this object.
	]]
	local function deleteMetadata(obj, key, property)
		local metadata = getObjMetadata(obj, property)
		local _result = metadata
		if _result ~= nil then
			local _key = key
			_result[_key] = nil
		end
	end
	_container.deleteMetadata = deleteMetadata
	--[[
		*
		* Get metadata from this object.
		* Type parameter is an assertion.
	]]
	local function getOwnMetadata(obj, key, property)
		local metadata = getObjMetadata(obj, property)
		local _result = metadata
		if _result ~= nil then
			local _key = key
			_result = _result[_key]
		end
		return _result
	end
	_container.getOwnMetadata = getOwnMetadata
	--[[
		*
		* Check if this object has the specified metadata key.
	]]
	local function hasOwnMetadata(obj, key, property)
		local metadata = getObjMetadata(obj, property)
		local _result = metadata
		if _result ~= nil then
			local _key = key
			_result = _result[_key] ~= nil
		end
		local _condition = _result
		if _condition == nil then
			_condition = false
		end
		return _condition
	end
	_container.hasOwnMetadata = hasOwnMetadata
	--[[
		*
		* Retrieve all metadata keys for this object.
	]]
	local function getOwnMetadataKeys(obj, property)
		local metadata = getObjMetadata(obj, property)
		local keys = {}
		local _result = metadata
		if _result ~= nil then
			local _arg0 = function(_, key)
				local _key = key
				table.insert(keys, _key)
				return #keys
			end
			for _k, _v in _result do
				_arg0(_v, _k, _result)
			end
		end
		return keys
	end
	_container.getOwnMetadataKeys = getOwnMetadataKeys
	--[[
		*
		* Retrieves all properties (that contain metadata) on this object.
	]]
	local function getOwnProperties(obj)
		local _obj = obj
		local properties = metadata[_obj]
		if not properties then
			return {}
		end
		local keys = {}
		for key in properties do
			if key ~= NO_PROP_MARKER then
				table.insert(keys, key)
			end
		end
		return keys
	end
	_container.getOwnProperties = getOwnProperties
	--[[
		*
		* Retrieve all values for the specified key from the object and its parents.
		* Type parameter is an assertion.
	]]
	local function getMetadatas(obj, key, property)
		local values = {}
		local value = getOwnMetadata(obj, key, property)
		if value ~= nil then
			table.insert(values, value)
		end
		local parent = getParentConstructor(obj)
		if parent then
			local _exp = getMetadatas(parent, key, property)
			local _arg0 = function(value)
				local _value = value
				table.insert(values, _value)
				return #values
			end
			for _k, _v in _exp do
				_arg0(_v, _k - 1, _exp)
			end
		end
		return values
	end
	_container.getMetadatas = getMetadatas
	--[[
		*
		* Get metadata from this object or its parents.
		* Type parameter is an assertion.
	]]
	local function getMetadata(obj, key, property)
		local value = getOwnMetadata(obj, key, property)
		if value ~= nil then
			return value
		end
		local parent = getParentConstructor(obj)
		if parent then
			return getMetadata(parent, key, property)
		end
	end
	_container.getMetadata = getMetadata
	--[[
		*
		* Check if this object or any of its parents has the specified metadata key.
	]]
	local function hasMetadata(obj, key, property)
		local value = hasOwnMetadata(obj, key, property)
		if value then
			return value
		end
		local parent = getParentConstructor(obj)
		if parent then
			return hasMetadata(parent, key, property)
		end
		return false
	end
	_container.hasMetadata = hasMetadata
	--[[
		*
		* Retrieve all metadata keys for this object and its parents.
	]]
	local function getMetadataKeys(obj, property)
		local _set = {}
		for _, _v in getOwnMetadataKeys(obj, property) do
			_set[_v] = true
		end
		local keys = _set
		local parent = getParentConstructor(obj)
		if parent then
			local _exp = getMetadataKeys(parent, property)
			local _arg0 = function(key)
				local _key = key
				keys[_key] = true
				return keys
			end
			for _k, _v in _exp do
				_arg0(_v, _k - 1, _exp)
			end
		end
		local _array = {}
		local _length = #_array
		for _v in keys do
			_length += 1
			_array[_length] = _v
		end
		return _array
	end
	_container.getMetadataKeys = getMetadataKeys
	--[[
		*
		* Retrieves all properties (that contain metadata) on this object and its parents.
	]]
	local function getProperties(obj)
		local _set = {}
		for _, _v in getOwnProperties(obj) do
			_set[_v] = true
		end
		local keys = _set
		local parent = getParentConstructor(obj)
		if parent then
			local _exp = getProperties(parent)
			local _arg0 = function(key)
				local _key = key
				keys[_key] = true
				return keys
			end
			for _k, _v in _exp do
				_arg0(_v, _k - 1, _exp)
			end
		end
		local _array = {}
		local _length = #_array
		for _v in keys do
			_length += 1
			_array[_length] = _v
		end
		return _array
	end
	_container.getProperties = getProperties
	-- * @hidden
	local function decorate(object, id, rawDecoration, args, property, isStatic)
		if isStatic == nil then
			isStatic = false
		end
		local decoration = rawDecoration
		local descriptor = {
			id = id,
			isStatic = isStatic,
			object = object,
			property = property,
		}
		if property == nil then
			local _id = id
			local decoratedObjects = decorators[_id]
			if not decoratedObjects then
				local _exp = id
				decoratedObjects = {}
				local _decoratedObjects = decoratedObjects
				decorators[_exp] = _decoratedObjects
			end
			local _decoratedObjects = decoratedObjects
			local _object = object
			table.insert(_decoratedObjects, _object)
		end
		decoration.func(descriptor, args)
	end
	_container.decorate = decorate
end
return {
	Reflect = Reflect,
}
]]></string>
                </Properties>
              </Item>
            </Item>
          </Item>
          <Item class="Folder" referent="20">
            <Properties>
              <string name="Name">networking</string>
            </Properties>
            <Item class="ModuleScript" referent="21">
              <Properties>
                <string name="Name">out</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.0
local TS = _G[script]
local NetworkingSkip = TS.import(script, script, "middleware", "skip").Skip
local registerHandler = TS.import(script, script, "handlers").registerNetworkHandler
local NetworkingFunctionError = TS.import(script, script, "functions", "errors").NetworkingFunctionError
local Networking = {}
do
	local _container = Networking
	--[[
		*
		* Creates a new event based off the supplied types.
		* @param serverMiddleware Middleware for server events
		* @param clientMiddleware Middleware for client events
	]]
	--[[
		*
		* Creates a new function event based off the supplied types.
		* @param serverMiddleware Middleware for server events
		* @param clientMiddleware Middleware for client events
	]]
	--[[
		*
		* Connects to a global network event.
	]]
	local registerNetworkHandler = registerHandler
	_container.registerNetworkHandler = registerNetworkHandler
	--[[
		*
		* Stops networking function middleware.
	]]
	local Skip = NetworkingSkip
	_container.Skip = Skip
	--[[
		*
		* A function that generates middleware.
		* @hidden
		* @deprecated Use {@link EventMiddleware} or {@link FunctionMiddleware}
	]]
	--[[
		*
		* A function that generates an event middleware.
	]]
	--[[
		*
		* A function that generates an event middleware.
	]]
end
return {
	Networking = Networking,
	NetworkingFunctionError = NetworkingFunctionError,
}
]]></string>
              </Properties>
              <Item class="Folder" referent="22">
                <Properties>
                  <string name="Name">events</string>
                </Properties>
                <Item class="ModuleScript" referent="23">
                  <Properties>
                    <string name="Name">createClientHandler</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.0
local TS = _G[script]
local Players = TS.import(script, TS.getModule(script, "@rbxts", "services")).Players
local fireNetworkHandler = TS.import(script, script.Parent.Parent, "handlers").fireNetworkHandler
local createMiddlewareProcessor = TS.import(script, script.Parent.Parent, "middleware", "createMiddlewareProcessor").createMiddlewareProcessor
local createClientMethod
local function createClientHandler(remotes, networkInfos, serverEvents, clientEvents, config, middlewareFactoryList)
	local handler = {}
	local bindables = {}
	local processors = {}
	local isSetup = {}
	for name in pairs(clientEvents) do
		local bindable = Instance.new("BindableEvent")
		bindables[name] = bindable
	end
	local setupRemote = function(name)
		local _name = name
		if isSetup[_name] ~= nil then
			return nil
		end
		local _name_1 = name
		isSetup[_name_1] = true
		local _remotes = remotes
		local _name_2 = name
		local remote = _remotes[_name_2]
		local _networkInfos = networkInfos
		local _name_3 = name
		local networkInfo = _networkInfos[_name_3]
		local _name_4 = name
		local middlewareProcessor = processors[_name_4]
		remote.OnClientEvent:Connect(function(...)
			local args = { ... }
			local guards = clientEvents[name]
			if not guards then
				return nil
			end
			if not config.disableClientGuards then
				local paramGuards = guards[1]
				local restGuard = guards[2]
				do
					local i = 0
					local _shouldIncrement = false
					while true do
						if _shouldIncrement then
							i += 1
						else
							_shouldIncrement = true
						end
						if not (i < math.max(#paramGuards, #args)) then
							break
						end
						local guard = paramGuards[i + 1] or restGuard
						if guard and not guard(args[i + 1]) then
							if config.warnOnInvalidGuards then
								warn("Server sent invalid argument for event '" .. (name .. ("' (arg #" .. (tostring(i) .. "):"))), args[i + 1])
							end
							fireNetworkHandler("onBadRequest", Players.LocalPlayer, networkInfo, i)
							return nil
						end
					end
				end
			end
			middlewareProcessor(nil, unpack(args))
		end)
	end
	for name, remote in remotes do
		local networkInfo = networkInfos[name]
		local _result = middlewareFactoryList
		if _result ~= nil then
			_result = _result[name]
		end
		local middlewareProcessor = createMiddlewareProcessor(_result, networkInfo, function(_, ...)
			local args = { ... }
			local _result_1 = bindables[name]
			if _result_1 ~= nil then
				_result_1 = _result_1:Fire(unpack(args))
			end
			return _result_1
		end)
		processors[name] = middlewareProcessor
		local _exp = function()
			return setupRemote(name)
		end
		local _result_1 = clientEvents[name]
		if _result_1 ~= nil then
			_result_1 = #_result_1
		end
		local _condition = _result_1
		if _condition == nil then
			_condition = 0
		end
		handler[name] = createClientMethod(_exp, remote, _condition, bindables[name], middlewareProcessor)
	end
	return handler
end
function createClientMethod(connect, remote, paramCount, bindable, process)
	local method = {
		fire = function(self, ...)
			local args = { ... }
			remote:FireServer(unpack(args))
		end,
		connect = function(self, callback, customGuards)
			local _bindable = bindable
			local _arg1 = "Event " .. (remote.Name .. " is not registered as a receiver.")
			assert(_bindable, _arg1)
			task.defer(connect)
			return bindable.Event:Connect(function(...)
				local args = { ... }
				if customGuards then
					do
						local i = 0
						local _shouldIncrement = false
						while true do
							if _shouldIncrement then
								i += 1
							else
								_shouldIncrement = true
							end
							if not (i < paramCount) then
								break
							end
							local guard = customGuards[i + 1]
							if guard ~= nil and not guard(args[i + 1]) then
								return nil
							end
						end
					end
				end
				return callback(unpack(args))
			end)
		end,
		predict = function(self, ...)
			local args = { ... }
			local _process = process
			local _arg1 = "Event " .. (remote.Name .. " does not have a middleware processor.")
			assert(_process, _arg1)
			process(nil, unpack(args))
		end,
	}
	setmetatable(method, {
		__call = function(method, ...)
			local args = { ... }
			method:fire(unpack(args))
		end,
	})
	return method
end
return {
	createClientHandler = createClientHandler,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="24">
                  <Properties>
                    <string name="Name">createNetworkingEvent</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.0
local TS = _G[script]
local Object = TS.import(script, TS.getModule(script, "@rbxts", "object-utils"))
local RunService = TS.import(script, TS.getModule(script, "@rbxts", "services")).RunService
local populateInstanceMap = TS.import(script, script.Parent.Parent, "util", "populateInstanceMap").populateInstanceMap
local createClientHandler = TS.import(script, script.Parent, "createClientHandler").createClientHandler
local createServerHandler = TS.import(script, script.Parent, "createServerHandler").createServerHandler
local function getDefaultConfiguration(config)
	local _object = {}
	local _left = "disableClientGuards"
	local _condition = config.disableClientGuards
	if _condition == nil then
		_condition = false
	end
	_object[_left] = _condition
	local _left_1 = "disableServerGuards"
	local _condition_1 = config.disableServerGuards
	if _condition_1 == nil then
		_condition_1 = false
	end
	_object[_left_1] = _condition_1
	local _left_2 = "warnOnInvalidGuards"
	local _condition_2 = config.warnOnInvalidGuards
	if _condition_2 == nil then
		_condition_2 = RunService:IsStudio()
	end
	_object[_left_2] = _condition_2
	return _object
end
local function createNetworkingEvent(globalName, serverEvents, clientEvents, serverMiddleware, clientMiddleware, partialConfig)
	if partialConfig == nil then
		partialConfig = {}
	end
	local config = getDefaultConfiguration(partialConfig)
	local networkInfos = {}
	local remotes = {}
	populateInstanceMap("RemoteEvent", "events-" .. globalName, Object.keys(serverEvents), remotes)
	populateInstanceMap("RemoteEvent", "events-" .. globalName, Object.keys(clientEvents), remotes)
	for name in remotes do
		local _arg1 = {
			eventType = "Event",
			globalName = globalName,
			name = name,
		}
		networkInfos[name] = _arg1
	end
	if RunService:IsServer() then
		return {
			server = createServerHandler(remotes, networkInfos, serverEvents, clientEvents, config, serverMiddleware),
			client = nil,
		}
	else
		return {
			server = nil,
			client = createClientHandler(remotes, networkInfos, serverEvents, clientEvents, config, clientMiddleware),
		}
	end
end
return {
	createNetworkingEvent = createNetworkingEvent,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="25">
                  <Properties>
                    <string name="Name">createServerHandler</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.0
local TS = _G[script]
local Players = TS.import(script, TS.getModule(script, "@rbxts", "services")).Players
local fireNetworkHandler = TS.import(script, script.Parent.Parent, "handlers").fireNetworkHandler
local createMiddlewareProcessor = TS.import(script, script.Parent.Parent, "middleware", "createMiddlewareProcessor").createMiddlewareProcessor
local createServerMethod
local function createServerHandler(remotes, networkInfos, serverEvents, clientEvents, config, middlewareFactoryList)
	local handler = {}
	local bindables = {}
	local processors = {}
	local isSetup = {}
	for name in pairs(serverEvents) do
		local bindable = Instance.new("BindableEvent")
		bindables[name] = bindable
	end
	local setupRemote = function(name)
		local _name = name
		if isSetup[_name] ~= nil then
			return nil
		end
		local _name_1 = name
		isSetup[_name_1] = true
		local _remotes = remotes
		local _name_2 = name
		local remote = _remotes[_name_2]
		local _networkInfos = networkInfos
		local _name_3 = name
		local networkInfo = _networkInfos[_name_3]
		local _name_4 = name
		local middlewareProcessor = processors[_name_4]
		remote.OnServerEvent:Connect(function(player, ...)
			local args = { ... }
			local guards = serverEvents[name]
			if not guards then
				return nil
			end
			if not config.disableServerGuards then
				local paramGuards = guards[1]
				local restGuard = guards[2]
				do
					local i = 0
					local _shouldIncrement = false
					while true do
						if _shouldIncrement then
							i += 1
						else
							_shouldIncrement = true
						end
						if not (i < math.max(#paramGuards, #args)) then
							break
						end
						local guard = paramGuards[i + 1] or restGuard
						if guard and not guard(args[i + 1]) then
							if config.warnOnInvalidGuards then
								warn("'" .. (tostring(player) .. ("' sent invalid arguments for event '" .. (name .. ("' (arg #" .. (tostring(i) .. "):"))))), args[i + 1])
							end
							fireNetworkHandler("onBadRequest", player, networkInfo, i)
							return nil
						end
					end
				end
			end
			middlewareProcessor(player, unpack(args))
		end)
	end
	for name, remote in remotes do
		local networkInfo = networkInfos[name]
		local _result = middlewareFactoryList
		if _result ~= nil then
			_result = _result[name]
		end
		local middlewareProcessor = createMiddlewareProcessor(_result, networkInfo, function(player, ...)
			local args = { ... }
			local _result_1 = bindables[name]
			if _result_1 ~= nil then
				_result_1 = _result_1:Fire(player, unpack(args))
			end
			return _result_1
		end)
		processors[name] = middlewareProcessor
		local _exp = function()
			return setupRemote(name)
		end
		local _result_1 = serverEvents[name]
		if _result_1 ~= nil then
			_result_1 = #_result_1
		end
		local _condition = _result_1
		if _condition == nil then
			_condition = 0
		end
		handler[name] = createServerMethod(_exp, remote, _condition, bindables[name], middlewareProcessor)
	end
	return handler
end
function createServerMethod(connect, remote, paramCount, bindable, process)
	local method = {
		fire = function(self, players, ...)
			local args = { ... }
			local _players = players
			if typeof(_players) == "Instance" then
				remote:FireClient(players, unpack(args))
			else
				for _, player in players do
					remote:FireClient(player, unpack(args))
				end
			end
		end,
		broadcast = function(self, ...)
			local args = { ... }
			remote:FireAllClients(unpack(args))
		end,
		except = function(self, players, ...)
			local args = { ... }
			local _players = players
			if typeof(_players) == "Instance" then
				players = { players }
			end
			for _, player in Players:GetPlayers() do
				if not (table.find(players, player) ~= nil) then
					self:fire(player, unpack(args))
				end
			end
		end,
		connect = function(self, callback, customGuards)
			local _bindable = bindable
			local _arg1 = "Event " .. (remote.Name .. " is not registered as a receiver.")
			assert(_bindable, _arg1)
			task.defer(connect)
			return bindable.Event:Connect(function(player, ...)
				local args = { ... }
				if customGuards then
					do
						local i = 0
						local _shouldIncrement = false
						while true do
							if _shouldIncrement then
								i += 1
							else
								_shouldIncrement = true
							end
							if not (i < paramCount) then
								break
							end
							local guard = customGuards[i + 1]
							if guard ~= nil and not guard(args[i + 1]) then
								return nil
							end
						end
					end
				end
				return callback(player, unpack(args))
			end)
		end,
		predict = function(self, player, ...)
			local args = { ... }
			local _process = process
			local _arg1 = "Event " .. (remote.Name .. " does not have a middleware processor.")
			assert(_process, _arg1)
			process(player, unpack(args))
		end,
	}
	setmetatable(method, {
		__call = function(method, player, ...)
			local args = { ... }
			method:fire(player, unpack(args))
		end,
	})
	return method
end
return {
	createServerHandler = createServerHandler,
}
]]></string>
                  </Properties>
                </Item>
              </Item>
              <Item class="Folder" referent="26">
                <Properties>
                  <string name="Name">functions</string>
                </Properties>
                <Item class="ModuleScript" referent="27">
                  <Properties>
                    <string name="Name">createClientHandler</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.0
local TS = _G[script]
local t = TS.import(script, TS.getModule(script, "@rbxts", "t").lib.ts).t
local _errors = TS.import(script, script.Parent, "errors")
local getFunctionError = _errors.getFunctionError
local NetworkingFunctionError = _errors.NetworkingFunctionError
local createMiddlewareProcessor = TS.import(script, script.Parent.Parent, "middleware", "createMiddlewareProcessor").createMiddlewareProcessor
local Skip = TS.import(script, script.Parent.Parent, "middleware", "skip").Skip
local Players = TS.import(script, TS.getModule(script, "@rbxts", "services")).Players
local fireNetworkHandler = TS.import(script, script.Parent.Parent, "handlers").fireNetworkHandler
local createClientMethod, getProcessResult
local function createClientHandler(serverRemotes, clientRemotes, networkInfos, serverEvents, clientEvents, config, middlewareFactoryList)
	local handler = {}
	local processors = {}
	local requestInfo = {
		nextId = 0,
		requests = {},
	}
	local function createMethod(name, networkInfo, remote)
		if handler[name] ~= nil then
			return nil
		end
		local _exp = (serverEvents[name] or clientEvents[name])[2]
		local _result = middlewareFactoryList
		if _result ~= nil then
			_result = _result[name]
		end
		local _condition = _result
		if _condition == nil then
			_condition = {}
		end
		handler[name] = createClientMethod(_exp, _condition, processors, networkInfo, requestInfo, name, remote, config)
	end
	for alias, remote in serverRemotes do
		local name = string.sub(alias, 3)
		local networkInfo = networkInfos[name]
		createMethod(name, networkInfo, remote)
		remote.OnClientEvent:Connect(function(id, processResult, result)
			if not t.number(id) then
				return nil
			end
			local _requests = requestInfo.requests
			local _id = id
			local request = _requests[_id]
			local _requests_1 = requestInfo.requests
			local _id_1 = id
			_requests_1[_id_1] = nil
			if request then
				request(result, getFunctionError(processResult))
			end
		end)
	end
	for alias, remote in clientRemotes do
		-- invoke callback
		local name = string.sub(alias, 3)
		local networkInfo = networkInfos[name]
		createMethod(name, networkInfo, remote)
		remote.OnClientEvent:Connect(function(id, ...)
			local args = { ... }
			local guards = clientEvents[name]
			if not guards then
				return nil
			end
			if not config.disableClientGuards then
				local paramGuards = guards[1][1]
				local restGuard = guards[1][2]
				do
					local i = 0
					local _shouldIncrement = false
					while true do
						if _shouldIncrement then
							i += 1
						else
							_shouldIncrement = true
						end
						if not (i < math.max(#paramGuards, #args)) then
							break
						end
						local guard = paramGuards[i + 1] or restGuard
						if guard and not guard(args[i + 1]) then
							if config.warnOnInvalidGuards then
								warn("Server sent invalid argument for event '" .. (name .. ("' (arg #" .. (tostring(i) .. "):"))), args[i + 1])
							end
							fireNetworkHandler("onBadRequest", Players.LocalPlayer, networkInfo, i)
							return remote:FireServer(id, NetworkingFunctionError.BadRequest)
						end
					end
				end
			end
			local processor = processors[name]
			if processor then
				local result = processor(nil, unpack(args))
				local _arg0 = function(value)
					return remote:FireServer(id, getProcessResult(value), value)
				end
				result:andThen(_arg0):catch(function(reason)
					warn("Failed to process request to " .. name)
					warn(reason)
					remote:FireServer(id, false)
				end)
			else
				remote:FireServer(id, false)
			end
		end)
	end
	return handler
end
local timeoutPromise
function createClientMethod(guard, middleware, processors, networkInfo, requestInfo, name, remote, config)
	local method = {
		invoke = function(self, ...)
			local args = { ... }
			return self:invokeWithTimeout(config.defaultClientTimeout, unpack(args))
		end,
		invokeWithTimeout = function(self, timeout, ...)
			local args = { ... }
			return TS.Promise.race({ timeoutPromise(timeout, NetworkingFunctionError.Timeout), TS.Promise.new(function(resolve, reject, onCancel)
				local _original = requestInfo.nextId
				requestInfo.nextId += 1
				local id = _original
				local _requests = requestInfo.requests
				local _arg1 = function(value, rejection)
					if rejection then
						return reject(rejection)
					end
					if not config.disableClientGuards and not guard(value) then
						if config.warnOnInvalidGuards then
							warn("Server returned invalid value from event '" .. (name .. "':"), value)
						end
						fireNetworkHandler("onBadResponse", Players.LocalPlayer, networkInfo)
						return reject(NetworkingFunctionError.InvalidResult)
					end
					resolve(value)
				end
				_requests[id] = _arg1
				onCancel(function()
					requestInfo.requests[id] = nil
				end)
				remote:FireServer(id, unpack(args))
			end) })
		end,
		setCallback = function(self, callback)
			local _processors = processors
			local _name = name
			if _processors[_name] ~= nil then
				warn("Function.setCallback was called multiple times for " .. name)
			end
			local processor = createMiddlewareProcessor(middleware, networkInfo, function(_, ...)
				local args = { ... }
				return callback(unpack(args))
			end)
			local _processors_1 = processors
			local _name_1 = name
			_processors_1[_name_1] = processor
		end,
		predict = function(self, ...)
			local args = { ... }
			return TS.Promise.new(function(resolve, reject)
				local _processors = processors
				local _name = name
				local processor = _processors[_name]
				if not processor then
					return reject(NetworkingFunctionError.Unprocessed)
				end
				resolve(processor(nil, unpack(args)))
			end)
		end,
	}
	setmetatable(method, {
		__call = function(method, ...)
			local args = { ... }
			return method:invoke(unpack(args))
		end,
	})
	return method
end
function timeoutPromise(timeout, rejectValue)
	local _exp = TS.Promise.delay(timeout)
	local _arg0 = function()
		return TS.Promise.reject(rejectValue)
	end
	return _exp:andThen(_arg0)
end
function getProcessResult(value)
	return if value == Skip then NetworkingFunctionError.Cancelled else true
end
return {
	createClientHandler = createClientHandler,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="28">
                  <Properties>
                    <string name="Name">createNetworkingFunction</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.0
local TS = _G[script]
local Object = TS.import(script, TS.getModule(script, "@rbxts", "object-utils"))
local RunService = TS.import(script, TS.getModule(script, "@rbxts", "services")).RunService
local populateInstanceMap = TS.import(script, script.Parent.Parent, "util", "populateInstanceMap").populateInstanceMap
local createClientHandler = TS.import(script, script.Parent, "createClientHandler").createClientHandler
local createServerHandler = TS.import(script, script.Parent, "createServerHandler").createServerHandler
local function getDefaultConfiguration(config)
	local _object = {}
	local _left = "disableClientGuards"
	local _condition = config.disableClientGuards
	if _condition == nil then
		_condition = false
	end
	_object[_left] = _condition
	local _left_1 = "disableServerGuards"
	local _condition_1 = config.disableServerGuards
	if _condition_1 == nil then
		_condition_1 = false
	end
	_object[_left_1] = _condition_1
	local _left_2 = "defaultClientTimeout"
	local _condition_2 = config.defaultClientTimeout
	if _condition_2 == nil then
		_condition_2 = 30
	end
	_object[_left_2] = _condition_2
	local _left_3 = "defaultServerTimeout"
	local _condition_3 = config.defaultServerTimeout
	if _condition_3 == nil then
		_condition_3 = 10
	end
	_object[_left_3] = _condition_3
	local _left_4 = "warnOnInvalidGuards"
	local _condition_4 = config.warnOnInvalidGuards
	if _condition_4 == nil then
		_condition_4 = RunService:IsStudio()
	end
	_object[_left_4] = _condition_4
	return _object
end
local function createNetworkingFunction(globalName, serverEvents, clientEvents, serverMiddleware, clientMiddleware, partialConfig)
	if partialConfig == nil then
		partialConfig = {}
	end
	local config = getDefaultConfiguration(partialConfig)
	local networkInfos = {}
	local serverRemotes = {}
	local clientRemotes = {}
	local _exp = Object.keys(serverEvents)
	local _arg0 = function(x)
		return "s:" .. tostring(x)
	end
	-- ▼ ReadonlyArray.map ▼
	local _newValue = table.create(#_exp)
	for _k, _v in _exp do
		_newValue[_k] = _arg0(_v, _k - 1, _exp)
	end
	-- ▲ ReadonlyArray.map ▲
	local serverNames = _newValue
	local _exp_1 = Object.keys(clientEvents)
	local _arg0_1 = function(x)
		return "c:" .. tostring(x)
	end
	-- ▼ ReadonlyArray.map ▼
	local _newValue_1 = table.create(#_exp_1)
	for _k, _v in _exp_1 do
		_newValue_1[_k] = _arg0_1(_v, _k - 1, _exp_1)
	end
	-- ▲ ReadonlyArray.map ▲
	local clientNames = _newValue_1
	populateInstanceMap("RemoteEvent", "functions-" .. globalName, serverNames, serverRemotes)
	populateInstanceMap("RemoteEvent", "functions-" .. globalName, clientNames, clientRemotes)
	for alias in serverRemotes do
		local name = string.sub(alias, 3)
		local _arg1 = {
			eventType = "Function",
			globalName = globalName,
			name = name,
		}
		networkInfos[name] = _arg1
	end
	for alias in clientRemotes do
		local name = string.sub(alias, 3)
		local _arg1 = {
			eventType = "Function",
			globalName = globalName,
			name = name,
		}
		networkInfos[name] = _arg1
	end
	if RunService:IsServer() then
		return {
			server = createServerHandler(serverRemotes, clientRemotes, networkInfos, serverEvents, clientEvents, config, serverMiddleware),
			client = nil,
		}
	else
		return {
			server = nil,
			client = createClientHandler(serverRemotes, clientRemotes, networkInfos, serverEvents, clientEvents, config, clientMiddleware),
		}
	end
end
return {
	createNetworkingFunction = createNetworkingFunction,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="29">
                  <Properties>
                    <string name="Name">createServerHandler</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.0
local TS = _G[script]
local Players = TS.import(script, TS.getModule(script, "@rbxts", "services")).Players
local t = TS.import(script, TS.getModule(script, "@rbxts", "t").lib.ts).t
local _errors = TS.import(script, script.Parent, "errors")
local getFunctionError = _errors.getFunctionError
local NetworkingFunctionError = _errors.NetworkingFunctionError
local createMiddlewareProcessor = TS.import(script, script.Parent.Parent, "middleware", "createMiddlewareProcessor").createMiddlewareProcessor
local Skip = TS.import(script, script.Parent.Parent, "middleware", "skip").Skip
local fireNetworkHandler = TS.import(script, script.Parent.Parent, "handlers").fireNetworkHandler
local createServerMethod, getRequestInfo, getProcessResult
local function createServerHandler(serverRemotes, clientRemotes, networkInfos, serverEvents, clientEvents, config, middlewareFactoryList)
	local handler = {}
	local processors = {}
	local players = {}
	local function createMethod(name, networkInfo, remote)
		if handler[name] ~= nil then
			return nil
		end
		local _exp = (serverEvents[name] or clientEvents[name])[2]
		local _result = middlewareFactoryList
		if _result ~= nil then
			_result = _result[name]
		end
		local _condition = _result
		if _condition == nil then
			_condition = {}
		end
		handler[name] = createServerMethod(_exp, _condition, processors, networkInfo, players, name, remote, config)
	end
	for alias, remote in clientRemotes do
		-- create server method
		local name = string.sub(alias, 3)
		local networkInfo = networkInfos[name]
		createMethod(name, networkInfo, remote)
		remote.OnServerEvent:Connect(function(player, id, processResult, result)
			if not t.number(id) then
				return nil
			end
			local requestInfo = getRequestInfo(player, players)
			local _requests = requestInfo.requests
			local _id = id
			local request = _requests[_id]
			local _requests_1 = requestInfo.requests
			local _id_1 = id
			_requests_1[_id_1] = nil
			if request then
				request(result, getFunctionError(processResult))
			end
		end)
	end
	for alias, remote in serverRemotes do
		-- invoke callback
		local name = string.sub(alias, 3)
		local networkInfo = networkInfos[name]
		createMethod(name, networkInfo, remote)
		remote.OnServerEvent:Connect(function(player, id, ...)
			local args = { ... }
			local guards = serverEvents[name]
			if not guards then
				return nil
			end
			if not config.disableServerGuards then
				local paramGuards = guards[1][1]
				local restGuard = guards[1][2]
				do
					local i = 0
					local _shouldIncrement = false
					while true do
						if _shouldIncrement then
							i += 1
						else
							_shouldIncrement = true
						end
						if not (i < math.max(#paramGuards, #args)) then
							break
						end
						local guard = paramGuards[i + 1] or restGuard
						if guard and not guard(args[i + 1]) then
							if config.warnOnInvalidGuards then
								warn("'" .. (tostring(player) .. ("' sent invalid arguments for event '" .. (name .. ("' (arg #" .. (tostring(i) .. "):"))))), args[i + 1])
							end
							fireNetworkHandler("onBadRequest", player, networkInfo, i)
							return remote:FireClient(player, id, NetworkingFunctionError.BadRequest)
						end
					end
				end
			end
			local processor = processors[name]
			if processor then
				local result = processor(player, unpack(args))
				local _arg0 = function(value)
					return remote:FireClient(player, id, getProcessResult(value), value)
				end
				result:andThen(_arg0):catch(function(reason)
					warn("Failed to process request to " .. name)
					warn(reason)
					remote:FireClient(player, id, false)
				end)
			else
				remote:FireClient(player, id, false)
			end
		end)
	end
	Players.PlayerRemoving:Connect(function(player)
		local _player = player
		players[_player] = nil
	end)
	return handler
end
local timeoutPromise
function createServerMethod(guard, middleware, processors, networkInfo, players, name, remote, config)
	local method = {
		invoke = function(self, player, ...)
			local args = { ... }
			return self:invokeWithTimeout(player, config.defaultServerTimeout, unpack(args))
		end,
		invokeWithTimeout = function(self, player, timeout, ...)
			local args = { ... }
			return TS.Promise.race({ timeoutPromise(timeout, NetworkingFunctionError.Timeout), TS.Promise.new(function(resolve, reject, onCancel)
				local requestInfo = getRequestInfo(player, players)
				local _original = requestInfo.nextId
				requestInfo.nextId += 1
				local id = _original
				local _requests = requestInfo.requests
				local _arg1 = function(value, rejection)
					if rejection then
						return reject(rejection)
					end
					if not config.disableServerGuards and not guard(value) then
						if config.warnOnInvalidGuards then
							warn("'" .. (tostring(player) .. ("' returned invalid value from event '" .. (name .. "':"))), value)
						end
						fireNetworkHandler("onBadResponse", player, networkInfo)
						return reject(NetworkingFunctionError.InvalidResult)
					end
					resolve(value)
				end
				_requests[id] = _arg1
				onCancel(function()
					requestInfo.requests[id] = nil
				end)
				remote:FireClient(player, id, unpack(args))
			end) })
		end,
		setCallback = function(self, callback)
			local _processors = processors
			local _name = name
			if _processors[_name] ~= nil then
				warn("Function.setCallback was called multiple times for " .. name)
			end
			local processor = createMiddlewareProcessor(middleware, networkInfo, callback)
			local _processors_1 = processors
			local _name_1 = name
			_processors_1[_name_1] = processor
		end,
		predict = function(self, player, ...)
			local args = { ... }
			return TS.Promise.new(function(resolve, reject)
				local _processors = processors
				local _name = name
				local processor = _processors[_name]
				if not processor then
					return reject(NetworkingFunctionError.Unprocessed)
				end
				resolve(processor(player, unpack(args)))
			end)
		end,
	}
	setmetatable(method, {
		__call = function(method, player, ...)
			local args = { ... }
			return method:invoke(player, unpack(args))
		end,
	})
	return method
end
function getRequestInfo(player, map)
	local _map = map
	local _player = player
	local requestInfo = _map[_player]
	if requestInfo then
		return requestInfo
	end
	requestInfo = {
		nextId = 0,
		requests = {},
	}
	local _map_1 = map
	local _player_1 = player
	local _requestInfo = requestInfo
	_map_1[_player_1] = _requestInfo
	return requestInfo
end
function timeoutPromise(timeout, rejectValue)
	local _exp = TS.Promise.delay(timeout)
	local _arg0 = function()
		return TS.Promise.reject(rejectValue)
	end
	return _exp:andThen(_arg0)
end
function getProcessResult(value)
	return if value == Skip then NetworkingFunctionError.Cancelled else true
end
return {
	createServerHandler = createServerHandler,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="30">
                  <Properties>
                    <string name="Name">errors</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.0
local TS = _G[script]
local t = TS.import(script, TS.getModule(script, "@rbxts", "t").lib.ts).t
local isNetworkingFunctionError = t.literal("Timeout", "Cancelled", "BadRequest", "Unprocessed", "InvalidResult")
local NetworkingFunctionError
do
	local _inverse = {}
	NetworkingFunctionError = setmetatable({}, {
		__index = _inverse,
	})
	NetworkingFunctionError.Timeout = "Timeout"
	_inverse.Timeout = "Timeout"
	NetworkingFunctionError.Cancelled = "Cancelled"
	_inverse.Cancelled = "Cancelled"
	NetworkingFunctionError.BadRequest = "BadRequest"
	_inverse.BadRequest = "BadRequest"
	NetworkingFunctionError.Unprocessed = "Unprocessed"
	_inverse.Unprocessed = "Unprocessed"
	NetworkingFunctionError.InvalidResult = "InvalidResult"
	_inverse.InvalidResult = "InvalidResult"
end
local function getFunctionError(value)
	local _value = value
	if type(_value) == "boolean" then
		return if value == false then NetworkingFunctionError.Unprocessed else nil
	elseif isNetworkingFunctionError(value) then
		return value
	end
end
return {
	getFunctionError = getFunctionError,
	isNetworkingFunctionError = isNetworkingFunctionError,
	NetworkingFunctionError = NetworkingFunctionError,
}
]]></string>
                  </Properties>
                </Item>
              </Item>
              <Item class="ModuleScript" referent="31">
                <Properties>
                  <string name="Name">handlers</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.0
local TS = _G[script]
local Signal = TS.import(script, TS.getModule(script, "@rbxts", "signal"))
local NetworkEvents = {
	onBadRequest = Signal.new(),
	onBadResponse = Signal.new(),
}
local function registerNetworkHandler(event, callback)
	return NetworkEvents[event]:Connect(callback)
end
local function fireNetworkHandler(event, ...)
	local args = { ... }
	(NetworkEvents[event]):Fire(unpack(args))
end
return {
	registerNetworkHandler = registerNetworkHandler,
	fireNetworkHandler = fireNetworkHandler,
}
]]></string>
                </Properties>
              </Item>
              <Item class="Folder" referent="32">
                <Properties>
                  <string name="Name">middleware</string>
                </Properties>
                <Item class="ModuleScript" referent="33">
                  <Properties>
                    <string name="Name">createMiddlewareProcessor</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.0
local TS = _G[script]
local function createMiddlewareProcessor(middlewareFactories, networkInfo, finalize)
	local middleware = {}
	if not middlewareFactories or #middlewareFactories == 0 then
		middleware[1] = finalize
	else
		do
			local i = #middlewareFactories - 1
			local _shouldIncrement = false
			while true do
				if _shouldIncrement then
					i -= 1
				else
					_shouldIncrement = true
				end
				if not (i >= 0) then
					break
				end
				local factory = middlewareFactories[i + 1]
				local processNext = middleware[i + 1 + 1] or finalize
				middleware[i + 1] = factory(TS.async(function(player, ...)
					local args = { ... }
					return processNext(player, unpack(args))
				end), networkInfo)
			end
		end
	end
	return TS.async(function(player, ...)
		local args = { ... }
		return middleware[1](player, unpack(args))
	end)
end
return {
	createMiddlewareProcessor = createMiddlewareProcessor,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="34">
                  <Properties>
                    <string name="Name">skip</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.0
local Skip = {
	__index = function()
		return nil
	end,
	__newindex = function()
		return nil
	end,
	__tostring = function()
		return "Networking.Skip"
	end,
}
setmetatable(Skip, Skip)
return {
	Skip = Skip,
}
]]></string>
                  </Properties>
                </Item>
              </Item>
              <Item class="Folder" referent="35">
                <Properties>
                  <string name="Name">util</string>
                </Properties>
                <Item class="ModuleScript" referent="36">
                  <Properties>
                    <string name="Name">populateInstanceMap</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.0
local TS = _G[script]
local _services = TS.import(script, TS.getModule(script, "@rbxts", "services"))
local ReplicatedStorage = _services.ReplicatedStorage
local RunService = _services.RunService
local function populateInstanceMap(className, globalName, names, map)
	if not RunService:IsRunning() then
		for _, name in names do
			local instance = Instance.new(className)
			instance.Name = name
			map[name] = instance
		end
		return nil
	end
	local remotes = if RunService:IsServer() then ReplicatedStorage:FindFirstChild(globalName) else ReplicatedStorage:WaitForChild(globalName)
	if not remotes then
		remotes = Instance.new("Folder")
		remotes.Name = globalName
		remotes.Parent = ReplicatedStorage
	end
	for _, name in names do
		if RunService:IsClient() then
			local instance = remotes:WaitForChild(name)
			if instance:IsA(className) then
				map[name] = instance
			end
		else
			local instance = remotes:FindFirstChild(name)
			if instance then
				if not instance:IsA(className) then
					error("Found " .. (name .. " but it is not a remote."))
				end
				map[name] = instance
			else
				local remote = Instance.new(className)
				remote.Name = name
				remote.Parent = remotes
				map[name] = remote
			end
		end
	end
end
return {
	populateInstanceMap = populateInstanceMap,
}
]]></string>
                  </Properties>
                </Item>
              </Item>
            </Item>
          </Item>
        </Item>
        <Item class="Folder" referent="37">
          <Properties>
            <string name="Name">@rbxts</string>
          </Properties>
          <Item class="Folder" referent="38">
            <Properties>
              <string name="Name">beacon</string>
            </Properties>
            <Item class="ModuleScript" referent="39">
              <Properties>
                <string name="Name">out</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.0
--[[
	*
	* Represents a connection to a signal.
]]
local Connection
do
	Connection = setmetatable({}, {
		__tostring = function()
			return "Connection"
		end,
	})
	Connection.__index = Connection
	function Connection.new(...)
		local self = setmetatable({}, Connection)
		return self:constructor(...) or self
	end
	function Connection:constructor(signal, fn)
		self.signal = signal
		self.Connected = true
		self._fn = fn
	end
	function Connection:Disconnect()
		if not self.Connected then
			return nil
		end
		self.Connected = false
		if self.signal._handlerListHead == self then
			self.signal._handlerListHead = self._next
		else
			local prev = self.signal._handlerListHead
			while prev and prev._next ~= self do
				prev = prev._next
			end
			if prev then
				prev._next = self._next
			end
		end
	end
	function Connection:Destroy()
		self:Disconnect()
	end
end
--[[
	*
	* Signals allow events to be dispatched to any number of listeners.
]]
local Signal
do
	Signal = setmetatable({}, {
		__tostring = function()
			return "Signal"
		end,
	})
	Signal.__index = Signal
	function Signal.new(...)
		local self = setmetatable({}, Signal)
		return self:constructor(...) or self
	end
	function Signal:constructor()
		self.waitingThreads = {}
		self._handlerListHead = nil
	end
	function Signal:Connect(callback)
		local connection = Connection.new(self, callback)
		if self._handlerListHead ~= nil then
			connection._next = self._handlerListHead
		end
		self._handlerListHead = connection
		return connection
	end
	function Signal:Once(callback)
		local done = false
		local c
		c = self:Connect(function(...)
			local args = { ... }
			if done then
				return nil
			end
			done = true
			c:Disconnect()
			callback(unpack(args))
		end)
		return c
	end
	function Signal:Fire(...)
		local args = { ... }
		local item = self._handlerListHead
		while item do
			if item.Connected then
				task.spawn(item._fn, unpack(args))
			end
			item = item._next
		end
	end
	function Signal:FireDeferred(...)
		local args = { ... }
		local item = self._handlerListHead
		while item do
			if item.Connected then
				task.defer(item._fn, unpack(args))
			end
			item = item._next
		end
	end
	function Signal:Wait()
		local running = coroutine.running()
		self.waitingThreads[running] = true
		self:Once(function(...)
			local args = { ... }
			self.waitingThreads[running] = nil
			task.spawn(running, unpack(args))
		end)
		return coroutine.yield()
	end
	function Signal:DisconnectAll()
		local item = self._handlerListHead
		while item do
			item.Connected = false
			item = item._next
		end
		self._handlerListHead = nil
		local _waitingThreads = self.waitingThreads
		local _arg0 = function(thread)
			return task.cancel(thread)
		end
		for _v in _waitingThreads do
			_arg0(_v, _v, _waitingThreads)
		end
		table.clear(self.waitingThreads)
	end
	function Signal:Destroy()
		self:DisconnectAll()
	end
end
return {
	Connection = Connection,
	Signal = Signal,
}
]]></string>
              </Properties>
            </Item>
          </Item>
          <Item class="Folder" referent="40">
            <Properties>
              <string name="Name">compiler-types</string>
            </Properties>
            <Item class="Folder" referent="41">
              <Properties>
                <string name="Name">types</string>
              </Properties>
            </Item>
          </Item>
          <Item class="Folder" referent="42">
            <Properties>
              <string name="Name">flipper</string>
            </Properties>
            <Item class="ModuleScript" referent="43">
              <Properties>
                <string name="Name">src</string>
                <string name="Source">local Flipper = {
	SingleMotor = require(script.SingleMotor),
	GroupMotor = require(script.GroupMotor),

	Instant = require(script.Instant),
	Linear = require(script.Linear),
	Spring = require(script.Spring),
	
	isMotor = require(script.isMotor),
}

return Flipper</string>
              </Properties>
              <Item class="ModuleScript" referent="44">
                <Properties>
                  <string name="Name">BaseMotor</string>
                  <string name="Source"><![CDATA[local RunService = game:GetService("RunService")

local Signal = require(script.Parent.Signal)

local noop = function() end

local BaseMotor = {}
BaseMotor.__index = BaseMotor

function BaseMotor.new()
	return setmetatable({
		_onStep = Signal.new(),
		_onStart = Signal.new(),
		_onComplete = Signal.new(),
	}, BaseMotor)
end

function BaseMotor:onStep(handler)
	return self._onStep:connect(handler)
end

function BaseMotor:onStart(handler)
	return self._onStart:connect(handler)
end

function BaseMotor:onComplete(handler)
	return self._onComplete:connect(handler)
end

function BaseMotor:start()
	if not self._connection then
		self._connection = RunService.RenderStepped:Connect(function(deltaTime)
			self:step(deltaTime)
		end)
	end
end

function BaseMotor:stop()
	if self._connection then
		self._connection:Disconnect()
		self._connection = nil
	end
end

BaseMotor.destroy = BaseMotor.stop

BaseMotor.step = noop
BaseMotor.getValue = noop
BaseMotor.setGoal = noop

function BaseMotor:__tostring()
	return "Motor"
end

return BaseMotor
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="45">
                <Properties>
                  <string name="Name">GroupMotor</string>
                  <string name="Source"><![CDATA[local BaseMotor = require(script.Parent.BaseMotor)
local SingleMotor = require(script.Parent.SingleMotor)

local isMotor = require(script.Parent.isMotor)

local GroupMotor = setmetatable({}, BaseMotor)
GroupMotor.__index = GroupMotor

local function toMotor(value)
	if isMotor(value) then
		return value
	end

	local valueType = typeof(value)

	if valueType == "number" then
		return SingleMotor.new(value, false)
	elseif valueType == "table" then
		return GroupMotor.new(value, false)
	end

	error(("Unable to convert %q to motor; type %s is unsupported"):format(value, valueType), 2)
end

function GroupMotor.new(initialValues, useImplicitConnections)
	assert(initialValues, "Missing argument #1: initialValues")
	assert(typeof(initialValues) == "table", "initialValues must be a table!")
	assert(not initialValues.step, "initialValues contains disallowed property \"step\". Did you mean to put a table of values here?")

	local self = setmetatable(BaseMotor.new(), GroupMotor)

	if useImplicitConnections ~= nil then
		self._useImplicitConnections = useImplicitConnections
	else
		self._useImplicitConnections = true
	end

	self._complete = true
	self._motors = {}

	for key, value in pairs(initialValues) do
		self._motors[key] = toMotor(value)
	end

	return self
end

function GroupMotor:step(deltaTime)
	if self._complete then
		return true
	end

	local allMotorsComplete = true

	for _, motor in pairs(self._motors) do
		local complete = motor:step(deltaTime)
		if not complete then
			-- If any of the sub-motors are incomplete, the group motor will not be complete either
			allMotorsComplete = false
		end
	end

	self._onStep:fire(self:getValue())

	if allMotorsComplete then
		if self._useImplicitConnections then
			self:stop()
		end

		self._complete = true
		self._onComplete:fire()
	end

	return allMotorsComplete
end

function GroupMotor:setGoal(goals)
	assert(not goals.step, "goals contains disallowed property \"step\". Did you mean to put a table of goals here?")

	self._complete = false
	self._onStart:fire()

	for key, goal in pairs(goals) do
		local motor = assert(self._motors[key], ("Unknown motor for key %s"):format(key))
		motor:setGoal(goal)
	end

	if self._useImplicitConnections then
		self:start()
	end
end

function GroupMotor:getValue()
	local values = {}

	for key, motor in pairs(self._motors) do
		values[key] = motor:getValue()
	end

	return values
end

function GroupMotor:__tostring()
	return "Motor(Group)"
end

return GroupMotor
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="46">
                <Properties>
                  <string name="Name">Instant</string>
                  <string name="Source">local Instant = {}
Instant.__index = Instant

function Instant.new(targetValue)
	return setmetatable({
		_targetValue = targetValue,
	}, Instant)
end

function Instant:step()
	return {
		complete = true,
		value = self._targetValue,
	}
end

return Instant</string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="47">
                <Properties>
                  <string name="Name">Linear</string>
                  <string name="Source">local Linear = {}
Linear.__index = Linear

function Linear.new(targetValue, options)
	assert(targetValue, "Missing argument #1: targetValue")
	
	options = options or {}

	return setmetatable({
		_targetValue = targetValue,
		_velocity = options.velocity or 1,
	}, Linear)
end

function Linear:step(state, dt)
	local position = state.value
	local velocity = self._velocity -- Linear motion ignores the state's velocity
	local goal = self._targetValue

	local dPos = dt * velocity

	local complete = dPos >= math.abs(goal - position)
	position = position + dPos * (goal > position and 1 or -1)
	if complete then
		position = self._targetValue
		velocity = 0
	end
	
	return {
		complete = complete,
		value = position,
		velocity = velocity,
	}
end

return Linear</string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="48">
                <Properties>
                  <string name="Name">Signal</string>
                  <string name="Source">local Connection = {}
Connection.__index = Connection

function Connection.new(signal, handler)
	return setmetatable({
		signal = signal,
		connected = true,
		_handler = handler,
	}, Connection)
end

function Connection:disconnect()
	if self.connected then
		self.connected = false

		for index, connection in pairs(self.signal._connections) do
			if connection == self then
				table.remove(self.signal._connections, index)
				return
			end
		end
	end
end

local Signal = {}
Signal.__index = Signal

function Signal.new()
	return setmetatable({
		_connections = {},
		_threads = {},
	}, Signal)
end

function Signal:fire(...)
	for _, connection in pairs(self._connections) do
		connection._handler(...)
	end

	for _, thread in pairs(self._threads) do
		coroutine.resume(thread, ...)
	end
	
	self._threads = {}
end

function Signal:connect(handler)
	local connection = Connection.new(self, handler)
	table.insert(self._connections, connection)
	return connection
end

function Signal:wait()
	table.insert(self._threads, coroutine.running())
	return coroutine.yield()
end

return Signal</string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="49">
                <Properties>
                  <string name="Name">SingleMotor</string>
                  <string name="Source"><![CDATA[local BaseMotor = require(script.Parent.BaseMotor)

local SingleMotor = setmetatable({}, BaseMotor)
SingleMotor.__index = SingleMotor

function SingleMotor.new(initialValue, useImplicitConnections)
	assert(initialValue, "Missing argument #1: initialValue")
	assert(typeof(initialValue) == "number", "initialValue must be a number!")

	local self = setmetatable(BaseMotor.new(), SingleMotor)

	if useImplicitConnections ~= nil then
		self._useImplicitConnections = useImplicitConnections
	else
		self._useImplicitConnections = true
	end

	self._goal = nil
	self._state = {
		complete = true,
		value = initialValue,
	}

	return self
end

function SingleMotor:step(deltaTime)
	if self._state.complete then
		return true
	end

	local newState = self._goal:step(self._state, deltaTime)

	self._state = newState
	self._onStep:fire(newState.value)

	if newState.complete then
		if self._useImplicitConnections then
			self:stop()
		end

		self._onComplete:fire()
	end

	return newState.complete
end

function SingleMotor:getValue()
	return self._state.value
end

function SingleMotor:setGoal(goal)
	self._state.complete = false
	self._goal = goal

	self._onStart:fire()

	if self._useImplicitConnections then
		self:start()
	end
end

function SingleMotor:__tostring()
	return "Motor(Single)"
end

return SingleMotor
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="50">
                <Properties>
                  <string name="Name">Spring</string>
                  <string name="Source">local VELOCITY_THRESHOLD = 0.001
local POSITION_THRESHOLD = 0.001

local EPS = 0.0001

local Spring = {}
Spring.__index = Spring

function Spring.new(targetValue, options)
	assert(targetValue, "Missing argument #1: targetValue")
	options = options or {}

	return setmetatable({
		_targetValue = targetValue,
		_frequency = options.frequency or 4,
		_dampingRatio = options.dampingRatio or 1,
	}, Spring)
end

function Spring:step(state, dt)
	-- Copyright 2018 Parker Stebbins (parker@fractality.io)
	-- github.com/Fraktality/Spring
	-- Distributed under the MIT license

	local d = self._dampingRatio
	local f = self._frequency*2*math.pi
	local g = self._targetValue
	local p0 = state.value
	local v0 = state.velocity or 0

	local offset = p0 - g
	local decay = math.exp(-d*f*dt)

	local p1, v1

	if d == 1 then -- Critically damped
		p1 = (offset*(1 + f*dt) + v0*dt)*decay + g
		v1 = (v0*(1 - f*dt) - offset*(f*f*dt))*decay
	elseif d &lt; 1 then -- Underdamped
		local c = math.sqrt(1 - d*d)

		local i = math.cos(f*c*dt)
		local j = math.sin(f*c*dt)

		-- Damping ratios approaching 1 can cause division by small numbers.
		-- To fix that, group terms around z=j/c and find an approximation for z.
		-- Start with the definition of z:
		--    z = sin(dt*f*c)/c
		-- Substitute a=dt*f:
		--    z = sin(a*c)/c
		-- Take the Maclaurin expansion of z with respect to c:
		--    z = a - (a^3*c^2)/6 + (a^5*c^4)/120 + O(c^6)
		--    z ≈ a - (a^3*c^2)/6 + (a^5*c^4)/120
		-- Rewrite in Horner form:
		--    z ≈ a + ((a*a)*(c*c)*(c*c)/20 - c*c)*(a*a*a)/6

		local z
		if c > EPS then
			z = j/c
		else
			local a = dt*f
			z = a + ((a*a)*(c*c)*(c*c)/20 - c*c)*(a*a*a)/6
		end

		-- Frequencies approaching 0 present a similar problem.
		-- We want an approximation for y as f approaches 0, where:
		--    y = sin(dt*f*c)/(f*c)
		-- Substitute b=dt*c:
		--    y = sin(b*c)/b
		-- Now reapply the process from z.

		local y
		if f*c > EPS then
			y = j/(f*c)
		else
			local b = f*c
			y = dt + ((dt*dt)*(b*b)*(b*b)/20 - b*b)*(dt*dt*dt)/6
		end

		p1 = (offset*(i + d*z) + v0*y)*decay + g
		v1 = (v0*(i - z*d) - offset*(z*f))*decay

	else -- Overdamped
		local c = math.sqrt(d*d - 1)

		local r1 = -f*(d - c)
		local r2 = -f*(d + c)

		local co2 = (v0 - offset*r1)/(2*f*c)
		local co1 = offset - co2

		local e1 = co1*math.exp(r1*dt)
		local e2 = co2*math.exp(r2*dt)

		p1 = e1 + e2 + g
		v1 = e1*r1 + e2*r2
	end

	local complete = math.abs(v1) &lt; VELOCITY_THRESHOLD and math.abs(p1 - g) &lt; POSITION_THRESHOLD
	
	return {
		complete = complete,
		value = complete and g or p1,
		velocity = v1,
	}
end

return Spring</string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="51">
                <Properties>
                  <string name="Name">isMotor</string>
                  <string name="Source">local function isMotor(value)
	local motorType = tostring(value):match("^Motor%((.+)%)$")

	if motorType then
		return true, motorType
	else
		return false
	end
end

return isMotor</string>
                </Properties>
              </Item>
            </Item>
            <Item class="Folder" referent="52">
              <Properties>
                <string name="Name">typings</string>
              </Properties>
            </Item>
          </Item>
          <Item class="Folder" referent="53">
            <Properties>
              <string name="Name">janitor</string>
            </Properties>
            <Item class="ModuleScript" referent="54">
              <Properties>
                <string name="Name">src</string>
                <string name="Source"><![CDATA[-- Compiled with L+ C Edition
-- Janitor
-- Original by Validark
-- Modifications by pobammer
-- roblox-ts support by OverHash and Validark
-- LinkToInstance fixed by Elttob.
-- Cleanup edge cases fixed by codesenseAye.

local GetPromiseLibrary = require(script.GetPromiseLibrary)
local RbxScriptConnection = require(script.RbxScriptConnection)
local Symbol = require(script.Symbol)
local FoundPromiseLibrary, Promise = GetPromiseLibrary()

local IndicesReference = Symbol("IndicesReference")
local LinkToInstanceIndex = Symbol("LinkToInstanceIndex")

local INVALID_METHOD_NAME = "Object is a %s and as such expected `true?` for the method name and instead got %s. Traceback: %s"
local METHOD_NOT_FOUND_ERROR = "Object %s doesn't have method %s, are you sure you want to add it? Traceback: %s"
local NOT_A_PROMISE = "Invalid argument #1 to 'Janitor:AddPromise' (Promise expected, got %s (%s)) Traceback: %s"

type RbxScriptConnection = RbxScriptConnection.RbxScriptConnection

--[=[
	Janitor is a light-weight, flexible object for cleaning up connections, instances, or anything. This implementation covers all use cases,
	as it doesn't force you to rely on naive typechecking to guess how an instance should be cleaned up.
	Instead, the developer may specify any behavior for any object.

	@class Janitor
]=]
local Janitor = {}
Janitor.ClassName = "Janitor"
Janitor.CurrentlyCleaning = true
Janitor.SuppressInstanceReDestroy = false
Janitor[IndicesReference] = nil
Janitor.__index = Janitor

--[=[
	@prop CurrentlyCleaning boolean
	@readonly
	@within Janitor

	Whether or not the Janitor is currently cleaning up.
]=]

--[=[
	@prop SuppressInstanceReDestroy boolean
	@within Janitor

	Whether or not you want to suppress the re-destroying
	of instances. Default is false, which is the original
	behavior.
]=]

local TypeDefaults = {
	["function"] = true;
	thread = true;
	RBXScriptConnection = "Disconnect";
}

--[=[
	Instantiates a new Janitor object.
	@return Janitor
]=]
function Janitor.new(): Janitor
	return setmetatable({
		CurrentlyCleaning = false;
		[IndicesReference] = nil;
	}, Janitor) :: any
end

--[=[
	Determines if the passed object is a Janitor. This checks the metatable directly.

	@param Object any -- The object you are checking.
	@return boolean -- `true` if `Object` is a Janitor.
]=]
function Janitor.Is(Object: any): boolean
	return type(Object) == "table" and getmetatable(Object) == Janitor
end

type BooleanOrString = boolean | string

--[=[
	Adds an `Object` to Janitor for later cleanup, where `MethodName` is the key of the method within `Object` which should be called at cleanup time.
	If the `MethodName` is `true` the `Object` itself will be called if it's a function or have `task.cancel` called on it if it is a thread. If passed
	an index it will occupy a namespace which can be `Remove()`d or overwritten. Returns the `Object`.

	:::info
	Objects not given an explicit `MethodName` will be passed into the `typeof` function for a very naive typecheck.
	RBXConnections will be assigned to "Disconnect", functions and threads will be assigned to `true`, and everything else will default to "Destroy".
	Not recommended, but hey, you do you.
	:::

	### Luau:

	```lua
	local Workspace = game:GetService("Workspace")
	local TweenService = game:GetService("TweenService")

	local Obliterator = Janitor.new()
	local Part = Workspace.Part

	-- Queue the Part to be Destroyed at Cleanup time
	Obliterator:Add(Part, "Destroy")

	-- Queue function to be called with `true` MethodName
	Obliterator:Add(print, true)

	-- Close a thread.
	Obliterator:Add(task.defer(function()
		while true do
			print("Running!")
			task.wait(0.5)
		end
	end), true)

	-- This implementation allows you to specify behavior for any object
	Obliterator:Add(TweenService:Create(Part, TweenInfo.new(1), {Size = Vector3.new(1, 1, 1)}), "Cancel")

	-- By passing an Index, the Object will occupy a namespace
	-- If "CurrentTween" already exists, it will call :Remove("CurrentTween") before writing
	Obliterator:Add(TweenService:Create(Part, TweenInfo.new(1), {Size = Vector3.new(1, 1, 1)}), "Destroy", "CurrentTween")
	```

	### TypeScript:

	```ts
	import { Workspace, TweenService } from "@rbxts/services";
	import { Janitor } from "@rbxts/janitor";

	const Obliterator = new Janitor<{ CurrentTween: Tween }>();
	const Part = Workspace.FindFirstChild("Part") as Part;

	// Queue the Part to be Destroyed at Cleanup time
	Obliterator.Add(Part, "Destroy");

	// Queue function to be called with `true` MethodName
	Obliterator.Add(print, true);

	// Close a thread.
	Obliterator.Add(task.defer(() => {
		while (true) {
			print("Running!");
			task.wait(0.5);
		}
	}), true);

	// This implementation allows you to specify behavior for any object
	Obliterator.Add(TweenService.Create(Part, new TweenInfo(1), {Size: new Vector3(1, 1, 1)}), "Cancel");

	// By passing an Index, the Object will occupy a namespace
	// If "CurrentTween" already exists, it will call :Remove("CurrentTween") before writing
	Obliterator.Add(TweenService.Create(Part, new TweenInfo(1), {Size: new Vector3(1, 1, 1)}), "Destroy", "CurrentTween");
	```

	@param Object T -- The object you want to clean up.
	@param MethodName? string|true -- The name of the method that will be used to clean up. If not passed, it will first check if the object's type exists in TypeDefaults, and if that doesn't exist, it assumes `Destroy`.
	@param Index? any -- The index that can be used to clean up the object manually.
	@return T -- The object that was passed as the first argument.
]=]
function Janitor:Add<T>(Object: T, MethodName: BooleanOrString?, Index: any?): T
	if Index then
		self:Remove(Index)

		local This = self[IndicesReference]
		if not This then
			This = {}
			self[IndicesReference] = This
		end

		This[Index] = Object
	end

	local TypeOf = typeof(Object)
	local NewMethodName = MethodName or TypeDefaults[TypeOf] or "Destroy"

	if TypeOf == "function" or TypeOf == "thread" then
		if NewMethodName ~= true then
			warn(string.format(INVALID_METHOD_NAME, TypeOf, tostring(NewMethodName), debug.traceback(nil :: any, 2)))
		end
	else
		if not (Object :: any)[NewMethodName] then
			warn(string.format(METHOD_NOT_FOUND_ERROR, tostring(Object), tostring(NewMethodName), debug.traceback(nil :: any, 2)))
		end
	end

	self[Object] = NewMethodName
	return Object
end

--[=[
	Adds a [Promise](https://github.com/evaera/roblox-lua-promise) to the Janitor. If the Janitor is cleaned up and the Promise is not completed, the Promise will be cancelled.

	### Luau:

	```lua
	local Obliterator = Janitor.new()
	Obliterator:AddPromise(Promise.delay(3)):andThenCall(print, "Finished!"):catch(warn)
	task.wait(1)
	Obliterator:Cleanup()
	```

	### TypeScript:

	```ts
	import { Janitor } from "@rbxts/janitor";

	const Obliterator = new Janitor();
	Obliterator.AddPromise(Promise.delay(3)).andThenCall(print, "Finished!").catch(warn);
	task.wait(1);
	Obliterator.Cleanup();
	```

	@param PromiseObject Promise -- The promise you want to add to the Janitor.
	@return Promise
]=]
function Janitor:AddPromise(PromiseObject)
	if FoundPromiseLibrary then
		if not Promise.is(PromiseObject) then
			error(string.format(NOT_A_PROMISE, typeof(PromiseObject), tostring(PromiseObject), debug.traceback(nil :: any, 2)))
		end

		if PromiseObject:getStatus() == Promise.Status.Started then
			local Id = newproxy(false)
			local NewPromise = self:Add(Promise.new(function(Resolve, _, OnCancel)
				if OnCancel(function()
					PromiseObject:cancel()
				end) then
					return
				end

				Resolve(PromiseObject)
			end), "cancel", Id)

			NewPromise:finallyCall(self.Remove, self, Id)
			return NewPromise
		else
			return PromiseObject
		end
	else
		return PromiseObject
	end
end

--[=[
	Cleans up whatever `Object` was set to this namespace by the 3rd parameter of [Janitor.Add](#Add).

	### Luau:

	```lua
	local Obliterator = Janitor.new()
	Obliterator:Add(workspace.Baseplate, "Destroy", "Baseplate")
	Obliterator:Remove("Baseplate")
	```

	### TypeScript:

	```ts
	import { Workspace } from "@rbxts/services";
	import { Janitor } from "@rbxts/janitor";

	const Obliterator = new Janitor<{ Baseplate: Part }>();
	Obliterator.Add(Workspace.FindFirstChild("Baseplate") as Part, "Destroy", "Baseplate");
	Obliterator.Remove("Baseplate");
	```

	@param Index any -- The index you want to remove.
	@return Janitor
]=]
function Janitor:Remove(Index: any)
	local This = self[IndicesReference]

	if This then
		local Object = This[Index]

		if Object then
			local MethodName = self[Object]

			if MethodName then
				if MethodName == true then
					if type(Object) == "function" then
						Object()
					else
						local Cancelled
						if coroutine.running() ~= Object then
							Cancelled = pcall(function()
								task.cancel(Object)
							end)
						end

						if not Cancelled then
							task.defer(function()
								if Object then
									task.cancel(Object)
								end
							end)
						end
					end
				else
					local ObjectMethod = Object[MethodName]
					if ObjectMethod then
						if self.SuppressInstanceReDestroy and MethodName == "Destroy" and typeof(Object) == "Instance" then
							pcall(ObjectMethod, Object)
						else
							ObjectMethod(Object)
						end
					end
				end

				self[Object] = nil
			end

			This[Index] = nil
		end
	end

	return self
end

--[=[
	Removes an object from the Janitor without running a cleanup.

	### Luau

	```lua
	local Obliterator = Janitor.new()
	Obliterator:Add(function()
		print("Removed!")
	end, true, "Function")

	Obliterator:RemoveNoClean("Function") -- Does not print.
	```

	### TypeScript:

	```ts
	import { Janitor } from "@rbxts/janitor";

	const Obliterator = new Janitor<{ Function: () => void }>();
	Obliterator.Add(() => print("Removed!"), true, "Function");

	Obliterator.RemoveNoClean("Function"); // Does not print.
	```

	@since v1.15
	@param Index any -- The index you are removing.
	@return Janitor
]=]
function Janitor:RemoveNoClean(Index: any)
	local This = self[IndicesReference]

	if This then
		local Object = This[Index]
		if Object then
			self[Object] = nil
		end

		This[Index] = nil
	end

	return self
end

--[=[
	Cleans up multiple objects at once.

	### Luau:

	```lua
	local Obliterator = Janitor.new()
	Obliterator:Add(function()
		print("Removed One")
	end, true, "One")

	Obliterator:Add(function()
		print("Removed Two")
	end, true, "Two")

	Obliterator:Add(function()
		print("Removed Three")
	end, true, "Three")

	Obliterator:RemoveList("One", "Two", "Three") -- Prints "Removed One", "Removed Two", and "Removed Three"
	```

	### TypeScript:

	```ts
	import { Janitor } from "@rbxts/janitor";

	type NoOp = () => void

	const Obliterator = new Janitor<{ One: NoOp, Two: NoOp, Three: NoOp }>();
	Obliterator.Add(() => print("Removed One"), true, "One");
	Obliterator.Add(() => print("Removed Two"), true, "Two");
	Obliterator.Add(() => print("Removed Three"), true, "Three");

	Obliterator.RemoveList("One", "Two", "Three"); // Prints "Removed One", "Removed Two", and "Removed Three"
	```

	@since v1.14
	@param ... any -- The indices you want to remove.
	@return Janitor
]=]
function Janitor:RemoveList(...: any)
	local This = self[IndicesReference]
	if This then
		local Length = select("#", ...)
		if Length == 1 then
			return self:Remove(...)
		else
			for SelectIndex = 1, Length do
				self:Remove(select(SelectIndex, ...))
			end
		end
	end

	return self
end

--[=[
	Cleans up multiple objects at once without running their cleanup.

	### Luau:

	```lua
	local Obliterator = Janitor.new()
	Obliterator:Add(function()
		print("Removed One")
	end, true, "One")

	Obliterator:Add(function()
		print("Removed Two")
	end, true, "Two")

	Obliterator:Add(function()
		print("Removed Three")
	end, true, "Three")

	Obliterator:RemoveListNoClean("One", "Two", "Three") -- Nothing is printed.
	```

	### TypeScript:

	```ts
	import { Janitor } from "@rbxts/janitor";

	type NoOp = () => void

	const Obliterator = new Janitor<{ One: NoOp, Two: NoOp, Three: NoOp }>();
	Obliterator.Add(() => print("Removed One"), true, "One");
	Obliterator.Add(() => print("Removed Two"), true, "Two");
	Obliterator.Add(() => print("Removed Three"), true, "Three");

	Obliterator.RemoveListNoClean("One", "Two", "Three"); // Nothing is printed.
	```

	@since v1.15
	@param ... any -- The indices you want to remove.
	@return Janitor
]=]
function Janitor:RemoveListNoClean(...: any)
	local This = self[IndicesReference]
	if This then
		local Length = select("#", ...)
		if Length == 1 then
			return self:RemoveNoClean(...)
		else
			for SelectIndex = 1, Length do
				-- MACRO
				local Index = select(SelectIndex, ...)
				local Object = This[Index]
				if Object then
					self[Object] = nil
				end

				This[Index] = nil
			end
		end
	end

	return self
end

--[=[
	Gets whatever object is stored with the given index, if it exists. This was added since Maid allows getting the task using `__index`.

	### Luau:

	```lua
	local Obliterator = Janitor.new()
	Obliterator:Add(workspace.Baseplate, "Destroy", "Baseplate")
	print(Obliterator:Get("Baseplate")) -- Returns Baseplate.
	```

	### TypeScript:

	```ts
	import { Workspace } from "@rbxts/services";
	import { Janitor } from "@rbxts/janitor";

	const Obliterator = new Janitor<{ Baseplate: Part }>();
	Obliterator.Add(Workspace.FindFirstChild("Baseplate") as Part, "Destroy", "Baseplate");
	print(Obliterator.Get("Baseplate")); // Returns Baseplate.
	```

	@param Index any -- The index that the object is stored under.
	@return any? -- This will return the object if it is found, but it won't return anything if it doesn't exist.
]=]
function Janitor:Get(Index: any): any?
	local This = self[IndicesReference]
	return if This then This[Index] else nil
end

--[=[
	Returns a frozen copy of the Janitor's indices.

	### Luau:

	```lua
	local Obliterator = Janitor.new()
	Obliterator:Add(workspace.Baseplate, "Destroy", "Baseplate")
	print(Obliterator:GetAll().Baseplate) -- Prints Baseplate.
	```

	### TypeScript:

	```ts
	import { Workspace } from "@rbxts/services";
	import { Janitor } from "@rbxts/janitor";

	const Obliterator = new Janitor<{ Baseplate: Part }>();
	Obliterator.Add(Workspace.FindFirstChild("Baseplate") as Part, "Destroy", "Baseplate");
	print(Obliterator.GetAll().Baseplate); // Prints Baseplate.
	```

	@since v1.15.1
	@return {[any]: any}
]=]
function Janitor:GetAll(): {[any]: any}
	local This = self[IndicesReference]
	return if This then table.freeze(table.clone(This)) else {}
end

local function GetFenv(self)
	return function()
		for Object, MethodName in next, self do
			if Object ~= IndicesReference then
				return Object, MethodName
			end
		end
	end
end

--[=[
	Calls each Object's `MethodName` (or calls the Object if `MethodName == true`) and removes them from the Janitor. Also clears the namespace.
	This function is also called when you call a Janitor Object (so it can be used as a destructor callback).

	### Luau:

	```lua
	Obliterator:Cleanup() -- Valid.
	Obliterator() -- Also valid.
	```

	### TypeScript:

	```ts
	Obliterator.Cleanup()
	```
]=]
function Janitor:Cleanup()
	if not self.CurrentlyCleaning then
		self.CurrentlyCleaning = nil

		local Get = GetFenv(self)
		local Object, MethodName = Get()

		while Object and MethodName do -- changed to a while loop so that if you add to the janitor inside of a callback it doesn't get untracked (instead it will loop continuously which is a lot better than a hard to pindown edgecase)
			if MethodName == true then
				if type(Object) == "function" then
					Object()
				else
					local Cancelled
					if coroutine.running() ~= Object then
						Cancelled = pcall(function()
							task.cancel(Object)
						end)
					end

					if not Cancelled then
						task.defer(function()
							if Object then
								task.cancel(Object)
							end
						end)
					end
				end
			else
				local ObjectMethod = Object[MethodName]
				if ObjectMethod then
					if self.SuppressInstanceReDestroy and MethodName == "Destroy" and typeof(Object) == "Instance" then
						pcall(ObjectMethod, Object)
					else
						ObjectMethod(Object)
					end
				end
			end

			self[Object] = nil
			Object, MethodName = Get()
		end

		local This = self[IndicesReference]
		if This then
			table.clear(This)
			self[IndicesReference] = {}
		end

		self.CurrentlyCleaning = false
	end
end

--[=[
	Calls [Janitor.Cleanup](#Cleanup) and renders the Janitor unusable.

	:::warning
	Running this will make any further attempts to call a method of Janitor error.
	:::
]=]
function Janitor:Destroy()
	self:Cleanup()
	table.clear(self)
	setmetatable(self, nil)
end

Janitor.__call = Janitor.Cleanup

--[=[
	"Links" this Janitor to an Instance, such that the Janitor will `Cleanup` when the Instance is `Destroyed()` and garbage collected.
	A Janitor may only be linked to one instance at a time, unless `AllowMultiple` is true. When called with a truthy `AllowMultiple` parameter,
	the Janitor will "link" the Instance without overwriting any previous links, and will also not be overwritable.
	When called with a falsy `AllowMultiple` parameter, the Janitor will overwrite the previous link which was also called with a falsy `AllowMultiple` parameter, if applicable.

	### Luau:

	```lua
	local Obliterator = Janitor.new()

	Obliterator:Add(function()
		print("Cleaning up!")
	end, true)

	do
		local Folder = Instance.new("Folder")
		Obliterator:LinkToInstance(Folder)
		Folder:Destroy()
	end
	```

	### TypeScript:

	```ts
	import { Janitor } from "@rbxts/janitor";

	const Obliterator = new Janitor();
	Obliterator.Add(() => print("Cleaning up!"), true);

	{
		const Folder = new Instance("Folder");
		Obliterator.LinkToInstance(Folder, false);
		Folder.Destroy();
	}
	```

	@param Object Instance -- The instance you want to link the Janitor to.
	@param AllowMultiple? boolean -- Whether or not to allow multiple links on the same Janitor.
	@return RBXScriptConnection -- A RBXScriptConnection that can be disconnected to prevent the cleanup of LinkToInstance.
]=]
function Janitor:LinkToInstance(Object: Instance, AllowMultiple: boolean?): RBXScriptConnection
	local IndexToUse = AllowMultiple and newproxy(false) or LinkToInstanceIndex

	return self:Add(Object.Destroying:Connect(function()
		self:Cleanup()
	end), "Disconnect", IndexToUse)
end

--[=[
	This is the legacy LinkToInstance function. It is kept for backwards compatibility in case something is different with `Instance.Destroying`.

	"Links" this Janitor to an Instance, such that the Janitor will `Cleanup` when the Instance is `Destroyed()` and garbage collected.
	A Janitor may only be linked to one instance at a time, unless `AllowMultiple` is true. When called with a truthy `AllowMultiple` parameter,
	the Janitor will "link" the Instance without overwriting any previous links, and will also not be overwritable.
	When called with a falsy `AllowMultiple` parameter, the Janitor will overwrite the previous link which was also called with a falsy `AllowMultiple` parameter, if applicable.
	This returns a mock `RBXScriptConnection` (see: [RbxScriptConnection](/api/RbxScriptConnection)).

	### Luau:

	```lua
	local Obliterator = Janitor.new()

	Obliterator:Add(function()
		print("Cleaning up!")
	end, true)

	do
		local Folder = Instance.new("Folder")
		Obliterator:LinkToInstance(Folder)
		Folder:Destroy()
	end
	```

	### TypeScript:

	```ts
	import { Janitor } from "@rbxts/janitor";

	const Obliterator = new Janitor();
	Obliterator.Add(() => print("Cleaning up!"), true);

	{
		const Folder = new Instance("Folder");
		Obliterator.LinkToInstance(Folder, false);
		Folder.Destroy();
	}
	```

	@deprecated v1.4.1 -- Use `Janitor:LinkToInstance` instead.
	@param Object Instance -- The instance you want to link the Janitor to.
	@param AllowMultiple? boolean -- Whether or not to allow multiple links on the same Janitor.
	@return RbxScriptConnection -- A pseudo RBXScriptConnection that can be disconnected to prevent the cleanup of LinkToInstance.
]=]
function Janitor:LegacyLinkToInstance(Object: Instance, AllowMultiple: boolean?): RbxScriptConnection
	local Connection
	local IndexToUse = AllowMultiple and newproxy(false) or LinkToInstanceIndex
	local IsNilParented = Object.Parent == nil
	local ManualDisconnect = setmetatable({}, RbxScriptConnection)

	local function ChangedFunction(_DoNotUse, NewParent)
		if ManualDisconnect.Connected then
			_DoNotUse = nil
			IsNilParented = NewParent == nil

			if IsNilParented then
				task.defer(function()
					if not ManualDisconnect.Connected then
						return
					elseif not Connection.Connected then
						self:Cleanup()
					else
						while IsNilParented and Connection.Connected and ManualDisconnect.Connected do
							task.wait()
						end

						if ManualDisconnect.Connected and IsNilParented then
							self:Cleanup()
						end
					end
				end)
			end
		end
	end

	Connection = Object.AncestryChanged:Connect(ChangedFunction)
	ManualDisconnect.Connection = Connection

	if IsNilParented then
		ChangedFunction(nil, Object.Parent)
	end

	Object = nil :: any
	return self:Add(ManualDisconnect, "Disconnect", IndexToUse)
end

--[=[
	Links several instances to a new Janitor, which is then returned.

	@param ... Instance -- All the Instances you want linked.
	@return Janitor -- A new Janitor that can be used to manually disconnect all LinkToInstances.
]=]
function Janitor:LinkToInstances(...: Instance)
	local ManualCleanup = Janitor.new()
	for _, Object in {...} do
		ManualCleanup:Add(self:LinkToInstance(Object, true), "Disconnect")
	end

	return ManualCleanup
end

function Janitor:__tostring()
	return "Janitor"
end

export type Janitor = {
	ClassName: "Janitor",
	CurrentlyCleaning: boolean,
	SuppressInstanceReDestroy: boolean,

	Add: <T>(self: Janitor, Object: T, MethodName: BooleanOrString?, Index: any?) -> T,
	AddPromise: <T>(self: Janitor, PromiseObject: T) -> T,

	Remove: (self: Janitor, Index: any) -> Janitor,
	RemoveNoClean: (self: Janitor, Index: any) -> Janitor,

	RemoveList: (self: Janitor, ...any) -> Janitor,
	RemoveListNoClean: (self: Janitor, ...any) -> Janitor,

	Get: (self: Janitor, Index: any) -> any?,
	GetAll: (self: Janitor) -> {[any]: any},

	Cleanup: (self: Janitor) -> (),
	Destroy: (self: Janitor) -> (),

	LinkToInstance: (self: Janitor, Object: Instance, AllowMultiple: boolean?) -> RBXScriptConnection,
	LegacyLinkToInstance: (self: Janitor, Object: Instance, AllowMultiple: boolean?) -> RbxScriptConnection,

	LinkToInstances: (self: Janitor, ...Instance) -> Janitor,
}

table.freeze(Janitor)
return {
	Janitor = Janitor,
}
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="55">
                <Properties>
                  <string name="Name">GetPromiseLibrary</string>
                  <string name="Source"><![CDATA[-- monkey patched by OverHash for roblox-ts support
-- roblox-ts exposes the TS runtime lib through _G[script]
-- which exposes the Promise library
local function GetPromiseLibrary()
	return true, _G[script.Parent].Promise
end

return GetPromiseLibrary
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="56">
                <Properties>
                  <string name="Name">RbxScriptConnection</string>
                  <string name="Source"><![CDATA[--[=[
	A wrapper for an `RBXScriptConnection`. Makes the Janitor clean up when the instance is destroyed. This was created by Corecii.

	@class RbxScriptConnection
]=]
local RbxScriptConnection = {}
RbxScriptConnection.Connected = true
RbxScriptConnection.__index = RbxScriptConnection

--[=[
	@prop Connected boolean
	@within RbxScriptConnection

	Whether or not this connection is still connected.
]=]

--[=[
	Disconnects the Signal.
]=]
function RbxScriptConnection:Disconnect()
	if self.Connected then
		self.Connected = false
		self.Connection:Disconnect()
	end
end

function RbxScriptConnection._new(RBXScriptConnection: RBXScriptConnection)
	return setmetatable({
		Connection = RBXScriptConnection;
	}, RbxScriptConnection)
end

function RbxScriptConnection:__tostring()
	return "RbxScriptConnection<" .. tostring(self.Connected) .. ">"
end

export type RbxScriptConnection = typeof(RbxScriptConnection._new(game:GetPropertyChangedSignal("ClassName"):Connect(function() end)))
return RbxScriptConnection
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="57">
                <Properties>
                  <string name="Name">Symbol</string>
                  <string name="Source"><![CDATA[-- This only exists because the LSP warns Key `__tostring` not found in type `table?`.
local function Symbol(Name: string)
	local self = newproxy(true)
	local Metatable = getmetatable(self)
	function Metatable.__tostring()
		return Name
	end

	return self
end

return Symbol
]]></string>
                </Properties>
              </Item>
            </Item>
          </Item>
          <Item class="Folder" referent="58">
            <Properties>
              <string name="Name">log</string>
            </Properties>
            <Item class="ModuleScript" referent="59">
              <Properties>
                <string name="Name">out</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.3.3
local TS = _G[script]
local exports = {}
local LogEventRobloxOutputSink = TS.import(script, script, "Core", "LogEventRobloxOutputSink").LogEventRobloxOutputSink
local Logger = TS.import(script, script, "Logger").Logger
exports.Logger = TS.import(script, script, "Logger").Logger
exports.LogLevel = TS.import(script, script, "Core").LogLevel
local Log = {}
do
	local _container = Log
	local defaultLogger = Logger:default()
	local function SetLogger(logger)
		defaultLogger = logger
	end
	_container.SetLogger = SetLogger
	local function Default()
		return defaultLogger
	end
	_container.Default = Default
	--[[
		*
		* Configure a custom logger
	]]
	local function Configure()
		return Logger:configure()
	end
	_container.Configure = Configure
	--[[
		*
		* Creates a custom logger
		* @returns The logger configuration, use `Initialize` to get the logger once configured
		* @deprecated Use {@link Configure}. This will be removed in future.
	]]
	local Create = Configure
	_container.Create = Create
	--[[
		*
		* The default roblox output sink
		* @param options Options for the sink
	]]
	local RobloxOutput = function(options)
		if options == nil then
			options = {}
		end
		return LogEventRobloxOutputSink.new(options)
	end
	_container.RobloxOutput = RobloxOutput
	--[[
		*
		* Write a "Fatal" message to the default logger
		* @param template
		* @param args
	]]
	local function Fatal(template, ...)
		local args = { ... }
		return defaultLogger:Fatal(template, unpack(args))
	end
	_container.Fatal = Fatal
	--[[
		*
		* Write a "Verbose" message to the default logger
		* @param template
		* @param args
	]]
	local function Verbose(template, ...)
		local args = { ... }
		defaultLogger:Verbose(template, unpack(args))
	end
	_container.Verbose = Verbose
	--[[
		*
		* Write an "Information" message to the default logger
		* @param template
		* @param args
	]]
	local function Info(template, ...)
		local args = { ... }
		defaultLogger:Info(template, unpack(args))
	end
	_container.Info = Info
	--[[
		*
		* Write a "Debugging" message to the default logger
		* @param template
		* @param args
	]]
	local function Debug(template, ...)
		local args = { ... }
		defaultLogger:Debug(template, unpack(args))
	end
	_container.Debug = Debug
	--[[
		*
		* Write a "Warning" message to the default logger
		* @param template
		* @param args
	]]
	local function Warn(template, ...)
		local args = { ... }
		defaultLogger:Warn(template, unpack(args))
	end
	_container.Warn = Warn
	--[[
		*
		* Write an "Error" message to the default logger
		* @param template
		* @param args
	]]
	local function Error(template, ...)
		local args = { ... }
		return defaultLogger:Error(template, unpack(args))
	end
	_container.Error = Error
	--[[
		*
		* Creates a logger that enriches log events with the specified context as the property `SourceContext`.
		* @param context The tag to use
	]]
	local function ForContext(context, contextConfiguration)
		return defaultLogger:ForContext(context, contextConfiguration)
	end
	_container.ForContext = ForContext
	--[[
		*
		* Creates a logger that nriches log events with the specified property
		* @param name The name of the property
		* @param value The value of the property
	]]
	local function ForProperty(name, value)
		return defaultLogger:ForProperty(name, value)
	end
	_container.ForProperty = ForProperty
	--[[
		*
		* Creates a logger that enriches log events with the specified properties
		* @param props The properties
	]]
	local function ForProperties(props)
		return defaultLogger:ForProperties(props)
	end
	_container.ForProperties = ForProperties
	--[[
		*
		* Creates a logger that enriches log events with the `SourceContext` as the containing script
	]]
	local function ForScript(scriptContextConfiguration)
		-- Unfortunately have to duplicate here, since `debug.info`.
		local s = debug.info(2, "s")
		local copy = defaultLogger:Copy()
		local _result = scriptContextConfiguration
		if _result ~= nil then
			_result(copy)
		end
		return copy:EnrichWithProperties({
			SourceContext = s,
			SourceKind = "Script",
		}):Create()
	end
	_container.ForScript = ForScript
	--[[
		*
		* Set the minimum log level for the default logger
	]]
	local function SetMinLogLevel(logLevel)
		defaultLogger:SetMinLogLevel(logLevel)
	end
	_container.SetMinLogLevel = SetMinLogLevel
	--[[
		*
		* Creates a logger that enriches log events with `SourceContext` as the specified function
	]]
	local function ForFunction(func, funcContextConfiguration)
		return defaultLogger:ForFunction(func, funcContextConfiguration)
	end
	_container.ForFunction = ForFunction
end
local default = Log
exports.default = default
return exports
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="60">
                <Properties>
                  <string name="Name">Configuration</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.3.3
local TS = _G[script]
local LogEventPropertyEnricher = TS.import(script, script.Parent, "Core", "LogEventPropertyEnricher").LogEventPropertyEnricher
local LogLevel = TS.import(script, script.Parent, "Core").LogLevel
local LogEventCallbackSink = TS.import(script, script.Parent, "Core", "LogEventCallbackSink").LogEventCallbackSink
local RunService = game:GetService("RunService")
local LogConfiguration
do
	LogConfiguration = setmetatable({}, {
		__tostring = function()
			return "LogConfiguration"
		end,
	})
	LogConfiguration.__index = LogConfiguration
	function LogConfiguration.new(...)
		local self = setmetatable({}, LogConfiguration)
		return self:constructor(...) or self
	end
	function LogConfiguration:constructor(logger)
		self.logger = logger
		self.sinks = {}
		self.enrichers = {}
		self.logLevel = if RunService:IsStudio() then LogLevel.Debugging else LogLevel.Information
	end
	function LogConfiguration:WriteTo(sink, configure)
		local _result = configure
		if _result ~= nil then
			_result(sink)
		end
		local _sinks = self.sinks
		table.insert(_sinks, sink)
		return self
	end
	function LogConfiguration:WriteToCallback(sinkCallback, configure)
		local sink = LogEventCallbackSink.new(sinkCallback)
		local _result = configure
		if _result ~= nil then
			_result(sink)
		end
		local _sinks = self.sinks
		table.insert(_sinks, sink)
		return self
	end
	function LogConfiguration:Enrich(enricher)
		if type(enricher) == "function" then
		else
			local _enrichers = self.enrichers
			table.insert(_enrichers, enricher)
		end
		return self
	end
	function LogConfiguration:EnrichWithProperty(propertyName, value, configure)
		return self:EnrichWithProperties({
			[propertyName] = value,
		}, configure)
	end
	function LogConfiguration:EnrichWithProperties(props, configure)
		local enricher = LogEventPropertyEnricher.new(props)
		local _result = configure
		if _result ~= nil then
			_result(enricher)
		end
		local _enrichers = self.enrichers
		table.insert(_enrichers, enricher)
		return self
	end
	function LogConfiguration:SetMinLogLevel(logLevel)
		self.logLevel = logLevel
		return self
	end
	function LogConfiguration:Create()
		self.logger:SetSinks(self.sinks)
		self.logger:SetEnrichers(self.enrichers)
		self.logger:SetMinLogLevel(self.logLevel)
		return self.logger
	end
end
return {
	LogConfiguration = LogConfiguration,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="61">
                <Properties>
                  <string name="Name">Core</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.3.3
local LogLevel
do
	local _inverse = {}
	LogLevel = setmetatable({}, {
		__index = _inverse,
	})
	LogLevel.Verbose = 0
	_inverse[0] = "Verbose"
	LogLevel.Debugging = 1
	_inverse[1] = "Debugging"
	LogLevel.Information = 2
	_inverse[2] = "Information"
	LogLevel.Warning = 3
	_inverse[3] = "Warning"
	LogLevel.Error = 4
	_inverse[4] = "Error"
	LogLevel.Fatal = 5
	_inverse[5] = "Fatal"
end
return {
	LogLevel = LogLevel,
}
]]></string>
                </Properties>
                <Item class="ModuleScript" referent="62">
                  <Properties>
                    <string name="Name">LogEventCallbackSink</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.3.3
local LogEventCallbackSink
do
	LogEventCallbackSink = setmetatable({}, {
		__tostring = function()
			return "LogEventCallbackSink"
		end,
	})
	LogEventCallbackSink.__index = LogEventCallbackSink
	function LogEventCallbackSink.new(...)
		local self = setmetatable({}, LogEventCallbackSink)
		return self:constructor(...) or self
	end
	function LogEventCallbackSink:constructor(callback)
		self.callback = callback
	end
	function LogEventCallbackSink:Emit(message)
		local _binding = self
		local minLogLevel = _binding.minLogLevel
		if minLogLevel == nil or message.Level >= minLogLevel then
			self.callback(message)
		end
	end
	function LogEventCallbackSink:SetMinLogLevel(logLevel)
		self.minLogLevel = logLevel
	end
end
return {
	LogEventCallbackSink = LogEventCallbackSink,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="63">
                  <Properties>
                    <string name="Name">LogEventPropertyEnricher</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.3.3
local LogEventPropertyEnricher
do
	LogEventPropertyEnricher = setmetatable({}, {
		__tostring = function()
			return "LogEventPropertyEnricher"
		end,
	})
	LogEventPropertyEnricher.__index = LogEventPropertyEnricher
	function LogEventPropertyEnricher.new(...)
		local self = setmetatable({}, LogEventPropertyEnricher)
		return self:constructor(...) or self
	end
	function LogEventPropertyEnricher:constructor(props)
		self.props = props
	end
	function LogEventPropertyEnricher:Enrich(message, properties)
		local minLogLevel = self.minLogLevel
		if minLogLevel == nil or message.Level >= minLogLevel then
			for k, v in pairs(self.props) do
				properties[k] = v
			end
		end
	end
	function LogEventPropertyEnricher:SetMinLogLevel(minLogLevel)
		self.minLogLevel = minLogLevel
	end
end
return {
	LogEventPropertyEnricher = LogEventPropertyEnricher,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="64">
                  <Properties>
                    <string name="Name">LogEventRobloxOutputSink</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.3.3
local TS = _G[script]
local _message_templates = TS.import(script, TS.getModule(script, "@rbxts", "message-templates").out)
local MessageTemplateParser = _message_templates.MessageTemplateParser
local PlainTextMessageTemplateRenderer = _message_templates.PlainTextMessageTemplateRenderer
local LogLevel = TS.import(script, script.Parent).LogLevel
local LogEventRobloxOutputSink
do
	LogEventRobloxOutputSink = setmetatable({}, {
		__tostring = function()
			return "LogEventRobloxOutputSink"
		end,
	})
	LogEventRobloxOutputSink.__index = LogEventRobloxOutputSink
	function LogEventRobloxOutputSink.new(...)
		local self = setmetatable({}, LogEventRobloxOutputSink)
		return self:constructor(...) or self
	end
	function LogEventRobloxOutputSink:constructor(options)
		self.options = options
	end
	function LogEventRobloxOutputSink:Emit(message)
		local _binding = self.options
		local TagFormat = _binding.TagFormat
		if TagFormat == nil then
			TagFormat = "short"
		end
		local ErrorsTreatedAsExceptions = _binding.ErrorsTreatedAsExceptions
		local Prefix = _binding.Prefix
		if message.Level >= LogLevel.Error and ErrorsTreatedAsExceptions then
			return nil
		end
		local template = PlainTextMessageTemplateRenderer.new(MessageTemplateParser.GetTokens(message.Template))
		local _time = DateTime.fromIsoDate(message.Timestamp)
		if _time ~= nil then
			_time = _time:FormatLocalTime("HH:mm:ss", "en-us")
		end
		local time = _time
		local tag
		local _exp = message.Level
		repeat
			if _exp == (LogLevel.Verbose) then
				tag = if TagFormat == "short" then "VRB" else "VERBOSE"
				break
			end
			if _exp == (LogLevel.Debugging) then
				tag = if TagFormat == "short" then "DBG" else "DEBUG"
				break
			end
			if _exp == (LogLevel.Information) then
				tag = if TagFormat == "short" then "INF" else "INFO"
				break
			end
			if _exp == (LogLevel.Warning) then
				tag = if TagFormat == "short" then "WRN" else "WARNING"
				break
			end
			if _exp == (LogLevel.Error) then
				tag = if TagFormat == "short" then "ERR" else "ERROR"
				break
			end
			if _exp == (LogLevel.Fatal) then
				tag = if TagFormat == "short" then "FTL" else "FATAL"
				break
			end
		until true
		local messageRendered = template:Render(message)
		local formattedMessage = if Prefix ~= nil then "[" .. (Prefix .. ("] [" .. (tag .. ("] " .. messageRendered)))) else "[" .. (tag .. ("] " .. messageRendered))
		if message.Level >= LogLevel.Warning then
			warn(formattedMessage)
		else
			print(formattedMessage)
		end
	end
end
return {
	LogEventRobloxOutputSink = LogEventRobloxOutputSink,
}
]]></string>
                  </Properties>
                </Item>
              </Item>
              <Item class="ModuleScript" referent="65">
                <Properties>
                  <string name="Name">Logger</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.3.3
local TS = _G[script]
local MessageTemplateParser = TS.import(script, TS.getModule(script, "@rbxts", "message-templates").out.MessageTemplateParser).MessageTemplateParser
local _MessageTemplateToken = TS.import(script, TS.getModule(script, "@rbxts", "message-templates").out.MessageTemplateToken)
local DestructureMode = _MessageTemplateToken.DestructureMode
local TemplateTokenKind = _MessageTemplateToken.TemplateTokenKind
local LogLevel = TS.import(script, script.Parent, "Core").LogLevel
local LogConfiguration = TS.import(script, script.Parent, "Configuration").LogConfiguration
local PlainTextMessageTemplateRenderer = TS.import(script, TS.getModule(script, "@rbxts", "message-templates").out).PlainTextMessageTemplateRenderer
local RbxSerializer = TS.import(script, TS.getModule(script, "@rbxts", "message-templates").out.RbxSerializer).RbxSerializer
local Logger
do
	Logger = setmetatable({}, {
		__tostring = function()
			return "Logger"
		end,
	})
	Logger.__index = Logger
	function Logger.new(...)
		local self = setmetatable({}, Logger)
		return self:constructor(...) or self
	end
	function Logger:constructor()
		self.logLevel = LogLevel.Information
		self.sinks = {}
		self.enrichers = {}
	end
	function Logger:configure()
		return LogConfiguration.new(Logger.new())
	end
	function Logger:SetSinks(sinks)
		self.sinks = sinks
	end
	function Logger:SetEnrichers(enrichers)
		self.enrichers = enrichers
	end
	function Logger:SetMinLogLevel(logLevel)
		self.logLevel = logLevel
	end
	function Logger:default()
		return self.defaultLogger
	end
	function Logger:_serializeValue(value)
		if typeof(value) == "Vector3" then
			return {
				X = value.X,
				Y = value.Y,
				Z = value.Z,
			}
		elseif typeof(value) == "Vector2" then
			return {
				X = value.X,
				Y = value.Y,
			}
		elseif typeof(value) == "Instance" then
			return value:GetFullName()
		elseif typeof(value) == "EnumItem" then
			return tostring(value)
		elseif type(value) == "string" or (type(value) == "number" or (type(value) == "boolean" or type(value) == "table")) then
			return value
		else
			return tostring(value)
		end
	end
	function Logger:Write(logLevel, template, ...)
		local args = { ... }
		local message = {
			Level = logLevel,
			SourceContext = nil,
			Template = template,
			Timestamp = DateTime.now():ToIsoDate(),
		}
		local tokens = MessageTemplateParser.GetTokens(template)
		local _arg0 = function(t)
			return t.kind == TemplateTokenKind.Property
		end
		-- ▼ ReadonlyArray.filter ▼
		local _newValue = {}
		local _length = 0
		for _k, _v in ipairs(tokens) do
			if _arg0(_v, _k - 1, tokens) == true then
				_length += 1
				_newValue[_length] = _v
			end
		end
		-- ▲ ReadonlyArray.filter ▲
		local propertyTokens = _newValue
		local idx = 0
		for _, token in ipairs(propertyTokens) do
			local _exp = args
			local _original = idx
			idx += 1
			local arg = _exp[_original + 1]
			if idx <= #args then
				if arg ~= nil then
					if token.destructureMode == DestructureMode.ToString then
						message[token.propertyName] = tostring(arg)
					else
						message[token.propertyName] = if type(arg) == "table" then arg else RbxSerializer.Serialize(arg)
					end
				end
			end
		end
		for _, enricher in ipairs(self.enrichers) do
			local toApply = {}
			enricher:Enrich(message, toApply)
			for key, value in pairs(toApply) do
				message[key] = if type(value) == "table" then value else RbxSerializer.Serialize(value)
			end
		end
		for _, sink in ipairs(self.sinks) do
			sink:Emit(message)
		end
		return PlainTextMessageTemplateRenderer.new(tokens):Render(message)
	end
	function Logger:GetLevel()
		return self.logLevel
	end
	function Logger:Verbose(template, ...)
		local args = { ... }
		if self:GetLevel() > LogLevel.Verbose then
			return nil
		end
		self:Write(LogLevel.Verbose, template, unpack(args))
	end
	function Logger:Info(template, ...)
		local args = { ... }
		if self:GetLevel() > LogLevel.Information then
			return nil
		end
		self:Write(LogLevel.Information, template, unpack(args))
	end
	function Logger:Debug(template, ...)
		local args = { ... }
		if self:GetLevel() > LogLevel.Debugging then
			return nil
		end
		self:Write(LogLevel.Debugging, template, unpack(args))
	end
	function Logger:Warn(template, ...)
		local args = { ... }
		if self:GetLevel() > LogLevel.Warning then
			return nil
		end
		self:Write(LogLevel.Warning, template, unpack(args))
	end
	function Logger:Error(template, ...)
		local args = { ... }
		if self:GetLevel() > LogLevel.Error then
			return nil
		end
		return self:Write(LogLevel.Error, template, unpack(args))
	end
	function Logger:Fatal(template, ...)
		local args = { ... }
		return self:Write(LogLevel.Fatal, template, unpack(args))
	end
	function Logger:Copy()
		local config = LogConfiguration.new(Logger.new())
		config:SetMinLogLevel(self:GetLevel())
		for _, sink in ipairs(self.sinks) do
			config:WriteTo(sink)
		end
		for _, enricher in ipairs(self.enrichers) do
			config:Enrich(enricher)
		end
		return config
	end
	function Logger:ForContext(context, contextConfiguration)
		local copy = self:Copy()
		local sourceContext
		if typeof(context) == "Instance" then
			sourceContext = context:GetFullName()
		else
			sourceContext = tostring(context)
		end
		local _result = contextConfiguration
		if _result ~= nil then
			_result(copy)
		end
		return copy:EnrichWithProperties({
			SourceContext = sourceContext,
			SourceKind = "Context",
		}):Create()
	end
	function Logger:ForScript(scriptContextConfiguration)
		local s = debug.info(2, "s")
		local copy = self:Copy()
		local _result = scriptContextConfiguration
		if _result ~= nil then
			_result(copy)
		end
		return copy:EnrichWithProperties({
			SourceContext = s,
			SourceKind = "Script",
		}):Create()
	end
	function Logger:ForFunction(func, funcContextConfiguration)
		local funcName, funcLine, funcSource = debug.info(func, "nls")
		local copy = self:Copy()
		local _result = funcContextConfiguration
		if _result ~= nil then
			_result(copy)
		end
		local _fn = copy
		local _object = {}
		local _left = "SourceContext"
		local _condition = funcName
		if _condition == nil then
			_condition = "(anonymous)"
		end
		_object[_left] = "function '" .. (_condition .. "'")
		_object.SourceLine = funcLine
		_object.SourceFile = funcSource
		_object.SourceKind = "Function"
		return _fn:EnrichWithProperties(_object):Create()
	end
	function Logger:ForProperty(name, value)
		return self:Copy():EnrichWithProperty(name, value):Create()
	end
	function Logger:ForProperties(props)
		return self:Copy():EnrichWithProperties(props):Create()
	end
	Logger.defaultLogger = Logger.new()
end
return {
	Logger = Logger,
}
]]></string>
                </Properties>
              </Item>
            </Item>
          </Item>
          <Item class="ModuleScript" referent="66">
            <Properties>
              <string name="Name">LuauPolyfill</string>
              <string name="Source"><![CDATA[return require(script.LuauPolyfill)
]]></string>
            </Properties>
            <Item class="ModuleScript" referent="67">
              <Properties>
                <string name="Name">Boolean</string>
                <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
return {
	toJSBoolean = require(script.toJSBoolean),
}
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="68">
                <Properties>
                  <string name="Name">toJSBoolean</string>
                  <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local Packages = script.Parent.Parent
local Number = require(Packages.Number)

-- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean
return function(val: any): boolean
	return not not val and val ~= 0 and val ~= "" and not Number.isNaN(val)
end
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="69">
              <Properties>
                <string name="Name">Collections</string>
                <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local Packages = script.Parent

local Array = require(script.Array)
local Map = require(script.Map)
local Object = require(script.Object)
local Set = require(script.Set)
local WeakMap = require(script.WeakMap)
local inspect = require(script.inspect)

local types = require(Packages.ES7Types)

export type Array<T> = types.Array<T>
export type Map<T, V> = types.Map<T, V>
export type Object = types.Object
export type Set<T> = types.Set<T>
export type WeakMap<T, V> = types.WeakMap<T, V>

return {
	Array = Array,
	Object = Object,
	Map = Map.Map,
	coerceToMap = Map.coerceToMap,
	coerceToTable = Map.coerceToTable,
	Set = Set,
	WeakMap = WeakMap,
	inspect = inspect,
}
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="70">
                <Properties>
                  <string name="Name">Array</string>
                  <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local Packages = script.Parent.Parent
local ES7Types = require(Packages.ES7Types)

export type Array<T> = ES7Types.Array<T>

return {
	concat = require(script.concat),
	every = require(script.every),
	filter = require(script.filter),
	find = require(script.find),
	findIndex = require(script.findIndex),
	flat = require(script.flat),
	flatMap = require(script.flatMap),
	forEach = require(script.forEach),
	from = require(script.from),
	includes = require(script.includes),
	indexOf = require(script.indexOf),
	isArray = require(script.isArray),
	join = require(script.join),
	map = require(script.map),
	reduce = require(script.reduce),
	reverse = require(script.reverse),
	shift = require(script.shift),
	slice = require(script.slice),
	some = require(script.some),
	sort = require(script.sort),
	splice = require(script.splice),
	unshift = require(script.unshift),
}
]]></string>
                </Properties>
                <Item class="ModuleScript" referent="71">
                  <Properties>
                    <string name="Name">concat</string>
                    <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local __DEV__ = _G.__DEV__
local Array = script.Parent
local Packages = Array.Parent.Parent
local isArray = require(Array.isArray)
local types = require(Packages.ES7Types)
type Array<T> = types.Array<T>

local RECEIVED_OBJECT_ERROR = "Array.concat(...) only works with array-like tables but "
	.. "it received an object-like table.\nYou can avoid this error by wrapping the "
	.. "object-like table into an array. Example: `concat({1, 2}, {a = true})` should "
	.. "be `concat({1, 2}, { {a = true} }`"

-- capture two separate generic arguments so that the type error in abuse cases is actionable, but needs CLI-49876 to avoid a false negative
local function concat<T, S>(source: Array<T> | T, ...: Array<S> | S): Array<T> & Array<S>
	local array
	local elementCount = 0

	if isArray(source) then
		array = table.clone(source :: Array<T>)
		elementCount = #(source :: Array<T>)
	else
		elementCount += 1
		array = {}
		array[elementCount] = source :: T
	end

	for i = 1, select("#", ...) do
		local value = select(i, ...)
		local valueType = typeof(value)

		-- selene:allow(empty_if)
		if value == nil then
			-- do not insert nil
		elseif valueType == "table" then
			-- deviation: assume that table is an array, to avoid the expensive
			-- `isArray` check. In DEV mode, we throw if it is given an object-like
			-- table.
			if __DEV__ then
				if not isArray(value) then
					error(RECEIVED_OBJECT_ERROR)
				end
			end
			for k = 1, #value do
				elementCount += 1
				array[elementCount] = value[k]
			end
		else
			elementCount += 1
			array[elementCount] = value
		end
	end

	return (array :: any) :: Array<T> & Array<S>
end

return concat
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="72">
                  <Properties>
                    <string name="Name">every</string>
                    <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local __DEV__ = _G.__DEV__
local Array = script.Parent
local Packages = Array.Parent.Parent
local types = require(Packages.ES7Types)
type Array<T> = types.Array<T>
type Object = types.Object
type callbackFn<T> = (element: T, index: number, array: Array<T>) -> boolean
type callbackFnWithThisArg<T, U> = (self: U, element: T, index: number, array: Array<T>) -> boolean

-- Implements Javascript's `Array.prototype.every` as defined below
-- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every
return function<T, U>(t: Array<T>, callback: callbackFn<T> | callbackFnWithThisArg<T, U>, thisArg: U?): boolean
	if __DEV__ then
		if typeof(t) ~= "table" then
			error(string.format("Array.every called on %s", typeof(t)))
		end
		if typeof(callback) ~= "function" then
			error("callback is not a function")
		end
	end

	local len = #t
	local k = 1

	while k <= len do
		local kValue = t[k]
		local testResult

		if kValue ~= nil then
			if thisArg ~= nil then
				testResult = (callback :: callbackFnWithThisArg<T, U>)(thisArg, kValue, k, t)
			else
				testResult = (callback :: callbackFn<T>)(kValue, k, t)
			end

			if not testResult then
				return false
			end
		end
		k += 1
	end
	return true
end
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="73">
                  <Properties>
                    <string name="Name">filter</string>
                    <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local __DEV__ = _G.__DEV__
local Array = script.Parent
local Packages = Array.Parent.Parent
local types = require(Packages.ES7Types)
type Array<T> = types.Array<T>
type Object = types.Object
type callbackFn<T> = (element: T, index: number, array: Array<T>) -> boolean
type callbackFnWithThisArg<T, U> = (thisArg: U, element: T, index: number, array: Array<T>) -> boolean

-- Implements Javascript's `Array.prototype.filter` as defined below
-- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter
return function<T, U>(t: Array<T>, callback: callbackFn<T> | callbackFnWithThisArg<T, U>, thisArg: U?): Array<T>
	if __DEV__ then
		if typeof(t) ~= "table" then
			error(string.format("Array.filter called on %s", typeof(t)))
		end
		if typeof(callback) ~= "function" then
			error("callback is not a function")
		end
	end

	local len = #t
	local res = {}
	local index = 1

	if thisArg == nil then
		for i = 1, len do
			local kValue = t[i]
			if kValue ~= nil then
				if (callback :: callbackFn<T>)(kValue, i, t) then
					res[index] = kValue
					index += 1
				end
			end
		end
	else
		for i = 1, len do
			local kValue = t[i]
			if kValue ~= nil then
				if (callback :: callbackFnWithThisArg<T, U>)(thisArg, kValue, i, t) then
					res[index] = kValue
					index += 1
				end
			end
		end
	end

	return res
end
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="74">
                  <Properties>
                    <string name="Name">find</string>
                    <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local Array = script.Parent
local Packages = Array.Parent.Parent
local types = require(Packages.ES7Types)
type Array<T> = types.Array<T>
type PredicateFunction<T> = (value: T, index: number, array: Array<T>) -> boolean

return function<T>(array: Array<T>, predicate: PredicateFunction<T>): T | nil
	for i = 1, #array do
		local element = array[i]
		if predicate(element, i, array) then
			return element
		end
	end
	return nil
end
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="75">
                  <Properties>
                    <string name="Name">findIndex</string>
                    <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local Array = script.Parent
local Packages = Array.Parent.Parent
local types = require(Packages.ES7Types)
type Array<T> = types.Array<T>
type PredicateFunction<T> = (T, number, Array<T>) -> boolean

return function<T>(array: Array<T>, predicate: PredicateFunction<T>): number
	for i = 1, #array do
		local element = array[i]
		if predicate(element, i, array) then
			return i
		end
	end
	return -1
end
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="76">
                  <Properties>
                    <string name="Name">flat</string>
                    <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local __DEV__ = _G.__DEV__
local Array = script.Parent
local Packages = Array.Parent.Parent
local isArray = require(Array.isArray)
local types = require(Packages.ES7Types)
type Array<T> = types.Array<T>
local function flat<T>(array: Array<T>, depth_: number?): Array<T>
	if __DEV__ then
		if typeof(array) ~= "table" then
			error(string.format("Array.flat called on %s", typeof(array)))
		end
		if depth_ ~= nil and typeof(depth_) ~= "number" then
			error("depth is not a number or nil")
		end
	end
	local depth = depth_ or 1
	local newArray = {}

	for _, v in array do
		if isArray(v) then
			local vArray = (v :: any) :: Array<T>
			local innerArrFlat: Array<T> = if depth > 1 then flat(vArray, depth - 1) else vArray
			for _, innerValue in innerArrFlat do
				table.insert(newArray, innerValue)
			end
		else
			table.insert(newArray, v)
		end
	end

	return newArray
end

return flat
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="77">
                  <Properties>
                    <string name="Name">flatMap</string>
                    <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local __DEV__ = _G.__DEV__
local Array = script.Parent
local Packages = Array.Parent.Parent
local flat = require(Array.flat)
local map = require(Array.map)
local types = require(Packages.ES7Types)
type Array<T> = types.Array<T>
type callbackFn<T, U> = (element: T, index: number, array: Array<T>) -> U
type callbackFnWithThisArg<T, U, V> = (thisArg: V, element: T, index: number, array: Array<T>) -> U

local function flatMap<T, U, V>(
	array: Array<T>,
	callback: callbackFn<T, U> | callbackFnWithThisArg<T, U, V>,
	thisArg: V?
): Array<U>
	if __DEV__ then
		if typeof(array) ~= "table" then
			error(string.format("Array.flatMap called on %s", typeof(array)))
		end
		if typeof(callback) ~= "function" then
			error("callback is not a function")
		end
	end
	return flat(map(array, callback, thisArg))
end

return flatMap
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="78">
                  <Properties>
                    <string name="Name">forEach</string>
                    <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local __DEV__ = _G.__DEV__
local Array = script.Parent
local Packages = Array.Parent.Parent
local types = require(Packages.ES7Types)
type Array<T> = types.Array<T>
type Object = types.Object
type callbackFn<T> = (element: T, index: number, array: Array<T>) -> ()
type callbackFnWithThisArg<T, U> = (thisArg: U, element: T, index: number, array: Array<T>) -> ()

-- Implements Javascript's `Array.prototype.forEach` as defined below
-- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach
return function<T, U>(t: Array<T>, callback: callbackFn<T> | callbackFnWithThisArg<T, U>, thisArg: U?): ()
	if __DEV__ then
		if typeof(t) ~= "table" then
			error(string.format("Array.forEach called on %s", typeof(t)))
		end
		if typeof(callback) ~= "function" then
			error("callback is not a function")
		end
	end

	local len = #t
	local k = 1

	while k <= len do
		local kValue = t[k]

		if thisArg ~= nil then
			(callback :: callbackFnWithThisArg<T, U>)(thisArg, kValue, k, t)
		else
			(callback :: callbackFn<T>)(kValue, k, t)
		end

		if #t < len then
			-- don't iterate on removed items, don't iterate more than original length
			len = #t
		end
		k += 1
	end
end
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="79">
                  <Properties>
                    <string name="Name">from</string>
                    <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local Array = script.Parent
local Collections = Array.Parent
local Packages = Collections.Parent
local Set = require(Collections.Set)
local Map = require(Collections.Map.Map)
local isArray = require(Array.isArray)
local instanceof = require(Packages.InstanceOf)
local types = require(Packages.ES7Types)

local fromString = require(script.fromString)
local fromSet = require(script.fromSet)
local fromMap = require(script.fromMap)
local fromArray = require(script.fromArray)

type Array<T> = types.Array<T>
type Object = types.Object
type Set<T> = types.Set<T>
type Map<K, V> = types.Map<K, V>
type mapFn<T, U> = (element: T, index: number) -> U
type mapFnWithThisArg<T, U> = (thisArg: any, element: T, index: number) -> U

return function<T, U>(
	value: string | Array<T> | Set<T> | Map<any, any>,
	mapFn: (mapFn<T, U> | mapFnWithThisArg<T, U>)?,
	thisArg: Object?
	-- FIXME Luau: need overloading so the return type on this is more sane and doesn't require manual casts
): Array<U> | Array<T> | Array<string>
	if value == nil then
		error("cannot create array from a nil value")
	end
	local valueType = typeof(value)

	local array: Array<U> | Array<T> | Array<string>

	if valueType == "table" and isArray(value) then
		array = fromArray(value :: Array<T>, mapFn, thisArg)
	elseif instanceof(value, Set) then
		array = fromSet(value :: Set<T>, mapFn, thisArg)
	elseif instanceof(value, Map) then
		array = fromMap(value :: Map<any, any>, mapFn, thisArg)
	elseif valueType == "string" then
		array = fromString(value :: string, mapFn, thisArg)
	else
		array = {}
	end

	return array
end
]]></string>
                  </Properties>
                  <Item class="ModuleScript" referent="80">
                    <Properties>
                      <string name="Name">fromArray</string>
                      <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local Array = script.Parent.Parent
local Packages = Array.Parent.Parent
local types = require(Packages.ES7Types)
type Object = types.Object

type Array<T> = types.Array<T>
type mapFn<T, U> = (element: T, index: number) -> U
type mapFnWithThisArg<T, U> = (thisArg: any, element: T, index: number) -> U

return function<T, U>(
	value: Array<T>,
	mapFn: (mapFn<T, U> | mapFnWithThisArg<T, U>)?,
	thisArg: Object?
	-- FIXME Luau: need overloading so the return type on this is more sane and doesn't require manual casts
): Array<U> | Array<T> | Array<string>
	local array = {}

	if mapFn then
		local arrayLength = #(value :: Array<T>)
		array = table.create(arrayLength)
		for i = 1, arrayLength do
			if thisArg ~= nil then
				(array :: Array<U>)[i] = (mapFn :: mapFnWithThisArg<T, U>)(thisArg, (value :: Array<T>)[i], i)
			else
				(array :: Array<U>)[i] = (mapFn :: mapFn<T, U>)((value :: Array<T>)[i], i)
			end
		end
	else
		array = table.clone(value :: Array<T>)
	end

	return array
end
]]></string>
                    </Properties>
                  </Item>
                  <Item class="ModuleScript" referent="81">
                    <Properties>
                      <string name="Name">fromMap</string>
                      <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local Array = script.Parent.Parent
local Packages = Array.Parent.Parent
local types = require(Packages.ES7Types)
type Object = types.Object
type Array<T> = types.Array<T>
type Map<K, V> = types.Map<K, V>
type mapFn<T, U> = (element: T, index: number) -> U
type mapFnWithThisArg<T, U> = (thisArg: any, element: T, index: number) -> U

return function<T, U>(
	value: Map<any, any>,
	mapFn: (mapFn<T, U> | mapFnWithThisArg<T, U>)?,
	thisArg: Object?
	-- FIXME Luau: need overloading so the return type on this is more sane and doesn't require manual casts
): Array<U> | Array<T> | Array<string>
	local array = {}

	if mapFn then
		array = {}
		for i, v in value :: any do
			if thisArg ~= nil then
				(array :: Array<U>)[i] = (mapFn :: mapFnWithThisArg<T, U>)(thisArg, v, i)
			else
				(array :: Array<U>)[i] = (mapFn :: mapFn<T, U>)(v, i)
			end
		end
	else
		array = {}
		for i, v in value :: any do
			(array :: Array<T>)[i] = v
		end
	end

	return array
end
]]></string>
                    </Properties>
                  </Item>
                  <Item class="ModuleScript" referent="82">
                    <Properties>
                      <string name="Name">fromSet</string>
                      <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local Array = script.Parent.Parent
local Packages = Array.Parent.Parent
local types = require(Packages.ES7Types)
type Object = types.Object
type Array<T> = types.Array<T>
type Set<T> = types.Set<T>
type mapFn<T, U> = (element: T, index: number) -> U
type mapFnWithThisArg<T, U> = (thisArg: any, element: T, index: number) -> U

return function<T, U>(
	value: Set<T>,
	mapFn: (mapFn<T, U> | mapFnWithThisArg<T, U>)?,
	thisArg: Object?
	-- FIXME Luau: need overloading so the return type on this is more sane and doesn't require manual casts
): Array<U> | Array<T> | Array<string>
	local array = {}

	if mapFn then
		array = {}
		for i, v in value :: any do
			if thisArg ~= nil then
				(array :: Array<U>)[i] = (mapFn :: mapFnWithThisArg<T, U>)(thisArg, v, i)
			else
				(array :: Array<U>)[i] = (mapFn :: mapFn<T, U>)(v, i)
			end
		end
	else
		array = table.clone((value :: any)._array)
	end

	return array
end
]]></string>
                    </Properties>
                  </Item>
                  <Item class="ModuleScript" referent="83">
                    <Properties>
                      <string name="Name">fromString</string>
                      <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local Array = script.Parent.Parent
local Packages = Array.Parent.Parent
local types = require(Packages.ES7Types)
type Object = types.Object
type Array<T> = types.Array<T>

type mapFn<T, U> = (element: T, index: number) -> U
type mapFnWithThisArg<T, U> = (thisArg: any, element: T, index: number) -> U

return function<T, U>(
	value: string,
	mapFn: (mapFn<T, U> | mapFnWithThisArg<T, U>)?,
	thisArg: Object?
	-- FIXME Luau: need overloading so the return type on this is more sane and doesn't require manual casts
): Array<U> | Array<T> | Array<string>
	local array = {}

	local valueStringLength = #value
	array = table.create(valueStringLength)
	if mapFn then
		for i = 1, valueStringLength do
			if thisArg ~= nil then
				(array :: Array<U>)[i] = (mapFn :: mapFnWithThisArg<T, U>)(thisArg, string.sub(value, i, i) :: any, i)
			else
				(array :: Array<U>)[i] = (mapFn :: mapFn<T, U>)(string.sub(value, i, i) :: any, i)
			end
		end
	else
		for i = 1, valueStringLength do
			(array :: Array<string>)[i] = string.sub(value, i, i)
		end
	end

	return array
end
]]></string>
                    </Properties>
                  </Item>
                </Item>
                <Item class="ModuleScript" referent="84">
                  <Properties>
                    <string name="Name">includes</string>
                    <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local Array = script.Parent
local Packages = Array.Parent.Parent
local types = require(Packages.ES7Types)
type Array<T> = types.Array<T>
local indexOf = require(script.Parent.indexOf)

return function<T>(array: Array<T>, searchElement: T, fromIndex: number?): boolean
	return indexOf(array, searchElement, fromIndex) ~= -1
end
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="85">
                  <Properties>
                    <string name="Name">indexOf</string>
                    <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local Array = script.Parent
local Packages = Array.Parent.Parent
local types = require(Packages.ES7Types)
type Array<T> = types.Array<T>

-- Implements equivalent functionality to JavaScript's `array.indexOf`,
-- implementing the interface and behaviors defined at:
-- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf
--
-- This implementation is loosely based on the one described in the polyfill
-- source in the above link
return function<T>(array: Array<T>, searchElement: T, fromIndex: number?): number
	local fromIndex_ = fromIndex or 1
	local length = #array

	-- In the JS impl, a negative fromIndex means we should use length - index;
	-- with Lua, of course, this means that 0 is still valid, but refers to the
	-- end of the array the way that '-1' would in JS
	if fromIndex_ < 1 then
		fromIndex_ = math.max(length - math.abs(fromIndex_), 1)
	end

	for i = fromIndex_, length do
		if array[i] == searchElement then
			return i
		end
	end

	return -1
end
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="86">
                  <Properties>
                    <string name="Name">isArray</string>
                    <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
return function(value: any): boolean
	if typeof(value) ~= "table" then
		return false
	end
	if next(value) == nil then
		-- an empty table is an empty array
		return true
	end

	local length = #value

	if length == 0 then
		return false
	end

	local count = 0
	local sum = 0
	for key in pairs(value) do
		if typeof(key) ~= "number" then
			return false
		end
		if key % 1 ~= 0 or key < 1 then
			return false
		end
		count += 1
		sum += key
	end

	return sum == (count * (count + 1) / 2)
end
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="87">
                  <Properties>
                    <string name="Name">join</string>
                    <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local Array = script.Parent
local Packages = Array.Parent.Parent
local types = require(Packages.ES7Types)
type Array<T> = types.Array<T>
local map = require(Array.map)

return function<T>(arr: Array<T>, separator: string?): string
	if #arr == 0 then
		return ""
	end
	-- JS does tostring conversion implicitely but in Lua we need to do that explicitely
	local stringifiedArray = map(arr, function(item)
		return tostring(item)
	end)

	return table.concat(stringifiedArray, separator or ",")
end
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="88">
                  <Properties>
                    <string name="Name">map</string>
                    <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local __DEV__ = _G.__DEV__
local Array = script.Parent
local Packages = Array.Parent.Parent
local types = require(Packages.ES7Types)
type Array<T> = types.Array<T>
type Object = types.Object
type callbackFn<T, U> = (element: T, index: number, array: Array<T>) -> U
type callbackFnWithThisArg<T, U, V> = (thisArg: V, element: T, index: number, array: Array<T>) -> U

-- Implements Javascript's `Array.prototype.map` as defined below
-- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map
return function<T, U, V>(t: Array<T>, callback: callbackFn<T, U> | callbackFnWithThisArg<T, U, V>, thisArg: V?): Array<U>
	if __DEV__ then
		if typeof(t) ~= "table" then
			error(string.format("Array.map called on %s", typeof(t)))
		end
		if typeof(callback) ~= "function" then
			error("callback is not a function")
		end
	end

	local len = #t
	local A = {}
	local k = 1

	while k <= len do
		local kValue = t[k]

		if kValue ~= nil then
			local mappedValue

			if thisArg ~= nil then
				mappedValue = (callback :: callbackFnWithThisArg<T, U, V>)(thisArg, kValue, k, t)
			else
				mappedValue = (callback :: callbackFn<T, U>)(kValue, k, t)
			end

			A[k] = mappedValue
		end
		k += 1
	end

	return A
end
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="89">
                  <Properties>
                    <string name="Name">reduce</string>
                    <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local __DEV__ = _G.__DEV__
local Array = script.Parent
local Packages = Array.Parent.Parent
local types = require(Packages.ES7Types)
type Array<T> = types.Array<T>
type reduceFn<T, U> = (previousValue: U, currentValue: T, currentIndex: number, array: Array<T>) -> U

-- Implements Javascript's `Array.prototype.reduce` as defined below
-- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce
-- TODO Luau: when Luau supports overloads, use them here so that reduceFn can correctly use T when initialValue (U) isn't supplied
return function<T, U>(array: Array<T>, callback: reduceFn<T, U>, initialValue: U?): U
	if __DEV__ then
		if typeof(array) ~= "table" then
			error(string.format("Array.reduce called on %s", typeof(array)))
		end
		if typeof(callback) ~= "function" then
			error("callback is not a function")
		end
	end

	local length = #array

	local value: T | U
	local initial = 1

	if initialValue ~= nil then
		value = initialValue
	else
		initial = 2
		if length == 0 then
			error("reduce of empty array with no initial value")
		end
		value = array[1]
	end

	for i = initial, length do
		value = callback(value :: U, array[i], i, array)
	end

	return value :: U
end
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="90">
                  <Properties>
                    <string name="Name">reverse</string>
                    <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
-- https://programming-idioms.org/idiom/19/reverse-a-list/1314/lua
local Array = script.Parent
local Packages = Array.Parent.Parent
local types = require(Packages.ES7Types)
type Array<T> = types.Array<T>

return function<T>(t: Array<T>): Array<T>
	local n = #t
	local i = 1
	while i < n do
		t[i], t[n] = t[n], t[i]
		i = i + 1
		n = n - 1
	end
	return t
end
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="91">
                  <Properties>
                    <string name="Name">shift</string>
                    <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local __DEV__ = _G.__DEV__
local Array = script.Parent
local Packages = Array.Parent.Parent
local isArray = require(Array.isArray)
local types = require(Packages.ES7Types)
type Array<T> = types.Array<T>

return function<T>(value: Array<T>): T?
	if __DEV__ then
		if not isArray(value) then
			error(string.format("Array.shift called on non-array %s", typeof(value)))
		end
	end

	if #value > 0 then
		return table.remove(value, 1)
	else
		return nil
	end
end
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="92">
                  <Properties>
                    <string name="Name">slice</string>
                    <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local Array = script.Parent
local Packages = Array.Parent.Parent
local types = require(Packages.ES7Types)
type Array<T> = types.Array<T>

-- Implements Javascript's `Array.prototype.slice` as defined below, but with 1-indexing
-- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice
return function<T>(t: Array<T>, start_idx: number?, end_idx: number?): Array<T>
	if typeof(t) ~= "table" then
		error(string.format("Array.slice called on %s", typeof(t)))
	end
	local length = #t

	local start_idx_ = start_idx or 1
	local end_idx_
	if end_idx == nil or end_idx > length + 1 then
		end_idx_ = length + 1
	else
		end_idx_ = end_idx
	end

	if start_idx_ > length + 1 then
		return {}
	end

	local slice = {}

	if start_idx_ < 1 then
		start_idx_ = math.max(length - math.abs(start_idx_), 1)
	end
	if end_idx_ < 1 then
		end_idx_ = math.max(length - math.abs(end_idx_), 1)
	end

	local idx = start_idx_
	local i = 1
	while idx < end_idx_ do
		slice[i] = t[idx]
		idx = idx + 1
		i = i + 1
	end

	return slice
end
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="93">
                  <Properties>
                    <string name="Name">some</string>
                    <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local Array = script.Parent
local Packages = Array.Parent.Parent
local types = require(Packages.ES7Types)
type Array<T> = types.Array<T>
type Object = types.Object

-- note: JS version can return anything that's truthy, but that won't work for us since Lua deviates (0 is truthy)
type callbackFn<T> = (element: T, index: number, array: Array<T>) -> boolean
type callbackFnWithThisArg<T, U> = (thisArg: U, element: T, index: number, array: Array<T>) -> boolean

-- Implements Javascript's `Array.prototype.map` as defined below
-- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some
return function<T, U>(t: Array<T>, callback: callbackFn<T> | callbackFnWithThisArg<T, U>, thisArg: U?): boolean
	if typeof(t) ~= "table" then
		error(string.format("Array.some called on %s", typeof(t)))
	end
	if typeof(callback) ~= "function" then
		error("callback is not a function")
	end

	for i, value in t do
		if thisArg ~= nil then
			if value ~= nil and (callback :: callbackFnWithThisArg<T, U>)(thisArg, value, i, t) then
				return true
			end
		else
			if value ~= nil and (callback :: callbackFn<T>)(value, i, t) then
				return true
			end
		end
	end
	return false
end
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="94">
                  <Properties>
                    <string name="Name">sort</string>
                    <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local Array = script.Parent
local Collections = Array.Parent
local Packages = Collections.Parent
local None = require(Collections.Object.None)
local types = require(Packages.ES7Types)
type Array<T> = types.Array<T>
type Comparable = (any, any) -> number
local defaultSort = function<T>(a: T, b: T): boolean
	return type(a) .. tostring(a) < type(b) .. tostring(b)
end

return function<T>(array: Array<T>, compare: Comparable?): Array<T>
	-- wrapperCompare interprets compare return value to be compatible with Lua's table.sort
	local wrappedCompare = defaultSort
	if compare ~= nil and compare ~= None then
		if typeof(compare :: any) ~= "function" then
			error("invalid argument to Array.sort: compareFunction must be a function")
		end
		wrappedCompare = function<T>(a: T, b: T)
			local result = compare(a, b)
			if typeof(result) ~= "number" then
				-- deviation: throw an error because
				-- it's not clearly defined what is
				-- the behavior when the compare function
				-- does not return a number
				error(("invalid result from compare function, expected number but got %s"):format(typeof(result)))
			end
			return result < 0
		end
	end
	table.sort(array, wrappedCompare)
	return array
end
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="95">
                  <Properties>
                    <string name="Name">splice</string>
                    <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local Array = script.Parent
local Packages = Array.Parent.Parent
local types = require(Packages.ES7Types)
type Array<T> = types.Array<T>

-- Implements equivalent functionality to JavaScript's `array.splice`, including
-- the interface and behaviors defined at:
-- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice
return function<T>(array: Array<T>, start: number, deleteCount: number?, ...: T): Array<T>
	-- Append varargs without removing anything
	if start > #array then
		local varargCount = select("#", ...)
		for i = 1, varargCount do
			local toInsert = select(i, ...)
			table.insert(array, toInsert)
		end
		return {}
	else
		local length = #array
		-- In the JS impl, a negative fromIndex means we should use length -
		-- index; with Lua, of course, this means that 0 is still valid, but
		-- refers to the end of the array the way that '-1' would in JS
		if start < 1 then
			start = math.max(length - math.abs(start), 1)
		end

		local deletedItems = {} :: Array<T>
		-- If no deleteCount was provided, we want to delete the rest of the
		-- array starting with `start`
		local deleteCount_: number = deleteCount or length
		if deleteCount_ > 0 then
			local lastIndex = math.min(length, start + math.max(0, deleteCount_ - 1))

			for _ = start, lastIndex do
				local deleted = table.remove(array, start) :: T
				table.insert(deletedItems, deleted)
			end
		end

		local varargCount = select("#", ...)
		-- Do this in reverse order so we can always insert in the same spot
		for i = varargCount, 1, -1 do
			local toInsert = select(i, ...)
			table.insert(array, start, toInsert)
		end

		return deletedItems
	end
end
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="96">
                  <Properties>
                    <string name="Name">unshift</string>
                    <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local __DEV__ = _G.__DEV__
local Array = script.Parent
local Packages = Array.Parent.Parent
local isArray = require(Array.isArray)
local types = require(Packages.ES7Types)
type Array<T> = types.Array<T>

return function<T>(array: Array<T>, ...: T): number
	if __DEV__ then
		if not isArray(array) then
			error(string.format("Array.unshift called on non-array %s", typeof(array)))
		end
	end

	local numberOfItems = select("#", ...)
	if numberOfItems > 0 then
		for i = numberOfItems, 1, -1 do
			local toInsert = select(i, ...)
			table.insert(array, 1, toInsert)
		end
	end

	return #array
end
]]></string>
                  </Properties>
                </Item>
              </Item>
              <Item class="ModuleScript" referent="97">
                <Properties>
                  <string name="Name">Map</string>
                  <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local Packages = script.Parent.Parent

local ES7Types = require(Packages.ES7Types)

local Map = require(script.Map)
local coerceToMap = require(script.coerceToMap)
local coerceToTable = require(script.coerceToTable)

export type Map<K, V> = ES7Types.Map<K, V>

return {
	Map = Map,
	coerceToMap = coerceToMap,
	coerceToTable = coerceToTable,
}
]]></string>
                </Properties>
                <Item class="ModuleScript" referent="98">
                  <Properties>
                    <string name="Name">Map</string>
                    <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local __DEV__ = _G.__DEV__
local Collections = script.Parent.Parent
local Packages = Collections.Parent

local arrayForEach = require(Collections.Array.forEach)
local arrayMap = require(Collections.Array.map)
local isArray = require(Collections.Array.isArray)
local instanceof = require(Packages.InstanceOf)
local types = require(Packages.ES7Types)
type Object = types.Object
type Array<T> = types.Array<T>
type Table<T, V> = types.Table<T, V>
type Tuple<T, V> = types.Tuple<T, V>
type mapCallbackFn<K, V> = types.mapCallbackFn<K, V>
type mapCallbackFnWithThisArg<K, V> = types.mapCallbackFnWithThisArg<K, V>
type Map<K, V> = types.Map<K, V>

type Map_Statics = {
	new: <K, V>(iterable: Array<Array<any>>?) -> Map<K, V>,
}

local Map: Map<any, any> & Map_Statics = ({} :: any) :: Map<any, any> & Map_Statics

function Map.new<K, V>(iterable: (Array<Array<any>> | Map<K, V>)?): Map<K, V>
	local array
	local map
	if iterable == nil then
		array = {}
		map = {}
	elseif isArray(iterable) then
		if __DEV__ then
			if #(iterable :: Array<Array<any>>) > 0 and typeof((iterable :: Array<Array<any>>)[1]) ~= "table" then
				error(
					"Value `"
						.. typeof((iterable :: Array<Array<any>>)[1])
						.. "` is not an entry object.\n "
						.. "Cannot create Map from {K, V} form, it must be { {K, V}... }"
				)
			end
		end
		array = table.create(#(iterable :: Array<Array<any>>))
		map = {}
		for _, entry in iterable :: Array<Array<any>> do
			local key = entry[1]
			if __DEV__ then
				if key == nil then
					error("cannot create Map from a table that isn't an array.")
				end
			end
			local val = entry[2]
			-- only add to array if new
			if map[key] == nil then
				table.insert(array, key)
			end
			-- always assign
			map[key] = val
		end
	elseif instanceof(iterable, Map) then
		array = table.clone((iterable :: Map<K, V>)._array)
		map = table.clone((iterable :: Map<K, V>)._map)
	else
		error(("`%s` `%s` is not iterable, cannot make Map using it"):format(typeof(iterable), tostring(iterable)))
	end

	return (setmetatable({
		size = #array,
		_map = map,
		_array = array,
	}, Map) :: any) :: Map<K, V>
end

-- TODO Luau: annoying type erasure here, probably needs the new Records language feature
function Map:set(key: any, value: any): Map<any, any>
	-- preserve initial insertion order
	if self._map[key] == nil then
		-- Luau FIXME: analyze should know self is Map<K, V> which includes size as a number
		self.size = self.size :: number + 1
		table.insert(self._array, key)
	end
	-- always update value
	self._map[key] = value
	return self
end

function Map:get(key)
	return self._map[key]
end

function Map:clear()
	local table_: any = table
	self.size = 0
	table_.clear(self._map)
	table_.clear(self._array)
end

function Map:delete(key): boolean
	if self._map[key] == nil then
		return false
	end
	-- Luau FIXME: analyze should know self is Map<K, V> which includes size as a number
	self.size = self.size :: number - 1
	self._map[key] = nil
	local index = table.find(self._array, key)
	if index then
		table.remove(self._array, index)
	end
	return true
end

-- Implements Javascript's `Map.prototype.forEach` as defined below
-- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach
function Map:forEach(callback: mapCallbackFn<any, any> | mapCallbackFnWithThisArg<any, any>, thisArg: Object?): ()
	if __DEV__ then
		if typeof(callback) ~= "function" then
			error("callback is not a function")
		end
	end
	-- note: we can't turn this into a simple for-in loop, because the callbacks can modify the table and React, GQL, and Jest rely on JS behavior in that scenario
	arrayForEach(self._array, function(key)
		local value = self._map[key]

		if thisArg ~= nil then
			(callback :: mapCallbackFnWithThisArg<any, any>)(thisArg, value, key, self)
		else
			(callback :: mapCallbackFn<any, any>)(value, key, self)
		end
	end)
end

function Map:has(key): boolean
	return self._map[key] ~= nil
end

function Map:keys()
	return self._array
end

function Map:values()
	return arrayMap(self._array, function(key)
		return self._map[key]
	end)
end

function Map:entries()
	return arrayMap(self._array, function(key)
		return { key, self._map[key] }
	end)
end

function Map:ipairs()
	if __DEV__ then
		warn(
			debug.traceback(
				"`for _,_ in myMap:ipairs() do` is deprecated and will be removed in a future release, please use `for _,_ in myMap do` instead\n",
				2
			)
		)
	end
	return ipairs(self:entries())
end

function Map.__iter(self: Map<any, any>)
	return next, self:entries()
end

function Map.__index(self: Map<any, any>, key)
	local mapProp = rawget(Map, key)
	if mapProp ~= nil then
		return mapProp
	end
	if __DEV__ then
		assert(
			-- FIXME Luau: shouldn't need this cast, the self param is annotated already
			rawget(self :: any, "_map"),
			"Map has been corrupted, and is missing private state! Did you accidentally call table.clear() instead of map:clear()?"
		)
	end

	return Map.get(self, key)
end

function Map.__newindex(self: Map<any, any>, key, value)
	self:set(key, value)
end

return Map
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="99">
                  <Properties>
                    <string name="Name">coerceToMap</string>
                    <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local MapModule = script.Parent
local Collections = MapModule.Parent
local Packages = Collections.Parent

local Map = require(MapModule.Map)
local Object = require(Collections.Object)
local instanceOf = require(Packages.InstanceOf)
local types = require(Packages.ES7Types)

type Map<K, V> = types.Map<K, V>
type Table<K, V> = types.Table<K, V>

local function coerceToMap(mapLike: Map<any, any> | Table<any, any>): Map<any, any>
	return instanceOf(mapLike, Map) and mapLike :: Map<any, any> -- ROBLOX: order is preserved
		or Map.new(Object.entries(mapLike)) -- ROBLOX: order is not preserved
end

return coerceToMap
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="100">
                  <Properties>
                    <string name="Name">coerceToTable</string>
                    <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local MapModule = script.Parent
local Collections = MapModule.Parent
local Packages = Collections.Parent

local Map = require(MapModule.Map)
local instanceOf = require(Packages.InstanceOf)
local arrayReduce = require(Collections.Array.reduce)
local types = require(Packages.ES7Types)

type Map<K, V> = types.Map<K, V>
type Table<K, V> = types.Table<K, V>

local function coerceToTable(mapLike: Map<any, any> | Table<any, any>): Table<any, any>
	if not instanceOf(mapLike, Map) then
		return mapLike :: Table<any, any>
	end

	-- create table from map
	return arrayReduce(mapLike:entries(), function(tbl, entry)
		tbl[entry[1]] = entry[2]
		return tbl
	end, {})
end

return coerceToTable
]]></string>
                  </Properties>
                </Item>
              </Item>
              <Item class="ModuleScript" referent="101">
                <Properties>
                  <string name="Name">Object</string>
                  <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
return {
	assign = require(script.assign),
	entries = require(script.entries),
	freeze = require(script.freeze),
	is = require(script.is),
	isFrozen = require(script.isFrozen),
	keys = require(script.keys),
	preventExtensions = require(script.preventExtensions),
	seal = require(script.seal),
	values = require(script.values),
	-- Special marker type used in conjunction with `assign` to remove values
	-- from tables, since nil cannot be stored in a table
	None = require(script.None),
}
]]></string>
                </Properties>
                <Item class="ModuleScript" referent="102">
                  <Properties>
                    <string name="Name">None</string>
                    <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
--!nonstrict
-- Marker used to specify that the value is nothing, because nil cannot be
-- stored in tables.
local None = newproxy(true)
local mt = getmetatable(None)
mt.__tostring = function()
	return "Object.None"
end

return None
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="103">
                  <Properties>
                    <string name="Name">assign</string>
                    <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local Object = script.Parent
local Packages = Object.Parent.Parent

local None = require(Object.None)
local types = require(Packages.ES7Types)
type Object = types.Object

--[[
	Merges values from zero or more tables onto a target table. If a value is
	set to None, it will instead be removed from the table.

	This function is identical in functionality to JavaScript's Object.assign.
]]
-- Luau TODO: no way to strongly type this accurately, it doesn't eliminate deleted keys of T, and Luau won't do intersections of type packs: <T, ...U>(T, ...: ...U): T & ...U
return function<T, U, V, W>(target: T, source0: U?, source1: V?, source2: W?, ...): T & U & V & W
	if source0 ~= nil and typeof(source0 :: any) == "table" then
		for key, value in pairs(source0 :: any) do
			if value == None then
				(target :: any)[key] = nil
			else
				(target :: any)[key] = value
			end
		end
	end

	if source1 ~= nil and typeof(source1 :: any) == "table" then
		for key, value in pairs(source1 :: any) do
			if value == None then
				(target :: any)[key] = nil
			else
				(target :: any)[key] = value
			end
		end
	end

	if source2 ~= nil and typeof(source2 :: any) == "table" then
		for key, value in pairs(source2 :: any) do
			if value == None then
				(target :: any)[key] = nil
			else
				(target :: any)[key] = value
			end
		end
	end

	for index = 1, select("#", ...) do
		local rest = select(index, ...)

		if rest ~= nil and typeof(rest) == "table" then
			for key, value in pairs(rest) do
				if value == None then
					(target :: any)[key] = nil
				else
					(target :: any)[key] = value
				end
			end
		end
	end

	-- TODO? we can add & Object to this, if needed by real-world code, once CLI-49825 is fixed
	return (target :: any) :: T & U & V & W
end
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="104">
                  <Properties>
                    <string name="Name">entries</string>
                    <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local Object = script.Parent
local Packages = Object.Parent.Parent

local types = require(Packages.ES7Types)
type Array<T> = types.Array<T>
type Map<K, V> = types.Map<K, V>
type Tuple<T, V> = types.Tuple<T, V>

return function<T>(value: string | { [string]: T } | Array<T> | Map<any, T>): Array<Tuple<string, T>>
	assert(value :: any ~= nil, "cannot get entries from a nil value")
	local valueType = typeof(value)

	local entries: Array<Tuple<string, T>> = {}
	if valueType == "table" then
		for key, keyValue in pairs(value :: { [string]: T } | Array<T>) do
			-- Luau FIXME: Luau should see entries as Array<any>, given object is [string]: any, but it sees it as Array<Array<string>> despite all the manual annotation
			table.insert(entries, { key, keyValue })
		end
	elseif valueType == "string" then
		-- TODO: should we be using utf8.len?
		for i = 1, string.len(value :: string) do
			entries[i] = { tostring(i), string.sub(value :: string, i, i) }
		end
	end

	return entries
end
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="105">
                  <Properties>
                    <string name="Name">freeze</string>
                    <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local Object = script.Parent
local Packages = Object.Parent.Parent

local types = require(Packages.ES7Types)
type Array<T> = types.Array<T>
type Object = types.Object

return function<T>(t: T & (Object | Array<any>)): T
	-- Luau FIXME: model freeze better so it passes through the type constraint and doesn't erase
	return (table.freeze(t :: any) :: any) :: T
end
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="106">
                  <Properties>
                    <string name="Name">is</string>
                    <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
-- Implements Javascript's `Object.is` as defined below
-- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
return function(value1: any, value2: any): boolean
	if value1 == value2 then
		return value1 ~= 0 or 1 / value1 == 1 / value2
	else
		return value1 ~= value1 and value2 ~= value2
	end
end
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="107">
                  <Properties>
                    <string name="Name">isFrozen</string>
                    <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local __DEV__ = _G.__DEV__
local Object = script.Parent
local Packages = Object.Parent.Parent

local types = require(Packages.ES7Types)
type Array<T> = types.Array<T>
type Object = types.Object

return function(t: Object | Array<any>): boolean
	if __DEV__ then
		print("Luau now has a direct table.isfrozen call that can save the overhead of this library function call")
	end
	return table.isfrozen(t)
end
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="108">
                  <Properties>
                    <string name="Name">keys</string>
                    <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local Object = script.Parent
local Collections = Object.Parent
local Packages = Object.Parent.Parent

local Set = require(Collections.Set)
local types = require(Packages.ES7Types)
local instanceOf = require(Packages.InstanceOf)
type Array<T> = types.Array<T>
type Set<T> = types.Set<T>
type Table = { [any]: any }

return function(value: Set<any> | Table | string): Array<string>
	if value == nil then
		error("cannot extract keys from a nil value")
	end

	local valueType = typeof(value)

	local keys
	if valueType == "table" then
		keys = {}
		if instanceOf(value, Set) then
			return keys
		end

		for key in pairs(value :: Table) do
			table.insert(keys, key)
		end
	elseif valueType == "string" then
		local length = (value :: string):len()
		keys = table.create(length)
		for i = 1, length do
			keys[i] = tostring(i)
		end
	end

	return keys
end
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="109">
                  <Properties>
                    <string name="Name">preventExtensions</string>
                    <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local Object = script.Parent
local Packages = Object.Parent.Parent

local types = require(Packages.ES7Types)
type Array<T> = types.Array<T>
type Object = types.Object

-- FIXME: This should be updated to be closer to the actual
-- `Object.preventExtensions` functionality in JS. This requires additional
-- support from the VM
local function preventExtensions<T>(t: T & (Object | Array<any>)): T
	local name = tostring(t)

	return (
		setmetatable(t :: any, {
			__newindex = function(_self, key, _value)
				local message = ("%q (%s) is not a valid member of %s"):format(tostring(key), typeof(key), name)

				error(message, 2)
			end,
			__metatable = false,
		}) :: any
	) :: T
end

return preventExtensions
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="110">
                  <Properties>
                    <string name="Name">seal</string>
                    <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local Object = script.Parent
local Packages = Object.Parent.Parent

local types = require(Packages.ES7Types)
type Array<T> = types.Array<T>
type Object = types.Object

return function<T>(t: T & (Object | Array<any>)): T
	-- Luau FIXME: model freeze better so it passes through the type constraint and doesn't erase
	return (table.freeze(t :: any) :: any) :: T
end
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="111">
                  <Properties>
                    <string name="Name">values</string>
                    <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local Object = script.Parent
local Packages = Object.Parent.Parent

local types = require(Packages.ES7Types)
type Array<T> = types.Array<T>

-- TODO Luau: needs overloads to model this more correctly
return function<T>(value: { [string]: T } | Array<T> | string): Array<T> | Array<string>
	if value == nil then
		error("cannot extract values from a nil value")
	end
	local valueType = typeof(value)

	local array: Array<T> | Array<string>
	if valueType == "table" then
		array = {} :: Array<T>
		for _, keyValue in pairs(value :: { [string]: T } | Array<T>) do
			table.insert(array, keyValue)
		end
	elseif valueType == "string" then
		-- optimization to avoid rehashing/growth
		local valueStringLength = (value :: string):len()
		array = table.create(valueStringLength)
		for i = 1, valueStringLength do
			(array :: Array<string>)[i] = (value :: string):sub(i, i)
		end
	end

	return array
end
]]></string>
                  </Properties>
                </Item>
              </Item>
              <Item class="ModuleScript" referent="112">
                <Properties>
                  <string name="Name">Set</string>
                  <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
--!nonstrict
local __DEV__ = _G.__DEV__
local Collections = script.Parent
local Packages = Collections.Parent

local inspect = require(Collections.inspect)
local isArray = require(Collections.Array.isArray)
local arrayForEach = require(Collections.Array.forEach)
local arrayFromString = require(Collections.Array.from.fromString)

local types = require(Packages.ES7Types)

type Array<T> = types.Array<T>
type Object = types.Object
type setCallbackFn<T> = types.setCallbackFn<T>
type setCallbackFnWithThisArg<T> = types.setCallbackFnWithThisArg<T>
export type Set<T> = types.Set<T>

type Set_Statics = {
	new: <T>(iterable: Array<T> | Set<T> | string | nil) -> Set<T>,
}

local Set: Set<any> & Set_Statics = (
	{
		__iter = function(self)
			return next, self._array
		end,
		__tostring = function(self)
			local result = "Set "
			if #self._array > 0 then
				result ..= "(" .. tostring(#self._array) .. ") "
			end
			result ..= inspect(self._array)
			return result
		end,
	} :: any
) :: Set<any> & Set_Statics;
(Set :: any).__index = Set

function Set.new<T>(iterable: Array<T> | Set<T> | string | nil): Set<T>
	local array
	local map = {}
	if iterable ~= nil then
		local arrayIterable

		if typeof(iterable) == "table" then
			if isArray(iterable) then
				arrayIterable = table.clone(iterable)
			else
				local mt = getmetatable(iterable :: any)
				if mt and rawget(mt, "__iter") then
					arrayIterable = iterable :: Set<T>
				elseif __DEV__ then
					error("cannot create array from an object-like table")
				end
			end
		elseif typeof(iterable) == "string" then
			-- TODO Luau: need overloads for `from` to avoid needing the manual cast
			arrayIterable = arrayFromString(iterable :: string) :: Array<string>
		else
			error(("cannot create array from value of type `%s`"):format(typeof(iterable)))
		end

		if arrayIterable then
			array = table.create(#arrayIterable)
			for _, element in arrayIterable do
				if not map[element] then
					map[element] = true
					table.insert(array, element)
				end
			end
		else
			array = {}
		end
	else
		array = {}
	end

	return (setmetatable({
		size = #array,
		_map = map,
		_array = array,
	}, Set) :: any) :: Set<T>
end

function Set:add(value)
	if not self._map[value] then
		-- Luau FIXME: analyze should know self is Set<T> which includes size as a number
		self.size = self.size :: number + 1
		self._map[value] = true
		table.insert(self._array, value)
	end
	return self
end

function Set:clear()
	self.size = 0
	table.clear(self._map)
	table.clear(self._array)
end

function Set:delete(value): boolean
	if not self._map[value] then
		return false
	end
	-- Luau FIXME: analyze should know self is Map<K, V> which includes size as a number
	self.size = self.size :: number - 1
	self._map[value] = nil
	local index = table.find(self._array, value)
	if index then
		table.remove(self._array, index)
	end
	return true
end

-- Implements Javascript's `Map.prototype.forEach` as defined below
-- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach
function Set:forEach(callback: setCallbackFn<any> | setCallbackFnWithThisArg<any>, thisArg: Object?): ()
	if typeof(callback) ~= "function" then
		error("callback is not a function")
	end

	-- note: we can't turn this into a simple for-in loop, because the callbacks can modify the table and React, GQL, and Jest rely on JS behavior in that scenario
	arrayForEach(self._array, function(value)
		if thisArg ~= nil then
			(callback :: setCallbackFnWithThisArg<any>)(thisArg, value, value, self)
		else
			(callback :: setCallbackFn<any>)(value, value, self)
		end
	end)
end

function Set:has(value): boolean
	return self._map[value] ~= nil
end

function Set:ipairs()
	if __DEV__ then
		warn(
			debug.traceback(
				"`for _,_ in mySet:ipairs() do` is deprecated and will be removed in a future release, please use `for _,_ in mySet do` instead\n",
				2
			)
		)
	end
	return ipairs(self._array)
end

return Set
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="113">
                <Properties>
                  <string name="Name">WeakMap</string>
                  <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local Collections = script.Parent
local Packages = Collections.Parent

local ES7Types = require(Packages.ES7Types)

type WeakMap<K, V> = ES7Types.WeakMap<K, V>

type WeakMapPrivate<K, V> = {
	_weakMap: { [K]: V },
	-- method definitions
	get: (self: WeakMapPrivate<K, V>, K) -> V,
	set: (self: WeakMapPrivate<K, V>, K, V) -> WeakMapPrivate<K, V>,
	has: (self: WeakMapPrivate<K, V>, K) -> boolean,
}
type WeakMap_Statics = {
	new: <K, V>() -> WeakMap<K, V>,
}

local WeakMap: WeakMapPrivate<any, any> & WeakMap_Statics = {} :: any;
(WeakMap :: any).__index = WeakMap

function WeakMap.new<K, V>(): WeakMap<K, V>
	local weakMap = setmetatable({}, { __mode = "k" })
	return setmetatable({ _weakMap = weakMap }, WeakMap) :: any
end

function WeakMap:get(key)
	return self._weakMap[key]
end

function WeakMap:set(key, value)
	self._weakMap[key] = value
	return self
end

function WeakMap:has(key): boolean
	return self._weakMap[key] ~= nil
end

return WeakMap :: WeakMap<any, any> & WeakMap_Statics
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="114">
                <Properties>
                  <string name="Name">inspect</string>
                  <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
-- derived from these upstream sources:
-- https://github.com/graphql/graphql-js/blob/1951bce42092123e844763b6a8e985a8a3327511/src/jsutils/inspect.js
local HttpService = game:GetService("HttpService")

local Collections = script.Parent
local Packages = Collections.Parent

local isArray = require(Collections.Array.isArray)
local ES7Types = require(Packages.ES7Types)

type Array<T> = ES7Types.Array<T>
-- local NULL = require(srcWorkspace.luaUtils.null)

-- Support for options partial implementation
-- see: https://nodejs.org/dist/latest-v16.x/docs/api/util.html#utilinspectobject-options
export type InspectOptions = {
	depth: number?,
}

type FormatOptions = {
	depth: number,
}

local MAX_ARRAY_LENGTH = 10
local DEFAULT_RECURSIVE_DEPTH = 2

-- deviation: pre-declare functions
local formatValue
local formatObjectValue
local formatArray
local formatObject
local getObjectTag

--[[
 * Used to print values in error messages.
 ]]
local function inspect(value, options: InspectOptions?): string
	local inspectOptions: InspectOptions = options or { depth = DEFAULT_RECURSIVE_DEPTH }
	local depth = inspectOptions.depth or DEFAULT_RECURSIVE_DEPTH
	inspectOptions.depth = if depth >= 0 then depth else DEFAULT_RECURSIVE_DEPTH
	return formatValue(value, {}, inspectOptions :: FormatOptions)
end

local function isIndexKey(k, contiguousLength)
	return type(k) == "number"
		and k <= contiguousLength -- nothing out of bounds
		and 1 <= k -- nothing illegal for array indices
		and math.floor(k) == k -- no float keys
end

local function getTableLength(tbl)
	local length = 1
	local value = rawget(tbl, length)
	while value ~= nil do
		length += 1
		value = rawget(tbl, length)
	end
	return length - 1
end

local function sortKeysForPrinting(a: any, b)
	local typeofA = type(a)
	local typeofB = type(b)

	-- strings and numbers are sorted numerically/alphabetically
	if typeofA == typeofB and (typeofA == "number" or typeofA == "string") then
		return a < b
	end

	-- sort the rest by type name
	return typeofA < typeofB
end

local function rawpairs(t)
	return next, t, nil
end

local function getFragmentedKeys(tbl)
	local keys = {}
	local keysLength = 0
	local tableLength = getTableLength(tbl)
	for key, _ in rawpairs(tbl) do
		if not isIndexKey(key, tableLength) then
			keysLength = keysLength + 1
			keys[keysLength] = key
		end
	end
	table.sort(keys, sortKeysForPrinting)
	return keys, keysLength, tableLength
end

function formatValue(value, seenValues, options: FormatOptions)
	local valueType = typeof(value)
	if valueType == "string" then
		return HttpService:JSONEncode(value)
		-- deviation: format numbers like in JS
	elseif valueType == "number" then
		if value ~= value then
			return "NaN"
		elseif value == math.huge then
			return "Infinity"
		elseif value == -math.huge then
			return "-Infinity"
		else
			return tostring(value)
		end
	elseif valueType == "function" then
		local result = "[function"
		local functionName = debug.info(value :: (any) -> any, "n")
		if functionName ~= nil and functionName ~= "" then
			result ..= " " .. functionName
		end
		return result .. "]"
	elseif valueType == "table" then
		-- ROBLOX TODO: parameterize inspect with the library-specific NULL sentinel. maybe function generics?
		-- if value == NULL then
		-- 	return 'null'
		-- end
		return formatObjectValue(value, seenValues, options)
	else
		return tostring(value)
	end
end

function formatObjectValue(value, previouslySeenValues, options: FormatOptions)
	if table.find(previouslySeenValues, value) ~= nil then
		return "[Circular]"
	end

	local seenValues = { unpack(previouslySeenValues) }
	table.insert(seenValues, value)

	if typeof(value.toJSON) == "function" then
		local jsonValue = value:toJSON(value)

		if jsonValue ~= value then
			if typeof(jsonValue) == "string" then
				return jsonValue
			else
				return formatValue(jsonValue, seenValues, options)
			end
		end
	elseif isArray(value) then
		return formatArray(value, seenValues, options)
	end

	return formatObject(value, seenValues, options)
end

function formatObject(object, seenValues, options: FormatOptions)
	local result = ""
	local mt = getmetatable(object)
	if mt and rawget(mt, "__tostring") then
		return tostring(object)
	end

	local fragmentedKeys, fragmentedKeysLength, keysLength = getFragmentedKeys(object)

	if keysLength == 0 and fragmentedKeysLength == 0 then
		result ..= "{}"
		return result
	end
	if #seenValues > options.depth then
		result ..= "[" .. getObjectTag(object) .. "]"
		return result
	end

	local properties = {}
	for i = 1, keysLength do
		local value = formatValue(object[i], seenValues, options)

		table.insert(properties, value)
	end

	for i = 1, fragmentedKeysLength do
		local key = fragmentedKeys[i]
		local value = formatValue(object[key], seenValues, options)

		table.insert(properties, key .. ": " .. value)
	end

	result ..= "{ " .. table.concat(properties, ", ") .. " }"
	return result
end

function formatArray(array: Array<any>, seenValues: Array<any>, options: FormatOptions): string
	local length = #array
	if length == 0 then
		return "[]"
	end
	if #seenValues > options.depth then
		return "[Array]"
	end

	local len = math.min(MAX_ARRAY_LENGTH, length)
	local remaining = length - len
	local items = {}

	for i = 1, len do
		items[i] = (formatValue(array[i], seenValues, options))
	end

	if remaining == 1 then
		table.insert(items, "... 1 more item")
	elseif remaining > 1 then
		table.insert(items, ("... %s more items"):format(tostring(remaining)))
	end

	return "[" .. table.concat(items, ", ") .. "]"
end

function getObjectTag(_object): string
	-- local tag = Object.prototype.toString
	-- 	.call(object)
	-- 	.replace("")
	-- 	.replace("")

	-- if tag == "Object" and typeof(object.constructor) == "function" then
	-- 	local name = object.constructor.name

	-- 	if typeof(name) == "string" and name ~= "" then
	-- 		return name
	-- 	end
	-- end

	-- return tag
	return "Object"
end

return inspect
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="115">
              <Properties>
                <string name="Name">Console</string>
                <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local makeConsoleImpl = require(script.makeConsoleImpl)

return makeConsoleImpl()
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="116">
                <Properties>
                  <string name="Name">makeConsoleImpl</string>
                  <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local root = script.Parent
local Packages = root.Parent
local inspect = require(Packages.Collections).inspect

local INDENT = "  "

return function()
	local console = {}
	local indentDepth = 0

	local function indent()
		return string.rep(INDENT, indentDepth)
	end

	function console.log(content, ...)
		local message
		if typeof(content) == "string" then
			message = string.format(content, ...)
		else
			message = inspect(content)
		end
		print(indent() .. message)
	end

	function console.debug(content, ...)
		local message
		if typeof(content) == "string" then
			message = string.format(content, ...)
		else
			message = inspect(content)
		end
		print(indent() .. message)
	end

	function console.info(content, ...)
		local message
		if typeof(content) == "string" then
			message = string.format(content, ...)
		else
			message = inspect(content)
		end
		print(indent() .. message)
	end

	function console.warn(content, ...)
		local message
		if typeof(content) == "string" then
			message = string.format(content, ...)
		else
			message = inspect(content)
		end
		warn(indent() .. message)
	end

	function console.error(content, ...)
		-- JS' `console.error` doesn't interrupt execution like Lua's `error`,
		-- which is more similar to throwing an exception in JS.
		local message
		if typeof(content) == "string" then
			message = string.format(content, ...)
		else
			message = inspect(content)
		end
		warn(indent() .. message)
	end

	function console.group(content, ...)
		local message
		if typeof(content) == "string" then
			message = string.format(content, ...)
		else
			message = inspect(content)
		end
		print(indent() .. message)
		indentDepth = indentDepth + 1
	end

	function console.groupCollapsed(content, ...)
		-- There's no smart console, so this is equivalent to `console.group`
		local message
		if typeof(content) == "string" then
			message = string.format(content, ...)
		else
			message = inspect(content)
		end
		print(indent() .. message)
		indentDepth = indentDepth + 1
	end

	function console.groupEnd()
		if indentDepth > 0 then
			indentDepth = indentDepth - 1
		end
	end

	return console
end
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="117">
              <Properties>
                <string name="Name">ES7Types</string>
                <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
export type Object = { [string]: any }
export type Array<T> = { [number]: T }
export type Function = (...any) -> ...any
export type Table<T, V> = { [T]: V }
export type Tuple<T, V> = Array<T | V>
export type mapCallbackFn<K, V> = (element: V, key: K, map: Map<K, V>) -> ()
export type mapCallbackFnWithThisArg<K, V> = (thisArg: Object, value: V, key: K, map: Map<K, V>) -> ()

export type Map<K, V> = typeof(setmetatable(
	{} :: {
		size: number,
		-- method definitions
		set: (self: Map<K, V>, K, V) -> Map<K, V>,
		get: (self: Map<K, V>, K) -> V | nil,
		clear: (self: Map<K, V>) -> (),
		delete: (self: Map<K, V>, K) -> boolean,
		forEach: (
			self: Map<K, V>,
			callback: mapCallbackFn<K, V> | mapCallbackFnWithThisArg<K, V>,
			thisArg: Object?
		) -> (),
		[K]: V,
		has: (self: Map<K, V>, K) -> boolean,
		keys: (self: Map<K, V>) -> Array<K>,
		values: (self: Map<K, V>) -> Array<V>,
		entries: (self: Map<K, V>) -> Array<Tuple<K, V>>,
		ipairs: (self: Map<K, V>) -> any,
		_map: { [K]: V },
		_array: { [number]: K },
		__index: (self: Map<K, V>, key: K) -> V,
		__iter: (self: Map<K, V>) -> (<K, V>({ [K]: V }, K?) -> (K?, V), V),
		__newindex: (self: Map<K, V>, key: K, value: V) -> (),
	},
	{} :: {
		__index: Map<K, V>,
		__iter: (self: Map<K, V>) -> (<K, V>({ [K]: V }, K?) -> (K, V), V),
		__newindex: (self: Map<K, V>, key: K, value: V) -> (),
	}
))

export type WeakMap<K, V> = {
	-- method definitions
	get: (self: WeakMap<K, V>, K) -> V,
	set: (self: WeakMap<K, V>, K, V) -> WeakMap<K, V>,
	has: (self: WeakMap<K, V>, K) -> boolean,
}

export type setCallbackFn<T> = (value: T, key: T, set: Set<T>) -> ()
export type setCallbackFnWithThisArg<T> = (thisArg: Object, value: T, key: T, set: Set<T>) -> ()

export type Set<T> = typeof(setmetatable(
	{} :: {
		size: number,
		-- method definitions
		add: (self: Set<T>, T) -> Set<T>,
		clear: (self: Set<T>) -> (),
		delete: (self: Set<T>, T) -> boolean,
		forEach: (self: Set<T>, callback: setCallbackFn<T> | setCallbackFnWithThisArg<T>, thisArg: Object?) -> (),
		has: (self: Set<T>, T) -> boolean,
		ipairs: (self: Set<T>) -> any,
	},
	{} :: {
		__index: Set<T>,
		__iter: (self: Set<T>) -> (<K, V>({ [K]: V }, K?) -> (K, V), T),
	}
))
return {}
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="118">
              <Properties>
                <string name="Name">InstanceOf</string>
                <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local instanceof = require(script.instanceof)

return instanceof
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="119">
                <Properties>
                  <string name="Name">instanceof</string>
                  <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
-- polyfill for https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof
local __DEV__ = _G.__DEV__

-- FIXME Luau: typing class as Object gives: Type '{ @metatable {| __call: <a>(a, ...any) -> Error, __tostring: <b, c>({+ message: b, name: c +}) -> string |}, Error }' could not be converted into 'table'
local function instanceof(tbl: any, class: any): boolean
	if __DEV__ then
		assert(typeof(class) == "table", "Received a non-table as the second argument for instanceof")
	end

	if typeof(tbl) ~= "table" then
		return false
	end

	local ok, hasNew = pcall(function()
		return class.new ~= nil and tbl.new == class.new
	end)
	if ok and hasNew then
		return true
	end

	local seen = { [tbl] = true }

	while tbl and typeof(tbl) == "table" do
		tbl = getmetatable(tbl)
		if typeof(tbl) == "table" then
			tbl = tbl.__index

			if tbl == class then
				return true
			end
		end

		-- if we still have a valid table then check against seen
		if typeof(tbl) == "table" then
			if seen[tbl] then
				return false
			end
			seen[tbl] = true
		end
	end

	return false
end

return instanceof
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="120">
              <Properties>
                <string name="Name">LuauPolyfill</string>
                <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local Packages = script.Parent

local Boolean = require(Packages.Boolean)
local Collections = require(Packages.Collections)
local Console = require(Packages.Console)
local Math = require(Packages.Math)
local Number = require(Packages.Number)
local String = require(Packages.String)
local Symbol = require(Packages.Symbol)
local Timers = require(Packages.Timers)
local types = require(Packages.ES7Types)

local AssertionError = require(script.AssertionError)
local Error = require(script.Error)
local PromiseModule = require(script.Promise)
local extends = require(script.extends)
local instanceof = require(Packages.InstanceOf)

export type Array<T> = types.Array<T>
export type AssertionError = AssertionError.AssertionError
export type Error = Error.Error
export type Map<T, V> = types.Map<T, V>
export type Object = types.Object

export type PromiseLike<T> = PromiseModule.PromiseLike<T>
export type Promise<T> = PromiseModule.Promise<T>

export type Set<T> = types.Set<T>
export type Symbol = Symbol.Symbol
export type Timeout = Timers.Timeout
export type Interval = Timers.Interval
export type WeakMap<T, V> = Collections.WeakMap<T, V>

return {
	Array = Collections.Array,
	AssertionError = AssertionError,
	Boolean = Boolean,
	console = Console,
	Error = Error,
	extends = extends,
	instanceof = instanceof,
	Math = Math,
	Number = Number,
	Object = Collections.Object,
	Map = Collections.Map,
	coerceToMap = Collections.coerceToMap,
	coerceToTable = Collections.coerceToTable,
	Set = Collections.Set,
	WeakMap = Collections.WeakMap,
	String = String,
	Symbol = Symbol,
	setTimeout = Timers.setTimeout,
	clearTimeout = Timers.clearTimeout,
	setInterval = Timers.setInterval,
	clearInterval = Timers.clearInterval,
	util = {
		inspect = Collections.inspect,
	},
}
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="121">
                <Properties>
                  <string name="Name">AssertionError</string>
                  <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local AssertionErrorModule = require(script["AssertionError.global"])

export type AssertionError = AssertionErrorModule.AssertionError

return AssertionErrorModule.AssertionError
]]></string>
                </Properties>
                <Item class="ModuleScript" referent="122">
                  <Properties>
                    <string name="Name">AssertionError.global</string>
                    <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
-- ROBLOX upstream: https://github.com/nodejs/node/blob/v18.1.0/lib/internal/assert/assertion_error.js
--[[
	Copyright Node.js contributors. All rights reserved.

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to
	deal in the Software without restriction, including without limitation the
	rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
	sell copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
	FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
	IN THE SOFTWARE.
]]

local LuauPolyfill = script.Parent.Parent
local Packages = LuauPolyfill.Parent

local Collections = require(Packages.Collections)
local Array = Collections.Array
local Object = Collections.Object
local Boolean = require(Packages.Boolean)
local String = require(Packages.String)
local types = require(Packages.ES7Types)
local inspect = Collections.inspect

local Error = require(LuauPolyfill.Error)
local instanceof = require(Packages.InstanceOf)

type Error = Error.Error
type Array<T> = types.Array<T>
type Object = types.Object
type Function = types.Function

-- ROBLOX deviation START: mock process to not change AssertionError internals
local process = {
	stderr = {
		isTTY = false,
		columns = 0,
		hasColors = function(_)
			return true
		end,
	},
}
-- ROBLOX deviation END
-- ROBLOX TODO START: implement ErrorCaptureStackTrace correctly
function ErrorCaptureStackTrace(err, ...)
	Error.captureStackTrace(err, ...)
end
-- ROBLOX TODO END
-- ROBLOX TODO START: use real remove colors
local function removeColors(str)
	return str
end
-- local removeColors = require_("internal/util").removeColors
-- ROBLOX TODO END
-- local validateObject = require_("internal/validators").validateObject
-- ROBLOX deviation START: isErrorStackTraceLimitWritable is not necessary ATM
-- local isErrorStackTraceLimitWritable = require_("internal/errors").isErrorStackTraceLimitWritable
-- ROBLOX deviation END
local blue = ""
local green = ""
local red = ""
local white = ""
local kReadableOperator = {
	deepStrictEqual = "Expected values to be strictly deep-equal:",
	strictEqual = "Expected values to be strictly equal:",
	strictEqualObject = 'Expected "actual" to be reference-equal to "expected":',
	deepEqual = "Expected values to be loosely deep-equal:",
	notDeepStrictEqual = 'Expected "actual" not to be strictly deep-equal to:',
	notStrictEqual = 'Expected "actual" to be strictly unequal to:',
	notStrictEqualObject = 'Expected "actual" not to be reference-equal to "expected":',
	notDeepEqual = 'Expected "actual" not to be loosely deep-equal to:',
	notIdentical = "Values have same structure but are not reference-equal:",
	notDeepEqualUnequal = "Expected values not to be loosely deep-equal:",
}
-- Comparing short primitives should just show === / !== instead of using the
-- diff.
local kMaxShortLength = 12
local function copyError(source: Object)
	local keys = Object.keys(source)
	-- ROBLOX TODO:
	local target = {} -- ObjectCreate(ObjectGetPrototypeOf(source))
	for _, key in keys do
		target[key] = source[key]
	end
	target.message = source.message
	return target
end

local function inspectValue(val)
	-- The util.inspect default values could be changed. This makes sure the
	-- error messages contain the necessary information nevertheless.
	return inspect(val, {
		compact = false,
		customInspect = false,
		depth = 1000,
		maxArrayLength = math.huge, -- Assert compares only enumerable properties (with a few exceptions).
		showHidden = false, -- Assert does not detect proxies currently.
		showProxy = false,
		sorted = true, -- Inspect getters as we also check them when comparing entries.
		getters = true,
	})
end

local function createErrDiff(actual, expected, operator)
	local other = ""
	local res = ""
	local end_ = ""
	local skipped = false
	local actualInspected = inspectValue(actual)
	local actualLines = String.split(actualInspected, "\n")
	local expectedLines = String.split(inspectValue(expected), "\n")

	local i = 0
	local indicator = ""

	-- In case both values are objects or functions explicitly mark them as not
	-- reference equal for the `strictEqual` operator.
	if
		operator == "strictEqual"
		and (
			typeof(actual) == "table" and actual ~= nil and typeof(expected) == "table" and expected ~= nil
			or typeof(actual) == "function" and typeof(expected) == "function"
		)
	then
		operator = "strictEqualObject"
	end

	-- If "actual" and "expected" fit on a single line and they are not strictly
	-- equal, check further special handling.
	if #actualLines == 1 and #expectedLines == 1 and actualLines[1] ~= expectedLines[1] then
		-- Check for the visible length using the `removeColors()` function, if
		-- appropriate.
		-- ROBLOX TODO START
		local c = false
		-- local c = inspect.defaultOptions.colors
		-- ROBLOX TODO END
		local actualRaw = if c then removeColors(actualLines[1]) else actualLines[1]
		local expectedRaw = if Boolean.toJSBoolean(c) then removeColors(expectedLines[1]) else expectedLines[1]
		local inputLength = string.len(actualRaw) + string.len(expectedRaw)
		-- If the character length of "actual" and "expected" together is less than
		-- kMaxShortLength and if neither is an object and at least one of them is
		-- not `zero`, use the strict equal comparison to visualize the output.
		if inputLength <= kMaxShortLength then
			if
				(typeof(actual) ~= "table" or actual == nil)
				and (typeof(expected) ~= "table" or expected == nil)
				and (actual ~= 0 or expected ~= 0)
			then
				-- -0 === +0
				return ("%s\n\n"):format(kReadableOperator[operator])
					.. ("%s !== %s\n"):format(actualLines[1], expectedLines[1])
			end
		elseif operator ~= "strictEqualObject" then
			-- If the stderr is a tty and the input length is lower than the current
			-- columns per line, add a mismatch indicator below the output. If it is
			-- not a tty, use a default value of 80 characters.
			local maxLength = if process.stderr.isTTY then process.stderr.columns else 80
			if inputLength < maxLength then
				while string.sub(actualRaw, i + 1, i + 1) == string.sub(expectedRaw, i + 1, i + 1) do
					i += 1
				end
				-- Ignore the first characters.
				if i > 2 then
					-- Add position indicator for the first mismatch in case it is a
					-- single line and the input length is less than the column length.
					indicator = ("\n  %s^"):format(string.rep(" ", i))
					i = 0
				end
			end
		end
	end

	-- Remove all ending lines that match (this optimizes the output for
	-- readability by reducing the number of total changed lines).
	local a = actualLines[#actualLines]
	local b = expectedLines[#expectedLines]
	while a == b do
		local i_ = i
		i += 1
		if i_ < 3 then
			end_ = ("\n  %s%s"):format(a, end_)
		else
			other = a
		end
		table.remove(actualLines)
		table.remove(expectedLines)
		if #actualLines == 0 or #expectedLines == 0 then
			break
		end
		a = actualLines[#actualLines]
		b = expectedLines[#expectedLines]
	end

	local maxLines = math.max(#actualLines, #expectedLines)
	-- Strict equal with identical objects that are not identical by reference.
	-- E.g., assert.deepStrictEqual({ a: Symbol() }, { a: Symbol() })
	if maxLines == 0 then
		-- We have to get the result again. The lines were all removed before.
		local actualLines_ = String.split(actualInspected, "\n")

		-- Only remove lines in case it makes sense to collapse those.
		-- TODO: Accept env to always show the full error.
		if #actualLines_ > 50 then
			actualLines_[47] = ("%s...%s"):format(blue, white)
			while #actualLines_ > 47 do
				table.remove(actualLines_)
			end
		end

		return ("%s\n\n"):format(kReadableOperator.notIdentical) .. ("%s\n"):format(Array.join(actualLines_, "\n"))
	end

	-- There were at least five identical lines at the end. Mark a couple of
	-- skipped.
	if i >= 5 then
		end_ = ("\n%s...%s%s"):format(blue, white, end_)
		skipped = true
	end
	if other ~= "" then
		end_ = ("\n  %s%s"):format(other, end_)
		other = ""
	end

	local printedLines = 0
	local identical = 0
	local msg = kReadableOperator[operator] .. ("\n%s+ actual%s %s- expected%s"):format(green, white, red, white)
	local skippedMsg = (" %s...%s Lines skipped"):format(blue, white)

	local lines = actualLines
	local plusMinus = ("%s+%s"):format(green, white)
	local maxLength = #expectedLines
	if #actualLines < maxLines then
		lines = expectedLines
		plusMinus = ("%s-%s"):format(red, white)
		maxLength = #actualLines
	end

	for ii = 1, maxLines do
		i = ii
		if maxLength < ii then
			-- If more than two former lines are identical, print them. Collapse them
			-- in case more than five lines were identical.
			if identical > 2 then
				if identical > 3 then
					if identical > 4 then
						if identical == 5 then
							res ..= ("\n  %s"):format(lines[(ii - 3)])
							printedLines += 1
						else
							res ..= ("\n%s...%s"):format(blue, white)
							skipped = true
						end
					end
					res ..= ("\n  %s"):format(lines[(ii - 2)])
					printedLines += 1
				end
				res ..= ("\n  %s"):format(lines[(ii - 1)])
				printedLines += 1
			end
			-- No identical lines before.
			identical = 0
			-- Add the expected line to the cache.
			if lines == actualLines then
				res ..= ("\n%s %s"):format(plusMinus, lines[ii])
			else
				other ..= ("\n%s %s"):format(plusMinus, lines[ii])
			end
			printedLines += 1
			-- Only extra actual lines exist
			-- Lines diverge
		else
			local expectedLine = expectedLines[ii]
			local actualLine = actualLines[ii]
			-- If the lines diverge, specifically check for lines that only diverge by
			-- a trailing comma. In that case it is actually identical and we should
			-- mark it as such.
			local divergingLines = actualLine ~= expectedLine
				and (
					not Boolean.toJSBoolean(String.endsWith(actualLine, ","))
					or String.slice(actualLine, 0, -1) ~= expectedLine
				)
			-- If the expected line has a trailing comma but is otherwise identical,
			-- add a comma at the end of the actual line. Otherwise the output could
			-- look weird as in:
			--
			--   [
			--     1         // No comma at the end!
			-- +   2
			--   ]
			--
			if
				divergingLines
				and String.endsWith(expectedLine, ",")
				and String.slice(expectedLine, 0, -1) == actualLine
			then
				divergingLines = false
				actualLine ..= ","
			end
			if divergingLines then
				-- If more than two former lines are identical, print them. Collapse
				-- them in case more than five lines were identical.
				if identical > 2 then
					if identical > 3 then
						if identical > 4 then
							if identical == 5 then
								res ..= ("\n  %s"):format(actualLines[ii - 3])
								printedLines += 1
							else
								res ..= ("\n%s...%s"):format(blue, white)
								skipped = true
							end
						end
						res ..= ("\n  %s"):format(actualLines[ii - 2])
						printedLines += 1
					end
					res ..= ("\n  %s"):format(actualLines[ii - 1])
					printedLines += 1
				end
				-- No identical lines before.
				identical = 0
				-- Add the actual line to the result and cache the expected diverging
				-- line so consecutive diverging lines show up as +++--- and not +-+-+-.
				res ..= ("\n%s+%s %s"):format(green, white, actualLine)
				other ..= ("\n%s-%s %s"):format(red, white, expectedLine)
				printedLines += 2
				-- Lines are identical
			else
				-- Add all cached information to the result before adding other things
				-- and reset the cache.
				res ..= other
				other = ""
				identical += 1
				-- The very first identical line since the last diverging line is be
				-- added to the result.
				if identical <= 2 then
					res ..= ("\n  %s"):format(actualLine)
					printedLines += 1
				end
			end
		end
		-- Inspected object to big (Show ~50 rows max)
		if printedLines > 50 and ii < maxLines - 2 then
			return ("%s%s\n%s\n%s...%s%s\n"):format(msg, skippedMsg, res, blue, white, other)
				.. ("%s...%s"):format(blue, white)
		end
	end

	return ("%s%s\n%s%s%s%s"):format(msg, if skipped then skippedMsg else "", res, other, end_, indicator)
end
-- ROBLOX deviation START: skipped as it is only needed in [inspect.custom] method
-- local function addEllipsis(string_)
-- 	local lines = String.split(string_, "\n", 11)
-- 	if #lines.length > 10 then
-- 		lines = Array.slice(lines, 0, 10)
-- 		return ("%s\n..."):format(Array.join(lines, "\n"))
-- 	elseif string.len(string_) > 512 then
-- 		return ("%s..."):format(String.slice(string_, 512))
-- 	end
-- 	return string_
-- end
-- ROBLOX deviation END

export type AssertionError = Error & {
	actual: any,
	expected: any,
	operator: string?,
	generatedMessage: boolean,
	code: "ERR_ASSERTION",
	toString: (self: AssertionError) -> any,
	-- ROBLOX deviation: skipped [inpect.custom] method
	-- [inspect.custom]: (self: AssertionError, recurseTimes: any, ctx: any) -> any,
}

type AssertionErrorStatics = {
	new: (options: AssertionErrorOptions) -> AssertionError,
	__index: AssertionError,
	__tostring: (self: AssertionError) -> string,
}

local AssertionError: AssertionError & AssertionErrorStatics = (
	setmetatable({}, { __index = Error }) :: any
) :: AssertionError & AssertionErrorStatics
AssertionError.__index = AssertionError
AssertionError.__tostring = function(self: AssertionError)
	return self:toString()
end

type AssertionErrorOptions = {
	message: string?,
	actual: any?,
	expected: any?,
	-- ROBLOX note: this is optional in definitely-typed, but we always use it in Lua and it's only nil when details is non-nil
	operator: string?,
	stackStartFn: Function?,
}

function AssertionError.new(options: AssertionErrorOptions): AssertionError
	local self: AssertionError
	-- validateObject(options, "options")
	-- stylua: ignore
	local message, operator, stackStartFn =
		options.message,
		options.operator,
		options.stackStartFn
	local actual, expected = options.actual, options.expected
	-- ROBLOX deviation START: Error.stackTraceLimit not available in Luau port
	-- local limit = Error.stackTraceLimit
	-- if isErrorStackTraceLimitWritable() then
	-- 	Error.stackTraceLimit = 0
	-- end
	-- ROBLOX deviation END
	if message ~= nil then
		self = (setmetatable(Error.new(tostring(message)), AssertionError) :: any) :: AssertionError
	else
		if process.stderr.isTTY then
			-- Reset on each call to make sure we handle dynamically set environment
			-- variables correct.
			if process.stderr:hasColors() then
				blue = "\u{001b}[34m"
				green = "\u{001b}[32m"
				white = "\u{001b}[39m"
				red = "\u{001b}[31m"
			else
				blue = ""
				green = ""
				white = ""
				red = ""
			end
		end
		-- Prevent the error stack from being visible by duplicating the error
		-- in a very close way to the original in case both sides are actually
		-- instances of Error.
		if
			typeof(actual) == "table"
			and actual ~= nil
			and typeof(expected) == "table"
			and expected ~= nil
			and Array.indexOf(Object.keys(actual), "stack") ~= -1
			and instanceof(actual, Error)
			and Array.indexOf(Object.keys(expected), "stack") ~= -1
			and instanceof(expected, Error)
		then
			actual = copyError(actual)
			expected = copyError(expected)
		end
		if operator == "deepStrictEqual" or operator == "strictEqual" then
			self = (
				setmetatable(Error.new(createErrDiff(actual, expected, operator)), AssertionError) :: any
			) :: AssertionError
		elseif operator == "notDeepStrictEqual" or operator == "notStrictEqual" then
			-- In case the objects are equal but the operator requires unequal, show
			-- the first object and say A equals B
			local base = kReadableOperator[operator]
			local res = String.split(inspectValue(actual), "\n")

			-- In case "actual" is an object or a function, it should not be
			-- reference equal.
			if
				operator == "notStrictEqual"
				and (typeof(actual) == "table" and actual ~= nil or typeof(actual) == "function")
			then
				base = kReadableOperator.notStrictEqualObject
			end

			-- Only remove lines in case it makes sense to collapse those.
			-- TODO: Accept env to always show the full error.
			if #res > 50 then
				res[47] = ("%s...%s"):format(blue, white)
				while #res > 47 do
					table.remove(res)
				end
			end

			-- Only print a single input.
			if #res == 1 then
				self = (
					setmetatable(
						Error.new(("%s%s%s"):format(base, if string.len(res[1]) > 5 then "\n\n" else " ", res[1])),
						AssertionError
					) :: any
				) :: AssertionError
			else
				self = (
					setmetatable(Error.new(("%s\n\n%s\n"):format(base, Array.join(res, "\n"))), AssertionError) :: any
				) :: AssertionError
			end
		else
			local res = inspectValue(actual)
			local other = inspectValue(expected)
			local knownOperator = kReadableOperator[tostring(operator)]
			if operator == "notDeepEqual" and res == other then
				res = ("%s\n\n%s"):format(knownOperator, res)
				if string.len(res) > 1024 then
					res = ("%s..."):format(String.slice(res, 0, 1021))
				end
				self = (setmetatable(Error.new(res), AssertionError) :: any) :: AssertionError
			else
				if string.len(res) > 512 then
					res = ("%s..."):format(String.slice(res, 0, 509))
				end
				if string.len(other) > 512 then
					other = ("%s..."):format(String.slice(other, 0, 509))
				end
				if operator == "deepEqual" then
					res = ("%s\n\n%s\n\nshould loosely deep-equal\n\n"):format(knownOperator, res)
				else
					local newOp = kReadableOperator[("%sUnequal"):format(tostring(operator))]
					if Boolean.toJSBoolean(newOp) then
						res = ("%s\n\n%s\n\nshould not loosely deep-equal\n\n"):format(newOp, res)
					else
						other = (" %s %s"):format(tostring(operator), other)
					end
				end
				self = (setmetatable(Error.new(("%s%s"):format(res, other)), AssertionError) :: any) :: AssertionError
			end
		end
	end
	-- ROBLOX deviation START: Error.stackTraceLimit not available in Luau port
	-- if Boolean.toJSBoolean(isErrorStackTraceLimitWritable()) then
	-- 	Error.stackTraceLimit = limit
	-- end
	-- ROBLOX deviation END
	self.generatedMessage = not Boolean.toJSBoolean(message)
	--[[
		ROBLOX deviation: not using ObjectDefineProperty:
		original code:
		ObjectDefineProperty(self, "name", {
			value = "AssertionError [ERR_ASSERTION]",
			enumerable = false,
			writable = true,
			configurable = true,
		})
	]]
	self.name = "AssertionError [ERR_ASSERTION]"
	self.code = "ERR_ASSERTION"
	-- ROBLOX deviation START: details field not in public API docs, nodejs test suite, or in definitely-typed
	-- if details ~= nil then
	-- 	self.actual = nil
	-- 	self.expected = nil
	-- 	self.operator = ""
	-- 	for i = 1, #details do
	-- 		self["message " .. tostring(i)] = details[i].message
	-- 		self["actual " .. tostring(i)] = details[i].actual
	-- 		self["expected " .. tostring(i)] = details[i].expected
	-- 		self["operator " .. tostring(i)] = details[i].operator
	-- 		self["stack trace " .. tostring(i)] = details[i].stack
	-- 	end
	-- else
	self.actual = actual
	self.expected = expected
	self.operator = operator
	-- end
	-- ROBLOX deviation END
	ErrorCaptureStackTrace(self, stackStartFn or AssertionError.new)
	-- Create error message including the error code in the name.
	--[[
		ROBLOX deviation: Lua doesn't support 'LuaMemberExpression' as a standalone type
		original code:
		this.stack
	]]
	-- Reset the name.
	self.name = "AssertionError"
	return (self :: any) :: AssertionError
end

function AssertionError:toString()
	return ("%s [%s]: %s"):format(self.name, self.code, self.message)
end

AssertionError.name = "AssertionError"

return { AssertionError = AssertionError }
]]></string>
                  </Properties>
                </Item>
              </Item>
              <Item class="ModuleScript" referent="123">
                <Properties>
                  <string name="Name">Error</string>
                  <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local Error = require(script["Error.global"])
export type Error = Error.Error
return Error
]]></string>
                </Properties>
                <Item class="ModuleScript" referent="124">
                  <Properties>
                    <string name="Name">Error.global</string>
                    <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local LuauPolyfill = script.Parent.Parent
local Packages = LuauPolyfill.Parent

local types = require(Packages.ES7Types)

type Function = types.Function

export type Error = { name: string, message: string, stack: string? }
type Error_private = Error & { __stack: string? }

local Error = {}

local DEFAULT_NAME = "Error"
Error.__index = Error
Error.__tostring = function(self)
	-- Luau FIXME: I can't cast to Error or Object here: Type 'Object' could not be converted into '{ @metatable *unknown*, {|  |} }'
	return getmetatable(Error :: any).__tostring(self)
end

-- ROBLOX NOTE: extracted __createError function so that both Error.new() and Error() can capture the stack trace at the same depth
local function __createError(message: string?): Error
	local self = (setmetatable({
		name = DEFAULT_NAME,
		message = message or "",
	}, Error) :: any) :: Error
	Error.__captureStackTrace(self, 4)
	return self
end

function Error.new(message: string?): Error
	return __createError(message)
end

function Error.captureStackTrace(err: Error, options: Function?)
	Error.__captureStackTrace(err, 3, options)
end

function Error.__captureStackTrace(err_: Error, level: number, options: Function?)
	local err = err_ :: Error_private
	if typeof(options) == "function" then
		local stack = debug.traceback(nil, level)
		local functionName: string = debug.info(options, "n")
		local sourceFilePath: string = debug.info(options, "s")

		local espacedSourceFilePath = string.gsub(sourceFilePath, "([%(%)%.%%%+%-%*%?%[%^%$])", "%%%1")
		local stacktraceLinePattern = espacedSourceFilePath .. ":%d* function " .. functionName
		local beg = string.find(stack, stacktraceLinePattern)
		local end_ = nil
		if beg ~= nil then
			beg, end_ = string.find(stack, "\n", beg + 1)
		end
		if end_ ~= nil then
			stack = string.sub(stack, end_ + 1)
		end
		err.__stack = stack
	else
		err.__stack = debug.traceback(nil, level)
	end
	Error.__recalculateStacktrace(err)
end

function Error.__recalculateStacktrace(err_: Error)
	local err = err_ :: Error_private
	local message = err.message
	local name = err.name or DEFAULT_NAME

	local errName = name .. (if message ~= nil and message ~= "" then (": " .. message) else "")
	local stack = if err.__stack then err.__stack else ""

	err.stack = errName .. "\n" .. stack
end

return setmetatable(Error, {
	__call = function(_, ...)
		return __createError(...)
	end,
	__tostring = function(self)
		if self.name ~= nil then
			if self.message and self.message ~= "" then
				return string.format("%s: %s", tostring(self.name), tostring(self.message))
			end
			return tostring(self.name)
		end
		return tostring(DEFAULT_NAME)
	end,
})
]]></string>
                  </Properties>
                </Item>
              </Item>
              <Item class="ModuleScript" referent="125">
                <Properties>
                  <string name="Name">Promise</string>
                  <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
-- this maps onto community promise libraries which won't support Luau, so we inline
export type PromiseLike<T> = {
	andThen: (
		self: PromiseLike<T>,
		resolve: ((T) -> ...(nil | T | PromiseLike<T>))?,
		reject: ((any) -> ...(nil | T | PromiseLike<T>))?
	) -> PromiseLike<T>,
}

type PromiseStatus = "Started" | "Resolved" | "Rejected" | "Cancelled"

export type Promise<T> = {
	andThen: (
		self: Promise<T>,
		resolve: ((T) -> ...(nil | T | PromiseLike<T>))?,
		reject: ((any) -> ...(nil | T | PromiseLike<T>))?
	) -> Promise<T>,

	catch: (Promise<T>, ((any) -> ...(nil | T | PromiseLike<nil>))) -> Promise<T>,

	onCancel: (Promise<T>, () -> ()?) -> boolean,

	expect: (Promise<T>) -> ...T,

	-- FIXME Luau: need union type packs to parse  (...T) | () | PromiseLike<T> here
	await: (Promise<T>) -> (boolean, ...(T | any)),

	getStatus: (self: Promise<T>) -> PromiseStatus,
	-- FIXME Luau: need union type packs to parse  (...T) | () | PromiseLike<T> here
	awaitStatus: (self: Promise<T>) -> (PromiseStatus, ...(T | any)),
}

return {}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="126">
                <Properties>
                  <string name="Name">encodeURIComponent</string>
                  <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
-- reference documentation: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent
local HttpService = game:GetService("HttpService")

local root = script.Parent
local Packages = root.Parent

local String = require(Packages.String)
local charCodeAt = String.charCodeAt
local Error = require(script.Parent.Error)

local function encodeURIComponent(value: string): string
	local valueLength = utf8.len(value)
	if valueLength == 0 or valueLength == nil then
		return ""
	end
	-- we don't exhaustively test the whole string for invalid characters like ECMA-262 15.1.3 says
	local check = charCodeAt(value, 1)
	if valueLength == 1 then
		if check == 0xD800 then
			error(Error.new("URI malformed"))
		end
		if check == 0xDFFF then
			error(Error.new("URI malformed"))
		end
	end
	if check >= 0xDC00 and check < 0xDFFF then
		error(Error.new("URI malformed"))
	end
	local encoded = HttpService:UrlEncode(value)
	-- reverting encoded chars which are not encoded by JS
	local result = encoded
		:gsub("%%2D", "-")
		:gsub("%%5F", "_")
		:gsub("%%2E", ".")
		:gsub("%%21", "!")
		:gsub("%%7E", "~")
		:gsub("%%2A", "*")
		:gsub("%%27", "'")
		:gsub("%%28", "(")
		:gsub("%%29", ")")
	return result
end

return encodeURIComponent
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="127">
                <Properties>
                  <string name="Name">extends</string>
                  <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
--!nonstrict
--[[
	deviation: Our constructors currently have no notion of 'super' so any
	such behavior in upstream JS must be implemented manually by setting fields

	A constructor passed to this class would typically look along the lines of:
	function(self, arg, otherArg)
		self.arg = arg
		self.otherArg = otherArg
	end

	But even something like function() end can be passed in as the constructor
	if no fields need to be set. In upstream JS, the equivalent would be
	returning an empty object from the constructor.
]]
return function(parent, childName, constructor)
	local Child = {}
	Child.__index = Child
	Child.__tostring = function(self)
		return getmetatable(parent).__tostring(self)
	end

	local mt = {}

	Child.new = function(...)
		local self = {}
		constructor(self, ...)
		return setmetatable(self, Child)
	end

	if typeof(getmetatable(parent)) == "table" and getmetatable(parent).__call then
		mt.__call = function(_, ...)
			return Child.new(...)
		end
	end

	mt.__index = parent
	mt.__tostring = function(self)
		-- Printing class name
		if self == Child then
			return tostring(childName)
		end
		return getmetatable(parent).__tostring(self)
	end

	setmetatable(Child, mt)

	return Child
end
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="128">
              <Properties>
                <string name="Name">Math</string>
                <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
return {
	clz32 = bit32.countlz,
}
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="129">
              <Properties>
                <string name="Name">Number</string>
                <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
return {
	isFinite = require(script.isFinite),
	isInteger = require(script.isInteger),
	isNaN = require(script.isNaN),
	isSafeInteger = require(script.isSafeInteger),
	MAX_SAFE_INTEGER = require(script.MAX_SAFE_INTEGER),
	MIN_SAFE_INTEGER = require(script.MIN_SAFE_INTEGER),
	NaN = 0 / 0,
	toExponential = require(script.toExponential),
}
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="130">
                <Properties>
                  <string name="Name">MAX_SAFE_INTEGER</string>
                  <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
-- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER
return 9007199254740991
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="131">
                <Properties>
                  <string name="Name">MIN_SAFE_INTEGER</string>
                  <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
-- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER
return -9007199254740991
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="132">
                <Properties>
                  <string name="Name">isFinite</string>
                  <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
return function(value)
	return typeof(value) == "number" and value == value and value ~= math.huge and value ~= -math.huge
end
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="133">
                <Properties>
                  <string name="Name">isInteger</string>
                  <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
-- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger
return function(value)
	return type(value) == "number" and value ~= math.huge and value == math.floor(value)
end
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="134">
                <Properties>
                  <string name="Name">isNaN</string>
                  <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
-- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN
return function(value)
	return type(value) == "number" and value ~= value
end
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="135">
                <Properties>
                  <string name="Name">isSafeInteger</string>
                  <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
-- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger
local isInteger = require(script.Parent.isInteger)
local MAX_SAFE_INTEGER = require(script.Parent.MAX_SAFE_INTEGER)

return function(value)
	return isInteger(value) and math.abs(value) <= MAX_SAFE_INTEGER
end
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="136">
                <Properties>
                  <string name="Name">toExponential</string>
                  <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
-- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential
return function(value: string | number, fractionDigits: number?): string | nil
	local num = value
	if typeof(value) == "string" then
		-- ROBLOX FIXME: add parseInt to encapsulate this logic and use it here
		local NaN = 0 / 0
		num = tonumber(value) or NaN -- works because 0 is truthy in Lua
	end
	-- returns nil for invalid input instead of nan to be more lua-native
	if typeof(num) ~= "number" then
		return "nan"
	end

	if fractionDigits ~= nil then
		if typeof(fractionDigits) ~= "number" then
			error("TypeError: fractionDigits must be a number between 0 and 100")
		end
		if fractionDigits < 0 or fractionDigits > 100 then
			error("RangeError: fractionDigits must be between 0 and 100")
		end
	end

	local formatString
	if fractionDigits == nil then
		formatString = "%e"
	else
		formatString = "%." .. tostring(fractionDigits) .. "e"
	end

	local retval = string.format(formatString, num):gsub("%+0", "+"):gsub("%-0", "-"):gsub("0*e", "e")

	return retval
end
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="137">
              <Properties>
                <string name="Name">String</string>
                <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
return {
	charCodeAt = require(script.charCodeAt),
	endsWith = require(script.endsWith),
	findOr = require(script.findOr),
	includes = require(script.includes),
	indexOf = require(script.indexOf),
	lastIndexOf = require(script.lastIndexOf),
	slice = require(script.slice),
	split = require(script.split),
	startsWith = require(script.startsWith),
	substr = require(script.substr),
	trim = require(script.trim),
	trimEnd = require(script.trimEnd),
	trimStart = require(script.trimStart),
	-- aliases for trimEnd and trimStart
	trimRight = require(script.trimEnd),
	trimLeft = require(script.trimStart),
}
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="138">
                <Properties>
                  <string name="Name">charCodeAt</string>
                  <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local String = script.Parent
local Packages = String.Parent
local Number = require(Packages.Number)

local NaN = Number.NaN

-- js  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt
-- lua http://www.lua.org/manual/5.4/manual.html#pdf-utf8.codepoint
return function(str: string, index: number): number
	if type(index) ~= "number" then
		index = 1
	end
	--[[
		Initial bounds check. Checking string.len is not an exhaustive upper bound,
		but it is cheaper to check string.len and handle utf8.offset than to check
		utf.len, which iterates over all codepoints.
	]]
	local length = string.len(str)
	if index < 1 or index > length then
		return NaN
	end

	-- utf8.offset returns nil for out of bounds
	local offset = utf8.offset(str, index)

	-- check that offset is not greater than the length of the string
	if offset == nil or offset > length then
		return NaN
	end

	local value = utf8.codepoint(str, offset, offset)

	if value == nil then
		return NaN
	end

	return value
end
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="139">
                <Properties>
                  <string name="Name">endsWith</string>
                  <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local function endsWith(value: string, substring: string, optionalLength: number?): boolean
	local substringLength = substring:len()
	if substringLength == 0 then
		return true
	end
	local valueLength = value:len()
	local length = optionalLength or valueLength
	if length > valueLength then
		length = valueLength
	end
	if length < 1 then
		return false
	end
	local position = length - substringLength + 1
	return value:find(substring, position, true) == position
end

return endsWith
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="140">
                <Properties>
                  <string name="Name">findOr</string>
                  <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
type Match = {
	index: number,
	match: string,
}

-- excluding the `+` and `*` character, since findOr tests and graphql use them explicitly
local luaPatternCharacters = "([" .. ("$%^()-[].?"):gsub("(.)", "%%%1") .. "])"

local function findOr(str: string, patternTable: { string }, initIndex: number?): Match | nil
	-- loop through all options in patern patternTable

	local init = utf8.offset(str, initIndex or 1)
	local matches = {}
	for _, value in patternTable do
		value = value:gsub(luaPatternCharacters, "%%%1")
		local iStart, iEnd = string.find(str, value, init)
		if iStart then
			local prefix = string.sub(str, 1, iStart - 1)
			local prefixEnd, invalidBytePosition = utf8.len(prefix)
			if prefixEnd == nil then
				error(("string `%s` has an invalid byte at position %s"):format(prefix, tostring(invalidBytePosition)))
			end
			local iStartIndex = prefixEnd :: number + 1
			local match = {
				index = iStartIndex,
				match = string.sub(str, iStart, iEnd),
			}
			table.insert(matches, match)
		end
	end

	-- if no matches, return nil
	if #matches == 0 then
		return nil
	end

	-- find the first matched index (after the init param)
	-- for each, if we get a hit, return the earliest index and matched term

	local firstMatch
	for _, value in matches do
		-- load first condition
		if firstMatch == nil then
			firstMatch = value
		end
		-- identify if current match comes before first match
		if value.index < firstMatch.index then
			firstMatch = value
		end
	end

	-- return first match
	return firstMatch
end

return findOr
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="141">
                <Properties>
                  <string name="Name">includes</string>
                  <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
-- excluding the `+` and `*` character, since findOr tests and graphql use them explicitly
local luaPatternCharacters = "([" .. ("$%^()-[].?"):gsub("(.)", "%%%1") .. "])"

local function includes(str: string, substring: string, position: (string | number)?): boolean
	local strLen, invalidBytePosition = utf8.len(str)
	assert(strLen ~= nil, ("string `%s` has an invalid byte at position %s"):format(str, tostring(invalidBytePosition)))
	if strLen == 0 then
		return false
	end

	if #substring == 0 then
		return true
	end

	local startIndex = 1
	if position ~= nil then
		startIndex = tonumber(position) or 1
		if startIndex > strLen then
			return false
		end
	end

	if startIndex < 1 then
		startIndex = 1
	end

	local init = utf8.offset(str, startIndex)
	local value = substring:gsub(luaPatternCharacters, "%%%1")
	local iStart, _ = string.find(str, value, init)
	return iStart ~= nil
end

return includes
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="142">
                <Properties>
                  <string name="Name">indexOf</string>
                  <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
-- excluding the `+` and `*` character, since findOr tests and graphql use them explicitly
local luaPatternCharacters = "([" .. ("$%^()-[].?"):gsub("(.)", "%%%1") .. "])"

-- Implements equivalent functionality to JavaScript's `String.indexOf`,
-- implementing the interface and behaviors defined at:
-- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf
return function(str: string, searchElement: string, fromIndex: number?): number
	local length = #str
	local fromIndex_ = if fromIndex ~= nil then if fromIndex < 1 then 1 else fromIndex :: number else 1

	if #searchElement == 0 then
		return if fromIndex_ > length then length else fromIndex_
	end

	if fromIndex_ > length then
		return -1
	end

	searchElement = searchElement:gsub(luaPatternCharacters, "%%%1")
	local searchElementLength = #searchElement

	for i = fromIndex_, length do
		if string.sub(str, i, i + searchElementLength - 1) == searchElement then
			return i
		end
	end

	return -1
end
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="143">
                <Properties>
                  <string name="Name">lastIndexOf</string>
                  <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local function lastIndexOf(str: string, searchValue: string, fromIndex: number?): number
	local strLength = string.len(str)
	local calculatedFromIndex
	if fromIndex then
		calculatedFromIndex = fromIndex
	else
		calculatedFromIndex = strLength
	end
	if fromIndex and fromIndex < 1 then
		calculatedFromIndex = 1
	end
	if fromIndex and fromIndex > strLength then
		calculatedFromIndex = strLength
	end
	if searchValue == "" then
		-- FIXME: Luau DFA doesn't understand that
		return calculatedFromIndex :: number
	end

	local lastFoundStartIndex, foundStartIndex
	-- Luau FIXME: Luau doesn't look beyond assignment for type, it should infer number? from loop bound
	local foundEndIndex: number? = 0
	repeat
		lastFoundStartIndex = foundStartIndex
		-- Luau FIXME: DFA doesn't understand until clause means foundEndIndex is never nil within loop
		foundStartIndex, foundEndIndex = string.find(str, searchValue, foundEndIndex :: number + 1, true)
	until foundStartIndex == nil or foundStartIndex > calculatedFromIndex

	if lastFoundStartIndex == nil then
		return -1
	end
	-- Luau FIXME: Luau should see the predicate above and known the line below can only be a number
	return lastFoundStartIndex :: number
end

return lastIndexOf
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="144">
                <Properties>
                  <string name="Name">slice</string>
                  <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local function slice(str: string, startIndexStr: string | number, lastIndexStr: (string | number)?): string
	local strLen, invalidBytePosition = utf8.len(str)
	assert(strLen ~= nil, ("string `%s` has an invalid byte at position %s"):format(str, tostring(invalidBytePosition)))
	local startIndex = tonumber(startIndexStr)
	assert(typeof(startIndex) == "number", "startIndexStr should be a number")

	if startIndex + strLen < 0 then
		-- then |start index| is greater than string length
		startIndex = 1
	end

	if startIndex > strLen then
		return ""
	end

	-- if no last index length set, go to str length + 1
	local lastIndex = strLen + 1
	if lastIndexStr ~= nil then
		-- ROBLOX FIXME: add parseInt to encapsulate this logic and use it here
		local NaN = 0 / 0
		lastIndex = tonumber(lastIndexStr) or NaN -- this works because 0 is truthy in Lua
	end
	assert(typeof(lastIndex) == "number", "lastIndexStr should convert to number")

	if lastIndex > strLen then
		lastIndex = strLen + 1
	end

	local startIndexByte = assert(utf8.offset(str, startIndex), "startIndexByte should be a number")

	-- get char length of charset returned at offset
	local lastIndexByte = assert(utf8.offset(str, lastIndex), "lastIndexByte should be a number") - 1

	return string.sub(str, startIndexByte, lastIndexByte)
end

return slice
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="145">
                <Properties>
                  <string name="Name">split</string>
                  <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local String = script.Parent
local findOr = require(String.findOr)
local slice = require(String.slice)

local Packages = String.Parent
local types = require(Packages.ES7Types)
type Array<T> = types.Array<T>
local MAX_SAFE_INTEGER = require(Packages.Number).MAX_SAFE_INTEGER

type Pattern = string | Array<string>

local function split(str: string, _pattern: Pattern?, _limit: number?): Array<string>
	if _pattern == nil then
		return { str }
	end
	if _limit == 0 then
		return {}
	end
	local limit = if _limit == nil or _limit < 0 then MAX_SAFE_INTEGER else _limit
	local pattern = _pattern
	local patternList: Array<string>
	if typeof(pattern) == "string" then
		if pattern == "" then
			local result = {}
			for c in str:gmatch(".") do
				table.insert(result, c)
			end
			return result
		end
		patternList = { pattern }
	else
		patternList = pattern :: Array<string>
	end
	local init = 1
	local result = {}
	local lastMatch
	local strLen, invalidBytePosition = utf8.len(str)
	assert(strLen ~= nil, ("string `%s` has an invalid byte at position %s"):format(str, tostring(invalidBytePosition)))

	repeat
		local match = findOr(str, patternList, init)
		if match ~= nil then
			table.insert(result, slice(str, init, match.index))
			local matchLength = utf8.len(match.match)
			-- Luau FIXME? Luau doesn't understand that str has already been shown to be valid utf8 on line 26 and therefore won't be nil
			init = match.index + matchLength :: number
		else
			table.insert(result, slice(str, init, nil))
		end
		if match ~= nil then
			lastMatch = match
		end
	until match == nil or init > strLen or #result >= limit
	if lastMatch ~= nil then
		local lastMatchLength, invalidBytePosition_ = utf8.len(lastMatch.match)
		assert(
			lastMatchLength ~= nil,
			("string `%s` has an invalid byte at position %s"):format(lastMatch.match, tostring(invalidBytePosition_))
		)
		if lastMatch.index + lastMatchLength == strLen + 1 then
			table.insert(result, "")
		end
	end
	return result
end

return split
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="146">
                <Properties>
                  <string name="Name">startsWith</string>
                  <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local function startsWith(value: string, substring: string, position: number?): boolean
	if string.len(substring) == 0 then
		return true
	end
	-- Luau FIXME: we have to use a tmp variable, as Luau doesn't understand the logic below narrow position to `number`
	local position_
	if position == nil or position < 1 then
		position_ = 1
	else
		position_ = position
	end

	if position_ > string.len(value) then
		return false
	end
	return value:find(substring, position_, true) == position_
end

return startsWith
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="147">
                <Properties>
                  <string name="Name">substr</string>
                  <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
return function(s: string, startIndex: number, numberOfCharacters: number?): string
	if numberOfCharacters and numberOfCharacters <= 0 then
		return ""
	end
	return string.sub(s, startIndex, numberOfCharacters and startIndex + numberOfCharacters - 1 or nil)
end
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="148">
                <Properties>
                  <string name="Name">trim</string>
                  <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local trimStart = require(script.Parent.trimStart)
local trimEnd = require(script.Parent.trimEnd)

return function(source: string): string
	return trimStart(trimEnd(source))
end
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="149">
                <Properties>
                  <string name="Name">trimEnd</string>
                  <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
return function(source: string): string
	return (source:gsub("[%s]+$", ""))
end
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="150">
                <Properties>
                  <string name="Name">trimStart</string>
                  <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
return function(source: string): string
	return (source:gsub("^[%s]+", ""))
end
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="151">
              <Properties>
                <string name="Name">Symbol</string>
                <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
--[[
	A 'Symbol' is an opaque marker type, implemented to behave similarly to JS:
	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol
]]
local Symbol = require(script.Symbol)
export type Symbol = Symbol.Symbol
local GlobalRegistry = require(script["Registry.global"])

local SymbolObject = setmetatable({}, {
	--[[
		Creates a new symbol, using the given name when printed. Symbols are
		opaque, so this will always create a new, unique object
	]]
	__call = function(_, name: string?): Symbol.Symbol
		return Symbol.new(name)
	end,
})

SymbolObject.for_ = GlobalRegistry.getOrInit

return SymbolObject
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="152">
                <Properties>
                  <string name="Name">GlobalRegistry</string>
                  <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local Symbol = require(script.Parent.Symbol)

local GlobalRegistry: { [string]: Symbol.Symbol } = {}

return {
	getOrInit = function(name: string): Symbol.Symbol
		if GlobalRegistry[name] == nil then
			GlobalRegistry[name] = Symbol.new(name)
		end

		return GlobalRegistry[name]
	end,
	-- Used for testing
	__clear = function()
		GlobalRegistry = {}
	end,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="153">
                <Properties>
                  <string name="Name">Registry.global</string>
                  <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local Symbol = require(script.Parent.Symbol)

local GlobalRegistry: { [string]: Symbol.Symbol } = {}

return {
	getOrInit = function(name: string): Symbol.Symbol
		if GlobalRegistry[name] == nil then
			GlobalRegistry[name] = Symbol.new(name)
		end

		return GlobalRegistry[name]
	end,
	-- Used for testing
	__clear = function()
		GlobalRegistry = {}
	end,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="154">
                <Properties>
                  <string name="Name">Symbol</string>
                  <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
--[[
	Symbols have the type 'userdata', but when printed or coerced to a string,
	the symbol will turn into the string given as its name.

	**This implementation provides only the `Symbol()` constructor and the
	global registry via `Symbol.for_`.**

	Other behaviors, including the ability to find all symbol properties on
	objects, are not implemented.
]]
export type Symbol = typeof(newproxy(true)) & { [string]: any }

return {
	new = function(name: string?): Symbol
		local self = newproxy(true) :: any

		local wrappedName = "Symbol()"
		if name then
			wrappedName = ("Symbol(%s)"):format(name)
		end

		getmetatable(self).__tostring = function()
			return wrappedName
		end

		return (self :: any) :: Symbol
	end,
}
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="155">
              <Properties>
                <string name="Name">Timers</string>
                <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local Packages = script.Parent

local Object = require(Packages.Collections).Object

local makeTimerImpl = require(script.makeTimerImpl)
local makeIntervalImpl = require(script.makeIntervalImpl)

export type Timeout = makeTimerImpl.Timeout
export type Interval = makeIntervalImpl.Interval

return Object.assign({}, makeTimerImpl(task.delay), makeIntervalImpl(task.delay))
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="156">
                <Properties>
                  <string name="Name">makeIntervalImpl</string>
                  <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local Status = newproxy(false)

type TaskStatus = number
export type Interval = { [typeof(Status)]: TaskStatus }

local SCHEDULED = 1
local CANCELLED = 3

return function(delayImpl)
	local function setInterval(callback, intervalTime: number, ...): Interval
		local args = { ... }
		local task = {
			[Status] = SCHEDULED,
		}

		-- delayTime is an optional parameter
		if intervalTime == nil then
			intervalTime = 0
		end

		-- To mimic the JS interface, we're expecting delayTime to be in ms
		local intervalTimeMs = intervalTime / 1000
		local delay_
		delay_ = function()
			delayImpl(intervalTimeMs, function()
				if task[Status] == SCHEDULED then
					callback(unpack(args))
					delay_()
				end
			end)
		end

		delay_()

		return task
	end

	local function clearInterval(task: Interval)
		if task == nil then
			return
		end

		if task[Status] == SCHEDULED then
			task[Status] = CANCELLED
		end
	end

	return {
		setInterval = setInterval,
		clearInterval = clearInterval,
	}
end
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="157">
                <Properties>
                  <string name="Name">makeTimerImpl</string>
                  <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local Status = newproxy(false)

type TaskStatus = number
export type Timeout = { [typeof(Status)]: TaskStatus }

local SCHEDULED = 1
local DONE = 2
local CANCELLED = 3

return function(delayImpl)
	local function setTimeout(callback, delayTime: number?, ...): Timeout
		local args = { ... }
		local task = {
			[Status] = SCHEDULED,
		}

		-- delayTime is an optional parameter
		if delayTime == nil then
			delayTime = 0
		end

		-- To mimic the JS interface, we're expecting delayTime to be in ms
		local delayTimeMs = delayTime :: number / 1000
		delayImpl(delayTimeMs, function()
			if task[Status] == SCHEDULED then
				callback(unpack(args))
				task[Status] = DONE
			end
		end)

		return task
	end

	local function clearTimeout(task: Timeout)
		if task == nil then
			return
		end
		if task[Status] == SCHEDULED then
			task[Status] = CANCELLED
		end
	end

	return {
		setTimeout = setTimeout,
		clearTimeout = clearTimeout,
	}
end
]]></string>
                </Properties>
              </Item>
            </Item>
          </Item>
          <Item class="Folder" referent="158">
            <Properties>
              <string name="Name">maid</string>
            </Properties>
            <Item class="ModuleScript" referent="159">
              <Properties>
                <string name="Name">Maid</string>
                <string name="Source">---	Manages the cleaning of events and other things.
-- Useful for encapsulating state and make deconstructors easy
-- @classmod Maid
-- @see Signal

local Maid = {}
Maid.ClassName = "Maid"

--- Returns a new Maid object
-- @constructor Maid.new()
-- @treturn Maid
function Maid.new()
	local self = {}

	self._tasks = {}

	return setmetatable(self, Maid)
end

--- Returns Maid[key] if not part of Maid metatable
-- @return Maid[key] value
function Maid:__index(index)
	if Maid[index] then
		return Maid[index]
	else
		return self._tasks[index]
	end
end

--- Add a task to clean up
-- @usage
-- Maid[key] = (function)         Adds a task to perform
-- Maid[key] = (event connection) Manages an event connection
-- Maid[key] = (Maid)             Maids can act as an event connection, allowing a Maid to have other maids to clean up.
-- Maid[key] = (Object)           Maids can cleanup objects with a `Destroy` method
-- Maid[key] = nil                Removes a named task. If the task is an event, it is disconnected. If it is an object,
--                                it is destroyed.
function Maid:__newindex(index, newTask)
	if Maid[index] ~= nil then
		error(("'%s' is reserved"):format(tostring(index)), 2)
	end

	local tasks = self._tasks
	local oldTask = tasks[index]
	tasks[index] = newTask

	if oldTask then
		if type(oldTask) == "function" then
			oldTask()
		elseif typeof(oldTask) == "RBXScriptConnection" then
			oldTask:Disconnect()
		elseif oldTask.Destroy then
			oldTask:Destroy()
		end
	end
end

--- Same as indexing, but uses an incremented number as a key.
-- @param task An item to clean
-- @treturn number taskId
function Maid:GiveTask(task)
	assert(task, "Task cannot be false or nil")

	local taskId = #self._tasks+1
	self[taskId] = task

	if type(task) == "table" and (not task.Destroy) then
		warn("[Maid.GiveTask] - Gave table task without .Destroy\n\n" .. debug.traceback())
	end

	return taskId
end

function Maid:GivePromise(promise)
	if not promise:IsPending() then
		return promise
	end

	local newPromise = promise.resolved(promise)
	local id = self:GiveTask(newPromise)

	-- Ensure GC
	newPromise:Finally(function()
		self[id] = nil
	end)

	return newPromise
end

--- Cleans up all tasks.
-- @alias Destroy
function Maid:DoCleaning()
	local tasks = self._tasks

	-- Disconnect all events first as we know this is safe
	for index, task in pairs(tasks) do
		if typeof(task) == "RBXScriptConnection" then
			tasks[index] = nil
			task:Disconnect()
		end
	end

	-- Clear out tasks table completely, even if clean up tasks add more tasks to the maid
	local index, task = next(tasks)
	while task ~= nil do
		tasks[index] = nil
		if type(task) == "function" then
			task()
		elseif typeof(task) == "RBXScriptConnection" then
			task:Disconnect()
		elseif task.Destroy then
			task:Destroy()
		end
		index, task = next(tasks)
	end
end

--- Alias for DoCleaning()
-- @function Destroy
Maid.Destroy = Maid.DoCleaning

return Maid</string>
              </Properties>
            </Item>
          </Item>
          <Item class="Folder" referent="160">
            <Properties>
              <string name="Name">message-templates</string>
            </Properties>
            <Item class="ModuleScript" referent="161">
              <Properties>
                <string name="Name">out</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.2
local TS = _G[script]
local exports = {}
exports.MessageTemplateParser = TS.import(script, script, "MessageTemplateParser").MessageTemplateParser
exports.MessageTemplateRenderer = TS.import(script, script, "MessageTemplateRenderer").MessageTemplateRenderer
exports.PlainTextMessageTemplateRenderer = TS.import(script, script, "PlainTextMessageTemplateRenderer").PlainTextMessageTemplateRenderer
exports.TemplateTokenKind = TS.import(script, script, "MessageTemplateToken").TemplateTokenKind
return exports
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="162">
                <Properties>
                  <string name="Name">MessageTemplate</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.2
local TS = _G[script]
local TemplateTokenKind = TS.import(script, script.Parent, "MessageTemplateToken").TemplateTokenKind
local HttpService = game:GetService("HttpService")
local MessageTemplate
do
	MessageTemplate = setmetatable({}, {
		__tostring = function()
			return "MessageTemplate"
		end,
	})
	MessageTemplate.__index = MessageTemplate
	function MessageTemplate.new(...)
		local self = setmetatable({}, MessageTemplate)
		return self:constructor(...) or self
	end
	function MessageTemplate:constructor(template, tokens)
		self.template = template
		self.tokens = tokens
		local _arg0 = function(f)
			return f.kind == TemplateTokenKind.Property
		end
		-- ▼ ReadonlyArray.filter ▼
		local _newValue = {}
		local _length = 0
		for _k, _v in ipairs(tokens) do
			if _arg0(_v, _k - 1, tokens) == true then
				_length += 1
				_newValue[_length] = _v
			end
		end
		-- ▲ ReadonlyArray.filter ▲
		self.properties = _newValue
	end
	function MessageTemplate:GetTokens()
		return self.tokens
	end
	function MessageTemplate:GetProperties()
		return self.properties
	end
	function MessageTemplate:GetText()
		return self.template
	end
end
return {
	MessageTemplate = MessageTemplate,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="163">
                <Properties>
                  <string name="Name">MessageTemplateParser</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.2
local TS = _G[script]
local _MessageTemplateToken = TS.import(script, script.Parent, "MessageTemplateToken")
local DestructureMode = _MessageTemplateToken.DestructureMode
local TemplateTokenKind = _MessageTemplateToken.TemplateTokenKind
local MessageTemplateParser = {}
do
	local _container = MessageTemplateParser
	local tokenize
	local function GetTokens(message)
		local tokens = {}
		for _result in tokenize(message).next do
			if _result.done then
				break
			end
			local token = _result.value
			-- ▼ Array.push ▼
			tokens[#tokens + 1] = token
			-- ▲ Array.push ▲
		end
		return tokens
	end
	_container.GetTokens = GetTokens
	local parseText, parseProperty
	function tokenize(messageTemplate)
		return TS.generator(function()
			if #messageTemplate == 0 then
				local _arg0 = {
					kind = TemplateTokenKind.Text,
					text = "",
				}
				coroutine.yield(_arg0)
				return nil
			end
			local nextIndex = 0
			while true do
				local startIndex = nextIndex
				local textToken
				local _binding = parseText(nextIndex, messageTemplate)
				nextIndex = _binding[1]
				textToken = _binding[2]
				if nextIndex > startIndex then
					coroutine.yield(textToken)
				end
				if nextIndex >= #messageTemplate then
					break
				end
				startIndex = nextIndex
				local propertyToken
				local _binding_1 = parseProperty(nextIndex, messageTemplate)
				nextIndex = _binding_1[1]
				propertyToken = _binding_1[2]
				if startIndex < nextIndex then
					coroutine.yield(propertyToken)
				end
				if nextIndex > #messageTemplate then
					break
				end
			end
		end)
	end
	function parseText(startAt, messageTemplate)
		local results = {}
		repeat
			do
				local char = string.sub(messageTemplate, startAt, startAt)
				if char == "{" then
					local _arg0 = startAt + 1
					local _arg1 = startAt + 1
					local nextChar = string.sub(messageTemplate, _arg0, _arg1)
					if nextChar == "{" then
						-- ▼ Array.push ▼
						results[#results + 1] = char
						-- ▲ Array.push ▲
						startAt += 1
					else
						break
					end
				else
					-- ▼ Array.push ▼
					results[#results + 1] = char
					-- ▲ Array.push ▲
					local _arg0 = startAt + 1
					local _arg1 = startAt + 1
					local nextChar = string.sub(messageTemplate, _arg0, _arg1)
					if char == "}" then
						if nextChar == "}" then
							startAt += 1
						end
					end
				end
				startAt += 1
			end
		until not (startAt <= #messageTemplate)
		local _ptr = {
			kind = TemplateTokenKind.Text,
		}
		local _left = "text"
		-- ▼ ReadonlyArray.join ▼
		local _arg0 = ""
		if _arg0 == nil then
			_arg0 = ", "
		end
		-- ▲ ReadonlyArray.join ▲
		_ptr[_left] = table.concat(results, _arg0)
		return { startAt, _ptr }
	end
	local function readWhile(startAt, text, condition)
		local result = ""
		while startAt < #text and condition(string.sub(text, startAt, startAt)) do
			local char = string.sub(text, startAt, startAt)
			result ..= char
			startAt += 1
		end
		return { startAt, result }
	end
	local function isValidNameCharacter(char)
		return (string.match(char, "[%w_]")) ~= nil
	end
	local function isValidDestructureHint(char)
		return (string.match(char, "[@$]")) ~= nil
	end
	function parseProperty(index, messageTemplate)
		index += 1
		local propertyName
		local _binding = readWhile(index, messageTemplate, function(c)
			return isValidDestructureHint(c) or (isValidNameCharacter(c) and c ~= "}")
		end)
		index = _binding[1]
		propertyName = _binding[2]
		if index > #messageTemplate then
			local _arg0 = {
				kind = TemplateTokenKind.Text,
				text = propertyName,
			}
			return { index, _arg0 }
		end
		local destructureMode = DestructureMode.Default
		local char = string.sub(propertyName, 1, 1)
		if isValidDestructureHint(char) then
			repeat
				if char == ("@") then
					destructureMode = DestructureMode.Destructure
					break
				end
				if char == ("$") then
					destructureMode = DestructureMode.ToString
					break
				end
				destructureMode = DestructureMode.Default
			until true
			propertyName = string.sub(propertyName, 2)
		end
		local _exp = index + 1
		local _arg0 = {
			kind = TemplateTokenKind.Property,
			propertyName = propertyName,
			destructureMode = destructureMode,
		}
		return { _exp, _arg0 }
	end
end
return {
	MessageTemplateParser = MessageTemplateParser,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="164">
                <Properties>
                  <string name="Name">MessageTemplateRenderer</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.2
local TS = _G[script]
local TemplateTokenKind = TS.import(script, script.Parent, "MessageTemplateToken").TemplateTokenKind
local MessageTemplateRenderer
do
	MessageTemplateRenderer = {}
	function MessageTemplateRenderer:constructor(tokens)
		self.tokens = tokens
	end
	function MessageTemplateRenderer:Render(properties)
		local result = ""
		for _, token in ipairs(self.tokens) do
			local _exp = token.kind
			repeat
				local _fallthrough = false
				if _exp == (TemplateTokenKind.Property) then
					result ..= self:RenderPropertyToken(token, properties[token.propertyName])
					break
				end
				if _exp == (TemplateTokenKind.Text) then
					result ..= self:RenderTextToken(token)
				end
			until true
		end
		return result
	end
end
return {
	MessageTemplateRenderer = MessageTemplateRenderer,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="165">
                <Properties>
                  <string name="Name">MessageTemplateToken</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.2
local TemplateTokenKind
do
	local _inverse = {}
	TemplateTokenKind = setmetatable({}, {
		__index = _inverse,
	})
	TemplateTokenKind.Text = 0
	_inverse[0] = "Text"
	TemplateTokenKind.Property = 1
	_inverse[1] = "Property"
end
local DestructureMode
do
	local _inverse = {}
	DestructureMode = setmetatable({}, {
		__index = _inverse,
	})
	DestructureMode.Default = 0
	_inverse[0] = "Default"
	DestructureMode.ToString = 1
	_inverse[1] = "ToString"
	DestructureMode.Destructure = 2
	_inverse[2] = "Destructure"
end
local function createNode(prop)
	return prop
end
return {
	createNode = createNode,
	TemplateTokenKind = TemplateTokenKind,
	DestructureMode = DestructureMode,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="166">
                <Properties>
                  <string name="Name">PlainTextMessageTemplateRenderer</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.2
local TS = _G[script]
local RbxSerializer = TS.import(script, script.Parent, "RbxSerializer").RbxSerializer
local MessageTemplateRenderer = TS.import(script, script.Parent, "MessageTemplateRenderer").MessageTemplateRenderer
local HttpService = game:GetService("HttpService")
local PlainTextMessageTemplateRenderer
do
	local super = MessageTemplateRenderer
	PlainTextMessageTemplateRenderer = setmetatable({}, {
		__tostring = function()
			return "PlainTextMessageTemplateRenderer"
		end,
		__index = super,
	})
	PlainTextMessageTemplateRenderer.__index = PlainTextMessageTemplateRenderer
	function PlainTextMessageTemplateRenderer.new(...)
		local self = setmetatable({}, PlainTextMessageTemplateRenderer)
		return self:constructor(...) or self
	end
	function PlainTextMessageTemplateRenderer:constructor(...)
		super.constructor(self, ...)
	end
	function PlainTextMessageTemplateRenderer:RenderPropertyToken(propertyToken, value)
		local serialized = RbxSerializer.Serialize(value, propertyToken.destructureMode)
		if type(serialized) == "table" then
			return HttpService:JSONEncode(serialized)
		else
			return tostring(serialized)
		end
	end
	function PlainTextMessageTemplateRenderer:RenderTextToken(textToken)
		return textToken.text
	end
end
return {
	PlainTextMessageTemplateRenderer = PlainTextMessageTemplateRenderer,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="167">
                <Properties>
                  <string name="Name">RbxSerializer</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.2
local TS = _G[script]
local DestructureMode = TS.import(script, script.Parent, "MessageTemplateToken").DestructureMode
--[[
	*
	* Handles serialization of Roblox objects for use in event data
]]
local RbxSerializer = {}
do
	local _container = RbxSerializer
	local HttpService = game:GetService("HttpService")
	local function SerializeVector3(value)
		return {
			X = value.X,
			Y = value.Y,
			Z = value.Z,
		}
	end
	_container.SerializeVector3 = SerializeVector3
	local function SerializeVector2(value)
		return {
			X = value.X,
			Y = value.Y,
		}
	end
	_container.SerializeVector2 = SerializeVector2
	local function SerializeNumberRange(numberRange)
		return {
			Min = numberRange.Min,
			Max = numberRange.Max,
		}
	end
	_container.SerializeNumberRange = SerializeNumberRange
	local function SerializeDateTime(dateTime)
		return dateTime:ToIsoDate()
	end
	_container.SerializeDateTime = SerializeDateTime
	local function SerializeEnumItem(enumItem)
		return tostring(enumItem)
	end
	_container.SerializeEnumItem = SerializeEnumItem
	local function SerializeUDim(value)
		return {
			Offset = value.Offset,
			Scale = value.Scale,
		}
	end
	_container.SerializeUDim = SerializeUDim
	local function SerializeUDim2(value)
		return {
			X = SerializeUDim(value.X),
			Y = SerializeUDim(value.Y),
		}
	end
	_container.SerializeUDim2 = SerializeUDim2
	local function SerializeColor3(color3)
		return {
			R = color3.R,
			G = color3.G,
			B = color3.B,
		}
	end
	_container.SerializeColor3 = SerializeColor3
	local function SerializeBrickColor(color)
		return SerializeColor3(color.Color)
	end
	_container.SerializeBrickColor = SerializeBrickColor
	local function SerializeRect(value)
		return {
			RectMin = SerializeVector2(value.Min),
			RectMax = SerializeVector2(value.Max),
			RectHeight = value.Height,
			RectWidth = value.Width,
		}
	end
	_container.SerializeRect = SerializeRect
	local function SerializePathWaypoint(value)
		return {
			WaypointAction = SerializeEnumItem(value.Action),
			WaypointPosition = SerializeVector3(value.Position),
		}
	end
	_container.SerializePathWaypoint = SerializePathWaypoint
	local function SerializeColorSequenceKeypoint(value)
		return {
			ColorTime = value.Time,
			ColorValue = SerializeColor3(value.Value),
		}
	end
	_container.SerializeColorSequenceKeypoint = SerializeColorSequenceKeypoint
	local function SerializeColorSequence(value)
		local _ptr = {}
		local _left = "ColorKeypoints"
		local _keypoints = value.Keypoints
		local _arg0 = function(v)
			return SerializeColorSequenceKeypoint(v)
		end
		-- ▼ ReadonlyArray.map ▼
		local _newValue = table.create(#_keypoints)
		for _k, _v in ipairs(_keypoints) do
			_newValue[_k] = _arg0(_v, _k - 1, _keypoints)
		end
		-- ▲ ReadonlyArray.map ▲
		_ptr[_left] = _newValue
		return _ptr
	end
	_container.SerializeColorSequence = SerializeColorSequence
	local function SerializeNumberSequenceKeypoint(value)
		return {
			NumberTime = value.Time,
			NumberValue = value.Value,
		}
	end
	_container.SerializeNumberSequenceKeypoint = SerializeNumberSequenceKeypoint
	local function SerializeNumberSequence(value)
		local _ptr = {}
		local _left = "NumberKeypoints"
		local _keypoints = value.Keypoints
		local _arg0 = function(v)
			return SerializeNumberSequenceKeypoint(v)
		end
		-- ▼ ReadonlyArray.map ▼
		local _newValue = table.create(#_keypoints)
		for _k, _v in ipairs(_keypoints) do
			_newValue[_k] = _arg0(_v, _k - 1, _keypoints)
		end
		-- ▲ ReadonlyArray.map ▲
		_ptr[_left] = _newValue
		return _ptr
	end
	_container.SerializeNumberSequence = SerializeNumberSequence
	local function Serialize(value, destructureMode)
		if destructureMode == nil then
			destructureMode = DestructureMode.Default
		end
		if destructureMode == DestructureMode.ToString then
			return tostring(value)
		end
		if typeof(value) == "Instance" then
			return value:GetFullName()
		elseif type(value) == "vector" or typeof(value) == "Vector3int16" then
			return SerializeVector3(value)
		elseif typeof(value) == "Vector2" or typeof(value) == "Vector2int16" then
			return SerializeVector2(value)
		elseif typeof(value) == "DateTime" then
			return SerializeDateTime(value)
		elseif typeof(value) == "EnumItem" then
			return SerializeEnumItem(value)
		elseif typeof(value) == "NumberRange" then
			return SerializeNumberRange(value)
		elseif typeof(value) == "UDim" then
			return SerializeUDim(value)
		elseif typeof(value) == "UDim2" then
			return SerializeUDim2(value)
		elseif typeof(value) == "Color3" then
			return SerializeColor3(value)
		elseif typeof(value) == "BrickColor" then
			return SerializeBrickColor(value)
		elseif typeof(value) == "Rect" then
			return SerializeRect(value)
		elseif typeof(value) == "PathWaypoint" then
			return SerializePathWaypoint(value)
		elseif typeof(value) == "ColorSequenceKeypoint" then
			return SerializeColorSequenceKeypoint(value)
		elseif typeof(value) == "ColorSequence" then
			return SerializeColorSequence(value)
		elseif typeof(value) == "NumberSequenceKeypoint" then
			return SerializeNumberSequenceKeypoint(value)
		elseif typeof(value) == "NumberSequence" then
			return SerializeNumberSequence(value)
		elseif type(value) == "number" or type(value) == "string" or type(value) == "boolean" then
			return value
		elseif type(value) == "table" then
			return HttpService:JSONEncode(value)
		elseif type(value) == "nil" then
			return nil
		else
			error("Destructuring of '" .. typeof(value) .. "' not supported by Serializer")
		end
	end
	_container.Serialize = Serialize
end
return {
	RbxSerializer = RbxSerializer,
}
]]></string>
                </Properties>
              </Item>
            </Item>
          </Item>
          <Item class="Folder" referent="168">
            <Properties>
              <string name="Name">net</string>
            </Properties>
            <Item class="ModuleScript" referent="169">
              <Properties>
                <string name="Name">out</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.3.3
local TS = _G[script]
local NetServerContext = TS.import(script, script, "server")
local NetClientContext = TS.import(script, script, "client")
local NetDefinitions = TS.import(script, script, "definitions").default
local NetMiddleware = TS.import(script, script, "middleware").NetMiddleware
--[[
	*
	* Networking Library for Roblox
	* @version 3.0
]]
local Net = {}
do
	local _container = Net
	--[[
		*
		* Legacy client API for Net
		* @deprecated
	]]
	local Client = NetClientContext
	_container.Client = Client
	--[[
		*
		* Legacy server API for Net
		* @deprecated
	]]
	local Server = NetServerContext
	_container.Server = Server
	--[[
		*
		* The definitions API for Net
	]]
	local Definitions = NetDefinitions
	_container.Definitions = Definitions
	--[[
		*
		* Utility types for Net
	]]
	local DIST = "TS"
	_container.DIST = DIST
	--[[
		*
		* The version of RbxNet
	]]
	local VERSION = "3.0.7"
	_container.VERSION = VERSION
	--[[
		*
		* Built-in middlewares
	]]
	local Middleware = NetMiddleware
	_container.Middleware = Middleware
	--[[
		*
		* Middleware function type for Net
	]]
	--[[
		*
		* Short-hand for `Net.Definitions.Create`
		* @see {@link Definitions.Create}
	]]
	local function CreateDefinitions(declarations, configuration)
		return Definitions.Create(declarations, configuration)
	end
	_container.CreateDefinitions = CreateDefinitions
end
local _ = nil
local _1 = nil
return Net
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="170">
                <Properties>
                  <string name="Name">client</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.3.3
local TS = _G[script]
local AsyncFunction = TS.import(script, script, "ClientAsyncFunction").default
local Event = TS.import(script, script, "ClientEvent").default
local Function = TS.import(script, script, "ClientFunction").default
return {
	Event = Event,
	AsyncFunction = AsyncFunction,
	Function = Function,
}
]]></string>
                </Properties>
                <Item class="ModuleScript" referent="171">
                  <Properties>
                    <string name="Name">ClientAsyncFunction</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.3.3
local TS = _G[script]
local _internal = TS.import(script, script.Parent.Parent, "internal")
local getRemoteOrThrow = _internal.getRemoteOrThrow
local IS_SERVER = _internal.IS_SERVER
local waitForRemote = _internal.waitForRemote
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local CollectionService = game:GetService("CollectionService")
--[[
	*
	* An event that behaves like a function
	* @rbxts client
]]
local ClientAsyncFunction
do
	ClientAsyncFunction = setmetatable({}, {
		__tostring = function()
			return "ClientAsyncFunction"
		end,
	})
	ClientAsyncFunction.__index = ClientAsyncFunction
	function ClientAsyncFunction.new(...)
		local self = setmetatable({}, ClientAsyncFunction)
		return self:constructor(...) or self
	end
	function ClientAsyncFunction:constructor(name)
		self.name = name
		self.timeout = 60
		self.listeners = {}
		self.instance = getRemoteOrThrow("AsyncRemoteFunction", name)
		local _arg0 = not IS_SERVER
		assert(_arg0, "Cannot create a Net.ClientAsyncFunction on the Server!")
	end
	function ClientAsyncFunction:Wait(name)
		return TS.Promise.defer(TS.async(function(resolve)
			TS.await(waitForRemote("AsyncRemoteFunction", name, 60))
			resolve(ClientAsyncFunction.new(name))
		end))
	end
	function ClientAsyncFunction:SetCallTimeout(timeout)
		local _arg0 = timeout > 0
		assert(_arg0, "timeout must be a positive number")
		self.timeout = timeout
	end
	function ClientAsyncFunction:GetCallTimeout()
		return self.timeout
	end
	function ClientAsyncFunction:SetCallback(callback)
		if self.connector then
			self.connector:Disconnect()
			self.connector = nil
		end
		self.connector = self.instance.OnClientEvent:Connect(TS.async(function(...)
			local args = { ... }
			local _binding = args
			local eventId = _binding[1]
			local data = _binding[2]
			if type(eventId) == "string" and type(data) == "table" then
				local result = callback(unpack(data))
				if TS.Promise.is(result) then
					local _arg0 = function(promiseResult)
						self.instance:FireServer(eventId, promiseResult)
					end
					result:andThen(_arg0):catch(function(err)
						warn("[rbx-net] Failed to send response to server: " .. err)
					end)
				else
					self.instance:FireServer(eventId, result)
				end
			else
				warn("Recieved message without eventId")
			end
		end))
	end
	ClientAsyncFunction.CallServerAsync = TS.async(function(self, ...)
		local args = { ... }
		if CollectionService:HasTag(self.instance, "NetDefaultListener") then
			error("Attempted to call AsyncFunction '" .. (self.name .. "' - which has no user defined callback"))
		end
		local id = HttpService:GenerateGUID(false)
		local _fn = self.instance
		local _object = {}
		for _k, _v in pairs(args) do
			_object[_k] = _v
		end
		_fn:FireServer(id, _object)
		return TS.Promise.new(function(resolve, reject)
			local startTime = tick()
			local connection
			connection = self.instance.OnClientEvent:Connect(function(...)
				local recvArgs = { ... }
				local _binding = recvArgs
				local eventId = _binding[1]
				local data = _binding[2]
				if type(eventId) == "string" then
					if eventId == id then
						connection:Disconnect()
						resolve(data)
					end
				end
			end)
			local _listeners = self.listeners
			local _arg1 = {
				connection = connection,
				timeout = self.timeout,
			}
			_listeners[id] = _arg1
			local warned = false
			local elapsedTime = 0
			repeat
				do
					elapsedTime += (RunService.Heartbeat:Wait())
					if elapsedTime >= 20 and not warned then
						warned = true
						warn("[rbx-net] CallServerAsync(...) - still waiting for result from remote '" .. (self.name .. "'"))
						print(debug.traceback("", 3))
					end
				end
			until not (connection.Connected and tick() < startTime + self.timeout)
			self.listeners[id] = nil
			if tick() >= startTime and connection.Connected then
				connection:Disconnect()
				reject("Request to server timed out after " .. tostring(self.timeout) .. " seconds")
			end
		end)
	end)
end
return {
	default = ClientAsyncFunction,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="172">
                  <Properties>
                    <string name="Name">ClientEvent</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.3.3
local TS = _G[script]
local _internal = TS.import(script, script.Parent.Parent, "internal")
local getRemoteOrThrow = _internal.getRemoteOrThrow
local IS_SERVER = _internal.IS_SERVER
local waitForRemote = _internal.waitForRemote
--[[
	*
	* Interface for client listening events
]]
--[[
	*
	* Interface for client sender events
]]
local ClientEvent
do
	ClientEvent = setmetatable({}, {
		__tostring = function()
			return "ClientEvent"
		end,
	})
	ClientEvent.__index = ClientEvent
	function ClientEvent.new(...)
		local self = setmetatable({}, ClientEvent)
		return self:constructor(...) or self
	end
	function ClientEvent:constructor(name)
		self.instance = getRemoteOrThrow("RemoteEvent", name)
		local _arg0 = not IS_SERVER
		assert(_arg0, "Cannot fetch NetClientEvent on the server!")
	end
	function ClientEvent:GetInstance()
		return self.instance
	end
	function ClientEvent:Wait(name)
		return TS.Promise.defer(TS.async(function(resolve)
			TS.await(waitForRemote("RemoteEvent", name, 60))
			resolve(ClientEvent.new(name))
		end))
	end
	function ClientEvent:SendToServer(...)
		local args = { ... }
		self.instance:FireServer(unpack(args))
	end
	function ClientEvent:Connect(callback)
		return self.instance.OnClientEvent:Connect(callback)
	end
end
local default = ClientEvent
return {
	default = default,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="173">
                  <Properties>
                    <string name="Name">ClientFunction</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.3.3
local TS = _G[script]
local _internal = TS.import(script, script.Parent.Parent, "internal")
local getRemoteOrThrow = _internal.getRemoteOrThrow
local IS_SERVER = _internal.IS_SERVER
local waitForRemote = _internal.waitForRemote
local CollectionService = game:GetService("CollectionService")
local ClientFunction
do
	ClientFunction = setmetatable({}, {
		__tostring = function()
			return "ClientFunction"
		end,
	})
	ClientFunction.__index = ClientFunction
	function ClientFunction.new(...)
		local self = setmetatable({}, ClientFunction)
		return self:constructor(...) or self
	end
	function ClientFunction:constructor(name)
		self.name = name
		self.instance = getRemoteOrThrow("RemoteFunction", name)
		local _arg0 = not IS_SERVER
		assert(_arg0, "Cannot create a Net.ClientFunction on the Server!")
	end
	function ClientFunction:Wait(name)
		return TS.Promise.defer(TS.async(function(resolve)
			TS.await(waitForRemote("RemoteFunction", name, 60))
			resolve(ClientFunction.new(name))
		end))
	end
	function ClientFunction:CallServer(...)
		local args = { ... }
		if CollectionService:HasTag(self.instance, "NetDefaultListener") then
			error("Attempted to call Function '" .. (self.name .. "' - which has no user defined callback"))
		end
		return self.instance:InvokeServer(unpack(args))
	end
	ClientFunction.CallServerAsync = TS.async(function(self, ...)
		local args = { ... }
		return TS.Promise.defer(function(resolve)
			local result = self.instance:InvokeServer(unpack(args))
			resolve(result)
		end)
	end)
end
return {
	default = ClientFunction,
}
]]></string>
                  </Properties>
                </Item>
              </Item>
              <Item class="ModuleScript" referent="174">
                <Properties>
                  <string name="Name">definitions</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.3.3
local TS = _G[script]
-- eslint-disable @typescript-eslint/no-explicit-any
local DeclarationTypeCheck = TS.import(script, script, "Types").DeclarationTypeCheck
local ServerDefinitionBuilder = TS.import(script, script, "ServerDefinitionBuilder").ServerDefinitionBuilder
local ClientDefinitionBuilder = TS.import(script, script, "ClientDefinitionBuilder").ClientDefinitionBuilder
local NamespaceBuilder = TS.import(script, script, "NamespaceBuilder").NamespaceBuilder
local NetDefinitions = {}
do
	local _container = NetDefinitions
	--[[
		*
		* Validates the specified declarations to ensure they're valid before usage
		* @param declarations The declarations
	]]
	local function validateDeclarations(declarations)
		for _, declaration in pairs(declarations) do
			local _arg0 = DeclarationTypeCheck.check(declaration.Type)
			local _errorMessage = DeclarationTypeCheck.errorMessage
			assert(_arg0, _errorMessage)
		end
	end
	--[[
		*
		* Creates definitions for Remote instances that can be used on both the client and server.
		* @description https://docs.vorlias.com/rbx-net/docs/3.0/definitions#definitions-oh-my
		* @param declarations
	]]
	local function Create(declarations, configuration)
		if configuration == nil then
			configuration = {}
		end
		validateDeclarations(declarations)
		local _arg0 = {
			Server = ServerDefinitionBuilder.new(declarations, configuration),
			Client = ClientDefinitionBuilder.new(declarations, configuration),
		}
		return _arg0
	end
	_container.Create = Create
	--[[
		*
		* Defines a namespace of remote definitions, which can be retrieved via `GetNamespace(namespaceId)`
		*
		* E.g.
		* ```ts
		* const Remotes = Net.Definitions.Create({
		* 		ExampleGroup: Net.Definitions.Namespace({
		* 			ExampleGroupRemote: Net.Definitions.ServerToClientEvent<[message: string]>(),
		* 		}),
		* });
		* const ExampleGroupRemote = Remotes.Server.GetNamespace("ExampleGroup").Create("ExampleGroupRemote");
		* ```
		*
		* This is useful for categorizing remotes by feature.
	]]
	local function Namespace(declarations, configuration)
		return {
			Type = "Namespace",
			Definitions = NamespaceBuilder.new(declarations, configuration),
		}
	end
	_container.Namespace = Namespace
	--[[
		*
		* Defines a function in which strictly the client can call the server asynchronously
		*
		* `Client` [`Calls`] -> `Server` [`Recieves Call`]
		* ... (asynchronously) ...
		* `Server` [`Responds to Call`] -> `Client` [`Recieves Response`]
	]]
	local function ServerAsyncFunction(mw)
		return {
			Type = "AsyncFunction",
			ServerMiddleware = mw,
		}
	end
	_container.ServerAsyncFunction = ServerAsyncFunction
	--[[
		*
		* @version 3.0
		*
		* **_Note_: This uses {@link MessagingService}, and thus is subject to those quotas/limits.**
		*
		* **_Note_: Unlike other definitions in Net, this is only available on the server.**
		*
		* Defines an event in which allows broadcasting messages between servers in the experience.
		*
		* `Source Server` [`Broadcasts`] -> `Other Servers` [`Recieves Broadcast`]
		*
		* or at a target {@link DataModel.JobId JobId}
		*
		* `Source Server [`Broadcasts`] -> `Target Server` [`Recieves Broadcast`]
		*
	]]
	local function ExperienceBroadcastEvent()
		return {
			Type = "Messaging",
		}
	end
	_container.ExperienceBroadcastEvent = ExperienceBroadcastEvent
	--[[
		*
		* @version 3.0
		*
		* **_Note_: This uses {@link MessagingService}, and thus is subject to those quotas/limits.**
		*
		* Defines an event that allows a server to broadcast to all or specified _clients_ in the experience.
		*
		* `Source Server` [`Broadcasts`] -> `Other Servers` [`Recieves Broadcast`] -> `Client` [`Recieves Forwarded Broadcast`]
		*
		* @hidden Experimental API
		* @deprecated Not yet official API, could be changed or removed.
		* @internal
	]]
	local function EXPERIMENTAL_ExperienceReplicatedEvent()
		return {
			Type = "ExperienceEvent",
		}
	end
	_container.EXPERIMENTAL_ExperienceReplicatedEvent = EXPERIMENTAL_ExperienceReplicatedEvent
	--[[
		*
		* Defines a function in which strictly the server can call the client asynchronously
		*
		* `Server` [`Calls`] -> `Client` [`Recieves Call`]
		* ... (asynchronously) ...
		* `Client` [`Responds to Call`] -> `Server` [`Recieves Response`]
	]]
	local function ClientAsyncFunction()
		return {
			Type = "AsyncFunction",
		}
	end
	_container.ClientAsyncFunction = ClientAsyncFunction
	--[[
		*
		* Defines a regular function in which strictly the client can call the server synchronously
		*
		* (Synchronous) `Client` [`Calls`, `Recieves Response`] <- (yields for response) -> `Server` [`Recieves Call`, `Responds`]
	]]
	local function ServerFunction(mw)
		return {
			Type = "Function",
			ServerMiddleware = mw,
		}
	end
	_container.ServerFunction = ServerFunction
	--[[
		*
		* Defines an event in which strictly the server fires an event that is recieved by clients
		*
		* `Server` [`Sends`] => `Client(s)` [`Recieves`]
		*
		* On the client, this will give an event that can use `Connect`.
		*
		* On the server, this will give an event that can use `SendToPlayer`, `SendToAllPlayers`, `SendToAllPlayersExcept`
		*
	]]
	local function ServerToClientEvent()
		return {
			ServerMiddleware = {},
			Type = "Event",
		}
	end
	_container.ServerToClientEvent = ServerToClientEvent
	--[[
		*
		* Defines an event in which strictly clients fire an event that's recieved by the server
		*
		* `Client(s)` [`Sends`] => `Server` [`Recieves`]
		*
		* On the client, this will give an event that can use `SendToServer`.
		*
		* On the server, this will give an event that can use `Connect`.
		*
		* @param mw The middleware of this event.
	]]
	local function ClientToServerEvent(mw)
		return {
			Type = "Event",
			ServerMiddleware = mw,
		}
	end
	_container.ClientToServerEvent = ClientToServerEvent
	--[[
		*
		* Defines a remote event that can be fired both from the client and server
		*
		* This should only be required in rare use cases where `ClientToServerEvent` or `ServerToClientEvent` is not sufficient.
		*
		* Check to see if {@link ServerAsyncFunction} is more sufficient for your use case.
	]]
	local function BidirectionalEvent()
		return {
			Type = "Event",
			ServerMiddleware = {},
		}
	end
	_container.BidirectionalEvent = BidirectionalEvent
end
local default = NetDefinitions
return {
	default = default,
}
]]></string>
                </Properties>
                <Item class="ModuleScript" referent="175">
                  <Properties>
                    <string name="Name">ClientDefinitionBuilder</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.3.3
local TS = _G[script]
local ClientAsyncFunction = TS.import(script, script.Parent.Parent, "client", "ClientAsyncFunction").default
local ClientEvent = TS.import(script, script.Parent.Parent, "client", "ClientEvent").default
local ClientFunction = TS.import(script, script.Parent.Parent, "client", "ClientFunction").default
local _internal = TS.import(script, script.Parent.Parent, "internal")
local getGlobalRemote = _internal.getGlobalRemote
local NAMESPACE_ROOT = _internal.NAMESPACE_ROOT
local NAMESPACE_SEPARATOR = _internal.NAMESPACE_SEPARATOR
-- Keep the declarations fully isolated
local declarationMap = setmetatable({}, {
	__mode = "k",
})
local shouldYield = setmetatable({}, {
	__mode = "k",
})
local ClientDefinitionBuilder
do
	ClientDefinitionBuilder = setmetatable({}, {
		__tostring = function()
			return "ClientDefinitionBuilder"
		end,
	})
	ClientDefinitionBuilder.__index = ClientDefinitionBuilder
	function ClientDefinitionBuilder.new(...)
		local self = setmetatable({}, ClientDefinitionBuilder)
		return self:constructor(...) or self
	end
	function ClientDefinitionBuilder:constructor(declarations, configuration, namespace)
		if namespace == nil then
			namespace = NAMESPACE_ROOT
		end
		self.configuration = configuration
		self.namespace = namespace
		local _self = self
		declarationMap[_self] = declarations
		local _exp = self
		local _result = configuration
		if _result ~= nil then
			_result = _result.ClientGetShouldYield
		end
		local _condition = _result
		if _condition == nil then
			_condition = true
		end
		shouldYield[_exp] = _condition
	end
	function ClientDefinitionBuilder:toString()
		return "[" .. ("ClientDefinitionBuilder" .. "]")
	end
	function ClientDefinitionBuilder:Get(remoteId)
		local _self = self
		if shouldYield[_self] then
			return self:WaitFor(remoteId):expect()
		else
			return self:GetOrThrow(remoteId)
		end
	end
	function ClientDefinitionBuilder:GetNamespace(namespaceId)
		local _self = self
		local group = declarationMap[_self][namespaceId]
		local _arg1 = "Group " .. (namespaceId .. (" does not exist under namespace " .. self.namespace))
		assert(group, _arg1)
		local _arg0 = group.Type == "Namespace"
		assert(_arg0)
		local _fn = group.Definitions
		local _exp = group.Definitions:_CombineConfigurations(self.configuration or {})
		local _result
		if self.namespace ~= NAMESPACE_ROOT then
			-- ▼ ReadonlyArray.join ▼
			local _nAMESPACE_SEPARATOR = NAMESPACE_SEPARATOR
			if _nAMESPACE_SEPARATOR == nil then
				_nAMESPACE_SEPARATOR = ", "
			end
			-- ▲ ReadonlyArray.join ▲
			_result = table.concat({ self.namespace, namespaceId }, _nAMESPACE_SEPARATOR)
		else
			_result = namespaceId
		end
		return _fn:_BuildClientDefinition(_exp, _result)
	end
	function ClientDefinitionBuilder:GetOrThrow(remoteId)
		local _self = self
		local item = declarationMap[_self][remoteId]
		local _result
		if self.namespace ~= NAMESPACE_ROOT then
			-- ▼ ReadonlyArray.join ▼
			local _nAMESPACE_SEPARATOR = NAMESPACE_SEPARATOR
			if _nAMESPACE_SEPARATOR == nil then
				_nAMESPACE_SEPARATOR = ", "
			end
			-- ▲ ReadonlyArray.join ▲
			_result = (table.concat({ self.namespace, remoteId }, _nAMESPACE_SEPARATOR))
		else
			_result = remoteId
		end
		remoteId = _result
		local _arg0 = item and item.Type
		local _arg1 = "'" .. (remoteId .. "' is not defined in this definition.")
		assert(_arg0, _arg1)
		local _ = nil
		local _1 = nil
		if item.Type == "Function" then
			return ClientFunction.new(remoteId)
		elseif item.Type == "Event" then
			return ClientEvent.new(remoteId)
		elseif item.Type == "AsyncFunction" then
			return ClientAsyncFunction.new(remoteId)
		elseif item.Type == "ExperienceEvent" then
			return ClientEvent.new(getGlobalRemote(remoteId))
		end
		error("Type '" .. (item.Type .. "' is not a valid client remote object type"))
	end
	ClientDefinitionBuilder.WaitFor = TS.async(function(self, remoteId)
		local _self = self
		local item = declarationMap[_self][remoteId]
		local _result
		if self.namespace ~= NAMESPACE_ROOT then
			-- ▼ ReadonlyArray.join ▼
			local _nAMESPACE_SEPARATOR = NAMESPACE_SEPARATOR
			if _nAMESPACE_SEPARATOR == nil then
				_nAMESPACE_SEPARATOR = ", "
			end
			-- ▲ ReadonlyArray.join ▲
			_result = (table.concat({ self.namespace, remoteId }, _nAMESPACE_SEPARATOR))
		else
			_result = remoteId
		end
		remoteId = _result
		local _arg0 = item and item.Type
		local _arg1 = "'" .. (remoteId .. "' is not defined in this definition.")
		assert(_arg0, _arg1)
		local _ = nil
		local _1 = nil
		if item.Type == "Function" then
			return ClientFunction:Wait(remoteId)
		elseif item.Type == "Event" then
			return ClientEvent:Wait(remoteId)
		elseif item.Type == "AsyncFunction" then
			return ClientAsyncFunction:Wait(remoteId)
		elseif item.Type == "ExperienceEvent" then
			return ClientEvent:Wait(getGlobalRemote(remoteId))
		end
		error("Type '" .. (item.Type .. "' is not a valid client remote object type"))
	end)
	ClientDefinitionBuilder.OnEvent = TS.async(function(self, name, fn)
		local result = (TS.await(self:WaitFor(name)))
		return result:Connect(fn)
	end)
	ClientDefinitionBuilder.OnFunction = TS.async(function(self, name, fn)
		local result = (TS.await(self:WaitFor(name)))
		result:SetCallback(fn)
	end)
	function ClientDefinitionBuilder:__tostring()
		return self:toString()
	end
end
return {
	ClientDefinitionBuilder = ClientDefinitionBuilder,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="176">
                  <Properties>
                    <string name="Name">NamespaceBuilder</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.3.3
local TS = _G[script]
local ClientDefinitionBuilder = TS.import(script, script.Parent, "ClientDefinitionBuilder").ClientDefinitionBuilder
local ServerDefinitionBuilder = TS.import(script, script.Parent, "ServerDefinitionBuilder").ServerDefinitionBuilder
local RunService = game:GetService("RunService")
-- Isolate the definitions since we don't need to access them anywhere else.
local declarationMap = setmetatable({}, {
	__mode = "k",
})
--[[
	*
	* A namespace builder. Internally used to construct definition builders
]]
local NamespaceBuilder
do
	NamespaceBuilder = setmetatable({}, {
		__tostring = function()
			return "NamespaceBuilder"
		end,
	})
	NamespaceBuilder.__index = NamespaceBuilder
	function NamespaceBuilder.new(...)
		local self = setmetatable({}, NamespaceBuilder)
		return self:constructor(...) or self
	end
	function NamespaceBuilder:constructor(declarations, config)
		self.config = config
		local _self = self
		declarationMap[_self] = declarations
		local _ = declarations
	end
	function NamespaceBuilder:_CombineConfigurations(parentConfig)
		local _object = {}
		for _k, _v in pairs(parentConfig) do
			_object[_k] = _v
		end
		local _spread = self.config
		if type(_spread) == "table" then
			for _k, _v in pairs(_spread) do
				_object[_k] = _v
			end
		end
		local newConfig = _object
		return newConfig
	end
	function NamespaceBuilder:_BuildServerDefinition(configuration, namespace)
		local _arg0 = RunService:IsServer()
		assert(_arg0)
		local _ = nil
		local _1 = nil
		local _self = self
		return ServerDefinitionBuilder.new(declarationMap[_self], configuration, namespace)
	end
	function NamespaceBuilder:_BuildClientDefinition(configuration, namespace)
		local _arg0 = RunService:IsClient()
		assert(_arg0)
		local _ = nil
		local _1 = nil
		local _self = self
		return ClientDefinitionBuilder.new(declarationMap[_self], configuration, namespace)
	end
end
return {
	NamespaceBuilder = NamespaceBuilder,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="177">
                  <Properties>
                    <string name="Name">ServerDefinitionBuilder</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.3.3
local TS = _G[script]
local ServerAsyncFunction = TS.import(script, script.Parent.Parent, "server", "ServerAsyncFunction").default
local ServerEvent = TS.import(script, script.Parent.Parent, "server", "ServerEvent").default
local ServerFunction = TS.import(script, script.Parent.Parent, "server", "ServerFunction").default
local _internal = TS.import(script, script.Parent.Parent, "internal")
local NAMESPACE_ROOT = _internal.NAMESPACE_ROOT
local NAMESPACE_SEPARATOR = _internal.NAMESPACE_SEPARATOR
local ExperienceBroadcastEvent = TS.import(script, script.Parent.Parent, "messaging", "ExperienceBroadcastEvent").default
local ServerMessagingEvent = TS.import(script, script.Parent.Parent, "server", "ServerMessagingEvent").default
local CollectionService = game:GetService("CollectionService")
local RunService = game:GetService("RunService")
-- Tidy up all the types here.
-- Keep the declarations fully isolated
local declarationMap = setmetatable({}, {
	__mode = "k",
})
local remoteEventCache = {}
local remoteAsyncFunctionCache = {}
local remoteFunctionCache = {}
local messagingEventCache = {}
local messagingServerEventCache = {}
local ServerDefinitionBuilder
do
	ServerDefinitionBuilder = setmetatable({}, {
		__tostring = function()
			return "ServerDefinitionBuilder"
		end,
	})
	ServerDefinitionBuilder.__index = ServerDefinitionBuilder
	function ServerDefinitionBuilder.new(...)
		local self = setmetatable({}, ServerDefinitionBuilder)
		return self:constructor(...) or self
	end
	function ServerDefinitionBuilder:constructor(declarations, config, namespace)
		if namespace == nil then
			namespace = NAMESPACE_ROOT
		end
		self.config = config
		self.namespace = namespace
		local _binding = config
		local AutoGenerateServerRemotes = _binding.ServerAutoGenerateRemotes
		if AutoGenerateServerRemotes == nil then
			AutoGenerateServerRemotes = true
		end
		local GlobalMiddleware = _binding.ServerGlobalMiddleware
		local _self = self
		declarationMap[_self] = declarations
		local _ = declarations
		-- We only run remote creation on the server
		if RunService:IsServer() and AutoGenerateServerRemotes then
			self:_InitServer()
		end
		self.globalMiddleware = GlobalMiddleware
	end
	function ServerDefinitionBuilder:_CreateOrGetInstance(id, declaration)
		local _arg0 = RunService:IsServer()
		assert(_arg0, "Can only create server instances on the server")
		--[[
			*
			* This is used to generate or fetch the specified remote from a declaration
			*
			* The generated remote id is based off the current namespace.
		]]
		local _result
		if self.namespace ~= NAMESPACE_ROOT then
			-- ▼ ReadonlyArray.join ▼
			local _nAMESPACE_SEPARATOR = NAMESPACE_SEPARATOR
			if _nAMESPACE_SEPARATOR == nil then
				_nAMESPACE_SEPARATOR = ", "
			end
			-- ▲ ReadonlyArray.join ▲
			_result = table.concat({ self.namespace, id }, _nAMESPACE_SEPARATOR)
		else
			_result = id
		end
		local namespacedId = _result
		if declaration.Type == "Function" then
			local func
			if remoteFunctionCache[namespacedId] ~= nil then
				return remoteFunctionCache[namespacedId]
			else
				if declaration.ServerMiddleware then
					func = ServerFunction.new(namespacedId, declaration.ServerMiddleware)
				else
					func = ServerFunction.new(namespacedId)
				end
				CollectionService:AddTag(func:GetInstance(), "NetDefinitionManaged")
				local _func = func
				remoteFunctionCache[namespacedId] = _func
				local _result_1 = self.globalMiddleware
				if _result_1 ~= nil then
					local _arg0_1 = function(mw)
						return func:_use(mw)
					end
					for _k, _v in ipairs(_result_1) do
						_arg0_1(_v, _k - 1, _result_1)
					end
				end
				return func
			end
		elseif declaration.Type == "AsyncFunction" then
			local asyncFunction
			-- This should make certain use cases cheaper
			if remoteAsyncFunctionCache[namespacedId] ~= nil then
				return remoteAsyncFunctionCache[namespacedId]
			else
				if declaration.ServerMiddleware then
					asyncFunction = ServerAsyncFunction.new(namespacedId, declaration.ServerMiddleware)
				else
					asyncFunction = ServerAsyncFunction.new(namespacedId)
				end
				CollectionService:AddTag(asyncFunction:GetInstance(), "NetDefinitionManaged")
				local _asyncFunction = asyncFunction
				remoteAsyncFunctionCache[namespacedId] = _asyncFunction
			end
			local _result_1 = self.globalMiddleware
			if _result_1 ~= nil then
				local _arg0_1 = function(mw)
					return asyncFunction:_use(mw)
				end
				for _k, _v in ipairs(_result_1) do
					_arg0_1(_v, _k - 1, _result_1)
				end
			end
			return asyncFunction
		elseif declaration.Type == "Event" then
			local event
			-- This should make certain use cases cheaper
			if remoteEventCache[namespacedId] ~= nil then
				return remoteEventCache[namespacedId]
			else
				if declaration.ServerMiddleware then
					event = ServerEvent.new(namespacedId, declaration.ServerMiddleware)
				else
					event = ServerEvent.new(namespacedId)
				end
				CollectionService:AddTag(event:GetInstance(), "NetDefinitionManaged")
				local _event = event
				remoteEventCache[namespacedId] = _event
			end
			local _result_1 = self.globalMiddleware
			if _result_1 ~= nil then
				local _arg0_1 = function(mw)
					return event:_use(mw)
				end
				for _k, _v in ipairs(_result_1) do
					_arg0_1(_v, _k - 1, _result_1)
				end
			end
			return event
		elseif declaration.Type == "Messaging" then
			local event
			if messagingEventCache[namespacedId] ~= nil then
				return messagingEventCache[namespacedId]
			else
				event = ExperienceBroadcastEvent.new(namespacedId)
				local _event = event
				messagingEventCache[namespacedId] = _event
			end
			return event
		elseif declaration.Type == "ExperienceEvent" then
			local event
			if messagingServerEventCache[namespacedId] ~= nil then
				return messagingServerEventCache[namespacedId]
			else
				event = ServerMessagingEvent.new(namespacedId)
				local _event = event
				messagingServerEventCache[namespacedId] = _event
			end
			return event
		else
			error("Unhandled type")
		end
	end
	function ServerDefinitionBuilder:_InitServer()
		--[[
			*
			* Used to generate all the remotes on the server-side straight away.
			*
			* So long as the remote declaration file is imported, and it's the server this _should_ run.
			*
			* This will fix https://github.com/roblox-aurora/rbx-net/issues/57, which is a long standing race-condition issue
			* I, as well as many other users have run into from time to time.
		]]
		local _ = nil
		local _1 = nil
		local _self = self
		local declarations = declarationMap[_self]
		for id, declaration in pairs(declarations) do
			local _exp = declaration.Type
			repeat
				local _fallthrough = false
				if _exp == "Event" then
					_fallthrough = true
				end
				if _fallthrough or _exp == "AsyncFunction" then
					_fallthrough = true
				end
				if _fallthrough or _exp == "Function" then
					_fallthrough = true
				end
				if _fallthrough or _exp == "Messaging" then
					self:_CreateOrGetInstance(id, declaration)
					break
				end
				if _exp == "Namespace" then
					self:GetNamespace(id)
					break
				end
			until true
		end
	end
	function ServerDefinitionBuilder:toString()
		return "[" .. ("ServerDefinitionBuilder" .. "]")
	end
	function ServerDefinitionBuilder:OnEvent(name, fn)
		local result = self:Get(name)
		return result:Connect(fn)
	end
	function ServerDefinitionBuilder:GetNamespace(namespaceId)
		local _self = self
		local group = declarationMap[_self][namespaceId]
		local _arg1 = "Group " .. (namespaceId .. (" does not exist under namespace " .. self.namespace))
		assert(group, _arg1)
		local _arg0 = group.Type == "Namespace"
		assert(_arg0)
		local _ = nil
		local _1 = nil
		local _fn = group.Definitions
		local _exp = group.Definitions:_CombineConfigurations(self.config)
		local _result
		if self.namespace ~= NAMESPACE_ROOT then
			-- ▼ ReadonlyArray.join ▼
			local _nAMESPACE_SEPARATOR = NAMESPACE_SEPARATOR
			if _nAMESPACE_SEPARATOR == nil then
				_nAMESPACE_SEPARATOR = ", "
			end
			-- ▲ ReadonlyArray.join ▲
			_result = table.concat({ self.namespace, namespaceId }, _nAMESPACE_SEPARATOR)
		else
			_result = namespaceId
		end
		return _fn:_BuildServerDefinition(_exp, _result)
	end
	function ServerDefinitionBuilder:Get(remoteId)
		local _self = self
		local item = declarationMap[_self][remoteId]
		local _arg0 = item and item.Type
		local _arg1 = "'" .. (remoteId .. "' is not defined in this definition.")
		assert(_arg0, _arg1)
		if item.Type == "Function" or (item.Type == "AsyncFunction" or (item.Type == "Event" or item.Type == "Messaging")) then
			if remoteAsyncFunctionCache[remoteId] ~= nil then
				local _ = nil
				local _1 = nil
				return remoteAsyncFunctionCache[remoteId]
			else
				return self:_CreateOrGetInstance(remoteId, item)
			end
		else
			error("Invalid type for " .. remoteId)
		end
	end
	function ServerDefinitionBuilder:Create(remoteId)
		return self:Get(remoteId)
	end
	function ServerDefinitionBuilder:OnFunction(name, fn)
		local result = self:Get(name)
		result:SetCallback(fn)
	end
	function ServerDefinitionBuilder:__tostring()
		return self:toString()
	end
end
return {
	ServerDefinitionBuilder = ServerDefinitionBuilder,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="178">
                  <Properties>
                    <string name="Name">Types</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.3.3
local TS = _G[script]
--[[
	*
	* Types
	*
	* I will admit, this is a lot of type spaghetti. It makes the definitions work good though. :D
]]
local oneOf = TS.import(script, script.Parent.Parent, "internal", "validator").oneOf
--[[
	*
	* The DefinitionBuilders type
]]
--[[
	*
	* @deprecated
]]
--[[
	*
	* A declaration for an async client function
]]
--[[
	*
	* A declaration for an async server function
]]
-- * @deprecated
--[[
	*
	* A declaration for a client -> server event
]]
--[[
	*
	* A declaration for a server -> client event
]]
--[[
	*
	* A declaration for a server -> server event
]]
--[[
	*
	* A declaration for a server -> server event, that replicates to clients
]]
--[[
	*
	* A declaration for a Bidirectional event
]]
--[[
	*
	* A declaration group
]]
-- //////////////////////////////
-- * Inference Magic
-- /////////////////////////////
--[[
	*
	* This infers the client remote type based on the given value
]]
--[[
	*
	* This infers the server remote type based on the given value
]]
-- ///////////////////////////////////////
-- * Results
-- ///////////////////////////////////////
local DeclarationTypeCheck = oneOf("Event", "Function", "AsyncFunction", "Namespace", "Messaging", "ExperienceEvent")
return {
	DeclarationTypeCheck = DeclarationTypeCheck,
}
]]></string>
                  </Properties>
                </Item>
              </Item>
              <Item class="ModuleScript" referent="179">
                <Properties>
                  <string name="Name">internal</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.3.3
local TS = _G[script]
local HttpService = game:GetService("HttpService")
local runService = game:GetService("RunService")
local collectionService = game:GetService("CollectionService")
-- * @internal
local NAMESPACE_SEPARATOR = "/"
-- * @internal
local NAMESPACE_ROOT = "@"
-- * @internal
local IS_SERVER = not runService:IsRunning() or runService:IsServer()
-- * @internal
local IS_CLIENT = runService:IsRunning() and runService:IsClient()
local IS_RUNNING = runService:IsRunning()
-- * @internal
local MAX_CLIENT_WAITFORCHILD_TIMEOUT = 10
-- * @internal
local function getGlobalRemote(name)
	return ":\\" .. name
end
-- * @internal
local function isLuaTable(value)
	return type(value) == "table"
end
-- * @internal
local NetMiddlewareEvent
do
	NetMiddlewareEvent = setmetatable({}, {
		__tostring = function()
			return "NetMiddlewareEvent"
		end,
	})
	NetMiddlewareEvent.__index = NetMiddlewareEvent
	function NetMiddlewareEvent.new(...)
		local self = setmetatable({}, NetMiddlewareEvent)
		return self:constructor(...) or self
	end
	function NetMiddlewareEvent:constructor(netInstance)
		self.netInstance = netInstance
	end
	function NetMiddlewareEvent:GetInstance()
		return self.netInstance:GetInstance()
	end
end
local REMOTES_FOLDER_NAME = "_NetManaged"
-- * @internal
-- * @internal
local ServerTickFunctions = {}
-- * @internal
local function findOrCreateFolder(parent, name)
	local folder = parent:FindFirstChild(name)
	if folder then
		return folder
	else
		folder = Instance.new("Folder", parent)
		folder.Name = name
		return folder
	end
end
-- const dist = $env<"TS" | "Luau" | "TestTS">("TYPE", "TS");
local location = script.Parent
local _ = nil
local _1 = nil
local remoteFolder = findOrCreateFolder(location, REMOTES_FOLDER_NAME)
--[[
	*
	* Errors with variables formatted in a message
	* @param message The message
	* @param vars variables to pass to the error message
]]
local function errorft(message, vars)
	-- eslint-disable-next-line @typescript-eslint/ban-ts-comment
	-- @ts-ignore
	local _arg1 = function(token)
		local _condition = vars[token]
		if _condition == nil then
			_condition = token
		end
		return _condition
	end
	message = string.gsub(message, "{([%w_][%w%d_]*)}", _arg1)
	error(message, 2)
end
local traceSet = {}
local function warnOnce(message)
	local trace = debug.traceback()
	if traceSet[trace] ~= nil then
		return nil
	end
	traceSet[trace] = true
	warn("[rbx-net] " .. message)
end
local function format(message, vars)
	-- eslint-disable-next-line @typescript-eslint/ban-ts-comment
	-- @ts-ignore
	local _arg1 = function(token)
		local _condition = vars[token]
		if _condition == nil then
			_condition = token
		end
		return _condition
	end
	message = string.gsub(message, "{([%w_][%w%d_]*)}", _arg1)
	return message
end
-- * @internal
local findRemote, getTagFromRemoteType
local function waitForRemote(remoteType, name, timeout)
	return TS.Promise.defer(function(resolve, reject)
		-- First, check if remote already exists
		local result = findRemote(remoteType, name)
		if result then
			resolve(result)
			return nil
		end
		-- If not, wait for remote
		local searchStart = os.clock()
		local remote = remoteFolder:WaitForChild(name, timeout)
		local remoteTypeTag = getTagFromRemoteType(remoteType)
		if remote and table.find(collectionService:GetTags(remote), remoteTypeTag) ~= nil then
			resolve(remote)
			return nil
		end
		-- If result is not correct remote type, poll until correct remote is added
		local elapsed = os.clock() - searchStart
		while elapsed < timeout do
			elapsed += (runService.Heartbeat:Wait())
			result = findRemote(remoteType, name)
			if result then
				resolve(result)
				return nil
			end
		end
		reject("Timed out while waiting for " .. (remoteType .. (" '" .. (name .. ("' after " .. (tostring(elapsed) .. " seconds."))))))
	end)
end
-- * @internal
function findRemote(remoteType, name)
	local tag = getTagFromRemoteType(remoteType)
	local _exp = collectionService:GetTagged(tag)
	local _arg0 = function(f)
		return f.Name == name
	end
	-- ▼ ReadonlyArray.find ▼
	local _result
	for _i, _v in ipairs(_exp) do
		if _arg0(_v, _i - 1, _exp) == true then
			_result = _v
			break
		end
	end
	-- ▲ ReadonlyArray.find ▲
	return _result
end
-- * @internal
function getTagFromRemoteType(remoteType)
	repeat
		if remoteType == "AsyncRemoteFunction" then
			return "NetManagedAsyncFunction"
		end
		if remoteType == "RemoteEvent" then
			return "NetManagedEvent"
		end
		if remoteType == "RemoteFunction" then
			return "NetManagedLegacyFunction"
		end
	until true
	error("Invalid Remote Access")
end
-- * @internal
local function getRemoteOrThrow(remoteType, name)
	local existing = findRemote(remoteType, name)
	if existing then
		return existing
	else
		error("Could not find Remote of type " .. (remoteType .. (' called "' .. (name .. '"'))))
	end
end
-- * @internal
local function findOrCreateRemote(remoteType, name, onCreate)
	local existing = findRemote(remoteType, name)
	if existing then
		if collectionService:HasTag(existing, "NetDefinitionManaged") then
			warnOnce("Fetching " .. (remoteType .. (" '" .. (name .. "', which is a DefinitionsManaged instance from a non-definitions context. This is considered unsafe."))))
		end
		return existing
	else
		if not IS_SERVER then
			error("Creation of Events or Functions must be done on server!")
		end
		local remote
		if remoteType == "RemoteEvent" then
			remote = Instance.new("RemoteEvent")
			collectionService:AddTag(remote, "NetManagedEvent")
		elseif remoteType == "AsyncRemoteFunction" then
			remote = Instance.new("RemoteEvent")
			collectionService:AddTag(remote, "NetManagedAsyncFunction")
		elseif remoteType == "RemoteFunction" then
			remote = Instance.new("RemoteFunction")
			collectionService:AddTag(remote, "NetManagedLegacyFunction")
		else
			error("Invalid Remote Type: " .. remoteType)
		end
		remote.Name = name
		remote.Parent = remoteFolder
		local _2 = nil
		local _3 = nil
		local _result = onCreate
		if _result ~= nil then
			_result(remote)
		end
		return remote
	end
end
-- * @internal
local function checkArguments(types, args)
	if args == nil then
		warn("[net-types] Argument length is zero")
		return false
	end
	do
		local i = 0
		local _shouldIncrement = false
		while true do
			if _shouldIncrement then
				i += 1
			else
				_shouldIncrement = true
			end
			if not (i < #types) then
				break
			end
			local typeCheck = types[i + 1]
			local value = args[i + 1]
			if not typeCheck(value) then
				warn("[net-types] Argument at index " .. (tostring(i) .. " was invalid type."))
				return false
			end
		end
	end
	return true
end
if IS_SERVER then
	game:GetService("RunService").Stepped:Connect(function(time, step)
		for _2, f in ipairs(ServerTickFunctions) do
			f()
		end
	end)
end
return {
	getGlobalRemote = getGlobalRemote,
	isLuaTable = isLuaTable,
	findOrCreateFolder = findOrCreateFolder,
	errorft = errorft,
	warnOnce = warnOnce,
	format = format,
	waitForRemote = waitForRemote,
	findRemote = findRemote,
	getTagFromRemoteType = getTagFromRemoteType,
	getRemoteOrThrow = getRemoteOrThrow,
	findOrCreateRemote = findOrCreateRemote,
	checkArguments = checkArguments,
	NAMESPACE_SEPARATOR = NAMESPACE_SEPARATOR,
	NAMESPACE_ROOT = NAMESPACE_ROOT,
	IS_SERVER = IS_SERVER,
	IS_CLIENT = IS_CLIENT,
	IS_RUNNING = IS_RUNNING,
	MAX_CLIENT_WAITFORCHILD_TIMEOUT = MAX_CLIENT_WAITFORCHILD_TIMEOUT,
	NetMiddlewareEvent = NetMiddlewareEvent,
	ServerTickFunctions = ServerTickFunctions,
}
]]></string>
                </Properties>
                <Item class="ModuleScript" referent="180">
                  <Properties>
                    <string name="Name">tables</string>
                    <string name="Source">local function isMixed(t)
	assert(type(t) == "table")
	local mixed = false
	local _idxType

	for index, value in next, t do
		if _idxType and _idxType ~= type(index) then
			return true
		end

		_idxType = type(index)
		if type(value) == "table" then
			mixed = mixed and isMixed(value) and not (not getmetatable(value))
		end
	end

	return mixed
end

return {
	mixed = isMixed
}</string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="181">
                  <Properties>
                    <string name="Name">validator</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.3.3
local TS = _G[script]
local isMixed = TS.import(script, script.Parent, "tables").isMixed
local Workspace = game:GetService("Workspace")
local ServerStorage = game:GetService("ServerStorage")
local ServerScriptService = game:GetService("ServerScriptService")
-- * @internal
local isSerializable
local function validateArguments(...)
	local args = { ... }
	for index, value in ipairs(args) do
		if not isSerializable.check(value) then
			error(string.format(isSerializable.errorMessage, index), 2)
		end
		if typeof(value) == "Instance" then
			if value:IsDescendantOf(ServerStorage) or value:IsDescendantOf(ServerScriptService) then
				error("[rbx-net] Instance at argument #" .. (tostring(index) .. " is inside a server-only container and cannot be sent via remotes."))
			end
			if not value:IsDescendantOf(game) then
				error("[rbx-net] Instance at argument #" .. (tostring(index) .. " is not a valid descendant of game, and wont replicate"))
			end
		end
	end
end
-- * @internal
isSerializable = {
	errorMessage = "Argument #%d is not serializable. - see http://docs.vorlias.com/rbx-net/docs/2.0/serialization",
	check = function(value)
		-- Can't allow functions or threads
		if type(value) == "function" or type(value) == "thread" then
			return false
		end
		-- Can't allow metatabled objects
		if type(value) == "table" and getmetatable(value) ~= nil then
			return false
		end
		-- Ensure not a mixed table type
		if type(value) == "table" then
			return not isMixed(value)
		end
		return true
	end,
}
-- * @internal
local function oneOf(...)
	local values = { ... }
	return {
		errorMessage = "Expected one of: " .. table.concat(values, ", "),
		check = function(value)
			if not (type(value) == "string") then
				return false
			end
			for _, cmpValue in ipairs(values) do
				if value == cmpValue then
					return true
				end
			end
			return false
		end,
	}
end
return {
	validateArguments = validateArguments,
	oneOf = oneOf,
	isSerializable = isSerializable,
}
]]></string>
                  </Properties>
                </Item>
              </Item>
              <Item class="Folder" referent="182">
                <Properties>
                  <string name="Name">messaging</string>
                </Properties>
                <Item class="ModuleScript" referent="183">
                  <Properties>
                    <string name="Name">ExperienceBroadcastEvent</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.3.3
local TS = _G[script]
local _internal = TS.import(script, script.Parent.Parent, "internal")
local isLuaTable = _internal.isLuaTable
local ServerTickFunctions = _internal.ServerTickFunctions
-- const MessagingService = game.GetService("MessagingService");
local MessagingService = TS.import(script, script.Parent, "MessagingService")
local Players = game:GetService("Players")
local IS_STUDIO = game:GetService("RunService"):IsStudio()
--[[
	*
	* Checks if a value matches that of a subscription message
	* @param value The value
]]
local function isSubscriptionMessage(value)
	if isLuaTable(value) then
		local hasData = value.Data ~= nil
		return hasData
	else
		return false
	end
end
local function isJobTargetMessage(value)
	if isSubscriptionMessage(value) then
		if isLuaTable(value.Data) then
			return value.Data.jobId ~= nil
		end
	end
	return false
end
local globalMessageQueue = {}
local lastQueueTick = 0
local globalEventMessageCounter = 0
local globalSubscriptionCounter = 0
local ExperienceBroadcastEvent
local function processMessageQueue()
	if tick() >= lastQueueTick + 60 then
		globalEventMessageCounter = 0
		globalSubscriptionCounter = 0
		lastQueueTick = tick()
		while #globalMessageQueue > 0 do
			-- ▼ Array.pop ▼
			local _length = #globalMessageQueue
			local _result = globalMessageQueue[_length]
			globalMessageQueue[_length] = nil
			-- ▲ Array.pop ▲
			local message = _result
			MessagingService:PublishAsync(message.Name, message.Data)
			globalEventMessageCounter += 1
		end
		if globalEventMessageCounter >= ExperienceBroadcastEvent:GetMessageLimit() then
			warn("[rbx-net] Too many messages are being sent, any further messages will be queued!")
		end
	end
end
--[[
	*
	* Message Size: 1kB
	* MessagesPerMin: 150 + 60 * NUMPLAYERS
	* MessagesPerTopicMin: 30M
	* MessagesPerUniversePerMin: 30M
	* SubsPerServer: 5 + 2 * numPlayers
	* SubsPerUniverse: 10K
]]
--[[
	*
	* An event that works across all servers
	* @see https://developer.roblox.com/api-reference/class/MessagingService for limits, etc.
]]
do
	ExperienceBroadcastEvent = setmetatable({}, {
		__tostring = function()
			return "ExperienceBroadcastEvent"
		end,
	})
	ExperienceBroadcastEvent.__index = ExperienceBroadcastEvent
	function ExperienceBroadcastEvent.new(...)
		local self = setmetatable({}, ExperienceBroadcastEvent)
		return self:constructor(...) or self
	end
	function ExperienceBroadcastEvent:constructor(name)
		self.name = name
	end
	function ExperienceBroadcastEvent:GetMessageLimit()
		return 150 + 60 * #Players:GetPlayers()
	end
	function ExperienceBroadcastEvent:GetSubscriptionLimit()
		return 5 + 2 * #Players:GetPlayers()
	end
	function ExperienceBroadcastEvent:sendToAllServersOrQueue(data)
		local limit = ExperienceBroadcastEvent:GetMessageLimit()
		if globalEventMessageCounter >= limit then
			warn("[rbx-net] Exceeded message limit of " .. (tostring(limit) .. ", adding to queue..."))
			local _arg0 = {
				Name = self.name,
				Data = data,
			}
			table.insert(globalMessageQueue, _arg0)
		else
			globalEventMessageCounter += 1
			-- Since this yields
			MessagingService:PublishAsync(self.name, data)
		end
	end
	function ExperienceBroadcastEvent:SendToServer(serverJobId, sendData)
		self:sendToAllServersOrQueue({
			jobId = serverJobId,
			message = sendData,
		})
	end
	function ExperienceBroadcastEvent:SendToAllServers(sendData)
		self:sendToAllServersOrQueue(sendData)
	end
	function ExperienceBroadcastEvent:Connect(handler)
		local limit = ExperienceBroadcastEvent:GetSubscriptionLimit()
		if globalSubscriptionCounter >= limit then
			error("[rbx-net] Exceeded Subscription limit of " .. (tostring(limit) .. "!"))
		end
		globalSubscriptionCounter += 1
		return MessagingService:SubscribeAsync(self.name, function(message)
			local recieved = message
			local _binding = recieved
			local Sent = _binding.Sent
			if isJobTargetMessage(recieved) then
				local _binding_1 = recieved
				local Data = _binding_1.Data
				if game.JobId == Data.JobId then
					handler(Data.InnerData, Sent)
				end
			else
				handler(recieved.Data, Sent)
			end
		end)
	end
end
table.insert(ServerTickFunctions, processMessageQueue)
return {
	isSubscriptionMessage = isSubscriptionMessage,
	default = ExperienceBroadcastEvent,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="184">
                  <Properties>
                    <string name="Name">MessagingService</string>
                    <string name="Source">local RunService = game:GetService("RunService")
local MessagingService = game:GetService("MessagingService")

local MockMessagingService = {}
local topics = {}

function MockMessagingService:PublishAsync(topicName, message)
	local topic = topics[topicName]
	if topic then
		topic:Fire(
			{
				Sent = tick(),
				Data = message
			}
		)
	end
end

function MockMessagingService:SubscribeAsync(topicName, callback)
	local topic = topics[topicName]
	if not topic then
		topic = Instance.new("BindableEvent")
		topic.Parent = script
		topic.Name = topicName
		topics[topicName] = topic
	end

	return topic.Event:Connect(callback)
end

local service
if RunService:IsStudio() then
    service = MockMessagingService
else
    service = MessagingService
end


return service</string>
                  </Properties>
                </Item>
              </Item>
              <Item class="ModuleScript" referent="185">
                <Properties>
                  <string name="Name">middleware</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.3.3
local TS = _G[script]
local createLoggerMiddleware = TS.import(script, script, "LoggerMiddleware")
local createRateLimiter = TS.import(script, script, "RateLimitMiddleware").default
local NetTypeCheckingMiddleware = TS.import(script, script, "TypeCheckMiddleware")
local NetMiddleware = {}
do
	local _container = NetMiddleware
	local RateLimit = createRateLimiter
	_container.RateLimit = RateLimit
	local Logging = createLoggerMiddleware
	_container.Logging = Logging
	-- * The type checking middleware
	local TypeChecking = NetTypeCheckingMiddleware
	_container.TypeChecking = TypeChecking
	--[[
		*
		* Creates a global read-only middleware for use in `Net.Definitions` global middleware.
	]]
	local function Global(middleware)
		local _arg0 = function(processNext, event)
			return function(sender, ...)
				local args = { ... }
				middleware(event:GetInstance().Name, args, sender)
				return processNext(sender, unpack(args))
			end
		end
		return _arg0
	end
	_container.Global = Global
end
local createTypeChecker = NetTypeCheckingMiddleware
return {
	NetMiddleware = NetMiddleware,
	createRateLimiter = createRateLimiter,
	createTypeChecker = createTypeChecker,
}
]]></string>
                </Properties>
                <Item class="ModuleScript" referent="186">
                  <Properties>
                    <string name="Name">LoggerMiddleware</string>
                    <string name="Source">local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")
local IS_STUDIO = RunService:IsStudio()

local function defaultLogger(name, args)
    if IS_STUDIO then
        local str = {};
        for _, arg in ipairs(args) do
            table.insert(str, HttpService:JSONEncode(arg))
        end
        print("[rbx-net] Called", name, "with arguments", "[ " .. table.concat(str, ", ") .. " ]")
    end
end

return function(options)
    options = options or {}
    local logger = options.Logger or defaultLogger

    return function (next, event)
        local name = options.Name or event:GetInstance().Name
        return function(player, ...)
            logger(name, {...})
            return next(player, ...)
        end
    end
end</string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="187">
                  <Properties>
                    <string name="Name">RateLimitMiddleware</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.3.3
local TS = _G[script]
local _internal = TS.import(script, script.Parent.Parent, "internal")
local format = _internal.format
local IS_SERVER = _internal.IS_SERVER
local ServerTickFunctions = _internal.ServerTickFunctions
local throttler = TS.import(script, script, "throttle")
local throttles = {}
local function rateLimitWarningHandler(rateLimitError)
	warn("[rbx-net]", rateLimitError.Message)
end
local THROTTLE_RESET_TIMER = 60
--[[
	*
	* Creates a throttle middleware for this event
	*
	* Will limit the amount of requests a player can make to this event
	*
	* _NOTE: Must be used before **other** middlewares as it's not a type altering middleware_
	* @param maxRequestsPerMinute The maximum requests per minute
]]
local function createRateLimiter(options)
	local maxRequestsPerMinute = options.MaxRequestsPerMinute
	local errorHandler = options.ErrorHandler or rateLimitWarningHandler
	local _condition = options.ThrottleMessage
	if _condition == nil then
		_condition = "Request limit exceeded ({limit}) by {player} via {remote}"
	end
	local throttleMessage = _condition
	return function(processNext, event)
		local instance = event:GetInstance()
		local throttle = throttles[event]
		if throttle == nil then
			throttle = throttler:Get(instance:GetFullName())
		end
		return function(player, ...)
			local args = { ... }
			local count = throttle:Get(player)
			if count >= maxRequestsPerMinute then
				local _result = errorHandler
				if _result ~= nil then
					_result({
						Message = format(throttleMessage, {
							player = player.UserId,
							remote = instance.Name,
							limit = maxRequestsPerMinute,
						}),
						MaxRequestsPerMinute = maxRequestsPerMinute,
						RemoteId = instance.Name,
						UserId = player.UserId,
					})
				end
			else
				throttle:Increment(player)
				return processNext(player, unpack(args))
			end
		end
	end
end
if IS_SERVER then
	local lastTick = 0
	local _arg0 = function()
		if tick() > lastTick + THROTTLE_RESET_TIMER then
			lastTick = tick()
			throttler:Clear()
		end
	end
	table.insert(ServerTickFunctions, _arg0)
end
local default = createRateLimiter
return {
	rateLimitWarningHandler = rateLimitWarningHandler,
	default = default,
}
]]></string>
                  </Properties>
                  <Item class="ModuleScript" referent="188">
                    <Properties>
                      <string name="Name">throttle</string>
                      <string name="Source"><![CDATA[local Throttle = {
	counters = {}
}
local RequestCounter = {}
RequestCounter.__index = RequestCounter

function RequestCounter.new()
	local self = {
		counter = {}
	}

	return setmetatable(self, RequestCounter)
end

function RequestCounter:Get(player)
	local counter = self.counter
	local playerQueue = counter[player.UserId]
	return playerQueue or 0
end

function RequestCounter:Increment(player)
	local counter = self.counter
	local playerQueue = counter[player.UserId]

	if not counter[player.UserId] then
		counter[player.UserId] = 1
	else
		counter[player.UserId] = playerQueue + 1
	end
end

function RequestCounter:__tostring()
	return "RequestCounter"
end

function RequestCounter:ClearAll()
	self.counter = {}
end

function Throttle:Get(name)
	local existing = self.counters[name]
	if (existing) then
		return existing
	else
		local newCounter = RequestCounter.new()
		self.counters[name] = newCounter
		return newCounter
	end
end

function Throttle:Clear()
	for _, counter in pairs(self.counters) do
		counter:ClearAll()
	end
end

return Throttle
]]></string>
                    </Properties>
                  </Item>
                </Item>
                <Item class="ModuleScript" referent="189">
                  <Properties>
                    <string name="Name">TypeCheckMiddleware</string>
                    <string name="Source">local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")
local IS_STUDIO = RunService:IsStudio();

local function defaultErrorHandler(event, args, index)
    local name = event:GetInstance().Name
    if IS_STUDIO then
        warn("[TypeCheckMiddleware] Call to " .. name .. " failed")
        warn("\tRecieved: " .. HttpService:JSONEncode(args))
        warn("\tInvalid argument at index " .. tostring(index))
    end
end

local MiddlewareGlobal = {}
MiddlewareGlobal.__index = MiddlewareGlobal
MiddlewareGlobal.defaultErrorHandler = defaultErrorHandler

local function typeCheckMiddleware(...)
    local checks = {...}
    local MiddlewareInstance = {}
    MiddlewareInstance.__index = MiddlewareInstance;

    function MiddlewareInstance:next(next, event)
        local errorHandler = self.errorHandler or MiddlewareGlobal.defaultErrorHandler
        --  what's returned as callbackFn
        return function(player, ...)
            local args = {...}
            for index, check in ipairs(checks) do
                if not check(args[index]) then
                    pcall(errorHandler, event, args, index)
                    return false
                end
            end

            -- Invoke the next middleware OR the callback (if none left)
            return next(player, ...)
        end
    end

    function MiddlewareInstance.__tostring()
        return "TypeCheckMiddleware"
    end

    function MiddlewareInstance:WithErrorHandler(fn)
        self.errorHandler = fn
        return self
    end

    function MiddlewareInstance:__call(...)
        return self:next(...)
    end
    
    return setmetatable({}, MiddlewareInstance)
    -- ^ The middleware
end

function MiddlewareGlobal.__call(_, ...)
    return typeCheckMiddleware(...)
end

function MiddlewareGlobal.SetDefaultErrorHandler(_, fn)
    MiddlewareGlobal.defaultErrorHandler = fn
end

return setmetatable({}, MiddlewareGlobal)</string>
                  </Properties>
                </Item>
              </Item>
              <Item class="ModuleScript" referent="190">
                <Properties>
                  <string name="Name">server</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.3.3
local TS = _G[script]
local AsyncFunction = TS.import(script, script, "ServerAsyncFunction").default
local Event = TS.import(script, script, "ServerEvent").default
local MessagingEvent = TS.import(script, script, "ServerMessagingEvent").default
local Function = TS.import(script, script, "ServerFunction").default
return {
	Event = Event,
	AsyncFunction = AsyncFunction,
	Function = Function,
	MessagingEvent = MessagingEvent,
}
]]></string>
                </Properties>
                <Item class="ModuleScript" referent="191">
                  <Properties>
                    <string name="Name">CreateServerListener</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.3.3
local TS = _G[script]
local ServerEventV2 = TS.import(script, script.Parent, "ServerEvent").default
local function isMiddlewareArgument(args)
	local _condition = #args > 1
	if _condition then
		local _arg0 = args[1]
		_condition = type(_arg0) == "table"
	end
	return _condition
end
--[[
	*
	* Creates a server listening event
]]
local function createServerListener(id, ...)
	local args = { ... }
	local event
	if isMiddlewareArgument(args) then
		local _binding = args
		local middleware = _binding[1]
		local connect = _binding[2]
		event = ServerEventV2.new(id, middleware)
		return event:Connect(connect)
	else
		local _binding = args
		local connect = _binding[1]
		event = ServerEventV2.new(id)
		return event:Connect(connect)
	end
end
return {
	default = createServerListener,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="192">
                  <Properties>
                    <string name="Name">MiddlewareEvent</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.3.3
local TS = _G[script]
-- * @internal
local MiddlewareEvent
do
	MiddlewareEvent = {}
	function MiddlewareEvent:constructor(middlewares)
		if middlewares == nil then
			middlewares = {}
		end
		self.middlewares = middlewares
	end
	function MiddlewareEvent:_use(middleware)
		local _exp = (self.middlewares)
		table.insert(_exp, middleware)
	end
	function MiddlewareEvent:_processMiddleware(callback)
		local _binding = self
		local middlewares = _binding.middlewares
		local _exitType, _returns = TS.try(function()
			local _arg0 = type(middlewares) == "table"
			local _arg1 = "The middleware argument should be an array of middlewares not a " .. typeof(middlewares)
			assert(_arg0, _arg1)
			if #middlewares > 0 then
				local callbackFn = callback
				-- Run through each middleware
				for _, middleware in ipairs(middlewares) do
					callbackFn = middleware(callbackFn, self)
				end
				return TS.TRY_RETURN, { callbackFn }
			else
				return TS.TRY_RETURN, { callback }
			end
		end, function(e)
			warn("[rbx-net] " .. tostring(e))
		end)
		if _exitType then
			return unpack(_returns)
		end
	end
end
local default = MiddlewareEvent
return {
	default = default,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="193">
                  <Properties>
                    <string name="Name">MiddlewareFunction</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.3.3
local TS = _G[script]
local MiddlewareFunction
do
	MiddlewareFunction = {}
	function MiddlewareFunction:constructor(middlewares)
		if middlewares == nil then
			middlewares = {}
		end
		self.middlewares = middlewares
	end
	function MiddlewareFunction:_use(middleware)
		local _exp = (self.middlewares)
		table.insert(_exp, middleware)
	end
	function MiddlewareFunction:_processMiddleware(callback)
		local _binding = self
		local middlewares = _binding.middlewares
		local _exitType, _returns = TS.try(function()
			if #middlewares > 0 then
				local callbackFn = callback
				-- Run through each middleware
				for _, middleware in ipairs(middlewares) do
					callbackFn = middleware(callbackFn, self)
				end
				return TS.TRY_RETURN, { callbackFn }
			else
				return TS.TRY_RETURN, { callback }
			end
		end, function(e)
			warn("[rbx-net] " .. tostring(e))
		end)
		if _exitType then
			return unpack(_returns)
		end
	end
end
local default = MiddlewareFunction
return {
	default = default,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="194">
                  <Properties>
                    <string name="Name">NetServerScriptSignal</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.3.3
local TS = _G[script]
--[[
	*
	* A wrapper around a RBXScriptSignal for remotes, that always has a listener set.
]]
local NetServerScriptSignal
do
	NetServerScriptSignal = setmetatable({}, {
		__tostring = function()
			return "NetServerScriptSignal"
		end,
	})
	NetServerScriptSignal.__index = NetServerScriptSignal
	function NetServerScriptSignal.new(...)
		local self = setmetatable({}, NetServerScriptSignal)
		return self:constructor(...) or self
	end
	function NetServerScriptSignal:constructor(signalInstance, instance)
		self.signalInstance = signalInstance
		self.instance = instance
		self.connections = {}
		self.connectionRefs = setmetatable({}, {
			__mode = "k",
		})
		self.defaultConnectionDelegate = (function(player, ...)
			local args = { ... }
		end)
		self.defaultConnection = signalInstance:Connect(self.defaultConnectionDelegate)
		local sig
		sig = self.instance.AncestryChanged:Connect(function(child, parent)
			if child == instance and parent == nil then
				self:DisconnectAll()
				sig:Disconnect()
			end
		end)
	end
	function NetServerScriptSignal:Connect(callback)
		if self.defaultConnection then
			self.defaultConnection:Disconnect()
			self.defaultConnection = nil
		end
		local connection = self.signalInstance:Connect(callback)
		local _connections = self.connections
		table.insert(_connections, connection)
		local ref
		local _arg0 = {
			NetSignal = self,
			RBXSignal = connection,
			Connected = connection.Connected,
			Disconnect = function(self)
				local _connections_1 = self.NetSignal.connections
				local _arg0_1 = function(f)
					return f == ref
				end
				-- ▼ ReadonlyArray.findIndex ▼
				local _result = -1
				for _i, _v in ipairs(_connections_1) do
					if _arg0_1(_v, _i - 1, _connections_1) == true then
						_result = _i - 1
						break
					end
				end
				-- ▲ ReadonlyArray.findIndex ▲
				local idx = _result
				if idx ~= -1 then
					self.NetSignal:DisconnectAt(idx)
					self.Connected = false
				end
			end,
		}
		ref = _arg0
		self.connectionRefs[ref] = true
		return ref
	end
	function NetServerScriptSignal:Wait()
		return self.signalInstance:Wait()
	end
	function NetServerScriptSignal:WaitAsync()
		return TS.Promise.defer(function(resolve)
			local result = { self.signalInstance:Wait() }
			resolve(result)
		end)
	end
	function NetServerScriptSignal:GetCount()
		return #self.connections
	end
	function NetServerScriptSignal:DisconnectAt(index)
		local connection = self.connections[index + 1]
		if connection then
			connection:Disconnect()
			table.remove(self.connections, index + 1)
		end
		if #self.connections == 0 then
			self.defaultConnection = self.signalInstance:Connect(self.defaultConnectionDelegate)
		end
	end
	function NetServerScriptSignal:DisconnectAll()
		for _, connection in ipairs(self.connections) do
			connection:Disconnect()
		end
		table.clear(self.connections)
		for ref in pairs(self.connectionRefs) do
			ref.Connected = false
		end
		table.clear(self.connectionRefs)
		self.defaultConnection = self.signalInstance:Connect(self.defaultConnectionDelegate)
	end
end
return {
	NetServerScriptSignal = NetServerScriptSignal,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="195">
                  <Properties>
                    <string name="Name">ServerAsyncFunction</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.3.3
local TS = _G[script]
local _internal = TS.import(script, script.Parent.Parent, "internal")
local findOrCreateRemote = _internal.findOrCreateRemote
local IS_CLIENT = _internal.IS_CLIENT
local MiddlewareEvent = TS.import(script, script.Parent, "MiddlewareEvent").default
local CollectionService = game:GetService("CollectionService")
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local function isEventArgs(value)
	if #value < 2 then
		return false
	end
	local _binding = value
	local eventId = _binding[1]
	local data = _binding[2]
	return type(eventId) == "string" and type(data) == "table"
end
--[[
	*
	* An asynchronous function for two way communication between the client and server
]]
local ServerAsyncFunction
do
	local super = MiddlewareEvent
	ServerAsyncFunction = setmetatable({}, {
		__tostring = function()
			return "ServerAsyncFunction"
		end,
		__index = super,
	})
	ServerAsyncFunction.__index = ServerAsyncFunction
	function ServerAsyncFunction.new(...)
		local self = setmetatable({}, ServerAsyncFunction)
		return self:constructor(...) or self
	end
	function ServerAsyncFunction:constructor(name, middlewares)
		if middlewares == nil then
			middlewares = {}
		end
		super.constructor(self, middlewares)
		self.timeout = 10
		self.listeners = {}
		self.instance = findOrCreateRemote("AsyncRemoteFunction", name, function(instance)
			-- Default connection
			self.defaultHook = instance.OnServerEvent:Connect(ServerAsyncFunction.DefaultEventHook)
			CollectionService:AddTag(instance, "NetDefaultListener")
		end)
		local _arg0 = not IS_CLIENT
		assert(_arg0, "Cannot create a NetServerAsyncFunction on the client!")
	end
	function ServerAsyncFunction:GetInstance()
		return self.instance
	end
	function ServerAsyncFunction:SetCallTimeout(timeout)
		local _arg0 = timeout > 0
		assert(_arg0, "timeout must be a positive number")
		self.timeout = timeout
		return self
	end
	function ServerAsyncFunction:GetCallTimeout()
		return self.timeout
	end
	function ServerAsyncFunction:SetCallback(callback)
		if self.defaultHook ~= nil then
			self.defaultHook:Disconnect()
			self.defaultHook = nil
			CollectionService:RemoveTag(self.instance, "NetDefaultListener")
		end
		if self.connector then
			self.connector:Disconnect()
			self.connector = nil
		end
		self.connector = self.instance.OnServerEvent:Connect(TS.async(function(player, ...)
			local args = { ... }
			if isEventArgs(args) then
				local _binding = args
				local eventId = _binding[1]
				local data = _binding[2]
				local _result = self:_processMiddleware(callback)
				if _result ~= nil then
					_result = _result(player, unpack(data))
				end
				local result = _result
				if TS.Promise.is(result) then
					local _arg0 = function(promiseResult)
						self.instance:FireClient(player, eventId, promiseResult)
					end
					result:andThen(_arg0):catch(function(err)
						warn("[rbx-net] Failed to send response to client: " .. err)
					end)
				else
					self.instance:FireClient(player, eventId, result)
				end
			else
				warn("[rbx-net-async] Recieved message without eventId")
			end
		end))
	end
	ServerAsyncFunction.CallPlayerAsync = TS.async(function(self, player, ...)
		local args = { ... }
		local id = HttpService:GenerateGUID(false)
		local _fn = self.instance
		local _object = {}
		for _k, _v in pairs(args) do
			_object[_k] = _v
		end
		_fn:FireClient(player, id, _object)
		return TS.Promise.new(function(resolve, reject)
			local startTime = tick()
			local connection
			connection = self.instance.OnServerEvent:Connect(function(fromPlayer, ...)
				local recvArgs = { ... }
				local _binding = recvArgs
				local eventId = _binding[1]
				local data = _binding[2]
				if type(eventId) == "string" and data ~= nil then
					if player == player and eventId == id then
						connection:Disconnect()
						resolve(data)
					end
				end
			end)
			local _listeners = self.listeners
			local _arg1 = {
				connection = connection,
				timeout = self.timeout,
			}
			_listeners[id] = _arg1
			repeat
				do
					RunService.Stepped:Wait()
				end
			until not (connection.Connected and tick() < startTime + self.timeout)
			self.listeners[id] = nil
			if tick() >= startTime and connection.Connected then
				connection:Disconnect()
				reject("Request to client timed out")
			end
		end)
	end)
	ServerAsyncFunction.DefaultEventHook = function(player, ...)
		local args = { ... }
	end
end
local default = ServerAsyncFunction
return {
	default = default,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="196">
                  <Properties>
                    <string name="Name">ServerEvent</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.3.3
local TS = _G[script]
local _internal = TS.import(script, script.Parent.Parent, "internal")
local findOrCreateRemote = _internal.findOrCreateRemote
local IS_CLIENT = _internal.IS_CLIENT
local IS_RUNNING = _internal.IS_RUNNING
local MiddlewareEvent = TS.import(script, script.Parent, "MiddlewareEvent").default
local NetServerScriptSignal = TS.import(script, script.Parent, "NetServerScriptSignal").NetServerScriptSignal
--[[
	*
	* Interface for server listening events
]]
--[[
	*
	* Interface for server sender events
]]
local ServerEvent
do
	local super = MiddlewareEvent
	ServerEvent = setmetatable({}, {
		__tostring = function()
			return "ServerEvent"
		end,
		__index = super,
	})
	ServerEvent.__index = ServerEvent
	function ServerEvent.new(...)
		local self = setmetatable({}, ServerEvent)
		return self:constructor(...) or self
	end
	function ServerEvent:constructor(name, middlewares)
		if middlewares == nil then
			middlewares = {}
		end
		super.constructor(self, middlewares)
		local _arg0 = not IS_CLIENT
		assert(_arg0, "Cannot create a NetServerEvent on the client!")
		self.instance = findOrCreateRemote("RemoteEvent", name)
		self.connection = NetServerScriptSignal.new(self.instance.OnServerEvent, self.instance)
	end
	function ServerEvent:GetInstance()
		return self.instance
	end
	function ServerEvent:Connect(callback)
		return self.connection:Connect(function(player, ...)
			local args = { ... }
			local _result = self:_processMiddleware(callback)
			if _result ~= nil then
				_result(player, unpack(args))
			end
		end)
	end
	function ServerEvent:SendToAllPlayers(...)
		local args = { ... }
		if not IS_RUNNING then
			return nil
		end
		self.instance:FireAllClients(unpack(args))
	end
	function ServerEvent:SendToAllPlayersExcept(blacklist, ...)
		local args = { ... }
		if not IS_RUNNING then
			return nil
		end
		local Players = game:GetService("Players")
		if typeof(blacklist) == "Instance" then
			local _exp = Players:GetPlayers()
			local _arg0 = function(p)
				return p ~= blacklist
			end
			-- ▼ ReadonlyArray.filter ▼
			local _newValue = {}
			local _length = 0
			for _k, _v in ipairs(_exp) do
				if _arg0(_v, _k - 1, _exp) == true then
					_length += 1
					_newValue[_length] = _v
				end
			end
			-- ▲ ReadonlyArray.filter ▲
			local otherPlayers = _newValue
			for _, player in ipairs(otherPlayers) do
				self.instance:FireClient(player, unpack(args))
			end
		elseif type(blacklist) == "table" then
			for _, player in ipairs(Players:GetPlayers()) do
				if (table.find(blacklist, player) or 0) - 1 == -1 then
					self.instance:FireClient(player, unpack(args))
				end
			end
		end
	end
	function ServerEvent:SendToPlayer(player, ...)
		local args = { ... }
		if not IS_RUNNING then
			return nil
		end
		self.instance:FireClient(player, unpack(args))
	end
	function ServerEvent:SendToPlayers(players, ...)
		local args = { ... }
		if not IS_RUNNING then
			return nil
		end
		for _, player in ipairs(players) do
			self:SendToPlayer(player, unpack(args))
		end
	end
end
return {
	default = ServerEvent,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="197">
                  <Properties>
                    <string name="Name">ServerFunction</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.3.3
local TS = _G[script]
local _internal = TS.import(script, script.Parent.Parent, "internal")
local findOrCreateRemote = _internal.findOrCreateRemote
local IS_SERVER = _internal.IS_SERVER
local MiddlewareFunction = TS.import(script, script.Parent, "MiddlewareFunction").default
local CollectionService = game:GetService("CollectionService")
local ServerFunction
do
	local super = MiddlewareFunction
	ServerFunction = setmetatable({}, {
		__tostring = function()
			return "ServerFunction"
		end,
		__index = super,
	})
	ServerFunction.__index = ServerFunction
	function ServerFunction.new(...)
		local self = setmetatable({}, ServerFunction)
		return self:constructor(...) or self
	end
	function ServerFunction:constructor(name, middlewares)
		if middlewares == nil then
			middlewares = {}
		end
		super.constructor(self, middlewares)
		self.instance = findOrCreateRemote("RemoteFunction", name, function(instance)
			-- Default listener
			instance.OnServerInvoke = ServerFunction.DefaultFunctionHook
			CollectionService:AddTag(instance, "NetDefaultListener")
		end)
		assert(IS_SERVER, "Cannot create a Net.ServerFunction on the Client!")
	end
	function ServerFunction:GetInstance()
		return self.instance
	end
	function ServerFunction:SetCallback(callback)
		if CollectionService:HasTag(self.instance, "NetDefaultListener") then
			CollectionService:RemoveTag(self.instance, "NetDefaultListener")
		end
		self.instance.OnServerInvoke = function(player, ...)
			local args = { ... }
			local _result = self:_processMiddleware(callback)
			if _result ~= nil then
				_result = _result(player, unpack(args))
			end
			local result = _result
			if TS.Promise.is(result) then
				warn("[rbx-net] WARNING: Promises should be used with an AsyncFunction!")
				local success, value = result:await()
				if success then
					return value
				else
					error(value)
				end
			end
			return result
		end
	end
	ServerFunction.DefaultFunctionHook = function()
		-- TODO: 2.2 make usable for analytics?
		-- Although, unlike `Event`, this will need to be part of `SetCallback`'s stuff.
		return nil
	end
end
return {
	default = ServerFunction,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="198">
                  <Properties>
                    <string name="Name">ServerMessagingEvent</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.3.3
local TS = _G[script]
local _ExperienceBroadcastEvent = TS.import(script, script.Parent.Parent, "messaging", "ExperienceBroadcastEvent")
local ExperienceBroadcastEvent = _ExperienceBroadcastEvent.default
local isSubscriptionMessage = _ExperienceBroadcastEvent.isSubscriptionMessage
local _internal = TS.import(script, script.Parent.Parent, "internal")
local getGlobalRemote = _internal.getGlobalRemote
local IS_CLIENT = _internal.IS_CLIENT
local isLuaTable = _internal.isLuaTable
local ServerEvent = TS.import(script, script.Parent, "ServerEvent").default
local Players = game:GetService("Players")
local function isTargetedSubscriptionMessage(value)
	if isSubscriptionMessage(value) then
		if isLuaTable(value.Data) then
			return value.Data.InnerData ~= nil
		end
	end
	return false
end
--[[
	*
	* Similar to a ServerEvent, but works across all servers.
]]
local ServerMessagingEvent
do
	ServerMessagingEvent = setmetatable({}, {
		__tostring = function()
			return "ServerMessagingEvent"
		end,
	})
	ServerMessagingEvent.__index = ServerMessagingEvent
	function ServerMessagingEvent.new(...)
		local self = setmetatable({}, ServerMessagingEvent)
		return self:constructor(...) or self
	end
	function ServerMessagingEvent:constructor(name)
		self.instance = ServerEvent.new(getGlobalRemote(name))
		self.event = ExperienceBroadcastEvent.new(name)
		local _arg0 = not IS_CLIENT
		assert(_arg0, "Cannot create a Net.GlobalServerEvent on the Client!")
		self.eventHandler = self.event:Connect(function(message)
			if isTargetedSubscriptionMessage(message) then
				self:recievedMessage(message.Data)
			else
				warn("[rbx-net] Recieved malformed message for ServerGameEvent: " .. name)
			end
		end)
	end
	function ServerMessagingEvent:getPlayersMatchingId(matching)
		if type(matching) == "number" then
			return Players:GetPlayerByUserId(matching)
		else
			local players = {}
			for _, id in ipairs(matching) do
				local player = Players:GetPlayerByUserId(id)
				if player then
					table.insert(players, player)
				end
			end
			return players
		end
	end
	function ServerMessagingEvent:recievedMessage(message)
		if message.TargetIds then
			local players = self:getPlayersMatchingId(message.TargetIds)
			if players then
				self.instance:SendToPlayers(players, unpack(message.InnerData))
			end
		elseif message.TargetId ~= nil then
			local player = self:getPlayersMatchingId(message.TargetId)
			if player then
				self.instance:SendToPlayer(player, unpack(message.InnerData))
			end
		else
			self.instance:SendToAllPlayers(unpack(message.InnerData))
		end
	end
	function ServerMessagingEvent:Connect(serverListener)
		return self.event:Connect(function(data, sent)
			serverListener(data, sent)
		end)
	end
	function ServerMessagingEvent:SendToAllServers(...)
		local args = { ... }
		self.event:SendToAllServers({
			InnerData = args,
		})
	end
	function ServerMessagingEvent:SendToServer(jobId, ...)
		local args = { ... }
		self.event:SendToServer(jobId, {
			InnerData = args,
		})
	end
	function ServerMessagingEvent:SendToUserId(userId, ...)
		local args = { ... }
		local player = Players:GetPlayerByUserId(userId)
		-- If the player exists in this instance, just send it straight to them.
		if player then
			self.instance:SendToPlayer(player, unpack(args))
		else
			self.event:SendToAllServers({
				InnerData = args,
				TargetId = userId,
			})
		end
	end
	function ServerMessagingEvent:SendToUserIds(userIds, ...)
		local args = { ... }
		-- Check to see if any of these users are in this server first, and handle accordingly.
		for _, targetId in ipairs(userIds) do
			local player = Players:GetPlayerByUserId(targetId)
			if player then
				self.instance:SendToPlayer(player, unpack(args))
				table.remove(userIds, targetId + 1)
			end
		end
		if #userIds > 0 then
			self.event:SendToAllServers({
				InnerData = args,
				TargetIds = userIds,
			})
		end
	end
end
return {
	default = ServerMessagingEvent,
}
]]></string>
                  </Properties>
                </Item>
              </Item>
            </Item>
          </Item>
          <Item class="ModuleScript" referent="199">
            <Properties>
              <string name="Name">object-utils</string>
              <string name="Source"><![CDATA[local HttpService = game:GetService("HttpService")

local Object = {}

function Object.keys(object)
	local result = table.create(#object)
	for key in pairs(object) do
		result[#result + 1] = key
	end
	return result
end

function Object.values(object)
	local result = table.create(#object)
	for _, value in pairs(object) do
		result[#result + 1] = value
	end
	return result
end

function Object.entries(object)
	local result = table.create(#object)
	for key, value in pairs(object) do
		result[#result + 1] = { key, value }
	end
	return result
end

function Object.assign(toObj, ...)
	for i = 1, select("#", ...) do
		local arg = select(i, ...)
		if type(arg) == "table" then
			for key, value in pairs(arg) do
				toObj[key] = value
			end
		end
	end
	return toObj
end

function Object.copy(object)
	local result = table.create(#object)
	for k, v in pairs(object) do
		result[k] = v
	end
	return result
end

local function deepCopyHelper(object, encountered)
	local result = table.create(#object)
	encountered[object] = result

	for k, v in pairs(object) do
		if type(k) == "table" then
			k = encountered[k] or deepCopyHelper(k, encountered)
		end

		if type(v) == "table" then
			v = encountered[v] or deepCopyHelper(v, encountered)
		end

		result[k] = v
	end

	return result
end

function Object.deepCopy(object)
	return deepCopyHelper(object, {})
end

function Object.deepEquals(a, b)
	-- a[k] == b[k]
	for k in pairs(a) do
		local av = a[k]
		local bv = b[k]
		if type(av) == "table" and type(bv) == "table" then
			local result = Object.deepEquals(av, bv)
			if not result then
				return false
			end
		elseif av ~= bv then
			return false
		end
	end

	-- extra keys in b
	for k in pairs(b) do
		if a[k] == nil then
			return false
		end
	end

	return true
end

function Object.toString(data)
	return HttpService:JSONEncode(data)
end

function Object.isEmpty(object)
	return next(object) == nil
end

function Object.fromEntries(entries)
	local entriesLen = #entries

	local result = table.create(entriesLen)
	if entries then
		for i = 1, entriesLen do
			local pair = entries[i]
			result[pair[1]] = pair[2]
		end
	end
	return result
end

return Object
]]></string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="200">
            <Properties>
              <string name="Name">pretty-react-hooks</string>
              <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local exports = {}
for _k, _v in TS.import(script, TS.getModule(script, "@rbxts", "flipper").src) or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "utils", "binding") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "utils", "hoarcekat") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "utils", "math") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "utils", "motor") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "utils", "testez") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "use-async") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "use-async-callback") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "use-async-effect") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "use-binding-listener") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "use-binding-state") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "use-camera") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "use-composed-ref") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "use-debounce-callback") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "use-debounce-effect") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "use-debounce-state") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "use-defer-callback") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "use-defer-effect") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "use-defer-state") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "use-event-listener") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "use-interval") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "use-key-press") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "use-latest") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "use-latest-callback") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "use-lifetime") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "use-motor") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "use-mount-effect") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "use-mouse") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "use-previous") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "use-property") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "use-property-binding") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "use-throttle-callback") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "use-throttle-effect") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "use-throttle-state") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "use-timeout") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "use-timer") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "use-unmount-effect") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "use-update") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "use-update-effect") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "use-viewport") or {} do
	exports[_k] = _v
end
return exports
]]></string>
            </Properties>
            <Item class="ModuleScript" referent="201">
              <Properties>
                <string name="Name">use-async</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local exports = {}
for _k, _v in TS.import(script, script, "use-async") or {} do
	exports[_k] = _v
end
return exports
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="202">
                <Properties>
                  <string name="Name">use-async</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local useEffect = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS")).useEffect
local useAsyncCallback = TS.import(script, script.Parent.Parent, "use-async-callback").useAsyncCallback
--[[
	*
	* Returns a tuple containing the result and status of a promise. When the
	* dependencies change, pending promises will be cancelled, and a new promise
	* will be started.
	* @param callback The async callback.
	* @param deps The dependencies to watch. Defaults to an empty array.
	* @returns The result and status of the promise.
]]
local function useAsync(callback, deps)
	if deps == nil then
		deps = {}
	end
	local state, asyncCallback = useAsyncCallback(callback)
	useEffect(function()
		asyncCallback()
	end, deps)
	return state.value, state.status, state.message
end
return {
	useAsync = useAsync,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="203">
                <Properties>
                  <string name="Name">use-async.spec</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
-- / <reference types="@rbxts/testez/globals" />
local renderHook = TS.import(script, script.Parent.Parent, "utils", "testez").renderHook
local useAsync = TS.import(script, script.Parent, "use-async").useAsync
return function()
	it("should run the promise on mount", function()
		local _binding = renderHook(function()
			local value, status, message = useAsync(function()
				return TS.Promise.resolve("foo")
			end)
			return {
				value = value,
				status = status,
				message = message,
			}
		end)
		local result = _binding.result
		expect(result.current.status).to.be.equal(TS.Promise.Status.Resolved)
		expect(result.current.value).to.be.equal("foo")
		expect(result.current.message).to.never.be.ok()
	end)
	it("should run the promise when the dependencies change", function()
		local _binding = renderHook(function(deps)
			local value, status, message = useAsync(function()
				return TS.Promise.resolve(deps[1])
			end, { deps })
			return {
				value = value,
				status = status,
				message = message,
			}
		end, {
			initialProps = { 0 },
		})
		local result = _binding.result
		local rerender = _binding.rerender
		expect(result.current.status).to.be.equal(TS.Promise.Status.Resolved)
		expect(result.current.value).to.be.equal(0)
		expect(result.current.message).to.never.be.ok()
		rerender({ 1 })
		expect(result.current.status).to.be.equal(TS.Promise.Status.Resolved)
		expect(result.current.value).to.be.equal(1)
		expect(result.current.message).to.never.be.ok()
	end)
	it("should cancel the previous promise", function()
		local completions = 0
		local _binding = renderHook(function(deps)
			local value, status, message = useAsync(function()
				local _exp = TS.Promise.delay(0)
				local _arg0 = function()
					completions += 1
					return completions
				end
				return _exp:andThen(_arg0)
			end, { deps })
			return {
				value = value,
				status = status,
				message = message,
			}
		end, {
			initialProps = { 0 },
		})
		local result = _binding.result
		local rerender = _binding.rerender
		rerender({ 1 })
		rerender({ 2 })
		rerender({ 3 })
		expect(completions).to.be.equal(0)
		expect(result.current.status).to.be.equal(TS.Promise.Status.Started)
		expect(result.current.value).to.never.be.ok()
		expect(result.current.message).to.never.be.ok()
		task.wait(0.04)
		expect(completions).to.be.equal(1)
		expect(result.current.status).to.be.equal(TS.Promise.Status.Resolved)
		expect(result.current.value).to.be.equal(1)
		expect(result.current.message).to.never.be.ok()
	end)
	it("should update the state when the promise resolves", function()
		local _binding = renderHook(function()
			local value, status, message = useAsync(function()
				local _exp = TS.Promise.delay(0)
				local _arg0 = function()
					return "foo"
				end
				return _exp:andThen(_arg0)
			end)
			return {
				value = value,
				status = status,
				message = message,
			}
		end)
		local result = _binding.result
		expect(result.current.status).to.be.equal(TS.Promise.Status.Started)
		expect(result.current.value).to.never.be.ok()
		expect(result.current.message).to.never.be.ok()
		task.wait(0.04)
		expect(result.current.status).to.be.equal(TS.Promise.Status.Resolved)
		expect(result.current.value).to.be.equal("foo")
		expect(result.current.message).to.never.be.ok()
	end)
	it("should cancel the promise on unmount", function()
		local completions = 0
		local _binding = renderHook(function()
			useAsync(function()
				local _exp = TS.Promise.delay(0)
				local _arg0 = function()
					completions += 1
					return completions
				end
				return _exp:andThen(_arg0)
			end)
		end)
		local unmount = _binding.unmount
		unmount()
		task.wait(0.04)
		expect(completions).to.be.equal(0)
	end)
end
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="204">
              <Properties>
                <string name="Name">use-async-callback</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local exports = {}
for _k, _v in TS.import(script, script, "use-async-callback") or {} do
	exports[_k] = _v
end
return exports
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="205">
                <Properties>
                  <string name="Name">use-async-callback</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local _roact = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS"))
local useCallback = _roact.useCallback
local useRef = _roact.useRef
local useState = _roact.useState
local useUnmountEffect = TS.import(script, script.Parent.Parent, "use-unmount-effect").useUnmountEffect
--[[
	*
	* Returns a tuple containing the current state of the promise and a callback
	* to start a new promise. Calling it will cancel any previous promise.
	* @param callback The async callback.
	* @returns The state and a new callback.
]]
local function useAsyncCallback(callback)
	local currentPromise = useRef()
	local state, setState = useState({
		status = TS.Promise.Status.Started,
	})
	local execute = useCallback(function(...)
		local args = { ... }
		local _result = currentPromise.current
		if _result ~= nil then
			_result:cancel()
		end
		if state.status ~= TS.Promise.Status.Started then
			setState({
				status = TS.Promise.Status.Started,
			})
		end
		local promise = callback(unpack(args))
		local _arg0 = function(value)
			return setState({
				status = promise:getStatus(),
				value = value,
			})
		end
		local _arg1 = function(message)
			return setState({
				status = promise:getStatus(),
				message = message,
			})
		end
		promise:andThen(_arg0, _arg1)
		currentPromise.current = promise
		return currentPromise.current
	end, { callback })
	useUnmountEffect(function()
		local _result = currentPromise.current
		if _result ~= nil then
			_result:cancel()
		end
	end)
	return state, execute
end
return {
	useAsyncCallback = useAsyncCallback,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="206">
                <Properties>
                  <string name="Name">use-async-callback.spec</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
-- / <reference types="@rbxts/testez/globals" />
local renderHook = TS.import(script, script.Parent.Parent, "utils", "testez").renderHook
local useAsyncCallback = TS.import(script, script.Parent, "use-async-callback").useAsyncCallback
return function()
	it("should return the current state and a callback", function()
		local _binding = renderHook(function()
			local state, callback = useAsyncCallback(function()
				return TS.Promise.resolve("foo")
			end)
			return {
				state = state,
				callback = callback,
			}
		end)
		local result = _binding.result
		expect(result.current.state.status).to.be.equal(TS.Promise.Status.Started)
		expect(result.current.state.value).to.never.be.ok()
		expect(result.current.state.message).to.never.be.ok()
		expect(result.current.callback).to.be.a("function")
	end)
	it("should update the state when the promise resolves", function()
		local _binding = renderHook(function()
			local state, callback = useAsyncCallback(function()
				return TS.Promise.resolve("foo")
			end)
			return {
				state = state,
				callback = callback,
			}
		end)
		local result = _binding.result
		result.current.callback()
		expect(result.current.state.status).to.be.equal(TS.Promise.Status.Resolved)
		expect(result.current.state.value).to.be.equal("foo")
		expect(result.current.state.message).to.never.be.ok()
	end)
	it("should update the state when the promise rejects", function()
		local _binding = renderHook(function()
			local state, callback = useAsyncCallback(function()
				return TS.Promise.reject("foo")
			end)
			return {
				state = state,
				callback = callback,
			}
		end)
		local result = _binding.result
		result.current.callback()
		expect(result.current.state.status).to.be.equal(TS.Promise.Status.Rejected)
		expect(result.current.state.value).to.never.be.ok()
		expect(result.current.state.message).to.be.equal("foo")
	end)
	it("should cancel the previous promise", function()
		local completions = 0
		local _binding = renderHook(function()
			local state, callback = useAsyncCallback(function()
				local _exp = TS.Promise.delay(0)
				local _arg0 = function()
					completions += 1
					return completions
				end
				return _exp:andThen(_arg0)
			end)
			return {
				state = state,
				callback = callback,
			}
		end)
		local result = _binding.result
		result.current.callback()
		result.current.callback()
		result.current.callback()
		expect(completions).to.be.equal(0)
		expect(result.current.state.status).to.be.equal(TS.Promise.Status.Started)
		expect(result.current.state.value).to.never.be.ok()
		expect(result.current.state.message).to.never.be.ok()
		task.wait(0.04)
		expect(completions).to.be.equal(1)
		expect(result.current.state.status).to.be.equal(TS.Promise.Status.Resolved)
		expect(result.current.state.value).to.be.equal(1)
		expect(result.current.state.message).to.never.be.ok()
	end)
	it("should cancel when unmounting", function()
		local completions = 0
		local _binding = renderHook(function()
			local state, callback = useAsyncCallback(function()
				local _exp = TS.Promise.delay(0)
				local _arg0 = function()
					completions += 1
					return completions
				end
				return _exp:andThen(_arg0)
			end)
			return {
				state = state,
				callback = callback,
			}
		end)
		local result = _binding.result
		local unmount = _binding.unmount
		result.current.callback()
		unmount()
		task.wait(0.04)
		expect(completions).to.be.equal(0)
	end)
end
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="207">
              <Properties>
                <string name="Name">use-async-effect</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local exports = {}
for _k, _v in TS.import(script, script, "use-async-effect") or {} do
	exports[_k] = _v
end
return exports
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="208">
                <Properties>
                  <string name="Name">use-async-effect</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local useEffect = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS")).useEffect
--[[
	*
	* Runs an async effect and cancels the promise when unmounting the effect.
	* Note that effects paused by `await` still run while cancelled, so prefer
	* to use promise chaining instead.
	* @param effect The async effect to run.
	* @param deps The dependencies to run the effect on.
]]
local function useAsyncEffect(effect, deps)
	useEffect(function()
		local promise = effect()
		return function()
			promise:cancel()
		end
	end, deps)
end
return {
	useAsyncEffect = useAsyncEffect,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="209">
                <Properties>
                  <string name="Name">use-async-effect.spec</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
-- / <reference types="@rbxts/testez/globals" />
local renderHook = TS.import(script, script.Parent.Parent, "utils", "testez").renderHook
local useAsyncEffect = TS.import(script, script.Parent, "use-async-effect").useAsyncEffect
return function()
	it("should run the effect", function()
		local calls = 0
		renderHook(function()
			return useAsyncEffect(TS.async(function()
				local _original = calls
				calls += 1
				return _original
			end), {})
		end)
		expect(calls).to.equal(1)
	end)
	it("should run the effect when the dependencies change", function()
		local calls = 0
		local _binding = renderHook(function(deps)
			return useAsyncEffect(TS.async(function()
				local _original = calls
				calls += 1
				return _original
			end), deps)
		end, {
			initialProps = { 0 },
		})
		local rerender = _binding.rerender
		expect(calls).to.equal(1)
		rerender({ 1 })
		expect(calls).to.equal(2)
	end)
	it("should cancel the effect when unmounting", function()
		local calls = 0
		local _binding = renderHook(function()
			useAsyncEffect(TS.async(function()
				calls += 1
				local _exp = TS.Promise.delay(0)
				local _arg0 = function()
					calls += 1
				end
				return _exp:andThen(_arg0)
			end), {})
		end)
		local unmount = _binding.unmount
		expect(calls).to.equal(1)
		unmount()
		expect(calls).to.equal(1)
	end)
	it("should allow promises to complete", function()
		local calls = 0
		renderHook(function()
			useAsyncEffect(TS.async(function()
				calls += 1
				local _exp = TS.Promise.delay(0)
				local _arg0 = function()
					calls += 1
				end
				return _exp:andThen(_arg0)
			end), {})
		end)
		expect(calls).to.equal(1)
		task.wait(0.04)
		expect(calls).to.equal(2)
	end)
end
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="210">
              <Properties>
                <string name="Name">use-binding-listener</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local exports = {}
for _k, _v in TS.import(script, script, "use-binding-listener") or {} do
	exports[_k] = _v
end
return exports
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="211">
                <Properties>
                  <string name="Name">use-binding-listener</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local _roact = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS"))
local useEffect = _roact.useEffect
local useMemo = _roact.useMemo
local useLatestCallback = TS.import(script, script.Parent.Parent, "use-latest-callback").useLatestCallback
local _binding = TS.import(script, script.Parent.Parent, "utils", "binding")
local getBindingApi = _binding.getBindingApi
local isBinding = _binding.isBinding
--[[
	*
	* Subscribes to a binding and calls the given listener when the binding
	* updates. If the value passed is not a binding, the listener will be called
	* with the value.
	*
	* The `listener` function is safe to not be memoized, as it will only be
	* called when the binding updates.
	*
	* @param binding The binding to subscribe to.
	* @param listener The function to call when the binding updates.
]]
local function useBindingListener(binding, listener)
	local api = useMemo(function()
		return if isBinding(binding) then getBindingApi(binding) else nil
	end, { binding })
	local listenerCallback = useLatestCallback(listener)
	useEffect(function()
		if api then
			listenerCallback(api.getValue())
			return api.subscribe(listenerCallback)
		else
			listenerCallback(binding)
		end
	end, { binding })
end
return {
	useBindingListener = useBindingListener,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="212">
                <Properties>
                  <string name="Name">use-binding-listener.spec</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
-- / <reference types="@rbxts/testez/globals" />
local createBinding = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS")).createBinding
local renderHook = TS.import(script, script.Parent.Parent, "utils", "testez").renderHook
local useBindingListener = TS.import(script, script.Parent, "use-binding-listener").useBindingListener
return function()
	it("should call listener on mount", function()
		local binding = createBinding(0)
		local result
		renderHook(function(_param)
			local listener = _param.listener
			return useBindingListener(binding, listener)
		end, {
			initialProps = {
				listener = function(value)
					result = value
					return result
				end,
			},
		})
		expect(result).to.equal(0)
	end)
	it("should call listener when the binding updates", function()
		local binding, setBinding = createBinding(0)
		local result
		local _binding = renderHook(function(_param)
			local listener = _param.listener
			return useBindingListener(binding, listener)
		end, {
			initialProps = {
				listener = function(value)
					result = value
					return result
				end,
			},
		})
		local rerender = _binding.rerender
		expect(result).to.equal(0)
		setBinding(1)
		rerender()
		expect(result).to.equal(1)
	end)
	it("should not call listener after unrelated rerender", function()
		local binding = createBinding(0)
		local _binding = renderHook(function(_param)
			local listener = _param.listener
			return useBindingListener(binding, listener)
		end, {
			initialProps = {
				listener = function() end,
			},
		})
		local rerender = _binding.rerender
		rerender({
			listener = function()
				error("listener was called when the binding did not update")
			end,
		})
		rerender()
	end)
	it("should not call listener if the listener changes", function()
		local binding = createBinding(0)
		local _binding = renderHook(function(_param)
			local listener = _param.listener
			return useBindingListener(binding, listener)
		end, {
			initialProps = {
				listener = function() end,
			},
		})
		local rerender = _binding.rerender
		rerender({
			listener = function()
				error("listener was called when the listener changed")
			end,
		})
		rerender()
	end)
	it("should call listener if the passed binding changes", function()
		local bindingA = createBinding(0)
		local bindingB = createBinding(1)
		local result
		local _binding = renderHook(function(_param)
			local binding = _param.binding
			return useBindingListener(binding, function(value)
				result = value
				return result
			end)
		end, {
			initialProps = {
				binding = bindingA,
			},
		})
		local rerender = _binding.rerender
		expect(result).to.equal(0)
		rerender({
			binding = bindingB,
		})
		expect(result).to.equal(1)
	end)
	it("should call listener if passed value changes", function()
		local result
		local _binding = renderHook(function(_param)
			local value = _param.value
			return useBindingListener(value, function(value)
				result = value
				return result
			end)
		end, {
			initialProps = {
				value = 0,
			},
		})
		local rerender = _binding.rerender
		expect(result).to.equal(0)
		rerender({
			value = 1,
		})
		expect(result).to.equal(1)
	end)
end
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="213">
              <Properties>
                <string name="Name">use-binding-state</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local exports = {}
for _k, _v in TS.import(script, script, "use-binding-state") or {} do
	exports[_k] = _v
end
return exports
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="214">
                <Properties>
                  <string name="Name">use-binding-state</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local useState = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS")).useState
local useBindingListener = TS.import(script, script.Parent.Parent, "use-binding-listener").useBindingListener
local getBindingValue = TS.import(script, script.Parent.Parent, "utils", "binding").getBindingValue
--[[
	*
	* Returns the value of a binding. If the binding updates, the component will
	* be re-rendered. Non-binding values will be returned as-is.
	* @param binding The binding to get the value of.
	* @returns The value of the binding.
]]
local function useBindingState(binding)
	local value, setValue = useState(function()
		return getBindingValue(binding)
	end)
	useBindingListener(binding, setValue)
	return value
end
return {
	useBindingState = useBindingState,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="215">
                <Properties>
                  <string name="Name">use-binding-state.spec</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
-- / <reference types="@rbxts/testez/globals" />
local createBinding = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS")).createBinding
local renderHook = TS.import(script, script.Parent.Parent, "utils", "testez").renderHook
local useBindingState = TS.import(script, script.Parent, "use-binding-state").useBindingState
return function()
	it("should return the current value", function()
		local binding = createBinding(0)
		local _binding = renderHook(function()
			return useBindingState(binding)
		end)
		local result = _binding.result
		expect(result.current).to.equal(0)
	end)
	it("should update the value when the binding updates", function()
		local binding, setBinding = createBinding(0)
		local _binding = renderHook(function()
			return useBindingState(binding)
		end)
		local result = _binding.result
		expect(result.current).to.equal(0)
		setBinding(1)
		expect(result.current).to.equal(1)
	end)
	it("should not update the value after unrelated rerender", function()
		local binding = createBinding(0)
		local _binding = renderHook(function()
			return useBindingState(binding)
		end)
		local result = _binding.result
		local rerender = _binding.rerender
		expect(result.current).to.equal(0)
		rerender()
		expect(result.current).to.equal(0)
	end)
	it("should update the value if the binding changes", function()
		local binding = createBinding(0)
		local _binding = renderHook(function(_param)
			local binding = _param.binding
			return useBindingState(binding)
		end, {
			initialProps = {
				binding = binding,
			},
		})
		local result = _binding.result
		local rerender = _binding.rerender
		expect(result.current).to.equal(0)
		rerender({
			binding = (createBinding(1)),
		})
		expect(result.current).to.equal(1)
	end)
end
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="216">
              <Properties>
                <string name="Name">use-camera</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local exports = {}
for _k, _v in TS.import(script, script, "use-camera") or {} do
	exports[_k] = _v
end
return exports
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="217">
                <Properties>
                  <string name="Name">use-camera</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local useState = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS")).useState
local Workspace = TS.import(script, TS.getModule(script, "@rbxts", "services")).Workspace
local useEventListener = TS.import(script, script.Parent.Parent, "use-event-listener").useEventListener
--[[
	*
	* Returns the current camera. Updates when the current camera changes.
	* @returns A camera instance.
]]
local function useCamera()
	local camera, setCamera = useState(Workspace.CurrentCamera)
	useEventListener(Workspace:GetPropertyChangedSignal("CurrentCamera"), function()
		if Workspace.CurrentCamera then
			setCamera(Workspace.CurrentCamera)
		end
	end)
	return camera
end
return {
	useCamera = useCamera,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="218">
                <Properties>
                  <string name="Name">use-camera.spec</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
-- / <reference types="@rbxts/testez/globals" />
local _services = TS.import(script, TS.getModule(script, "@rbxts", "services"))
local RunService = _services.RunService
local Workspace = _services.Workspace
local renderHook = TS.import(script, script.Parent.Parent, "utils", "testez").renderHook
local useCamera = TS.import(script, script.Parent, "use-camera").useCamera
return function()
	it("should return current camera", function()
		local _binding = renderHook(function()
			return useCamera()
		end)
		local result = _binding.result
		expect(result.current).to.equal(Workspace.CurrentCamera)
	end)
	it("should update when current camera changes", function()
		local _binding = renderHook(function()
			return useCamera()
		end)
		local result = _binding.result
		local rerender = _binding.rerender
		expect(result.current).to.equal(Workspace.CurrentCamera)
		local _result = Workspace.CurrentCamera
		if _result ~= nil then
			_result:Destroy()
		end
		RunService.Heartbeat:Wait()
		rerender()
		expect(result.current).to.equal(Workspace.CurrentCamera)
	end)
end
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="219">
              <Properties>
                <string name="Name">use-composed-ref</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local exports = {}
for _k, _v in TS.import(script, script, "use-composed-ref") or {} do
	exports[_k] = _v
end
return exports
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="220">
                <Properties>
                  <string name="Name">use-composed-ref</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local useMemo = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS")).useMemo
local useLatestCallback = TS.import(script, script.Parent.Parent, "use-latest-callback").useLatestCallback
--[[
	*
	* Composes multiple ref functions into a single ref function and memoizes
	* the result.
	*
	* To prevent excess ref calls, the composed ref is only created once on mount.
	* However, it will call the latest refs passed, so it is safe to pass in refs
	* that might change.
	*
	* @param refs The ref functions to compose.
	* @returns A ref function that calls all of the ref functions passed in.
]]
local composeRefs
local function useComposedRef(...)
	local refs = { ... }
	local composedRef = useMemo(function()
		return composeRefs(unpack(refs))
	end, refs)
	-- Make sure the function returned never changes when dependencies change.
	-- Otherwise, the ref will be called again, and might cause other problems.
	return useLatestCallback(composedRef)
end
--[[
	*
	* Composes multiple ref functions into a single ref function.
	* @param refs The ref functions to compose.
	* @returns A ref function that calls all of the ref functions passed in.
]]
function composeRefs(...)
	local refs = { ... }
	-- ▼ ReadonlyArray.filterUndefined ▼
	local _length = 0
	for _i in refs do
		if _i > _length then
			_length = _i
		end
	end
	local _result = {}
	local _resultLength = 0
	for _i = 1, _length do
		local _v = refs[_i]
		if _v ~= nil then
			_resultLength += 1
			_result[_resultLength] = _v
		end
	end
	-- ▲ ReadonlyArray.filterUndefined ▲
	local refsDefined = _result
	return function(rbx)
		for _, ref in refsDefined do
			ref(rbx)
		end
	end
end
return {
	useComposedRef = useComposedRef,
	composeRefs = composeRefs,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="221">
                <Properties>
                  <string name="Name">use-composed-ref.spec</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
-- / <reference types="@rbxts/testez/globals" />
local shallowEqual = TS.import(script, script.Parent.Parent, "utils", "shallow-equal").shallowEqual
local renderHook = TS.import(script, script.Parent.Parent, "utils", "testez").renderHook
local useComposedRef = TS.import(script, script.Parent, "use-composed-ref").useComposedRef
return function()
	it("should call all refs passed in", function()
		local results = {}
		local _binding = renderHook(function()
			local ref = useComposedRef(function(value)
				if value == nil then
					value = ""
				end
				results[1] = value
				return results[1]
			end, function(value)
				if value == nil then
					value = ""
				end
				results[2] = value
				return results[2]
			end, function(value)
				if value == nil then
					value = ""
				end
				results[3] = value
				return results[3]
			end)
			return ref
		end)
		local rerender = _binding.rerender
		local result = _binding.result
		expect(shallowEqual(results, {})).to.equal(true)
		rerender()
		expect(shallowEqual(results, {})).to.equal(true)
		result.current("foo")
		expect(shallowEqual(results, { "foo", "foo", "foo" })).to.equal(true)
	end)
	it("should skip refs that are undefined", function()
		local results = {}
		local _binding = renderHook(function()
			return useComposedRef(function(value)
				results[1] = value
				return results[1]
			end, nil, function(value)
				results[2] = value
				return results[2]
			end, nil, function(value)
				results[3] = value
				return results[3]
			end)
		end)
		local rerender = _binding.rerender
		local result = _binding.result
		expect(shallowEqual(results, {})).to.equal(true)
		rerender()
		expect(shallowEqual(results, {})).to.equal(true)
		result.current("foo")
		expect(shallowEqual(results, { "foo", "foo", "foo" })).to.equal(true)
	end)
	it("should call the latest refs", function()
		local calls = {
			a = 0,
			b = 0,
		}
		local _binding = renderHook(function(refs)
			return useComposedRef(unpack(refs))
		end, {
			initialProps = {},
		})
		local rerender = _binding.rerender
		local result = _binding.result
		rerender({ function(key)
			if key == nil then
				key = "a"
			end
			local _original = calls[key]
			calls[key] += 1
			return _original
		end, function(key)
			if key == nil then
				key = "a"
			end
			local _original = calls[key]
			calls[key] += 1
			return _original
		end })
		result.current("a")
		expect(calls.a).to.equal(2)
		expect(calls.b).to.equal(0)
		rerender({ function(key)
			if key == nil then
				key = "b"
			end
			local _original = calls[key]
			calls[key] += 1
			return _original
		end, function(key)
			if key == nil then
				key = "b"
			end
			local _original = calls[key]
			calls[key] += 1
			return _original
		end })
		result.current("b")
		expect(calls.a).to.equal(2)
		expect(calls.b).to.equal(2)
	end)
end
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="222">
              <Properties>
                <string name="Name">use-debounce-callback</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local exports = {}
for _k, _v in TS.import(script, script, "use-debounce-callback") or {} do
	exports[_k] = _v
end
return exports
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="223">
                <Properties>
                  <string name="Name">use-debounce-callback</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local useMemo = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS")).useMemo
local debounce = TS.import(script, TS.getModule(script, "@rbxts", "set-timeout").out).debounce
local useLatest = TS.import(script, script.Parent.Parent, "use-latest").useLatest
local useUnmountEffect = TS.import(script, script.Parent.Parent, "use-unmount-effect").useUnmountEffect
--[[
	*
	* Creates a debounced function that delays invoking `callback` until after `wait`
	* seconds have elapsed since the last time the debounced function was invoked.
	* The `callback` is invoked with the last arguments provided to the debounced
	* function. Subsequent calls to the debounced function return the result of
	* the last `callback` invocation.
	*
	* See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	* for details over the differences between `debounce` and `throttle`.
	*
	* @param callback The function to debounce.
	* @param options The options object.
	* @returns The new debounced function.
]]
local function useDebounceCallback(callback, options)
	if options == nil then
		options = {}
	end
	local callbackRef = useLatest(callback)
	local debounced = useMemo(function()
		return debounce(function(...)
			local args = { ... }
			return callbackRef.current(unpack(args))
		end, options.wait, options)
	end, {})
	useUnmountEffect(function()
		debounced.cancel()
	end)
	return {
		run = debounced,
		cancel = debounced.cancel,
		flush = debounced.flush,
		pending = debounced.pending,
	}
end
return {
	useDebounceCallback = useDebounceCallback,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="224">
                <Properties>
                  <string name="Name">use-debounce-callback.spec</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
-- / <reference types="@rbxts/testez/globals" />
local renderHook = TS.import(script, script.Parent.Parent, "utils", "testez").renderHook
local useDebounceCallback = TS.import(script, script.Parent, "use-debounce-callback").useDebounceCallback
return function()
	it("should return run, cancel, and flush", function()
		local count = 0
		local _binding = renderHook(function()
			return useDebounceCallback(function(amount)
				count += amount
				return count
			end, {
				wait = 0.02,
			})
		end)
		local result = _binding.result
		result.current.run(1)
		result.current.run(1)
		result.current.run(4)
		result.current.run(2)
		expect(count).to.equal(0)
		task.wait(0.04)
		expect(count).to.equal(2)
		result.current.run(4)
		expect(count).to.equal(2)
		task.wait(0.04)
		expect(count).to.equal(6)
		result.current.run(4)
		expect(count).to.equal(6)
		result.current.cancel()
		expect(count).to.equal(6)
		task.wait(0.04)
		expect(count).to.equal(6)
		result.current.run(1)
		expect(count).to.equal(6)
		result.current.flush()
		expect(count).to.equal(7)
		task.wait(0.04)
		expect(count).to.equal(7)
	end)
end
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="225">
              <Properties>
                <string name="Name">use-debounce-effect</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local exports = {}
for _k, _v in TS.import(script, script, "use-debounce-effect") or {} do
	exports[_k] = _v
end
return exports
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="226">
                <Properties>
                  <string name="Name">use-debounce-effect</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local useEffect = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS")).useEffect
local useDebounceCallback = TS.import(script, script.Parent.Parent, "use-debounce-callback").useDebounceCallback
local useUpdate = TS.import(script, script.Parent.Parent, "use-update").useUpdate
local useUpdateEffect = TS.import(script, script.Parent.Parent, "use-update-effect").useUpdateEffect
--[[
	*
	* Creates a debounced effect that delays invoking `effect` until after `wait`
	* seconds have elapsed since the last time the debounced function was invoked.
	*
	* See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	* for details over the differences between `debounce` and `throttle`.
	*
	* @param effect The effect to debounce.
	* @param dependencies The dependencies array.
	* @param options The options object.
]]
local function useDebounceEffect(effect, dependencies, options)
	local update = useUpdate()
	local _binding = useDebounceCallback(update, options)
	local run = _binding.run
	useEffect(function()
		return run()
	end, dependencies)
	useUpdateEffect(effect, { update })
end
return {
	useDebounceEffect = useDebounceEffect,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="227">
                <Properties>
                  <string name="Name">use-debounce-effect.spec</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
-- / <reference types="@rbxts/testez/globals" />
local renderHook = TS.import(script, script.Parent.Parent, "utils", "testez").renderHook
local useDebounceEffect = TS.import(script, script.Parent, "use-debounce-effect").useDebounceEffect
return function()
	it("should debounce the effect", function()
		local count = 0
		local _binding = renderHook(function(_param)
			local input = _param.input
			return useDebounceEffect(function()
				count += 1
			end, { input }, {
				wait = 0.02,
			})
		end, {
			initialProps = {
				input = 0,
			},
		})
		local rerender = _binding.rerender
		local unmount = _binding.unmount
		rerender({
			input = 0,
		})
		rerender({
			input = 1,
		})
		rerender({
			input = 0,
		})
		rerender({
			input = 1,
		})
		expect(count).to.equal(0)
		task.wait(0.04)
		expect(count).to.equal(1)
		rerender({
			input = 2,
		})
		expect(count).to.equal(1)
		task.wait(0.04)
		expect(count).to.equal(2)
		rerender({
			input = 2,
		})
		expect(count).to.equal(2)
		task.wait(0.04)
		expect(count).to.equal(2)
		rerender({
			input = 3,
		})
		expect(count).to.equal(2)
		rerender({
			input = 4,
		})
		expect(count).to.equal(2)
		task.wait(0.04)
		expect(count).to.equal(3)
		unmount()
	end)
end
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="228">
              <Properties>
                <string name="Name">use-debounce-state</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local exports = {}
for _k, _v in TS.import(script, script, "use-debounce-state") or {} do
	exports[_k] = _v
end
return exports
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="229">
                <Properties>
                  <string name="Name">use-debounce-state</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local useState = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS")).useState
local useDebounceCallback = TS.import(script, script.Parent.Parent, "use-debounce-callback").useDebounceCallback
--[[
	*
	* Delays updating `state` until after `wait` seconds have elapsed since the
	* last time the debounced function was invoked. Set to the most recently passed
	* `state` after the delay.
	*
	* See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	* for details over the differences between `debounce` and `throttle`.
	*
	* @param initialState The value to debounce.
	* @param options The options object.
	* @returns A tuple containing the debounced value and a function to update it.
]]
local function useDebounceState(initialState, options)
	local state, setState = useState(initialState)
	return state, useDebounceCallback(setState, options).run
end
return {
	useDebounceState = useDebounceState,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="230">
                <Properties>
                  <string name="Name">use-debounce-state.spec</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
-- / <reference types="@rbxts/testez/globals" />
local renderHook = TS.import(script, script.Parent.Parent, "utils", "testez").renderHook
local useDebounceState = TS.import(script, script.Parent, "use-debounce-state").useDebounceState
return function()
	it("should debounce the state", function()
		local _binding = renderHook(function()
			local state, setState = useDebounceState(0, {
				wait = 0.02,
			})
			return {
				state = state,
				setState = setState,
			}
		end)
		local result = _binding.result
		local unmount = _binding.unmount
		expect(result.current.state).to.equal(0)
		result.current.setState(0)
		result.current.setState(1)
		result.current.setState(0)
		result.current.setState(1)
		expect(result.current.state).to.equal(0)
		task.wait(0.04)
		expect(result.current.state).to.equal(1)
		result.current.setState(2)
		expect(result.current.state).to.equal(1)
		task.wait(0.04)
		expect(result.current.state).to.equal(2)
		result.current.setState(2)
		expect(result.current.state).to.equal(2)
		task.wait(0.04)
		expect(result.current.state).to.equal(2)
		result.current.setState(3)
		expect(result.current.state).to.equal(2)
		result.current.setState(4)
		expect(result.current.state).to.equal(2)
		task.wait(0.04)
		expect(result.current.state).to.equal(4)
		unmount()
	end)
end
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="231">
              <Properties>
                <string name="Name">use-defer-callback</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local exports = {}
for _k, _v in TS.import(script, script, "use-defer-callback") or {} do
	exports[_k] = _v
end
return exports
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="232">
                <Properties>
                  <string name="Name">use-defer-callback</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local _roact = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS"))
local useCallback = _roact.useCallback
local useRef = _roact.useRef
local RunService = TS.import(script, TS.getModule(script, "@rbxts", "services")).RunService
local useLatest = TS.import(script, script.Parent.Parent, "use-latest").useLatest
--[[
	*
	* Defers a callback to be executed on the next Heartbeat frame. Consecutive
	* calls to the returned `execute` function will cancel the previous call.
	* @param callback The callback to defer
	* @returns A tuple containing the `execute` and `cancel` functions
]]
local function useDeferCallback(callback)
	local callbackRef = useLatest(callback)
	local connectionRef = useRef()
	local cancel = useCallback(function()
		local _result = connectionRef.current
		if _result ~= nil then
			_result:Disconnect()
		end
		connectionRef.current = nil
	end, {})
	local execute = useCallback(function(...)
		local args = { ... }
		cancel()
		connectionRef.current = RunService.Heartbeat:Once(function()
			connectionRef.current = nil
			callbackRef.current(unpack(args))
		end)
	end, {})
	return execute, cancel
end
return {
	useDeferCallback = useDeferCallback,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="233">
                <Properties>
                  <string name="Name">use-defer-callback.spec</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
-- / <reference types="@rbxts/testez/globals" />
local RunService = TS.import(script, TS.getModule(script, "@rbxts", "services")).RunService
local renderHook = TS.import(script, script.Parent.Parent, "utils", "testez").renderHook
local useDeferCallback = TS.import(script, script.Parent, "use-defer-callback").useDeferCallback
return function()
	local wait = function()
		RunService.Heartbeat:Wait()
		RunService.Heartbeat:Wait()
	end
	it("should return a callback and a cancel function", function()
		local _binding = renderHook(function()
			local callback, cancel = useDeferCallback(function() end)
			return {
				callback = callback,
				cancel = cancel,
			}
		end)
		local result = _binding.result
		expect(result.current.callback).to.be.a("function")
		expect(result.current.cancel).to.be.a("function")
	end)
	it("should execute the callback on the next heartbeat", function()
		local calls = 0
		local _binding = renderHook(function()
			local callback = useDeferCallback(function()
				local _original = calls
				calls += 1
				return _original
			end)
			return {
				callback = callback,
			}
		end)
		local result = _binding.result
		result.current.callback()
		expect(calls).to.equal(0)
		wait()
		expect(calls).to.equal(1)
	end)
	it("should return a function that cancels the callback", function()
		local calls = 0
		local _binding = renderHook(function()
			local callback, cancel = useDeferCallback(function()
				local _original = calls
				calls += 1
				return _original
			end)
			return {
				callback = callback,
				cancel = cancel,
			}
		end)
		local result = _binding.result
		result.current.callback()
		expect(calls).to.equal(0)
		result.current.cancel()
		wait()
		expect(calls).to.equal(0)
	end)
	it("should cancel the previous callback when called again", function()
		local calls = 0
		local _binding = renderHook(function()
			local callback = useDeferCallback(function()
				local _original = calls
				calls += 1
				return _original
			end)
			return {
				callback = callback,
			}
		end)
		local result = _binding.result
		result.current.callback()
		result.current.callback()
		result.current.callback()
		expect(calls).to.equal(0)
		wait()
		expect(calls).to.equal(1)
	end)
	it("should execute the callback with the latest arguments", function()
		local calls = 0
		local _binding = renderHook(function()
			local callback = useDeferCallback(function(value)
				calls += value
				return calls
			end)
			return {
				callback = callback,
			}
		end)
		local result = _binding.result
		result.current.callback(1)
		result.current.callback(2)
		result.current.callback(3)
		expect(calls).to.equal(0)
		wait()
		expect(calls).to.equal(3)
	end)
end
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="234">
              <Properties>
                <string name="Name">use-defer-effect</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local exports = {}
for _k, _v in TS.import(script, script, "use-defer-effect") or {} do
	exports[_k] = _v
end
return exports
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="235">
                <Properties>
                  <string name="Name">use-defer-effect</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local useEffect = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS")).useEffect
local useDeferCallback = TS.import(script, script.Parent.Parent, "use-defer-callback").useDeferCallback
--[[
	*
	* Like `useEffect`, but the callback is deferred to the next Heartbeat frame.
	* @param callback The callback to run
	* @param dependencies Optional dependencies to trigger the effect
]]
local function useDeferEffect(callback, dependencies)
	local deferredCallback, cancel = useDeferCallback(callback)
	useEffect(function()
		deferredCallback()
		return cancel
	end, dependencies)
end
return {
	useDeferEffect = useDeferEffect,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="236">
                <Properties>
                  <string name="Name">use-defer-effect.spec</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
-- / <reference types="@rbxts/testez/globals" />
local RunService = TS.import(script, TS.getModule(script, "@rbxts", "services")).RunService
local renderHook = TS.import(script, script.Parent.Parent, "utils", "testez").renderHook
local useDeferEffect = TS.import(script, script.Parent, "use-defer-effect").useDeferEffect
return function()
	local wait = function()
		RunService.Heartbeat:Wait()
		RunService.Heartbeat:Wait()
	end
	it("should run the effect on the next heartbeat", function()
		local calls = 0
		local _binding = renderHook(function()
			useDeferEffect(function()
				local _original = calls
				calls += 1
				return _original
			end)
		end)
		local rerender = _binding.rerender
		local unmount = _binding.unmount
		expect(calls).to.equal(0)
		wait()
		expect(calls).to.equal(1)
		wait()
		expect(calls).to.equal(1)
		rerender()
		expect(calls).to.equal(1)
		wait()
		expect(calls).to.equal(2)
		unmount()
	end)
	it("should run the effect on dependency change", function()
		local calls = 0
		local _binding = renderHook(function(value)
			useDeferEffect(function()
				local _original = calls
				calls += 1
				return _original
			end, { value })
		end, {
			initialProps = 0,
		})
		local unmount = _binding.unmount
		local rerender = _binding.rerender
		expect(calls).to.equal(0)
		wait()
		expect(calls).to.equal(1)
		rerender(1)
		expect(calls).to.equal(1)
		wait()
		expect(calls).to.equal(2)
		unmount()
	end)
	it("should cancel the effect on unmount", function()
		local calls = 0
		local _binding = renderHook(function()
			useDeferEffect(function()
				local _original = calls
				calls += 1
				return _original
			end)
		end)
		local unmount = _binding.unmount
		local rerender = _binding.rerender
		expect(calls).to.equal(0)
		wait()
		expect(calls).to.equal(1)
		rerender()
		unmount()
		wait()
		expect(calls).to.equal(1)
	end)
end
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="237">
              <Properties>
                <string name="Name">use-defer-state</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local exports = {}
for _k, _v in TS.import(script, script, "use-defer-state") or {} do
	exports[_k] = _v
end
return exports
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="238">
                <Properties>
                  <string name="Name">use-defer-state</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local _roact = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS"))
local useCallback = _roact.useCallback
local useState = _roact.useState
local useDeferCallback = TS.import(script, script.Parent.Parent, "use-defer-callback").useDeferCallback
local useLatest = TS.import(script, script.Parent.Parent, "use-latest").useLatest
local useUnmountEffect = TS.import(script, script.Parent.Parent, "use-unmount-effect").useUnmountEffect
local resolve = function(value, state)
	local _value = value
	return if type(_value) == "function" then value(state) else value
end
--[[
	*
	* Like `useState`, but `setState` will update the state on the next Heartbeat
	* frame. Only the latest update in a frame will run.
	*
	* This is useful for improving performance when updating state in response to
	* events that fire rapidly in succession.
	*
	* @param initialState Optional initial state
	* @returns A tuple containing the state and a function to update it
]]
local function useDeferState(initialState)
	local state, innerSetState = useState(initialState)
	local deferredSetState, cancel = useDeferCallback(innerSetState)
	local latestState = useLatest(state)
	-- Wrap 'deferState' to allow multiple changes to state in one frame through
	-- the `latestState` reference
	local setState = useCallback(function(value)
		latestState.current = resolve(value, latestState.current)
		deferredSetState(latestState.current)
	end, {})
	useUnmountEffect(cancel)
	return state, setState
end
return {
	useDeferState = useDeferState,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="239">
                <Properties>
                  <string name="Name">use-defer-state.spec</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
-- / <reference types="@rbxts/testez/globals" />
local RunService = TS.import(script, TS.getModule(script, "@rbxts", "services")).RunService
local renderHook = TS.import(script, script.Parent.Parent, "utils", "testez").renderHook
local useDeferState = TS.import(script, script.Parent, "use-defer-state").useDeferState
return function()
	local wait = function()
		RunService.Heartbeat:Wait()
		RunService.Heartbeat:Wait()
	end
	it("should return the state and a setter", function()
		local _binding = renderHook(function()
			local state, setState = useDeferState(0)
			return {
				state = state,
				setState = setState,
			}
		end)
		local result = _binding.result
		expect(result.current.state).to.equal(0)
		expect(result.current.setState).to.be.a("function")
	end)
	it("should update the state on heartbeat", function()
		local _binding = renderHook(function()
			local state, setState = useDeferState(0)
			return {
				state = state,
				setState = setState,
			}
		end)
		local result = _binding.result
		result.current.setState(1)
		expect(result.current.state).to.equal(0)
		wait()
		expect(result.current.state).to.equal(1)
	end)
	it("should only update the state once per frame", function()
		local _binding = renderHook(function()
			local state, setState = useDeferState(0)
			return {
				state = state,
				setState = setState,
			}
		end)
		local result = _binding.result
		result.current.setState(1)
		result.current.setState(2)
		result.current.setState(3)
		expect(result.current.state).to.equal(0)
		wait()
		expect(result.current.state).to.equal(3)
	end)
	it("should receive a function to update state", function()
		local _binding = renderHook(function()
			local state, setState = useDeferState(0)
			return {
				state = state,
				setState = setState,
			}
		end)
		local result = _binding.result
		result.current.setState(function(state)
			return state + 1
		end)
		result.current.setState(function(state)
			return state + 1
		end)
		result.current.setState(function(state)
			return state + 1
		end)
		expect(result.current.state).to.equal(0)
		wait()
		expect(result.current.state).to.equal(3)
	end)
	it("should only rerender once per frame", function()
		local renderCount = 0
		local _binding = renderHook(function()
			local state, setState = useDeferState(0)
			renderCount += 1
			return {
				state = state,
				setState = setState,
			}
		end)
		local result = _binding.result
		expect(renderCount).to.equal(1)
		result.current.setState(function(state)
			return state + 1
		end)
		result.current.setState(function(state)
			return state + 1
		end)
		result.current.setState(function(state)
			return state + 1
		end)
		expect(renderCount).to.equal(1)
		wait()
		expect(renderCount).to.equal(2)
	end)
	it("should cancel the update on unmount", function()
		local _binding = renderHook(function()
			local state, setState = useDeferState(0)
			return {
				state = state,
				setState = setState,
			}
		end)
		local result = _binding.result
		local unmount = _binding.unmount
		result.current.setState(1)
		expect(result.current.state).to.equal(0)
		unmount()
		wait()
		expect(result.current.state).to.equal(0)
	end)
end
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="240">
              <Properties>
                <string name="Name">use-event-listener</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local exports = {}
for _k, _v in TS.import(script, script, "use-event-listener") or {} do
	exports[_k] = _v
end
return exports
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="241">
                <Properties>
                  <string name="Name">use-event-listener</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local useEffect = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS")).useEffect
local useLatest = TS.import(script, script.Parent.Parent, "use-latest").useLatest
local connect = function(event, callback)
	local _event = event
	if typeof(_event) == "RBXScriptSignal" then
		-- With deferred events, a "hard disconnect" is necessary to avoid causing
		-- state updates after a component unmounts. Use 'Connected' to check if
		-- the connection is still valid before invoking the callback.
		-- https://devforum.roblox.com/t/deferred-engine-events/2276564/99
		local connection
		connection = event:Connect(function(...)
			local args = { ... }
			if connection.Connected then
				return callback(unpack(args))
			end
		end)
		return connection
	elseif event.Connect ~= nil then
		return event:Connect(callback)
	elseif event.connect ~= nil then
		return event:connect(callback)
	elseif event.subscribe ~= nil then
		return event:subscribe(callback)
	else
		error("Event-like object does not have a supported connect method.")
	end
end
local disconnect = function(connection)
	local _connection = connection
	if type(_connection) == "function" then
		connection()
	else
		local _connection_1 = connection
		local _condition = typeof(_connection_1) == "RBXScriptConnection"
		if not _condition then
			_condition = connection.Disconnect ~= nil
		end
		if _condition then
			connection:Disconnect()
		elseif connection.disconnect ~= nil then
			connection:disconnect()
		else
			error("Connection-like object does not have a supported disconnect method.")
		end
	end
end
--[[
	*
	* Subscribes to an event-like object. The subscription is automatically
	* disconnected when the component unmounts.
	*
	* If the event or listener is `undefined`, the event will not be subscribed to,
	* and the subscription will be disconnected if it was previously connected.
	*
	* The listener is memoized, so it is safe to pass a callback that is recreated
	* on every render.
	*
	* @param event The event-like object to subscribe to.
	* @param listener The listener to subscribe with.
	* @param options Options for the subscription.
]]
local function useEventListener(event, listener, options)
	if options == nil then
		options = {}
	end
	local _binding = options
	local once = _binding.once
	if once == nil then
		once = false
	end
	local connected = _binding.connected
	if connected == nil then
		connected = true
	end
	local listenerRef = useLatest(listener)
	useEffect(function()
		if not event or (not listener or not connected) then
			return nil
		end
		local canDisconnect = true
		local connection
		connection = connect(event, function(...)
			local args = { ... }
			if once then
				disconnect(connection)
				canDisconnect = false
			end
			local _result = listenerRef.current
			if _result ~= nil then
				_result(unpack(args))
			end
		end)
		return function()
			if canDisconnect then
				disconnect(connection)
			end
		end
	end, { event, connected, listener ~= nil })
end
return {
	useEventListener = useEventListener,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="242">
                <Properties>
                  <string name="Name">use-event-listener.spec</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
-- / <reference types="@rbxts/testez/globals" />
local renderHook = TS.import(script, script.Parent.Parent, "utils", "testez").renderHook
local useEventListener = TS.import(script, script.Parent, "use-event-listener").useEventListener
local function createSignal()
	local listeners = {}
	return {
		listeners = function(self)
			return listeners
		end,
		connect = function(self, listener)
			local _listener = listener
			listeners[_listener] = true
			return function()
				local _listener_1 = listener
				-- ▼ Set.delete ▼
				local _valueExisted = listeners[_listener_1] ~= nil
				listeners[_listener_1] = nil
				-- ▲ Set.delete ▲
				return _valueExisted
			end
		end,
		fire = function(self, ...)
			local args = { ... }
			for listener in listeners do
				listener(unpack(args))
			end
		end,
	}
end
return function()
	it("should connect on mount", function()
		local signal = createSignal()
		local _binding = renderHook(function()
			return useEventListener(signal, function() end)
		end)
		local unmount = _binding.unmount
		-- ▼ ReadonlySet.size ▼
		local _size = 0
		for _ in signal:listeners() do
			_size += 1
		end
		-- ▲ ReadonlySet.size ▲
		expect(_size).to.equal(1)
		unmount()
	end)
	it("should disconnect on unmount", function()
		local signal = createSignal()
		local _binding = renderHook(function()
			return useEventListener(signal, function() end)
		end)
		local unmount = _binding.unmount
		unmount()
		-- ▼ ReadonlySet.size ▼
		local _size = 0
		for _ in signal:listeners() do
			_size += 1
		end
		-- ▲ ReadonlySet.size ▲
		expect(_size).to.equal(0)
	end)
	it("should clean up old connections", function()
		local signalA = createSignal()
		local signalB = createSignal()
		local _binding = renderHook(function(_param)
			local signal = _param.signal
			return useEventListener(signal, function() end)
		end, {
			initialProps = {
				signal = signalA,
			},
		})
		local rerender = _binding.rerender
		local unmount = _binding.unmount
		rerender({
			signal = signalB,
		})
		-- ▼ ReadonlySet.size ▼
		local _size = 0
		for _ in signalA:listeners() do
			_size += 1
		end
		-- ▲ ReadonlySet.size ▲
		expect(_size).to.equal(0)
		-- ▼ ReadonlySet.size ▼
		local _size_1 = 0
		for _ in signalB:listeners() do
			_size_1 += 1
		end
		-- ▲ ReadonlySet.size ▲
		expect(_size_1).to.equal(1)
		rerender({
			signal = signalA,
		})
		-- ▼ ReadonlySet.size ▼
		local _size_2 = 0
		for _ in signalA:listeners() do
			_size_2 += 1
		end
		-- ▲ ReadonlySet.size ▲
		expect(_size_2).to.equal(1)
		-- ▼ ReadonlySet.size ▼
		local _size_3 = 0
		for _ in signalB:listeners() do
			_size_3 += 1
		end
		-- ▲ ReadonlySet.size ▲
		expect(_size_3).to.equal(0)
		unmount()
		-- ▼ ReadonlySet.size ▼
		local _size_4 = 0
		for _ in signalA:listeners() do
			_size_4 += 1
		end
		-- ▲ ReadonlySet.size ▲
		expect(_size_4).to.equal(0)
		-- ▼ ReadonlySet.size ▼
		local _size_5 = 0
		for _ in signalB:listeners() do
			_size_5 += 1
		end
		-- ▲ ReadonlySet.size ▲
		expect(_size_5).to.equal(0)
	end)
	it("should call listener on event", function()
		local signal = createSignal()
		local result
		local _binding = renderHook(function()
			return useEventListener(signal, function(value)
				result = value
				return result
			end)
		end)
		local unmount = _binding.unmount
		signal:fire(0)
		expect(result).to.equal(0)
		signal:fire(1)
		expect(result).to.equal(1)
		unmount()
	end)
	it("should receive a 'once' option", function()
		local signal = createSignal()
		local calls = 0
		local _binding = renderHook(function()
			return useEventListener(signal, function()
				local _original = calls
				calls += 1
				return _original
			end, {
				once = true,
			})
		end)
		local rerender = _binding.rerender
		local unmount = _binding.unmount
		signal:fire()
		rerender()
		signal:fire()
		rerender()
		signal:fire()
		expect(calls).to.equal(1)
		unmount()
	end)
	it("should receive a 'connected' option", function()
		local signal = createSignal()
		local calls = 0
		local _binding = renderHook(function(_param)
			local connected = _param.connected
			return useEventListener(signal, function()
				local _original = calls
				calls += 1
				return _original
			end, {
				connected = connected,
			})
		end, {
			initialProps = {
				connected = true,
			},
		})
		local rerender = _binding.rerender
		local unmount = _binding.unmount
		signal:fire()
		rerender({
			connected = false,
		})
		signal:fire()
		rerender({
			connected = true,
		})
		signal:fire()
		expect(calls).to.equal(2)
		unmount()
	end)
end
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="243">
              <Properties>
                <string name="Name">use-interval</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local exports = {}
for _k, _v in TS.import(script, script, "use-interval") or {} do
	exports[_k] = _v
end
return exports
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="244">
                <Properties>
                  <string name="Name">use-interval</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local _roact = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS"))
local useCallback = _roact.useCallback
local useEffect = _roact.useEffect
local useRef = _roact.useRef
local setInterval = TS.import(script, TS.getModule(script, "@rbxts", "set-timeout").out).setInterval
local useLatestCallback = TS.import(script, script.Parent.Parent, "use-latest-callback").useLatestCallback
--[[
	*
	* Sets an interval that runs the callback function every `delay` seconds. If
	* `delay` is `undefined`, the interval is cleared. If the delay changes, the
	* interval is reset.
	* @param callback The callback function to run.
	* @param delay The delay in seconds between each interval.
	* @param options The options for the interval.
	* @returns A function that clears the interval.
]]
local function useInterval(callback, delay, options)
	if options == nil then
		options = {}
	end
	local _binding = options
	local immediate = _binding.immediate
	if immediate == nil then
		immediate = false
	end
	local callbackMemo = useLatestCallback(callback)
	local cancel = useRef()
	local clear = useCallback(function()
		local _result = cancel.current
		if _result ~= nil then
			_result()
		end
	end, {})
	useEffect(function()
		if delay == nil then
			return nil
		end
		if immediate then
			callbackMemo()
		end
		cancel.current = setInterval(callbackMemo, delay)
		return clear
	end, { delay })
	return clear
end
return {
	useInterval = useInterval,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="245">
                <Properties>
                  <string name="Name">use-interval.spec</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
-- / <reference types="@rbxts/testez/globals" />
local renderHook = TS.import(script, script.Parent.Parent, "utils", "testez").renderHook
local useInterval = TS.import(script, script.Parent, "use-interval").useInterval
return function()
	it("should run the callback after the delay", function()
		local count = 0
		local _binding = renderHook(function()
			useInterval(function()
				local _original = count
				count += 1
				return _original
			end, 0.03)
		end)
		local unmount = _binding.unmount
		expect(count).to.equal(0)
		task.wait(0.04)
		expect(count).to.equal(1)
		task.wait(0.04)
		expect(count).to.equal(2)
		unmount()
	end)
	it("should clear when delay is undefined", function()
		local count = 0
		local _binding = renderHook(function(_param)
			local delay = _param.delay
			useInterval(function()
				local _original = count
				count += 1
				return _original
			end, delay)
		end, {
			initialProps = {
				delay = 0.06,
			},
		})
		local rerender = _binding.rerender
		local unmount = _binding.unmount
		expect(count).to.equal(0)
		task.wait(0.02)
		expect(count).to.equal(0)
		rerender({
			delay = nil,
		})
		task.wait(0.08)
		expect(count).to.equal(0)
		unmount()
	end)
	it("should clear on unmount", function()
		local count = 0
		local _binding = renderHook(function()
			useInterval(function()
				local _original = count
				count += 1
				return _original
			end, 0.06)
		end)
		local unmount = _binding.unmount
		expect(count).to.equal(0)
		task.wait(0.02)
		expect(count).to.equal(0)
		unmount()
		task.wait(0.08)
		expect(count).to.equal(0)
	end)
	it("should reset when delay updates", function()
		local count = 0
		local _binding = renderHook(function(_param)
			local delay = _param.delay
			useInterval(function()
				local _original = count
				count += 1
				return _original
			end, delay)
		end, {
			initialProps = {
				delay = 0.06,
			},
		})
		local rerender = _binding.rerender
		local unmount = _binding.unmount
		expect(count).to.equal(0)
		task.wait(0.02)
		expect(count).to.equal(0)
		rerender({
			delay = 0.05,
		})
		task.wait(0.02)
		expect(count).to.equal(0)
		task.wait(0.04)
		expect(count).to.equal(1)
		unmount()
	end)
	it("should return a clear function", function()
		local count = 0
		local _binding = renderHook(function()
			return useInterval(function()
				local _original = count
				count += 1
				return _original
			end, 0.06)
		end)
		local result = _binding.result
		local unmount = _binding.unmount
		expect(count).to.equal(0)
		task.wait(0.02)
		expect(count).to.equal(0)
		result.current()
		task.wait(0.08)
		expect(count).to.equal(0)
		unmount()
	end)
end
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="246">
              <Properties>
                <string name="Name">use-key-press</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local exports = {}
for _k, _v in TS.import(script, script, "use-key-press") or {} do
	exports[_k] = _v
end
return exports
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="247">
                <Properties>
                  <string name="Name">use-key-press</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local _roact = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS"))
local useEffect = _roact.useEffect
local useMemo = _roact.useMemo
local useState = _roact.useState
local _services = TS.import(script, TS.getModule(script, "@rbxts", "services"))
local ContextActionService = _services.ContextActionService
local HttpService = _services.HttpService
local UserInputService = _services.UserInputService
local useEventListener = TS.import(script, script.Parent.Parent, "use-event-listener").useEventListener
--[[
	*
	* A single key code name.
]]
--[[
	*
	* A single key code or a combination of key codes.
]]
--[[
	*
	* Returns whether the passed key or shortcut is pressed. The hook expects one
	* or more key code, which can be:
	*
	* - A single key code `"W"`
	* - A combination of key codes `"W+Space"`
	* - An array of key codes `["W", "Space"]`
	*
	* Each combination is treated as its own shortcut. If passed more than one
	* combination, the hook will return `true` if any of the combinations are
	* pressed.
	*
	* @param keyCodeCombos The key code or combination of key codes to listen for.
	* @returns Whether the key or combination of keys is pressed.
]]
local function useKeyPress(keyCodeCombos, _param)
	if _param == nil then
		_param = {}
	end
	local bindAction = _param.bindAction
	if bindAction == nil then
		bindAction = false
	end
	local actionPriority = _param.actionPriority
	if actionPriority == nil then
		actionPriority = Enum.ContextActionPriority.High.Value
	end
	local actionName = _param.actionName
	if actionName == nil then
		actionName = if bindAction then HttpService:GenerateGUID(false) else ""
	end
	local actionInputTypes = _param.actionInputTypes
	if actionInputTypes == nil then
		actionInputTypes = { Enum.UserInputType.Keyboard, Enum.UserInputType.Gamepad1 }
	end
	local pressed, setPressed = useState(false)
	local keyCombos = useMemo(function()
		local _keyCodeCombos = keyCodeCombos
		local _arg0 = function(keyCodes)
			local _keyCodes = keyCodes
			if type(_keyCodes) == "string" then
				return string.split(keyCodes, "+")
			else
				return keyCodes
			end
		end
		-- ▼ ReadonlyArray.map ▼
		local _newValue = table.create(#_keyCodeCombos)
		for _k, _v in _keyCodeCombos do
			_newValue[_k] = _arg0(_v, _k - 1, _keyCodeCombos)
		end
		-- ▲ ReadonlyArray.map ▲
		return _newValue
	end, keyCodeCombos)
	local keySet = useMemo(function()
		local keySet = {}
		for _, keys in keyCombos do
			for _1, key in keys do
				keySet[key] = true
			end
		end
		return keySet
	end, keyCombos)
	local keysDown = useMemo(function()
		return {}
	end, keyCodeCombos)
	local updatePressed = function()
		local _arg0 = function(keys)
			local _keys = keys
			local _arg0_1 = function(key)
				local _key = key
				return keysDown[_key] ~= nil
			end
			-- ▼ ReadonlyArray.every ▼
			local _result = true
			for _k, _v in _keys do
				if not _arg0_1(_v, _k - 1, _keys) then
					_result = false
					break
				end
			end
			-- ▲ ReadonlyArray.every ▲
			return _result
		end
		-- ▼ ReadonlyArray.some ▼
		local _result = false
		for _k, _v in keyCombos do
			if _arg0(_v, _k - 1, keyCombos) then
				_result = true
				break
			end
		end
		-- ▲ ReadonlyArray.some ▲
		setPressed(_result)
	end
	useEventListener(UserInputService.InputBegan, function(input, gameProcessed)
		local _condition = not gameProcessed
		if _condition then
			local _name = input.KeyCode.Name
			_condition = keySet[_name] ~= nil
		end
		if _condition then
			local _name = input.KeyCode.Name
			keysDown[_name] = true
			updatePressed()
		end
	end)
	useEventListener(UserInputService.InputEnded, function(input)
		local _name = input.KeyCode.Name
		if keySet[_name] ~= nil then
			local _name_1 = input.KeyCode.Name
			keysDown[_name_1] = nil
			updatePressed()
		end
	end)
	useEffect(function()
		-- Prevents the game from processing the key
		if not bindAction then
			return nil
		end
		ContextActionService:BindActionAtPriority(actionName, function(_, state, input)
			local _name = input.KeyCode.Name
			local valid = keySet[_name] ~= nil
			if not valid then
				return Enum.ContextActionResult.Pass
			end
			if state == Enum.UserInputState.Begin then
				local _name_1 = input.KeyCode.Name
				keysDown[_name_1] = true
			elseif state == Enum.UserInputState.End then
				local _name_1 = input.KeyCode.Name
				keysDown[_name_1] = nil
			end
			updatePressed()
			return Enum.ContextActionResult.Sink
		end, false, actionPriority, unpack(actionInputTypes))
		return function()
			ContextActionService:UnbindAction(actionName)
		end
	end, { bindAction, actionName, actionPriority })
	return pressed
end
return {
	useKeyPress = useKeyPress,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="248">
                <Properties>
                  <string name="Name">use-key-press.spec</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
-- / <reference types="@rbxts/testez/globals" />
local renderHook = TS.import(script, script.Parent.Parent, "utils", "testez").renderHook
local useKeyPress = TS.import(script, script.Parent, "use-key-press").useKeyPress
return function()
	it("should return a boolean", function()
		local _binding = renderHook(function()
			return useKeyPress({ "W", "B" })
		end)
		local result = _binding.result
		local unmount = _binding.unmount
		expect(result.current).to.be.a("boolean")
		expect(result.current).to.equal(false)
		unmount()
	end)
	-- itFOCUS("should return true when pressed", () => {
	-- let value = false;
	-- const { result, unmount } = renderHook(() => {
	-- value = useKeyPress(["W", "LeftShift+B"]) || value;
	-- });
	-- task.wait(2);
	-- unmount();
	-- expect(value).to.be.a("boolean");
	-- expect(value).to.equal(true);
	-- });
end
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="249">
              <Properties>
                <string name="Name">use-latest</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local exports = {}
for _k, _v in TS.import(script, script, "use-latest") or {} do
	exports[_k] = _v
end
return exports
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="250">
                <Properties>
                  <string name="Name">use-latest</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local _roact = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS"))
local useMemo = _roact.useMemo
local useRef = _roact.useRef
local isStrictEqual = TS.import(script, script.Parent.Parent, "use-previous").isStrictEqual
--[[
	*
	* Returns a mutable ref that points to the latest value of the input.
	*
	* Takes an optional `predicate` function as the second argument that receives
	* the previous and current value. If the predicate returns `false`, the values
	* are not equal, and the previous value is updated.
	*
	* @param value The value to track.
	* @returns A mutable reference to the value.
]]
local function useLatest(value, predicate)
	if predicate == nil then
		predicate = isStrictEqual
	end
	local ref = useRef(value)
	useMemo(function()
		if not predicate(ref.current, value) then
			ref.current = value
		end
	end, { value })
	return ref
end
return {
	useLatest = useLatest,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="251">
                <Properties>
                  <string name="Name">use-latest.spec</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
-- / <reference types="@rbxts/testez/globals" />
local renderHook = TS.import(script, script.Parent.Parent, "utils", "testez").renderHook
local useLatest = TS.import(script, script.Parent, "use-latest").useLatest
return function()
	it("should return a mutable ref", function()
		local _binding = renderHook(function()
			return useLatest(0)
		end)
		local result = _binding.result
		expect(result.current.current).to.equal(0)
	end)
	it("should update the ref when the value changes", function()
		local _binding = renderHook(function(props)
			return useLatest(props.value)
		end, {
			initialProps = {
				value = 0,
			},
		})
		local result = _binding.result
		local rerender = _binding.rerender
		expect(result.current.current).to.equal(0)
		rerender({
			value = 1,
		})
		expect(result.current.current).to.equal(1)
	end)
	it("should receive a function that determines whether the value should be updated", function()
		local value0 = {
			value = 0,
		}
		local value1 = {
			value = 0,
		}
		local value2 = {
			value = 1,
		}
		local _binding = renderHook(function(_param)
			local state = _param.state
			return useLatest(state, function(a, b)
				local _result = a
				if _result ~= nil then
					_result = _result.value
				end
				return _result == b.value
			end)
		end, {
			initialProps = {
				state = value0,
			},
		})
		local result = _binding.result
		local rerender = _binding.rerender
		expect(result.current.current).to.equal(value0)
		rerender({
			state = value1,
		})
		expect(result.current.current).to.equal(value0)
		rerender({
			state = value2,
		})
		expect(result.current.current).to.equal(value2)
	end)
end
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="252">
              <Properties>
                <string name="Name">use-latest-callback</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local exports = {}
for _k, _v in TS.import(script, script, "use-latest-callback") or {} do
	exports[_k] = _v
end
return exports
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="253">
                <Properties>
                  <string name="Name">use-latest-callback</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local _roact = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS"))
local useCallback = _roact.useCallback
local useRef = _roact.useRef
--[[
	*
	* Returns a memoized callback that wraps the latest version of the input
	* callback.
	* @param callback The callback to memoize.
	* @returns The memoized callback.
]]
local function useLatestCallback(callback)
	local callbackRef = useRef(callback)
	callbackRef.current = callback
	return useCallback(function(...)
		local args = { ... }
		return callbackRef.current(unpack(args))
	end, {})
end
return {
	useLatestCallback = useLatestCallback,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="254">
                <Properties>
                  <string name="Name">use-latest-callback.spec</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
-- / <reference types="@rbxts/testez/globals" />
local renderHook = TS.import(script, script.Parent.Parent, "utils", "testez").renderHook
local useLatestCallback = TS.import(script, script.Parent, "use-latest-callback").useLatestCallback
return function()
	it("should memoize the callback on mount", function()
		local callback = function() end
		local _binding = renderHook(function()
			return useLatestCallback(callback)
		end)
		local result = _binding.result
		expect(result.current).to.be.a("function")
		expect(result.current).never.to.equal(callback)
	end)
	it("should return memoized callback after unrelated rerender", function()
		local _binding = renderHook(function()
			return useLatestCallback(function() end)
		end)
		local result = _binding.result
		local rerender = _binding.rerender
		local memoizedCallback = result.current
		rerender()
		expect(result.current).to.equal(memoizedCallback)
	end)
	it("should return memoized callback after passed callback changes", function()
		local _binding = renderHook(function(_param)
			local callback = _param.callback
			return useLatestCallback(callback)
		end, {
			initialProps = {
				callback = function() end,
			},
		})
		local result = _binding.result
		local rerender = _binding.rerender
		local memoizedCallback = result.current
		rerender({
			callback = function() end,
		})
		expect(result.current).to.equal(memoizedCallback)
		rerender({
			callback = function() end,
		})
		expect(result.current).to.equal(memoizedCallback)
	end)
	it("should memoize new callbacks", function()
		local _binding = renderHook(function(_param)
			local callback = _param.callback
			return useLatestCallback(callback)
		end, {
			initialProps = {
				callback = function(a, b)
					return a + b
				end,
			},
		})
		local result = _binding.result
		local rerender = _binding.rerender
		local memoizedCallback = result.current
		expect(memoizedCallback(1, 2)).to.equal(3)
		rerender({
			callback = function(a, b)
				return a - b
			end,
		})
		expect(memoizedCallback(1, 2)).to.equal(-1)
	end)
end
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="255">
              <Properties>
                <string name="Name">use-lifetime</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local exports = {}
for _k, _v in TS.import(script, script, "use-lifetime") or {} do
	exports[_k] = _v
end
return exports
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="256">
                <Properties>
                  <string name="Name">use-lifetime</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local _roact = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS"))
local useBinding = _roact.useBinding
local useEffect = _roact.useEffect
local RunService = TS.import(script, TS.getModule(script, "@rbxts", "services")).RunService
local useEventListener = TS.import(script, script.Parent.Parent, "use-event-listener").useEventListener
--[[
	*
	* Returns the lifetime of the component in seconds. Updates every frame on
	* the Heartbeat event.
	*
	* If the dependency array is provided, the lifetime timer will reset when
	* any of the dependencies change.
	*
	* @param dependencies An optional array of dependencies to reset the timer.
	* @returns A binding of the component's lifetime.
]]
local function useLifetime(dependencies)
	if dependencies == nil then
		dependencies = {}
	end
	local lifetime, setLifetime = useBinding(0)
	useEventListener(RunService.Heartbeat, function(deltaTime)
		setLifetime(lifetime:getValue() + deltaTime)
	end)
	useEffect(function()
		setLifetime(0)
	end, dependencies)
	return lifetime
end
return {
	useLifetime = useLifetime,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="257">
                <Properties>
                  <string name="Name">use-lifetime.spec</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
-- / <reference types="@rbxts/testez/globals" />
local renderHook = TS.import(script, script.Parent.Parent, "utils", "testez").renderHook
local useLifetime = TS.import(script, script.Parent, "use-lifetime").useLifetime
return function()
	it("should return the lifetime of the component", function()
		local _binding = renderHook(function()
			return useLifetime()
		end)
		local result = _binding.result
		local unmount = _binding.unmount
		expect(result.current:getValue()).to.equal(0)
		local timePassed = task.wait(0.1)
		expect(result.current:getValue()).to.be:near(timePassed, 0.05)
		unmount()
	end)
	it("should reset when dependencies change", function()
		local _binding = renderHook(function(props)
			return useLifetime({ props.value })
		end, {
			initialProps = {
				value = 0,
			},
		})
		local result = _binding.result
		local rerender = _binding.rerender
		local unmount = _binding.unmount
		expect(result.current:getValue()).to.equal(0)
		local timePassed = task.wait(0.1)
		rerender({
			value = 0,
		})
		expect(result.current:getValue()).to.be:near(timePassed, 0.05)
		rerender({
			value = 1,
		})
		expect(result.current:getValue()).to.equal(0)
		unmount()
	end)
end
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="258">
              <Properties>
                <string name="Name">use-motor</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local exports = {}
for _k, _v in TS.import(script, script, "use-motor") or {} do
	exports[_k] = _v
end
return exports
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="259">
                <Properties>
                  <string name="Name">use-motor</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local _flipper = TS.import(script, TS.getModule(script, "@rbxts", "flipper").src)
local GroupMotor = _flipper.GroupMotor
local SingleMotor = _flipper.SingleMotor
local _roact = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS"))
local useBinding = _roact.useBinding
local useCallback = _roact.useCallback
local useEffect = _roact.useEffect
local useMemo = _roact.useMemo
local RunService = TS.import(script, TS.getModule(script, "@rbxts", "services")).RunService
local _motor = TS.import(script, script.Parent.Parent, "utils", "motor")
local groupMotorGetState = _motor.groupMotorGetState
local groupMotorImpulse = _motor.groupMotorImpulse
local groupMotorSetState = _motor.groupMotorSetState
local motorGetState = _motor.motorGetState
local motorImpulse = _motor.motorImpulse
local motorSetState = _motor.motorSetState
--[[
	*
	* Creates a motor and returns a binding and a setter for the motor's goal.
	* Returns an additional API for changing the motor's state.
	* @param initialValue The initial value of the motor
	* @param useImplicitConnections Whether to use implicit connections
	* @returns A tuple containing the binding, setter, and API
]]
local useSingleMotor, useGroupMotor
local function useMotor(initialValue, useImplicitConnections)
	if useImplicitConnections == nil then
		useImplicitConnections = true
	end
	local _initialValue = initialValue
	if type(_initialValue) == "number" then
		return useSingleMotor(initialValue, useImplicitConnections)
	else
		return useGroupMotor(initialValue, useImplicitConnections)
	end
end
function useSingleMotor(initialValue, useImplicitConnections)
	if useImplicitConnections == nil then
		useImplicitConnections = true
	end
	local motor = useMemo(function()
		return SingleMotor.new(initialValue, false)
	end, {})
	local api = useMemo(function()
		return {
			motor = motor,
			setState = function(state)
				return motorSetState(motor, state)
			end,
			getState = function()
				return motorGetState(motor)
			end,
			impulse = function(impulse)
				return motorImpulse(motor, impulse)
			end,
		}
	end, {})
	local binding, setBinding = useBinding(initialValue)
	useEffect(function()
		if not useImplicitConnections then
			local connection = motor:onStep(setBinding)
			return function()
				connection:disconnect()
			end
		end
		local connection = RunService.Heartbeat:Connect(function(deltaTime)
			if not motor:step(deltaTime) then
				setBinding(motor:getValue())
			end
		end)
		local onComplete = motor:onComplete(function()
			setBinding(motor:getValue())
		end)
		return function()
			connection:Disconnect()
			onComplete:disconnect()
			motor:destroy()
		end
	end, { useImplicitConnections })
	local setGoal = useCallback(function(goal)
		motor:setGoal(goal)
	end, {})
	return binding, setGoal, api
end
function useGroupMotor(initialValue, useImplicitConnections)
	if useImplicitConnections == nil then
		useImplicitConnections = true
	end
	local motor = useMemo(function()
		return GroupMotor.new(initialValue, false)
	end, {})
	local api = useMemo(function()
		return {
			motor = motor,
			setState = function(states)
				return groupMotorSetState(motor, states)
			end,
			getState = function()
				return groupMotorGetState(motor)
			end,
			impulse = function(impulses)
				return groupMotorImpulse(motor, impulses)
			end,
		}
	end, {})
	local binding, setBinding = useBinding(initialValue)
	useEffect(function()
		if not useImplicitConnections then
			local connection = motor:onStep(setBinding)
			return function()
				connection:disconnect()
			end
		end
		local heartbeat = RunService.Heartbeat:Connect(function(deltaTime)
			if not motor:step(deltaTime) then
				setBinding(motor:getValue())
			end
		end)
		local onComplete = motor:onComplete(function()
			setBinding(motor:getValue())
		end)
		return function()
			heartbeat:Disconnect()
			onComplete:disconnect()
			motor:destroy()
		end
	end, { useImplicitConnections })
	local setGoal = useCallback(function(goal)
		motor:setGoal(goal)
	end, {})
	return binding, setGoal, api
end
return {
	useMotor = useMotor,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="260">
                <Properties>
                  <string name="Name">use-motor.spec</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
-- / <reference types="@rbxts/testez/globals" />
local _flipper = TS.import(script, TS.getModule(script, "@rbxts", "flipper").src)
local Instant = _flipper.Instant
local Linear = _flipper.Linear
local renderHook = TS.import(script, script.Parent.Parent, "utils", "testez").renderHook
local useMotor = TS.import(script, script.Parent, "use-motor").useMotor
return function()
	it("should create a SingleMotor", function()
		local _binding = renderHook(function()
			local value, setGoal, api = useMotor(0, false)
			return {
				value = value,
				setGoal = setGoal,
				api = api,
			}
		end)
		local result = _binding.result
		expect(result.current.value).to.be.a("table")
		expect(result.current.value:getValue()).to.equal(0)
		expect(result.current.setGoal).to.be.a("function")
		expect(result.current.api).to.be.a("table")
		expect(result.current.api.getState).to.be.a("function")
		expect(result.current.api.setState).to.be.a("function")
		expect(result.current.api.impulse).to.be.a("function")
		expect(result.current.api.motor).to.be.a("table")
	end)
	it("should create a GroupMotor", function()
		local _binding = renderHook(function()
			local value, setGoal, api = useMotor({
				x = 0,
				y = 0,
			}, false)
			return {
				value = value,
				setGoal = setGoal,
				api = api,
			}
		end)
		local result = _binding.result
		expect(result.current.value).to.be.a("table")
		expect(result.current.value:getValue().x).to.equal(0)
		expect(result.current.value:getValue().y).to.equal(0)
		expect(result.current.setGoal).to.be.a("function")
		expect(result.current.api).to.be.a("table")
		expect(result.current.api.getState).to.be.a("function")
		expect(result.current.api.setState).to.be.a("function")
		expect(result.current.api.motor).to.be.a("table")
	end)
	it("should update the binding on step", function()
		local _binding = renderHook(function()
			local value, setGoal, api = useMotor(0, false)
			return {
				value = value,
				setGoal = setGoal,
				api = api,
			}
		end)
		local result = _binding.result
		expect(result.current.value:getValue()).to.equal(0)
		result.current.setGoal(Instant.new(1))
		result.current.api.motor:step(1)
		expect(result.current.value:getValue()).to.equal(1)
	end)
	it("should update the binding on setState", function()
		local _binding = renderHook(function()
			local value, setGoal, api = useMotor(0, false)
			return {
				value = value,
				setGoal = setGoal,
				api = api,
			}
		end)
		local result = _binding.result
		result.current.setGoal(Linear.new(1, {
			velocity = 0,
		}))
		result.current.api.motor:step(0)
		expect(result.current.value:getValue()).to.equal(0)
		result.current.api.setState({
			value = 1,
		})
		result.current.api.motor:step(0)
		expect(result.current.value:getValue()).to.equal(1)
	end)
	it("should return a SingleMotor impulse api", function()
		local _binding = renderHook(function()
			local value, setGoal, api = useMotor(0, false)
			return {
				value = value,
				setGoal = setGoal,
				api = api,
			}
		end)
		local result = _binding.result
		result.current.setGoal(Linear.new(1, {
			velocity = 0,
		}))
		result.current.api.motor:step(0)
		expect(result.current.api.getState().velocity).to.equal(0)
		result.current.api.impulse(1)
		expect(result.current.api.getState().velocity).to.equal(1)
	end)
	it("should return a GroupMotor impulse api", function()
		local _binding = renderHook(function()
			local value, setGoal, api = useMotor({
				x = 0,
				y = 0,
				z = 0,
			}, false)
			return {
				value = value,
				setGoal = setGoal,
				api = api,
			}
		end)
		local result = _binding.result
		result.current.setGoal({
			x = Linear.new(1, {
				velocity = 0,
			}),
			y = Linear.new(2, {
				velocity = 0,
			}),
			z = Linear.new(3, {
				velocity = 0,
			}),
		})
		result.current.api.motor:step(0)
		expect(result.current.api.getState().x.velocity).to.equal(0)
		expect(result.current.api.getState().y.velocity).to.equal(0)
		expect(result.current.api.getState().z.velocity).to.equal(0)
		result.current.api.impulse({
			x = 1,
			y = 2,
		})
		expect(result.current.api.getState().x.velocity).to.equal(1)
		expect(result.current.api.getState().y.velocity).to.equal(2)
		expect(result.current.api.getState().z.velocity).to.equal(0)
	end)
	it("should destroy the motor on unmount", function()
		local _binding = renderHook(function()
			local value, setGoal, api = useMotor(0, true)
			return {
				value = value,
				setGoal = setGoal,
				api = api,
			}
		end)
		local result = _binding.result
		local unmount = _binding.unmount
		result.current.setGoal(Linear.new(1, {
			velocity = 1,
		}))
		result.current.api.motor:step(0)
		expect(result.current.api.motor:getValue()).to.equal(0)
		task.wait(0.04)
		local value = result.current.api.motor:getValue()
		expect(value).never.to.equal(0)
		unmount()
		task.wait(0.04)
		expect(result.current.api.motor:getValue()).to.equal(value)
	end)
end
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="261">
              <Properties>
                <string name="Name">use-mount-effect</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local exports = {}
for _k, _v in TS.import(script, script, "use-mount-effect") or {} do
	exports[_k] = _v
end
return exports
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="262">
                <Properties>
                  <string name="Name">use-mount-effect</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local useEffect = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS")).useEffect
--[[
	*
	* Runs a callback when the component is mounted.
	* @param callback The callback to run.
]]
local function useMountEffect(callback)
	useEffect(callback, {})
end
return {
	useMountEffect = useMountEffect,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="263">
                <Properties>
                  <string name="Name">use-mount-effect.spec</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
-- / <reference types="@rbxts/testez/globals" />
local renderHook = TS.import(script, script.Parent.Parent, "utils", "testez").renderHook
local useMountEffect = TS.import(script, script.Parent, "use-mount-effect").useMountEffect
return function()
	it("should run callback on mount", function()
		local renders = 0
		local mounted = false
		local _binding = renderHook(function()
			useMountEffect(function()
				mounted = not mounted
			end)
			renders += 1
		end)
		local rerender = _binding.rerender
		expect(renders).to.equal(1)
		expect(mounted).to.equal(true)
		rerender()
		expect(renders).to.equal(2)
		expect(mounted).to.equal(true)
	end)
end
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="264">
              <Properties>
                <string name="Name">use-mouse</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local exports = {}
for _k, _v in TS.import(script, script, "use-mouse") or {} do
	exports[_k] = _v
end
return exports
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="265">
                <Properties>
                  <string name="Name">use-mouse</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local _roact = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS"))
local useBinding = _roact.useBinding
local useMemo = _roact.useMemo
local UserInputService = TS.import(script, TS.getModule(script, "@rbxts", "services")).UserInputService
local useEventListener = TS.import(script, script.Parent.Parent, "use-event-listener").useEventListener
local useMountEffect = TS.import(script, script.Parent.Parent, "use-mount-effect").useMountEffect
--[[
	*
	* Returns a binding to the mouse position.
	* @param listener Optional listener to be called when the mouse position changes.
	* @returns A binding to mouse position.
]]
local function useMouse(listener)
	local mouse, setMouse = useBinding(Vector2.one)
	useEventListener(UserInputService.InputChanged, function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
			setMouse(UserInputService:GetMouseLocation())
			local _result = listener
			if _result ~= nil then
				_result(UserInputService:GetMouseLocation())
			end
		end
	end)
	useMemo(function()
		setMouse(UserInputService:GetMouseLocation())
	end, {})
	useMountEffect(function()
		local _result = listener
		if _result ~= nil then
			_result(mouse:getValue())
		end
	end)
	return mouse
end
return {
	useMouse = useMouse,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="266">
                <Properties>
                  <string name="Name">use-mouse.spec</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
-- / <reference types="@rbxts/testez/globals" />
local UserInputService = TS.import(script, TS.getModule(script, "@rbxts", "services")).UserInputService
local renderHook = TS.import(script, script.Parent.Parent, "utils", "testez").renderHook
local useMouse = TS.import(script, script.Parent, "use-mouse").useMouse
return function()
	it("should return a binding to the mouse position", function()
		local _binding = renderHook(function()
			return useMouse()
		end)
		local result = _binding.result
		local unmount = _binding.unmount
		expect(result.current).to.be.a("table")
		expect(result.current:getValue()).to.be.a("userdata")
		expect(result.current:getValue()).to.equal(UserInputService:GetMouseLocation())
		unmount()
	end)
	it("should receive an optional listener", function()
		local mouse = Vector2.new(-1, -1)
		local _binding = renderHook(function()
			return useMouse(function(m)
				mouse = m
				return mouse
			end)
		end)
		local unmount = _binding.unmount
		expect(mouse).never.to.equal(Vector2.new(-1, -1))
		expect(mouse).to.equal(UserInputService:GetMouseLocation())
		unmount()
	end)
end
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="267">
              <Properties>
                <string name="Name">use-previous</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local exports = {}
for _k, _v in TS.import(script, script, "use-previous") or {} do
	exports[_k] = _v
end
return exports
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="268">
                <Properties>
                  <string name="Name">use-previous</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local _roact = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS"))
local useMemo = _roact.useMemo
local useRef = _roact.useRef
local isStrictEqual = function(a, b)
	return a == b
end
--[[
	*
	* Returns the most recent value from the previous render. Returns `undefined`
	* on the first render.
	*
	* Takes an optional `predicate` function as the second argument that receives
	* the previous and current value. If the predicate returns `false`, the values
	* are not equal, and the previous value is updated.
	*
	* @param value The value to return on the next render if it changes.
	* @param predicate Optional function to determine whether the value changed.
	* Defaults to a strict equality check (`===`).
	* @returns The previous value.
]]
local function usePrevious(value, predicate)
	if predicate == nil then
		predicate = isStrictEqual
	end
	local previousRef = useRef()
	local currentRef = useRef()
	useMemo(function()
		if not predicate(currentRef.current, value) then
			previousRef.current = currentRef.current
			currentRef.current = value
		end
	end, { value })
	return previousRef.current
end
return {
	usePrevious = usePrevious,
	isStrictEqual = isStrictEqual,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="269">
                <Properties>
                  <string name="Name">use-previous.spec</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
-- / <reference types="@rbxts/testez/globals" />
local renderHook = TS.import(script, script.Parent.Parent, "utils", "testez").renderHook
local usePrevious = TS.import(script, script.Parent, "use-previous").usePrevious
return function()
	it("should return undefined on the first render", function()
		local _binding = renderHook(function()
			return usePrevious(0)
		end)
		local result = _binding.result
		expect(result.current).to.equal(nil)
	end)
	it("should return the previous value on rerender", function()
		local _binding = renderHook(function(_param)
			local state = _param.state
			return usePrevious(state)
		end, {
			initialProps = {
				state = 0,
			},
		})
		local result = _binding.result
		local rerender = _binding.rerender
		expect(result.current).to.equal(nil)
		rerender({
			state = 1,
		})
		expect(result.current).to.equal(0)
		rerender({
			state = 2,
		})
		expect(result.current).to.equal(1)
		rerender({
			state = 3,
		})
		expect(result.current).to.equal(2)
	end)
	it("should return the correct value despite being undefined", function()
		local _binding = renderHook(function(_param)
			local state = _param.state
			return usePrevious(state)
		end, {
			initialProps = {
				state = nil,
			},
		})
		local result = _binding.result
		local rerender = _binding.rerender
		expect(result.current).to.equal(nil)
		rerender({
			state = nil,
		})
		expect(result.current).to.equal(nil)
		rerender({
			state = 0,
		})
		expect(result.current).to.equal(nil)
		rerender({
			state = nil,
		})
		expect(result.current).to.equal(0)
	end)
	it("should not return passed value after unrelated rerender", function()
		local _binding = renderHook(function(_param)
			local state = _param.state
			return usePrevious(state)
		end, {
			initialProps = {
				state = 0,
			},
		})
		local result = _binding.result
		local rerender = _binding.rerender
		expect(result.current).to.equal(nil)
		rerender()
		expect(result.current).never.to.equal(0)
		expect(result.current).to.equal(nil)
	end)
	it("should receive a function that determines whether the value should be updated", function()
		local value0 = {
			value = 0,
		}
		local value1 = {
			value = 1,
		}
		local value2 = {
			value = 2,
		}
		local _binding = renderHook(function(_param)
			local state = _param.state
			return usePrevious(state, function(a, b)
				local _result = a
				if _result ~= nil then
					_result = _result.value
				end
				return _result == b.value
			end)
		end, {
			initialProps = {
				state = value0,
			},
		})
		local result = _binding.result
		local rerender = _binding.rerender
		expect(result.current).to.equal(nil)
		local _object = {}
		local _left = "state"
		local _object_1 = {}
		for _k, _v in value0 do
			_object_1[_k] = _v
		end
		_object[_left] = _object_1
		rerender(_object)
		expect(result.current).to.equal(nil)
		rerender({
			state = value1,
		})
		expect(result.current).to.equal(value0)
		rerender({
			state = value2,
		})
		expect(result.current).to.equal(value1)
		rerender({
			state = value1,
		})
		expect(result.current).to.equal(value2)
	end)
end
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="270">
              <Properties>
                <string name="Name">use-property</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local exports = {}
for _k, _v in TS.import(script, script, "use-property") or {} do
	exports[_k] = _v
end
return exports
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="271">
                <Properties>
                  <string name="Name">types</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
return nil
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="272">
                <Properties>
                  <string name="Name">use-property</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local _roact = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS"))
local useMemo = _roact.useMemo
local useState = _roact.useState
--[[
	*
	* Tracks the state of multiple properties on an Instance. Returns the values and
	* a Change object that can be spread into the `Change` property of an element.
	* @param propertyNames The names of the properties to track.
	* @returns A tuple containing the values of the properties and a ref callback.
]]
local function useProperty(...)
	local propertyNames = { ... }
	local values, setValues = useState({})
	local events = useMemo(function()
		local _propertyNames = propertyNames
		local _arg0 = function(events, property, index)
			events[property] = function(rbx)
				setValues(function(values)
					local update = table.clone(values)
					update[index + 1] = rbx[property]
					return update
				end)
			end
			return events
		end
		-- ▼ ReadonlyArray.reduce ▼
		local _result = {}
		local _callback = _arg0
		for _i = 1, #_propertyNames do
			_result = _callback(_result, _propertyNames[_i], _i - 1, _propertyNames)
		end
		-- ▲ ReadonlyArray.reduce ▲
		return _result
	end, propertyNames)
	return useMemo(function()
		local results = table.clone(values)
		results[#propertyNames + 1] = events
		return results
	end, { values, events })
end
return {
	useProperty = useProperty,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="273">
                <Properties>
                  <string name="Name">use-property.spec</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
-- / <reference types="@rbxts/testez/globals" />
local renderHook = TS.import(script, script.Parent.Parent, "utils", "testez").renderHook
local useProperty = TS.import(script, script.Parent, "use-property").useProperty
return function()
	local frame = Instance.new("Frame")
	beforeEach(function()
		frame:Destroy()
		frame = Instance.new("Frame")
	end)
	afterAll(function()
		frame:Destroy()
	end)
	it("should return an events object", function()
		local _binding = renderHook(function()
			local _binding_1 = useProperty("Size")
			local size = _binding_1[1]
			local events = _binding_1[2]
			return {
				size = size,
				events = events,
			}
		end)
		local result = _binding.result
		expect(result.current.events).to.be.a("table")
		expect(result.current.events.Size).to.be.a("function")
	end)
	it("should set the property", function()
		local _binding = renderHook(function()
			local _binding_1 = useProperty("Size")
			local size = _binding_1[1]
			local events = _binding_1[2]
			return {
				size = size,
				events = events,
			}
		end)
		local result = _binding.result
		expect(result.current.size).to.equal(nil)
		result.current.events.Size(frame)
		expect(result.current.size).to.equal(frame.Size)
	end)
	it("should set the property to the correct value", function()
		local _binding = renderHook(function()
			local _binding_1 = useProperty("Size")
			local size = _binding_1[1]
			local events = _binding_1[2]
			return {
				size = size,
				events = events,
			}
		end)
		local result = _binding.result
		expect(result.current.size).to.equal(nil)
		result.current.events.Size(frame)
		expect(result.current.size).to.equal(frame.Size)
		frame.Size = UDim2.new(1, 0, 1, 0)
		result.current.events.Size(frame)
		expect(result.current.size).to.equal(frame.Size)
	end)
	it("should receive more than one property", function()
		local _binding = renderHook(function()
			local _binding_1 = useProperty("Size", "Position")
			local size = _binding_1[1]
			local position = _binding_1[2]
			local events = _binding_1[3]
			return {
				size = size,
				position = position,
				events = events,
			}
		end)
		local result = _binding.result
		expect(result.current.size).to.equal(nil)
		expect(result.current.position).to.equal(nil)
		result.current.events.Size(frame)
		result.current.events.Position(frame)
		expect(result.current.size).to.equal(frame.Size)
		expect(result.current.position).to.equal(frame.Position)
		frame.Size = UDim2.new(1, 0, 1, 0)
		frame.Position = UDim2.new(1, 0, 1, 0)
		result.current.events.Size(frame)
		result.current.events.Position(frame)
		expect(result.current.size).to.equal(frame.Size)
		expect(result.current.position).to.equal(frame.Position)
	end)
	it("should support undefined properties", function()
		local _binding = renderHook(function()
			local _binding_1 = useProperty("Parent", "Size")
			local parent = _binding_1[1]
			local size = _binding_1[2]
			local events = _binding_1[3]
			return {
				parent = parent,
				size = size,
				events = events,
			}
		end)
		local result = _binding.result
		expect(result.current.parent).to.equal(nil)
		expect(result.current.size).to.equal(nil)
		result.current.events.Parent(frame)
		result.current.events.Size(frame)
		expect(result.current.parent).to.equal(nil)
		expect(result.current.size).to.equal(frame.Size)
		frame.Parent = game
		result.current.events.Parent(frame)
		expect(result.current.parent).to.equal(game)
		expect(result.current.size).to.equal(frame.Size)
	end)
end
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="274">
              <Properties>
                <string name="Name">use-property-binding</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local exports = {}
for _k, _v in TS.import(script, script, "use-property-binding") or {} do
	exports[_k] = _v
end
return exports
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="275">
                <Properties>
                  <string name="Name">use-property-binding</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local _roact = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS"))
local createBinding = _roact.createBinding
local useMemo = _roact.useMemo
--[[
	*
	* Tracks the state of multiple properties on an Instance. Returns the values and
	* a Change object that can be spread into the `Change` property of an element.
	* @param propertyNames The names of the properties to track.
	* @returns A tuple containing the values of the properties and a ref callback.
]]
local function usePropertyBinding(...)
	local propertyNames = { ... }
	local _binding = useMemo(function()
		local bindings = {}
		local setBindings = {}
		local _propertyNames = propertyNames
		local _arg0 = function(property, index)
			local binding, setBinding = createBinding(nil)
			bindings[index + 1] = binding
			setBindings[index + 1] = setBinding
		end
		for _k, _v in _propertyNames do
			_arg0(_v, _k - 1, _propertyNames)
		end
		return { bindings, setBindings }
	end, propertyNames)
	local bindings = _binding[1]
	local bindingSetters = _binding[2]
	local events = useMemo(function()
		local _propertyNames = propertyNames
		local _arg0 = function(events, property, index)
			events[property] = function(rbx)
				bindingSetters[index + 1](rbx[property])
			end
			return events
		end
		-- ▼ ReadonlyArray.reduce ▼
		local _result = {}
		local _callback = _arg0
		for _i = 1, #_propertyNames do
			_result = _callback(_result, _propertyNames[_i], _i - 1, _propertyNames)
		end
		-- ▲ ReadonlyArray.reduce ▲
		return _result
	end, propertyNames)
	return useMemo(function()
		local results = table.clone(bindings)
		results[#propertyNames + 1] = events
		return results
	end, { bindings, events })
end
return {
	usePropertyBinding = usePropertyBinding,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="276">
                <Properties>
                  <string name="Name">use-property-binding.spec</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
-- / <reference types="@rbxts/testez/globals" />
local renderHook = TS.import(script, script.Parent.Parent, "utils", "testez").renderHook
local usePropertyBinding = TS.import(script, script.Parent, "use-property-binding").usePropertyBinding
return function()
	local frame = Instance.new("Frame")
	beforeEach(function()
		frame:Destroy()
		frame = Instance.new("Frame")
	end)
	afterAll(function()
		frame:Destroy()
	end)
	it("should return bindings and events object", function()
		local _binding = renderHook(function()
			local _binding_1 = usePropertyBinding("Size")
			local binding = _binding_1[1]
			local events = _binding_1[2]
			return {
				binding = binding,
				events = events,
			}
		end)
		local result = _binding.result
		expect(result.current.binding).to.be.a("table")
		expect(result.current.events).to.be.a("table")
		expect(result.current.events.Size).to.be.a("function")
	end)
	it("should set the property", function()
		local _binding = renderHook(function()
			local _binding_1 = usePropertyBinding("Size")
			local binding = _binding_1[1]
			local events = _binding_1[2]
			return {
				binding = binding,
				events = events,
			}
		end)
		local result = _binding.result
		expect(result.current.binding:getValue()).to.equal(nil)
		result.current.events.Size(frame)
		expect(result.current.binding:getValue()).to.equal(frame.Size)
	end)
	it("should set the property to the correct value", function()
		local _binding = renderHook(function()
			local _binding_1 = usePropertyBinding("Size")
			local binding = _binding_1[1]
			local events = _binding_1[2]
			return {
				binding = binding,
				events = events,
			}
		end)
		local result = _binding.result
		expect(result.current.binding:getValue()).to.equal(nil)
		result.current.events.Size(frame)
		expect(result.current.binding:getValue()).to.equal(frame.Size)
		frame.Size = UDim2.new(1, 0, 1, 0)
		result.current.events.Size(frame)
		expect(result.current.binding:getValue()).to.equal(frame.Size)
	end)
	it("should receive more than one property", function()
		local _binding = renderHook(function()
			local _binding_1 = usePropertyBinding("Size", "Position")
			local size = _binding_1[1]
			local position = _binding_1[2]
			local events = _binding_1[3]
			return {
				size = size,
				position = position,
				events = events,
			}
		end)
		local result = _binding.result
		expect(result.current.size:getValue()).to.equal(nil)
		expect(result.current.position:getValue()).to.equal(nil)
		result.current.events.Size(frame)
		result.current.events.Position(frame)
		expect(result.current.size:getValue()).to.equal(frame.Size)
		expect(result.current.position:getValue()).to.equal(frame.Position)
		frame.Size = UDim2.new(1, 0, 1, 0)
		frame.Position = UDim2.new(1, 0, 1, 0)
		result.current.events.Size(frame)
		result.current.events.Position(frame)
		expect(result.current.size:getValue()).to.equal(frame.Size)
		expect(result.current.position:getValue()).to.equal(frame.Position)
	end)
	it("should support undefined properties", function()
		local _binding = renderHook(function()
			local _binding_1 = usePropertyBinding("Parent", "Size")
			local parent = _binding_1[1]
			local size = _binding_1[2]
			local events = _binding_1[3]
			return {
				parent = parent,
				size = size,
				events = events,
			}
		end)
		local result = _binding.result
		expect(result.current.parent:getValue()).to.equal(nil)
		expect(result.current.size:getValue()).to.equal(nil)
		result.current.events.Parent(frame)
		result.current.events.Size(frame)
		expect(result.current.parent:getValue()).to.equal(nil)
		expect(result.current.size:getValue()).to.equal(frame.Size)
		frame.Parent = game
		result.current.events.Parent(frame)
		expect(result.current.parent:getValue()).to.equal(game)
		expect(result.current.size:getValue()).to.equal(frame.Size)
	end)
	it("should memoize the bindings and events", function()
		local _binding = renderHook(function(props)
			local _binding_1 = usePropertyBinding(props.name or "Size")
			local binding = _binding_1[1]
			local events = _binding_1[2]
			return {
				binding = binding,
				events = events,
			}
		end)
		local result = _binding.result
		local rerender = _binding.rerender
		local binding = result.current.binding
		local events = result.current.events
		rerender()
		expect(result.current.binding).to.equal(binding)
		expect(result.current.events).to.equal(events)
		rerender({
			name = "Position",
		})
		expect(result.current.binding).to.never.equal(binding)
		expect(result.current.events).to.never.equal(events)
	end)
end
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="277">
              <Properties>
                <string name="Name">use-throttle-callback</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local exports = {}
for _k, _v in TS.import(script, script, "use-throttle-callback") or {} do
	exports[_k] = _v
end
return exports
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="278">
                <Properties>
                  <string name="Name">use-throttle-callback</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local useMemo = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS")).useMemo
local throttle = TS.import(script, TS.getModule(script, "@rbxts", "set-timeout").out).throttle
local useLatest = TS.import(script, script.Parent.Parent, "use-latest").useLatest
local useUnmountEffect = TS.import(script, script.Parent.Parent, "use-unmount-effect").useUnmountEffect
--[[
	*
	* Creates a throttled function that only invokes `callback` at most once per
	* every `wait` seconds. The `callback` is invoked with the most recent arguments
	* provided to the throttled function. Subsequent calls to the throttled function
	* return the result of the last `callback` invocation.
	*
	* See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	* for details over the differences between `throttle` and `debounce`.
	*
	* @param callback The function to throttle.
	* @param options The options object.
	* @returns The new throttled function.
]]
local function useThrottleCallback(callback, options)
	if options == nil then
		options = {}
	end
	local callbackRef = useLatest(callback)
	local throttled = useMemo(function()
		return throttle(function(...)
			local args = { ... }
			return callbackRef.current(unpack(args))
		end, options.wait, options)
	end, {})
	useUnmountEffect(function()
		throttled.cancel()
	end)
	return {
		run = throttled,
		cancel = throttled.cancel,
		flush = throttled.flush,
		pending = throttled.pending,
	}
end
return {
	useThrottleCallback = useThrottleCallback,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="279">
                <Properties>
                  <string name="Name">use-throttle-callback.spec</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
-- / <reference types="@rbxts/testez/globals" />
local renderHook = TS.import(script, script.Parent.Parent, "utils", "testez").renderHook
local useThrottleCallback = TS.import(script, script.Parent, "use-throttle-callback").useThrottleCallback
return function()
	it("should return run, cancel, and flush", function()
		local count = 0
		local _binding = renderHook(function()
			return useThrottleCallback(function(amount)
				count += amount
				return count
			end, {
				wait = 0.06,
			})
		end)
		local result = _binding.result
		result.current.run(1)
		expect(count).to.equal(1)
		result.current.run(1)
		result.current.run(1)
		result.current.run(1)
		expect(count).to.equal(1)
		task.wait(0.04)
		result.current.run(2)
		expect(count).to.equal(1)
		task.wait(0.03)
		result.current.run(2)
		expect(count).to.equal(3)
		result.current.run(3)
		result.current.run(3)
		task.wait(0.07)
		expect(count).to.equal(6)
		result.current.run(1)
		result.current.run(4)
		result.current.cancel()
		task.wait(0.07)
		expect(count).to.equal(7)
		result.current.run(1)
		result.current.run(1)
		expect(count).to.equal(8)
		result.current.flush()
		expect(count).to.equal(9)
		task.wait(0.07)
		expect(count).to.equal(9)
	end)
end
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="280">
              <Properties>
                <string name="Name">use-throttle-effect</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local exports = {}
for _k, _v in TS.import(script, script, "use-throttle-effect") or {} do
	exports[_k] = _v
end
return exports
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="281">
                <Properties>
                  <string name="Name">use-throttle-effect</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local useEffect = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS")).useEffect
local useThrottleCallback = TS.import(script, script.Parent.Parent, "use-throttle-callback").useThrottleCallback
local useUpdate = TS.import(script, script.Parent.Parent, "use-update").useUpdate
local useUpdateEffect = TS.import(script, script.Parent.Parent, "use-update-effect").useUpdateEffect
--[[
	*
	* Creates a throttled effect that only runs at most once per every `wait`
	* seconds.
	*
	* See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	* for details over the differences between `debounce` and `throttle`.
	*
	* @param effect The effect to throttle.
	* @param dependencies The dependencies array.
	* @param options The options object.
]]
local function useThrottleEffect(effect, dependencies, options)
	local update = useUpdate()
	local _binding = useThrottleCallback(update, options)
	local run = _binding.run
	useEffect(function()
		return run()
	end, dependencies)
	useUpdateEffect(effect, { update })
end
return {
	useThrottleEffect = useThrottleEffect,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="282">
                <Properties>
                  <string name="Name">use-throttle-effect.spec</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
-- / <reference types="@rbxts/testez/globals" />
local renderHook = TS.import(script, script.Parent.Parent, "utils", "testez").renderHook
local useThrottleEffect = TS.import(script, script.Parent, "use-throttle-effect").useThrottleEffect
return function()
	it("should throttle the effect", function()
		local count = 0
		local _binding = renderHook(function(_param)
			local input = _param.input
			return useThrottleEffect(function()
				count += 1
			end, { input }, {
				wait = 0.06,
			})
		end, {
			initialProps = {
				input = 0,
			},
		})
		local rerender = _binding.rerender
		local unmount = _binding.unmount
		rerender({
			input = 1,
		})
		expect(count).to.equal(1)
		rerender({
			input = 1,
		})
		rerender({
			input = 1,
		})
		rerender({
			input = 1,
		})
		expect(count).to.equal(1)
		task.wait(0.04)
		rerender({
			input = 2,
		})
		expect(count).to.equal(1)
		task.wait(0.03)
		rerender({
			input = 2,
		})
		expect(count).to.equal(2)
		rerender({
			input = 3,
		})
		rerender({
			input = 3,
		})
		task.wait(0.065)
		expect(count).to.equal(3)
		unmount()
	end)
end
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="283">
              <Properties>
                <string name="Name">use-throttle-state</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local exports = {}
for _k, _v in TS.import(script, script, "use-throttle-state") or {} do
	exports[_k] = _v
end
return exports
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="284">
                <Properties>
                  <string name="Name">use-throttle-state</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local useState = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS")).useState
local useThrottleCallback = TS.import(script, script.Parent.Parent, "use-throttle-callback").useThrottleCallback
--[[
	*
	* Creates a throttled state that only updates at most once per every `wait`
	* seconds. Set to the most recently passed `state` after each interval.
	*
	* See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	* for details over the differences between `debounce` and `throttle`.
	*
	* @param value The value to throttle.
	* @param options The options object.
	* @returns The throttled value.
]]
local function useThrottleState(initialState, options)
	local state, setState = useState(initialState)
	return state, useThrottleCallback(setState, options).run
end
return {
	useThrottleState = useThrottleState,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="285">
                <Properties>
                  <string name="Name">use-throttle-state.spec</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
-- / <reference types="@rbxts/testez/globals" />
local renderHook = TS.import(script, script.Parent.Parent, "utils", "testez").renderHook
local useThrottleState = TS.import(script, script.Parent, "use-throttle-state").useThrottleState
return function()
	it("should throttle the state", function()
		local _binding = renderHook(function()
			local state, setState = useThrottleState(0, {
				wait = 0.06,
			})
			return {
				state = state,
				setState = setState,
			}
		end)
		local result = _binding.result
		local unmount = _binding.unmount
		result.current.setState(1)
		expect(result.current.state).to.equal(1)
		result.current.setState(1)
		result.current.setState(1)
		result.current.setState(1)
		expect(result.current.state).to.equal(1)
		task.wait(0.04)
		result.current.setState(2)
		expect(result.current.state).to.equal(1)
		task.wait(0.03)
		result.current.setState(2)
		expect(result.current.state).to.equal(2)
		result.current.setState(3)
		result.current.setState(3)
		task.wait(0.065)
		expect(result.current.state).to.equal(3)
		unmount()
	end)
end
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="286">
              <Properties>
                <string name="Name">use-timeout</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local exports = {}
for _k, _v in TS.import(script, script, "use-timeout") or {} do
	exports[_k] = _v
end
return exports
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="287">
                <Properties>
                  <string name="Name">use-timeout</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local _roact = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS"))
local useCallback = _roact.useCallback
local useEffect = _roact.useEffect
local useRef = _roact.useRef
local setTimeout = TS.import(script, TS.getModule(script, "@rbxts", "set-timeout").out).setTimeout
local useLatestCallback = TS.import(script, script.Parent.Parent, "use-latest-callback").useLatestCallback
--[[
	*
	* Sets a timeout that runs the callback function after `delay` seconds. If
	* `delay` is `undefined`, the timeout is cleared. If the delay changes, the
	* timeout is reset.
	* @param callback The callback function to run.
	* @param delay The delay in seconds before the timeout.
	* @returns A function that clears the timeout.
]]
local function useTimeout(callback, delay)
	local callbackMemo = useLatestCallback(callback)
	local cancel = useRef()
	local clear = useCallback(function()
		local _result = cancel.current
		if _result ~= nil then
			_result()
		end
	end, {})
	useEffect(function()
		if delay == nil then
			return nil
		end
		cancel.current = setTimeout(callbackMemo, delay)
		return clear
	end, { delay })
	return clear
end
return {
	useTimeout = useTimeout,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="288">
                <Properties>
                  <string name="Name">use-timeout.spec</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
-- / <reference types="@rbxts/testez/globals" />
local renderHook = TS.import(script, script.Parent.Parent, "utils", "testez").renderHook
local useTimeout = TS.import(script, script.Parent, "use-timeout").useTimeout
return function()
	it("should run the callback after the delay", function()
		local count = 0
		local _binding = renderHook(function()
			useTimeout(function()
				local _original = count
				count += 1
				return _original
			end, 0.03)
		end)
		local unmount = _binding.unmount
		expect(count).to.equal(0)
		task.wait(0.04)
		expect(count).to.equal(1)
		task.wait(0.04)
		expect(count).to.equal(1)
		unmount()
	end)
	it("should clear when delay is undefined", function()
		local count = 0
		local _binding = renderHook(function(_param)
			local delay = _param.delay
			useTimeout(function()
				local _original = count
				count += 1
				return _original
			end, delay)
		end, {
			initialProps = {
				delay = 0.06,
			},
		})
		local rerender = _binding.rerender
		local unmount = _binding.unmount
		expect(count).to.equal(0)
		task.wait(0.01)
		expect(count).to.equal(0)
		rerender({
			delay = nil,
		})
		task.wait(0.07)
		expect(count).to.equal(0)
		unmount()
	end)
	it("should clear on unmount", function()
		local count = 0
		local _binding = renderHook(function()
			useTimeout(function()
				local _original = count
				count += 1
				return _original
			end, 0.06)
		end)
		local unmount = _binding.unmount
		expect(count).to.equal(0)
		task.wait(0.01)
		expect(count).to.equal(0)
		unmount()
		task.wait(0.06)
		expect(count).to.equal(0)
	end)
	it("should reset when delay updates", function()
		local count = 0
		local _binding = renderHook(function(_param)
			local delay = _param.delay
			useTimeout(function()
				local _original = count
				count += 1
				return _original
			end, delay)
		end, {
			initialProps = {
				delay = 0.06,
			},
		})
		local rerender = _binding.rerender
		local unmount = _binding.unmount
		expect(count).to.equal(0)
		task.wait(0.01)
		expect(count).to.equal(0)
		rerender({
			delay = 0.06,
		})
		task.wait(0.01)
		expect(count).to.equal(0)
		rerender({
			delay = 0.12,
		})
		task.wait(0.07)
		expect(count).to.equal(0)
		task.wait(0.07)
		expect(count).to.equal(1)
		unmount()
	end)
	it("should return a clear function", function()
		local count = 0
		local _binding = renderHook(function()
			return useTimeout(function()
				local _original = count
				count += 1
				return _original
			end, 0.06)
		end)
		local result = _binding.result
		local unmount = _binding.unmount
		expect(count).to.equal(0)
		task.wait(0.01)
		expect(count).to.equal(0)
		result.current()
		task.wait(0.07)
		expect(count).to.equal(0)
		unmount()
	end)
end
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="289">
              <Properties>
                <string name="Name">use-timer</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local exports = {}
for _k, _v in TS.import(script, script, "use-timer") or {} do
	exports[_k] = _v
end
return exports
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="290">
                <Properties>
                  <string name="Name">use-timer</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local _roact = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS"))
local useBinding = _roact.useBinding
local useCallback = _roact.useCallback
local useRef = _roact.useRef
local RunService = TS.import(script, TS.getModule(script, "@rbxts", "services")).RunService
local useEventListener = TS.import(script, script.Parent.Parent, "use-event-listener").useEventListener
--[[
	*
	* Creates a timer that can be used to track a value over time.
	* @param initialValue The initial value of the timer.
	* @returns A timer object.
]]
local function useTimer(initialValue)
	if initialValue == nil then
		initialValue = 0
	end
	local value, setValue = useBinding(initialValue)
	local started = useRef(true)
	useEventListener(RunService.Heartbeat, function(deltaTime)
		if started.current then
			setValue(value:getValue() + deltaTime)
		end
	end)
	local start = useCallback(function()
		started.current = true
	end, {})
	local stop = useCallback(function()
		started.current = false
	end, {})
	local reset = useCallback(function()
		setValue(0)
	end, {})
	local set = useCallback(function(value)
		setValue(value)
	end, {})
	return {
		value = value,
		start = start,
		stop = stop,
		reset = reset,
		set = set,
	}
end
return {
	useTimer = useTimer,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="291">
                <Properties>
                  <string name="Name">use-timer.spec</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
-- / <reference types="@rbxts/testez/globals" />
local renderHook = TS.import(script, script.Parent.Parent, "utils", "testez").renderHook
local useTimer = TS.import(script, script.Parent, "use-timer").useTimer
return function()
	it("should start the timer on mount", function()
		local _binding = renderHook(function()
			return useTimer()
		end)
		local result = _binding.result
		local unmount = _binding.unmount
		expect(result.current.value:getValue()).to.equal(0)
		local timePassed = task.wait(0.2)
		expect(result.current.value:getValue()).to.be:near(timePassed, 0.08)
		unmount()
	end)
	it("should return functions to start and stop the timer", function()
		local _binding = renderHook(function()
			return useTimer()
		end)
		local result = _binding.result
		local unmount = _binding.unmount
		expect(result.current.value:getValue()).to.equal(0)
		local timePassed = task.wait(0.2)
		local timerValue = result.current.value:getValue()
		expect(timerValue).to.be:near(timePassed, 0.08)
		result.current.stop()
		task.wait(0.2)
		expect(result.current.value:getValue()).to.equal(timerValue)
		result.current.start()
		local timePassedAfterStart = task.wait(0.2)
		expect(result.current.value:getValue()).to.be:near(timePassed + timePassedAfterStart, 0.08)
		unmount()
	end)
	it("should return a function to set the timer", function()
		local _binding = renderHook(function()
			return useTimer()
		end)
		local result = _binding.result
		local unmount = _binding.unmount
		expect(result.current.value:getValue()).to.equal(0)
		local timePassed = task.wait(0.2)
		expect(result.current.value:getValue()).to.be:near(timePassed, 0.08)
		result.current.reset()
		expect(result.current.value:getValue()).to.equal(0)
		result.current.set(1)
		expect(result.current.value:getValue()).to.equal(1)
		local timePassedAfterSet = task.wait(0.2)
		expect(result.current.value:getValue()).to.be:near(timePassedAfterSet + 1, 0.08)
		unmount()
	end)
end
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="292">
              <Properties>
                <string name="Name">use-unmount-effect</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local exports = {}
for _k, _v in TS.import(script, script, "use-unmount-effect") or {} do
	exports[_k] = _v
end
return exports
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="293">
                <Properties>
                  <string name="Name">use-unmount-effect</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local useEffect = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS")).useEffect
local useLatest = TS.import(script, script.Parent.Parent, "use-latest").useLatest
--[[
	*
	* Calls the callback when the component unmounts.
	* @param callback The callback to call.
]]
local function useUnmountEffect(callback)
	local callbackRef = useLatest(callback)
	useEffect(function()
		return function()
			callbackRef.current()
		end
	end, {})
end
return {
	useUnmountEffect = useUnmountEffect,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="294">
                <Properties>
                  <string name="Name">use-unmount-effect.spec</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
-- / <reference types="@rbxts/testez/globals" />
local renderHook = TS.import(script, script.Parent.Parent, "utils", "testez").renderHook
local useUnmountEffect = TS.import(script, script.Parent, "use-unmount-effect").useUnmountEffect
return function()
	it("should call when component unmounts", function()
		local called = false
		local _binding = renderHook(function()
			return useUnmountEffect(function()
				called = true
				return called
			end)
		end)
		local unmount = _binding.unmount
		expect(called).to.equal(false)
		unmount()
		expect(called).to.equal(true)
	end)
	it("should not call on rerender", function()
		local called = false
		local _binding = renderHook(function()
			return useUnmountEffect(function()
				called = true
				return called
			end)
		end)
		local rerender = _binding.rerender
		expect(called).to.equal(false)
		rerender()
		expect(called).to.equal(false)
	end)
	it("should call the last callback on unmount", function()
		local called = 0
		local _binding = renderHook(function(callback)
			return useUnmountEffect(callback)
		end, {
			initialProps = function()
				called = 0
				return called
			end,
		})
		local rerender = _binding.rerender
		local unmount = _binding.unmount
		rerender(function()
			called += 1
			return called
		end)
		unmount()
		expect(called).to.equal(1)
	end)
end
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="295">
              <Properties>
                <string name="Name">use-update</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local exports = {}
for _k, _v in TS.import(script, script, "use-update") or {} do
	exports[_k] = _v
end
return exports
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="296">
                <Properties>
                  <string name="Name">use-update</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local _roact = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS"))
local useCallback = _roact.useCallback
local useState = _roact.useState
--[[
	*
	* Returns a function that can be used to force a component to update. The
	* function is recreated on the next render if called. This makes it useful as
	* a dependency for other hooks.
	* @returns A function that forces a rerender.
]]
local function useUpdate()
	local state, setState = useState({})
	return useCallback(function()
		setState({})
	end, { state })
end
return {
	useUpdate = useUpdate,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="297">
                <Properties>
                  <string name="Name">use-update.spec</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
-- / <reference types="@rbxts/testez/globals" />
local useEffect = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS")).useEffect
local renderHook = TS.import(script, script.Parent.Parent, "utils", "testez").renderHook
local useUpdate = TS.import(script, script.Parent, "use-update").useUpdate
return function()
	it("should cause a rerender", function()
		local renders = 0
		renderHook(function()
			local rerender = useUpdate()
			useEffect(function()
				rerender()
			end, {})
			renders += 1
		end)
		expect(renders).to.equal(2)
	end)
	it("should return a new function on each update", function()
		local rerender = function() end
		local previousRerender = function() end
		renderHook(function()
			previousRerender = rerender
			rerender = useUpdate()
		end)
		expect(rerender).never.to.equal(previousRerender)
		rerender()
		expect(rerender).never.to.equal(previousRerender)
	end)
end
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="298">
              <Properties>
                <string name="Name">use-update-effect</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local exports = {}
for _k, _v in TS.import(script, script, "use-update-effect") or {} do
	exports[_k] = _v
end
return exports
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="299">
                <Properties>
                  <string name="Name">use-update-effect</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local _roact = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS"))
local useEffect = _roact.useEffect
local useRef = _roact.useRef
--[[
	*
	* Runs a callback when the component is re-rendered. Does not run on the
	* first render.
	* @param effect The callback to run.
	* @param dependencies The dependencies to watch for changes.
]]
local function useUpdateEffect(effect, dependencies)
	local isMounted = useRef(false)
	useEffect(function()
		if isMounted.current then
			return effect()
		else
			isMounted.current = true
		end
	end, dependencies)
end
return {
	useUpdateEffect = useUpdateEffect,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="300">
                <Properties>
                  <string name="Name">use-update-effect.spec</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
-- / <reference types="@rbxts/testez/globals" />
local renderHook = TS.import(script, script.Parent.Parent, "utils", "testez").renderHook
local useUpdateEffect = TS.import(script, script.Parent, "use-update-effect").useUpdateEffect
return function()
	it("should call effect on update only", function()
		local renders = 0
		local _binding = renderHook(function()
			return useUpdateEffect(function()
				renders += 1
			end)
		end)
		local rerender = _binding.rerender
		expect(renders).to.equal(0)
		rerender()
		expect(renders).to.equal(1)
	end)
	it("should call effect with dependencies", function()
		local renders = 0
		local _binding = renderHook(function(value)
			return useUpdateEffect(function()
				renders += 1
			end, { value })
		end)
		local rerender = _binding.rerender
		expect(renders).to.equal(0)
		rerender("test")
		expect(renders).to.equal(1)
		rerender("test")
		expect(renders).to.equal(1)
		rerender("test2")
		expect(renders).to.equal(2)
	end)
end
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="301">
              <Properties>
                <string name="Name">use-viewport</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local exports = {}
for _k, _v in TS.import(script, script, "use-viewport") or {} do
	exports[_k] = _v
end
return exports
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="302">
                <Properties>
                  <string name="Name">use-viewport</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local _roact = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS"))
local useBinding = _roact.useBinding
local useEffect = _roact.useEffect
local useMemo = _roact.useMemo
local useCamera = TS.import(script, script.Parent.Parent, "use-camera").useCamera
local useEventListener = TS.import(script, script.Parent.Parent, "use-event-listener").useEventListener
--[[
	*
	* Returns the current viewport size of the camera.
	* @param listener Optional listener to be called when the viewport changes.
	* @returns A binding to the viewport size.
]]
local function useViewport(listener)
	local camera = useCamera()
	local viewport, setViewport = useBinding(Vector2.one)
	local _result = camera
	if _result ~= nil then
		_result = _result:GetPropertyChangedSignal("ViewportSize")
	end
	useEventListener(_result, function()
		setViewport(camera.ViewportSize)
		local _result_1 = listener
		if _result_1 ~= nil then
			_result_1(camera.ViewportSize)
		end
	end)
	useMemo(function()
		if camera then
			setViewport(camera.ViewportSize)
		end
	end, { camera })
	useEffect(function()
		local _result_1 = listener
		if _result_1 ~= nil then
			_result_1(viewport:getValue())
		end
	end, { camera })
	return viewport
end
return {
	useViewport = useViewport,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="303">
                <Properties>
                  <string name="Name">use-viewport.spec</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
-- / <reference types="@rbxts/testez/globals" />
local Workspace = TS.import(script, TS.getModule(script, "@rbxts", "services")).Workspace
local renderHook = TS.import(script, script.Parent.Parent, "utils", "testez").renderHook
local useViewport = TS.import(script, script.Parent, "use-viewport").useViewport
return function()
	it("should return a binding to the viewport size", function()
		local _binding = renderHook(function()
			return useViewport()
		end)
		local result = _binding.result
		local unmount = _binding.unmount
		expect(result.current).to.be.a("table")
		expect(result.current:getValue()).to.be.a("userdata")
		expect(result.current:getValue()).to.equal(Workspace.CurrentCamera.ViewportSize)
		unmount()
	end)
	it("should receive an optional listener", function()
		local viewport = Vector2.new(-1, -1)
		local _binding = renderHook(function()
			return useViewport(function(v)
				viewport = v
				return viewport
			end)
		end)
		local unmount = _binding.unmount
		expect(viewport).never.to.equal(Vector2.new(-1, -1))
		expect(viewport).to.equal(Workspace.CurrentCamera.ViewportSize)
		unmount()
	end)
end
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="Folder" referent="304">
              <Properties>
                <string name="Name">utils</string>
              </Properties>
              <Item class="ModuleScript" referent="305">
                <Properties>
                  <string name="Name">binding</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local _roact = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS"))
local createBinding = _roact.createBinding
local joinBindings = _roact.joinBindings
local lerp = TS.import(script, script.Parent, "math").lerp
--[[
	*
	* @see https://github.com/Roblox/roact/blob/master/src/Binding.lua
]]
--[[
	*
	* Returns whether the given value is a binding.
	* @param value The value to check.
	* @returns Whether the value is a binding.
]]
local function isBinding(value)
	local _value = value
	local _condition = type(_value) == "table"
	if _condition then
		_condition = value.getValue ~= nil and value.map ~= nil
	end
	return _condition
end
--[[
	*
	* Converts a value to a binding. If the given value is already a binding, it
	* will be returned as-is.
	* @param value The value to convert.
	* @returns The converted binding.
]]
local function toBinding(value)
	if isBinding(value) then
		return value
	else
		local result = createBinding(value)
		return result
	end
end
--[[
	*
	* Returns the value of a binding. If the given value is not a binding, it will
	* be returned as-is.
	* @param binding The binding to get the value of.
	* @returns The value of the binding.
]]
local function getBindingValue(binding)
	if isBinding(binding) then
		return binding:getValue()
	else
		return binding
	end
end
--[[
	*
	* Maps a binding to a new binding. If the given value is not a binding, it will
	* be passed to the mapper function and returned as a new binding.
	* @param binding The binding to map.
	* @param callback The mapper function.
	* @returns The mapped binding.
]]
local function mapBinding(binding, callback)
	if isBinding(binding) then
		return binding:map(callback)
	else
		local result = createBinding(callback(binding))
		return result
	end
end
--[[
	*
	* Joins a map of bindings into a single binding. If any of the given values
	* are not bindings, they will be wrapped in a new binding.
	* @param bindings The bindings to join.
	* @returns The joined binding.
]]
local function joinAnyBindings(bindings)
	local bindingsToMap = {}
	for k, v in pairs(bindings) do
		bindingsToMap[k] = toBinding(v)
	end
	return joinBindings(bindingsToMap)
end
--[[
	*
	* Gets the internal API of a binding. This is a hacky way to get access to the
	* `BindingInternalApi` object of a binding, which is not exposed by Roact.
	* @param binding The binding to get the internal API of.
	* @returns The binding's API.
]]
local function getBindingApi(binding)
	for key, value in pairs(binding) do
		local name = tostring(key)
		if name == "Symbol(BindingImpl)" or string.sub(name, 1, 12) == "RoactBinding" then
			return value
		end
	end
end
--[[
	*
	* Returns a binding that lerps between two values using the given binding as
	* the alpha.
	* @param binding The binding to use as the alpha.
	* @param from The value to lerp from.
	* @param to The value to lerp to.
	* @returns A binding that lerps between two values.
]]
local function lerpBinding(binding, from, to)
	return mapBinding(binding, function(alpha)
		local _from = from
		if type(_from) == "number" then
			return lerp(from, to, alpha)
		else
			return from:Lerp(to, alpha)
		end
	end)
end
--[[
	*
	* Composes multiple bindings or values together into a single binding.
	* Calls the combiner function with the values of the bindings when any
	* of the bindings change.
	* @param ...bindings A list of bindings or values.
	* @param combiner The function that maps the bindings to a new value.
	* @returns A binding that returns the result of the combiner.
]]
local function composeBindings(...)
	local values = { ... }
	-- ▼ Array.pop ▼
	local _length = #values
	local _result = values[_length]
	values[_length] = nil
	-- ▲ Array.pop ▲
	local combiner = _result
	-- ▼ ReadonlyArray.map ▼
	local _newValue = table.create(#values)
	for _k, _v in values do
		_newValue[_k] = toBinding(_v, _k - 1, values)
	end
	-- ▲ ReadonlyArray.map ▲
	local bindings = _newValue
	return joinBindings(bindings):map(function(bindings)
		return combiner(unpack(bindings))
	end)
end
return {
	isBinding = isBinding,
	toBinding = toBinding,
	getBindingValue = getBindingValue,
	mapBinding = mapBinding,
	joinAnyBindings = joinAnyBindings,
	getBindingApi = getBindingApi,
	lerpBinding = lerpBinding,
	composeBindings = composeBindings,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="306">
                <Properties>
                  <string name="Name">hoarcekat</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local createRoot = TS.import(script, TS.getModule(script, "@rbxts", "ReactRoblox")).createRoot
local _roact = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS"))
local Roact = _roact
local StrictMode = _roact.StrictMode
--[[
	*
	* Returns a function that can be used as a Hoarcekat story. This function will
	* mount the given component to the target instance and unmount it when the
	* story is unmounted.
	* @param TestComponent The component to mount.
	* @param options Optional options to pass to `withHookDetection`.
	* @returns A Hoarcekat story.
]]
local function hoarcekat(TestComponent)
	return function(target)
		local root = createRoot(target)
		root:render(Roact.createElement(StrictMode, {}, {
			Roact.createElement(TestComponent, {
				key = "story",
			}),
		}))
		return function()
			root:unmount()
		end
	end
end
return {
	hoarcekat = hoarcekat,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="307">
                <Properties>
                  <string name="Name">math</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
--[[
	*
	* Linearly interpolates between two numbers.
	* @param a The first number.
	* @param b The second number.
	* @param alpha The alpha value to use.
	* @returns The interpolated number.
]]
local function lerp(a, b, alpha)
	return a + (b - a) * alpha
end
--[[
	*
	* Maps a value from one range to another.
	* @param value The value to map.
	* @param fromMin The minimum of the input range.
	* @param fromMax The maximum of the input range.
	* @param toMin The minimum of the output range.
	* @param toMax The maximum of the output range.
	* @returns The mapped value.
]]
local function map(value, fromMin, fromMax, toMin, toMax)
	return ((value - fromMin) * (toMax - toMin)) / (fromMax - fromMin) + toMin
end
--[[
	*
	* Multiplies transparency values together. Normally, multiplying transparency
	* values requires inverting them (to get opacity), multiplying them, and then
	* inverting them again. This function does that for you.
	* @param transparencies The transparencies to multiply.
	* @returns The multiplied transparency.
]]
local function blend(...)
	local transparencies = { ... }
	local result = 1
	for _, transparency in transparencies do
		result *= 1 - transparency
	end
	return 1 - result
end
return {
	lerp = lerp,
	map = map,
	blend = blend,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="308">
                <Properties>
                  <string name="Name">motor</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
--[[
	*
	* Gets the internal state of the motor.
	* @param motor The motor to get the state of
	* @returns The motor's state
]]
local function motorGetState(motor)
	return motor._state
end
--[[
	*
	* Sets the internal state of the motor.
	* @param motor The motor to set the value of
	* @param state The state to set
]]
local function motorSetState(motor, state)
	local currentState = motor._state
	for key, value in pairs(state) do
		currentState[key] = value
	end
end
--[[
	*
	* Applies an impulse to the motor's velocity.
	* @param motor The motor to apply the impulse to
	* @param impulse The impulse to apply
]]
local function motorImpulse(motor, impulse)
	local currentState = motor._state
	local _condition = currentState.velocity
	if _condition == nil then
		_condition = 0
	end
	currentState.velocity = _condition + impulse
end
--[[
	*
	* Gets the state of every key in the group motor.
	* @param motor The group motor to get the state of
	* @returns The group motor's state
]]
local function groupMotorGetState(groupMotor)
	local state = {}
	for key, motor in groupMotor._motors do
		state[key] = motor._state
	end
	return state
end
--[[
	*
	* Sets the state with the given keys in the group motor.
	* @param motor The group motor to set the state of
	* @param state The state to set
]]
local function groupMotorSetState(groupMotor, states)
	for key, state in pairs(states) do
		local motor = groupMotor._motors[key]
		if motor then
			motorSetState(motor, state)
		end
	end
end
--[[
	*
	* Applies impulses to the motor's velocity.
	* @param motor The group motor to apply the impulses to
	* @param impulses The impulses to apply
]]
local function groupMotorImpulse(groupMotor, impulses)
	for key, state in pairs(impulses) do
		local motor = groupMotor._motors[key]
		if motor then
			local _condition = motor._state.velocity
			if _condition == nil then
				_condition = 0
			end
			motor._state.velocity = _condition + state
		end
	end
end
return {
	motorGetState = motorGetState,
	motorSetState = motorSetState,
	motorImpulse = motorImpulse,
	groupMotorGetState = groupMotorGetState,
	groupMotorSetState = groupMotorSetState,
	groupMotorImpulse = groupMotorImpulse,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="309">
                <Properties>
                  <string name="Name">shallow-equal</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
--[[
	*
	* Compares two objects to see if they are shallowly equal.
	* @param objectA The first object to compare.
	* @param objectB The second object to compare.
	* @returns Whether or not the two objects are shallowly equal.
]]
local function shallowEqual(objectA, objectB)
	if objectA == objectB then
		return true
	end
	if objectA == nil or objectB == nil then
		return false
	end
	for key, value in pairs(objectA) do
		if objectB[key] ~= value then
			return false
		end
	end
	for key, value in pairs(objectB) do
		if objectA[key] ~= value then
			return false
		end
	end
	return true
end
return {
	shallowEqual = shallowEqual,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="310">
                <Properties>
                  <string name="Name">testez</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local _roact = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS"))
local Roact = _roact
local useEffect = _roact.useEffect
local useRef = _roact.useRef
--[[
	*
	* Allows you to render a hook within a test React component without having to
	* create that component yourself.
	* @see https://github.com/testing-library/react-testing-library
]]
local function renderHook(render, options)
	if options == nil then
		options = {}
	end
	local result = {
		current = nil,
	}
	local function TestComponent(_param)
		local initialProps = _param.initialProps
		local previousProps = useRef(initialProps)
		local _fn = render
		local _condition = initialProps
		if _condition == nil then
			_condition = previousProps.current
			if _condition == nil then
				_condition = ({})
			end
		end
		local pendingResult = _fn(_condition)
		useEffect(function()
			previousProps.current = initialProps
			result.current = pendingResult
		end)
		return nil
	end
	local handle = Roact.mount(Roact.createElement(TestComponent, {
		initialProps = options.initialProps,
	}), options.container)
	local rerender = function(props)
		Roact.update(handle, Roact.createElement(TestComponent, {
			initialProps = props,
		}))
	end
	local unmount = function()
		Roact.unmount(handle)
	end
	return {
		rerender = rerender,
		result = result,
		unmount = unmount,
	}
end
return {
	renderHook = renderHook,
}
]]></string>
                </Properties>
              </Item>
            </Item>
          </Item>
          <Item class="ModuleScript" referent="311">
            <Properties>
              <string name="Name">promise-character</string>
              <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.3
local TS = _G[script]
local promiseTree = TS.import(script, TS.getModule(script, "@rbxts", "validate-tree")).promiseTree
local CharacterRigR6 = {
	["$className"] = "Model",
	Head = {
		["$className"] = "Part",
		FaceCenterAttachment = "Attachment",
		FaceFrontAttachment = "Attachment",
		HairAttachment = "Attachment",
		HatAttachment = "Attachment",
	},
	HumanoidRootPart = {
		["$className"] = "BasePart",
		RootAttachment = "Attachment",
		RootJoint = "Motor6D",
	},
	Humanoid = {
		["$className"] = "Humanoid",
		Animator = "Animator",
		HumanoidDescription = "HumanoidDescription",
	},
	["Left Arm"] = {
		["$className"] = "BasePart",
		LeftGripAttachment = "Attachment",
		LeftShoulderAttachment = "Attachment",
	},
	["Left Leg"] = {
		["$className"] = "BasePart",
		LeftFootAttachment = "Attachment",
	},
	["Right Arm"] = {
		["$className"] = "BasePart",
		RightGripAttachment = "Attachment",
		RightShoulderAttachment = "Attachment",
	},
	["Right Leg"] = {
		["$className"] = "BasePart",
		RightFootAttachment = "Attachment",
	},
	Torso = {
		["$className"] = "BasePart",
		["Left Hip"] = "Motor6D",
		["Left Shoulder"] = "Motor6D",
		["Right Hip"] = "Motor6D",
		["Right Shoulder"] = "Motor6D",
		Neck = "Motor6D",
		BodyBackAttachment = "Attachment",
		BodyFrontAttachment = "Attachment",
		LeftCollarAttachment = "Attachment",
		NeckAttachment = "Attachment",
		RightCollarAttachment = "Attachment",
		WaistBackAttachment = "Attachment",
		WaistCenterAttachment = "Attachment",
		WaistFrontAttachment = "Attachment",
	},
	["Body Colors"] = "BodyColors",
}
local CharacterRigR15 = {
	["$className"] = "Model",
	HumanoidRootPart = {
		["$className"] = "BasePart",
		RootRigAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		OriginalSize = "Vector3Value",
	},
	LeftHand = {
		["$className"] = "MeshPart",
		LeftWristRigAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		LeftGripAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		LeftWrist = "Motor6D",
		OriginalSize = "Vector3Value",
	},
	LeftLowerArm = {
		["$className"] = "MeshPart",
		LeftElbowRigAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		LeftWristRigAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		LeftElbow = "Motor6D",
		OriginalSize = "Vector3Value",
	},
	LeftUpperArm = {
		["$className"] = "MeshPart",
		LeftShoulderRigAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		LeftElbowRigAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		LeftShoulderAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		LeftShoulder = "Motor6D",
		OriginalSize = "Vector3Value",
	},
	RightHand = {
		["$className"] = "MeshPart",
		RightWristRigAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		RightGripAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		RightWrist = "Motor6D",
		OriginalSize = "Vector3Value",
	},
	RightLowerArm = {
		["$className"] = "MeshPart",
		RightElbowRigAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		RightWristRigAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		RightElbow = "Motor6D",
		OriginalSize = "Vector3Value",
	},
	RightUpperArm = {
		["$className"] = "MeshPart",
		RightShoulderRigAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		RightElbowRigAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		RightShoulderAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		RightShoulder = "Motor6D",
		OriginalSize = "Vector3Value",
	},
	UpperTorso = {
		["$className"] = "MeshPart",
		WaistRigAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		NeckRigAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		LeftShoulderRigAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		RightShoulderRigAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		BodyFrontAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		BodyBackAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		LeftCollarAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		RightCollarAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		NeckAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		Waist = "Motor6D",
		OriginalSize = "Vector3Value",
	},
	LeftFoot = {
		["$className"] = "MeshPart",
		LeftAnkleRigAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		LeftAnkle = "Motor6D",
		OriginalSize = "Vector3Value",
	},
	LeftLowerLeg = {
		["$className"] = "MeshPart",
		LeftKneeRigAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		LeftAnkleRigAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		LeftKnee = "Motor6D",
		OriginalSize = "Vector3Value",
	},
	LeftUpperLeg = {
		["$className"] = "MeshPart",
		LeftHipRigAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		LeftKneeRigAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		LeftHip = "Motor6D",
		OriginalSize = "Vector3Value",
	},
	RightFoot = {
		["$className"] = "MeshPart",
		RightAnkleRigAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		RightAnkle = "Motor6D",
		OriginalSize = "Vector3Value",
	},
	RightLowerLeg = {
		["$className"] = "MeshPart",
		RightKneeRigAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		RightAnkleRigAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		RightKnee = "Motor6D",
		OriginalSize = "Vector3Value",
	},
	RightUpperLeg = {
		["$className"] = "MeshPart",
		RightHipRigAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		RightKneeRigAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		RightHip = "Motor6D",
		OriginalSize = "Vector3Value",
	},
	LowerTorso = {
		["$className"] = "MeshPart",
		RootRigAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		WaistRigAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		LeftHipRigAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		RightHipRigAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		WaistCenterAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		WaistFrontAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		WaistBackAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		Root = "Motor6D",
		OriginalSize = "Vector3Value",
	},
	Humanoid = {
		["$className"] = "Humanoid",
		Animator = "Animator",
		BodyTypeScale = "NumberValue",
		BodyProportionScale = "NumberValue",
		BodyWidthScale = "NumberValue",
		BodyHeightScale = "NumberValue",
		BodyDepthScale = "NumberValue",
		HeadScale = "NumberValue",
		HumanoidDescription = "HumanoidDescription",
	},
	Head = {
		["$className"] = "MeshPart",
		FaceCenterAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		FaceFrontAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		HairAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		HatAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		NeckRigAttachment = {
			["$className"] = "Attachment",
			OriginalPosition = "Vector3Value",
		},
		Neck = "Motor6D",
		OriginalSize = "Vector3Value",
	},
	["Body Colors"] = "BodyColors",
}
-- * Yields until every member of CharacterRigR6 exists
local function promiseR6(character)
	return promiseTree(character, CharacterRigR6)
end
-- * Yields until every member of CharacterRigR15 exists
local function promiseR15(character)
	return promiseTree(character, CharacterRigR15)
end
local default = promiseR15
return {
	promiseR6 = promiseR6,
	promiseR15 = promiseR15,
	CharacterRigR6 = CharacterRigR6,
	CharacterRigR15 = CharacterRigR15,
	default = default,
}
]]></string>
            </Properties>
            <Item class="Folder" referent="312">
              <Properties>
                <string name="Name">node_modules</string>
              </Properties>
              <Item class="Folder" referent="313">
                <Properties>
                  <string name="Name">@rbxts</string>
                </Properties>
                <Item class="Folder" referent="314">
                  <Properties>
                    <string name="Name">compiler-types</string>
                  </Properties>
                  <Item class="Folder" referent="315">
                    <Properties>
                      <string name="Name">types</string>
                    </Properties>
                  </Item>
                </Item>
              </Item>
            </Item>
          </Item>
          <Item class="ModuleScript" referent="316">
            <Properties>
              <string name="Name">Promise</string>
              <string name="Source"><![CDATA[local rbxts_include = script:FindFirstAncestor("rbxts_include")
local node_modules = script:FindFirstAncestor("node_modules")
local include = rbxts_include or (node_modules and node_modules.Parent) or script.Parent

assert(include, "Could not find rbxts_include from " .. script:GetFullName())
assert(include:FindFirstChild("Promise"), "Could not find Promise from " .. include:GetFullName())

return require(include.Promise)
]]></string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="317">
            <Properties>
              <string name="Name">React</string>
              <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/56e9feead0f91075ba0a4f725c9e4e343bca1c67/packages/react/src/index.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
 *]]

-- deviation: simulates `index.js` and exports React's public interface
local Packages = script.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)
type Object = LuauPolyfill.Object

local React = require(script.React)
-- deviation START: bindings support
export type Binding<T> = React.ReactBinding<T>
export type BindingUpdater<T> = React.ReactBindingUpdater<T>
-- deviation END

local ReactLazy = require(script.ReactLazy)
export type LazyComponent<T, P> = ReactLazy.LazyComponent<T, P>

local SharedModule = require(Packages.Shared)
export type StatelessFunctionalComponent<P> = SharedModule.React_StatelessFunctionalComponent<P>
-- deviation START: we use the definitely-typed version of this, which appears to work for flowtype in VirtualizedList, etc
export type ComponentType<P> = ComponentClass<P> | FC<P>
-- deviation END
export type AbstractComponent<Config, Instance> = SharedModule.React_AbstractComponent<Config, Instance>
export type ElementType = SharedModule.React_ElementType
export type Element<C> = SharedModule.React_Element<C>
export type Key = SharedModule.React_Key
export type Ref<ElementType> = SharedModule.React_Ref<ElementType>
export type Node = SharedModule.React_Node
export type Context<T> = SharedModule.ReactContext<T>
-- TODO: Portal
export type ElementProps<C> = SharedModule.React_ElementProps<C>
export type ElementConfig<T> = SharedModule.React_ElementConfig<T>
export type ElementRef<C> = SharedModule.React_ElementRef<C>
-- TODO: Config
-- TODO: ChildrenArray

-- deviation START: manual type exports since that's not free with 'return React'
export type ComponentClass<P> = SharedModule.React_ComponentType<P>
export type PureComponent<Props, State = nil> = React.PureComponent<Props, State>
-- deviation END

-- deviation START: definitelytyped typescript exports
export type ReactElement<Props = Object, ElementType = any> = SharedModule.ReactElement<Props, ElementType>
-- we don't include ReactText in ReactChild since roblox renderer doesn't support raw text nodes
export type ReactChild = SharedModule.ReactElement<any, string> | string | number
export type FC<P> = SharedModule.React_StatelessFunctionalComponent<P>
export type ReactNode = SharedModule.React_Node
-- deviation END

-- deviation START: export React types that are flowtype built-ins and used by VirtualizedList, etc
export type React_AbstractComponent<Props, Instance> = SharedModule.React_Component<Props, Instance>
export type React_Component<Props, State> = SharedModule.React_Component<Props, State>
export type React_ComponentType<P> = SharedModule.React_ComponentType<P>
export type React_Context<T> = SharedModule.React_Context<T>
export type React_Element<ElementType> = SharedModule.React_Element<ElementType>
export type React_ElementType = SharedModule.React_ElementType
export type React_Node = SharedModule.React_Node

-- deviation END

return React
]]></string>
            </Properties>
            <Item class="ModuleScript" referent="318">
              <Properties>
                <string name="Name">None.roblox</string>
                <string name="Source"><![CDATA[--!strict
-- code derived from https://github.com/Roblox/roact/blob/master/src/None.lua
--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the Apache License, Version 2.0 (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]

local Packages = script.Parent.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)

-- Roact uses `Object.assign` internally to assign new state values; the same
-- None value should give us the proper semantics. We can re-export this value
-- as React.None for easy use, and to mirror Roact.None in legacy Roact.
return LuauPolyfill.Object.None
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="319">
              <Properties>
                <string name="Name">React</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/56e9feead0f91075ba0a4f725c9e4e343bca1c67/packages/react/src/React.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
 *]]

local React = script.Parent
local Packages = React.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)
type Object = LuauPolyfill.Object

local createMutableSource = require(React.ReactMutableSource)
local ReactSharedInternals = require(Packages.Shared).ReactSharedInternals
local ReactBaseClasses = require(React.ReactBaseClasses)
local ReactChildren = require(React.ReactChildren)
local ReactElementValidator = require(React.ReactElementValidator)
local ReactElement = require(React.ReactElement)
local ReactCreateRef = require(React.ReactCreateRef)
local ReactForwardRef = require(React.ReactForwardRef)
local ReactHooks = require(React.ReactHooks)
local ReactMemo = require(React.ReactMemo)
local ReactContext = require(React.ReactContext)
local ReactLazy = require(React.ReactLazy)
type LazyComponent<T, P> = ReactLazy.LazyComponent<T, P>

-- deviation: Bindings
local ReactBinding = require(React["ReactBinding.roblox"])
-- deviation: Re-export `None` marker
local ReactNone = require(React["None.roblox"])

local SharedModule = require(Packages.Shared)
local ReactSymbols = SharedModule.ReactSymbols

local shouldValidate = _G.__DEV__ or _G.__DISABLE_ALL_WARNINGS_EXCEPT_PROP_VALIDATION__
local ReactTypes = require(Packages.Shared)
export type React_StatelessFunctionalComponent<P> = ReactTypes.React_StatelessFunctionalComponent<P>
export type React_ComponentType<P> = ReactTypes.React_ComponentType<P>
type React_AbstractComponent<P, T> = ReactTypes.React_AbstractComponent<P, T>
export type React_ElementProps<ElementType> = ReactTypes.React_ElementProps<ElementType>
export type ReactElement<P = Object, T = any> = ReactTypes.ReactElement<P, T>
export type ReactContext<T> = ReactTypes.ReactContext<T>
export type ReactProviderType<T> = ReactTypes.ReactProviderType<T>
export type React_Node = ReactTypes.React_Node
export type PureComponent<Props, State = nil> = ReactTypes.React_PureComponent<Props, State>
-- deviation START: bindings support
export type ReactBinding<T> = ReactTypes.ReactBinding<T>
export type ReactBindingUpdater<T> = ReactTypes.ReactBindingUpdater<T>
-- deviation END

type createElementFn = <P, T>(
	type_: React_StatelessFunctionalComponent<P>
		| React_ComponentType<P>
		| React_AbstractComponent<P, T>
		| string
		| ReactContext<any>
		| ReactProviderType<any>
		| LazyComponent<T, P>,
	props: P?,
	...(React_Node | (...any) -> React_Node)
) -> ReactElement<P, T>

type cloneElementFn = <P, T>(element: ReactElement<P, T>, config: P?, ...React_Node) -> ReactElement<P, T>
-- FIXME Luau: these yield Cannot call non-function because the identical unions don't collapse
-- FIXME Luau: the next step is to add createElementFn here and work through issues, AFTER normalization and type packs work
local createElement = if shouldValidate
	then ReactElementValidator.createElementWithValidation :: createElementFn
	else ReactElement.createElement :: createElementFn
local cloneElement: cloneElementFn = if shouldValidate
	then ReactElementValidator.cloneElementWithValidation :: cloneElementFn
	else ReactElement.cloneElement :: cloneElementFn

return {
	Children = ReactChildren,
	createMutableSource = createMutableSource,
	createRef = ReactCreateRef.createRef,
	Component = ReactBaseClasses.Component,
	PureComponent = ReactBaseClasses.PureComponent,
	createContext = ReactContext.createContext,
	forwardRef = ReactForwardRef.forwardRef,
	lazy = ReactLazy.lazy,
	memo = ReactMemo.memo,
	useCallback = ReactHooks.useCallback,
	useContext = ReactHooks.useContext,
	useEffect = ReactHooks.useEffect,
	useImperativeHandle = ReactHooks.useImperativeHandle,
	useDebugValue = ReactHooks.useDebugValue,
	useLayoutEffect = ReactHooks.useLayoutEffect,
	useMemo = ReactHooks.useMemo,
	useMutableSource = ReactHooks.useMutableSource,
	useReducer = ReactHooks.useReducer,
	useRef = ReactHooks.useRef,
	-- deviation: bindings support
	useBinding = ReactHooks.useBinding,
	useState = ReactHooks.useState,
	Fragment = ReactSymbols.REACT_FRAGMENT_TYPE,
	Profiler = ReactSymbols.REACT_PROFILER_TYPE,
	StrictMode = ReactSymbols.REACT_STRICT_MODE_TYPE,
	unstable_DebugTracingMode = ReactSymbols.REACT_DEBUG_TRACING_MODE_TYPE,
	Suspense = ReactSymbols.REACT_SUSPENSE_TYPE,
	createElement = createElement,
	cloneElement = cloneElement,
	isValidElement = ReactElement.isValidElement,
	-- TODO: ReactVersion
	__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals,
	-- Deprecated behind disableCreateFactory
	-- TODO: createFactory,
	-- Concurrent Mode
	-- TODO: useTransition,
	-- TODO: startTransition,
	-- TODO: useDeferredValue,
	-- TODO: REACT_SUSPENSE_LIST_TYPE as SuspenseList,
	unstable_LegacyHidden = ReactSymbols.REACT_LEGACY_HIDDEN_TYPE,
	-- enableBlocksAPI
	-- TODO: block,
	-- enableFundamentalAPI
	-- TODO: createFundamental as unstable_createFundamental,
	-- enableScopeAPI
	-- TODO: REACT_SCOPE_TYPE as unstable_Scope,
	-- TODO: useOpaqueIdentifier as unstable_useOpaqueIdentifier,

	-- deviation START: bindings support
	createBinding = ReactBinding.create,
	joinBindings = ReactBinding.join,
	-- deviation END

	-- deviation: export the `None` placeholder for use with setState
	None = ReactNone,

	-- FIXME: These aren't supposed to be exposed, but they're needed by
	-- the renderer in order to update properly
	__subscribeToBinding = ReactBinding.subscribe,

	-- deviation: export Change, Event, and Tag from React
	Event = require(Packages.Shared).Event,
	Change = require(Packages.Shared).Change,
	Tag = require(Packages.Shared).Tag,

	-- deviation: used by error reporters to parse caught errors. React
	-- stringifies at its boundaries to maintain compatibility with
	-- ScriptContext signals that may ultimately catch them
	unstable_parseReactError = require(Packages.Shared).parseReactError,
}
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="320">
              <Properties>
                <string name="Name">ReactBaseClasses</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/0cf22a56a18790ef34c71bef14f64695c0498619/packages/react/src/ReactBaseClasses.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 ]]
local __DEV__ = _G.__DEV__ :: boolean
local __COMPAT_WARNINGS__ = _G.__COMPAT_WARNINGS__ :: boolean
local Packages = script.Parent.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)
local Object = LuauPolyfill.Object
type Object = LuauPolyfill.Object
-- NOTE: use patched console from shared
local console = require(Packages.Shared).console

local SharedModule = require(Packages.Shared)
-- deviation START: we do boolean checks and error() like React 18 does to save functional call in hot path
-- local invariant = SharedModule.invariant
-- deviation END
type React_Component<Props, State = nil> = SharedModule.React_Component<Props, State>
local ReactNoopUpdateQueue = require(script.Parent.ReactNoopUpdateQueue)
local emptyObject = {}

if __DEV__ then
	Object.freeze(emptyObject)
end

-- deviation: Initialize state to a singleton that warns on access and
-- errors on assignment
local UninitializedState = require(Packages.Shared).UninitializedState

--[[*
 * Base class helpers for the updating state of a component.
]]
-- FIXME: Due to metatable inheritance, this field will be accessible and true
-- on class component _instances_ as well as class component definitions; this
-- is probably not correct
local componentClassPrototype = {
	isReactComponent = true,
}

-- deviation: logic to support old Roact lifecycle method names
-- FIXME: remove below table and function once we've formally stopped
-- supporting old Roact lifecycle method names.

-- FIXME Luau: have to annotate this function manually to suppress ReactBaseClasses.lua:55:3-13: (E001) TypeError: Expected to return 2 values, but 1 is returned here
local function trimPath(path: string): string
	-- TODO: The path splits files by . but file names can
	-- have . in them, so we use best guess heuristics to determine
	-- the file name breaks.
	-- Works for our codebase, but is pretty brittle.

	local pascalFile = string.match(path, "%.%u[%.%w]-$")
	if pascalFile then
		return string.gsub(pascalFile, "^%.", "")
	end

	return path
end

local function warnAboutExistingLifecycle(componentName, newName, existingName)
	console.warn(
		"%s already defined '%s', but it also defining the deprecated Roact method '%s'. %s should only implement one of these methods, preferably using the non-deprecated name.",
		componentName,
		existingName,
		newName,
		componentName
	)
end

local function warnAboutDeprecatedLifecycleName(componentName, newName, existingName)
	if __DEV__ and __COMPAT_WARNINGS__ then
		local path, linenum = debug.info(3, "sln")
		console.warn(
			"%s is using method '%s', which is no longer supported and should be updated to '%s'\nFile: %s:%s",
			componentName,
			newName,
			existingName,
			trimPath(path),
			tostring(linenum)
		)
	end
end

local lifecycleNames = {
	didMount = "componentDidMount",
	shouldUpdate = "shouldComponentUpdate",
	willUpdate = "UNSAFE_componentWillUpdate",
	didUpdate = "componentDidUpdate",
	willUnmount = "componentWillUnmount",
}

local function handleNewLifecycle(self, key, value)
	-- if we're defining a new lifecycle method using old naming convention
	if lifecycleNames[key] ~= nil then
		-- if the method we're defining was already defined under a different name
		if self[lifecycleNames[key]] ~= nil then
			warnAboutExistingLifecycle(self.__componentName, key, lifecycleNames[key])
		-- special case for willUpdate which can be defined properly with 2 different names
		elseif key == "willUpdate" and self["componentWillUpdate"] then
			warnAboutExistingLifecycle(self.__componentName, key, "UNSAFE_componentWillUpdate")
		-- otherwise if not previously defined, just warn about deprecated name
		else
			warnAboutDeprecatedLifecycleName(self.__componentName, key, lifecycleNames[key])
		end
		-- update key to proper name
		key = lifecycleNames[key]
	end
	rawset(self, key, value)
end

local componentClassMetatable = {
	__newindex = handleNewLifecycle,
	__index = componentClassPrototype,
	__tostring = function(self)
		return self.__componentName
	end,
}

-- deviation: Extend needs to be a table field for our top-level interface
type React_BaseComponent = React_Component<any, any> & {
	extend: (self: React_BaseComponent, name: string) -> React_Component<any, any>,
}

local Component = (
	setmetatable({ __componentName = "Component" }, componentClassMetatable) :: any
) :: React_BaseComponent

-- deviation: Lua doesn't expose inheritance in a class-syntax way
--[[
  A method called by consumers of Roact to create a new component class.
  Components can not be extended beyond this point, with the exception of
  PureComponent.
]]

-- performance: pool size tuned for benchmarks
local InstancePoolSize = if not _G.__TESTEZ_RUNNING_TEST__ then 900 else 0
local InstancePoolIndex = 1
local InstancePool = table.create(InstancePoolSize)
for i = 1, InstancePoolSize do
	table.insert(InstancePool, {
		-- pre-initialize instance fields with known static values
		props = nil,
		context = nil,
		state = UninitializedState,
		__refs = emptyObject,
		__updater = ReactNoopUpdateQueue,
	})
end

local function setStateInInit(componentInstance: React_Component<any, any>, statePayload: any, callback: nil): ()
	if __DEV__ and (callback :: any) ~= nil then
		console.warn(
			"Received a `callback` argument to `setState` during initialization of "
				.. '"%s". The callback behavior is not supported when using `setState` '
				.. "in `init`.\n\nConsider defining similar behavior in a "
				.. "`compontentDidMount` method instead.",
			componentInstance.__componentName
		)
	end

	-- Use the same warning as in the "real" `setState` below
	local typeStatePayload = statePayload and type(statePayload)
	if statePayload == nil or (typeStatePayload ~= "table" and typeStatePayload ~= "function") then
		error(
			"setState(...): takes an object of state variables to update or a "
				.. "function which returns an object of state variables."
		)
	end
	local prevState = componentInstance.state
	local partialState
	if typeStatePayload == "function" then
		-- Updater function
		partialState = statePayload(prevState, componentInstance.props)
	else
		-- Partial state object
		partialState = statePayload
	end
	-- TODO: can't use table.clone optimization here: invalid argument #1 to 'clone' (table has a protected metatable)
	-- local newState = if prevState then table.clone(prevState) else {}
	componentInstance.state = Object.assign({}, prevState, partialState)
end

function Component:extend(name): React_Component<any, any>
	-- NOTE: legacy Roact will accept nil here and default to empty string
	-- TODO: if name in "" in ReactComponentStack frame, we should try and get the variable name it was assigned to
	if name == nil then
		if __COMPAT_WARNINGS__ then
			console.warn(
				"Component:extend() accepting no arguments is deprecated, and will "
					.. "not be supported in a future version of Roact. Please provide an explicit name."
			)
		end
		name = ""
	elseif type(name) ~= "string" then
		error("Component class name must be a string")
	end

	-- performance? do table literal in one shot instead a field at a time in a pairs() loop
	local class = {
		__componentName = name,
		setState = self.setState,
		forceUpdate = self.forceUpdate,
		init = nil, -- NOTE: required to make Luau analyze happy, should be removed by bytecode compiler
	}
	-- for key, value in self do
	--   -- Roact opts to make consumers use composition over inheritance, which
	--   -- lines up with React.
	--   -- https://reactjs.org/docs/composition-vs-inheritance.html
	--   if key ~= "extend" then
	--     class[key] = value
	--   end
	-- end

	class.__index = class
	-- class.__componentName = name

	function class.__ctor<P>(props: P, context, updater): React_Component<P, any>
		local instance
		-- performance: use a pooled object
		if InstancePoolIndex <= InstancePoolSize then
			instance = InstancePool[InstancePoolIndex]
			-- fill in the dynamic fields
			-- FIXME Luau: TypeError: Type 'P' could not be converted into 'nil'
			instance.props = props :: any
			instance.context = context
			-- release the premade object from the pool -- we aren't recycling objects right now
			InstancePool[InstancePoolIndex] = nil
			InstancePoolIndex += 1
		else
			-- NOTE: uncomment to tune pool size for lua-apps
			-- print("!!!!! hit ReactBaseClass instance pool limit")
			instance = {
				-- FIXME Luau: TypeError: Type 'P' could not be converted into 'nil'
				props = props :: any,
				context = context,
				state = UninitializedState,
				__refs = emptyObject,
				__updater = updater or ReactNoopUpdateQueue,
			}

			-- instance.props = props
			-- instance.context = context
			-- deviation: Initialize state to a singleton that warns on attempts
			-- to access this pseudo-uninitialized state and errors on attempts to directly mutate
			-- state.
			-- instance.state = UninitializedState
			-- If a component has string refs, we will assign a different object later.
			-- deviation: Uses __refs instead of refs to avoid conflicts
			-- instance.refs = emptyObject
			-- instance.__refs = emptyObject
			-- We initialize the default updater but the real one gets injected by the
			-- renderer.
			-- instance.__updater = updater or ReactNoopUpdateQueue
		end

		-- TODO: We should consider using a more idiomatic Lua approach for
		-- warning/blocking lifecycle calls during initialization. For now,
		-- ReactNoopUpdateQueue accomplishes this, but we might be able to be more
		-- thorough if we use a dummy metamethod that warns precisely on all sorts
		-- of misbehavior
		instance = setmetatable(instance, class)

		-- performance: only do typeof if it's non-nil to begin with
		if class.init and type(class.init) == "function" then
			-- deviation: Override setState to allow it to be used in init.
			-- This maintains legacy Roact behavior and allows more consistent
			-- adherance to the "never assign directly to state" rule
			instance.setState = setStateInInit

			class.init(instance, props, context)

			-- deviation: Unbind specialized version of setState used in init
			instance.setState = nil :: any
		end

		return (instance :: any) :: React_Component<P, any>
	end

	setmetatable(class, getmetatable(self :: any))

	return (class :: any) :: React_Component<any, any>
end

--[[*
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `self.state` as immutable.
 *
 * There is no guarantee that `self.state` will be immediately updated, so
 * accessing `self.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from self.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to self.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 ]]
function Component:setState(partialState, callback)
	if partialState ~= nil and type(partialState) ~= "table" and type(partialState) ~= "function" then
		error(
			"setState(...): takes an object of state variables to update or a "
				.. "function which returns an object of state variables."
		)
	end
	self.__updater.enqueueSetState(self, partialState, callback, "setState")
end

--[[*
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 ]]

function Component:forceUpdate(callback)
	self.__updater.enqueueForceUpdate(self, callback, "forceUpdate")
end
--[[*
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 ]]

if __DEV__ then
	-- FIXME Luau: need CLI-53569 to remove the any cast
	local deprecatedAPIs = {
		isMounted = {
			"isMounted",
			"Instead, make sure to clean up subscriptions and pending requests in "
				.. "componentWillUnmount to prevent memory leaks.",
		},
		replaceState = {
			"replaceState",
			"Refactor your code to use setState instead (see " .. "https://github.com/facebook/react/issues/3236).",
		},
	} :: any

	local defineDeprecationWarning = function(methodName, info)
		(Component :: any)[methodName] = function()
			console.warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[1], info[2])
			return nil
		end
	end

	for fnName, _ in deprecatedAPIs do
		if deprecatedAPIs[fnName] ~= nil then
			defineDeprecationWarning(fnName, deprecatedAPIs[fnName])
		end
	end
end

--[[*
 * Convenience component with default shallow equality check for sCU.
 ]]
-- deviation START: work within the `extend` framework defined above to emulate JS's
-- class inheritance

-- FIXME Luau: this is so we get *some* type checking despite the FIXME Luau above
local PureComponent = Component:extend("PureComponent") :: React_BaseComponent;

-- When extend()ing a component, you don't get an extend method.
-- This is to promote composition over inheritance.
-- PureComponent is an exception to this rule.
-- FIXME Luau: this is so we get *some* type checking despite the FIXME Luau above
(PureComponent :: any).extend = Component.extend

-- NOTE: We copy members directly from the Component prototype above; we
-- don't need to redefine the constructor or do dummy function trickery to apply
-- it without jumping around
-- performance? inline (duplicate) explicit assignments to avoid loop overhead in hot path
-- Object.assign(pureComponentClassPrototype, componentClassPrototype)
local pureComponentClassPrototype = {
	isReactComponent = true,
	isPureReactComponent = true,
}

-- NOTE: FIXME: we should clean this up and align the implementations of
-- Component and PureComponent more clearly and explicitly
setmetatable(PureComponent, {
	__newindex = handleNewLifecycle,
	__index = pureComponentClassPrototype,
	__tostring = function(self)
		return self.__componentName
	end,
})
-- deviation END

return {
	Component = Component,
	PureComponent = PureComponent :: typeof(Component),
}
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="321">
              <Properties>
                <string name="Name">ReactBinding.roblox</string>
                <string name="Source"><![CDATA[--!strict
--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]

local Packages = script.Parent.Parent

local LuauPolyfill = require(Packages.LuauPolyfill)
local ReactSymbols = require(Packages.Shared).ReactSymbols

local ReactTypes = require(Packages.Shared)
type Binding<T> = ReactTypes.ReactBinding<T>
type BindingUpdater<T> = ReactTypes.ReactBindingUpdater<T>

local Symbol = LuauPolyfill.Symbol
local createSignal = require(script.Parent["createSignal.roblox"])

local BindingImpl = Symbol("BindingImpl")

type BindingInternal<T> = {
	["$$typeof"]: typeof(ReactSymbols.REACT_BINDING_TYPE),
	value: T,

	getValue: (BindingInternal<T>) -> T,
	-- FIXME Luau: can't define recursive types with different parameters
	map: <U>(BindingInternal<T>, (T) -> U) -> any,

	update: (T) -> (),
	subscribe: ((T) -> ()) -> (() -> ()),
}

local BindingInternalApi = {}

local bindingPrototype = {}

function bindingPrototype.getValue<T>(binding: BindingInternal<T>): T
	return BindingInternalApi.getValue(binding)
end

function bindingPrototype.map<T, U>(binding: BindingInternal<T>, predicate: (T) -> U): Binding<U>
	return BindingInternalApi.map(binding, predicate)
end

local BindingPublicMeta = {
	__index = bindingPrototype,
	__tostring = function(self)
		return string.format("RoactBinding(%s)", tostring(self:getValue()))
	end,
}

function BindingInternalApi.update<T>(binding: any, newValue: T)
	return (binding[BindingImpl] :: BindingInternal<T>).update(newValue)
end

function BindingInternalApi.subscribe<T>(binding: any, callback: (T) -> ())
	return (binding[BindingImpl] :: BindingInternal<T>).subscribe(callback)
end

function BindingInternalApi.getValue<T>(binding: any): T
	return (binding[BindingImpl] :: BindingInternal<T>):getValue()
end

function BindingInternalApi.create<T>(initialValue: T): (Binding<T>, BindingUpdater<T>)
	local subscribe, fire = createSignal()
	local impl = {
		value = initialValue,
		subscribe = subscribe,
	}

	function impl.update(newValue: T)
		impl.value = newValue
		fire(newValue)
	end

	function impl.getValue()
		return impl.value
	end

	local source
	if _G.__DEV__ then
		-- TODO: LUAFDN-619 - improve debug stacktraces for bindings
		source = debug.traceback("Binding created at:", 3)
	end

	return (setmetatable({
		["$$typeof"] = ReactSymbols.REACT_BINDING_TYPE,
		[BindingImpl] = impl,
		_source = source,
	}, BindingPublicMeta) :: any) :: Binding<T>,
		impl.update
end

function BindingInternalApi.map<T, U>(upstreamBinding: BindingInternal<T>, predicate: (T) -> U): Binding<U>
	if _G.__DEV__ then
		-- TODO: More informative error messages here
		assert(
			typeof(upstreamBinding) == "table" and upstreamBinding["$$typeof"] == ReactSymbols.REACT_BINDING_TYPE,
			"Expected `self` to be a binding"
		)
		assert(typeof(predicate) == "function", "Expected arg #1 to be a function")
	end

	local impl = {}

	function impl.subscribe(callback)
		return BindingInternalApi.subscribe(upstreamBinding, function(newValue)
			callback(predicate(newValue))
		end)
	end

	function impl.update(newValue)
		error("Bindings created by Binding:map(fn) cannot be updated directly", 2)
	end

	function impl.getValue()
		return predicate(upstreamBinding:getValue())
	end

	local source
	if _G.__DEV__ then
		-- TODO: LUAFDN-619 - improve debug stacktraces for bindings
		source = debug.traceback("Mapped binding created at:", 3)
	end

	return (
		setmetatable({
			["$$typeof"] = ReactSymbols.REACT_BINDING_TYPE,
			[BindingImpl] = impl,
			_source = source,
		}, BindingPublicMeta) :: any
	) :: Binding<U>
end

-- The `join` API is used statically, so the input will be a table with values
-- typed as the public Binding type
function BindingInternalApi.join<T>(upstreamBindings: { [string | number]: Binding<any> }): Binding<T>
	if _G.__DEV__ then
		assert(typeof(upstreamBindings) == "table", "Expected arg #1 to be of type table")

		for key, value in upstreamBindings do
			if typeof(value) ~= "table" or (value :: any)["$$typeof"] ~= ReactSymbols.REACT_BINDING_TYPE then
				local message = ("Expected arg #1 to contain only bindings, but key %q had a non-binding value"):format(
					tostring(key)
				)
				error(message, 2)
			end
		end
	end

	local impl = {}

	local function getValue()
		local value = {}

		-- FIXME Luau: needs CLI-56711 resolved to eliminate ipairs()
		for key, upstream in pairs(upstreamBindings) do
			value[key] = upstream:getValue()
		end

		return value
	end

	function impl.subscribe(callback)
		-- FIXME: type refinements
		local disconnects: any = {}

		for key, upstream in upstreamBindings do
			disconnects[key] = BindingInternalApi.subscribe(upstream, function(newValue)
				callback(getValue())
			end)
		end

		return function()
			if disconnects == nil then
				return
			end

			for _, disconnect in disconnects do
				disconnect()
			end

			disconnects = nil
		end
	end

	function impl.update(newValue)
		error("Bindings created by joinBindings(...) cannot be updated directly", 2)
	end

	function impl.getValue()
		return getValue()
	end

	local source
	if _G.__DEV__ then
		-- TODO: LUAFDN-619 - improve debug stacktraces for bindings
		source = debug.traceback("Joined binding created at:", 2)
	end

	return (
		setmetatable({
			["$$typeof"] = ReactSymbols.REACT_BINDING_TYPE,
			[BindingImpl] = impl,
			_source = source,
		}, BindingPublicMeta) :: any
	) :: Binding<T>
end

return BindingInternalApi
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="322">
              <Properties>
                <string name="Name">ReactChildren</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/7516bdfce3f0f8c675494b5c5d0e7ae441bef1d9/packages/react/src/ReactChildren.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]

local Packages = script.Parent.Parent
local ReactTypes = require(Packages.Shared)
type ReactNodeList = ReactTypes.ReactNodeList
type React_Node = ReactTypes.React_Node
type ReactElement<P, T> = ReactTypes.ReactElement<P, T>

local invariant = require(Packages.Shared).invariant

local ReactSymbols = require(Packages.Shared).ReactSymbols
local getIteratorFn = ReactSymbols.getIteratorFn
local REACT_ELEMENT_TYPE = ReactSymbols.REACT_ELEMENT_TYPE
local REACT_PORTAL_TYPE = ReactSymbols.REACT_PORTAL_TYPE

local LuauPolyfill = require(Packages.LuauPolyfill)
local Array = LuauPolyfill.Array
-- local console = LuauPolyfill.console
type Array<T> = LuauPolyfill.Array<T>
type Object = LuauPolyfill.Object

local ReactElement = require(script.Parent.ReactElement)
local isValidElement = ReactElement.isValidElement
local cloneAndReplaceKey = ReactElement.cloneAndReplaceKey

local SEPARATOR = "."
local SUBSEPARATOR = ":"

-- --[[*
--  * Escape and wrap key so it is safe to use as a reactid
--  *
--  * @param {string} key to be escaped.
--  * @return {string} the escaped key.
--  ]]
-- deviation: use gsub instead of RegEx
local function escape(key: string): string
	local escapedString = string.gsub(key, "=", "=0")
	escapedString = string.gsub(escapedString, ":", "=2")
	return "$" .. escapedString
end

-- --[[*
--  * TODO: Test that a single child and an array with one item have the same key
--  * pattern.
--  ]]

-- deviation: There is currently no good way to warn about maps
-- local didWarnAboutMaps = false

-- local userProvidedKeyEscapeRegex = '/\\/+/g'
local function escapeUserProvidedKey(text: string): string
	-- deviation: just return the original string
	-- return text.replace(userProvidedKeyEscapeRegex, '$&/')
	return text
end

-- --[[*
--  * Generate a key string that identifies a element within a set.
--  *
--  * @param {*} element A element that could contain a manual key.
--  * @param {number} index Index that is used if a manual key is not provided.
--  * @return {string}
--  ]]
local function getElementKey(element: any, index: number): string
	-- Do some typechecking here since we call this blindly. We want to ensure
	-- that we don't block potential future ES APIs.
	if typeof(element) == "table" and element ~= nil and element.key ~= nil then
		-- Explicit key
		return escape(tostring(element.key))
	end
	-- Implicit key determined by the index in the set
	-- deviation: unsupported radix arg in tostring(number)
	-- return index.toString(36)
	return tostring(index)
end

local function mapIntoArray(
	children: ReactNodeList?,
	array: Array<React_Node>,
	escapedPrefix: string,
	nameSoFar: string,
	callback: (React_Node?) -> ReactNodeList?
): number
	local type = typeof(children)

	--[[
		ROBLOX DEVIATION: userdata type corresponds to React.None, which is perceived as nil. All
		userdata is treated as nil when passed as a child.
	]]
	if type == "nil" or type == "boolean" or type == "userdata" then
		-- All of the above are perceived as nil.
		children = nil
	end

	local invokeCallback = false

	if children == nil then
		invokeCallback = true
	else
		if type == "string" or type == "number" then
			invokeCallback = true
		elseif type == "table" then
			local childrenType = (children :: any)["$$typeof"]
			if childrenType == REACT_ELEMENT_TYPE or childrenType == REACT_PORTAL_TYPE then
				invokeCallback = true
			end
		end
	end

	if invokeCallback then
		local child = children
		local mappedChild = callback(child)
		-- If it's the only child, treat the name as if it was wrapped in an array
		-- so that it's consistent if the number of children grows:
		local childKey = if nameSoFar == "" then SEPARATOR .. getElementKey(child, 1) else nameSoFar
		if Array.isArray(mappedChild) then
			local escapedChildKey = ""
			if childKey ~= nil then
				escapedChildKey = escapeUserProvidedKey(childKey) .. "/"
			end
			mapIntoArray(mappedChild, array, escapedChildKey, "", function(c)
				return c
			end)
		elseif mappedChild ~= nil then
			if isValidElement(mappedChild :: any) then
				local mappedChildKey = (mappedChild :: ReactElement<Object, any>).key
				mappedChild = cloneAndReplaceKey(
					mappedChild :: ReactElement<Object, any>,
					-- Keep both the (mapped) and old keys if they differ, just as
					-- traverseAllChildren used to do for objects as children
					escapedPrefix
						-- $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
						.. (
							if mappedChildKey
									and (not child or (child :: ReactElement<Object, any>).key ~= mappedChildKey)
								-- $FlowFixMe Flow incorrectly thinks existing element's key can be a number
								then escapeUserProvidedKey(tostring(mappedChildKey)) .. "/"
								else ""
						)
						.. childKey
				)
			end
			table.insert(array, mappedChild)
		end
		return 1
	end

	local child
	local nextName
	local subtreeCount = 0 -- Count of children found in the current subtree.
	local nextNamePrefix = if nameSoFar == "" then SEPARATOR else nameSoFar .. SUBSEPARATOR

	if Array.isArray(children) then
		-- FIXME: Luau doesn't recognize this as non-nil without the `or {}`
		for i = 1, #(children :: Array<React_Node>) do
			child = (children :: Array<React_Node>)[i]
			nextName = nextNamePrefix .. getElementKey(child, i)
			subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback)
		end
	else
		local iteratorFn = getIteratorFn(children)
		if typeof(iteratorFn) == "function" then
			local iterableChildren: Object & {
				entries: any,
			} = children :: any

			-- deviation: No equivalent for checking if iterableChildren is a Map
			-- if _G.__DEV__ then
			-- 	-- Warn about using Maps as children
			-- 	if iteratorFn == iterableChildren.entries then
			-- 		if not didWarnAboutMaps then
			-- 			console.warn(
			-- 				"Using Maps as children is not supported. "
			-- 					.. "Use an array of keyed ReactElements instead."
			-- 			)
			-- 		end
			-- 		didWarnAboutMaps = true
			-- 	end
			-- end

			local iterator = iteratorFn(iterableChildren)
			local step
			local ii = 1
			step = iterator.next()
			while not step.done do
				child = step.value
				nextName = nextNamePrefix .. getElementKey(child, ii)
				ii += 1
				subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback)
				step = iterator.next()
			end
			--[[ DEVIATION: this condition will never be met with Roact iterator logic.
				getIteratorFn will always return a function when "children" is a table
			]]
			-- elseif type == 'table' then
			--   local childrenString = '' .. tostring(children)
			--   invariant(
			--     false,
			--     'Objects are not valid as a React child (found: %s). ' ..
			--       'If you meant to render a collection of children, use an array ' ..
			--       'instead.',
			--        if childrenString == '[object Object]'
			--          then 'object with keys {' .. Object.keys(children :: any).join(', ') .. '}'
			--          else childrenString
			--   )
		end
	end

	return subtreeCount
end

type MapFunc = (child: React_Node?, index: number) -> ReactNodeList?

--[[
	* Maps children that are typically specified as `props.children`.
	*
	* See https://reactjs.org/docs/react-api.html#reactchildrenmap
	*
	* The provided mapFunction(child, index) will be called for each
	* leaf child.
	*
	* @param {?*} children Children tree container.
	* @param {function(*, int)} func The map function.
	* @param {*} context Context for mapFunction.
	* @return {object} Object containing the ordered map of results.
]]
local function mapChildren(children: ReactNodeList?, func: MapFunc, context: any): Array<React_Node>?
	if children == nil then
		return nil
	end
	local result = {}
	local count = 1
	mapIntoArray(children, result, "", "", function(child)
		-- deviation: don't use context argument
		local mapFuncResult = func(child, count)
		count += 1
		return mapFuncResult
	end)
	return result
end

-- --[[*
--  * Count the number of children that are typically specified as
--  * `props.children`.
--  *
--  * See https://reactjs.org/docs/react-api.html#reactchildrencount
--  *
--  * @param {?*} children Children tree container.
--  * @return {number} The number of children.
--  ]]
local function countChildren(children: ReactNodeList?): number
	local n = 0
	mapChildren(children, function()
		n += 1
		-- Don't return anything
		return
	end)
	return n
end

type ForEachFunc = (child: React_Node?, index: number) -> ()

-- --[[*
--  * Iterates through children that are typically specified as `props.children`.
--  *
--  * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
--  *
--  * The provided forEachFunc(child, index) will be called for each
--  * leaf child.
--  *
--  * @param {?*} children Children tree container.
--  * @param {function(*, int)} forEachFunc
--  * @param {*} forEachContext Context for forEachContext.
--  ]]
local function forEachChildren(children: ReactNodeList?, forEachFunc: ForEachFunc, forEachContext: any)
	mapChildren(children, function(...)
		-- deviation: Don't use javascript apply
		forEachFunc(...)
		-- Don't return anything.
		return
	end, forEachContext)
end

-- --[[*
--  * Flatten a children object (typically specified as `props.children`) and
--  * return an array with appropriately re-keyed children.
--  *
--  * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
--  ]]
local function toArray(children: ReactNodeList?): Array<React_Node>
	return mapChildren(children, function(child)
		return child
	end) or {}
end

--[[*
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
]]
-- deviation START: we skip generics here, because we can't explicitly constrain them. no annotation works as passthrough.
local function onlyChild(children)
	-- deviation END
	invariant(isValidElement(children), "React.Children.only expected to receive a single React element child.")
	return children
end

return {
	forEach = forEachChildren,
	map = mapChildren,
	count = countChildren,
	only = onlyChild,
	toArray = toArray,
}
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="323">
              <Properties>
                <string name="Name">ReactContext</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/7516bdfce3f0f8c675494b5c5d0e7ae441bef1d9/packages/react/src/ReactContext.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
]]
local Packages = script.Parent.Parent
-- NOTE: use patched console from shared
local Shared = require(Packages.Shared)
local console = Shared.console

local ReactSymbols = require(Packages.Shared).ReactSymbols
local REACT_PROVIDER_TYPE = ReactSymbols.REACT_PROVIDER_TYPE
local REACT_CONTEXT_TYPE = ReactSymbols.REACT_CONTEXT_TYPE
type ReactContext<T> = Shared.ReactContext<T>
type ReactProviderType<T> = Shared.ReactProviderType<T>

local exports = {}

exports.createContext = function<T>(defaultValue: T, calculateChangedBits: ((a: T, b: T) -> number)?): ReactContext<T>
	local context: ReactContext<any> = {
		["$$typeof"] = REACT_CONTEXT_TYPE,
		_calculateChangedBits = calculateChangedBits,
		-- As a workaround to support multiple concurrent renderers, we categorize
		-- some renderers as primary and others as secondary. We only expect
		-- there to be two concurrent renderers at most: React Native (primary) and
		-- Fabric (secondary); React DOM (primary) and React ART (secondary).
		-- Secondary renderers store their context values on separate fields.
		_currentValue = defaultValue,
		_currentValue2 = defaultValue,
		-- Used to track how many concurrent renderers this context currently
		-- supports within in a single renderer. Such as parallel server rendering.
		_threadCount = 0,
		-- These are circular
		Provider = (nil :: any) :: ReactProviderType<T>,
		Consumer = (nil :: any) :: ReactContext<T>,
		-- deviation: tables declared this way are considered sealed, so define we
		-- displayName as nil for it to be populated later
		displayName = nil,
		-- deviation: have to inline these optional fields to make Luau happy
		_currentRenderer = nil,
		_currentRenderer2 = nil,
	}
	context.Provider = {
		["$$typeof"] = REACT_PROVIDER_TYPE,
		_context = context,
	}

	local hasWarnedAboutDisplayNameOnConsumer = false

	if _G.__DEV__ then
		-- A separate object, but proxies back to the original context object for
		-- backwards compatibility. It has a different $$typeof, so we can properly
		-- warn for the incorrect usage of Context as a Consumer.
		local Consumer = {
			["$$typeof"] = REACT_CONTEXT_TYPE,
			_context = context,
			_calculateChangedBits = context._calculateChangedBits,
		}

		setmetatable(Consumer, {
			__index = function(self, key)
				-- deviation: don't implement already-deprecated things like Consumer.Provider, Consumer.Consumer, etc
				if key == "_currentValue" then
					return context._currentValue
				elseif key == "_currentValue2" then
					return context._currentValue2
				elseif key == "_threadCount" then
					return context._threadCount
				elseif key == "displayName" then
					return context.displayName
				end
				return nil
			end,
			__newindex = function(self, key, value)
				if key == "_currentValue" then
					context._currentValue = value
				elseif key == "_currentValue2" then
					context._currentValue2 = value
				elseif key == "_threadCount" then
					context._threadCount = value
				elseif key == "displayName" then
					if not hasWarnedAboutDisplayNameOnConsumer then
						console.warn(
							"Setting `displayName` on Context.Consumer has no effect. "
								.. "You should set it directly on the context with Context.displayName = "
								.. value
								.. "."
						)
						hasWarnedAboutDisplayNameOnConsumer = true
					end
				end
			end,
		})

		context.Consumer = (Consumer :: any) :: ReactContext<any>
	else
		context.Consumer = context
	end

	if _G.__DEV__ then
		context._currentRenderer = nil
		context._currentRenderer2 = nil
	end

	return context
end

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="324">
              <Properties>
                <string name="Name">ReactCreateRef</string>
                <string name="Source"><![CDATA[-- upstream: https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/react/src/ReactCreateRef.js
--!strict
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 * @flow
*]]

local Packages = script.Parent.Parent
local ReactTypes = require(Packages.Shared)
type RefObject = ReactTypes.RefObject

-- deviation: In Roact, refs are implemented in terms of bindings
--[[
  A ref is nothing more than a binding with a special field 'current'
  that maps to the getValue method of the binding
]]
local Binding = require(script.Parent["ReactBinding.roblox"])

local exports = {}

-- an immutable object with a single mutable value
exports.createRef = function(): RefObject
	local binding, _ = Binding.create(nil)

	local ref = {}

	-- deviation: Since refs are used as bindings, they can often be
	-- assigned to fields of other Instances; we track creation here parallel to
	-- how we do with bindings created via `createBinding` to improve messaging
	-- when something goes wrong
	if _G.__DEV__ then
		-- TODO: LUAFDN-619 - improve debug stacktraces for refs
		binding._source = debug.traceback("Ref created at:", 1)
	end

	--[[
    A ref is just redirected to a binding via its metatable
  ]]
	setmetatable(ref, {
		__index = function(self, key)
			if key == "current" then
				return binding:getValue()
			else
				return (binding :: any)[key]
			end
		end,
		__newindex = function(self, key, value)
			if key == "current" then
				-- FIXME: Bindings - This is not allowed in Roact, but is okay in
				-- React. Lots of discussion at
				-- https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065
				-- error("Cannot assign to the 'current' property of refs", 2)
				Binding.update(binding, value)
			end

			(binding :: any)[key] = value
		end,
		__tostring = function(self)
			return string.format("Ref(%s)", tostring(binding:getValue()))
		end,
	})

	return (ref :: any) :: RefObject
end

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="325">
              <Properties>
                <string name="Name">ReactElement</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/702fad4b1b48ac8f626ed3f35e8f86f5ea728084/packages/react/src/ReactElement.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
]]
local __DEV__ = _G.__DEV__ :: boolean
local Packages = script.Parent.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)
local Error = LuauPolyfill.Error
type Object = LuauPolyfill.Object

-- NOTE: use patched console from shared
local console = require(Packages.Shared).console
local ReactTypes = require(Packages.Shared)
type React_StatelessFunctionalComponent<P> = ReactTypes.React_StatelessFunctionalComponent<P>
type React_ComponentType<P> = ReactTypes.React_ComponentType<P>
type React_AbstractComponent<P, T> = ReactTypes.React_AbstractComponent<P, T>
type ReactProviderType<T> = ReactTypes.ReactProviderType<T>
type React_ElementProps<ElementType> = ReactTypes.React_ElementProps<ElementType>
type React_Node = ReactTypes.React_Node
type ReactElement<P = Object, T = any> = ReactTypes.ReactElement<P, T>
type ReactContext<T> = ReactTypes.ReactContext<T>
type Source = ReactTypes.Source

local ReactLazy = require(script.Parent.ReactLazy)
type LazyComponent<T, P> = ReactLazy.LazyComponent<T, P>

local getComponentName = require(Packages.Shared).getComponentName
-- deviation START: we eliminate invariant like in React 18 to avoid string formatting and function call overhead
-- local invariant = require(Packages.Shared).invariant
-- deviation END
local REACT_ELEMENT_TYPE = require(Packages.Shared).ReactSymbols.REACT_ELEMENT_TYPE
local ReactCurrentOwner = require(Packages.Shared).ReactSharedInternals.ReactCurrentOwner
--local hasOwnProperty = Object.prototype.hasOwnProperty
-- deviation START: upstream iterates over this table, but we manually unroll those loops for hot path performance
-- IF THIS TABLE UPDATES, YOU MUST UPDATE THE UNROLLED LOOPS AS WELL
local RESERVED_PROPS = {
	key = true,
	ref = true,
	__self = true,
	__source = true,
}
-- deviation END

local specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs

if __DEV__ then
	didWarnAboutStringRefs = {}
end

local exports = {}

local function hasValidRef(config)
	if __DEV__ then
		-- deviation: instead of getters, use `__index` metamethod to
		-- detect if it's a warning object
		if config.ref ~= nil and type(config.ref) == "table" then
			if (config.ref :: any).isReactWarning then
				return false
			end
		end
	end

	return config.ref ~= nil
end

local function hasValidKey(config)
	if __DEV__ then
		-- deviation: instead of getters, use `__index` metamethod to
		-- detect if it's a warning object
		if config.key ~= nil and type(config.key) == "table" then
			if (config.key :: any).isReactWarning then
				return false
			end
		end
	end

	return config.key ~= nil
end

local reactWarning = { isReactWarning = true }

-- FIXME: These two warning 'getter' definitions both override the
-- metatable, and won't both work at the same time. The easy solution is to
-- define one metatable that does both instead of overwriting
local function defineKeyPropWarningGetter(props, displayName: string)
	local warnAboutAccessingKey = function()
		if __DEV__ then
			if not specialPropKeyWarningShown then
				specialPropKeyWarningShown = true
				console.error(
					"%s: `key` is not a prop. Trying to access it will result "
						.. "in `nil` being returned. If you need to access the same "
						.. "value within the child component, you should pass it as a different "
						.. "prop. (https://reactjs.org/link/special-props)",
					displayName
				)
			end
		end
	end

	-- deviation: clear key to ensure metamethod is called,
	-- then set key getter to call warnAboutAccessingKey
	props.key = nil
	setmetatable(props, {
		__index = function(t, k)
			if k == "key" then
				warnAboutAccessingKey()
				-- deviation: returns sentinel object that mimics upstream ability to check isReactWarning field
				return reactWarning
			end
			-- FIXME Luau: needs deferred constraint resolution
			return nil :: any
		end,
	})
end

local function defineRefPropWarningGetter(props, displayName: string)
	-- deviation: Use a __call metamethod here to make this function-like, but
	-- still able to have the `isReactWarning` flag defined on it
	local warnAboutAccessingRef = function()
		if __DEV__ then
			if not specialPropRefWarningShown then
				specialPropRefWarningShown = true
				console.error(
					"%s: `ref` is not a prop. Trying to access it will result "
						.. "in `nil` being returned. If you need to access the same "
						.. "value within the child component, you should pass it as a different "
						.. "prop. (https://reactjs.org/link/special-props)",
					displayName
				)
			end
		end
	end

	-- deviation: clear key to ensure metamethod is called,
	-- then set key getter to call warnAboutAccessingKey
	props.ref = nil
	setmetatable(props :: any, {
		__index = function(t, k)
			if k == "ref" then
				warnAboutAccessingRef()
				-- deviation: returns sentinel object that mimics upstream ability to check isReactWarning field
				return reactWarning
			end
			-- FIXME Luau: needs deferred constraint resolution
			return nil :: any
		end,
	})
end

local function warnIfStringRefCannotBeAutoConverted(config)
	if __DEV__ then
		if
			-- deviation: We removed support for string refs, so all stringrefs cannot be auto-converted regardless
			type(config.ref) == "string" and ReactCurrentOwner.current
			-- and config.__self
			-- and ReactCurrentOwner.current.stateNode ~= config.__self
		then
			local componentName = getComponentName(ReactCurrentOwner.current.type)

			-- deviation: we don't support string refs and hard error instead of warn
			if not didWarnAboutStringRefs[componentName] then
				error(
					string.format(
						'Component "%s" contains the string ref "%s". '
							.. "Support for string refs has been removed. "
							.. "We recommend using useRef() or createRef() instead. "
							.. "Learn more about using refs safely here: "
							.. "https://reactjs.org/link/strict-mode-string-ref",
						componentName or "Unknown",
						config.ref
					)
				)
				-- didWarnAboutStringRefs[componentName] = true
			end
		end
	end
end

--[[*
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param *} type
 * @param *} props
 * @param *} key
 * @param string|object} ref
 * @param *} owner
 * @param *} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param *} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 ]]

-- deviation BEGIN: extra annotations here inspired by TS and flowtype to facilitate prop checking at analyze-time
local function ReactElement<P, T>(type_: T, key, ref, self, source: Source?, owner, props: P): ReactElement<P, T>
	-- deviation END
	local element = {
		-- Built-in properties that belong on the element
		type = type_,
		key = key,
		ref = ref,
		props = props,
		-- Record the component responsible for creating this element.
		_owner = owner,
	}

	-- This tag allows us to uniquely identify this as a React Element
	element["$$typeof"] = REACT_ELEMENT_TYPE

	if __DEV__ then
		-- The validation flag is currently mutative. We put it on
		-- an external backing store so that we can freeze the whole object.
		-- This can be replaced with a WeakMap once they are implemented in
		-- commonly used development environments.
		local nonEnumerable = {
			validated = false,
		}
		element._store = setmetatable({}, {
			-- To make comparing ReactElements easier for testing purposes, we
			-- make the validation flag non-enumerable (where possible, which
			-- should include every environment we run tests in), so the test
			-- framework ignores it.
			__index = nonEnumerable,
			__newindex = function(table, key, value)
				if key == "validated" then
					nonEnumerable.validated = value
				else
					rawset(table, key, value)
				end
			end,
		})
		-- self and source are DEV only properties.
		setmetatable(element, {
			__index = {
				_self = self,
				-- Two elements created in two different places should be considered
				-- equal for testing purposes and therefore we hide it from enumeration.
				_source = source,
			},
		})
	end

	-- FIXME Luau: this cast is needed until normalization lands
	return element :: any
end

----[[*
-- * https://github.com/reactjs/rfcs/pull/107
-- * @param *} type
-- * @param object} props
-- * @param string} key
-- ]]
--
--
exports.jsx = function(type, config, maybeKey)
	-- deviation START: skipping JSX for now, as it may never apply to Roblox
	error("JSX is currently unsupported")
	--  local propName; -- Reserved names are extracted
	--
	--  local props = }
	--  local key = nil
	--  local ref = nil; -- Currently, key can be spread in as a prop. This causes a potential
	--  -- issue if key is also explicitly declared (ie. <div ...props} key="Hi" />
	--  -- or <div key="Hi" ...props} /> ). We want to deprecate key spread,
	--  -- but as an intermediary step, we will use jsxDEV for everything except
	--  -- <div ...props} key="Hi" />, because we aren't currently able to tell if
	--  -- key is explicitly declared to be nil or not.
	--
	--  if maybeKey ~= nil)
	--    key = '' .. maybeKey
	--  end
	--
	--  if hasValidKey(config))
	--    key = '' .. config.key
	--  end
	--
	--  if hasValidRef(config))
	--    ref = config.ref
	--  } -- Remaining properties are added to a new props object
	--
	--
	--  for (propName in config)
	--    if hasOwnProperty.call(config, propName) and !RESERVED_PROPS.hasOwnProperty(propName))
	--      props[propName] = config[propName]
	--    end
	--  } -- Resolve default props
	--
	--
	--  if type and type.defaultProps)
	--    local defaultProps = type.defaultProps
	--
	--    for (propName in defaultProps)
	--      if props[propName] == nil)
	--        props[propName] = defaultProps[propName]
	--      end
	--    end
	-- end
	--
	--  return ReactElement(type, key, ref, nil, nil, ReactCurrentOwner.current, props)
	-- deviation END
end

--[[*
-- * https://github.com/reactjs/rfcs/pull/107
-- * @param *} type
-- * @param object} props
-- * @param string} key
-- ]]
--
exports.jsxDEV = function(type, config, maybeKey, source, self)
	-- deviation START: we may never support JSX
	error("JSX is currently unsupported")
	--  local propName; -- Reserved names are extracted
	--
	--  local props = }
	--  local key = nil
	--  local ref = nil; -- Currently, key can be spread in as a prop. This causes a potential
	--  -- issue if key is also explicitly declared (ie. <div ...props} key="Hi" />
	--  -- or <div key="Hi" ...props} /> ). We want to deprecate key spread,
	--  -- but as an intermediary step, we will use jsxDEV for everything except
	--  -- <div ...props} key="Hi" />, because we aren't currently able to tell if
	--  -- key is explicitly declared to be nil or not.
	--
	--  if maybeKey ~= nil)
	--    key = '' .. maybeKey
	--  end
	--
	--  if hasValidKey(config))
	--    key = '' .. config.key
	--  end
	--
	--  if hasValidRef(config))
	--    ref = config.ref
	--    warnIfStringRefCannotBeAutoConverted(config)
	--  } -- Remaining properties are added to a new props object
	--
	--
	--  for (propName in config)
	--    if hasOwnProperty.call(config, propName) and !RESERVED_PROPS.hasOwnProperty(propName))
	--      props[propName] = config[propName]
	--    end
	--  } -- Resolve default props
	--
	--
	--  if type and type.defaultProps)
	--    local defaultProps = type.defaultProps
	--
	--    for (propName in defaultProps)
	--      if props[propName] == nil)
	--        props[propName] = defaultProps[propName]
	--      end
	--    end
	--  end
	--
	--  if key or ref)
	--    local displayName = function ()
	--      if typeof type == 'function')
	--        return type.displayName or type.name or 'Unknown'
	--      end
	--
	--      return type
	--    }()
	--
	--    if key)
	--      defineKeyPropWarningGetter(props, displayName)
	--    end
	--
	--    if ref)
	--      defineRefPropWarningGetter(props, displayName)
	--    end
	--
	--  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props)
	return nil
	-- deviation END
end

--[[*
 * Create and return a new ReactElement of the given type.
 * See https://reactjs.org/docs/react-api.html#createelement
 ]]
-- deviation: this is TypeScript-derived annotation, but using flowtypes
--  function createElement<P extends {}>(
-- 	type: FunctionComponent<P> | ComponentClass<P> | string,
-- 	props?: Attributes & P | null,
-- 	...children: ReactNode[]): ReactElement<P>;
local function createElement<P, T>(
	type_: React_StatelessFunctionalComponent<P> | React_ComponentType<P> | React_AbstractComponent<P, T> | ReactContext<any> | LazyComponent<T, P> | ReactProviderType<any> | string,
	config: P?,
	...: React_Node | (...any) -> React_Node
): ReactElement<P, T>
	-- deviation START: extreme hot path, so manually unroll RESERVED_PROPS loop and use table.clone
	local props = if config ~= nil then table.clone(config :: any) :: any else {}
	-- deviation END
	local key: (string | number)? = nil
	local ref = nil
	local self = nil
	local source: Source? = nil

	if config ~= nil then
		-- deviation START: inline hasValidRef and hasValidKey success in hot path, still call in error case for warning
		-- FIXME Luau: needs normalization: Type 'P & React_ElementProps<T>' could not be converted into 'React_ElementProps<T>'; none of the intersection parts are compatible
		if hasValidRef(config :: any) then
			ref = ((config :: any) :: React_ElementProps<T>).ref

			if __DEV__ then
				warnIfStringRefCannotBeAutoConverted((config :: any) :: React_ElementProps<T>)
			end
		end

		-- FIXME Luau: when configKey is inline: Type 'P & React_ElementProps<T>' could not be converted into 'React_ElementProps<T>'; none of the intersection parts are compatible
		if hasValidKey(config :: any) then
			local configKey = (config :: any).key
			-- deviation: call tostring instead of concatenating with an
			-- empty string, which can throw in luau. If the string is a number,
			-- then do not use tostring
			if type(configKey) == "number" then
				key = configKey
			else
				-- FIXME Luau: narrowing bug: Type 'string' could not be converted into 'number'
				key = tostring(configKey :: any)
			end
		end
		-- deviation END

		-- deviation START: seemingly only used for string ref warnings, which we don't support
		-- self = if config.__self == nil then nil else config.__self
		-- deviation END

		source = if ((config :: any) :: React_ElementProps<T>).__source == nil
			then nil
			else ((config :: any) :: React_ElementProps<T>).__source

		-- Remaining properties are added to a new props object
		-- deviation START: extreme hot path, so manually unroll RESERVED_PROPS loop and use table.clone
		if props.key ~= nil then
			props.key = nil
		end
		if props.ref ~= nil then
			props.ref = nil
		end
		if props.__self ~= nil then
			props.__self = nil
		end
		if props.__source ~= nil then
			props.__source = nil
		end
		-- deviation END
	end

	-- Children can be more than one argument, and those are transferred onto
	-- the newly allocated props object.
	-- deviation START: we have a shortcut for capturing varargs into an array in Lua, which is more performant
	local childrenLength = select("#", ...)

	if childrenLength == 1 then
		props.children = select(1, ...)
	elseif childrenLength > 1 then
		-- TODO: there's a snapshot difference in storeOwners where key is 2 instead of 1 if we do `{...}`. does it matter?
		-- local childArray = {...}
		local childArray = table.create(childrenLength)
		for i = 1, childrenLength do
			local toInsert = select(i, ...)
			table.insert(childArray, toInsert)
		end

		-- deviation END

		if __DEV__ then
			table.freeze(childArray)
		end

		props.children = childArray
	end

	-- Resolve default props
	-- deviation START: Lua can't index defaultProps on a function
	-- FIXME Luau: should know this can be a table due to type_ intersection with React_ComponentType<>. needs normalization?
	if type(type_ :: any) == "table" and (type_ :: T & React_ComponentType<P>).defaultProps then
		-- deviation END
		-- FIXME Luau: defaultProps isn't narrowed by the guard above
		local defaultProps = (type_ :: T & React_ComponentType<P>).defaultProps :: P

		-- TODO Luau: defaultProps isn't known to be a table, since Luau doesn't allow us to do `<P extends {}>` yet
		for propName, _ in (defaultProps :: any) :: Object do
			if props[propName] == nil then
				props[propName] = ((defaultProps :: any) :: Object)[propName]
			end
		end
	end

	if __DEV__ then
		if key or ref then
			-- deviation START: Lua can't store fields like displayName on functions
			local displayName

			if type(type_) == "function" then
				-- displayName = (type_.displayName or type_.name) or "Unknown"
				displayName = debug.info(type_, "n") or "<function>"
			elseif type(type_) == "table" then
				displayName = (
					(type_ :: T & React_ComponentType<P>).displayName or (type_ :: T & React_ComponentType<P>).name
				) or "Unknown"
			else
				-- FIXME Luau: Luau should have narrowed type_ to string based on this above branches
				displayName = type_ :: string
			end
			-- deviation END

			if key then
				defineKeyPropWarningGetter(props, displayName)
			end

			if ref then
				defineRefPropWarningGetter(props, displayName)
			end
		end

		-- deviation START: In upstream, JSX transformation is what
		-- produces the `__source` field, so we'll just simulate it here for now
		if source == nil then
			-- go up one more because of ReactElementValidator indirection
			source = {
				fileName = debug.info(3, "s"),
				lineNumber = debug.info(3, "l"),
			}
		end
		-- deviation END
	end

	-- FIXME Luau: this cast is needed until normalization lands
	return ReactElement(type_, key, ref, self, source, ReactCurrentOwner.current, props) :: any
end
exports.createElement = createElement

----[[*
-- * Return a function that produces ReactElements of a given type.
-- * See https://reactjs.org/docs/react-api.html#createfactory
-- ]]
--
--export function createFactory(type)
--  local factory = createElement.bind(null, type); -- Expose the type on the factory and the prototype so that it can be
--  -- easily accessed on elements. E.g. `<Foo />.type == Foo`.
--  -- This should not be named `constructor` since this may not be the function
--  -- that created the element, and it may not even be a constructor.
--  -- Legacy hook: remove it
--
--  factory.type = type
--  return factory
--end
exports.cloneAndReplaceKey = function<P, T>(oldElement: ReactElement<P, T>, newKey: any): ReactElement<P, T>
	local newElement = ReactElement(
		oldElement.type,
		newKey,
		oldElement.ref,
		oldElement._self,
		oldElement._source,
		oldElement._owner,
		oldElement.props
	)
	return newElement
end

--[[*
* Clone and return a new ReactElement using element as the starting point.
* See https://reactjs.org/docs/react-api.html#cloneelement
]]

exports.cloneElement = function<P, T>(
	element: ReactElement<P, T>,
	config: (P & React_ElementProps<T>)?,
	...: React_Node
): ReactElement<P, T>
	-- deviation START: use if instead of variant to avoid error message formatting even when there's no problem
	if element == nil then
		error(
			Error.new(
				"React.cloneElement(...): The argument must be a React element, but you passed " .. tostring(element)
			)
		)
	end

	-- Original props are copied
	local elementProps = element.props
	local props: P & React_ElementProps<T> = if elementProps ~= nil
		then table.clone(elementProps :: P & React_ElementProps<T>) :: any
		else {} :: P & React_ElementProps<T>

	-- Reserved names are extracted
	local key = element.key
	local ref = element.ref

	-- Self is preserved since the owner is preserved.
	-- deviation: _self field only used for string ref checking
	-- local self = element._self

	-- Source is preserved since cloneElement is unlikely to be targeted by a
	-- transpiler, and the original source is probably a better indicator of the
	-- true owner.
	local source = element._source

	-- Owner will be preserved, unless ref is overridden
	local owner = element._owner

	if config ~= nil then
		-- deviation START: inline hasValidRef and hasValidKey success in hot path, still call in error case for warning
		local configRef = config.ref
		if configRef ~= nil then
			-- Silently steal the ref from the parent.
			ref = configRef
			owner = ReactCurrentOwner.current
		else
			hasValidRef(config)
		end

		local configKey = config.key
		-- FIXME Luau: needs normalization, generic subtype escaping scope
		if configKey ~= nil then
			if type(configKey) == "number" then
				key = configKey
			else
				-- FIXME Luau: narrowing bug: Type 'string' could not be converted into 'number'
				key = configKey :: any or "nil"
			end
		else
			hasValidKey((config :: any) :: React_ElementProps<T>)
		end
		-- deviation END
	end

	-- Remaining properties override existing props
	local elementType = element.type
	local defaultProps: P? = if type(elementType) == "table" then elementType.defaultProps else nil

	-- deviation: cannot call pairs on nil the way you can use `for...in`
	-- on nil in JS, so we check for nil before iterating
	if config ~= nil then
		for propName, _ in config :: any do
			if (config :: any)[propName] ~= nil and not RESERVED_PROPS[propName] then
				if (config :: any)[propName] == nil and defaultProps ~= nil then
					-- Resolve default props
					-- FIXME Luau: force-cast required to avoid TypeError: Expected type table, got 'P' instead
					(props :: any)[propName] = (defaultProps :: any)[propName]
				else
					(props :: any)[propName] = (config :: any)[propName]
				end
			end
		end
	end

	-- Children can be more than one argument, and those are transferred onto
	-- the newly allocated props object.
	-- deviation START: we have a shortcut for capturing varargs into an array in Lua, which is more performant
	local childrenLength = select("#", ...)

	if childrenLength == 1 then
		props.children = select(1, ...)
	elseif childrenLength > 1 then
		(props :: any).children = { ... }
	end
	-- deviation END

	-- FIXME Luau: this cast is needed until normalization lands
	return ReactElement(element.type, key, ref, nil, source, owner, (props :: any) :: P & React_ElementProps<T>) :: any
end
--[[*
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param ?object} object
 * @return boolean} True if `object` is a ReactElement.
 * @final
 ]]

exports.isValidElement = function(object)
	return type(object) == "table" and object["$$typeof"] == REACT_ELEMENT_TYPE
end

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="326">
              <Properties>
                <string name="Name">ReactElementValidator</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/bc6b7b6b16f771bfc8048fe15e211ac777253b64/packages/react/src/ReactElementValidator.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 * @flow
*]]

local Packages = script.Parent.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)
local Array = LuauPolyfill.Array
type Array<T> = LuauPolyfill.Array<T>
local Boolean = LuauPolyfill.Boolean
local Object = LuauPolyfill.Object
type Object = LuauPolyfill.Object
local console = require(Packages.Shared).console
local inspect = LuauPolyfill.util.inspect
type Function = (...any) -> ...any

-- deviation START: import extra types
local ReactTypes = require(Packages.Shared)
type React_StatelessFunctionalComponent<P> = ReactTypes.React_StatelessFunctionalComponent<P>
type React_ComponentType<P> = ReactTypes.React_ComponentType<P>
type React_Element<ElementType> = ReactTypes.React_Element<ElementType>
type React_ElementProps<ElementType> = ReactTypes.React_ElementProps<ElementType>
type ReactElement<P, T> = ReactTypes.ReactElement<P, T>
type React_Node = ReactTypes.React_Node
type Source = ReactTypes.Source
-- deviation END

local isValidElementType = require(Packages.Shared).isValidElementType
local getComponentName = require(Packages.Shared).getComponentName
local ReactSymbols = require(Packages.Shared).ReactSymbols
local getIteratorFn = ReactSymbols.getIteratorFn
local _REACT_FORWARD_REF_TYPE = ReactSymbols.REACT_FORWARD_REF_TYPE
local _REACT_MEMO_TYPE = ReactSymbols.REACT_MEMO_TYPE
local REACT_FRAGMENT_TYPE = ReactSymbols.REACT_FRAGMENT_TYPE
local REACT_ELEMENT_TYPE = ReactSymbols.REACT_ELEMENT_TYPE

local warnAboutSpreadingKeyToJSX = require(Packages.Shared).ReactFeatureFlags.warnAboutSpreadingKeyToJSX
local checkPropTypes = require(Packages.Shared).checkPropTypes
local ReactCurrentOwner = require(Packages.Shared).ReactSharedInternals.ReactCurrentOwner

local ReactElement = require(script.Parent.ReactElement)
local isValidElement = ReactElement.isValidElement
local createElement = ReactElement.createElement
local cloneElement = ReactElement.cloneElement
local jsxDEV = ReactElement.jsxDEV

local setExtraStackFrame = require(Packages.Shared).ReactSharedInternals.ReactDebugCurrentFrame.setExtraStackFrame
local describeUnknownElementTypeFrameInDEV =
	require(Packages.Shared).ReactComponentStackFrame.describeUnknownElementTypeFrameInDEV

local exports = {}

-- FIXME Luau: annotation shouldn't be necessary
local function setCurrentlyValidatingElement(element: ReactElement<any, any> | nil)
	if _G.__DEV__ then
		if element then
			local owner = element._owner
			local ownerArgument = nil
			if owner then
				ownerArgument = owner.type
			end
			local stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, ownerArgument);
			-- FIXME Luau: needs normalization: Cannot call non-function (() -> ()) | ((string?) -> (...any))
			(setExtraStackFrame :: (...any) -> ())(stack)
		else
			-- FIXME Luau: needs normalization: Cannot call non-function (() -> ()) | ((string?) -> (...any))
			(setExtraStackFrame :: (...any) -> ())(nil)
		end
	end
end

local propTypesMisspellWarningShown

if _G.__DEV__ then
	propTypesMisspellWarningShown = false
end

local function hasOwnProperty(object, key)
	return object[key] ~= nil
end

local function getDeclarationErrorAddendum(): string
	if ReactCurrentOwner.current then
		local name = getComponentName(ReactCurrentOwner.current.type)
		if name then
			return "\n\nCheck the render method of `" .. name .. "`."
		end
	end
	return ""
end

-- FIXME Luau: annotation shouldn't be necessary
local function getSourceInfoErrorAddendum(source: Source | nil): string
	if source ~= nil then
		local fileName = string.gsub(source.fileName, "^.*[\\/]", "")
		local lineNumber = source.lineNumber
		return "\n\nCheck your code at " .. fileName .. ":" .. lineNumber .. "."
	end
	return ""
end

-- FIXME Luau: needs explicit annotation, even though call site and nil check should be enough
local function getSourceInfoErrorAddendumForProps(elementProps: React_ElementProps<any>?): string
	if elementProps ~= nil then
		return getSourceInfoErrorAddendum(elementProps.__source)
	end
	return ""
end

-- /**
--  * Warn if there's no key explicitly set on dynamic arrays of children or
--  * object keys are not valid. This allows us to keep track of children between
--  * updates.
--  */
local ownerHasKeyUseWarning = {}

-- FIXME Luau: shouldn't need this annotation on parentType
local function getCurrentComponentErrorInfo(parentType: React_ComponentType<any> | string | Function): string
	local info = getDeclarationErrorAddendum()

	if not Boolean.toJSBoolean(info) then
		local parentName = if typeof(parentType) == "string"
			then parentType
			else if typeof(parentType) == "table" then parentType.displayName or parentType.name else nil

		-- deviation: Lua doesn't store fields on functions, so try and get the name via reflection
		if not parentName and typeof(parentType) == "function" then
			local functionName = debug.info(parentType, "n")
			-- NOTE: unlike other places, upstream doesn't default the component name string in this message
			parentName = if functionName ~= "" then functionName else nil
		end

		if parentName then
			info = string.format("\n\nCheck the top-level render call using <%s>.", parentName)
		end
	end
	return info
end

-- /**
--  * Warn if the element doesn't have an explicit key assigned to it.
--  * This element is in an array. The array could grow and shrink or be
--  * reordered. All children that haven't already been validated are required to
--  * have a "key" property assigned to it. Error statuses are cached so a warning
--  * will only be shown once.
--  *
--  * @internal
--  * @param {ReactElement} element Element that requires a key.
--  * @param {*} parentType element's parent's type.
--  * @param {*} tableKey ROBLOX deviation: key provided by the children table
--  */
-- deviation START: add explicit optional table key parameter, move key check to after we mark it validated, since we may not have an explicit key (and will use tableKey to validate)
local function validateExplicitKey<P>(element: ReactElement<P, any>, parentType, tableKey: any?)
	if element._store == nil or element._store.validated then
		return
	end
	-- FIXME Luau: doesn't narrow based on branch above
	(element._store :: any).validated = true
	-- NOTE: Consider this element valid if only _one_ key is
	-- present, otherwise proceed and check for error states
	if (element.key ~= nil) ~= (tableKey ~= nil) then
		return
	end
	-- deviation END
	local currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType)
	if ownerHasKeyUseWarning[currentComponentErrorInfo] then
		return
	end
	ownerHasKeyUseWarning[currentComponentErrorInfo] = true

	-- // Usually the current owner is the offender, but if it accepts children as a
	-- // property, it may be the creator of the child that's responsible for
	-- // assigning it a key.
	local childOwner = ""
	if element and element._owner and element._owner ~= ReactCurrentOwner.current then
		-- // Give the component that originally created this child.
		childOwner = string.format(" It was passed a child from %s.", tostring(getComponentName(element._owner.type)))
	end

	if _G.__DEV__ then
		setCurrentlyValidatingElement(element)
		-- deviation START: Account for conflict between "key" prop and deviated table key behavior (in addition to missing key warnings)
		-- Both forms of key were provided
		if element.key ~= nil and tableKey ~= nil then
			-- TODO: Link to special Roact documentation that accounts
			-- for deviation instead of react docs
			console.error(
				'Child element received a "key" prop ("%s") in addition to a key in '
					.. 'the "children" table of its parent ("%s"). Please provide only '
					.. 'one key definition. When both are present, the "key" prop '
					.. "will take precedence."
					.. "%s%s See https://reactjs.org/link/warning-keys for more information.",
				tostring(element.key),
				tostring(tableKey),
				currentComponentErrorInfo,
				childOwner
			)
		-- No key was provided at all
		else
			console.error(
				'Each child in a list should have a unique "key" prop.'
					.. "%s%s See https://reactjs.org/link/warning-keys for more information.",
				currentComponentErrorInfo,
				childOwner
			)
		end
		-- deviation END
		setCurrentlyValidatingElement(nil)
	end
end

-- /**
--  * Ensure that every element either is passed in a static location, in an
--  * array with an explicit keys property defined, or in an object literal
--  * with valid key property.
--  *
--  * @internal
--  * @param {ReactNode} node Statically passed child of any type.
--  * @param {*} parentType node's parent's type.
--  */
local function validateChildKeys(node, parentType)
	if typeof(node) ~= "table" then
		return
	end

	if Array.isArray(node) then
		for i = 1, #node do
			local child = node[i]
			if isValidElement(child) then
				validateExplicitKey(child :: ReactElement<any, any>, parentType)
			end
		end
	elseif isValidElement(node) then
		-- // This element was passed in a valid location.
		if node._store then
			node._store.validated = true
		end
	elseif node then
		local iteratorFn = getIteratorFn(node)
		if typeof(iteratorFn) == "function" then
			-- // Entry iterators used to provide implicit keys,
			-- // but now we print a separate warning for them later.
			if iteratorFn ~= node.entries then
				local iterator = iteratorFn(node)
				local step = iterator.next()
				while not step.done do
					if isValidElement(step.value) then
						validateExplicitKey(step.value, parentType, step.key)
					end

					step = iterator.next()
				end
			end
		end
	end
end

-- /**
--  * Given an element, validate that its props follow the propTypes definition,
--  * provided by the type.
--  *
--  * @param {ReactElement} element
--  */
local function validatePropTypes<P>(element: ReactElement<P, any>)
	if _G.__DEV__ or _G.__DISABLE_ALL_WARNINGS_EXCEPT_PROP_VALIDATION__ then
		local type = element.type
		if type == nil or typeof(type) == "string" then
			return
		end

		local propTypes
		local validateProps
		if typeof(type) == "function" then
			-- deviation: function components can't have propTypes in Lua
			-- propTypes = type.propTypes
			return
		elseif typeof(type) == "table" then
			propTypes = type.propTypes
			validateProps = type.validateProps
		else
			return
		end

		if propTypes or validateProps then
			-- Intentionally inside to avoid triggering lazy initializers:
			local name = getComponentName(type)
			-- deviation: adds support for legacy Roact's validateProps()
			checkPropTypes(propTypes, validateProps, element.props, "prop", name, element)
			-- TODO: upstream this any, PropTypes is a bogus key check on purpose
		elseif (type :: any).PropTypes ~= nil and not propTypesMisspellWarningShown then
			propTypesMisspellWarningShown = true
			-- Intentionally inside to avoid triggering lazy initializers:
			local name = getComponentName(type)
			console.error(
				"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?",
				name or "Unknown"
			)
		end
		-- TODO: upstream this any, PropTypes is a bogus key check on purpose
		-- deviation: we simplify this check since we never supported this in the first place
		if (type :: any).getDefaultProps ~= nil then
			console.error(
				"getDefaultProps is only used on classic React.createClass "
					.. "definitions. Use a static property named `defaultProps` instead."
			)
		end
	end
end

-- /**
--  * Given a fragment, validate that it can only be provided with fragment props
--  * @param {ReactElement} fragment
--  */
local function validateFragmentProps<P>(fragment: ReactElement<P & Object, any>)
	if _G.__DEV__ then
		local keys = Object.keys(fragment.props)
		for i = 1, #keys do
			local key = keys[i]
			if key ~= "children" and key ~= "key" then
				setCurrentlyValidatingElement(fragment)
				console.error(
					"Invalid prop `%s` supplied to `React.Fragment`. "
						.. "React.Fragment can only have `key` and `children` props.",
					key
				)
				setCurrentlyValidatingElement(nil)
				break
			end
		end

		if fragment.ref ~= nil then
			setCurrentlyValidatingElement(fragment)
			console.error("Invalid attribute `ref` supplied to `React.Fragment`.")
			setCurrentlyValidatingElement(nil)
		end
	end
end

-- deviation START: add strong types based on definitely-typed approach on createElement
local function jsxWithValidation<P, T>(
	type: T,
	props: P & React_ElementProps<T>,
	key: string | number,
	isStaticChildren,
	source: Source?,
	self: any?
)
	-- deviation END
	local validType = isValidElementType(type)

	-- // We warn in this case but don't throw. We expect the element creation to
	-- // succeed and there will likely be errors in render.
	if not validType then
		local info = ""
		if type == nil or (typeof(type) == "table" and #Object.keys(type) == 0) then
			info ..= (" You likely forgot to export your component from the file " .. "it's defined in, or you might have mixed up default and named imports.")
		end

		local sourceInfo = getSourceInfoErrorAddendum(source)
		if sourceInfo then
			info ..= sourceInfo
		else
			info ..= getDeclarationErrorAddendum()
		end

		local typeString
		if type == nil then
			typeString = "nil"
		elseif Array.isArray(type) then
			typeString = "array"
		elseif typeof(type) == "table" and type["$$typeof"] == REACT_ELEMENT_TYPE then
			typeString = string.format("<%s />", getComponentName(type.type) or "Unknown")
			info ..= " Did you accidentally export a JSX literal or Element instead of a component?"
		else
			typeString = typeof(type)
			info ..= "\n" .. inspect(type)
		end

		if _G.__DEV__ then
			console.error(
				"React.jsx: type is invalid -- expected a string (for "
					.. "built-in components) or a class/function (for composite "
					.. "components) but got: %s.%s",
				typeString,
				info
			)
		end
	end

	local element = jsxDEV(type, props, key, source, self)

	-- // The result can be nullish if a mock or a custom function is used.
	-- // TODO: Drop this when these are no longer allowed as the type argument.
	if element == nil then
		return element
	end

	-- // Skip key warning if the type isn't valid since our key validation logic
	-- // doesn't expect a non-string/function type and can throw confusing errors.
	-- // We don't want exception behavior to differ between dev and prod.
	-- // (Rendering will throw with a helpful message and as soon as the type is
	-- // fixed, the key warnings will appear.)

	if validType then
		local children = props.children
		if children ~= nil then
			if isStaticChildren then
				if Array.isArray(children) then
					for i = 1, #children do
						-- FIXME Luau: needs normalization
						validateChildKeys(children[i], type :: any)
					end

					-- deviation: Object.freeze always exist
					-- if Object.freeze then
					Object.freeze(children)
					-- end
				else
					if _G.__DEV__ then
						console.error(
							"React.jsx: Static children should always be an array. "
								.. "You are likely explicitly calling React.jsxs or React.jsxDEV. "
								.. "Use the Babel transform instead."
						)
					end
				end
			else
				-- FIXME Luau: needs normalization
				validateChildKeys(children, type :: any)
			end
		end
	end

	if _G.__DEV__ then
		if warnAboutSpreadingKeyToJSX then
			if hasOwnProperty(props, "key") then
				console.error(
					"React.jsx: Spreading a key to JSX is a deprecated pattern. "
						.. "Explicitly pass a key after spreading props in your JSX call. "
						.. "E.g. <%s {...props} key={key} />",
					getComponentName(type) or "ComponentName"
				)
			end
		end
	end

	if type == REACT_FRAGMENT_TYPE then
		-- FIXME Luau: luau doesn't understand narrowing of above branch
		validateFragmentProps((element :: any) :: ReactElement<any, any>)
	else
		validatePropTypes((element :: any) :: ReactElement<any, any>)
	end

	return element
end
exports.jsxWithValidation = jsxWithValidation

-- // These two functions exist to still get child warnings in dev
-- // even with the prod transform. This means that jsxDEV is purely
-- // opt-in behavior for better messages but that we won't stop
-- // giving you warnings if you use production apis.
exports.jsxWithValidationStatic = function(type, props, key)
	return jsxWithValidation(type, props, key, true)
end

exports.jsxWithValidationDynamic = function(type, props, key)
	return jsxWithValidation(type, props, key, false)
end

-- deviation START: add strong types based on definitely-typed approach on createElement
local function createElementWithValidation<P, T>(
	type_: React_StatelessFunctionalComponent<P> | React_ComponentType<P> | string,
	props: (P & React_ElementProps<T>)?,
	...: React_Node
): ReactElement<P, T>
	-- deviation END
	local validType = isValidElementType(type_)

	-- // We warn in this case but don't throw. We expect the element creation to
	-- // succeed and there will likely be errors in render.
	if not validType then
		local info = ""
		if type_ == nil or (typeof(type_) == "table" and #Object.keys(type_) == 0) then
			info ..= (" You likely forgot to export your component from the file " .. "it's defined in, or you might have mixed up default and named imports.")
		end

		local sourceInfo = getSourceInfoErrorAddendumForProps(props)
		if sourceInfo then
			info ..= sourceInfo
		else
			info ..= getDeclarationErrorAddendum()
		end

		local typeString
		if type_ == nil then
			typeString = "nil"
		elseif Array.isArray(type_) then
			typeString = "array"
		elseif type_ ~= nil and typeof(type_) == "table" and type_["$$typeof"] == REACT_ELEMENT_TYPE then
			typeString = string.format("<%s />", getComponentName((type_ :: any).type) or "Unknown")
			info ..= " Did you accidentally export a JSX literal or Element instead of a component?"
		else
			typeString = typeof(type_)
			if type_ ~= nil then
				-- deviation: print the table/string in readable form to give a clue, if no other info was gathered
				info ..= "\n" .. inspect(type_)
			end
		end

		if _G.__DEV__ then
			console.error(
				"React.createElement: type is invalid -- expected a string (for "
					.. "built-in components) or a class/function (for composite "
					.. "components) but got: %s.%s",
				typeString,
				info
			)
		end
	end

	-- FIXME Luau: hard cast to any, needs normalization to avoid 'React_ComponentType<P>' could not be converted into 'React_ComponentType<P>'
	local element = createElement(type_ :: any, props, ...)

	-- // The result can be nullish if a mock or a custom function is used.
	-- // TODO: Drop this when these are no longer allowed as the type argument.
	if element == nil then
		return element
	end

	-- // Skip key warning if the type isn't valid since our key validation logic
	-- // doesn't expect a non-string/function type and can throw confusing errors.
	-- // We don't want exception behavior to differ between dev and prod.
	-- // (Rendering will throw with a helpful message and as soon as the type is
	-- // fixed, the key warnings will appear.)
	if validType then
		-- deviation: skips (1) type and (2) props - starts from 3 to the end varargs (iterate through children)
		for i = 1, select("#", ...) do
			-- deviation: selects the ith child from this function's arguments to validate
			-- FIXME Luau: hard cast to any, needs normalization to avoid 'React_ComponentType<P>' could not be converted into 'React_ComponentType<P>'
			validateChildKeys(select(i, ...), type_ :: any)
		end
	end

	if type_ == REACT_FRAGMENT_TYPE then
		validateFragmentProps(element)
	else
		validatePropTypes(element)
	end

	return element
end
exports.createElementWithValidation = createElementWithValidation

-- devitation: createFactory is deprecated and will be removed
-- local didWarnAboutDeprecatedCreateFactory = false

-- exports.createFactoryWithValidation = function(type)
-- 	local validatedFactory = function(...)
-- 		createElementWithValidation(type, ...)
-- 	end
-- 	-- deviation: Lua can't assign fields to functions. The 'type'
-- 	-- property is deprecated so there is no need to port this over.
-- 	-- validatedFactory.type = type

-- 	if _G.__DEV__ then
-- 		if not didWarnAboutDeprecatedCreateFactory then
-- 			didWarnAboutDeprecatedCreateFactory = true
-- 			console.warn(
-- 				"React.createFactory() is deprecated and will be removed in " ..
-- 					"a future major release. Consider using JSX " ..
-- 					"or use React.createElement() directly instead."
-- 			)
-- 		end
-- 		-- // Legacy hook: remove it
-- 		-- deviation: no porting this behavior because it is deprecated
-- 		-- Object.defineProperty(validatedFactory, "type", {
-- 		-- 	enumerable = false,
-- 		-- 	get = function()
-- 		-- 		console.warn(
-- 		-- 			"Factory.type is deprecated. Access the class directly " ..
-- 		-- 				"before passing it to createFactory."
-- 		-- 		)
-- 		-- 		Object.defineProperty(this, "type", {
-- 		-- 			value = type,
-- 		-- 		})
-- 		-- 		return type
-- 		-- 	end,
-- 		-- })
-- 	end

-- 	return validatedFactory
-- end

-- deviation START: add strong types based on definitely-typed approach on createElement
exports.cloneElementWithValidation = function<P, T>(
	element: ReactElement<P, T>,
	props: (P & React_ElementProps<T>)?,
	...: React_Node
): ReactElement<P, T>
	-- deviation END
	local arguments = { element, props, ... } :: Array<any>
	local newElement = cloneElement(element, props, ...)
	for i = 3, #arguments do
		validateChildKeys(arguments[i], newElement.type)
	end
	validatePropTypes(newElement)
	return newElement
end

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="327">
              <Properties>
                <string name="Name">ReactForwardRef</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/41694201988c5e651f0c3bc69921d5c9717be88b/packages/react/src/ReactForwardRef.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
*]]

local Packages = script.Parent.Parent
-- NOTE: use patched console from shared
local console = require(Packages.Shared).console

local ReactSymbols = require(Packages.Shared).ReactSymbols
local ReactTypes = require(Packages.Shared)
type React_Node = ReactTypes.React_Node
type React_Ref<ElementType> = ReactTypes.React_Ref<ElementType>
type React_AbstractComponent<Config, Instance> = ReactTypes.React_AbstractComponent<Config, Instance>
local REACT_FORWARD_REF_TYPE = ReactSymbols.REACT_FORWARD_REF_TYPE
local REACT_MEMO_TYPE = ReactSymbols.REACT_MEMO_TYPE

local exports = {}
-- TODO? should return Component's ELementType be REACT_FORWARD_REF_TYPE? probably, right?
exports.forwardRef = function<Props, ElementType>(
	render: (props: Props, ref: React_Ref<ElementType>) -> React_Node
): React_AbstractComponent<Props, ElementType>
	if _G.__DEV__ then
		-- deviation START: Lua functions can't have properties given a table (which we can index to see if it's the Memo type)
		if typeof(render :: any) == "table" and (render :: any)["$$typeof"] == REACT_MEMO_TYPE then
			-- deviation END
			console.error(
				"forwardRef requires a render function but received a `memo` "
					.. "component. Instead of forwardRef(memo(...)), use "
					.. "memo(forwardRef(...))."
			)
		elseif typeof(render) ~= "function" then
			console.error("forwardRef requires a render function but was given %s.", typeof(render))
		else
			local argumentCount, _variadic = debug.info(render, "a")
			if argumentCount ~= 0 and argumentCount ~= 2 then
				console.error(
					"forwardRef render functions accept exactly two parameters: props and ref. %s",
					(function()
						if argumentCount == 1 then
							return "Did you forget to use the ref parameter?"
						end
						return "Any additional parameter will be undefined."
					end)()
				)
			end
		end

		-- deviation: in Luau, functions cannot have fields; for now, we don't
		-- support defaultProps and propTypes on function components anyways, so
		-- this check can safely be a no-op

		-- if render ~= null then
		--   if (render.defaultProps != null || render.propTypes != null) {
		--     console.error(
		--       'forwardRef render functions do not support propTypes or defaultProps. ' +
		--         'Did you accidentally pass a React component?',
		--     );
		--   }
		-- }
	end

	local elementType = {
		["$$typeof"] = REACT_FORWARD_REF_TYPE,
		render = render,
	}
	if _G.__DEV__ then
		local ownName
		-- deviation: use metatables to approximate Object.defineProperty logic
		setmetatable(elementType, {
			__index = function(self, key)
				if key == "displayName" then
					return ownName
				end
				return rawget(self, key)
			end,
			__newindex = function(self, key, value)
				if key == "displayName" then
					ownName = value
					-- deviation: render is a function and cannot have properties
					-- if (render.displayName == null) {
					--   render.displayName = name;
					-- }
				else
					rawset(self, key, value)
				end
			end,
		})
	end
	-- FIXME Luau: making us explicitly add nilable (optional) fields: because the former is missing fields 'forceUpdate', 'getChildContext', 'props', 'setState', and 'state
	return (elementType :: any) :: React_AbstractComponent<Props, ElementType>
end

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="328">
              <Properties>
                <string name="Name">ReactHooks</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/ddd1faa1972b614dfbfae205f2aa4a6c0b39a759/packages/react/src/ReactHooks.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]

local Packages = script.Parent.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)
local Array = LuauPolyfill.Array
type Array<T> = LuauPolyfill.Array<T>
-- NOTE: use patched console from shared
local console = require(Packages.Shared).console

local ReactTypes = require(Packages.Shared)
-- TODO: we only pull in Dispatcher here for the typecheck, remove once Luau narrowing improves
type Dispatcher = ReactTypes.Dispatcher
type MutableSource<T> = ReactTypes.MutableSource<T>
type MutableSourceGetSnapshotFn<Source, Snapshot> = ReactTypes.MutableSourceGetSnapshotFn<Source, Snapshot>
type MutableSourceSubscribeFn<Source, Snapshot> = ReactTypes.MutableSourceSubscribeFn<Source, Snapshot>
type ReactProviderType<T> = ReactTypes.ReactProviderType<T>
type ReactContext<T> = ReactTypes.ReactContext<T>
local ReactFiberHostConfig = require(Packages.Shared)
type OpaqueIDType = ReactFiberHostConfig.OpaqueIDType

-- local invariant = require(Packages.Shared).invariant

local ReactCurrentDispatcher = require(Packages.Shared).ReactSharedInternals.ReactCurrentDispatcher

type BasicStateAction<S> = ((S) -> S) | S
type Dispatch<A> = (A) -> ()

-- FIXME Luau: we shouldn't need to explicitly annotate this
local function resolveDispatcher(): Dispatcher
	local dispatcher = ReactCurrentDispatcher.current
	-- performance: upstream main only does this check in DEV mode and then not as an invariant
	if _G.__DEV__ then
		if dispatcher == nil then
			console.error(
				"Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for"
					.. " one of the following reasons:\n"
					.. "1. You might have mismatching versions of React and the renderer (such as React DOM)\n"
					.. "2. You might be breaking the Rules of Hooks\n"
					.. "3. You might have more than one copy of React in the same app\n"
					.. "See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem."
			)
		end
	end
	-- Will result in a null access error if accessed outside render phase. We
	-- intentionally don't throw our own error because this is in a hot path.
	-- Also helps ensure this is inlined.
	return dispatcher :: Dispatcher
end

local exports = {}

local function useContext<T>(
	Context: ReactContext<T>,
	unstable_observedBits: number | boolean | nil,
	... -- deviation: Lua must specify ... here to capture additional args
): T
	local dispatcher = resolveDispatcher()
	if _G.__DEV__ then
		if unstable_observedBits ~= nil then
			console.error(
				"useContext() second argument is reserved for future "
					.. "use in React. Passing it is not supported. "
					.. "You passed: %s.%s",
				unstable_observedBits,
				(typeof(unstable_observedBits) == "number" and Array.isArray({ ... }))
						and "\n\nDid you call Array.map(useContext)? " .. "Calling Hooks inside a loop is not supported. " .. "Learn more at https://reactjs.org/link/rules-of-hooks"
					or ""
			)
		end

		-- TODO: add a more generic warning for invalid values.
		if (Context :: any)._context ~= nil then
			local realContext = (Context :: any)._context
			-- Don't deduplicate because this legitimately causes bugs
			-- and nobody should be using this in existing code.
			if realContext.Consumer == Context then
				console.error(
					"Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be "
						.. "removed in a future major release. Did you mean to call useContext(Context) instead?"
				)
			elseif realContext.Provider == Context then
				console.error(
					"Calling useContext(Context.Provider) is not supported. "
						.. "Did you mean to call useContext(Context) instead?"
				)
			end
		end
	end
	return dispatcher.useContext(Context, unstable_observedBits)
end
exports.useContext = useContext

local function useState<S>(initialState: (() -> S) | S, ...): (S, Dispatch<BasicStateAction<S>>)
	local dispatcher = resolveDispatcher()
	return dispatcher.useState(initialState, ...)
end
exports.useState = useState

local function useReducer<S, I, A>(reducer: (S, A) -> S, initialArg: I, init: ((I) -> S)?): (S, Dispatch<A>)
	local dispatcher = resolveDispatcher()
	return dispatcher.useReducer(reducer, initialArg, init)
end
exports.useReducer = useReducer

-- deviation: TS models this slightly differently, which is needed to have an initially empty ref and clear the ref, and still typecheck
-- TODO: reconciling this with bindings and sharing any relevant Ref types (there may be different ones depending on whether it's just a loose ref, vs one being assigned to the ref prop
local function useRef<T>(initialValue: T): { current: T | nil }
	-- deviation END
	local dispatcher = resolveDispatcher()
	return dispatcher.useRef(initialValue)
end
exports.useRef = useRef

-- deviation: TS models this slightly differently, which is needed to have an initially empty ref and clear the ref, and still typecheck
local function useBinding<T>(initialValue: T): (ReactTypes.ReactBinding<T>, ReactTypes.ReactBindingUpdater<T>)
	-- deviation END
	local dispatcher = resolveDispatcher()
	return dispatcher.useBinding(initialValue)
end
exports.useBinding = useBinding

local function useEffect(
	-- TODO: Luau needs union type packs for this type to translate idiomatically
	create: (() -> ()) | (() -> (() -> ())),
	deps: Array<any> | nil
): ()
	local dispatcher = resolveDispatcher()
	return dispatcher.useEffect(create, deps)
end
exports.useEffect = useEffect

local function useLayoutEffect(
	-- TODO: Luau needs union type packs for this type to translate idiomatically
	create: (() -> ()) | (() -> (() -> ())),
	deps: Array<any> | nil
): ()
	local dispatcher = resolveDispatcher()
	return dispatcher.useLayoutEffect(create, deps)
end
exports.useLayoutEffect = useLayoutEffect

local function useCallback<T>(callback: T, deps: Array<any> | nil): T
	local dispatcher = resolveDispatcher()
	return dispatcher.useCallback(callback, deps)
end
exports.useCallback = useCallback

local function useMemo<T...>(create: () -> T..., deps: Array<any> | nil): T...
	local dispatcher = resolveDispatcher()
	return dispatcher.useMemo(create, deps)
end
exports.useMemo = useMemo

local function useImperativeHandle<T>(
	ref: { current: T | nil } | ((inst: T | nil) -> any) | nil,
	create: () -> T,
	deps: Array<any> | nil
): ()
	local dispatcher = resolveDispatcher()
	return dispatcher.useImperativeHandle(ref, create, deps)
end
exports.useImperativeHandle = useImperativeHandle

local function useDebugValue<T>(value: T, formatterFn: ((value: T) -> any)?): ()
	if _G.__DEV__ then
		local dispatcher = resolveDispatcher()
		return dispatcher.useDebugValue(value, formatterFn)
	end

	-- deviation: return nil explicitly for safety
	return nil
end
exports.useDebugValue = useDebugValue

exports.emptyObject = {}

-- TODO: enable useTransition later
-- exports.useTransition = function(): ((() -> ()) -> (), boolean)
-- 	local dispatcher = resolveDispatcher()
-- 	return dispatcher.useTransition()
-- end

-- TODO: enable useDeferredValue later
-- exports.useDeferredValue = function<T>(value: T): T
-- 	local dispatcher = resolveDispatcher()
-- 	return dispatcher.useDeferredValue(value)
-- end

exports.useOpaqueIdentifier = function(): OpaqueIDType | nil
	local dispatcher = resolveDispatcher()
	return dispatcher.useOpaqueIdentifier()
end

exports.useMutableSource = function<Source, Snapshot>(
	source: MutableSource<Source>,
	getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,
	subscribe: MutableSourceSubscribeFn<Source, Snapshot>
): Snapshot
	local dispatcher = resolveDispatcher()
	return dispatcher.useMutableSource(source, getSnapshot, subscribe)
end

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="329">
              <Properties>
                <string name="Name">ReactLazy</string>
                <string name="Source"><![CDATA[--!nonstrict
-- upstream: https://github.com/facebook/react/blob/v17.0.2/packages/react/src/ReactLazy.js
--[[
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
 *]]

local Packages = script.Parent.Parent
-- NOTE: use patched console from shared
local Shared = require(Packages.Shared)
local console = Shared.console
local LuauPolyfill = require(Packages.LuauPolyfill)
local inspect = LuauPolyfill.util.inspect

local ReactTypes = require(Packages.Shared)
type Wakeable = ReactTypes.Wakeable
type Thenable<R> = ReactTypes.Thenable<R>
local ReactSymbols = require(Packages.Shared).ReactSymbols

local REACT_LAZY_TYPE = ReactSymbols.REACT_LAZY_TYPE

local Uninitialized = -1
local Pending = 0
local Resolved = 1
local Rejected = 2

type UninitializedPayload<T> = {
	-- deviation: Luau doesn't support literals
	--   _status: -1,
	_status: number,
	_result: () -> Thenable<{ default: T, [string]: any }>,
}

type PendingPayload = {
	-- deviation: Luau doesn't support literals
	-- _status: 0,
	_status: number,
	_result: Wakeable,
}

type ResolvedPayload<T> = {
	-- deviation: Luau doesn't support literals
	-- _status: 1,
	_status: number,
	_result: { default: T, [string]: any },
}

type RejectedPayload = {
	-- deviation: Luau doesn't support literals
	-- _status: 2,
	_status: number,
	_result: any,
}

type Payload<T> = UninitializedPayload<T> | PendingPayload | ResolvedPayload<T> | RejectedPayload

export type LazyComponent<T, P> = {
	["$$typeof"]: number,
	_payload: P,
	_init: (payload: P) -> T,
	--   ...
}

function lazyInitializer<T>(payload: Payload<T>): T
	if payload._status == Uninitialized then
		local ctor = payload._result
		local thenable = ctor()
		-- Transition to the next state.
		local pending: PendingPayload = payload :: any
		pending._status = Pending
		pending._result = thenable
		thenable:andThen(function(moduleObject)
			if payload._status == Pending then
				local defaultExport = moduleObject.default
				if _G.__DEV__ then
					if defaultExport == nil then
						console.error(
							"lazy: Expected the result of a dynamic import() call. "
								.. "Instead received: `%s`\n\nYour code should look like: \n  "
								-- Break up imports to avoid accidentally parsing them as dependencies.
								-- deviation: Lua syntax in message
								.. "local MyComponent = lazy(function() return req"
								.. "quire(script.Parent.MyComponent) end)",
							inspect(moduleObject)
						)
					end
				end
				-- Transition to the next state.
				local resolved: ResolvedPayload<T> = payload :: any
				resolved._status = Resolved
				resolved._result = defaultExport
			end
		end, function(error_)
			if payload._status == Pending then
				-- Transition to the next state.
				local rejected: RejectedPayload = payload :: any
				rejected._status = Rejected
				rejected._result = error_
			end
		end)
	end
	if payload._status == Resolved then
		return payload._result
	else
		error(payload._result)
	end
end

local exports = {}

exports.lazy = function<T>(ctor: () -> Thenable<{ default: T, [string]: any }>): LazyComponent<T, Payload<T>>
	local payload: Payload<T> = {
		-- We use these fields to store the result.
		_status = -1,
		_result = ctor,
	}

	local lazyType: LazyComponent<T, Payload<T>> = {
		["$$typeof"] = REACT_LAZY_TYPE,
		_payload = payload,
		-- FIXME Luau: needs something even beyond normalization to avoid Property '_init' is not compatible. Type '<T>(Payload<T>) -> T?' could not be converted into '(Payload<T>) -> T?'; different number of generic type parameters
		_init = lazyInitializer :: any,
	}

	if _G.__DEV__ then
		-- In production, this would just set it on the object.
		local defaultProps
		local propTypes
		-- $FlowFixMe
		setmetatable(lazyType, {
			__index = function(self, key)
				if key == "defaultProps" then
					return defaultProps
				end
				if key == "propTypes" then
					return propTypes
				end
				return
			end,
			__newindex = function(self, key, value)
				if key == "defaultProps" then
					console.error(
						"React.lazy(...): It is not supported to assign `defaultProps` to "
							.. "a lazy component import. Either specify them where the component "
							.. "is defined, or create a wrapping component around it."
					)
					defaultProps = value
					-- Match production behavior more closely:
					-- $FlowFixMe
					setmetatable(self, {
						__index = function() end,
						__newindex = function() end,
					})
				end
				if key == "propTypes" then
					console.error(
						"React.lazy(...): It is not supported to assign `propTypes` to "
							.. "a lazy component import. Either specify them where the component "
							.. "is defined, or create a wrapping component around it."
					)
					propTypes = value
					-- Match production behavior more closely:
					-- $FlowFixMe
					setmetatable(self, {
						__index = function() end,
						__newindex = function() end,
					})
				end
			end,
		})
	end

	return lazyType
end

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="330">
              <Properties>
                <string name="Name">ReactMemo</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/41694201988c5e651f0c3bc69921d5c9717be88b/packages/react/src/ReactMemo.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 ]]

local Packages = script.Parent.Parent
-- NOTE: use patched console from shared
local Shared = require(Packages.Shared)
local console = Shared.console
local LuauPolyfill = require(Packages.LuauPolyfill)
local Array = LuauPolyfill.Array
local Object = LuauPolyfill.Object
local inspect = LuauPolyfill.util.inspect
type React_StatelessFunctionalComponent<Props> = Shared.React_StatelessFunctionalComponent<Props>
type React_ElementType = Shared.React_ElementType
type React_Component<Props, State> = Shared.React_Component<Props, State>
type React_ComponentType<Props> = Shared.React_ComponentType<Props>
type React_AbstractComponent<Config, Instance> = Shared.React_AbstractComponent<Config, Instance>

local ReactSymbols = Shared.ReactSymbols
local REACT_MEMO_TYPE = ReactSymbols.REACT_MEMO_TYPE
local REACT_ELEMENT_TYPE = ReactSymbols.REACT_ELEMENT_TYPE
local isValidElementType = Shared.isValidElementType
local getComponentName = Shared.getComponentName

local exports = {}

exports.memo = function<Props, T>(
	-- deviation START: expanded type pulled from definitelytyped, not sure why upstream doesn't accept function component types
	-- TODO Luau: React_Component<Props, any> gave me  Type 'React_Component<any, any>' could not be converted into '((any, any) -> (Array<(Array<<CYCLE>> | React_Element<any> | boolean | number | string)?> | React_Element<any> | boolean | number | string)?) | string'; none of the union options are compatible
	type_: React_StatelessFunctionalComponent<Props> | React_AbstractComponent<Props, T> | string,
	-- deviation END
	compare: ((oldProps: Props, newProps: Props) -> boolean)?
): React_AbstractComponent<Props, any>
	if _G.__DEV__ then
		local validType = isValidElementType(type_)

		-- We warn in this case but don't throw. We expect the element creation to
		-- succeed and there will likely be errors in render.
		if not validType then
			local info = ""
			if type_ == nil or (typeof(type_) == "table" and #Object.keys(type_) == 0) then
				info = info
					.. (
						" You likely forgot to export your component from the file "
						.. "it's defined in, or you might have mixed up default and named imports."
					)
			end
			local typeString
			if type_ == nil then
				typeString = "nil"
			elseif Array.isArray(type_) then
				typeString = "array"
			elseif type_ ~= nil and typeof(type_) == "table" and (type_)["$$typeof"] == REACT_ELEMENT_TYPE then
				typeString = string.format("<%s />", getComponentName((type_ :: any).type) or "UNKNOWN")
				info = " Did you accidentally export a JSX literal or Element instead of a component?"
			else
				typeString = typeof(type_)
				if type_ ~= nil then
					-- deviation: print the table/string in readable form to give a clue, if no other info was gathered
					info = "\n" .. inspect(type_)
				end
			end
			console.error("memo: The first argument must be a component. Instead received: `%s`.%s", typeString, info)
		end
	end

	local elementType = {
		["$$typeof"] = REACT_MEMO_TYPE,
		type = type_,
		compare = compare or nil,
	}

	if _G.__DEV__ then
		local name
		-- deviation: use metatables to approximate Object.defineProperty logic
		setmetatable(elementType, {
			__index = function(self, key)
				if key == "displayName" then
					return name
				end
				return rawget(self, key)
			end,
			__newindex = function(self, key, value)
				if key == "displayName" then
					name = value
					-- deviation: render is a function and cannot have properties
					if typeof(type_) == "table" and (type_ :: React_AbstractComponent<Props, T>).displayName == nil then
						(type_ :: React_AbstractComponent<Props, T>).displayName = name
					end
				else
					rawset(self, key, value)
				end
			end,
		})
	end

	return elementType
end

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="331">
              <Properties>
                <string name="Name">ReactMutableSource</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/142d4f1c00c66f3d728177082dbc027fd6335115/packages/react/src/ReactMutableSource.js
-- [[
--  * Copyright (c) Facebook, Inc. and its affiliates.
--  *
--  * This source code is licensed under the MIT license found in the
--  * LICENSE file in the root directory of this source tree.
--  *
--  * @flow
-- ]]

local Packages = script.Parent.Parent
local ReactTypes = require(Packages.Shared)
type MutableSourceGetVersionFn = ReactTypes.MutableSourceGetVersionFn
type MutableSource<T> = ReactTypes.MutableSource<T>

local function createMutableSource<Source>(source: Source, getVersion: MutableSourceGetVersionFn): MutableSource<Source>
	local mutableSource: MutableSource<Source> = {
		_getVersion = getVersion,
		_source = source,
		_workInProgressVersionPrimary = nil,
		_workInProgressVersionSecondary = nil,
	}

	if _G.__DEV__ then
		mutableSource._currentPrimaryRenderer = nil
		mutableSource._currentSecondaryRenderer = nil
	end

	return mutableSource
end

return createMutableSource
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="332">
              <Properties>
                <string name="Name">ReactNoopUpdateQueue</string>
                <string name="Source"><![CDATA[-- upstream: https://github.com/facebook/react/blob/0cf22a56a18790ef34c71bef14f64695c0498619/packages/react/src/ReactNoopUpdateQueue.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 ]]

local Packages = script.Parent.Parent
-- NOTE: use patched console from shared
local console = require(Packages.Shared).console

local didWarnStateUpdateForUnmountedComponent = {}

local function warnNoop(publicInstance: any, callerName: string)
	if _G.__DEV__ then
		-- local constructor = publicInstance.constructor
		-- local componentName = ((constructor and (constructor.displayName or constructor.name)) or 'ReactClass')
		-- deviation: For Lua Class components, the name comes from a property
		-- defined on the metatable
		local componentName = publicInstance.__componentName or "ReactClass"
		local warningKey = componentName .. "." .. callerName
		if didWarnStateUpdateForUnmountedComponent[warningKey] then
			return
		end
		-- deviation: message adjusted for accuracy with Lua class components
		console.error(
			"Can't call %s on a component that is not yet mounted. "
				.. "This is a no-op, but it might indicate a bug in your application. "
				.. "Instead, assign to `self.state` directly with the desired state in "
				.. "the %s component's `init` method.",
			callerName,
			componentName
		)
		didWarnStateUpdateForUnmountedComponent[warningKey] = true
	end
end

--[[*
 * This is the abstract API for an update queue.
 ]]
local ReactNoopUpdateQueue = {
	--[[*
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   ]]
	isMounted = function(publicInstance)
		return false
	end,
	--[[*
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   ]]
	enqueueForceUpdate = function(publicInstance, callback, callerName)
		warnNoop(publicInstance, "forceUpdate")
	end,
	--[[*
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   ]]
	enqueueReplaceState = function(publicInstance, completeState, callback, callerName)
		warnNoop(publicInstance, "replaceState")
	end,
	--[[*
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} Name of the calling function in the public API.
   * @internal
   ]]
	enqueueSetState = function(publicInstance, partialState, callback, callerName)
		warnNoop(publicInstance, "setState")
	end,
}

return ReactNoopUpdateQueue
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="333">
              <Properties>
                <string name="Name">createSignal.roblox</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/Roblox/roact/blob/master/src/createSignal.lua
--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the Apache License, Version 2.0 (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]

type Function = (...any) -> ...any
--[[
	This is a simple signal implementation that has a dead-simple API.

		local signal = createSignal()

		local disconnect = signal:subscribe(function(foo)
			print("Cool foo:", foo)
		end)

		signal:fire("something")

		disconnect()
]]

type Connection = { callback: Function, disconnected: boolean }
type Map<K, V> = { [K]: V }

local function createSignal(): ((Function) -> (() -> ()), (...any) -> ())
	local connections: Map<Function, Connection> = {}
	local suspendedConnections = {}
	local firing = false

	local function subscribe(callback)
		assert(typeof(callback) == "function", "Can only subscribe to signals with a function.")

		local connection = {
			callback = callback,
			disconnected = false,
		}

		-- If the callback is already registered, don't add to the suspendedConnection. Otherwise, this will disable
		-- the existing one.
		if firing and not connections[callback] then
			suspendedConnections[callback] = connection
		end

		connections[callback] = connection

		local function disconnect()
			assert(not connection.disconnected, "Listeners can only be disconnected once.")

			connection.disconnected = true
			connections[callback] = nil
			suspendedConnections[callback] = nil
		end

		return disconnect
	end

	local function fire(...)
		firing = true
		for callback, connection in connections do
			if not connection.disconnected and not suspendedConnections[callback] then
				callback(...)
			end
		end

		firing = false

		-- performance: use table.clear
		table.clear(suspendedConnections)
	end

	return subscribe, fire
end

return createSignal
]]></string>
              </Properties>
            </Item>
          </Item>
          <Item class="ModuleScript" referent="334">
            <Properties>
              <string name="Name">ReactReconciler</string>
              <string name="Source"><![CDATA[-- upstream: https://github.com/facebook/react/blob/43363e2795393a00fd77312a16d6b80e626c29de/packages/react-reconciler/src/index.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
 ]]

--!strict
local ReactInternalTypes = require(script.ReactInternalTypes)
local ReactRootTags = require(script.ReactRootTags)

export type Dispatcher = ReactInternalTypes.Dispatcher
export type Fiber = ReactInternalTypes.Fiber
export type FiberRoot = ReactInternalTypes.FiberRoot

-- deviation: explicit export for use in createReactNoop
export type UpdateQueue<T> = ReactInternalTypes.UpdateQueue<T>

export type RootTag = ReactRootTags.RootTag

-- deviation: In order to allow host config to be spliced in, we export
-- this top-level package as an initializer function that returns the configured
-- reconciler module
-- TODO: this effectively disconnects type checking from above to reconciler to below
local function initialize(config): { [string]: any }
	local ReactFiberHostConfig = require(script.ReactFiberHostConfig)
	for name, implementation in config do
		ReactFiberHostConfig[name] = implementation
	end

	return require(script.ReactFiberReconciler)
end

return initialize
]]></string>
            </Properties>
            <Item class="ModuleScript" referent="335">
              <Properties>
                <string name="Name">DebugTracing</string>
                <string name="Source"><![CDATA[-- upstream: https://github.com/facebook/react/blob/43363e2795393a00fd77312a16d6b80e626c29de/packages/react-reconciler/src/DebugTracing.js
-- /**
--  * Copyright (c) Facebook, Inc. and its affiliates.
--  *
--  * This source code is licensed under the MIT license found in the
--  * LICENSE file in the root directory of this source tree.
--  *
--  * @flow
--  */

local Packages = script.Parent.Parent
type Array<T> = { [number]: T }
type Map<K, V> = { [K]: V }
type Object = { [string]: any }
type Function = (any) -> any?
local Shared = require(Packages.Shared)
local console = Shared.console
local exports = {}

-- deviation: hoist log so it's visible
local log
-- deviation: the nucelus emoji `(%c\u{269B}\u{FE0F}%c)` has been replaced with `*`

local ReactFiberLaneModule = require(script.Parent.ReactFiberLane)
type Lane = ReactFiberLaneModule.Lane
type Lanes = ReactFiberLaneModule.Lanes
type Wakeable = Shared.Wakeable

local enableDebugTracing = require(Packages.Shared).ReactFeatureFlags.enableDebugTracing

local nativeConsole: Object = console
local nativeConsoleLog: nil | Function = nil

local pendingGroupArgs: Array<any> = {}
-- deviation: adjust starting indea for Lua 1-based arrays
local printedGroupIndex: number = 0

-- deviation: Luau has no built-in way to convert decimal number to binary string
function decimalToBinaryString(decimal: number): string
	local result = ""
	repeat
		local divres = decimal / 2
		local int, frac = math.modf(divres)
		decimal = int
		result = math.ceil(frac) .. result
	until decimal == 0

	local nbZero = 31 - string.len(result)
	return string.rep("0", nbZero) .. result
end

local function formatLanes(laneOrLanes: Lane | Lanes): string
	return "0b"
		-- deviation: Luau has no built-in way to convert decimal number to binary string
		.. decimalToBinaryString(laneOrLanes)
end

local function group(...): ()
	for _, groupArg in { ... } do
		table.insert(pendingGroupArgs, groupArg)
	end
	if nativeConsoleLog == nil then
		nativeConsoleLog = nativeConsole.log
		nativeConsole.log = log
	end
end

local function groupEnd(): ()
	table.remove(pendingGroupArgs, 1)
	while printedGroupIndex > #pendingGroupArgs do
		nativeConsole.groupEnd()
		printedGroupIndex -= 1
	end
	if #pendingGroupArgs == 0 then
		nativeConsole.log = nativeConsoleLog
		nativeConsoleLog = nil
	end
end

function log(...): ()
	if printedGroupIndex < #pendingGroupArgs then
		for i = printedGroupIndex + 1, #pendingGroupArgs do
			local groupArgs = pendingGroupArgs[i]
			nativeConsole.group(groupArgs)
		end
		printedGroupIndex = #pendingGroupArgs
	end
	if typeof(nativeConsoleLog) == "function" then
		(nativeConsoleLog :: any)(...)
	else
		nativeConsole.log(...)
	end
end

-- deviation: remove color styling
local REACT_LOGO_STYLE = ""

local function logCommitStarted(lanes: Lanes): ()
	if _G.__DEV__ then
		if enableDebugTracing then
			group(
				string.format("* commit (%s)", formatLanes(lanes)),
				REACT_LOGO_STYLE,
				"",
				-- deviation: remove style
				""
			)
		end
	end
end
exports.logCommitStarted = logCommitStarted

local function logCommitStopped(): ()
	if _G.__DEV__ then
		if enableDebugTracing then
			groupEnd()
		end
	end
end
exports.logCommitStopped = logCommitStopped

-- deviation: use raw Lua table
-- const PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
-- $FlowFixMe: Flow cannot handle polymorphic WeakMaps

-- TODO: restore the color message formatting from upstream
-- local wakeableIDs: Map<Wakeable, number> = {}
-- local wakeableID: number = 0
-- local function getWakeableID(wakeable: Wakeable): number
-- 	if not wakeableIDs[wakeable] ~= nil then
-- 		wakeableIDs[wakeable] =
-- 			(function()
-- 				local result = wakeableID
-- 				wakeableID += 1
-- 				return result
-- 			end)()
-- 	end
-- 	return wakeableIDs[wakeable]
-- end

local function logComponentSuspended(componentName: string, wakeable: Wakeable): ()
	if _G.__DEV__ then
		if enableDebugTracing then
			-- local _id = getWakeableID(wakeable)
			-- deviation: our Wakeable can be a function or a callable table
			-- local _display = wakeable.displayName or wakeable
			log(
				string.format("* %s suspended", componentName)
				-- REACT_LOGO_STYLE,
				-- deviation: remove color styling
				-- "",
				-- id,
				-- display
			)
			wakeable:andThen(function()
				log(
					string.format("* %s resolved", componentName)
					-- REACT_LOGO_STYLE,
					-- deviation: remove color styling
					-- "",
					-- id,
					-- display
				)
			end, function()
				log(
					string.format("* %s rejected", componentName)
					-- REACT_LOGO_STYLE,
					-- deviation: remove color styling
					-- "",
					-- id,
					-- display
				)
			end)
		end
	end
end
exports.logComponentSuspended = logComponentSuspended

local function logLayoutEffectsStarted(lanes: Lanes): ()
	if _G.__DEV__ then
		if enableDebugTracing then
			group(
				string.format("* layout effects (%s)", formatLanes(lanes))
				-- REACT_LOGO_STYLE,
				-- "",
				-- deviation: strip color styling
				-- ""
			)
		end
	end
end
exports.logLayoutEffectsStarted = logLayoutEffectsStarted

local function logLayoutEffectsStopped(): ()
	if _G.__DEV__ then
		if enableDebugTracing then
			groupEnd()
		end
	end
end
exports.logLayoutEffectsStopped = logLayoutEffectsStopped

local function logPassiveEffectsStarted(lanes: Lanes): ()
	if _G.__DEV__ then
		if enableDebugTracing then
			group(
				string.format("* passive effects (%s)", formatLanes(lanes))
				-- REACT_LOGO_STYLE,
				-- "",
				-- deviation: strip color styling
				-- ""
			)
		end
	end
end
exports.logPassiveEffectsStarted = logPassiveEffectsStarted

local function logPassiveEffectsStopped(): ()
	if _G.__DEV__ then
		if enableDebugTracing then
			groupEnd()
		end
	end
end
exports.logPassiveEffectsStopped = logPassiveEffectsStopped

local function logRenderStarted(lanes: Lanes): ()
	if _G.__DEV__ then
		if enableDebugTracing then
			group(
				string.format("* render (%s)", formatLanes(lanes))
				-- REACT_LOGO_STYLE,
				-- "",
				-- deviation: strip color styling
				-- ""
			)
		end
	end
end
exports.logRenderStarted = logRenderStarted

local function logRenderStopped(): ()
	if _G.__DEV__ then
		if enableDebugTracing then
			groupEnd()
		end
	end
end
exports.logRenderStopped = logRenderStopped

local function logForceUpdateScheduled(componentName: string, lane: Lane): ()
	if _G.__DEV__ then
		if enableDebugTracing then
			log(
				string.format("* %s forced update (%s)", componentName, formatLanes(lane))
				-- REACT_LOGO_STYLE,
				-- deviation: strip color styling
				-- "",
				-- ""
			)
		end
	end
end
exports.logForceUpdateScheduled = logForceUpdateScheduled

local function logStateUpdateScheduled(componentName: string, lane: Lane, payloadOrAction: any): ()
	if _G.__DEV__ then
		if enableDebugTracing then
			log(
				string.format("* %s updated state (%s)", componentName, formatLanes(lane))
				-- REACT_LOGO_STYLE,
				-- deviation: strip color styling
				-- "",
				-- "",
				-- payloadOrAction
			)
		end
	end
end
exports.logStateUpdateScheduled = logStateUpdateScheduled
return exports
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="336">
              <Properties>
                <string name="Name">MaxInts</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/c5d2fc7127654e43de59fff865b74765a103c4a5/packages/react-reconciler/src/MaxInts.js
-- /**
--  * Copyright (c) Facebook, Inc. and its affiliates.
--  *
--  * This source code is licensed under the MIT license found in the
--  * LICENSE file in the root directory of this source tree.
--  *
--  * @flow
--  */

-- // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
-- // Math.pow(2, 30) - 1
-- // 0b111111111111111111111111111111
return { MAX_SIGNED_31_BIT_INT = 1073741823 }
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="337">
              <Properties>
                <string name="Name">ReactCapturedValue</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/56e9feead0f91075ba0a4f725c9e4e343bca1c67/packages/react-reconciler/src/ReactCapturedValue.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
 ]]

local ReactInternalTypes = require(script.Parent.ReactInternalTypes)
type Fiber = ReactInternalTypes.Fiber

local getStackByFiberInDevAndProd = require(script.Parent.ReactFiberComponentStack).getStackByFiberInDevAndProd

export type CapturedValue<T> = {
	value: T,
	source: Fiber | nil,
	stack: string | nil,
}

local exports = {}

exports.createCapturedValue = function<T>(value: T, source: Fiber | nil): CapturedValue<T>
	-- If the value is an error, call this function immediately after it is thrown
	-- so the stack is accurate.
	return {
		value = value,
		source = source,
		stack = getStackByFiberInDevAndProd(source),
	}
end

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="338">
              <Properties>
                <string name="Name">ReactChildFiber.new</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/16654436039dd8f16a63928e71081c7745872e8f/packages/react-reconciler/src/ReactChildFiber.new.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]
local __DEV__ = _G.__DEV__ :: boolean
local Packages = script.Parent.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)
local Array = LuauPolyfill.Array
local Error = LuauPolyfill.Error
type Array<T> = { [number]: T }
type Set<T> = { [T]: boolean }
type Object = { [any]: any }
type Map<K, V> = { [K]: V }
-- NOTE: use patched console from shared
local console = require(Packages.Shared).console
local describeError = require(Packages.Shared).describeError

local ReactTypes = require(Packages.Shared)
-- deviation: ReactElement is defined at the top level of Shared along
-- with the rest of the ReactTypes
type ReactElement = ReactTypes.ReactElement<any, any>
type ReactPortal = ReactTypes.ReactPortal

local React = require(Packages.React)
type LazyComponent<T, P> = React.LazyComponent<T, P>

local ReactInternalTypes = require(script.Parent.ReactInternalTypes)
type Fiber = ReactInternalTypes.Fiber
type RoactStableKey = ReactInternalTypes.RoactStableKey
local ReactFiberLanes = require(script.Parent.ReactFiberLane)
type Lanes = ReactFiberLanes.Lanes

local getComponentName = require(Packages.Shared).getComponentName
local ReactFiberFlags = require(script.Parent.ReactFiberFlags)
local Placement = ReactFiberFlags.Placement
local Deletion = ReactFiberFlags.Deletion
local ReactSymbols = require(Packages.Shared).ReactSymbols
local getIteratorFn = ReactSymbols.getIteratorFn
local REACT_ELEMENT_TYPE = ReactSymbols.REACT_ELEMENT_TYPE
local REACT_FRAGMENT_TYPE = ReactSymbols.REACT_FRAGMENT_TYPE
local REACT_PORTAL_TYPE = ReactSymbols.REACT_PORTAL_TYPE
local REACT_LAZY_TYPE = ReactSymbols.REACT_LAZY_TYPE
local REACT_BLOCK_TYPE = ReactSymbols.REACT_BLOCK_TYPE
local ReactWorkTags = require(script.Parent.ReactWorkTags)
local FunctionComponent = ReactWorkTags.FunctionComponent
local ClassComponent = ReactWorkTags.ClassComponent
local HostText = ReactWorkTags.HostText
local HostPortal = ReactWorkTags.HostPortal
local ForwardRef = ReactWorkTags.ForwardRef
local Fragment = ReactWorkTags.Fragment
local SimpleMemoComponent = ReactWorkTags.SimpleMemoComponent
local Block = ReactWorkTags.Block
local invariant = require(Packages.Shared).invariant
local ReactFeatureFlags = require(Packages.Shared).ReactFeatureFlags
-- deviation: we do not support string refs
-- local warnAboutStringRefs = ReactFeatureFlags.warnAboutStringRefs
local enableLazyElements = ReactFeatureFlags.enableLazyElements
local enableBlocksAPI = ReactFeatureFlags.enableBlocksAPI

local ReactFiber = require(script.Parent["ReactFiber.new"])
local createWorkInProgress = ReactFiber.createWorkInProgress
local resetWorkInProgress = ReactFiber.resetWorkInProgress
local createFiberFromElement = ReactFiber.createFiberFromElement
local createFiberFromFragment = ReactFiber.createFiberFromFragment
local createFiberFromText = ReactFiber.createFiberFromText
local createFiberFromPortal = ReactFiber.createFiberFromPortal
-- deviation: we do not support string refs
-- local emptyRefsObject =
-- 	require(script.Parent["ReactFiberClassComponent.new"]).emptyRefsObject
-- local ReactFiberHotReloading = require(script.Parent["ReactFiberHotReloading.new"])
-- local isCompatibleFamilyForHotReloading =
-- 	ReactFiberHotReloading.isCompatibleFamilyForHotReloading
-- deviation: we do not support string refs, which removes our use of StrictMode
-- local StrictMode = require(script.Parent.ReactTypeOfMode).StrictMode

local exports = {}

local didWarnAboutMaps
-- deviation: Lua doesn't have built-in generators
-- local didWarnAboutGenerators
-- deviation: we do not support string refs
-- local didWarnAboutStringRefs
local ownerHasKeyUseWarning
local ownerHasFunctionTypeWarning
local warnForMissingKey = function(child: any, returnFiber: Fiber) end

if __DEV__ then
	didWarnAboutMaps = false
	-- deviation: Lua doesn't have built-in generators
	--   didWarnAboutGenerators = false

	-- deviation: we do not support string refs
	-- didWarnAboutStringRefs = {}

	--[[
	Warn if there's no key explicitly set on dynamic arrays of children or
	object keys are not valid. This allows us to keep track of children between
	updates.
  ]]
	ownerHasKeyUseWarning = {}
	ownerHasFunctionTypeWarning = {}

	-- FIXME: This may need to change depending on how we want children to
	-- be passed. Current Roact accepts a table (keys are built-in) and leaves
	-- ordering up to users via LayoutOrder, but if we accept arrays (and attempt
	-- to somehow map them to LayoutOrder??) we'll need keys for stability
	warnForMissingKey = function(child: any, returnFiber: Fiber)
		if child == nil or type(child) ~= "table" then
			return
		end
		if not child._store or child._store.validated or child.key ~= nil then
			return
		end
		invariant(
			child._store ~= nil and type(child._store) == "table",
			"React Component in warnForMissingKey should have a _store. "
				.. "This error is likely caused by a bug in React. Please file an issue."
		)
		child._store.validated = true

		local componentName = getComponentName(returnFiber.type) or "Component"

		if ownerHasKeyUseWarning[componentName] then
			return
		end
		ownerHasKeyUseWarning[componentName] = true

		console.error(
			"Each child in a list should have a unique "
				.. '"key" prop. See https://reactjs.org/link/warning-keys for '
				.. "more information."
		)
	end
end

local isArray = Array.isArray

function coerceRef(returnFiber: Fiber, current: Fiber | nil, element: ReactElement)
	local mixedRef = element.ref
	if mixedRef ~= nil and type(mixedRef) == "string" then
		-- deviation: we do not support string refs, and will not coerce
		if not element._owner or not element._self or element._owner.stateNode == element._self then
			-- performance: don't get component name unless we have to use it
			local componentName
			if __DEV__ then
				componentName = getComponentName(returnFiber.type) or "Component"
			else
				componentName = "<enable __DEV__ mode for component names>"
			end
			error(
				Error.new(
					string.format(
						'Component "%s" contains the string ref "%s". Support for string refs '
							-- deviation: we removed string ref support ahead of upstream schedule
							.. "has been removed. We recommend using "
							.. "useRef() or createRef() instead. "
							.. "Learn more about using refs safely here: "
							.. "https://reactjs.org/link/strict-mode-string-ref",
						componentName,
						tostring(mixedRef)
					)
				)
			)
		end

		if not element._owner then
			error("Expected ref to be a function or an object returned by React.createRef(), or nil.")
		end

		-- if __DEV__ then
		-- 	-- TODO: Clean this up once we turn on the string ref warning for
		-- 	-- everyone, because the strict mode case will no longer be relevant
		-- 	if
		-- 		(bit32.band(returnFiber.mode, StrictMode) ~= 0 or warnAboutStringRefs)
		-- 		-- We warn in ReactElement.js if owner and self are equal for string refs
		-- 		-- because these cannot be automatically converted to an arrow function
		-- 		-- using a codemod. Therefore, we don't have to warn about string refs again.
		-- 		and not (
		-- 			element._owner
		-- 			and element._self
		-- 			and element._owner.stateNode ~= element._self
		-- 		)
		-- 	then
		-- 		local componentName = getComponentName(returnFiber.type) or "Component"
		-- 		if not didWarnAboutStringRefs[componentName] then
		-- 			if warnAboutStringRefs then
		-- 				console.error(
		-- 					'Component "%s" contains the string ref "%s". Support for string refs '
		-- 						.. "will be removed in a future major release. We recommend using "
		-- 						.. "useRef() or createRef() instead. "
		-- 						.. "Learn more about using refs safely here: "
		-- 						.. "https://reactjs.org/link/strict-mode-string-ref",
		-- 					componentName,
		-- 					mixedRef
		-- 				)
		-- 			else
		-- 				console.error(
		-- 					'A string ref, "%s", has been found within a strict mode tree. '
		-- 						.. "String refs are a source of potential bugs and should be avoided. "
		-- 						.. "We recommend using useRef() or createRef() instead. "
		-- 						.. "Learn more about using refs safely here: "
		-- 						.. "https://reactjs.org/link/strict-mode-string-ref",
		-- 					mixedRef
		-- 				)
		-- 			end
		-- 			didWarnAboutStringRefs[componentName] = true
		-- 		end
		-- 	end
		-- end

		-- if element._owner then
		-- 	local owner: Fiber? = element._owner
		-- 	local inst
		-- 	if owner then
		-- 		local ownerFiber = owner
		-- 		invariant(
		-- 			ownerFiber.tag == ClassComponent,
		-- 			"Function components cannot have string refs. "
		-- 				.. "We recommend using useRef() instead. "
		-- 				.. "Learn more about using refs safely here: "
		-- 				.. "https://reactjs.org/link/strict-mode-string-ref"
		-- 		)
		-- 		inst = ownerFiber.stateNode
		-- 	end
		-- 	invariant(
		-- 		inst,
		-- 		"Missing owner for string ref %s. This error is likely caused by a "
		-- 			.. "bug in React. Please file an issue.",
		-- 		mixedRef
		-- 	)

		-- 	-- deviation: explicitly convert to string
		-- 	local stringRef = tostring(mixedRef)
		-- 	-- Check if previous string ref matches new string ref
		-- 	if
		-- 		current ~= nil
		-- 		and (current :: Fiber).ref ~= nil
		-- 		-- deviation: Lua doesn't support fields on functions, so invert this check
		-- 		-- typeof((current :: Fiber).ref) == 'function' and
		-- 		and typeof((current :: Fiber).ref) ~= "function"
		-- 		-- deviation: this partially inlines the ref type from Fiber to workaround Luau refinement issues
		-- 		and ((current :: Fiber).ref :: { _stringRef: string? })._stringRef
		-- 			== stringRef
		-- 	then
		-- 		return (current :: Fiber).ref
		-- 	end
		-- 	-- deviation: make ref a callable table rather than a function
		-- 	local callableRef = function(value)
		-- 		local refs = inst.__refs
		-- 		if refs == emptyRefsObject then
		-- 			-- This is a lazy pooled frozen object, so we need to initialize.
		-- 			inst.__refs = {}
		-- 			refs = inst.__refs
		-- 		end
		-- 		if value == nil then
		-- 			refs[stringRef] = nil
		-- 		else
		-- 			refs[stringRef] = value
		-- 		end
		-- 	end
		-- 	local ref = setmetatable({}, { __call = callableRef })
		-- 	ref._stringRef = stringRef
		-- 	return ref
		-- else
		-- 	invariant(
		-- 		typeof(mixedRef) == "string",
		-- 		"Expected ref to be a function, a string, an object returned by React.createRef(), or nil."
		-- 	)
		-- 	invariant(
		-- 		element._owner,
		-- 		"Element ref was specified as a string (%s) but no owner was set. This could happen for one of"
		-- 			.. " the following reasons:\n"
		-- 			.. "1. You may be adding a ref to a function component\n"
		-- 			.. "2. You may be adding a ref to a component that was not created inside a component's render method\n"
		-- 			.. "3. You have multiple copies of React loaded\n"
		-- 			.. "See https://reactjs.org/link/refs-must-have-owner for more information.",
		-- 		mixedRef
		-- 	)
		-- end
	end
	return mixedRef
end

-- performance: all uses commented out
-- local function throwOnInvalidObjectType(returnFiber: Fiber, newChild: { [any]: any })
-- 	if returnFiber.type ~= "textarea" then
-- FIXME: Need to adjust this to check for "table: <address>" instead
-- and print appropriately
-- unimplemented("throwOnInvalidObjectType textarea")

-- TODO: This is likely a bigger deviation; in Roact today, we allow
-- tables and use the keys as equivalents to the `key` prop
-- invariant(
--   false,
--   "Objects are not valid as a React child (found: %s). " ..
--     "If you meant to render a collection of children, use an array " ..
--     "instead.",
--   tostring(newChild) == "[object Object]"
--     ? "object with keys {" + Object.keys(newChild).join(", ") + "}"
--     : newChild,
-- )
-- 	end
-- end

local function warnOnFunctionType(returnFiber: Fiber)
	if __DEV__ then
		local componentName = getComponentName(returnFiber.type) or "Component"

		if ownerHasFunctionTypeWarning[componentName] then
			return
		end
		ownerHasFunctionTypeWarning[componentName] = true

		console.error(
			"Functions are not valid as a React child. This may happen if "
				.. "you return a Component instead of <Component /> from render. "
				.. "Or maybe you meant to call this function rather than return it."
		)
	end
end

-- // We avoid inlining this to avoid potential deopts from using try/catch.
-- /** @noinline */
function resolveLazyType<T, P>(lazyComponent: LazyComponent<T, P>): LazyComponent<T, P> | T
	-- performance: hoist non-throwable lines so we eliminate an anon function for the pcall
	-- If we can, let's peek at the resulting type.
	local payload = lazyComponent._payload
	local init = lazyComponent._init
	local ok, result = xpcall(init, describeError, payload)
	if not ok then
		-- Leave it in place and let it throw again in the begin phase.
		return lazyComponent
	end

	return result
end

-- This wrapper function exists because I expect to clone the code in each path
-- to be able to optimize each path individually by branching early. This needs
-- a compiler or we can do it manually. Helpers that don't need this branching
-- live outside of this function.
local function ChildReconciler(shouldTrackSideEffects)
	local function deleteChild(returnFiber: Fiber, childToDelete: Fiber)
		if not shouldTrackSideEffects then
			-- Noop.
			return
		end
		local deletions = returnFiber.deletions
		if deletions == nil then
			returnFiber.deletions = { childToDelete }
			returnFiber.flags = bit32.bor(returnFiber.flags, Deletion)
		else
			table.insert(deletions, childToDelete)
		end
	end

	local function deleteRemainingChildren(returnFiber: Fiber, currentFirstChild: Fiber | nil)
		if not shouldTrackSideEffects then
			-- Noop.
			return nil
		end

		-- TODO: For the shouldClone case, this could be micro-optimized a bit by
		-- assuming that after the first child we've already added everything.
		local childToDelete = currentFirstChild
		while childToDelete ~= nil do
			deleteChild(returnFiber, childToDelete)
			childToDelete = childToDelete.sibling
		end
		return nil
	end

	local function mapRemainingChildren(returnFiber: Fiber, currentFirstChild: Fiber): { [string | number]: Fiber }
		-- Add the remaining children to a temporary map so that we can find them by
		-- keys quickly. Implicit (null) keys get added to this set with their index
		-- instead.
		local existingChildren: { [string | number]: Fiber } = {}

		-- FIXME Luau: Luau doesn't correctly infer in repeat until nil scenarios
		local existingChild: Fiber? = currentFirstChild
		while existingChild ~= nil do
			if existingChild.key ~= nil then
				existingChildren[existingChild.key] = existingChild
			else
				existingChildren[existingChild.index] = existingChild
			end
			existingChild = existingChild.sibling
		end
		return existingChildren
	end

	local function useFiber(fiber: Fiber, pendingProps: any): Fiber
		-- We currently set sibling to nil and index to 0 here because it is easy
		-- to forget to do before returning it. E.g. for the single child case.
		local clone = createWorkInProgress(fiber, pendingProps)
		-- deviation: set index to 1 for 1-indexing
		clone.index = 1
		clone.sibling = nil
		return clone
	end

	local function placeChild(newFiber: Fiber, lastPlacedIndex: number, newIndex: number): number
		newFiber.index = newIndex
		if not shouldTrackSideEffects then
			-- Noop.
			return lastPlacedIndex
		end
		local current = newFiber.alternate
		if current ~= nil then
			local oldIndex = current.index
			if oldIndex < lastPlacedIndex then
				-- This is a move.
				newFiber.flags = bit32.bor(newFiber.flags, Placement)
				return lastPlacedIndex
			else
				-- This item can stay in place.
				return oldIndex
			end
		else
			-- This is an insertion.
			newFiber.flags = bit32.bor(newFiber.flags, Placement)
			return lastPlacedIndex
		end
	end

	local function placeSingleChild(newFiber: Fiber): Fiber
		-- This is simpler for the single child case. We only need to do a
		-- placement for inserting new children.
		if shouldTrackSideEffects and newFiber.alternate == nil then
			newFiber.flags = bit32.bor(newFiber.flags, Placement)
		end
		return newFiber
	end

	local function updateTextNode(returnFiber: Fiber, current: Fiber | nil, textContent: string, lanes: Lanes)
		-- FIXME: Luau narrowing issue
		if current == nil or (current :: Fiber).tag ~= HostText then
			-- Insert
			local created = createFiberFromText(textContent, returnFiber.mode, lanes)
			created.return_ = returnFiber
			return created
		else
			-- Update
			local existing = useFiber(current :: Fiber, textContent)
			existing.return_ = returnFiber
			return existing
		end
	end

	local function updateElement(returnFiber: Fiber, current: Fiber | nil, element: ReactElement, lanes: Lanes): Fiber
		if current ~= nil then
			if
				(current :: Fiber).elementType == element.type
				-- performance: avoid always-false cmp, hot reloading isn't enabled in Roblox yet
				-- Keep this check inline so it only runs on the false path:
				-- or (__DEV__ and isCompatibleFamilyForHotReloading(current, element))
			then
				-- Move based on index
				local existing = useFiber(current :: Fiber, element.props)
				existing.ref = coerceRef(returnFiber, current, element)
				existing.return_ = returnFiber
				if __DEV__ then
					existing._debugSource = element._source
					existing._debugOwner = element._owner
				end
				return existing
			elseif enableBlocksAPI and (current :: Fiber).tag == Block then
				-- The new Block might not be initialized yet. We need to initialize
				-- it in case initializing it turns out it would match.
				-- FIXME Luau: Luau should analyze closure and create union of assignments
				local type_: any = element.type
				if type(type_) == "table" and type_["$$typeof"] == REACT_LAZY_TYPE then
					type_ = resolveLazyType(type_) :: LazyComponent<any, any>
				end
				if type_["$$typeof"] == REACT_BLOCK_TYPE and type_._render == (current :: Fiber).type._render then
					-- Same as above but also update the .type field.
					local existing = useFiber(current :: Fiber, element.props)
					existing.return_ = returnFiber
					existing.type = type_
					if __DEV__ then
						existing._debugSource = element._source
						existing._debugOwner = element._owner
					end
					return existing
				end
			end
		end
		-- Insert
		local created = createFiberFromElement(element, returnFiber.mode, lanes)
		created.ref = coerceRef(returnFiber, current, element)
		created.return_ = returnFiber
		return created
	end

	local function updatePortal(returnFiber: Fiber, current: Fiber | nil, portal: ReactPortal, lanes: Lanes): Fiber
		-- FIXME: type narrowing.
		if
			current == nil
			or (current :: Fiber).tag ~= HostPortal
			or (current :: Fiber).stateNode.containerInfo ~= portal.containerInfo
			or (current :: Fiber).stateNode.implementation ~= portal.implementation
		then
			-- Insert
			local created = createFiberFromPortal(portal, returnFiber.mode, lanes)
			created.return_ = returnFiber
			return created
		else
			-- Update
			local existing = useFiber(current :: Fiber, portal.children or {})
			existing.return_ = returnFiber
			return existing
		end
	end

	local function updateFragment(
		returnFiber: Fiber,
		current: Fiber | nil,
		-- TODO: figure out how we should define our Iterable type
		--   fragment: Iterable<*>,
		fragment: any,
		lanes: Lanes,
		key: nil | string
	): Fiber
		if current == nil or (current :: Fiber).tag ~= Fragment then
			-- Insert
			local created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key)
			created.return_ = returnFiber
			return created
		else
			-- Update
			local existing = useFiber(current :: Fiber, fragment)
			existing.return_ = returnFiber
			return existing
		end
	end

	-- deviation: Roact stable keys - Support Roact's implementation of
	-- stable keys, wherein the key used in the `children` table is used as if it
	-- were a `key` prop. Child order doesn't matter in Roblox, so a vast majority
	-- of existing Roact code used table keys in this way.
	local function assignStableKey(tableKey: any?, newChild: Object): ()
		-- If there's no assigned key in the element, and the table key is valid,
		-- assign it as the element's key.
		-- If the key is a table, convert it to a string.

		-- TODO: Investigate if this is safe; maybe we need to shallow-copy
		-- the object if we have a new key, to preserve immutability, but that cost
		-- may be severe
		if newChild.key == nil then
			-- performance? only call typeof once, and only if first condition is true
			local typeOfTableKey = type(tableKey)
			if typeOfTableKey == "string" or typeOfTableKey == "number" then
				newChild.key = tableKey
			elseif typeOfTableKey == "table" then
				newChild.key = tostring(tableKey)
			end
		end
	end

	local function createChild(
		returnFiber: Fiber,
		newChild: any,
		lanes: Lanes,
		-- deviation: children table key for compat with Roact's stable keys
		tableKey: any?
	): Fiber | nil
		-- performance: early exit for nil newChild since no actions will be taken
		if newChild == nil then
			return nil
		end

		-- performance: avoid repeated calls to typeof, since Luau doesn't optimize
		local typeOfNewChild = type(newChild)

		-- performance: hoist more common ROblox case (non-string/number) first to reduce cmp in hot path
		if typeOfNewChild == "table" then
			-- deviation: Roact stable keys - forward children table key to
			-- child if applicable
			assignStableKey(tableKey, newChild)
			-- performance: avoid repeated indexing to $$typeof
			local newChildTypeof = newChild["$$typeof"]
			if newChildTypeof == REACT_ELEMENT_TYPE then
				local created = createFiberFromElement(newChild, returnFiber.mode, lanes)
				created.ref = coerceRef(returnFiber, nil, newChild)
				created.return_ = returnFiber
				return created
			elseif newChildTypeof == REACT_PORTAL_TYPE then
				local created = createFiberFromPortal(newChild, returnFiber.mode, lanes)
				created.return_ = returnFiber
				return created
			elseif newChildTypeof == REACT_LAZY_TYPE then
				if enableLazyElements then
					local payload = newChild._payload
					local init = newChild._init
					-- deviation: Roact stable keys - Since the table key was
					-- already applied to `newChild` above, we don't need to pass it along
					return createChild(returnFiber, init(payload), lanes)
				end
			end

			-- deviation peformance: this is the equiv of checking for a table, and we already know typeof(newChild) is a table in this branch
			-- if isArray(newChild) or getIteratorFn(newChild) then
			local created = createFiberFromFragment(newChild, returnFiber.mode, lanes, nil)
			created.return_ = returnFiber
			return created

			-- performance deviation: unreachable with the above table check
			-- throwOnInvalidObjectType(returnFiber, newChild)
		end

		if typeOfNewChild == "string" or typeOfNewChild == "number" then
			-- Text nodes don't have keys. If the previous node is implicitly keyed
			-- we can continue to replace it without aborting even if it is not a text
			-- node.
			local created = createFiberFromText(tostring(newChild), returnFiber.mode, lanes)
			created.return_ = returnFiber
			return created
		end

		if __DEV__ then
			if typeOfNewChild == "function" then
				warnOnFunctionType(returnFiber)
			end
		end

		return nil
	end

	local function updateSlot(
		returnFiber: Fiber,
		oldFiber: Fiber | nil,
		newChild: any,
		lanes: Lanes,
		-- deviation: children table key for compat with Roact's stable keys
		tableKey: any?
	): Fiber | nil
		-- performance: early exit for nil newChild since no actions will be taken
		if newChild == nil then
			return nil
		end

		-- Update the fiber if the keys match, otherwise return nil.

		local key = if oldFiber ~= nil then oldFiber.key else nil
		-- performance: avoid repeated calls to typeof since Luau doesn't cache
		local typeOfNewChild = type(newChild)

		if typeOfNewChild == "table" then
			-- deviation: Roact stable keys - forward children table key to
			-- child if applicable
			assignStableKey(tableKey, newChild)
			-- performance: avoid repeated indexing to $$typeof
			local newChildTypeof = newChild["$$typeof"]
			if newChildTypeof == REACT_ELEMENT_TYPE then
				if newChild.key == key then
					if newChild.type == REACT_FRAGMENT_TYPE then
						return updateFragment(returnFiber, oldFiber, newChild.props.children, lanes, key :: string?)
					end
					return updateElement(returnFiber, oldFiber, newChild, lanes)
				else
					return nil
				end
			elseif newChildTypeof == REACT_PORTAL_TYPE then
				if newChild.key == key then
					return updatePortal(returnFiber, oldFiber, newChild, lanes)
				else
					return nil
				end
			elseif newChildTypeof == REACT_LAZY_TYPE then
				if enableLazyElements then
					local payload = newChild._payload
					local init = newChild._init
					-- deviation: Roact stable keys - Since the table key was
					-- already applied to `newChild` above, we don't need to pass it along
					return updateSlot(returnFiber, oldFiber, init(payload), lanes)
				end
			end

			-- deviation peformance: this is the equiv of checking for a table, and we already know typeof(newChild) is a table in this branch
			-- if isArray(newChild) or getIteratorFn(newChild) then
			if key ~= nil then
				return nil
			end

			return updateFragment(returnFiber, oldFiber, newChild, lanes)

			-- performance deviation: unreachable with the above table check
			-- throwOnInvalidObjectType(returnFiber, newChild)
		end

		-- performance: do this compare last to save 2 string cmp in typical Roblox hot path
		if typeOfNewChild == "string" or typeOfNewChild == "number" then
			-- Text nodes don't have keys. If the previous node is implicitly keyed
			-- we can continue to replace it without aborting even if it is not a text
			-- node.
			if key ~= nil then
				return nil
			end
			return updateTextNode(returnFiber, oldFiber, tostring(newChild), lanes)
		end

		if __DEV__ then
			if typeOfNewChild == "function" then
				warnOnFunctionType(returnFiber)
			end
		end

		return nil
	end

	local function updateFromMap(
		existingChildren: Map<string | number, Fiber>,
		returnFiber: Fiber,
		newIdx: number,
		newChild: any,
		lanes: Lanes,
		-- deviation: children table key for compat with Roact's stable keys
		tableKey: any?
	): Fiber | nil
		-- performance: early exit for nil newChild since no actions will be taken
		if newChild == nil then
			return nil
		end

		-- performance: avoid repeated calls to typeof since Luau doesn't cache
		local typeOfNewChild = type(newChild)

		if typeOfNewChild == "table" then
			-- deviation: Roact stable keys - forward children table key to
			-- child if applicable
			assignStableKey(tableKey, newChild)
			local existingChildrenKey
			-- performance: avoid repeated indexing to $$typeof
			local newChildTypeof = newChild["$$typeof"]
			if newChildTypeof == REACT_ELEMENT_TYPE then
				if newChild.key == nil then
					existingChildrenKey = newIdx
				else
					existingChildrenKey = newChild.key
				end
				local matchedFiber = existingChildren[existingChildrenKey]
				if newChild.type == REACT_FRAGMENT_TYPE then
					return updateFragment(returnFiber, matchedFiber, newChild.props.children, lanes, newChild.key)
				end
				return updateElement(returnFiber, matchedFiber, newChild, lanes)
			elseif newChildTypeof == REACT_PORTAL_TYPE then
				if newChild.key == nil then
					existingChildrenKey = newIdx
				else
					existingChildrenKey = newChild.key
				end
				local matchedFiber = existingChildren[existingChildrenKey]
				return updatePortal(returnFiber, matchedFiber, newChild, lanes)
			elseif newChildTypeof == REACT_LAZY_TYPE then
				if enableLazyElements then
					local payload = newChild._payload
					local init = newChild._init
					-- deviation: Roact stable keys - Since the table key was
					-- already applied to `newChild` above, we don't need to pass it along
					return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes)
				end
			end

			-- deviation peformance: this is the equiv of checking for a table, and we already know typeof(newChild) is a table in this branch
			-- if isArray(newChild) or getIteratorFn(newChild) then
			local matchedFiber = existingChildren[newIdx]
			return updateFragment(returnFiber, matchedFiber, newChild, lanes)

			-- performance deviation: unreachable with the above table check
			-- throwOnInvalidObjectType(returnFiber, newChild)
		end

		-- performance: do this compare last, as Roblox won't really support text nodes directly
		if typeOfNewChild == "string" or typeOfNewChild == "number" then
			-- Text nodes don't have keys, so we neither have to check the old nor
			-- new node for the key. If both are text nodes, they match.
			local matchedFiber = existingChildren[newIdx] or nil
			return updateTextNode(returnFiber, matchedFiber, tostring(newChild), lanes)
		end

		if __DEV__ then
			if typeOfNewChild == "function" then
				warnOnFunctionType(returnFiber)
			end
		end

		return nil
	end

	--[[
	Warns if there is a duplicate or missing key
  ]]
	local function warnOnInvalidKey(child: any, knownKeys: Set<string> | nil, returnFiber: Fiber): Set<string> | nil
		if __DEV__ then
			if child == nil or type(child) ~= "table" then
				return knownKeys
			end
			-- performance: avoid repeated indexing to $$typeof
			local childTypeof = child["$$typeof"]
			if childTypeof == REACT_ELEMENT_TYPE or childTypeof == REACT_PORTAL_TYPE then
				warnForMissingKey(child, returnFiber)
				local key = child.key
				if type(key) ~= "string" then
					-- break
				elseif knownKeys == nil then
					knownKeys = {};
					(knownKeys :: Set<string>)[key] = true
				elseif not (knownKeys :: Set<string>)[key] then
					(knownKeys :: Set<string>)[key] = true
				else
					console.error(
						"Encountered two children with the same key, `%s`. "
							.. "Keys should be unique so that components maintain their identity "
							.. "across updates. Non-unique keys may cause children to be "
							.. "duplicated and/or omitted — the behavior is unsupported and "
							.. "could change in a future version.",
						key
					)
				end
			elseif childTypeof == REACT_LAZY_TYPE then
				if enableLazyElements then
					local payload = child._payload
					local init = child._init
					warnOnInvalidKey(init(payload), knownKeys, returnFiber)
				end
			end
		end
		return knownKeys
	end

	local function reconcileChildrenArray(
		returnFiber: Fiber,
		currentFirstChild: Fiber | nil,
		newChildren: Array<any>,
		lanes: Lanes
	): Fiber | nil
		-- This algorithm can't optimize by searching from both ends since we
		-- don't have backpointers on fibers. I'm trying to see how far we can get
		-- with that model. If it ends up not being worth the tradeoffs, we can
		-- add it later.

		-- Even with a two ended optimization, we'd want to optimize for the case
		-- where there are few changes and brute force the comparison instead of
		-- going for the Map. It'd like to explore hitting that path first in
		-- forward-only mode and only go for the Map once we notice that we need
		-- lots of look ahead. This doesn't handle reversal as well as two ended
		-- search but that's unusual. Besides, for the two ended optimization to
		-- work on Iterables, we'd need to copy the whole set.

		-- In this first iteration, we'll just live with hitting the bad case
		-- (adding everything to a Map) in for every insert/move.

		-- If you change this code, also update reconcileChildrenIterator() which
		-- uses the same algorithm.

		if __DEV__ then
			-- First, validate keys.
			local knownKeys = nil
			for i, child in newChildren do
				knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber)
			end
		end

		local resultingFirstChild: Fiber | nil = nil
		local previousNewFiber: Fiber | nil = nil

		local oldFiber: Fiber | nil = currentFirstChild
		local lastPlacedIndex = 1
		local newIdx = 1
		local nextOldFiber: Fiber | nil = nil
		-- performance: don't re-evaluate length of newChildren on each iteration through the loop
		local newChildrenCount = #newChildren
		-- deviation: use while loop in place of modified for loop
		while oldFiber ~= nil and newIdx <= newChildrenCount do
			if oldFiber.index > newIdx then
				nextOldFiber = oldFiber
				oldFiber = nil
			else
				nextOldFiber = oldFiber.sibling
			end
			--[[
				ROBLOX DEVIATION: We pass newIdx to createChild to ensure that children are
				assigned a key, assuming the child is not an array itself. We only need to
				pass newIdx if the child is actually a React element. If the child is a
				string or number, a key is never assigned, so we do not pass newIdx as a key.
			]]
			local newFiber
			-- performance: avoid repeated indexing of newChildren to newIdx
			local newChildNewIdx = newChildren[newIdx]
			if newChildNewIdx ~= nil and type(newChildNewIdx) == "table" and newChildNewIdx["$$typeof"] ~= nil then
				newFiber = updateSlot(returnFiber, oldFiber, newChildNewIdx, lanes, newIdx)
			else
				newFiber = updateSlot(returnFiber, oldFiber, newChildNewIdx, lanes)
			end
			if newFiber == nil then
				-- TODO: This breaks on empty slots like nil children. That's
				-- unfortunate because it triggers the slow path all the time. We need
				-- a better way to communicate whether this was a miss or nil,
				-- boolean, undefined, etc.
				if oldFiber == nil then
					oldFiber = nextOldFiber
				end
				break
			end
			if shouldTrackSideEffects then
				-- FIXME Luau: needs type states to understand the continue above
				if oldFiber and (newFiber :: Fiber).alternate == nil then
					-- We matched the slot, but we didn't reuse the existing fiber, so we
					-- need to delete the existing child.
					-- FIXME Luau: needs type states to understand the break above
					deleteChild(returnFiber, oldFiber :: Fiber)
				end
			end
			lastPlacedIndex = placeChild(newFiber :: Fiber, lastPlacedIndex, newIdx)
			if previousNewFiber == nil then
				-- TODO: Move out of the loop. This only happens for the first run.
				resultingFirstChild = newFiber
			else
				-- TODO: Defer siblings if we're not at the right index for this slot.
				-- I.e. if we had nil values before, then we want to defer this
				-- for each nil value. However, we also don't want to call updateSlot
				-- with the previous one.
				(previousNewFiber :: Fiber).sibling = newFiber
			end
			previousNewFiber = newFiber
			oldFiber = nextOldFiber
			-- deviation: increment manually since we're not using a modified for loop
			newIdx += 1
		end

		if newIdx > newChildrenCount then
			-- We've reached the end of the new children. We can delete the rest.
			deleteRemainingChildren(returnFiber, oldFiber)
			return resultingFirstChild
		end

		if oldFiber == nil then
			-- If we don't have any more existing children we can choose a fast path
			-- since the rest will all be insertions.
			-- deviation: use while loop in place of modified for loop
			while newIdx <= newChildrenCount do
				--[[
					ROBLOX DEVIATION: We pass newIdx to createChild to ensure that children are
					assigned a key, assuming the child is not an array itself. We only need to
					pass newIdx if the child is actually a React element. If the child is a
					string or number, a key is never assigned, so we do not pass newIdx as a key.
				]]
				local newFiber
				-- performance: avoid repeated indexing of newChildren to newIdx
				local newChildNewIdx = newChildren[newIdx]
				if newChildNewIdx ~= nil and type(newChildNewIdx) == "table" and newChildNewIdx["$$typeof"] ~= nil then
					newFiber = createChild(returnFiber, newChildNewIdx, lanes, newIdx)
				else
					newFiber = createChild(returnFiber, newChildNewIdx, lanes)
				end
				if newFiber == nil then
					-- deviation: increment manually since we're not using a modified for loop
					newIdx += 1
					continue
				end
				-- FIXME Luau: needs type state to understand the continue above
				lastPlacedIndex = placeChild(newFiber :: Fiber, lastPlacedIndex, newIdx)
				if previousNewFiber == nil then
					-- TODO: Move out of the loop. This only happens for the first run.
					resultingFirstChild = newFiber
				else
					(previousNewFiber :: Fiber).sibling = newFiber
				end
				previousNewFiber = newFiber
				-- deviation: increment manually since we're not using a modified for loop
				newIdx += 1
			end
			return resultingFirstChild
		end

		-- Add all children to a key map for quick lookups.
		-- FIXME Luau: need type state to understand the if/return above
		local existingChildren = mapRemainingChildren(returnFiber, oldFiber :: Fiber)

		-- Keep scanning and use the map to restore deleted items as moves.
		-- deviation: use while loop in place of modified for loop
		while newIdx <= newChildrenCount do
			local newFiber = updateFromMap(
				existingChildren,
				returnFiber,
				newIdx,
				newChildren[newIdx],
				lanes,
				-- deviation: pass newIdx to be used as the key of the element
				newIdx
			)
			if newFiber ~= nil then
				if shouldTrackSideEffects then
					if newFiber.alternate ~= nil then
						-- The new fiber is a work in progress, but if there exists a
						-- current, that means that we reused the fiber. We need to delete
						-- it from the child list so that we don't add it to the deletion
						-- list.
						existingChildren[if newFiber.key == nil then newIdx else newFiber.key] = nil
					end
				end
				lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx)
				if previousNewFiber == nil then
					resultingFirstChild = newFiber
				else
					(previousNewFiber :: Fiber).sibling = newFiber
				end
				previousNewFiber = newFiber
			end
			-- deviation: increment manually since we're not using a modified for loop
			newIdx += 1
		end

		if shouldTrackSideEffects then
			-- Any existing children that weren't consumed above were deleted. We need
			-- to add them to the deletion list.
			for _, child in existingChildren do
				deleteChild(returnFiber, child)
			end
		end

		return resultingFirstChild
	end

	-- TODO: LUAFDN-254
	local function reconcileChildrenIterator(
		returnFiber: Fiber,
		currentFirstChild: Fiber | nil,
		-- TODO: figure out our Iterable<> interface
		--   newChildrenIterable: Iterable<*>,
		newChildrenIterable: any,
		lanes: Lanes,
		-- performance? pass in iteratorFn to avoid two calls to getIteratorFn
		iteratorFn: (...any) -> any
	): Fiber | nil
		-- This is the same implementation as reconcileChildrenArray(),
		-- but using the iterator instead.

		-- local iteratorFn = getIteratorFn(newChildrenIterable)
		-- performance? eliminate 'nice to have' strcmp in hot path
		-- invariant(
		-- 	typeof(iteratorFn) == "function",
		-- 	"An object is not an iterable. This error is likely caused by a bug in "
		-- 		.. "React. Please file an issue."
		-- )

		if __DEV__ then
			-- We don't support rendering Generators because it's a mutation.
			-- See https://github.com/facebook/react/issues/12995
			-- deviation: Lua doesn't have built-in generators
			-- if
			--   typeof(Symbol) == 'function' and
			--   -- $FlowFixMe Flow doesn't know about toStringTag
			--   newChildrenIterable[Symbol.toStringTag] == 'Generator'
			-- then
			--   if not didWarnAboutGenerators then
			--     console.error(
			--       'Using Generators as children is unsupported and will likely yield ' ..
			--         'unexpected results because enumerating a generator mutates it. ' ..
			--         'You may convert it to an array with `Array.from()` or the ' ..
			--         '`[...spread]` operator before rendering. Keep in mind ' ..
			--         'you might need to polyfill these features for older browsers.'
			--     )
			--   end
			--   didWarnAboutGenerators = true
			-- end

			-- Warn about using Maps as children
			if newChildrenIterable.entries == iteratorFn then
				if not didWarnAboutMaps then
					console.error(
						"Using Maps as children is not supported. " .. "Use an array of keyed ReactElements instead."
					)
				end
				didWarnAboutMaps = true
			end

			-- First, validate keys.
			-- We'll get a different iterator later for the main pass.
			local newChildren = iteratorFn(newChildrenIterable)
			if newChildren then
				local knownKeys = nil
				local step = newChildren.next()
				while not step.done do
					step = newChildren.next()
					local child = step.value
					knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber)
				end
			end
		end

		local newChildren = iteratorFn(newChildrenIterable)
		-- performance? eliminate 'nice to have' cmp in hot path
		-- invariant(newChildren ~= nil, "An iterable object provided no iterator.")

		local resultingFirstChild: Fiber | nil = nil
		local previousNewFiber: Fiber = nil

		local oldFiber = currentFirstChild
		local lastPlacedIndex = 1
		local newIdx = 1
		local nextOldFiber: Fiber | nil = nil

		local step = newChildren.next()
		while oldFiber ~= nil and not step.done do
			if oldFiber.index > newIdx then
				nextOldFiber = oldFiber
				oldFiber = nil
			else
				nextOldFiber = oldFiber.sibling
			end
			local newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes, step.key)
			if newFiber == nil then
				-- TODO: This breaks on empty slots like nil children. That's
				-- unfortunate because it triggers the slow path all the time. We need
				-- a better way to communicate whether this was a miss or nil,
				-- boolean, undefined, etc.
				if oldFiber == nil then
					oldFiber = nextOldFiber
				end
				break
			end
			if shouldTrackSideEffects then
				-- FIXME Luau: need type states to understand the break above
				if oldFiber and (newFiber :: Fiber).alternate == nil then
					-- We matched the slot, but we didn't reuse the existing fiber, so we
					-- need to delete the existing child.
					deleteChild(returnFiber, oldFiber)
				end
			end
			lastPlacedIndex = placeChild(newFiber :: Fiber, lastPlacedIndex, newIdx)
			if previousNewFiber == nil then
				-- TODO: Move out of the loop. This only happens for the first run.
				resultingFirstChild = newFiber
			else
				-- TODO: Defer siblings if we're not at the right index for this slot.
				-- I.e. if we had nil values before, then we want to defer this
				-- for each nil value. However, we also don't want to call updateSlot
				-- with the previous one.
				previousNewFiber.sibling = newFiber :: Fiber
			end
			previousNewFiber = newFiber :: Fiber
			oldFiber = nextOldFiber

			newIdx += 1
			step = newChildren.next()
		end

		if step.done then
			-- We've reached the end of the new children. We can delete the rest.
			deleteRemainingChildren(returnFiber, oldFiber)
			return resultingFirstChild
		end

		if oldFiber == nil then
			-- If we don't have any more existing children we can choose a fast path
			-- since the rest will all be insertions.
			while not step.done do
				local newFiber = createChild(returnFiber, step.value, lanes, step.key)
				if newFiber == nil then
					newIdx += 1
					step = newChildren.next()
					continue
				end
				-- FIXME Luau: need type states to understand the continue above
				lastPlacedIndex = placeChild(newFiber :: Fiber, lastPlacedIndex, newIdx)
				if previousNewFiber == nil then
					-- TODO: Move out of the loop. This only happens for the first run.
					resultingFirstChild = newFiber
				else
					previousNewFiber.sibling = newFiber
				end
				previousNewFiber = newFiber :: Fiber

				newIdx += 1
				step = newChildren.next()
			end
			return resultingFirstChild
		end

		-- Add all children to a key map for quick lookups.
		-- performance? defer initialization into the loop. extra cmp per loop iter, but avoid call if no loop iter
		local existingChildren

		-- Keep scanning and use the map to restore deleted items as moves.
		while not step.done do
			if not existingChildren then
				-- FIXME LUau: need type states to understand the guard+return above
				existingChildren = mapRemainingChildren(returnFiber, oldFiber :: Fiber)
			end
			local newFiber = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes, step.key)
			if newFiber ~= nil then
				if shouldTrackSideEffects then
					if newFiber.alternate ~= nil then
						-- The new fiber is a work in progress, but if there exists a
						-- current, that means that we reused the fiber. We need to delete
						-- it from the child list so that we don't add it to the deletion
						-- list.
						if newFiber.key == nil then
							existingChildren[newIdx] = nil
						else
							existingChildren[newFiber.key] = nil
						end
					end
				end
				lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx)
				if previousNewFiber == nil then
					resultingFirstChild = newFiber
				else
					previousNewFiber.sibling = newFiber
				end
				previousNewFiber = newFiber
			end

			newIdx += 1
			step = newChildren.next()
		end

		if shouldTrackSideEffects then
			-- Any existing children that weren't consumed above were deleted. We need
			-- to add them to the deletion list.
			for _, child in existingChildren do
				deleteChild(returnFiber, child)
			end
		end

		return resultingFirstChild
	end

	local function reconcileSingleTextNode(
		returnFiber: Fiber,
		currentFirstChild: Fiber | nil,
		textContent: string,
		lanes: Lanes
	): Fiber
		-- There's no need to check for keys on text nodes since we don't have a
		-- way to define them.
		-- FIXME: Luau narrowing issue
		if currentFirstChild ~= nil and (currentFirstChild :: Fiber).tag == HostText then
			-- We already have an existing node so let's just update it and delete
			-- the rest.
			deleteRemainingChildren(returnFiber, (currentFirstChild :: Fiber).sibling)
			local existing = useFiber(currentFirstChild :: Fiber, textContent)
			existing.return_ = returnFiber
			return existing
		end
		-- The existing first child is not a text node so we need to create one
		-- and delete the existing ones.
		deleteRemainingChildren(returnFiber, currentFirstChild)
		local created = createFiberFromText(textContent, returnFiber.mode, lanes)
		created.return_ = returnFiber
		return created
	end

	local function reconcileSingleElement(
		returnFiber: Fiber,
		currentFirstChild: Fiber | nil,
		element: ReactElement,
		lanes: Lanes
	): Fiber
		local key = element.key
		local child = currentFirstChild
		while child ~= nil do
			-- TODO: If key == nil and child.key == nil, then this only applies to
			-- the first item in the list.
			if child.key == key then
				if child.tag == Fragment then
					if element.type == REACT_FRAGMENT_TYPE then
						deleteRemainingChildren(returnFiber, child.sibling)
						local existing = useFiber(child, element.props.children)
						existing.return_ = returnFiber
						if __DEV__ then
							existing._debugSource = element._source
							existing._debugOwner = element._owner
						end
						return existing
					end
					-- performance: avoid always-false cmp in hot path
					-- elseif child.tag == Block then
					-- 	unimplemented("reconcileSingleElement: Block")
					-- if (enableBlocksAPI) {
					--   let type = element.type;
					--   if (type.$$typeof === REACT_LAZY_TYPE) {
					--     type = resolveLazyType(type);
					--   }
					--   if (type.$$typeof === REACT_BLOCK_TYPE) {
					--     // The new Block might not be initialized yet. We need to initialize
					--     // it in case initializing it turns out it would match.
					--     if (
					--       ((type: any): BlockComponent<any, any>)._render ===
					--       (child.type: BlockComponent<any, any>)._render
					--     ) {
					--       deleteRemainingChildren(returnFiber, child.sibling);
					--       const existing = useFiber(child, element.props);
					--       existing.type = type;
					--       existing.return = returnFiber;
					--       if (__DEV__) {
					--         existing._debugSource = element._source;
					--         existing._debugOwner = element._owner;
					--       }
					--       return existing;
					--     }
					--   }
					-- }
					-- // We intentionally fallthrough here if enableBlocksAPI is not on.
					-- // eslint-disable-next-lined no-fallthrough
				else
					if
						child.elementType == element.type
						-- performance: avoid always-false cmp, hot reloading isn't enabled in Roblox yet
						-- Keep this check inline so it only runs on the false path:
						-- or (
						-- 	__DEV__
						-- 	and isCompatibleFamilyForHotReloading(child, element)
						-- )
					then
						deleteRemainingChildren(returnFiber, child.sibling)
						local existing = useFiber(child, element.props)
						existing.ref = coerceRef(returnFiber, child, element)
						existing.return_ = returnFiber
						if __DEV__ then
							existing._debugSource = element._source
							existing._debugOwner = element._owner
						end
						return existing
					end
				end
				-- Didn't match.
				deleteRemainingChildren(returnFiber, child)
				break
			else
				deleteChild(returnFiber, child)
			end
			child = child.sibling
		end

		if element.type == REACT_FRAGMENT_TYPE then
			local created = createFiberFromFragment(
				element.props.children,
				returnFiber.mode,
				lanes,
				-- FIXME Luau: needs normalization: TypeError: Type '(number | string)?' could not be converted into 'string?'
				element.key :: string
			)
			created.return_ = returnFiber
			return created
		else
			local created = createFiberFromElement(element, returnFiber.mode, lanes)
			created.ref = coerceRef(returnFiber, currentFirstChild, element)
			created.return_ = returnFiber
			return created
		end
	end

	local function reconcileSinglePortal(
		returnFiber: Fiber,
		currentFirstChild: Fiber | nil,
		portal: ReactPortal,
		lanes: Lanes
	): Fiber
		local key = portal.key
		local child = currentFirstChild
		while child ~= nil do
			-- TODO: If key == nil and child.key == nil, then this only applies to
			-- the first item in the list.
			if child.key == key then
				if
					child.tag == HostPortal
					and child.stateNode.containerInfo == portal.containerInfo
					and child.stateNode.implementation == portal.implementation
				then
					deleteRemainingChildren(returnFiber, child.sibling)
					local existing = useFiber(child, portal.children or {})
					existing.return_ = returnFiber
					return existing
				else
					deleteRemainingChildren(returnFiber, child)
					break
				end
			else
				deleteChild(returnFiber, child)
			end
			child = child.sibling
		end

		local created = createFiberFromPortal(portal, returnFiber.mode, lanes)
		created.return_ = returnFiber
		return created
	end

	-- This API will tag the children with the side-effect of the reconciliation
	-- itself. They will be added to the side-effect list as we pass through the
	-- children and the parent.
	local function reconcileChildFibers(
		returnFiber: Fiber,
		currentFirstChild: Fiber | nil,
		newChild: any,
		lanes: Lanes
	): Fiber | nil
		-- This function is not recursive.
		-- If the top level item is an array, we treat it as a set of children,
		-- not as a fragment. Nested arrays on the other hand will be treated as
		-- fragment nodes. Recursion happens at the normal flow.

		-- performance: avoid repeated calls to typeof since Luau doesn't cache
		local typeOfNewChild = type(newChild)

		-- Handle top level unkeyed fragments as if they were arrays.
		-- This leads to an ambiguity between <>{[...]}</> and <>...</>.
		-- We treat the ambiguous cases above the same.
		local isUnkeyedTopLevelFragment = newChild ~= nil
			and typeOfNewChild == "table"
			and newChild.type == REACT_FRAGMENT_TYPE
			and newChild.key == nil
		if isUnkeyedTopLevelFragment then
			newChild = newChild.props.children
			typeOfNewChild = type(newChild)
		end
		local newChildIsArray = isArray(newChild)

		-- Handle object types
		-- deviation: upstream checks for `object`, but we need to manually exclude array
		local isObject = newChild ~= nil and typeOfNewChild == "table" and not newChildIsArray

		if isObject then
			-- performance: avoid repeated indexing of $$typeof
			local newChildTypeof = newChild["$$typeof"]
			if newChildTypeof == REACT_ELEMENT_TYPE then
				return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes))
			elseif newChildTypeof == REACT_PORTAL_TYPE then
				return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes))
			elseif newChildTypeof == REACT_LAZY_TYPE then
				if enableLazyElements then
					local payload = newChild._payload
					local init = newChild._init
					-- TODO: This function is supposed to be non-recursive.
					return reconcileChildFibers(returnFiber, currentFirstChild, init(payload), lanes)
				end
			end
		-- performance: make these next blocks `elseif`, as they're mutually exclusive to `isObject` above
		elseif newChildIsArray then
			return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes)
		elseif typeOfNewChild == "string" or typeOfNewChild == "number" then
			return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, tostring(newChild), lanes))
		end

		-- performance? only call getIteratorFn once, pass in the value
		local newChildIteratorFn = getIteratorFn(newChild)
		if newChildIteratorFn then
			return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes, newChildIteratorFn)
		end

		-- performance? eliminate a cmp in hot path for something unimplemented anyway
		-- if isObject then
		-- 	unimplemented("throwOnInvalidObjectType")
		-- 	-- throwOnInvalidObjectType(returnFiber, newChild)
		-- end

		if __DEV__ then
			if typeOfNewChild == "function" then
				warnOnFunctionType(returnFiber)
			end
		end
		if newChild == nil and not isUnkeyedTopLevelFragment then
			-- deviation: need a flag here to simulate switch/case fallthrough + break
			local shouldFallThrough = false
			-- If the new child is undefined, and the return fiber is a composite
			-- component, throw an error. If Fiber return types are disabled,
			-- we already threw above.
			-- deviation: With coercion of no returns to `nil`, it
			-- if returnFiber.tag == ClassComponent then
			--   if __DEV__ then
			-- isn't necessary to special case this scenario
			-- local instance = returnFiber.stateNode
			-- if instance.render._isMockFunction then
			--   -- We allow auto-mocks to proceed as if they're returning nil.
			--   shouldFallThrough = true
			-- end
			--   end
			-- end
			-- Intentionally fall through to the next case, which handles both
			-- functions and classes
			-- eslint-disable-next-lined no-fallthrough
			if
				shouldFallThrough
				and (
					returnFiber.tag == ClassComponent
					or returnFiber.tag == FunctionComponent
					or returnFiber.tag == ForwardRef
					or returnFiber.tag == SimpleMemoComponent
				)
			then
				invariant(
					false,
					"%s(...): Nothing was returned from render. This usually means a "
						.. "return statement is missing. Or, to render nothing, "
						.. "return nil.",
					getComponentName(returnFiber.type) or "Component"
				)
			end
		end

		-- Remaining cases are all treated as empty.
		return deleteRemainingChildren(returnFiber, currentFirstChild)
	end

	return reconcileChildFibers
end

exports.reconcileChildFibers = ChildReconciler(true)
exports.mountChildFibers = ChildReconciler(false)

exports.cloneChildFibers = function(current: Fiber | nil, workInProgress: Fiber)
	-- deviation: This message isn't tested upstream, remove for hot path optimization
	-- invariant(
	-- 	current == nil or workInProgress.child == (current :: Fiber).child,
	-- 	"Resuming work not yet implemented."
	-- )

	if workInProgress.child == nil then
		return
	end

	local currentChild = workInProgress.child :: Fiber
	local newChild = createWorkInProgress(currentChild, currentChild.pendingProps)
	workInProgress.child = newChild

	newChild.return_ = workInProgress
	while currentChild.sibling ~= nil do
		currentChild = currentChild.sibling
		newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps)
		-- FIXME Luau: luau doesn't track/narrow the direct assignment on the line above
		newChild = newChild.sibling :: Fiber
		newChild.return_ = workInProgress
	end
	newChild.sibling = nil
end

-- Reset a workInProgress child set to prepare it for a second pass.
exports.resetChildFibers = function(workInProgress: Fiber, lanes: Lanes): ()
	local child = workInProgress.child
	while child ~= nil do
		resetWorkInProgress(child, lanes)
		child = child.sibling
	end
end

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="339">
              <Properties>
                <string name="Name">ReactCurrentFiber</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/b0cb137bcbd3a11d8eff3c2229cd6b8379d29785/packages/react-reconciler/src/ReactCurrentFiber.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]
local __DEV__ = _G.__DEV__ :: boolean
local Packages = script.Parent.Parent

local ReactInternalTypes = require(script.Parent.ReactInternalTypes)
type Fiber = ReactInternalTypes.Fiber

local ReactSharedInternals = require(Packages.Shared).ReactSharedInternals
local ReactFiberComponentStack = require(script.Parent.ReactFiberComponentStack)
local getStackByFiberInDevAndProd = ReactFiberComponentStack.getStackByFiberInDevAndProd
local getComponentName = require(Packages.Shared).getComponentName

local ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame

-- deviation: Pre-declare type of exports, including values we'll initialize
type Exports = {
	current: Fiber | nil,
	isRendering: boolean,
	-- remaining functions declare their own types
	[string]: any,
}

local exports: Exports = {
	current = nil,
	isRendering = false,
}

exports.getCurrentFiberOwnerNameInDevOrNull = function(): string?
	if __DEV__ then
		if exports.current == nil then
			return nil
		end
		-- FIXME Luau: Luau doesn't understand guard above
		local owner = (exports.current :: Fiber)._debugOwner
		if owner then
			return getComponentName(owner.type)
		end
	end
	return nil
end

local function getCurrentFiberStackInDev(): string
	if __DEV__ then
		if exports.current == nil then
			return ""
		end
		-- Safe because if current fiber exists, we are reconciling,
		-- and it is guaranteed to be the work-in-progress version.
		-- FIXME Luau: Luau doesn't understand guard above
		return getStackByFiberInDevAndProd(exports.current :: Fiber)
	end
	return ""
end

exports.resetCurrentFiber = function(): ()
	if __DEV__ then
		-- FIXME Luau: Expected type table, got 'ReactDebugCurrentFrame | { setExtraStackFrame: () -> () }' instead
		(ReactDebugCurrentFrame :: any).getCurrentStack = nil
		exports.current = nil
		exports.isRendering = false
	end
end

exports.setCurrentFiber = function(fiber: Fiber): ()
	if __DEV__ then
		-- FIXME Luau: Expected type table, got 'ReactDebugCurrentFrame | { setExtraStackFrame: () -> () }' instead
		(ReactDebugCurrentFrame :: any).getCurrentStack = getCurrentFiberStackInDev
		exports.current = fiber
		exports.isRendering = false
	end
end

exports.setIsRendering = function(rendering: boolean): ()
	if __DEV__ then
		exports.isRendering = rendering
	end
end

exports.getIsRendering = function(): boolean
	if __DEV__ then
		return exports.isRendering
	end
	return false
end

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="340">
              <Properties>
                <string name="Name">ReactFiber.new</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/56e9feead0f91075ba0a4f725c9e4e343bca1c67/packages/react-reconciler/src/ReactFiber.new.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]

local __DEV__ = _G.__DEV__
local Packages = script.Parent.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)
local Object = LuauPolyfill.Object
local Array = LuauPolyfill.Array
local inspect = LuauPolyfill.util.inspect

-- NOTE: use patched console from shared
local console = require(Packages.Shared).console

local ReactTypes = require(Packages.Shared)
-- deviation: ReactElement is defined at the top level of Shared along
-- with the rest of the ReactTypes
type ReactElement = ReactTypes.ReactElement<any, any>
type ReactFragment = ReactTypes.ReactFragment
type ReactPortal = ReactTypes.ReactPortal
type ReactFundamentalComponent<T, U> = ReactTypes.ReactFundamentalComponent<T, U>
type ReactScope = ReactTypes.ReactScope
local ReactInternalTypes = require(script.Parent.ReactInternalTypes)
export type Fiber = ReactInternalTypes.Fiber

-- deviation: Allow number keys for sparse arrays
type RoactStableKey = ReactInternalTypes.RoactStableKey
local ReactRootTags = require(script.Parent.ReactRootTags)
type RootTag = ReactRootTags.RootTag
local ReactWorkTags = require(script.Parent.ReactWorkTags)
type WorkTag = ReactWorkTags.WorkTag
local ReactTypeOfMode = require(script.Parent.ReactTypeOfMode)
type TypeOfMode = ReactTypeOfMode.TypeOfMode
local ReactFiberLane = require(script.Parent.ReactFiberLane)
type Lanes = ReactFiberLane.Lanes
local ReactFiberHostConfig = require(script.Parent.ReactFiberHostConfig)
type SuspenseInstance = ReactFiberHostConfig.SuspenseInstance
local ReactFiberOffscreenComponent = require(script.Parent.ReactFiberOffscreenComponent)
type OffscreenProps = ReactFiberOffscreenComponent.OffscreenProps

local invariant = require(Packages.Shared).invariant
local ReactFeatureFlags = require(Packages.Shared).ReactFeatureFlags
local enableProfilerTimer = ReactFeatureFlags.enableProfilerTimer
-- local enableFundamentalAPI = ReactFeatureFlags.enableFundamentalAPI
-- local enableScopeAPI = ReactFeatureFlags.enableScopeAPI
local ReactFiberFlags = require(script.Parent.ReactFiberFlags)
local NoFlags = ReactFiberFlags.NoFlags
local Placement = ReactFiberFlags.Placement
local StaticMask = ReactFiberFlags.StaticMask
local ConcurrentRoot = ReactRootTags.ConcurrentRoot
local BlockingRoot = ReactRootTags.BlockingRoot
local IndeterminateComponent = ReactWorkTags.IndeterminateComponent
local ClassComponent = ReactWorkTags.ClassComponent
local HostRoot = ReactWorkTags.HostRoot
local HostComponent = ReactWorkTags.HostComponent
local HostText = ReactWorkTags.HostText
local HostPortal = ReactWorkTags.HostPortal
local ForwardRef = ReactWorkTags.ForwardRef
local Fragment = ReactWorkTags.Fragment
local Mode = ReactWorkTags.Mode
local ContextProvider = ReactWorkTags.ContextProvider
local ContextConsumer = ReactWorkTags.ContextConsumer
local Profiler = ReactWorkTags.Profiler
local SuspenseComponent = ReactWorkTags.SuspenseComponent
local SuspenseListComponent = ReactWorkTags.SuspenseListComponent
local DehydratedFragment = ReactWorkTags.DehydratedFragment
local FunctionComponent = ReactWorkTags.FunctionComponent
local MemoComponent = ReactWorkTags.MemoComponent
local SimpleMemoComponent = ReactWorkTags.SimpleMemoComponent
local LazyComponent = ReactWorkTags.LazyComponent
local FundamentalComponent = ReactWorkTags.FundamentalComponent
local ScopeComponent = ReactWorkTags.ScopeComponent
local OffscreenComponent = ReactWorkTags.OffscreenComponent
local LegacyHiddenComponent = ReactWorkTags.LegacyHiddenComponent
local getComponentName = require(Packages.Shared).getComponentName

local ReactFiberDevToolsHook = require(script.Parent["ReactFiberDevToolsHook.new"])
local isDevToolsPresent = ReactFiberDevToolsHook.isDevToolsPresent
local ReactFiberHotReloading = require(script.Parent["ReactFiberHotReloading.new"])
local resolveClassForHotReloading = ReactFiberHotReloading.resolveClassForHotReloading
local resolveFunctionForHotReloading = ReactFiberHotReloading.resolveFunctionForHotReloading
local resolveForwardRefForHotReloading = ReactFiberHotReloading.resolveForwardRefForHotReloading
local NoLanes = ReactFiberLane.NoLanes
local NoMode = ReactTypeOfMode.NoMode
local ConcurrentMode = ReactTypeOfMode.ConcurrentMode
local DebugTracingMode = ReactTypeOfMode.DebugTracingMode
local ProfileMode = ReactTypeOfMode.ProfileMode
local StrictMode = ReactTypeOfMode.StrictMode
local BlockingMode = ReactTypeOfMode.BlockingMode
local ReactSymbols = require(Packages.Shared).ReactSymbols
local REACT_FORWARD_REF_TYPE = ReactSymbols.REACT_FORWARD_REF_TYPE
local REACT_FRAGMENT_TYPE = ReactSymbols.REACT_FRAGMENT_TYPE
local REACT_ELEMENT_TYPE = ReactSymbols.REACT_ELEMENT_TYPE
local REACT_DEBUG_TRACING_MODE_TYPE = ReactSymbols.REACT_DEBUG_TRACING_MODE_TYPE
local REACT_STRICT_MODE_TYPE = ReactSymbols.REACT_STRICT_MODE_TYPE
local REACT_PROFILER_TYPE = ReactSymbols.REACT_PROFILER_TYPE
local REACT_PROVIDER_TYPE = ReactSymbols.REACT_PROVIDER_TYPE
local REACT_CONTEXT_TYPE = ReactSymbols.REACT_CONTEXT_TYPE
local REACT_SUSPENSE_TYPE = ReactSymbols.REACT_SUSPENSE_TYPE
local REACT_SUSPENSE_LIST_TYPE = ReactSymbols.REACT_SUSPENSE_LIST_TYPE
local REACT_MEMO_TYPE = ReactSymbols.REACT_MEMO_TYPE
local REACT_LAZY_TYPE = ReactSymbols.REACT_LAZY_TYPE
-- local REACT_FUNDAMENTAL_TYPE = ReactSymbols.REACT_FUNDAMENTAL_TYPE
-- local REACT_SCOPE_TYPE = ReactSymbols.REACT_SCOPE_TYPE
local REACT_OFFSCREEN_TYPE = ReactSymbols.REACT_OFFSCREEN_TYPE
local REACT_LEGACY_HIDDEN_TYPE = ReactSymbols.REACT_LEGACY_HIDDEN_TYPE

-- deviation: We probably don't have to worry about this scenario, since we use
-- simple tables as maps

-- local hasBadMapPolyfill

-- if __DEV__ then
-- 	hasBadMapPolyfill = false
-- 	try {
-- 		local nonExtensibleObject = Object.preventExtensions({})
-- 		--[[ eslint-disable no-new ]]
-- 		new Map([[nonExtensibleObject, nil]])
-- 		new Set([nonExtensibleObject])
-- 		--[[ eslint-enable no-new ]]
-- 	} catch (e)
-- 		-- TODO: Consider warning about bad polyfills
-- 		hasBadMapPolyfill = true
-- 	end
-- end

local createFiberFromScope, createFiberFromProfiler, createFiberFromFragment, createFiberFromFundamental, createFiberFromSuspense, createFiberFromOffscreen, createFiberFromLegacyHidden, createFiberFromSuspenseList

local debugCounter = 1

-- deviation START: inline this into its only caller to save hot path performance
-- function FiberNode(
-- 	tag: WorkTag,
-- 	pendingProps: any,
-- 	key: RoactStableKey?,
-- 	mode: TypeOfMode
-- ): Fiber
-- 	return {} :: any
-- end
-- deviation END

-- This is a constructor function, rather than a POJO constructor, still
-- please ensure we do the following:
-- 1) Nobody should add any instance methods on this. Instance methods can be
--    more difficult to predict when they get optimized and they are almost
--    never inlined properly in static compilers.
-- 2) Nobody should rely on `instanceof Fiber` for type testing. We should
--    always know when it is a fiber.
-- 3) We might want to experiment with using numeric keys since they are easier
--    to optimize in a non-JIT environment.
-- 4) We can easily go from a constructor to a createFiber object literal if that
--    is faster.
-- 5) It should be easy to port this to a C struct and keep a C implementation
--    compatible.
-- deviation START: add elementType, type, and lanes arguments so the table is created in a one-shot to avoid rehashing
local function createFiber(
	tag: WorkTag,
	pendingProps: any,
	key: RoactStableKey?,
	mode: TypeOfMode,
	elementType: any?,
	type_: any?,
	stateNode: any?,
	lanes: Lanes?
): Fiber
	-- $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
	-- deviation START: inline FiberNode(), do the table as a one-shot and avoid initializing nil fields for hot-path performance
	local node: Fiber = {
		-- Instance
		tag = tag,
		key = key,
		elementType = elementType,
		type = type_,
		stateNode = stateNode,

		-- Fiber
		-- node.return_ = nil
		-- node.child = nil
		-- node.sibling = nil
		index = 1,

		-- node.ref = nil

		pendingProps = pendingProps,
		-- memoizedProps = nil
		-- updateQueue = nil
		-- memoizedState = nil
		-- dependencies = nil

		mode = mode,

		-- Effects
		flags = NoFlags,
		subtreeFlags = NoFlags,
		-- deletions = nil

		lanes = if lanes then lanes else NoLanes,
		childLanes = NoLanes,

		-- alternate = nil
	} :: any

	if enableProfilerTimer then
		-- deviation: Unlikely that we have this same performance problem
		--[[
			-- NOTE: The following is done to avoid a v8 performance cliff.
			--
			-- Initializing the fields below to smis and later updating them with
			-- double values will cause Fibers to end up having separate shapes.
			-- This behavior/bug has something to do with Object.preventExtension().
			-- Fortunately this only impacts DEV builds.
			-- Unfortunately it makes React unusably slow for some applications.
			-- To work around this, initialize the fields below with doubles.
			--
			-- Learn more about this here:
			-- https://github.com/facebook/react/issues/14365
			-- https://bugs.chromium.org/p/v8/issues/detail?id=8538
			node.actualDuration = Number.NaN
			node.actualStartTime = Number.NaN
			node.selfBaseDuration = Number.NaN
			node.treeBaseDuration = Number.NaN

			-- It's okay to replace the initial doubles with smis after initialization.
			-- This won't trigger the performance cliff mentioned above,
			-- and it simplifies other profiler code (including DevTools).
		]]
		node.actualDuration = 0
		node.actualStartTime = -1
		node.selfBaseDuration = 0
		node.treeBaseDuration = 0
	end

	if __DEV__ then
		-- This isn't directly used but is handy for debugging internals:
		node._debugID = debugCounter
		debugCounter += 1
		node._debugSource = nil
		node._debugOwner = nil
		node._debugNeedsRemount = false
		node._debugHookTypes = nil
		-- deviation: We can just make sure this is always valid
		-- if not hasBadMapPolyfill and typeof(Object.preventExtensions) == "function"

		-- deviation: FIXME - we can't actually distinguish between 'nil' and
		-- absent, so if we do this here, we won't be able to initialize fields
		-- that start out as 'nil'
		-- Object.preventExtensions(node)

		-- end
	end
	return node
	-- deviation END
end

-- deviation START: we inline all uses of this function for performance in hot path
function _shouldConstruct(Component)
	-- deviation: With Lua metatables, members of the "prototype" can be
	-- accessed directly. so we don't need to check for a prototype separately
	return type(Component) ~= "function" and not not Component.isReactComponent
end
-- deviation END

local function isSimpleFunctionComponent(type_: any)
	-- deviation START: inline shouldConstruct logic for hot path performance
	return type(type_) == "function"
	-- deviation: function components don't support this anyway
	-- type.defaultProps == undefined
	-- deviation END: inline shouldConstruct logic for hot path performance
end

local function resolveLazyComponentTag(Component: any): WorkTag
	local typeofComponent = typeof(Component)
	if typeofComponent == "function" then
		return FunctionComponent
	end

	if typeofComponent == "table" then
		if Component.isReactComponent then
			return ClassComponent
		end
		local __typeof = Component["$$typeof"]
		if __typeof == REACT_FORWARD_REF_TYPE then
			return ForwardRef
		end
		if __typeof == REACT_MEMO_TYPE then
			return MemoComponent
		end
	end

	return IndeterminateComponent
end

-- This is used to create an alternate fiber to do work on.
local function createWorkInProgress(current: Fiber, pendingProps: any): Fiber
	-- FIXME Luau: Luau doesn't understand if nil then create pattern
	local workInProgress = current.alternate :: Fiber
	if workInProgress == nil then
		-- We use a double buffering pooling technique because we know that we'll
		-- only ever need at most two versions of a tree. We pool the "other" unused
		-- node that we're free to reuse. This is lazily created to avoid allocating
		-- extra objects for things that are never updated. It also allow us to
		-- reclaim the extra memory if needed.
		workInProgress = createFiber(
			current.tag,
			pendingProps,
			current.key,
			current.mode,
			current.elementType,
			current.type,
			current.stateNode
		)

		if __DEV__ then
			-- DEV-only fields
			workInProgress._debugID = current._debugID
			workInProgress._debugSource = current._debugSource
			workInProgress._debugOwner = current._debugOwner
			workInProgress._debugHookTypes = current._debugHookTypes
		end

		workInProgress.alternate = current
		current.alternate = workInProgress
	else
		workInProgress.pendingProps = pendingProps
		-- Needed because Blocks store data on type.
		workInProgress.type = current.type

		-- We already have an alternate.
		-- Reset the effect tag.
		workInProgress.flags = NoFlags

		-- The current effects are no longer valid
		workInProgress.subtreeFlags = NoFlags
		workInProgress.deletions = nil

		if enableProfilerTimer then
			-- We intentionally reset, rather than copy, actualDuration & actualStartTime.
			-- This prevents time from endlessly accumulating in new commits.
			-- This has the downside of resetting values for different priority renders,
			-- But works for yielding (the common case) and should support resuming.
			workInProgress.actualDuration = 0
			workInProgress.actualStartTime = -1
		end
	end

	-- Reset all effects except static ones.
	-- Static effects are not specific to a render.
	workInProgress.flags = bit32.band(current.flags, StaticMask)
	workInProgress.childLanes = current.childLanes
	workInProgress.lanes = current.lanes

	workInProgress.child = current.child
	workInProgress.memoizedProps = current.memoizedProps
	workInProgress.memoizedState = current.memoizedState
	workInProgress.updateQueue = current.updateQueue

	-- Clone the dependencies object. This is mutated during the render phase, so
	-- it cannot be shared with the current fiber.
	local currentDependencies = current.dependencies
	if currentDependencies == nil then
		workInProgress.dependencies = nil
	else
		workInProgress.dependencies = {
			lanes = currentDependencies.lanes,
			firstContext = currentDependencies.firstContext,
		}
	end

	-- These will be overridden during the parent's reconciliation
	workInProgress.sibling = current.sibling
	workInProgress.index = current.index
	workInProgress.ref = current.ref

	if enableProfilerTimer then
		workInProgress.selfBaseDuration = current.selfBaseDuration
		workInProgress.treeBaseDuration = current.treeBaseDuration
	end

	if __DEV__ then
		workInProgress._debugNeedsRemount = current._debugNeedsRemount
		if
			workInProgress.tag == IndeterminateComponent
			or workInProgress.tag == FunctionComponent
			or workInProgress.tag == SimpleMemoComponent
		then
			workInProgress.type = resolveFunctionForHotReloading(current.type)
		elseif workInProgress.tag == ClassComponent then
			workInProgress.type = resolveClassForHotReloading(current.type)
		elseif workInProgress.tag == ForwardRef then
			workInProgress.type = resolveForwardRefForHotReloading(current.type)
		end
	end

	return workInProgress
end

-- Used to reuse a Fiber for a second pass.
local function resetWorkInProgress(workInProgress: Fiber, renderLanes: Lanes)
	-- This resets the Fiber to what createFiber or createWorkInProgress would
	-- have set the values to before during the first pass. Ideally this wouldn't
	-- be necessary but unfortunately many code paths reads from the workInProgress
	-- when they should be reading from current and writing to workInProgress.

	-- We assume pendingProps, index, key, ref, return are still untouched to
	-- avoid doing another reconciliation.

	-- Reset the effect tag but keep any Placement tags, since that's something
	-- that child fiber is setting, not the reconciliation.
	workInProgress.flags = bit32.band(workInProgress.flags, bit32.bor(StaticMask, Placement))

	-- The effects are no longer valid

	local current = workInProgress.alternate
	if current == nil then
		-- Reset to createFiber's initial values.
		workInProgress.childLanes = NoLanes
		workInProgress.lanes = renderLanes

		workInProgress.child = nil
		workInProgress.subtreeFlags = NoFlags
		workInProgress.memoizedProps = nil
		workInProgress.memoizedState = nil
		workInProgress.updateQueue = nil

		workInProgress.dependencies = nil

		workInProgress.stateNode = nil

		if enableProfilerTimer then
			-- NOTE: We don't reset the actualTime counts. It's useful to accumulate
			-- actual time across multiple render passes.
			workInProgress.selfBaseDuration = 0
			workInProgress.treeBaseDuration = 0
		end
	else
		-- Reset to the cloned values that createWorkInProgress would've.
		workInProgress.childLanes = current.childLanes
		workInProgress.lanes = current.lanes

		workInProgress.child = current.child
		workInProgress.subtreeFlags = current.subtreeFlags
		workInProgress.deletions = nil
		workInProgress.memoizedProps = current.memoizedProps
		workInProgress.memoizedState = current.memoizedState
		workInProgress.updateQueue = current.updateQueue
		-- Needed because Blocks store data on type.
		workInProgress.type = current.type

		-- Clone the dependencies object. This is mutated during the render phase, so
		-- it cannot be shared with the current fiber.
		local currentDependencies = current.dependencies
		if currentDependencies == nil then
			workInProgress.dependencies = nil
		else
			workInProgress.dependencies = {
				lanes = currentDependencies.lanes,
				firstContext = currentDependencies.firstContext,
			}
		end

		if enableProfilerTimer then
			-- NOTE: We don't reset the actualTime counts. It's useful to accumulate
			-- actual time across multiple render passes.
			workInProgress.selfBaseDuration = current.selfBaseDuration
			workInProgress.treeBaseDuration = current.treeBaseDuration
		end
	end

	return workInProgress
end

local function createHostRootFiber(tag: RootTag): Fiber
	local mode
	if tag == ConcurrentRoot then
		mode = bit32.bor(ConcurrentMode, BlockingMode, StrictMode)
	elseif tag == BlockingRoot then
		mode = bit32.bor(BlockingMode, StrictMode)
	else
		mode = NoMode
	end

	-- deviation: We use a function for isDevtoolsPresent to handle the hook being changed at runtime
	if enableProfilerTimer and isDevToolsPresent() then
		-- Always collect profile timings when DevTools are present.
		-- This enables DevTools to start capturing timing at any point–
		-- Without some nodes in the tree having empty base times.
		mode = bit32.bor(mode, ProfileMode)
	end

	return createFiber(HostRoot, nil, nil, mode)
end

local function createFiberFromTypeAndProps(
	type_: any, -- React$ElementType
	key: string?,
	pendingProps: any,
	owner: nil | Fiber,
	mode: TypeOfMode,
	lanes: Lanes
): Fiber
	local fiberTag = IndeterminateComponent
	-- The resolved type is set if we know what the final type will be. I.e. it's not lazy.
	-- deviation: FIXME: Account for deviated class v. function component type logic
	local resolvedType = type_
	local typeOfType_ = type(type_)
	-- deviation: since our class components aren't functions, we have to look
	-- for them more explicitly (inlines logic from `shouldConstruct`)
	if typeOfType_ == "function" then
		if __DEV__ then
			resolvedType = resolveFunctionForHotReloading(resolvedType)
		end
	elseif typeOfType_ == "table" and not not type_.isReactComponent then
		fiberTag = ClassComponent
		if __DEV__ then
			resolvedType = resolveClassForHotReloading(resolvedType)
		end
	elseif typeOfType_ == "string" then
		fiberTag = HostComponent
	else
		if type_ == REACT_FRAGMENT_TYPE then
			return createFiberFromFragment(pendingProps.children, mode, lanes, key)
		elseif type_ == REACT_DEBUG_TRACING_MODE_TYPE then
			fiberTag = Mode
			mode = bit32.bor(mode, DebugTracingMode)
		elseif type_ == REACT_STRICT_MODE_TYPE then
			fiberTag = Mode
			mode = bit32.bor(mode, StrictMode)
		elseif type_ == REACT_PROFILER_TYPE then
			return createFiberFromProfiler(pendingProps, mode, lanes, key)
		elseif type_ == REACT_SUSPENSE_TYPE then
			return createFiberFromSuspense(pendingProps, mode, lanes, key)
			-- elseif type_ == REACT_SUSPENSE_LIST_TYPE then
			-- 	return createFiberFromSuspenseList(pendingProps, mode, lanes, key)
		elseif type_ == REACT_OFFSCREEN_TYPE then
			return createFiberFromOffscreen(pendingProps, mode, lanes, key)
		elseif type_ == REACT_LEGACY_HIDDEN_TYPE then
			return createFiberFromLegacyHidden(pendingProps, mode, lanes, key)
			-- elseif type_ == REACT_SCOPE_TYPE then
			-- 	if enableScopeAPI then
			-- 		return createFiberFromScope(type_, pendingProps, mode, lanes, key)
			-- 	end
		else
			local shouldBreak = false
			local type_typeof
			if typeOfType_ == "table" then
				type_typeof = type_["$$typeof"]
				if type_typeof == REACT_PROVIDER_TYPE then
					fiberTag = ContextProvider
					shouldBreak = true
				elseif type_typeof == REACT_CONTEXT_TYPE then
					-- This is a consumer
					fiberTag = ContextConsumer
					shouldBreak = true
				elseif type_typeof == REACT_FORWARD_REF_TYPE then
					fiberTag = ForwardRef
					if __DEV__ then
						resolvedType = resolveForwardRefForHotReloading(resolvedType)
					end
					shouldBreak = true
				elseif type_typeof == REACT_MEMO_TYPE then
					fiberTag = MemoComponent
					shouldBreak = true
				elseif type_typeof == REACT_LAZY_TYPE then
					fiberTag = LazyComponent
					resolvedType = nil
					shouldBreak = true
					-- elseif type_typeof == REACT_FUNDAMENTAL_TYPE then
					-- 	if enableFundamentalAPI then
					-- 		return createFiberFromFundamental(
					-- 			type_,
					-- 			pendingProps,
					-- 			mode,
					-- 			lanes,
					-- 			key
					-- 		)
					-- 	end
				end
			end
			if not shouldBreak then
				local info = ""
				if __DEV__ then
					if type_ == nil or (typeOfType_ == "table" and #Object.keys(type_) == 0) then
						info ..= " You likely forgot to export your component from the file " .. "it's defined in, or you might have mixed up default and " .. "named imports."
					elseif type_ ~= nil and typeOfType_ == "table" then
						-- deviation: print the table/string in readable form to give a clue, if no other info was gathered
						info ..= "\n" .. inspect(type_)
					end
					local ownerName
					if owner then
						ownerName = getComponentName(owner.type)
					end
					if ownerName ~= nil and ownerName ~= "" then
						info ..= "\n\nCheck the render method of `" .. ownerName .. "`."
					elseif owner then
						-- deviation: print the raw table in readable
						-- form to give a clue, if no other info was gathered
						info ..= "\n" .. inspect(owner)
					end
				end

				-- deviation: make output logic consistent across ReactFiber, ElementValidator, Memo, Context, and Lazy
				local typeString
				if type_ == nil then
					typeString = "nil"
				elseif Array.isArray(type_) then
					typeString = "array"
				elseif typeOfType_ == "table" and type_typeof == REACT_ELEMENT_TYPE then
					typeString = string.format("<%s />", getComponentName(type_.type) or "Unknown")
					info = " Did you accidentally export a JSX literal or Element instead of a component?"
				else
					typeString = typeOfType_
				end

				invariant(
					false,
					"Element type is invalid: expected a string (for built-in "
						.. "components) or a class/function (for composite components) "
						.. "but got: %s.%s",
					typeString,
					info
				)
			end
		end
	end

	-- deviation START: we pass in all needed values so the table creation+field assignment is a one-shot
	local fiber = createFiber(fiberTag, pendingProps, key, mode, type_, resolvedType, nil, lanes)

	-- fiber.elementType = type_
	-- fiber.type = resolvedType
	-- fiber.lanes = lanes
	-- deviation END

	if __DEV__ then
		fiber._debugOwner = owner
	end

	return fiber
end

local function createFiberFromElement(element: ReactElement, mode: TypeOfMode, lanes: Lanes): Fiber
	local owner = nil
	if __DEV__ then
		owner = element._owner
	end
	local type = element.type
	local key = element.key
	local pendingProps = element.props
	local fiber = createFiberFromTypeAndProps(
		type,
		-- FIXME: according to upstream types, key can only be string?, but RoactStableKey deviation also says number
		key :: string,
		pendingProps,
		owner,
		mode,
		lanes
	)
	if __DEV__ then
		fiber._debugSource = element._source
		fiber._debugOwner = element._owner
	end
	return fiber
end

function createFiberFromFragment(elements: ReactFragment, mode: TypeOfMode, lanes: Lanes, key: string?): Fiber
	-- deviation START: we pass in all needed values so the table creation+field assignment is a one-shot
	local fiber = createFiber(Fragment, elements, key, mode, nil, nil, nil, lanes)
	-- fiber.lanes = lanes
	-- deviation END
	return fiber
end

function createFiberFromFundamental(
	fundamentalComponent: ReactFundamentalComponent<any, any>,
	pendingProps: any,
	mode: TypeOfMode,
	lanes: Lanes,
	key: string?
): Fiber
	-- deviation START: we pass in all needed values so the table creation+field assignment is a one-shot
	local fiber = createFiber(
		FundamentalComponent,
		pendingProps,
		key,
		mode,
		fundamentalComponent,
		fundamentalComponent,
		nil,
		lanes
	)
	-- fiber.elementType = fundamentalComponent
	-- fiber.type = fundamentalComponent
	-- fiber.lanes = lanes
	-- deviation END
	return fiber
end

function createFiberFromScope(scope: ReactScope, pendingProps: any, mode: TypeOfMode, lanes: Lanes, key: string?): Fiber
	-- deviation START: we pass in all needed values so the table creation+field assignment is a one-shot
	local fiber = createFiber(ScopeComponent, pendingProps, key, mode, scope, scope, nil, lanes)
	-- fiber.type = scope
	-- fiber.elementType = scope
	-- fiber.lanes = lanes
	-- deviation END
	return fiber
end

function createFiberFromProfiler(pendingProps: any, mode: TypeOfMode, lanes: Lanes, key: string?): Fiber
	if __DEV__ then
		if typeof(pendingProps.id) ~= "string" then
			console.error('Profiler must specify an "id" as a prop')
		end
	end

	-- deviation START: we pass in all needed values so the table creation+field assignment is a one-shot
	local fiber = createFiber(
		Profiler,
		pendingProps,
		key,
		bit32.bor(mode, ProfileMode),
		REACT_PROFILER_TYPE,
		REACT_PROFILER_TYPE,
		if enableProfilerTimer
			then {
				effectDuration = 0,
				passiveEffectDuration = 0,
			}
			else nil,
		lanes
	)
	-- TODO: The Profiler fiber shouldn't have a type. It has a tag.
	-- fiber.elementType = REACT_PROFILER_TYPE
	-- fiber.type = REACT_PROFILER_TYPE
	-- fiber.lanes = lanes
	-- deviation END

	-- if enableProfilerTimer then
	-- 	fiber.stateNode = {
	-- 		effectDuration = 0,
	-- 		passiveEffectDuration = 0,
	-- 	}
	-- end

	return fiber
end

function createFiberFromSuspense(pendingProps: any, mode: TypeOfMode, lanes: Lanes, key: string?): Fiber
	-- deviation START: we pass in all needed values so the table creation+field assignment is a one-shot
	local fiber =
		createFiber(SuspenseComponent, pendingProps, key, mode, REACT_SUSPENSE_TYPE, REACT_SUSPENSE_TYPE, nil, lanes)

	-- TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
	-- This needs to be fixed in getComponentName so that it relies on the tag
	-- instead.
	-- fiber.type = REACT_SUSPENSE_TYPE
	-- fiber.elementType = REACT_SUSPENSE_TYPE

	-- fiber.lanes = lanes
	-- deviation END
	return fiber
end

function createFiberFromSuspenseList(pendingProps: any, mode: TypeOfMode, lanes: Lanes, key: string?): Fiber
	-- deviation START: we pass in all needed values so the table creation+field assignment is a one-shot
	local fiber = createFiber(
		SuspenseListComponent,
		pendingProps,
		key,
		mode,
		REACT_SUSPENSE_LIST_TYPE,
		if __DEV__ then REACT_SUSPENSE_LIST_TYPE else nil,
		nil,
		lanes
	)
	-- if __DEV__ then
	-- 	-- TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.
	-- 	-- This needs to be fixed in getComponentName so that it relies on the tag
	-- 	-- instead.
	-- 	fiber.type = REACT_SUSPENSE_LIST_TYPE
	-- end
	-- fiber.elementType = REACT_SUSPENSE_LIST_TYPE
	-- fiber.lanes = lanes
	-- deviation END
	return fiber
end

function createFiberFromOffscreen(pendingProps: OffscreenProps, mode: TypeOfMode, lanes: Lanes, key: string?): Fiber
	-- deviation START: we pass in all needed values so the table creation+field assignment is a one-shot
	local fiber = createFiber(
		OffscreenComponent,
		pendingProps,
		key,
		mode,
		REACT_OFFSCREEN_TYPE,
		if __DEV__ then REACT_OFFSCREEN_TYPE else nil,
		nil,
		lanes
	)
	-- TODO: The OffscreenComponent fiber shouldn't have a type. It has a tag.
	-- This needs to be fixed in getComponentName so that it relies on the tag
	-- instead.
	-- if __DEV__ then
	-- 	fiber.type = REACT_OFFSCREEN_TYPE
	-- end
	-- fiber.elementType = REACT_OFFSCREEN_TYPE
	-- fiber.lanes = lanes
	-- deviation END
	return fiber
end

function createFiberFromLegacyHidden(pendingProps: OffscreenProps, mode: TypeOfMode, lanes: Lanes, key: string?): Fiber
	-- deviation START: we pass in all needed values so the table creation+field assignment is a one-shot
	local fiber = createFiber(
		LegacyHiddenComponent,
		pendingProps,
		key,
		mode,
		REACT_LEGACY_HIDDEN_TYPE,
		if __DEV__ then REACT_LEGACY_HIDDEN_TYPE else nil,
		nil,
		lanes
	)
	-- TODO: The LegacyHidden fiber shouldn't have a type. It has a tag.
	-- This needs to be fixed in getComponentName so that it relies on the tag
	-- instead.
	-- if __DEV__ then
	-- 	fiber.type = REACT_LEGACY_HIDDEN_TYPE
	-- end
	-- fiber.elementType = REACT_LEGACY_HIDDEN_TYPE
	-- fiber.lanes = lanes
	-- deviation END
	return fiber
end

local function createFiberFromText(content: string, mode: TypeOfMode, lanes: Lanes): Fiber
	-- deviation START: we pass in all needed values so the table creation+field assignment is a one-shot
	local fiber = createFiber(HostText, content, nil, mode, nil, nil, nil, lanes)
	-- fiber.lanes = lanes
	-- deviation END
	return fiber
end

local function createFiberFromHostInstanceForDeletion(): Fiber
	-- deviation START: we pass in all needed values so the table creation+field assignment is a one-shot
	local fiber = createFiber(HostComponent, nil, nil, NoMode, "DELETED", "DELETED")
	-- TODO: These should not need a type.
	-- fiber.elementType = "DELETED"
	-- fiber.type = "DELETED"
	-- deviation END
	return fiber
end

local function createFiberFromDehydratedFragment(dehydratedNode: SuspenseInstance): Fiber
	-- deviation START: we pass in all needed values so the table creation+field assignment is a one-shot
	local fiber = createFiber(DehydratedFragment, nil, nil, NoMode, nil, nil, dehydratedNode)
	-- fiber.stateNode = dehydratedNode
	-- deviation END
	return fiber
end

local function createFiberFromPortal(portal: ReactPortal, mode: TypeOfMode, lanes: Lanes): Fiber
	local pendingProps = if portal.children ~= nil then portal.children else {}
	-- deviation START: we pass in all needed values so the table creation+field assignment is a one-shot
	local fiber = createFiber(HostPortal, pendingProps, portal.key, mode, nil, nil, {
		containerInfo = portal.containerInfo,
		pendingChildren = nil, -- Used by persistent updates
		implementation = portal.implementation,
	}, lanes)
	-- fiber.lanes = lanes
	-- fiber.stateNode = {
	-- 	containerInfo = portal.containerInfo,
	-- 	pendingChildren = nil, -- Used by persistent updates
	-- 	implementation = portal.implementation,
	-- }
	-- deviation END
	return fiber
end

-- Used for stashing WIP properties to replay failed work in DEV.
-- FIXME: `target: Fiber | nil` - Narrowing doesn't work even with nil check
local function assignFiberPropertiesInDEV(target: Fiber, source: Fiber): Fiber
	if target == nil then
		-- This Fiber's initial properties will always be overwritten.
		-- We only use a Fiber to ensure the same hidden class so DEV isn't slow.
		target = createFiber(IndeterminateComponent, nil, nil, NoMode)
	end

	-- This is intentionally written as a list of all properties.
	-- We tried to use Object.assign() instead but this is called in
	-- the hottest path, and Object.assign() was too slow:
	-- https://github.com/facebook/react/issues/12502
	-- This code is DEV-only so size is not a concern.

	target.tag = source.tag
	target.key = source.key
	target.elementType = source.elementType
	target.type = source.type
	target.stateNode = source.stateNode
	target.return_ = source.return_
	target.child = source.child
	target.sibling = source.sibling
	target.index = source.index
	target.ref = source.ref
	target.pendingProps = source.pendingProps
	target.memoizedProps = source.memoizedProps
	target.updateQueue = source.updateQueue
	target.memoizedState = source.memoizedState
	target.dependencies = source.dependencies
	target.mode = source.mode
	target.flags = source.flags
	target.subtreeFlags = source.subtreeFlags
	target.deletions = source.deletions
	target.lanes = source.lanes
	target.childLanes = source.childLanes
	target.alternate = source.alternate
	if enableProfilerTimer then
		target.actualDuration = source.actualDuration
		target.actualStartTime = source.actualStartTime
		target.selfBaseDuration = source.selfBaseDuration
		target.treeBaseDuration = source.treeBaseDuration
	end
	target._debugID = source._debugID
	target._debugSource = source._debugSource
	target._debugOwner = source._debugOwner
	target._debugNeedsRemount = source._debugNeedsRemount
	target._debugHookTypes = source._debugHookTypes
	return target
end

-- deviation: more convenient to export entire interface at the end
return {
	isSimpleFunctionComponent = isSimpleFunctionComponent,
	resolveLazyComponentTag = resolveLazyComponentTag,
	createWorkInProgress = createWorkInProgress,
	resetWorkInProgress = resetWorkInProgress,
	createHostRootFiber = createHostRootFiber,
	createFiberFromTypeAndProps = createFiberFromTypeAndProps,
	createFiberFromElement = createFiberFromElement,
	createFiberFromFragment = createFiberFromFragment,
	createFiberFromFundamental = createFiberFromFundamental,
	createFiberFromSuspense = createFiberFromSuspense,
	createFiberFromSuspenseList = createFiberFromSuspenseList,
	createFiberFromOffscreen = createFiberFromOffscreen,
	createFiberFromLegacyHidden = createFiberFromLegacyHidden,
	createFiberFromText = createFiberFromText,
	createFiberFromHostInstanceForDeletion = createFiberFromHostInstanceForDeletion,
	createFiberFromDehydratedFragment = createFiberFromDehydratedFragment,
	createFiberFromPortal = createFiberFromPortal,
	assignFiberPropertiesInDEV = assignFiberPropertiesInDEV,
}
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="341">
              <Properties>
                <string name="Name">ReactFiberBeginWork.new</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/1faf9e3dd5d6492f3607d5c721055819e4106bc6/packages/react-reconciler/src/ReactFiberBeginWork.new.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]
-- TODO remove this when CLI-38793 lands
--!nolint LocalShadow
-- FIXME (roblox): remove this when our unimplemented
local function unimplemented(message: string)
	print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
	print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
	print("UNIMPLEMENTED ERROR: " .. tostring(message))
	error("FIXME (roblox): " .. message .. " is unimplemented", 2)
end

local __DEV__ = _G.__DEV__ :: boolean
local __DISABLE_ALL_WARNINGS_EXCEPT_PROP_VALIDATION__ = _G.__DISABLE_ALL_WARNINGS_EXCEPT_PROP_VALIDATION__ :: boolean
local __COMPAT_WARNINGS__ = _G.__COMPAT_WARNINGS__ :: boolean

local Packages = script.Parent.Parent
-- NOTE: use patched console from Shared
local Shared = require(Packages.Shared)
local console = Shared.console
local LuauPolyfill = require(Packages.LuauPolyfill)
local Array = LuauPolyfill.Array
local Object = LuauPolyfill.Object
local inspect = LuauPolyfill.util.inspect

local ReactTypes = require(Packages.Shared)
type ReactProviderType<T> = ReactTypes.ReactProviderType<T>
type ReactContext<T> = ReactTypes.ReactContext<T>
type React_Component<Props, State> = ReactTypes.React_Component<Props, State>

local React = require(Packages.React)
type LazyComponentType<T, P> = React.LazyComponent<T, P>

local ReactInternalTypes = require(script.Parent.ReactInternalTypes)
type Fiber = ReactInternalTypes.Fiber
type FiberRoot = ReactInternalTypes.FiberRoot
local ReactFiberLane = require(script.Parent.ReactFiberLane)
type Lanes = ReactFiberLane.Lanes
-- type Lane = ReactFiberLane.Lane;
-- local type {MutableSource} = require(Packages.Shared.ReactTypes)

local ReactFiberSuspenseComponent = require(script.Parent["ReactFiberSuspenseComponent.new"])
type SuspenseState = ReactFiberSuspenseComponent.SuspenseState
type SuspenseListRenderState = ReactFiberSuspenseComponent.SuspenseListRenderState
type SuspenseListTailMode = ReactFiberSuspenseComponent.SuspenseListTailMode
local ReactFiberSuspenseContext = require(script.Parent["ReactFiberSuspenseContext.new"])
type SuspenseContext = ReactFiberSuspenseContext.SuspenseContext

local ReactFiberOffscreenComponent = require(script.Parent.ReactFiberOffscreenComponent)
type OffscreenProps = ReactFiberOffscreenComponent.OffscreenProps
type OffscreenState = ReactFiberOffscreenComponent.OffscreenState

local checkPropTypes = require(Packages.Shared).checkPropTypes

local ReactWorkTags = require(script.Parent.ReactWorkTags)
-- local IndeterminateComponent = ReactWorkTags.IndeterminateComponent
local FunctionComponent = ReactWorkTags.FunctionComponent
local ClassComponent = ReactWorkTags.ClassComponent
local HostRoot = ReactWorkTags.HostRoot
local HostComponent = ReactWorkTags.HostComponent
local HostText = ReactWorkTags.HostText
local HostPortal = ReactWorkTags.HostPortal
local ForwardRef = ReactWorkTags.ForwardRef
local Fragment = ReactWorkTags.Fragment
local Mode = ReactWorkTags.Mode
local ContextProvider = ReactWorkTags.ContextProvider
local ContextConsumer = ReactWorkTags.ContextConsumer
local Profiler = ReactWorkTags.Profiler
local SuspenseComponent = ReactWorkTags.SuspenseComponent
local SuspenseListComponent = ReactWorkTags.SuspenseListComponent
local MemoComponent = ReactWorkTags.MemoComponent
local SimpleMemoComponent = ReactWorkTags.SimpleMemoComponent
local LazyComponent = ReactWorkTags.LazyComponent
local IncompleteClassComponent = ReactWorkTags.IncompleteClassComponent
-- local FundamentalComponent = ReactWorkTags.FundamentalComponent
-- local ScopeComponent = ReactWorkTags.ScopeComponent
local OffscreenComponent = ReactWorkTags.OffscreenComponent
local LegacyHiddenComponent = ReactWorkTags.LegacyHiddenComponent
local ReactFiberFlags = require(script.Parent.ReactFiberFlags)
local NoFlags = ReactFiberFlags.NoFlags
local StaticMask = ReactFiberFlags.StaticMask
local PerformedWork = ReactFiberFlags.PerformedWork
local Placement = ReactFiberFlags.Placement
local Hydrating = ReactFiberFlags.Hydrating
local ContentReset = ReactFiberFlags.ContentReset
local DidCapture = ReactFiberFlags.DidCapture
-- local Update = ReactFiberFlags.Update
local Ref = ReactFiberFlags.Ref
local Deletion = ReactFiberFlags.Deletion
local ForceUpdateForLegacySuspense = ReactFiberFlags.ForceUpdateForLegacySuspense
local ReactSharedInternals = require(Packages.Shared).ReactSharedInternals
local ReactFeatureFlags = require(Packages.Shared).ReactFeatureFlags
local debugRenderPhaseSideEffectsForStrictMode = ReactFeatureFlags.debugRenderPhaseSideEffectsForStrictMode
local disableLegacyContext = ReactFeatureFlags.disableLegacyContext
local disableModulePatternComponents = ReactFeatureFlags.disableModulePatternComponents
local enableProfilerTimer = ReactFeatureFlags.enableProfilerTimer
local enableSchedulerTracing = ReactFeatureFlags.enableSchedulerTracing
local enableSuspenseServerRenderer = ReactFeatureFlags.enableSuspenseServerRenderer
-- local enableFundamentalAPI = ReactFeatureFlags.enableFundamentalAPI
local warnAboutDefaultPropsOnFunctionComponents = ReactFeatureFlags.warnAboutDefaultPropsOnFunctionComponents
-- local enableScopeAPI = ReactFeatureFlags.enableScopeAPI
local invariant = require(Packages.Shared).invariant
local describeError = require(Packages.Shared).describeError
local shallowEqual = require(Packages.Shared).shallowEqual
local getComponentName = require(Packages.Shared).getComponentName
local ReactSymbols = require(Packages.Shared).ReactSymbols
local REACT_LAZY_TYPE = ReactSymbols.REACT_LAZY_TYPE
local _getIteratorFn = ReactSymbols.getIteratorFn
local ReactStrictModeWarnings = require(script.Parent["ReactStrictModeWarnings.new"])
local ReactCurrentFiber = require(script.Parent.ReactCurrentFiber)
local getCurrentFiberOwnerNameInDevOrNull = ReactCurrentFiber.getCurrentFiberOwnerNameInDevOrNull
local setIsRendering = ReactCurrentFiber.setIsRendering
local ReactFiberHotReloadingModule = require(script.Parent["ReactFiberHotReloading.new"])
local resolveFunctionForHotReloading = ReactFiberHotReloadingModule.resolveFunctionForHotReloading
local resolveForwardRefForHotReloading = ReactFiberHotReloadingModule.resolveForwardRefForHotReloading
local resolveClassForHotReloading = ReactFiberHotReloadingModule.resolveClassForHotReloading

local ReactChildFiber = require(script.Parent["ReactChildFiber.new"]) :: any
local mountChildFibers = ReactChildFiber.mountChildFibers
local reconcileChildFibers = ReactChildFiber.reconcileChildFibers
local cloneChildFibers = ReactChildFiber.cloneChildFibers
local ReactUpdateQueue = require(script.Parent["ReactUpdateQueue.new"])
local processUpdateQueue = ReactUpdateQueue.processUpdateQueue
local cloneUpdateQueue = ReactUpdateQueue.cloneUpdateQueue
local initializeUpdateQueue = ReactUpdateQueue.initializeUpdateQueue
local ReactTypeOfMode = require(script.Parent.ReactTypeOfMode)
local ConcurrentMode = ReactTypeOfMode.ConcurrentMode
local NoMode = ReactTypeOfMode.NoMode
local ProfileMode = ReactTypeOfMode.ProfileMode
local StrictMode = ReactTypeOfMode.StrictMode
local BlockingMode = ReactTypeOfMode.BlockingMode
local ReactFiberHostConfig = require(script.Parent.ReactFiberHostConfig)
local shouldSetTextContent = ReactFiberHostConfig.shouldSetTextContent
local isSuspenseInstancePending = ReactFiberHostConfig.isSuspenseInstancePending
local isSuspenseInstanceFallback = ReactFiberHostConfig.isSuspenseInstanceFallback
local registerSuspenseInstanceRetry = ReactFiberHostConfig.registerSuspenseInstanceRetry
local supportsHydration = ReactFiberHostConfig.supportsHydration
type SuspenseInstance = ReactFiberHostConfig.SuspenseInstance

local ReactFiberHostContext = require(script.Parent["ReactFiberHostContext.new"])
local pushHostContext = ReactFiberHostContext.pushHostContext
local pushHostContainer = ReactFiberHostContext.pushHostContainer
local suspenseStackCursor = ReactFiberSuspenseContext.suspenseStackCursor
local hasSuspenseContext = ReactFiberSuspenseContext.hasSuspenseContext
local ForceSuspenseFallback = ReactFiberSuspenseContext.ForceSuspenseFallback
local addSubtreeSuspenseContext = ReactFiberSuspenseContext.addSubtreeSuspenseContext
local InvisibleParentSuspenseContext = ReactFiberSuspenseContext.InvisibleParentSuspenseContext
local pushSuspenseContext = ReactFiberSuspenseContext.pushSuspenseContext
-- local setShallowSuspenseContext = ReactFiberSuspenseContext.setShallowSuspenseContext
local setDefaultShallowSuspenseContext = ReactFiberSuspenseContext.setDefaultShallowSuspenseContext
-- local {findFirstSuspended} = require(script.Parent.ReactFiberSuspenseComponent.new)
-- local {
--   ,
local ReactFiberNewContext = require(script.Parent["ReactFiberNewContext.new"])
local propagateContextChange = ReactFiberNewContext.propagateContextChange
local readContext = ReactFiberNewContext.readContext
local calculateChangedBits = ReactFiberNewContext.calculateChangedBits
-- local scheduleWorkOnParentPath = ReactFiberNewContext.scheduleWorkOnParentPath
local prepareToReadContext = ReactFiberNewContext.prepareToReadContext
local pushProvider = ReactFiberNewContext.pushProvider

-- deviation: Lazy init all methods from ReactFiberHooks
local lazyRefs = {
	renderWithHooksRef = nil :: any,
	bailoutHooksRef = nil :: any,
	shouldSuspendRef = nil :: any,
}

local function shouldSuspend(fiber: Fiber): boolean
	if not lazyRefs.shouldSuspendRef then
		lazyRefs.shouldSuspendRef = require(script.Parent.ReactFiberReconciler).shouldSuspend
	end
	return lazyRefs.shouldSuspendRef(fiber)
end

-- deviation: collective lazy init methods from ReactFiberHooks
local function initReactFiberHooks()
	local ReactFiberHooks = require(script.Parent["ReactFiberHooks.new"])
	lazyRefs.renderWithHooksRef = ReactFiberHooks.renderWithHooks
	lazyRefs.bailoutHooksRef = ReactFiberHooks.bailoutHooks
end

-- deviation: Lazy init renderWithHooks from ReactFiberHooks
local function renderWithHooks(...)
	if not lazyRefs.renderWithHooksRef then
		initReactFiberHooks()
	end
	return lazyRefs.renderWithHooksRef(...)
end

-- deviation: Lazy init bailoutHooks from ReactFiberHooks
local function bailoutHooks(...)
	if not lazyRefs.bailoutHooksRef then
		initReactFiberHooks()
	end
	return lazyRefs.bailoutHooksRef(...)
end

local stopProfilerTimerIfRunning = require(script.Parent["ReactProfilerTimer.new"]).stopProfilerTimerIfRunning
local ReactFiberContext = require(script.Parent["ReactFiberContext.new"])
local getMaskedContext = ReactFiberContext.getMaskedContext
local getUnmaskedContext = ReactFiberContext.getUnmaskedContext
local hasLegacyContextChanged = ReactFiberContext.hasContextChanged
local pushLegacyContextProvider = ReactFiberContext.pushContextProvider
local isLegacyContextProvider = ReactFiberContext.isContextProvider
local pushTopLevelContextObject = ReactFiberContext.pushTopLevelContextObject
local invalidateContextProvider = ReactFiberContext.invalidateContextProvider

local ReactFiberHydrationContext = require(script.Parent["ReactFiberHydrationContext.new"])
local resetHydrationState = ReactFiberHydrationContext.resetHydrationState
local enterHydrationState = ReactFiberHydrationContext.enterHydrationState
local reenterHydrationStateFromDehydratedSuspenseInstance =
	ReactFiberHydrationContext.reenterHydrationStateFromDehydratedSuspenseInstance
local tryToClaimNextHydratableInstance = ReactFiberHydrationContext.tryToClaimNextHydratableInstance
local warnIfHydrating = ReactFiberHydrationContext.warnIfHydrating
local ReactFiberClassComponent = require(script.Parent["ReactFiberClassComponent.new"]) :: any
local adoptClassInstance = ReactFiberClassComponent.adoptClassInstance
local applyDerivedStateFromProps = ReactFiberClassComponent.applyDerivedStateFromProps
local constructClassInstance = ReactFiberClassComponent.constructClassInstance
local mountClassInstance = ReactFiberClassComponent.mountClassInstance
local resumeMountClassInstance = ReactFiberClassComponent.resumeMountClassInstance
local updateClassInstance = ReactFiberClassComponent.updateClassInstance

local resolveDefaultProps = require(script.Parent["ReactFiberLazyComponent.new"]).resolveDefaultProps
local ReactFiber = require(script.Parent["ReactFiber.new"])
local resolveLazyComponentTag = ReactFiber.resolveLazyComponentTag
local createFiberFromFragment = ReactFiber.createFiberFromFragment
local createFiberFromOffscreen = ReactFiber.createFiberFromOffscreen

local createFiberFromTypeAndProps = ReactFiber.createFiberFromTypeAndProps
local isSimpleFunctionComponent = ReactFiber.isSimpleFunctionComponent
local createWorkInProgress = ReactFiber.createWorkInProgress
local ReactFiberWorkLoop = require(script.Parent["ReactFiberWorkLoop.new"]) :: any
local pushRenderLanes = ReactFiberWorkLoop.pushRenderLanes
local markSpawnedWork = ReactFiberWorkLoop.markSpawnedWork
local retryDehydratedSuspenseBoundary = ReactFiberWorkLoop.retryDehydratedSuspenseBoundary
local scheduleUpdateOnFiber = ReactFiberWorkLoop.scheduleUpdateOnFiber
local renderDidSuspendDelayIfPossible = ReactFiberWorkLoop.renderDidSuspendDelayIfPossible
local getWorkInProgressRoot = ReactFiberWorkLoop.getWorkInProgressRoot
local getExecutionContext = ReactFiberWorkLoop.getExecutionContext
local RetryAfterError = ReactFiberWorkLoop.RetryAfterError
local NoContext = ReactFiberWorkLoop.NoContext

local Schedule_tracing_wrap
local setWorkInProgressVersion = require(script.Parent["ReactMutableSource.new"]).setWorkInProgressVersion
local markSkippedUpdateLanes = require(script.Parent.ReactFiberWorkInProgress).markSkippedUpdateLanes
local ConsolePatchingDev = require(Packages.Shared).ConsolePatchingDev
local disableLogs = ConsolePatchingDev.disableLogs
local reenableLogs = ConsolePatchingDev.reenableLogs

local ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner

local exports: { [string]: any } = {}

-- deviation: Pre-declare functions
local bailoutOnAlreadyFinishedWork, updateFunctionComponent

local didReceiveUpdate: boolean = false

-- deviation: put didWarns in table to reduce number of local variables
local DidWarn = {
	didWarnAboutBadClass = {} :: { [string]: boolean },
	didWarnAboutModulePatternComponent = {} :: { [string]: boolean },
	didWarnAboutContextTypeOnFunctionComponent = {} :: { [string]: boolean },
	didWarnAboutGetDerivedStateOnFunctionComponent = {} :: { [string]: boolean },
	didWarnAboutFunctionRefs = {} :: { [string]: boolean },
	didWarnAboutDefaultPropsOnFunctionComponent = {} :: { [string]: boolean },
}
-- export local didWarnAboutReassigningProps
-- local didWarnAboutRevealOrder
-- local didWarnAboutTailOptions
local updateSimpleMemoComponent

if __DEV__ then
	DidWarn.didWarnAboutBadClass = {}
	DidWarn.didWarnAboutModulePatternComponent = {}
	DidWarn.didWarnAboutContextTypeOnFunctionComponent = {}
	DidWarn.didWarnAboutGetDerivedStateOnFunctionComponent = {}
	DidWarn.didWarnAboutFunctionRefs = {}
	exports.didWarnAboutReassigningProps = false
	--   didWarnAboutRevealOrder = {}
	--   didWarnAboutTailOptions = {}
	DidWarn.didWarnAboutDefaultPropsOnFunctionComponent = {}
end

local function reconcileChildren(current: Fiber | nil, workInProgress: Fiber, nextChildren: any, renderLanes: Lanes)
	if current == nil then
		-- If this is a fresh new component that hasn't been rendered yet, we
		-- won't update its child set by applying minimal side-effects. Instead,
		-- we will add them all to the child before it gets rendered. That means
		-- we can optimize this reconciliation pass by not tracking side-effects.
		workInProgress.child = mountChildFibers(workInProgress, nil, nextChildren, renderLanes)
	else
		-- If the current child is the same as the work in progress, it means that
		-- we haven't yet started any work on these children. Therefore, we use
		-- the clone algorithm to create a copy of all the current children.

		-- If we had any progressed work already, that is invalid at this point so
		-- let's throw it out.
		workInProgress.child = reconcileChildFibers(workInProgress, (current :: Fiber).child, nextChildren, renderLanes)
	end
end

local function forceUnmountCurrentAndReconcile(
	current: Fiber,
	workInProgress: Fiber,
	nextChildren: any,
	renderLanes: Lanes
)
	-- This function is fork of reconcileChildren. It's used in cases where we
	-- want to reconcile without matching against the existing set. This has the
	-- effect of all current children being unmounted; even if the type and key
	-- are the same, the old child is unmounted and a new child is created.
	--
	-- To do this, we're going to go through the reconcile algorithm twice. In
	-- the first pass, we schedule a deletion for all the current children by
	-- passing nil.
	workInProgress.child = reconcileChildFibers(workInProgress, current.child, nil, renderLanes)
	-- In the second pass, we mount the new children. The trick here is that we
	-- pass nil in place of where we usually pass the current child set. This has
	-- the effect of remounting all children regardless of whether their
	-- identities match.
	workInProgress.child = reconcileChildFibers(workInProgress, nil, nextChildren, renderLanes)
end

local function updateForwardRef(
	current: Fiber | nil,
	workInProgress: Fiber,
	Component: any,
	nextProps: any,
	renderLanes: Lanes
)
	-- TODO: current can be non-null here even if the component
	-- hasn't yet mounted. This happens after the first render suspends.
	-- We'll need to figure out if this is fine or can cause issues.

	if __DEV__ or __DISABLE_ALL_WARNINGS_EXCEPT_PROP_VALIDATION__ then
		if workInProgress.type ~= workInProgress.elementType then
			-- Lazy component props can't be validated in createElement
			-- because they're only guaranteed to be resolved here.
			-- deviation: adds support for legacy Roact's validateProps()
			local innerPropTypes = Component.propTypes
			local validateProps = Component.validateProps
			if innerPropTypes or validateProps then
				checkPropTypes(
					innerPropTypes,
					validateProps,
					nextProps, -- Resolved props
					"prop",
					getComponentName(Component)
				)
			end
		end
	end

	local render = Component.render
	local ref = workInProgress.ref

	-- The rest is a fork of updateFunctionComponent
	local nextChildren
	prepareToReadContext(workInProgress, renderLanes, exports.markWorkInProgressReceivedUpdate)
	if __DEV__ then
		ReactCurrentOwner.current = workInProgress
		setIsRendering(true)
		nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes)
		if debugRenderPhaseSideEffectsForStrictMode and bit32.band(workInProgress.mode, StrictMode) ~= 0 then
			disableLogs()
			local ok, result =
				xpcall(renderWithHooks, describeError, current, workInProgress, render, nextProps, ref, renderLanes)
			if ok then
				nextChildren = result
			end
			-- finally
			reenableLogs()

			if not ok then
				error(result)
			end
		end
		setIsRendering(false)
	else
		nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes)
	end

	if current ~= nil and not didReceiveUpdate then
		bailoutHooks(current, workInProgress, renderLanes)
		return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
	end

	-- React DevTools reads this flag.
	workInProgress.flags = bit32.bor(workInProgress.flags, PerformedWork)
	reconcileChildren(current, workInProgress, nextChildren, renderLanes)
	return workInProgress.child
end

local function updateMemoComponent(
	current: Fiber | nil,
	workInProgress: Fiber,
	Component: any,
	nextProps: any,
	updateLanes: Lanes,
	renderLanes: Lanes
): nil | Fiber
	if current == nil then
		local type_ = Component.type
		if
			isSimpleFunctionComponent(type_)
			and Component.compare == nil
			-- SimpleMemoComponent codepath doesn't resolve outer props either.
			and Component.defaultProps == nil
		then
			local resolvedType = type_
			if __DEV__ then
				resolvedType = resolveFunctionForHotReloading(type_)
			end
			-- If this is a plain function component without default props,
			-- and with only the default shallow comparison, we upgrade it
			-- to a SimpleMemoComponent to allow fast path updates.
			workInProgress.tag = SimpleMemoComponent
			workInProgress.type = resolvedType
			if __DEV__ then
				validateFunctionComponentInDev(workInProgress, type_)
			end
			return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, updateLanes, renderLanes)
		end
		if __DEV__ or __DISABLE_ALL_WARNINGS_EXCEPT_PROP_VALIDATION__ then
			-- deviation: adds support for legacy Roact's validateProps()
			local innerPropTypes
			local validateProps
			-- deviation: avoid accessing propTypes on a function, Lua doesn't support fields on functions
			if type(type_) == "table" then
				innerPropTypes = type_.propTypes
				validateProps = type_.validateProps
			end

			if innerPropTypes or validateProps then
				-- Inner memo component props aren't currently validated in createElement.
				-- We could move it there, but we'd still need this for lazy code path.
				checkPropTypes(
					innerPropTypes,
					validateProps,
					nextProps, -- Resolved props
					"prop",
					getComponentName(type_)
				)
			end
		end
		local child = createFiberFromTypeAndProps(
			Component.type,
			nil,
			nextProps,
			workInProgress,
			workInProgress.mode,
			renderLanes
		)
		child.ref = workInProgress.ref
		child.return_ = workInProgress
		workInProgress.child = child
		return child
	end
	-- TODO Deviation: remove redefinition + typecast when this lands: CLI-38793
	-- NOTE: the if clause above returns early if current is nil
	local current = current :: Fiber
	if __DEV__ or __DISABLE_ALL_WARNINGS_EXCEPT_PROP_VALIDATION__ then
		local type_ = Component.type
		-- deviation: adds support for legacy Roact's validateProps()
		local innerPropTypes
		local validateProps
		-- deviation: only check for propTypes on class components, Lua doesn't support fields on functions
		if type(type_) == "table" then
			innerPropTypes = type_.propTypes
			validateProps = type_.validateProps
		end

		if innerPropTypes or validateProps then
			-- Inner memo component props aren't currently validated in createElement.
			-- We could move it there, but we'd still need this for lazy code path.
			checkPropTypes(
				innerPropTypes,
				validateProps,
				nextProps, -- Resolved props
				"prop",
				getComponentName(type_)
			)
		end
	end
	local currentChild = (current.child :: any) :: Fiber -- This is always exactly one child
	if not ReactFiberLane.includesSomeLane(updateLanes, renderLanes) then
		-- This will be the props with resolved defaultProps,
		-- unlike current.memoizedProps which will be the unresolved ones.
		local prevProps = currentChild.memoizedProps
		-- Default to shallow comparison
		local compare = Component.compare
		if compare == nil then
			compare = shallowEqual
		end
		if compare(prevProps, nextProps) and current.ref == workInProgress.ref then
			return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
		end
	end
	-- React DevTools reads this flag.
	workInProgress.flags = bit32.bor(workInProgress.flags, PerformedWork)
	local newChild = createWorkInProgress(currentChild, nextProps)
	newChild.ref = workInProgress.ref
	newChild.return_ = workInProgress
	workInProgress.child = newChild
	return newChild
end

function updateSimpleMemoComponent(
	current: Fiber | nil,
	workInProgress: Fiber,
	Component: any,
	nextProps: any,
	updateLanes: Lanes,
	renderLanes: Lanes
): nil | Fiber
	-- TODO: current can be non-null here even if the component
	-- hasn't yet mounted. This happens when the inner render suspends.
	-- We'll need to figure out if this is fine or can cause issues.

	if __DEV__ or __DISABLE_ALL_WARNINGS_EXCEPT_PROP_VALIDATION__ then
		if workInProgress.type ~= workInProgress.elementType then
			-- Lazy component props can't be validated in createElement
			-- because they're only guaranteed to be resolved here.
			local outerMemoType = workInProgress.elementType
			if outerMemoType["$$typeof"] == REACT_LAZY_TYPE then
				-- We warn when you define propTypes on lazy()
				-- so let's just skip over it to find memo() outer wrapper.
				-- Inner props for memo are validated later.
				local lazyComponent: LazyComponentType<any, any> = outerMemoType
				local payload = lazyComponent._payload
				local init = lazyComponent._init
				local ok, result = xpcall(init, describeError, payload)
				if ok then
					outerMemoType = result
				else
					outerMemoType = nil
				end
				-- Inner propTypes will be validated in the function component path.
				-- deviation: adds support for legacy Roact's validateProps()
				local outerPropTypes
				local validateProps
				-- deviation: avoid accessing propTypes on a function, Lua doesn't support fields on functions
				if outerMemoType ~= nil and type(outerMemoType) == "table" then
					outerPropTypes = (outerMemoType :: any).propTypes
					-- deviation: support legacy Roact's equivalent of propTypes
					validateProps = (outerMemoType :: any).validateProps
				end

				if outerPropTypes or validateProps then
					checkPropTypes(
						outerPropTypes,
						validateProps,
						nextProps, -- Resolved (SimpleMemoComponent has no defaultProps)
						"prop",
						getComponentName(outerMemoType)
					)
				end
			end
		end
	end
	if current ~= nil then
		-- TODO Deviation: remove redefinition + typecast when this lands: CLI-38793
		-- This unfortunately breaks if current gets reassigned somewhere in this if clause
		local current = current :: Fiber
		local prevProps = current.memoizedProps
		-- deviation: replacing ternary operator
		local preventBailout = true
		if __DEV__ then
			preventBailout = workInProgress.type == current.type
		end
		if
			shallowEqual(prevProps, nextProps)
			and current.ref == workInProgress.ref
			-- Prevent bailout if the implementation changed due to hot reload.
			and preventBailout
		then
			didReceiveUpdate = false
			if not ReactFiberLane.includesSomeLane(renderLanes, updateLanes) then
				-- The pending lanes were cleared at the beginning of beginWork. We're
				-- about to bail out, but there might be other lanes that weren't
				-- included in the current render. Usually, the priority level of the
				-- remaining updates is accumlated during the evaluation of the
				-- component (i.e. when processing the update queue). But since since
				-- we're bailing out early *without* evaluating the component, we need
				-- to account for it here, too. Reset to the value of the current fiber.
				-- NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
				-- because a MemoComponent fiber does not have hooks or an update queue
				-- rather, it wraps around an inner component, which may or may not
				-- contains hooks.
				-- TODO: Move the reset at in beginWork out of the common path so that
				-- this is no longer necessary.
				workInProgress.lanes = current.lanes
				return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
			elseif bit32.band(current.flags, ForceUpdateForLegacySuspense) ~= NoFlags then
				-- This is a special case that only exists for legacy mode.
				-- See https://github.com/facebook/react/pull/19216.
				didReceiveUpdate = true
			end
		end
	end
	return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes)
end

local function updateOffscreenComponent(current: Fiber?, workInProgress: Fiber, renderLanes: Lanes): Fiber | nil
	local nextProps: OffscreenProps = workInProgress.pendingProps
	local nextChildren = nextProps.children

	local prevState: OffscreenState?
	if current ~= nil then
		-- FIXME: remove :: recast once Luau understands if-statement nil checks
		prevState = (current :: Fiber).memoizedState
	end

	if nextProps.mode == "hidden" or nextProps.mode == "unstable-defer-without-hiding" then
		if bit32.band(workInProgress.mode, ConcurrentMode) == NoMode then
			-- In legacy sync mode, don't defer the subtree. Render it now.
			-- TODO: Figure out what we should do in Blocking mode.
			local nextState: OffscreenState = {
				baseLanes = ReactFiberLane.NoLanes,
			}
			workInProgress.memoizedState = nextState
			pushRenderLanes(workInProgress, renderLanes)
		-- TODO: recast ReactFiberLane.OffscreenLane to type Lane
		elseif not ReactFiberLane.includesSomeLane(renderLanes, ReactFiberLane.OffscreenLane) then
			local nextBaseLanes
			if prevState ~= nil then
				-- FIXME: remove :: recast once Luau understands if-statement nil check
				local prevBaseLanes = (prevState :: OffscreenState).baseLanes
				nextBaseLanes = ReactFiberLane.mergeLanes(prevBaseLanes, renderLanes)
			else
				nextBaseLanes = renderLanes
			end

			-- Schedule this fiber to re-render at offscreen priority. Then bailout.
			if enableSchedulerTracing then
				markSpawnedWork(ReactFiberLane.OffscreenLane)
			end

			-- deviation: unchain multiple assignment into two discrete assignments.
			workInProgress.childLanes = ReactFiberLane.laneToLanes(ReactFiberLane.OffscreenLane)
			workInProgress.lanes = workInProgress.childLanes

			local nextState: OffscreenState = {
				baseLanes = nextBaseLanes,
			}
			workInProgress.memoizedState = nextState
			-- We're about to bail out, but we need to push this to the stack anyway
			-- to avoid a push/pop misalignment.
			pushRenderLanes(workInProgress, nextBaseLanes)
			return nil
		else
			-- Rendering at offscreen, so we can clear the base lanes.
			local nextState: OffscreenState = {
				baseLanes = ReactFiberLane.NoLanes,
			}
			workInProgress.memoizedState = nextState
			-- Push the lanes that were skipped when we bailed out.
			local subtreeRenderLanes = renderLanes

			-- deviation: ternary converted to if statement
			if prevState ~= nil then
				-- FIXME: remove :: recast once Luau understands if-statement nil check
				subtreeRenderLanes = (prevState :: OffscreenState).baseLanes
			end

			pushRenderLanes(workInProgress, subtreeRenderLanes)
		end
	else
		local subtreeRenderLanes
		if prevState ~= nil then
			-- FIXME: remove :: recast once Luau understands if-statement nil check
			subtreeRenderLanes = ReactFiberLane.mergeLanes((prevState :: OffscreenState).baseLanes, renderLanes)
			-- Since we're not hidden anymore, reset the state
			workInProgress.memoizedState = nil
		else
			-- We weren't previously hidden, and we still aren't, so there's nothing
			-- special to do. Need to push to the stack regardless, though, to avoid
			-- a push/pop misalignment.
			subtreeRenderLanes = renderLanes
		end
		pushRenderLanes(workInProgress, subtreeRenderLanes)
	end

	reconcileChildren(current, workInProgress, nextChildren, renderLanes)
	return workInProgress.child
end

-- NOTE: These happen to have identical begin phases, for now. We shouldn't hold
-- ourselves to this constraint, though. If the behavior diverges, we should
-- fork the function.
local updateLegacyHiddenComponent = updateOffscreenComponent

function updateFragment(current: Fiber | nil, workInProgress: Fiber, renderLanes: Lanes)
	local nextChildren = workInProgress.pendingProps
	reconcileChildren(current, workInProgress, nextChildren, renderLanes)
	return workInProgress.child
end

function updateMode(current: Fiber | nil, workInProgress: Fiber, renderLanes: Lanes)
	local nextChildren = workInProgress.pendingProps.children
	reconcileChildren(current, workInProgress, nextChildren, renderLanes)
	return workInProgress.child
end

function updateProfiler(current: Fiber | nil, workInProgress: Fiber, renderLanes: Lanes)
	if enableProfilerTimer then
		-- Reset effect durations for the next eventual effect phase.
		-- These are reset during render to allow the DevTools commit hook a chance to read them,
		local stateNode = workInProgress.stateNode
		stateNode.effectDuration = 0
		stateNode.passiveEffectDuration = 0
	end
	local nextProps = workInProgress.pendingProps
	local nextChildren = nextProps.children
	reconcileChildren(current, workInProgress, nextChildren, renderLanes)
	return workInProgress.child
end

local function markRef(current: Fiber | nil, workInProgress: Fiber)
	local ref = workInProgress.ref
	if (current == nil and ref ~= nil) or (current ~= nil and (current :: Fiber).ref ~= ref) then
		-- Schedule a Ref effect
		workInProgress.flags = bit32.bor(workInProgress.flags, Ref)
	end
end

function updateFunctionComponent(current, workInProgress, Component, nextProps: any, renderLanes)
	if __DEV__ or __DISABLE_ALL_WARNINGS_EXCEPT_PROP_VALIDATION__ then
		-- deviation: function components can't have props in Lua
		if type(Component) ~= "function" and (workInProgress.type ~= workInProgress.elementType) then
			-- Lazy component props can't be validated in createElement
			-- because they're only guaranteed to be resolved here.
			-- deviation: adds support for legacy Roact's validateProps()
			local innerPropTypes
			local validateProps
			-- deviation: Roact won't support propTypes on functional components
			if type(Component) == "table" then
				innerPropTypes = (Component :: any).propTypes
				validateProps = (Component :: any).validateProps
			end

			if innerPropTypes or validateProps then
				checkPropTypes(
					innerPropTypes,
					validateProps,
					nextProps, -- Resolved props
					"prop",
					getComponentName(Component)
				)
			end
		end
	end

	local context
	if not disableLegacyContext then
		local unmaskedContext = getUnmaskedContext(workInProgress, Component, true)
		context = getMaskedContext(workInProgress, unmaskedContext)
	end

	local nextChildren
	prepareToReadContext(workInProgress, renderLanes, exports.markWorkInProgressReceivedUpdate)
	if __DEV__ then
		ReactCurrentOwner.current = workInProgress
		setIsRendering(true)
		nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes)
		if debugRenderPhaseSideEffectsForStrictMode and bit32.band(workInProgress.mode, StrictMode) ~= 0 then
			disableLogs()
			local ok, result = xpcall(
				renderWithHooks,
				describeError,
				current,
				workInProgress,
				Component,
				nextProps,
				context,
				renderLanes
			)
			-- finally
			reenableLogs()
			if ok then
				nextChildren = result
			else
				error(result)
			end
		end
		setIsRendering(false)
	else
		nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes)
	end

	if current ~= nil and not didReceiveUpdate then
		bailoutHooks(current, workInProgress, renderLanes)
		return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
	end

	-- React DevTools reads this flag.
	workInProgress.flags = bit32.bor(workInProgress.flags, PerformedWork)
	reconcileChildren(current, workInProgress, nextChildren, renderLanes)
	return workInProgress.child
end

-- function updateBlock<Props, Data>(
--   current: Fiber | nil,
--   workInProgress: Fiber,
--   block: BlockComponent<Props, Data>,
--   nextProps: any,
--   renderLanes: Lanes,
-- )
--   -- TODO: current can be non-null here even if the component
--   -- hasn't yet mounted. This happens after the first render suspends.
--   -- We'll need to figure out if this is fine or can cause issues.

--   local render = block._render
--   local data = block._data

--   -- The rest is a fork of updateFunctionComponent
--   local nextChildren
--   prepareToReadContext(workInProgress, renderLanes, exports.markWorkInProgressReceivedUpdate)
--   if  __DEV__ then
--     ReactCurrentOwner.current = workInProgress
--     setIsRendering(true)
--     nextChildren = renderWithHooks(
--       current,
--       workInProgress,
--       render,
--       nextProps,
--       data,
--       renderLanes,
--     )
--     if
--       debugRenderPhaseSideEffectsForStrictMode and
--       workInProgress.mode & StrictMode
--     )
--       disableLogs()
--       try {
--         nextChildren = renderWithHooks(
--           current,
--           workInProgress,
--           render,
--           nextProps,
--           data,
--           renderLanes,
--         )
--       } finally {
--         reenableLogs()
--       end
--     end
--     setIsRendering(false)
--   else
--     nextChildren = renderWithHooks(
--       current,
--       workInProgress,
--       render,
--       nextProps,
--       data,
--       renderLanes,
--     )
--   end

--   if current ~= nil and !didReceiveUpdate)
--     bailoutHooks(current, workInProgress, renderLanes)
--     return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
--   end

--   -- React DevTools reads this flag.
--   workInProgress.flags |= PerformedWork
--   reconcileChildren(current, workInProgress, nextChildren, renderLanes)
--   return workInProgress.child
-- end

-- FIXME: type refinement
-- local function updateClassComponent(
--   current: Fiber | nil,
--   ...
-- )
local function updateClassComponent(
	current: any,
	workInProgress: Fiber,
	Component: any,
	nextProps: any,
	renderLanes: Lanes
)
	if __DEV__ or __DISABLE_ALL_WARNINGS_EXCEPT_PROP_VALIDATION__ then
		if workInProgress.type ~= workInProgress.elementType then
			-- Lazy component props can't be validated in createElement
			-- because they're only guaranteed to be resolved here.
			-- deviation: adds support for legacy Roact's validateProps()
			local innerPropTypes = Component.propTypes
			local validateProps = Component.validateProps
			if innerPropTypes or validateProps then
				checkPropTypes(
					innerPropTypes,
					validateProps,
					nextProps, -- Resolved props
					"prop",
					getComponentName(Component)
				)
			end
		end
	end

	-- Push context providers early to prevent context stack mismatches.
	-- During mounting we don't know the child context yet as the instance doesn't exist.
	-- We will invalidate the child context in finishClassComponent() right after rendering.
	local hasContext
	if isLegacyContextProvider(Component) then
		hasContext = true
		pushLegacyContextProvider(workInProgress)
	else
		hasContext = false
	end
	-- deviation: pass in function to break cyclic require dependency
	prepareToReadContext(workInProgress, renderLanes, exports.markWorkInProgressReceivedUpdate)

	local instance = workInProgress.stateNode
	local shouldUpdate
	if instance == nil then
		if current ~= nil then
			-- A class component without an instance only mounts if it suspended
			-- inside a non-concurrent tree, in an inconsistent state. We want to
			-- treat it like a new mount, even though an empty version of it already
			-- committed. Disconnect the alternate pointers.
			current.alternate = nil
			workInProgress.alternate = nil
			-- Since this is conceptually a new fiber, schedule a Placement effect
			workInProgress.flags = bit32.bor(workInProgress.flags, Placement)
		end
		-- In the initial pass we might need to construct the instance.
		constructClassInstance(workInProgress, Component, nextProps)
		mountClassInstance(workInProgress, Component, nextProps, renderLanes)
		shouldUpdate = true
	elseif current == nil then
		-- In a resume, we'll already have an instance we can reuse.
		shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes)
	else
		shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes)
	end
	local nextUnitOfWork =
		finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes)
	if __DEV__ then
		local inst = workInProgress.stateNode
		if shouldUpdate and inst.props ~= nextProps then
			if not exports.didWarnAboutReassigningProps then
				console.error(
					"It looks like %s is reassigning its own `this.props` while rendering. "
						.. "This is not supported and can lead to confusing bugs.",
					getComponentName(workInProgress.type) or "a component"
				)
			end
			exports.didWarnAboutReassigningProps = true
		end
	end
	return nextUnitOfWork
end

function finishClassComponent(
	current: Fiber | nil,
	workInProgress: Fiber,
	Component: any,
	shouldUpdate: boolean,
	hasContext: boolean,
	renderLanes: Lanes
)
	-- Refs should update even if shouldComponentUpdate returns false
	markRef(current, workInProgress)

	local didCaptureError = bit32.band(workInProgress.flags, DidCapture) ~= NoFlags

	if not shouldUpdate and not didCaptureError then
		-- Context providers should defer to sCU for rendering
		if hasContext then
			invalidateContextProvider(workInProgress, Component, false)
		end

		return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
	end

	local instance = workInProgress.stateNode

	-- Rerender
	ReactCurrentOwner.current = workInProgress
	local nextChildren
	if
		didCaptureError
		and (Component.getDerivedStateFromError == nil or type(Component.getDerivedStateFromError) ~= "function")
	then
		-- If we captured an error, but getDerivedStateFromError is not defined,
		-- unmount all the children. componentDidCatch will schedule an update to
		-- re-render a fallback. This is temporary until we migrate everyone to
		-- the new API.
		-- TODO: Warn in a future release.
		nextChildren = nil

		if enableProfilerTimer then
			stopProfilerTimerIfRunning(workInProgress)
		end
	else
		if __DEV__ then
			setIsRendering(true)
			-- deviation: Call with ':' instead of '.' so that render can access self
			nextChildren = instance:render()
			if debugRenderPhaseSideEffectsForStrictMode and bit32.band(workInProgress.mode, StrictMode) ~= 0 then
				disableLogs()
				-- deviation: Pass instance so that render can access self
				local ok, result = xpcall(instance.render, describeError, instance)
				-- finally
				reenableLogs()
				if not ok then
					error(result)
				end
			end
			setIsRendering(false)
		else
			-- deviation: Call with ':' instead of '.' so that render can access self
			nextChildren = instance:render()
		end
	end

	-- React DevTools reads this flag.
	workInProgress.flags = bit32.bor(workInProgress.flags, PerformedWork)
	if current ~= nil and didCaptureError then
		-- If we're recovering from an error, reconcile without reusing any of
		-- the existing children. Conceptually, the normal children and the children
		-- that are shown on error are two different sets, so we shouldn't reuse
		-- normal children even if their identities match.
		forceUnmountCurrentAndReconcile(current :: Fiber, workInProgress, nextChildren, renderLanes)
	else
		reconcileChildren(current, workInProgress, nextChildren, renderLanes)
	end

	-- Memoize state using the values we just used to render.
	-- TODO: Restructure so we never read values from the instance.
	workInProgress.memoizedState = instance.state

	-- The context might have changed so we need to recalculate it.
	if hasContext then
		invalidateContextProvider(workInProgress, Component, true)
	end

	return workInProgress.child
end

local function pushHostRootContext(workInProgress)
	-- FIXME (roblox): type refinement '(workInProgress.stateNode: FiberRoot)'
	local root = workInProgress.stateNode
	if root.pendingContext then
		pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext ~= root.context)
	elseif root.context then
		-- Should always be set
		pushTopLevelContextObject(workInProgress, root.context, false)
	end
	pushHostContainer(workInProgress, root.containerInfo)
end

local function updateHostRoot(current, workInProgress, renderLanes)
	pushHostRootContext(workInProgress)
	local updateQueue = workInProgress.updateQueue
	invariant(
		current ~= nil and updateQueue ~= nil,
		"If the root does not have an updateQueue, we should have already "
			.. "bailed out. This error is likely caused by a bug in React. Please "
			.. "file an issue."
	)
	local nextProps = workInProgress.pendingProps
	local prevState = workInProgress.memoizedState
	local prevChildren
	if prevState ~= nil then
		prevChildren = prevState.element
	end
	cloneUpdateQueue(current, workInProgress)
	processUpdateQueue(workInProgress, nextProps, nil, renderLanes)
	local nextState = workInProgress.memoizedState
	-- Caution: React DevTools currently depends on this property
	-- being called "element".
	local nextChildren = nextState.element
	if nextChildren == prevChildren then
		resetHydrationState()
		return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
	end
	local root: FiberRoot = workInProgress.stateNode
	if root.hydrate and enterHydrationState(workInProgress) then
		-- If we don't have any current children this might be the first pass.
		-- We always try to hydrate. If this isn't a hydration pass there won't
		-- be any children to hydrate which is effectively the same thing as
		-- not hydrating.

		if supportsHydration then
			local mutableSourceEagerHydrationData = root.mutableSourceEagerHydrationData
			if mutableSourceEagerHydrationData ~= nil then
				for i = 1, #mutableSourceEagerHydrationData, 2 do
					-- FIXME (roblox): type refinement
					-- local mutableSource = ((mutableSourceEagerHydrationData[
					--   i
					-- ]: any): MutableSource<any>)
					local mutableSource = mutableSourceEagerHydrationData[i]
					local version = mutableSourceEagerHydrationData[i + 1]
					setWorkInProgressVersion(mutableSource, version)
				end
			end
		end

		local child = mountChildFibers(workInProgress, nil, nextChildren, renderLanes)
		workInProgress.child = child

		local node = child
		while node do
			-- Mark each child as hydrating. This is a fast path to know whether this
			-- tree is part of a hydrating tree. This is used to determine if a child
			-- node has fully mounted yet, and for scheduling event replaying.
			-- Conceptually this is similar to Placement in that a new subtree is
			-- inserted into the React tree here. It just happens to not need DOM
			-- mutations because it already exists.
			node.flags = bit32.bor(bit32.band(node.flags, bit32.bnot(Placement)), Hydrating)
			node = node.sibling
		end
	else
		-- Otherwise reset hydration state in case we aborted and resumed another
		-- root.
		reconcileChildren(current, workInProgress, nextChildren, renderLanes)
		resetHydrationState()
	end
	return workInProgress.child
end

-- FIXME (roblox): type refinement
-- local function updateHostComponent(
--   current: Fiber | nil,
--   workInProgress: Fiber,
--   renderLanes: Lanes
-- )
local function updateHostComponent(current: any, workInProgress: Fiber, renderLanes: Lanes)
	pushHostContext(workInProgress)

	if current == nil then
		tryToClaimNextHydratableInstance(workInProgress)
	end

	local type_ = workInProgress.type
	local nextProps = workInProgress.pendingProps
	local prevProps
	if current ~= nil then
		prevProps = current.memoizedProps
	end

	local nextChildren = nextProps.children
	local isDirectTextChild = shouldSetTextContent(type_, nextProps)

	if isDirectTextChild then
		-- We special case a direct text child of a host node. This is a common
		-- case. We won't handle it as a reified child. We will instead handle
		-- this in the host environment that also has access to this prop. That
		-- avoids allocating another HostText fiber and traversing it.
		nextChildren = nil
	elseif prevProps ~= nil and shouldSetTextContent(type_, prevProps) then
		-- If we're switching from a direct text child to a normal child, or to
		-- empty, we need to schedule the text content to be reset.
		workInProgress.flags = bit32.bor(workInProgress.flags, ContentReset)
	end

	-- React DevTools reads this flag.
	workInProgress.flags = bit32.bor(workInProgress.flags, PerformedWork)

	markRef(current, workInProgress)
	reconcileChildren(current, workInProgress, nextChildren, renderLanes)
	return workInProgress.child
end

local function updateHostText(current, workInProgress)
	if current == nil then
		tryToClaimNextHydratableInstance(workInProgress)
	end
	-- Nothing to do here. This is terminal. We'll do the completion step
	-- immediately after.
	return nil
end

local function mountLazyComponent(_current, workInProgress, elementType, updateLanes, renderLanes)
	if _current ~= nil then
		-- A lazy component only mounts if it suspended inside a non-
		-- concurrent tree, in an inconsistent state. We want to treat it like
		-- a new mount, even though an empty version of it already committed.
		-- Disconnect the alternate pointers.
		_current.alternate = nil
		workInProgress.alternate = nil
		-- Since this is conceptually a new fiber, schedule a Placement effect
		workInProgress.flags = bit32.bor(workInProgress.flags, Placement)
	end

	local props = workInProgress.pendingProps
	local lazyComponent: LazyComponentType<any, any> = elementType
	local payload = lazyComponent._payload
	local init = lazyComponent._init
	local Component = init(payload)
	-- Store the unwrapped component in the type.
	workInProgress.type = Component
	workInProgress.tag = resolveLazyComponentTag(Component)
	local resolvedTag = workInProgress.tag
	local resolvedProps = resolveDefaultProps(Component, props)
	local child
	if resolvedTag == FunctionComponent then
		if __DEV__ then
			validateFunctionComponentInDev(workInProgress, Component)
			Component = resolveFunctionForHotReloading(Component)
			workInProgress.type = Component
		end
		child = updateFunctionComponent(nil, workInProgress, Component, resolvedProps, renderLanes)
		return child
	elseif resolvedTag == ClassComponent then
		if __DEV__ then
			Component = resolveClassForHotReloading(Component)
			workInProgress.type = Component
		end
		child = updateClassComponent(nil, workInProgress, Component, resolvedProps, renderLanes)
		return child
	elseif resolvedTag == ForwardRef then
		if __DEV__ then
			Component = resolveForwardRefForHotReloading(Component)
			workInProgress.type = Component
		end
		child = updateForwardRef(nil, workInProgress, Component, resolvedProps, renderLanes)
		return child
	elseif resolvedTag == MemoComponent then
		if __DEV__ or __DISABLE_ALL_WARNINGS_EXCEPT_PROP_VALIDATION__ then
			if workInProgress.type ~= workInProgress.elementType then
				-- deviation: adds support for legacy Roact's validateProps()
				local outerPropTypes = Component.propTypes
				local validateProps = Component.validateProps
				if outerPropTypes or validateProps then
					checkPropTypes(
						outerPropTypes,
						validateProps,
						resolvedProps, -- Resolved for outer only
						"prop",
						getComponentName(Component)
					)
				end
			end
		end
		child = updateMemoComponent(
			nil,
			workInProgress,
			Component,
			resolveDefaultProps(Component.type, resolvedProps), -- The inner type can have defaults too
			updateLanes,
			renderLanes
		)
		return child
		-- elseif resolvedTag == Block then
		--   unimplemented("Blocks API")
		--   if enableBlocksAPI then
		--     -- TODO: Resolve for Hot Reloading.
		--     child = updateBlock(
		--       nil,
		--       workInProgress,
		--       Component,
		--       props,
		--       renderLanes,
		--     )
		--     return child
		--   end
		--   -- deviation: break
	end
	local hint = ""
	if __DEV__ then
		if Component ~= nil and type(Component) == "table" and Component["$$typeof"] == REACT_LAZY_TYPE then
			hint = " Did you wrap a component in React.lazy() more than once?"
		elseif type(Component) == "table" and Component["$$typeof"] == nil then
			hint = "\n" .. inspect(Component)
		end
	end
	-- This message intentionally doesn't mention ForwardRef or MemoComponent
	-- because the fact that it's a separate type of work is an
	-- implementation detail.
	invariant(
		false,
		"Element type is invalid. Received a promise that resolves to: %s. "
			.. "Lazy element type must resolve to a class or function.%s",
		tostring(Component),
		hint
	)
	-- deviation: add nil to satisfy Luau, which doesn't doesn't bubble up the unconditional error() inside invariant
	return nil
end

function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes)
	if _current ~= nil then
		-- An incomplete component only mounts if it suspended inside a non-
		-- concurrent tree, in an inconsistent state. We want to treat it like
		-- a new mount, even though an empty version of it already committed.
		-- Disconnect the alternate pointers.
		_current.alternate = nil
		workInProgress.alternate = nil
		-- Since this is conceptually a new fiber, schedule a Placement effect
		workInProgress.flags = bit32.bor(workInProgress.flags, Placement)
	end

	-- Promote the fiber to a class and try rendering again.
	workInProgress.tag = ClassComponent

	-- The rest of this function is a fork of `updateClassComponent`

	-- Push context providers early to prevent context stack mismatches.
	-- During mounting we don't know the child context yet as the instance doesn't exist.
	-- We will invalidate the child context in finishClassComponent() right after rendering.
	local hasContext
	if isLegacyContextProvider(Component) then
		hasContext = true
		pushLegacyContextProvider(workInProgress)
	else
		hasContext = false
	end
	prepareToReadContext(workInProgress, renderLanes, exports.markWorkInProgressReceivedUpdate)

	constructClassInstance(workInProgress, Component, nextProps)
	mountClassInstance(workInProgress, Component, nextProps, renderLanes)

	return finishClassComponent(nil, workInProgress, Component, true, hasContext, renderLanes)
end

local function mountIndeterminateComponent(current, workInProgress, Component, renderLanes)
	if current ~= nil then
		-- An indeterminate component only mounts if it suspended inside a non-
		-- concurrent tree, in an inconsistent state. We want to treat it like
		-- a new mount, even though an empty version of it already committed.
		-- Disconnect the alternate pointers.
		current.alternate = nil
		workInProgress.alternate = nil
		-- Since this is conceptually a new fiber, schedule a Placement effect
		workInProgress.flags = bit32.bor(workInProgress.flags, Placement)
	end

	local props = workInProgress.pendingProps
	local context
	if not disableLegacyContext then
		local unmaskedContext = getUnmaskedContext(workInProgress, Component, false)
		context = getMaskedContext(workInProgress, unmaskedContext)
	end

	prepareToReadContext(workInProgress, renderLanes, exports.markWorkInProgressReceivedUpdate)
	local value

	if __DEV__ then
		if
			-- deviation: Instead of checking for the prototype, see if Component is a
			-- table with a render function
			type(Component) == "table" and type(Component.render) == "function"
		then
			local componentName = getComponentName(Component) or "Unknown"

			if not DidWarn.didWarnAboutBadClass[componentName] then
				console.error(
					"The <%s /> component appears to have a render method, but doesn't extend React.Component. "
						.. "This is likely to cause errors. Change %s to extend React.Component instead.",
					componentName,
					componentName
				)
				DidWarn.didWarnAboutBadClass[componentName] = true
			end
		end

		if bit32.band(workInProgress.mode, StrictMode) ~= 0 then
			ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress)
		end

		setIsRendering(true)
		ReactCurrentOwner.current = workInProgress
		value = renderWithHooks(nil, workInProgress, Component, props, context, renderLanes)
		setIsRendering(false)
	else
		value = renderWithHooks(nil, workInProgress, Component, props, context, renderLanes)
	end
	-- React DevTools reads this flag.
	workInProgress.flags = bit32.bor(workInProgress.flags, PerformedWork)
	-- deviation START: cache type(value)
	local typeofValue = type(value)
	-- deviation END

	if __DEV__ then
		-- Support for module components is deprecated and is removed behind a flag.
		-- Whether or not it would crash later, we want to show a good message in DEV first.
		if
			value ~= nil
			and typeofValue == "table"
			and type(value.render) == "function"
			and value["$$typeof"] == nil
		then
			local componentName = getComponentName(Component) or "Unknown"
			if not DidWarn.didWarnAboutModulePatternComponent[componentName] then
				console.error(
					"The <%s /> component appears to be a function component that returns a class instance. "
						.. "Change %s to a class that extends React.Component instead. ",
					-- deviation: Don't print JS-specific remediation advice
					-- "If you can't use a class try assigning the prototype on the function as a workaround. " ..
					-- "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " ..
					-- "cannot be called with `new` by React.",
					componentName,
					componentName
					-- componentName
				)
				DidWarn.didWarnAboutModulePatternComponent[componentName] = true
			end
		end
	end

	if
		-- Run these checks in production only if the flag is off.
		-- Eventually we'll delete this branch altogether.
		not disableModulePatternComponents
		and value ~= nil
		and typeofValue == "table"
		and type(value.render) == "function"
		and value["$$typeof"] == nil
	then
		if __DEV__ then
			local componentName = getComponentName(Component) or "Unknown"
			if not DidWarn.didWarnAboutModulePatternComponent[componentName] then
				console.error(
					"The <%s /> component appears to be a function component that returns a class instance. "
						.. "Change %s to a class that extends React.Component instead. "
						-- deviation: Don't print JS-specific remediation advice
						-- "If you can't use a class try assigning the prototype on the function as a workaround. " ..
						-- "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " ..
						-- "cannot be called with `new` by React.",
						.. componentName,
					componentName
					-- componentName
				)
				DidWarn.didWarnAboutModulePatternComponent[componentName] = true
			end
		end

		-- Proceed under the assumption that this is a class instance
		workInProgress.tag = ClassComponent

		-- Throw out any hooks that were used.
		workInProgress.memoizedState = nil
		workInProgress.updateQueue = nil

		-- Push context providers early to prevent context stack mismatches.
		-- During mounting we don't know the child context yet as the instance doesn't exist.
		-- We will invalidate the child context in finishClassComponent() right after rendering.
		local hasContext = false
		if isLegacyContextProvider(Component) then
			hasContext = true
			pushLegacyContextProvider(workInProgress)
		else
			hasContext = false
		end

		-- deviation: Lua doesn't need to coerce `T | null | undefined` to `T | null`
		workInProgress.memoizedState = value.state

		initializeUpdateQueue(workInProgress)

		-- deviation: don't access field on function
		local getDerivedStateFromProps
		if type(Component) ~= "function" then
			getDerivedStateFromProps = (Component :: React_Component<any, any>).getDerivedStateFromProps
		end
		if getDerivedStateFromProps ~= nil and type(getDerivedStateFromProps) == "function" then
			applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props)
		end

		adoptClassInstance(workInProgress, value)
		mountClassInstance(workInProgress, Component, props, renderLanes)
		return finishClassComponent(nil, workInProgress, Component, true, hasContext, renderLanes)
	else
		-- Proceed under the assumption that this is a function component
		workInProgress.tag = FunctionComponent
		if __DEV__ then
			if disableLegacyContext and Component.contextTypes then
				console.error(
					"%s uses the legacy contextTypes API which is no longer supported. "
						.. "Use React.createContext() with React.useContext() instead.",
					getComponentName(Component) or "Unknown"
				)
			end

			if debugRenderPhaseSideEffectsForStrictMode and bit32.band(workInProgress.mode, StrictMode) ~= 0 then
				disableLogs()
				local ok, result =
					xpcall(renderWithHooks, describeError, nil, workInProgress, Component, props, context, renderLanes)
				-- finally
				reenableLogs()
				if ok then
					value = result
				else
					error(result)
				end
			end
		end
		reconcileChildren(nil, workInProgress, value, renderLanes)
		if __DEV__ then
			validateFunctionComponentInDev(workInProgress, Component)
		end
		return workInProgress.child
	end
end

function validateFunctionComponentInDev(workInProgress: Fiber, Component: any)
	if __DEV__ then
		-- deviation: Lua doesn't allow fields on functions, so this never happens
		-- if Component then
		--   if Component.childContextTypes then
		--     console.error(
		--       '%s(...): childContextTypes cannot be defined on a function component.',
		--       Component.displayName or Component.name or 'Component'
		--     )
		--   end
		-- end
		if workInProgress.ref ~= nil then
			local info = ""
			local ownerName = getCurrentFiberOwnerNameInDevOrNull()
			if ownerName then
				info ..= "\n\nCheck the render method of `" .. ownerName .. "`."
			end

			local warningKey = ownerName or workInProgress._debugID or ""
			local debugSource = workInProgress._debugSource
			if debugSource then
				warningKey = debugSource.fileName .. ":" .. debugSource.lineNumber
			end
			if not DidWarn.didWarnAboutFunctionRefs[warningKey] then
				DidWarn.didWarnAboutFunctionRefs[warningKey] = true
				console.error(
					"Function components cannot be given refs. "
						.. "Attempts to access this ref will fail. "
						.. "Did you mean to use React.forwardRef()?%s",
					info
				)
			end
		end

		if
			warnAboutDefaultPropsOnFunctionComponents
			-- deviation: functions can't have fields in Lua
			and type(Component) ~= "function"
			and Component.defaultProps ~= nil
		then
			local componentName = getComponentName(Component) or "Unknown"

			if not DidWarn.didWarnAboutDefaultPropsOnFunctionComponent[componentName] then
				console.error(
					"%s: Support for defaultProps will be removed from function components "
						-- deviation: Don't print JS-specific remediation advice
						.. "in a future major release.", -- Use JavaScript default parameters instead.',
					componentName
				)
				DidWarn.didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true
			end
		end

		-- deviation: Lua functions can't have fields
		if
			type(Component) ~= "function"
			and Component.getDerivedStateFromProps ~= nil
			and type(Component.getDerivedStateFromProps) == "function"
		then
			local componentName = getComponentName(Component) or "Unknown"

			if not DidWarn.didWarnAboutGetDerivedStateOnFunctionComponent[componentName] then
				console.error("%s: Function components do not support getDerivedStateFromProps.", componentName)
				DidWarn.didWarnAboutGetDerivedStateOnFunctionComponent[componentName] = true
			end
		end

		-- deviation: Lua functions can't have fields
		if
			type(Component) ~= "function"
			and Component.contextType ~= nil
			and type(Component.contextType) == "table"
		then
			local componentName = getComponentName(Component) or "Unknown"

			if not DidWarn.didWarnAboutContextTypeOnFunctionComponent[componentName] then
				console.error("%s: Function components do not support contextType.", componentName)
				DidWarn.didWarnAboutContextTypeOnFunctionComponent[componentName] = true
			end
		end
	end
end

local SUSPENDED_MARKER: SuspenseState = {
	dehydrated = nil,
	retryLane = ReactFiberLane.NoLane,
}

local function mountSuspenseOffscreenState(renderLanes: Lanes): OffscreenState
	return {
		baseLanes = renderLanes,
	}
end

local function updateSuspenseOffscreenState(prevOffscreenState: OffscreenState, renderLanes: Lanes): OffscreenState
	return {
		baseLanes = ReactFiberLane.mergeLanes(prevOffscreenState.baseLanes, renderLanes),
	}
end

-- TODO: Probably should inline this back
local function shouldRemainOnFallback(
	suspenseContext: SuspenseContext,
	current: nil | Fiber,
	workInProgress: Fiber,
	renderLanes: Lanes
)
	-- If we're already showing a fallback, there are cases where we need to
	-- remain on that fallback regardless of whether the content has resolved.
	-- For example, SuspenseList coordinates when nested content appears.
	if current ~= nil then
		local suspenseState: SuspenseState = (current :: Fiber).memoizedState
		if suspenseState == nil then
			-- Currently showing content. Don't hide it, even if ForceSuspenseFallack
			-- is true. More precise name might be "ForceRemainSuspenseFallback".
			-- NOTE: This is a factoring smell. Can't remain on a fallback if there's
			-- no fallback to remain on.
			return false
		end
	end

	-- Not currently showing content. Consult the Suspense context.
	return hasSuspenseContext(suspenseContext, ForceSuspenseFallback)
end

local function getRemainingWorkInPrimaryTree(current: Fiber, renderLanes)
	-- TODO: Should not remove render lanes that were pinged during this render
	return ReactFiberLane.removeLanes(current.childLanes, renderLanes)
end

-- deviation: predeclare these methods to resolve method declaration ordering
local updateSuspensePrimaryChildren
local mountDehydratedSuspenseComponent
local mountSuspensePrimaryChildren
local updateSuspenseFallbackChildren
local updateDehydratedSuspenseComponent

local function updateSuspenseComponent(current, workInProgress, renderLanes)
	local nextProps = workInProgress.pendingProps

	-- This is used by DevTools to force a boundary to suspend.
	if __DEV__ then
		if shouldSuspend(workInProgress) then
			workInProgress.flags = bit32.bor(workInProgress.flags, DidCapture)
		end
	end

	local suspenseContext: SuspenseContext = suspenseStackCursor.current

	local showFallback = false
	local didSuspend = bit32.band(workInProgress.flags, DidCapture) ~= NoFlags

	if didSuspend or shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) then
		-- Something in this boundary's subtree already suspended. Switch to
		-- rendering the fallback children.
		showFallback = true
		workInProgress.flags = bit32.band(workInProgress.flags, bit32.bnot(DidCapture))
	else
		-- Attempting the main content
		if current == nil or current.memoizedState ~= nil then
			-- This is a new mount or this boundary is already showing a fallback state.
			-- Mark this subtree context as having at least one invisible parent that could
			-- handle the fallback state.
			-- Boundaries without fallbacks or should be avoided are not considered since
			-- they cannot handle preferred fallback states.
			if nextProps.fallback ~= nil and nextProps.unstable_avoidThisFallback ~= true then
				suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext)
			end
		end
	end

	suspenseContext = setDefaultShallowSuspenseContext(suspenseContext)

	pushSuspenseContext(workInProgress, suspenseContext)

	-- OK, the next part is confusing. We're about to reconcile the Suspense
	-- boundary's children. This involves some custom reconcilation logic. Two
	-- main reasons this is so complicated.
	--
	-- First, Legacy Mode has different semantics for backwards compatibility. The
	-- primary tree will commit in an inconsistent state, so when we do the
	-- second pass to render the fallback, we do some exceedingly, uh, clever
	-- hacks to make that not totally break. Like transferring effects and
	-- deletions from hidden tree. In Concurrent Mode, it's much simpler,
	-- because we bailout on the primary tree completely and leave it in its old
	-- state, no effects. Same as what we do for Offscreen (except that
	-- Offscreen doesn't have the first render pass).
	--
	-- Second is hydration. During hydration, the Suspense fiber has a slightly
	-- different layout, where the child points to a dehydrated fragment, which
	-- contains the DOM rendered by the server.
	--
	-- Third, even if you set all that aside, Suspense is like error boundaries in
	-- that we first we try to render one tree, and if that fails, we render again
	-- and switch to a different tree. Like a try/catch block. So we have to track
	-- which branch we're currently rendering. Ideally we would model this using
	-- a stack.
	if current == nil then
		-- Initial mount
		-- If we're currently hydrating, try to hydrate this boundary.
		-- But only if this has a fallback.
		if nextProps.fallback ~= nil then
			tryToClaimNextHydratableInstance(workInProgress)
			-- This could've been a dehydrated suspense component.
			if enableSuspenseServerRenderer then
				local suspenseState: nil | SuspenseState = workInProgress.memoizedState
				if suspenseState ~= nil then
					local dehydrated = (suspenseState :: SuspenseState).dehydrated
					if dehydrated ~= nil then
						return mountDehydratedSuspenseComponent(workInProgress, dehydrated, renderLanes)
					end
				end
			end
		end

		local nextPrimaryChildren = nextProps.children
		local nextFallbackChildren = nextProps.fallback
		if showFallback then
			local fallbackFragment =
				mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes)
			local primaryChildFragment: Fiber = workInProgress.child :: any
			primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes)
			workInProgress.memoizedState = SUSPENDED_MARKER
			return fallbackFragment
		elseif nextProps.unstable_expectedLoadTime ~= nil and type(nextProps.unstable_expectedLoadTime) == "number" then
			-- This is a CPU-bound tree. Skip this tree and show a placeholder to
			-- unblock the surrounding content. Then immediately retry after the
			-- initial commit.
			local fallbackFragment =
				mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes)
			local primaryChildFragment: Fiber = workInProgress.child :: any
			primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes)
			workInProgress.memoizedState = SUSPENDED_MARKER

			-- Since nothing actually suspended, there will nothing to ping this to
			-- get it started back up to attempt the next item. While in terms of
			-- priority this work has the same priority as this current render, it's
			-- not part of the same transition once the transition has committed. If
			-- it's sync, we still want to yield so that it can be painted.
			-- Conceptually, this is really the same as pinging. We can use any
			-- RetryLane even if it's the one currently rendering since we're leaving
			-- it behind on this node.
			workInProgress.lanes = ReactFiberLane.SomeRetryLane
			if enableSchedulerTracing then
				markSpawnedWork(ReactFiberLane.SomeRetryLane)
			end
			return fallbackFragment
		else
			return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren, renderLanes)
		end
	else
		-- This is an update.

		-- If the current fiber has a SuspenseState, that means it's already showing
		-- a fallback.
		local prevState: nil | SuspenseState = current.memoizedState
		if prevState ~= nil then
			-- The current tree is already showing a fallback

			-- Special path for hydration
			if enableSuspenseServerRenderer then
				-- FIXME: remove :: when Luau understands ~= nil
				local dehydrated = (prevState :: SuspenseState).dehydrated

				if dehydrated ~= nil then
					if not didSuspend then
						return updateDehydratedSuspenseComponent(
							current,
							workInProgress,
							dehydrated,
							prevState,
							renderLanes
						)
					elseif workInProgress.memoizedState ~= nil then
						-- Something suspended and we should still be in dehydrated mode.
						-- Leave the existing child in place.
						workInProgress.child = current.child
						-- The dehydrated completion pass expects this flag to be there
						-- but the normal suspense pass doesn't.
						workInProgress.flags = bit32.bor(workInProgress.flags, DidCapture)
						return nil
					else
						-- Suspended but we should no longer be in dehydrated mode.
						-- Therefore we now have to render the fallback.
						local nextPrimaryChildren = nextProps.children
						local nextFallbackChildren = nextProps.fallback
						local fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(
							current,
							workInProgress,
							nextPrimaryChildren,
							nextFallbackChildren,
							renderLanes
						)
						local primaryChildFragment: Fiber = workInProgress.child :: any
						primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes)
						workInProgress.memoizedState = SUSPENDED_MARKER
						return fallbackChildFragment
					end
				end
			end

			if showFallback then
				local nextFallbackChildren = nextProps.fallback
				local nextPrimaryChildren = nextProps.children
				local fallbackChildFragment = updateSuspenseFallbackChildren(
					current,
					workInProgress,
					nextPrimaryChildren,
					nextFallbackChildren,
					renderLanes
				)
				local primaryChildFragment: Fiber = workInProgress.child :: any
				local prevOffscreenState: OffscreenState | nil = (current.child :: any).memoizedState

				-- deviation: if/else in place of ternary
				if prevOffscreenState == nil then
					primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes)
				else
					-- FIXME: remove :: when Luau understands ~= nil
					primaryChildFragment.memoizedState =
						updateSuspenseOffscreenState(prevOffscreenState :: OffscreenState, renderLanes)
				end

				primaryChildFragment.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes)
				workInProgress.memoizedState = SUSPENDED_MARKER
				return fallbackChildFragment
			else
				local nextPrimaryChildren = nextProps.children
				local primaryChildFragment =
					updateSuspensePrimaryChildren(current, workInProgress, nextPrimaryChildren, renderLanes)
				workInProgress.memoizedState = nil
				return primaryChildFragment
			end
		else
			-- The current tree is not already showing a fallback.
			if showFallback then
				-- Timed out.
				local nextFallbackChildren = nextProps.fallback
				local nextPrimaryChildren = nextProps.children
				local fallbackChildFragment = updateSuspenseFallbackChildren(
					current,
					workInProgress,
					nextPrimaryChildren,
					nextFallbackChildren,
					renderLanes
				)
				local primaryChildFragment: Fiber = workInProgress.child :: any
				local prevOffscreenState: OffscreenState | nil = (current.child :: any).memoizedState

				-- deviation: if/else in place of ternary
				if prevOffscreenState == nil then
					primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes)
				else
					-- FIXME: remove :: once Luau understands nil check
					primaryChildFragment.memoizedState =
						updateSuspenseOffscreenState(prevOffscreenState :: OffscreenState, renderLanes)
				end

				primaryChildFragment.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes)
				-- Skip the primary children, and continue working on the
				-- fallback children.
				workInProgress.memoizedState = SUSPENDED_MARKER
				return fallbackChildFragment
			else
				-- Still haven't timed out. Continue rendering the children, like we
				-- normally do.
				local nextPrimaryChildren = nextProps.children
				local primaryChildFragment =
					updateSuspensePrimaryChildren(current, workInProgress, nextPrimaryChildren, renderLanes)
				workInProgress.memoizedState = nil
				return primaryChildFragment
			end
		end
	end
end

function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes)
	local mode = workInProgress.mode
	local primaryChildProps: OffscreenProps = {
		mode = "visible",
		children = primaryChildren,
	}
	local primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes, nil)
	primaryChildFragment.return_ = workInProgress
	workInProgress.child = primaryChildFragment
	return primaryChildFragment
end

function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes)
	local mode = workInProgress.mode
	local progressedPrimaryFragment: Fiber | nil = workInProgress.child

	local primaryChildProps: OffscreenProps = {
		mode = "hidden",
		children = primaryChildren,
	}

	local primaryChildFragment
	local fallbackChildFragment
	if bit32.band(mode, BlockingMode) == NoMode and progressedPrimaryFragment ~= nil then
		-- In legacy mode, we commit the primary tree as if it successfully
		-- completed, even though it's in an inconsistent state.
		primaryChildFragment = progressedPrimaryFragment
		primaryChildFragment.childLanes = ReactFiberLane.NoLanes
		primaryChildFragment.pendingProps = primaryChildProps

		if enableProfilerTimer and bit32.band(workInProgress.mode, ProfileMode) ~= 0 then
			-- Reset the durations from the first pass so they aren't included in the
			-- final amounts. This seems counterintuitive, since we're intentionally
			-- not measuring part of the render phase, but this makes it match what we
			-- do in Concurrent Mode.
			primaryChildFragment.actualDuration = 0
			primaryChildFragment.actualStartTime = -1
			primaryChildFragment.selfBaseDuration = 0
			primaryChildFragment.treeBaseDuration = 0
		end

		fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, nil)
	else
		primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, ReactFiberLane.NoLanes, nil)
		fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, nil)
	end

	primaryChildFragment.return_ = workInProgress
	fallbackChildFragment.return_ = workInProgress
	primaryChildFragment.sibling = fallbackChildFragment
	workInProgress.child = primaryChildFragment
	return fallbackChildFragment
end

local function createWorkInProgressOffscreenFiber(current: Fiber, offscreenProps: OffscreenProps)
	-- The props argument to `createWorkInProgress` is `any` typed, so we use this
	-- wrapper function to constrain it.
	return createWorkInProgress(current, offscreenProps)
end

function updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes)
	local currentPrimaryChildFragment: Fiber = current.child :: any
	local currentFallbackChildFragment: Fiber | nil = currentPrimaryChildFragment.sibling

	local primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
		mode = "visible",
		children = primaryChildren,
	})
	if bit32.band(workInProgress.mode, BlockingMode) == NoMode then
		primaryChildFragment.lanes = renderLanes
	end
	primaryChildFragment.return_ = workInProgress
	primaryChildFragment.sibling = nil
	if currentFallbackChildFragment ~= nil then
		-- Delete the fallback child fragment
		local deletions = workInProgress.deletions
		if deletions == nil then
			workInProgress.deletions = { currentFallbackChildFragment }
			-- TODO (effects) Rename this to better reflect its new usage (e.g. ChildDeletions)
			workInProgress.flags = bit32.bor(workInProgress.flags, Deletion)
		else
			table.insert(deletions, currentFallbackChildFragment)
		end
	end

	workInProgress.child = primaryChildFragment
	return primaryChildFragment
end

function updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes)
	local mode = workInProgress.mode
	local currentPrimaryChildFragment: Fiber = current.child :: any
	local currentFallbackChildFragment: Fiber | nil = currentPrimaryChildFragment.sibling

	local primaryChildProps: OffscreenProps = {
		mode = "hidden",
		children = primaryChildren,
	}

	local primaryChildFragment
	if
		-- In legacy mode, we commit the primary tree as if it successfully
		-- completed, even though it's in an inconsistent state.
		bit32.band(mode, BlockingMode) == NoMode
		-- Make sure we're on the second pass, i.e. the primary child fragment was
		-- already cloned. In legacy mode, the only case where this isn't true is
		-- when DevTools forces us to display a fallback; we skip the first render
		-- pass entirely and go straight to rendering the fallback. (In Concurrent
		-- Mode, SuspenseList can also trigger this scenario, but this is a legacy-
		-- only codepath.)
		and workInProgress.child ~= currentPrimaryChildFragment
	then
		local progressedPrimaryFragment: Fiber = workInProgress.child
		primaryChildFragment = progressedPrimaryFragment
		primaryChildFragment.childLanes = ReactFiberLane.NoLanes
		primaryChildFragment.pendingProps = primaryChildProps

		if enableProfilerTimer and bit32.band(workInProgress.mode, ProfileMode) ~= 0 then
			-- Reset the durations from the first pass so they aren't included in the
			-- final amounts. This seems counterintuitive, since we're intentionally
			-- not measuring part of the render phase, but this makes it match what we
			-- do in Concurrent Mode.
			primaryChildFragment.actualDuration = 0
			primaryChildFragment.actualStartTime = -1
			primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration
			primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration
		end

		-- The fallback fiber was added as a deletion effect during the first pass.
		-- However, since we're going to remain on the fallback, we no longer want
		-- to delete it.
		workInProgress.deletions = nil
	else
		primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps)

		-- Since we're reusing a current tree, we need to reuse the flags, too.
		-- (We don't do this in legacy mode, because in legacy mode we don't re-use
		-- the current tree; see previous branch.)
		primaryChildFragment.subtreeFlags = bit32.band(currentPrimaryChildFragment.subtreeFlags, StaticMask)
	end
	local fallbackChildFragment
	if currentFallbackChildFragment ~= nil then
		fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren)
	else
		fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, nil)
		-- Needs a placement effect because the parent (the Suspense boundary) already
		-- mounted but this is a new fiber.
		fallbackChildFragment.flags = bit32.bor(fallbackChildFragment.flags, Placement)
	end

	fallbackChildFragment.return_ = workInProgress
	primaryChildFragment.return_ = workInProgress
	primaryChildFragment.sibling = fallbackChildFragment
	workInProgress.child = primaryChildFragment

	return fallbackChildFragment
end

local function retrySuspenseComponentWithoutHydrating(current: Fiber, workInProgress: Fiber, renderLanes: Lanes)
	-- This will add the old fiber to the deletion list
	reconcileChildFibers(workInProgress, current.child, nil, renderLanes)

	-- We're now not suspended nor dehydrated.
	local nextProps = workInProgress.pendingProps
	local primaryChildren = nextProps.children
	local primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes)
	-- Needs a placement effect because the parent (the Suspense boundary) already
	-- mounted but this is a new fiber.
	primaryChildFragment.flags = bit32.bor(primaryChildFragment.flags, Placement)
	workInProgress.memoizedState = nil

	return primaryChildFragment
end

function mountSuspenseFallbackAfterRetryWithoutHydrating(
	current,
	workInProgress,
	primaryChildren,
	fallbackChildren,
	renderLanes
)
	local mode = workInProgress.mode
	local primaryChildFragment = createFiberFromOffscreen(primaryChildren, mode, ReactFiberLane.NoLanes, nil)
	local fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, nil)
	-- Needs a placement effect because the parent (the Suspense
	-- boundary) already mounted but this is a new fiber.
	fallbackChildFragment.flags = bit32.bor(fallbackChildFragment.flags, Placement)

	primaryChildFragment.return_ = workInProgress
	fallbackChildFragment.return_ = workInProgress
	primaryChildFragment.sibling = fallbackChildFragment
	workInProgress.child = primaryChildFragment

	if bit32.band(workInProgress.mode, BlockingMode) ~= NoMode then
		-- We will have dropped the effect list which contains the
		-- deletion. We need to reconcile to delete the current child.
		reconcileChildFibers(workInProgress, current.child, nil, renderLanes)
	end

	return fallbackChildFragment
end

function mountDehydratedSuspenseComponent(
	workInProgress: Fiber,
	suspenseInstance: SuspenseInstance,
	renderLanes: Lanes
): nil | Fiber
	-- During the first pass, we'll bail out and not drill into the children.
	-- Instead, we'll leave the content in place and try to hydrate it later.
	if bit32.band(workInProgress.mode, BlockingMode) == NoMode then
		if __DEV__ then
			console.error(
				"Cannot hydrate Suspense in legacy mode. Switch from"
					.. "ReactDOM.hydrate(element, container) to "
					.. "ReactDOM.createBlockingRoot(container, { hydrate: true })"
					.. ".render(element) or remove the Suspense components"
					.. "the server rendered components."
			)
		end
		workInProgress.lanes = ReactFiberLane.laneToLanes(ReactFiberLane.SyncLane)
	elseif isSuspenseInstanceFallback(suspenseInstance) then
		-- This is a client-only boundary. Since we won't get any content from the server
		-- for this, we need to schedule that at a higher priority based on when it would
		-- have timed out. In theory we could render it in this pass but it would have the
		-- wrong priority associated with it and will prevent hydration of parent path.
		-- Instead, we'll leave work left on it to render it in a separate commit.

		-- TODO This time should be the time at which the server rendered response that is
		-- a parent to this boundary was displayed. However, since we currently don't have
		-- a protocol to transfer that time, we'll just estimate it by using the current
		-- time. This will mean that Suspense timeouts are slightly shifted to later than
		-- they should be.
		-- Schedule a normal pri update to render this content.
		if enableSchedulerTracing then
			markSpawnedWork(ReactFiberLane.DefaultHydrationLane)
		end
		workInProgress.lanes = ReactFiberLane.laneToLanes(ReactFiberLane.DefaultHydrationLane)
	else
		-- We'll continue hydrating the rest at offscreen priority since we'll already
		-- be showing the right content coming from the server, it is no rush.
		workInProgress.lanes = ReactFiberLane.laneToLanes(ReactFiberLane.OffscreenLane)
		if enableSchedulerTracing then
			markSpawnedWork(ReactFiberLane.OffscreenLane)
		end
	end
	return nil
end

function updateDehydratedSuspenseComponent(
	current: Fiber,
	workInProgress: Fiber,
	suspenseInstance: SuspenseInstance,
	suspenseState: SuspenseState,
	renderLanes: Lanes
): nil | Fiber
	-- We should never be hydrating at this point because it is the first pass,
	-- but after we've already committed once.
	warnIfHydrating()

	if bit32.band(getExecutionContext(), RetryAfterError) ~= NoContext then
		return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes)
	end

	if bit32.band(workInProgress.mode, BlockingMode) == NoMode then
		return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes)
	end

	if isSuspenseInstanceFallback(suspenseInstance) then
		-- This boundary is in a permanent fallback state. In this case, we'll never
		-- get an update and we'll never be able to hydrate the final content. Let's just try the
		-- client side render instead.
		return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes)
	end
	-- We use lanes to indicate that a child might depend on context, so if
	-- any context has changed, we need to treat is as if the input might have changed.
	local hasContextChanged = ReactFiberLane.includesSomeLane(renderLanes, current.childLanes)
	if didReceiveUpdate or hasContextChanged then
		-- This boundary has changed since the first render. This means that we are now unable to
		-- hydrate it. We might still be able to hydrate it using a higher priority lane.
		local root = getWorkInProgressRoot()
		if root ~= nil then
			local attemptHydrationAtLane = ReactFiberLane.getBumpedLaneForHydration(root, renderLanes)
			if
				attemptHydrationAtLane ~= ReactFiberLane.NoLane
				and attemptHydrationAtLane ~= suspenseState.retryLane
			then
				-- Intentionally mutating since this render will get interrupted. This
				-- is one of the very rare times where we mutate the current tree
				-- during the render phase.
				suspenseState.retryLane = attemptHydrationAtLane
				-- TODO: Ideally this would inherit the event time of the current render
				local eventTime = ReactFiberLane.NoTimestamp
				scheduleUpdateOnFiber(current, attemptHydrationAtLane, eventTime)
			else
				-- We have already tried to ping at a higher priority than we're rendering with
				-- so if we got here, we must have failed to hydrate at those levels. We must
				-- now give up. Instead, we're going to delete the whole subtree and instead inject
				-- a new real Suspense boundary to take its place, which may render content
				-- or fallback. This might suspend for a while and if it does we might still have
				-- an opportunity to hydrate before this pass commits.
			end
		end

		-- If we have scheduled higher pri work above, this will probably just abort the render
		-- since we now have higher priority work, but in case it doesn't, we need to prepare to
		-- render something, if we time out. Even if that requires us to delete everything and
		-- skip hydration.
		-- Delay having to do this as long as the suspense timeout allows us.
		renderDidSuspendDelayIfPossible()
		return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes)
	elseif isSuspenseInstancePending(suspenseInstance) then
		-- This component is still pending more data from the server, so we can't hydrate its
		-- content. We treat it as if this component suspended itself. It might seem as if
		-- we could just try to render it client-side instead. However, this will perform a
		-- lot of unnecessary work and is unlikely to complete since it often will suspend
		-- on missing data anyway. Additionally, the server might be able to render more
		-- than we can on the client yet. In that case we'd end up with more fallback states
		-- on the client than if we just leave it alone. If the server times out or errors
		-- these should update this boundary to the permanent Fallback state instead.
		-- Mark it as having captured (i.e. suspended).
		workInProgress.flags = bit32.bor(workInProgress.flags, DidCapture)
		-- Leave the child in place. I.e. the dehydrated fragment.
		workInProgress.child = current.child

		-- Register a callback to retry this boundary once the server has sent the result.
		-- deviation: wrapper function in place of bind
		local retry = function()
			return retryDehydratedSuspenseBoundary(current)
		end

		if enableSchedulerTracing then
			if Schedule_tracing_wrap == nil then
				Schedule_tracing_wrap = require(Packages.Scheduler).tracing.unstable_wrap
			end
			retry = Schedule_tracing_wrap(retry)
		end

		registerSuspenseInstanceRetry(suspenseInstance, retry)
		return nil
	else
		-- This is the first attempt.
		reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress, suspenseInstance)
		local nextProps = workInProgress.pendingProps
		local primaryChildren = nextProps.children
		local primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes)
		-- Mark the children as hydrating. This is a fast path to know whether this
		-- tree is part of a hydrating tree. This is used to determine if a child
		-- node has fully mounted yet, and for scheduling event replaying.
		-- Conceptually this is similar to Placement in that a new subtree is
		-- inserted into the React tree here. It just happens to not need DOM
		-- mutations because it already exists.
		primaryChildFragment.flags = bit32.bor(primaryChildFragment.flags, Hydrating)
		return primaryChildFragment
	end
end

-- function scheduleWorkOnFiber(fiber: Fiber, renderLanes: Lanes)
--   fiber.lanes = ReactFiberLane.mergeLanes(fiber.lanes, renderLanes)
--   local alternate = fiber.alternate
--   if alternate ~= nil)
--     alternate.lanes = ReactFiberLane.mergeLanes(alternate.lanes, renderLanes)
--   end
--   scheduleWorkOnParentPath(fiber.return, renderLanes)
-- end

-- function propagateSuspenseContextChange(
--   workInProgress: Fiber,
--   firstChild: nil | Fiber,
--   renderLanes: Lanes,
-- ): void {
--   -- Mark any Suspense boundaries with fallbacks as having work to do.
--   -- If they were previously forced into fallbacks, they may now be able
--   -- to unblock.
--   local node = firstChild
--   while (node ~= nil)
--     if node.tag == SuspenseComponent)
--       local state: SuspenseState | nil = node.memoizedState
--       if state ~= nil)
--         scheduleWorkOnFiber(node, renderLanes)
--       end
--     } elseif node.tag == SuspenseListComponent)
--       -- If the tail is hidden there might not be an Suspense boundaries
--       -- to schedule work on. In this case we have to schedule it on the
--       -- list itself.
--       -- We don't have to traverse to the children of the list since
--       -- the list will propagate the change when it rerenders.
--       scheduleWorkOnFiber(node, renderLanes)
--     } elseif node.child ~= nil)
--       node.child.return = node
--       node = node.child
--       continue
--     end
--     if node == workInProgress)
--       return
--     end
--     while (node.sibling == nil)
--       if node.return == nil or node.return == workInProgress)
--         return
--       end
--       node = node.return
--     end
--     node.sibling.return = node.return
--     node = node.sibling
--   end
-- end

-- function findLastContentRow(firstChild: nil | Fiber): nil | Fiber {
--   -- This is going to find the last row among these children that is already
--   -- showing content on the screen, as opposed to being in fallback state or
--   -- new. If a row has multiple Suspense boundaries, any of them being in the
--   -- fallback state, counts as the whole row being in a fallback state.
--   -- Note that the "rows" will be workInProgress, but any nested children
--   -- will still be current since we haven't rendered them yet. The mounted
--   -- order may not be the same as the new order. We use the new order.
--   local row = firstChild
--   local lastContentRow: nil | Fiber = nil
--   while (row ~= nil)
--     local currentRow = row.alternate
--     -- New rows can't be content rows.
--     if currentRow ~= nil and findFirstSuspended(currentRow) == nil)
--       lastContentRow = row
--     end
--     row = row.sibling
--   end
--   return lastContentRow
-- end

-- type SuspenseListRevealOrder = 'forwards' | 'backwards' | 'together' | void

-- function validateRevealOrder(revealOrder: SuspenseListRevealOrder)
--   if  __DEV__ then
--     if
--       revealOrder ~= undefined and
--       revealOrder ~= 'forwards' and
--       revealOrder ~= 'backwards' and
--       revealOrder ~= 'together' and
--       !didWarnAboutRevealOrder[revealOrder]
--     )
--       didWarnAboutRevealOrder[revealOrder] = true
--       if typeof revealOrder == 'string')
--         switch (revealOrder.toLowerCase())
--           case 'together':
--           case 'forwards':
--           case 'backwards': {
--             console.error(
--               '"%s" is not a valid value for revealOrder on <SuspenseList />. ' +
--                 'Use lowercase "%s" instead.',
--               revealOrder,
--               revealOrder.toLowerCase(),
--             )
--             break
--           end
--           case 'forward':
--           case 'backward': {
--             console.error(
--               '"%s" is not a valid value for revealOrder on <SuspenseList />. ' +
--                 'React uses the -s suffix in the spelling. Use "%ss" instead.',
--               revealOrder,
--               revealOrder.toLowerCase(),
--             )
--             break
--           end
--           default:
--             console.error(
--               '"%s" is not a supported revealOrder on <SuspenseList />. ' +
--                 'Did you mean "together", "forwards" or "backwards"?',
--               revealOrder,
--             )
--             break
--         end
--       else
--         console.error(
--           '%s is not a supported value for revealOrder on <SuspenseList />. ' +
--             'Did you mean "together", "forwards" or "backwards"?',
--           revealOrder,
--         )
--       end
--     end
--   end
-- end

-- function validateTailOptions(
--   tailMode: SuspenseListTailMode,
--   revealOrder: SuspenseListRevealOrder,
-- )
--   if  __DEV__ then
--     if tailMode ~= undefined and !didWarnAboutTailOptions[tailMode])
--       if tailMode ~= 'collapsed' and tailMode ~= 'hidden')
--         didWarnAboutTailOptions[tailMode] = true
--         console.error(
--           '"%s" is not a supported value for tail on <SuspenseList />. ' +
--             'Did you mean "collapsed" or "hidden"?',
--           tailMode,
--         )
--       } elseif revealOrder ~= 'forwards' and revealOrder ~= 'backwards')
--         didWarnAboutTailOptions[tailMode] = true
--         console.error(
--           '<SuspenseList tail="%s" /> is only valid if revealOrder is ' +
--             '"forwards" or "backwards". ' +
--             'Did you mean to specify revealOrder="forwards"?',
--           tailMode,
--         )
--       end
--     end
--   end
-- end

-- function validateSuspenseListNestedChild(childSlot: mixed, index: number)
--   if  __DEV__ then
--     local isArray = Array.isArray(childSlot)
--     local isIterable =
--       !isArray and typeof getIteratorFn(childSlot) == 'function'
--     if isArray or isIterable)
--       local type = isArray ? 'array' : 'iterable'
--       console.error(
--         'A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' +
--           'an additional SuspenseList to configure its revealOrder: ' +
--           '<SuspenseList revealOrder=...> ... ' +
--           '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' +
--           '</SuspenseList>',
--         type,
--         index,
--         type,
--       )
--       return false
--     end
--   end
--   return true
-- end

-- function validateSuspenseListChildren(
--   children: mixed,
--   revealOrder: SuspenseListRevealOrder,
-- )
--   if  __DEV__ then
--     if
--       (revealOrder == 'forwards' or revealOrder == 'backwards') and
--       children ~= undefined and
--       children ~= nil and
--       children ~= false
--     )
--       if Array.isArray(children))
--         for (local i = 0; i < children.length; i++)
--           if not validateSuspenseListNestedChild(children[i], i))
--             return
--           end
--         end
--       else
--         local iteratorFn = getIteratorFn(children)
--         if typeof iteratorFn == 'function')
--           local childrenIterator = iteratorFn.call(children)
--           if childrenIterator)
--             local step = childrenIterator.next()
--             local i = 0
--             for (; !step.done; step = childrenIterator.next())
--               if not validateSuspenseListNestedChild(step.value, i))
--                 return
--               end
--               i++
--             end
--           end
--         else
--           console.error(
--             'A single row was passed to a <SuspenseList revealOrder="%s" />. ' +
--               'This is not useful since it needs multiple rows. ' +
--               'Did you mean to pass multiple children or an array?',
--             revealOrder,
--           )
--         end
--       end
--     end
--   end
-- end

-- function initSuspenseListRenderState(
--   workInProgress: Fiber,
--   isBackwards: boolean,
--   tail: nil | Fiber,
--   lastContentRow: nil | Fiber,
--   tailMode: SuspenseListTailMode,
-- ): void {
--   local renderState: nil | SuspenseListRenderState =
--     workInProgress.memoizedState
--   if renderState == nil)
--     workInProgress.memoizedState = ({
--       isBackwards: isBackwards,
--       rendering: nil,
--       renderingStartTime: 0,
--       last: lastContentRow,
--       tail: tail,
--       tailMode: tailMode,
--     }: SuspenseListRenderState)
--   else
--     -- We can reuse the existing object from previous renders.
--     renderState.isBackwards = isBackwards
--     renderState.rendering = nil
--     renderState.renderingStartTime = 0
--     renderState.last = lastContentRow
--     renderState.tail = tail
--     renderState.tailMode = tailMode
--   end
-- end

-- -- This can end up rendering this component multiple passes.
-- -- The first pass splits the children fibers into two sets. A head and tail.
-- -- We first render the head. If anything is in fallback state, we do another
-- -- pass through beginWork to rerender all children (including the tail) with
-- -- the force suspend context. If the first render didn't have anything in
-- -- in fallback state. Then we render each row in the tail one-by-one.
-- -- That happens in the completeWork phase without going back to beginWork.
-- function updateSuspenseListComponent(
--   current: Fiber | nil,
--   workInProgress: Fiber,
--   renderLanes: Lanes,
-- )
--   local nextProps = workInProgress.pendingProps
--   local revealOrder: SuspenseListRevealOrder = nextProps.revealOrder
--   local tailMode: SuspenseListTailMode = nextProps.tail
--   local newChildren = nextProps.children

--   validateRevealOrder(revealOrder)
--   validateTailOptions(tailMode, revealOrder)
--   validateSuspenseListChildren(newChildren, revealOrder)

--   reconcileChildren(current, workInProgress, newChildren, renderLanes)

--   local suspenseContext: SuspenseContext = suspenseStackCursor.current

--   local shouldForceFallback = hasSuspenseContext(
--     suspenseContext,
--     (ForceSuspenseFallback: SuspenseContext),
--   )
--   if shouldForceFallback)
--     suspenseContext = setShallowSuspenseContext(
--       suspenseContext,
--       ForceSuspenseFallback,
--     )
--     workInProgress.flags |= DidCapture
--   else
--     local didSuspendBefore =
--       current ~= nil and (current.flags & DidCapture) ~= NoFlags
--     if didSuspendBefore)
--       -- If we previously forced a fallback, we need to schedule work
--       -- on any nested boundaries to local them know to try to render
--       -- again. This is the same as context updating.
--       propagateSuspenseContextChange(
--         workInProgress,
--         workInProgress.child,
--         renderLanes,
--       )
--     end
--     suspenseContext = setDefaultShallowSuspenseContext(suspenseContext)
--   end
--   pushSuspenseContext(workInProgress, suspenseContext)

--   if (workInProgress.mode & BlockingMode) == NoMode)
--     -- In legacy mode, SuspenseList doesn't work so we just
--     -- use make it a noop by treating it as the default revealOrder.
--     workInProgress.memoizedState = nil
--   else
--     switch (revealOrder)
--       case 'forwards': {
--         local lastContentRow = findLastContentRow(workInProgress.child)
--         local tail
--         if lastContentRow == nil)
--           -- The whole list is part of the tail.
--           -- TODO: We could fast path by just rendering the tail now.
--           tail = workInProgress.child
--           workInProgress.child = nil
--         else
--           -- Disconnect the tail rows after the content row.
--           -- We're going to render them separately later.
--           tail = lastContentRow.sibling
--           lastContentRow.sibling = nil
--         end
--         initSuspenseListRenderState(
--           workInProgress,
--           false, -- isBackwards
--           tail,
--           lastContentRow,
--           tailMode,
--         )
--         break
--       end
--       case 'backwards': {
--         -- We're going to find the first row that has existing content.
--         -- At the same time we're going to reverse the list of everything
--         -- we pass in the meantime. That's going to be our tail in reverse
--         -- order.
--         local tail = nil
--         local row = workInProgress.child
--         workInProgress.child = nil
--         while (row ~= nil)
--           local currentRow = row.alternate
--           -- New rows can't be content rows.
--           if currentRow ~= nil and findFirstSuspended(currentRow) == nil)
--             -- This is the beginning of the main content.
--             workInProgress.child = row
--             break
--           end
--           local nextRow = row.sibling
--           row.sibling = tail
--           tail = row
--           row = nextRow
--         end
--         -- TODO: If workInProgress.child is nil, we can continue on the tail immediately.
--         initSuspenseListRenderState(
--           workInProgress,
--           true, -- isBackwards
--           tail,
--           nil, -- last
--           tailMode,
--         )
--         break
--       end
--       case 'together': {
--         initSuspenseListRenderState(
--           workInProgress,
--           false, -- isBackwards
--           nil, -- tail
--           nil, -- last
--           undefined,
--         )
--         break
--       end
--       default: {
--         -- The default reveal order is the same as not having
--         -- a boundary.
--         workInProgress.memoizedState = nil
--       end
--     end
--   end
--   return workInProgress.child
-- end

function updatePortalComponent(current: Fiber | nil, workInProgress: Fiber, renderLanes: Lanes)
	pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo)
	local nextChildren = workInProgress.pendingProps
	if current == nil then
		-- Portals are special because we don't append the children during mount
		-- but at commit. Therefore we need to track insertions which the normal
		-- flow doesn't do during mount. This doesn't happen at the root because
		-- the root always starts with a "current" with a nil child.
		-- TODO: Consider unifying this with how the root works.
		workInProgress.child = reconcileChildFibers(workInProgress, nil, nextChildren, renderLanes)
	else
		reconcileChildren(current, workInProgress, nextChildren, renderLanes)
	end
	return workInProgress.child
end

local hasWarnedAboutUsingNoValuePropOnContextProvider = false

local function updateContextProvider(current: Fiber | nil, workInProgress: Fiber, renderLanes: Lanes)
	local providerType: ReactProviderType<any> = workInProgress.type
	local context: ReactContext<any> = providerType._context

	local newProps = workInProgress.pendingProps
	local oldProps = workInProgress.memoizedProps

	local newValue = newProps.value

	if __DEV__ or __DISABLE_ALL_WARNINGS_EXCEPT_PROP_VALIDATION__ then
		if Array.indexOf(Object.keys(newProps), "value") < 1 then
			if not hasWarnedAboutUsingNoValuePropOnContextProvider then
				hasWarnedAboutUsingNoValuePropOnContextProvider = true
				console.error(
					"The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?"
				)
			end
		end
		-- deviation: adds support for legacy Roact's validateProps()
		local providerPropTypes = workInProgress.type.propTypes
		local validateProps = workInProgress.type.validateProps

		if providerPropTypes or validateProps then
			checkPropTypes(providerPropTypes, validateProps, newProps, "prop", "Context.Provider")
		end
	end

	pushProvider(workInProgress, newValue)

	if oldProps ~= nil then
		local oldValue = oldProps.value
		local changedBits = calculateChangedBits(context, newValue, oldValue)
		if changedBits == 0 then
			-- No change. Bailout early if children are the same.
			if oldProps.children == newProps.children and not hasLegacyContextChanged() then
				return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
			end
		else
			-- The context value changed. Search for matching consumers and schedule
			-- them to update.
			propagateContextChange(workInProgress, context, changedBits, renderLanes)
		end
	end

	local newChildren = newProps.children
	reconcileChildren(current, workInProgress, newChildren, renderLanes)
	return workInProgress.child
end

-- deviation: combine two warning flags to dodge the registers limit
local hasWarnedAbout = {
	usingContextAsConsumer = false,
	usingLegacyConsumer = false,
}

function updateContextConsumer(current: Fiber | nil, workInProgress: Fiber, renderLanes: Lanes)
	local context: ReactContext<any> = workInProgress.type
	-- The logic below for Context differs depending on PROD or DEV mode. In
	-- DEV mode, we create a separate object for Context.Consumer that acts
	-- like a proxy to Context. This proxy object adds unnecessary code in PROD
	-- so we use the old behaviour (Context.Consumer references Context) to
	-- reduce size and overhead. The separate object references context via
	-- a property called "_context", which also gives us the ability to check
	-- in DEV mode if this property exists or not and warn if it does not.
	if __DEV__ then
		if (context :: any)._context == nil then
			-- This may be because it's a Context (rather than a Consumer).
			-- Or it may be because it's older React where they're the same thing.
			-- We only want to warn if we're sure it's a new React.
			if context ~= context.Consumer then
				if not hasWarnedAbout.usingContextAsConsumer then
					hasWarnedAbout.usingContextAsConsumer = true
					console.error(
						"Rendering <Context> directly is not supported and will be removed in "
							.. "a future major release. Did you mean to render <Context.Consumer> instead?"
					)
				end
			end
		else
			context = (context :: any)._context
		end
	end
	local newProps = workInProgress.pendingProps

	-- deviation: compatibility for old Roact's context consumer API
	local render
	if newProps.render then
		if __DEV__ and __COMPAT_WARNINGS__ then
			if not hasWarnedAbout.usingLegacyConsumer then
				hasWarnedAbout.usingLegacyConsumer = true
				console.warn(
					"Your Context.Consumer component is using legacy Roact syntax, which won't be supported in future versions of Roact. \n"
						.. "Please provide no props and supply the 'render' function as a child (the 3rd argument of createElement). For example: \n"
						.. "       createElement(ContextConsumer, {render = function(...) end})\n"
						.. "becomes:\n"
						.. "       createElement(ContextConsumer, nil, function(...) end)\n"
						.. "For more info, reference the React documentation here: \n"
						.. "https://reactjs.org/docs/context.html#contextconsumer"
				)
			end
		end
		render = newProps.render
	else
		render = newProps.children
	end

	if __DEV__ then
		if type(render) ~= "function" then
			console.error(
				"A context consumer was rendered with multiple children, or a child "
					.. "that isn't a function. A context consumer expects a single child "
					.. "that is a function. If you did pass a function, make sure there "
					.. "is no trailing or leading whitespace around it."
			)
		end
	end

	prepareToReadContext(workInProgress, renderLanes, exports.markWorkInProgressReceivedUpdate)
	local newValue = readContext(context, newProps.unstable_observedBits)
	local newChildren
	if __DEV__ then
		ReactCurrentOwner.current = workInProgress
		setIsRendering(true)
		newChildren = render(newValue)
		setIsRendering(false)
	else
		newChildren = render(newValue)
	end

	-- React DevTools reads this flag.
	workInProgress.flags = bit32.bor(workInProgress.flags, PerformedWork)
	reconcileChildren(current, workInProgress, newChildren, renderLanes)
	return workInProgress.child
end

-- TODO: fundamental component is removed in React 18, clean up all traces when we upgrade
-- function updateFundamentalComponent(current, workInProgress, renderLanes)
--   local fundamentalImpl = workInProgress.type.impl
--   if fundamentalImpl.reconcileChildren == false then
--     return nil
--   end
--   local nextProps = workInProgress.pendingProps
--   local nextChildren = nextProps.children

--   reconcileChildren(current, workInProgress, nextChildren, renderLanes)
--   return workInProgress.child
-- end

-- TODO: scope component is disabled in our FeatureFlags, uncomment when we enable it
-- function updateScopeComponent(current, workInProgress, renderLanes)
--   local nextProps = workInProgress.pendingProps
--   local nextChildren = nextProps.children

--   reconcileChildren(current, workInProgress, nextChildren, renderLanes)
--   return workInProgress.child
-- end

exports.markWorkInProgressReceivedUpdate = function()
	didReceiveUpdate = true
end

function bailoutOnAlreadyFinishedWork(current: Fiber | nil, workInProgress: Fiber, renderLanes: Lanes): Fiber | nil
	if current then
		-- Reuse previous dependencies
		workInProgress.dependencies = current.dependencies
	end

	if enableProfilerTimer then
		-- Don't update "base" render times for bailouts.
		stopProfilerTimerIfRunning(workInProgress)
	end

	markSkippedUpdateLanes(workInProgress.lanes)

	-- Check if the children have any pending work.
	if not ReactFiberLane.includesSomeLane(renderLanes, workInProgress.childLanes) then
		-- The children don't have any work either. We can skip them.
		-- TODO: Once we add back resuming, we should check if the children are
		-- a work-in-progress set. If so, we need to transfer their effects.
		return nil
	else
		-- This fiber doesn't have work, but its subtree does. Clone the child
		-- fibers and continue.
		cloneChildFibers(current, workInProgress)
		return workInProgress.child
	end
end

function remountFiber(current: Fiber, oldWorkInProgress: Fiber, newWorkInProgress: Fiber): Fiber | nil
	if __DEV__ then
		local returnFiber = oldWorkInProgress.return_
		if returnFiber == nil then
			error("Cannot swap the root fiber.")
		end
		-- FIXME Luau: remove this assert when Luau type states understands the above guard
		assert(returnFiber ~= nil, "returnFiber was nil in remountFiber")

		-- Disconnect from the old current.
		-- It will get deleted.
		current.alternate = nil
		oldWorkInProgress.alternate = nil

		-- Connect to the new tree.
		newWorkInProgress.index = oldWorkInProgress.index
		newWorkInProgress.sibling = oldWorkInProgress.sibling
		newWorkInProgress.return_ = oldWorkInProgress.return_
		newWorkInProgress.ref = oldWorkInProgress.ref

		-- Replace the child/sibling pointers above it.
		if oldWorkInProgress == returnFiber.child then
			returnFiber.child = newWorkInProgress
		else
			local prevSibling = returnFiber.child
			if prevSibling == nil then
				error("Expected parent to have a child.")
			end
			-- FIXME Luau: remove this assert when Luau type states understands the above guard
			assert(prevSibling ~= nil, "prevSibling was nil in remountFiber")

			while prevSibling.sibling ~= oldWorkInProgress do
				prevSibling = prevSibling.sibling
				if prevSibling == nil then
					error("Expected to find the previous sibling.")
				end
			end
			prevSibling.sibling = newWorkInProgress
		end

		-- Delete the old fiber and place the new one.
		-- Since the old fiber is disconnected, we have to schedule it manually.
		local deletions = returnFiber.deletions
		if deletions == nil then
			returnFiber.deletions = { current }
			-- TODO (effects) Rename this to better reflect its new usage (e.g. ChildDeletions)
			returnFiber.flags = bit32.bor(returnFiber.flags, Deletion)
		else
			table.insert(deletions, current)
		end

		newWorkInProgress.flags = bit32.bor(newWorkInProgress.flags, Placement)

		-- Restart work from the new fiber.
		return newWorkInProgress
	else
		error("Did not expect this call in production. " .. "This is a bug in React. Please file an issue.")
	end
end

-- FIXME (roblox): restore types when refinement is better:
-- current: Fiber | nil,
local function beginWork(current: any, workInProgress: Fiber, renderLanes: Lanes): Fiber?
	local updateLanes = workInProgress.lanes

	if __DEV__ then
		if workInProgress._debugNeedsRemount and current ~= nil then
			-- This will restart the begin phase with a new fiber.
			return remountFiber(
				current,
				workInProgress,
				createFiberFromTypeAndProps(
					workInProgress.type,
					-- FIXME: we widen this to be number|string for Roact compatibility
					workInProgress.key :: string?,
					workInProgress.pendingProps,
					workInProgress._debugOwner or nil,
					workInProgress.mode,
					workInProgress.lanes
				)
			)
		end
	end

	if current ~= nil then
		local oldProps = current.memoizedProps
		local newProps = workInProgress.pendingProps

		if
			oldProps ~= newProps
			or hasLegacyContextChanged()
			-- Force a re-render if the implementation changed due to hot reload:
			or if __DEV__ then workInProgress.type ~= current.type else false
		then
			-- If props or context changed, mark the fiber as having performed work.
			-- This may be unset if the props are determined to be equal later (memo).
			didReceiveUpdate = true
		elseif not ReactFiberLane.includesSomeLane(renderLanes, updateLanes) then
			didReceiveUpdate = false
			-- This fiber does not have any pending work. Bailout without entering
			-- the begin phase. There's still some bookkeeping we that needs to be done
			-- in this optimized path, mostly pushing stuff onto the stack.
			if workInProgress.tag == HostRoot then
				pushHostRootContext(workInProgress)
				resetHydrationState()
			elseif workInProgress.tag == HostComponent then
				pushHostContext(workInProgress)
			elseif workInProgress.tag == ClassComponent then
				local Component = workInProgress.type
				if isLegacyContextProvider(Component) then
					pushLegacyContextProvider(workInProgress)
				end
			elseif workInProgress.tag == HostPortal then
				pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo)
			elseif workInProgress.tag == ContextProvider then
				local newValue = workInProgress.memoizedProps.value
				pushProvider(workInProgress, newValue)
			elseif workInProgress.tag == Profiler then
				if enableProfilerTimer then
					-- Reset effect durations for the next eventual effect phase.
					-- These are reset during render to allow the DevTools commit hook a chance to read them,
					local stateNode = workInProgress.stateNode
					stateNode.effectDuration = 0
					stateNode.passiveEffectDuration = 0
				end
			elseif workInProgress.tag == SuspenseComponent then
				local state: SuspenseState | nil = workInProgress.memoizedState
				if state ~= nil then
					if enableSuspenseServerRenderer then
						if (state :: SuspenseState).dehydrated ~= nil then
							pushSuspenseContext(
								workInProgress,
								setDefaultShallowSuspenseContext(suspenseStackCursor.current)
							)
							-- We know that this component will suspend again because if it has
							-- been unsuspended it has committed as a resolved Suspense component.
							-- If it needs to be retried, it should have work scheduled on it.
							workInProgress.flags = bit32.bor(workInProgress.flags, DidCapture)
							-- We should never render the children of a dehydrated boundary until we
							-- upgrade it. We return nil instead of bailoutOnAlreadyFinishedWork.
							return nil
						end
					end

					-- If this boundary is currently timed out, we need to decide
					-- whether to retry the primary children, or to skip over it and
					-- go straight to the fallback. Check the priority of the primary
					-- child fragment.
					local primaryChildFragment: Fiber = workInProgress.child :: any
					local primaryChildLanes = primaryChildFragment.childLanes
					if ReactFiberLane.includesSomeLane(renderLanes, primaryChildLanes) then
						-- The primary children have pending work. Use the normal path
						-- to attempt to render the primary children again.
						return updateSuspenseComponent(current, workInProgress, renderLanes)
					else
						-- The primary child fragment does not have pending work marked
						-- on it
						pushSuspenseContext(
							workInProgress,
							setDefaultShallowSuspenseContext(suspenseStackCursor.current)
						)
						-- The primary children do not have pending work with sufficient
						-- priority. Bailout.
						local child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
						if child ~= nil then
							-- The fallback children have pending work. Skip over the
							-- primary children and work on the fallback.
							return child.sibling
						else
							return nil
						end
					end
				else
					pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current))
				end
			elseif workInProgress.tag == SuspenseListComponent then
				unimplemented("beginWork: SuspenseListComponent")
			-- local didSuspendBefore = bit32.band(current.flags, DidCapture) ~= NoFlags

			-- local hasChildWork = ReactFiberLane.includesSomeLane(
			--   renderLanes,
			--   workInProgress.childLanes
			-- )

			-- if didSuspendBefore then
			--   if hasChildWork then
			--     -- If something was in fallback state last time, and we have all the
			--     -- same children then we're still in progressive loading state.
			--     -- Something might get unblocked by state updates or retries in the
			--     -- tree which will affect the tail. So we need to use the normal
			--     -- path to compute the correct tail.
			--     return updateSuspenseListComponent(
			--       current,
			--       workInProgress,
			--       renderLanes
			--     )
			--   end
			--   -- If none of the children had any work, that means that none of
			--   -- them got retried so they'll still be blocked in the same way
			--   -- as before. We can fast bail out.
			--   workInProgress.flags = bit32.bor(workInProgress.flags, DidCapture)
			-- end

			-- -- If nothing suspended before and we're rendering the same children,
			-- -- then the tail doesn't matter. Anything new that suspends will work
			-- -- in the "together" mode, so we can continue from the state we had.
			-- local renderState = workInProgress.memoizedState
			-- if renderState ~= nil then
			--   -- Reset to the "together" mode in case we've started a different
			--   -- update in the past but didn't complete it.
			--   renderState.rendering = nil
			--   renderState.tail = nil
			-- end
			-- pushSuspenseContext(workInProgress, suspenseStackCursor.current)

			-- if not hasChildWork then
			--   -- If none of the children had any work, that means that none of
			--   -- them got retried so they'll still be blocked in the same way
			--   -- as before. We can fast bail out.
			--   return nil
			-- end
			elseif workInProgress.tag == OffscreenComponent or workInProgress.tag == LegacyHiddenComponent then
				-- Need to check if the tree still needs to be deferred. This is
				-- almost identical to the logic used in the normal update path,
				-- so we'll just enter that. The only difference is we'll bail out
				-- at the next level instead of this one, because the child props
				-- have not changed. Which is fine.
				-- TODO: Probably should refactor `beginWork` to split the bailout
				-- path from the normal path. I'm tempted to do a labeled break here
				-- but I won't :)
				workInProgress.lanes = ReactFiberLane.NoLanes
				return updateOffscreenComponent(current, workInProgress, renderLanes)
			end
			return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
		else
			if bit32.band(current.flags, ForceUpdateForLegacySuspense) ~= NoFlags then
				-- This is a special case that only exists for legacy mode.
				-- See https://github.com/facebook/react/pull/19216.
				didReceiveUpdate = true
			else
				-- An update was scheduled on this fiber, but there are no new props
				-- nor legacy context. Set this to false. If an update queue or context
				-- consumer produces a changed value, it will set this to true. Otherwise,
				-- the component will assume the children have not changed and bail out.
				didReceiveUpdate = false
			end
		end
	else
		didReceiveUpdate = false
	end

	-- Before entering the begin phase, clear pending update priority.
	-- TODO: This assumes that we're about to evaluate the component and process
	-- the update queue. However, there's an exception: SimpleMemoComponent
	-- sometimes bails out later in the begin phase. This indicates that we should
	-- move this assignment out of the common path and into each branch.
	workInProgress.lanes = ReactFiberLane.NoLanes

	if workInProgress.tag == ReactWorkTags.IndeterminateComponent then
		return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes)
	elseif workInProgress.tag == LazyComponent then
		local elementType = workInProgress.elementType
		return mountLazyComponent(current, workInProgress, elementType, updateLanes, renderLanes)
	elseif workInProgress.tag == FunctionComponent then
		local Component = workInProgress.type
		local unresolvedProps = workInProgress.pendingProps
		local resolvedProps
		if workInProgress.elementType == Component then
			resolvedProps = unresolvedProps
		else
			resolvedProps = resolveDefaultProps(Component, unresolvedProps)
		end
		return updateFunctionComponent(current, workInProgress, Component, resolvedProps, renderLanes)
	elseif workInProgress.tag == ClassComponent then
		local Component = workInProgress.type
		local unresolvedProps = workInProgress.pendingProps
		local resolvedProps = workInProgress.elementType == Component and unresolvedProps
			or resolveDefaultProps(Component, unresolvedProps)
		return updateClassComponent(current, workInProgress, Component, resolvedProps, renderLanes)
	elseif workInProgress.tag == HostRoot then
		return updateHostRoot(current, workInProgress, renderLanes)
	elseif workInProgress.tag == HostComponent then
		return updateHostComponent(current, workInProgress, renderLanes)
	elseif workInProgress.tag == HostText then
		return updateHostText(current, workInProgress)
	elseif workInProgress.tag == SuspenseComponent then
		return updateSuspenseComponent(current, workInProgress, renderLanes)
	elseif workInProgress.tag == HostPortal then
		return updatePortalComponent(current, workInProgress, renderLanes)
	elseif workInProgress.tag == ForwardRef then
		local type = workInProgress.type
		local unresolvedProps = workInProgress.pendingProps
		local resolvedProps = unresolvedProps
		if workInProgress.elementType ~= type then
			resolvedProps = resolveDefaultProps(type, unresolvedProps)
		end
		return updateForwardRef(current, workInProgress, type, resolvedProps, renderLanes)
	elseif workInProgress.tag == Fragment then
		return updateFragment(current, workInProgress, renderLanes)
	elseif workInProgress.tag == Mode then
		return updateMode(current, workInProgress, renderLanes)
	elseif workInProgress.tag == Profiler then
		return updateProfiler(current, workInProgress, renderLanes)
	elseif workInProgress.tag == ContextProvider then
		return updateContextProvider(current, workInProgress, renderLanes)
	elseif workInProgress.tag == ContextConsumer then
		return updateContextConsumer(current, workInProgress, renderLanes)
	elseif workInProgress.tag == MemoComponent then
		local type_ = workInProgress.type
		local unresolvedProps = workInProgress.pendingProps
		-- Resolve outer props first, then resolve inner props.
		local resolvedProps = resolveDefaultProps(type_, unresolvedProps)
		if __DEV__ or __DISABLE_ALL_WARNINGS_EXCEPT_PROP_VALIDATION__ then
			if workInProgress.type ~= workInProgress.elementType then
				-- deviation: adds support for legacy Roact's validateProps()
				local outerPropTypes
				local validateProps
				-- deviation: only get propTypes from class components, Lua doesn't support fields on functions
				if type(type_) == "table" then
					outerPropTypes = type_.propTypes
					validateProps = type_.validateProps
				end
				if outerPropTypes or validateProps then
					checkPropTypes(
						outerPropTypes,
						validateProps,
						resolvedProps, -- Resolved for outer only
						"prop",
						getComponentName(type_)
					)
				end
			end
		end
		resolvedProps = resolveDefaultProps(type_.type, resolvedProps)
		return updateMemoComponent(current, workInProgress, type_, resolvedProps, updateLanes, renderLanes)
	elseif workInProgress.tag == SimpleMemoComponent then
		return updateSimpleMemoComponent(
			current,
			workInProgress,
			workInProgress.type,
			workInProgress.pendingProps,
			updateLanes,
			renderLanes
		)
	elseif workInProgress.tag == IncompleteClassComponent then
		local Component = workInProgress.type
		local unresolvedProps = workInProgress.pendingProps
		local resolvedProps = workInProgress.elementType == Component and unresolvedProps
			or resolveDefaultProps(Component, unresolvedProps)
		return mountIncompleteClassComponent(current, workInProgress, Component, resolvedProps, renderLanes)
	-- elseif workInProgress.tag == SuspenseListComponent then
	--   unimplemented("beginWork: SuspenseListComponent")
	-- return updateSuspenseListComponent(current, workInProgress, renderLanes)
	-- elseif workInProgress.tag == FundamentalComponent then
	--   if enableFundamentalAPI then
	--     return updateFundamentalComponent(current, workInProgress, renderLanes)
	--   end
	-- elseif workInProgress.tag == ScopeComponent then
	--   if enableScopeAPI then
	--     return updateScopeComponent(current, workInProgress, renderLanes)
	--   end
	elseif workInProgress.tag == OffscreenComponent then
		return updateOffscreenComponent(current, workInProgress, renderLanes)
	elseif workInProgress.tag == LegacyHiddenComponent then
		return updateLegacyHiddenComponent(current, workInProgress, renderLanes)
	end
	invariant(
		false,
		"Unknown unit of work tag (%s). This error is likely caused by a bug in " .. "React. Please file an issue.",
		tostring(workInProgress.tag)
	)
	return nil
end
exports.beginWork = beginWork

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="342">
              <Properties>
                <string name="Name">ReactFiberClassComponent.new</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/c63741fb3daef6c1e8746cbe7d7b07ecb281a9fd/packages/react-reconciler/src/ReactFiberClassComponent.new.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]

local __DEV__ = _G.__DEV__ :: boolean
local Packages = script.Parent.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)
local Object = LuauPolyfill.Object

-- NOTE: use patched console from shared
local console = require(Packages.Shared).console
local ReactInternalTypes = require(script.Parent.ReactInternalTypes)
type Fiber = ReactInternalTypes.Fiber
local ReactFiberLane = require(script.Parent.ReactFiberLane)
type Lanes = ReactFiberLane.Lanes
local ReactUpdateQueue = require(script.Parent["ReactUpdateQueue.new"])
type UpdateQueue<State> = ReactInternalTypes.UpdateQueue<State>

local ReactTypes = require(Packages.Shared)
type React_Component<Props, State> = ReactTypes.React_Component<Props, State>

local React = require(Packages.React)

local ReactFiberFlags = require(script.Parent.ReactFiberFlags)
local Update = ReactFiberFlags.Update
local Snapshot = ReactFiberFlags.Snapshot
local MountLayoutDev = ReactFiberFlags.MountLayoutDev

local ReactFeatureFlags = require(Packages.Shared).ReactFeatureFlags
local debugRenderPhaseSideEffectsForStrictMode = ReactFeatureFlags.debugRenderPhaseSideEffectsForStrictMode
local disableLegacyContext = ReactFeatureFlags.disableLegacyContext
local enableDebugTracing = ReactFeatureFlags.enableDebugTracing
local enableSchedulingProfiler = ReactFeatureFlags.enableSchedulingProfiler
local warnAboutDeprecatedLifecycles = ReactFeatureFlags.warnAboutDeprecatedLifecycles
local enableDoubleInvokingEffects = ReactFeatureFlags.enableDoubleInvokingEffects

local ReactStrictModeWarnings = require(script.Parent["ReactStrictModeWarnings.new"])
local isMounted = require(script.Parent.ReactFiberTreeReflection).isMounted
local ReactInstanceMap = require(Packages.Shared).ReactInstanceMap
local getInstance = ReactInstanceMap.get
local setInstance = ReactInstanceMap.set
local shallowEqual = require(Packages.Shared).shallowEqual
local getComponentName = require(Packages.Shared).getComponentName
local UninitializedState = require(Packages.Shared).UninitializedState
local describeError = require(Packages.Shared).describeError
-- local invariant = require(Packages.Shared).invariant
local ReactSymbols = require(Packages.Shared).ReactSymbols
local REACT_CONTEXT_TYPE = ReactSymbols.REACT_CONTEXT_TYPE
local REACT_PROVIDER_TYPE = ReactSymbols.REACT_PROVIDER_TYPE

local resolveDefaultProps = require(script.Parent["ReactFiberLazyComponent.new"]).resolveDefaultProps
local ReactTypeOfMode = require(script.Parent.ReactTypeOfMode)
local DebugTracingMode = ReactTypeOfMode.DebugTracingMode
local StrictMode = ReactTypeOfMode.StrictMode

local enqueueUpdate = ReactUpdateQueue.enqueueUpdate
local processUpdateQueue = ReactUpdateQueue.processUpdateQueue
local checkHasForceUpdateAfterProcessing = ReactUpdateQueue.checkHasForceUpdateAfterProcessing
local resetHasForceUpdateBeforeProcessing = ReactUpdateQueue.resetHasForceUpdateBeforeProcessing
local createUpdate = ReactUpdateQueue.createUpdate
local ReplaceState = ReactUpdateQueue.ReplaceState
local ForceUpdate = ReactUpdateQueue.ForceUpdate
local initializeUpdateQueue = ReactUpdateQueue.initializeUpdateQueue
local cloneUpdateQueue = ReactUpdateQueue.cloneUpdateQueue
local NoLanes = ReactFiberLane.NoLanes

local ReactFiberContext = require(script.Parent["ReactFiberContext.new"])
local cacheContext = ReactFiberContext.cacheContext
local getMaskedContext = ReactFiberContext.getMaskedContext
local getUnmaskedContext = ReactFiberContext.getUnmaskedContext
local hasContextChanged = ReactFiberContext.hasContextChanged
local emptyContextObject = ReactFiberContext.emptyContextObject

local ReactFiberNewContext = require(script.Parent["ReactFiberNewContext.new"])
local readContext = ReactFiberNewContext.readContext

-- local ReactFiberWorkLoop = require(script.Parent["ReactFiberWorkLoop.new"])
-- local requestEventTime = ReactFiberWorkLoop.requestEventTime
-- local requestUpdateLane = ReactFiberWorkLoop.requestUpdateLane
-- local scheduleUpdateOnFiber = ReactFiberWorkLoop.scheduleUpdateOnFiber
local DebugTracing = require(script.Parent.DebugTracing)
local logForceUpdateScheduled = DebugTracing.logForceUpdateScheduled
local logStateUpdateScheduled = DebugTracing.logStateUpdateScheduled

local ConsolePatchingDev = require(Packages.Shared).ConsolePatchingDev
local disableLogs = ConsolePatchingDev.disableLogs
local reenableLogs = ConsolePatchingDev.reenableLogs

local SchedulingProfiler = require(script.Parent.SchedulingProfiler)
local markForceUpdateScheduled = SchedulingProfiler.markForceUpdateScheduled
local markStateUpdateScheduled = SchedulingProfiler.markStateUpdateScheduled

local fakeInternalInstance = {}
-- TODO: If this is being localized, it might be for a hot path; that's
-- concerning, since our version of `isArray` is much more complex
-- local isArray = Array.isArray

-- React.Component uses a shared frozen object by default.
-- We'll use it to determine whether we need to initialize legacy refs.
-- deviation: Uses __refs instead of refs to avoid conflicts
-- local emptyRefsObject = React.Component:extend("").refs
local emptyRefsObject = React.Component:extend("").__refs

local didWarnAboutStateAssignmentForComponent
local didWarnAboutUninitializedState
local didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate
local didWarnAboutLegacyLifecyclesAndDerivedState
local _didWarnAboutUndefinedDerivedState
local warnOnUndefinedDerivedState
local warnOnInvalidCallback
local didWarnAboutDirectlyAssigningPropsToState
local didWarnAboutContextTypeAndContextTypes
local didWarnAboutInvalidateContextType

if __DEV__ then
	didWarnAboutStateAssignmentForComponent = {}
	didWarnAboutUninitializedState = {}
	didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = {}
	didWarnAboutLegacyLifecyclesAndDerivedState = {}
	didWarnAboutDirectlyAssigningPropsToState = {}
	_didWarnAboutUndefinedDerivedState = {}
	didWarnAboutContextTypeAndContextTypes = {}
	didWarnAboutInvalidateContextType = {}

	local didWarnOnInvalidCallback = {}

	function warnOnInvalidCallback(callback: any, callerName: string)
		if callback == nil or type(callback) == "function" then
			return
		end
		local key = callerName .. "_" .. tostring(callback)
		if not didWarnOnInvalidCallback[key] then
			didWarnOnInvalidCallback[key] = true
			console.error(
				"%s(...): Expected the last optional `callback` argument to be a " .. "function. Instead received: %s.",
				callerName,
				tostring(callback)
			)
		end
	end

	function warnOnUndefinedDerivedState(type_, partialState)
		-- deviation: `nil` is a valid return for getDerivedStateFromProps, but
		-- `undefined` is not possible for us to return; we could try to detect
		-- returning zero values, but that's likely not possible without tracking it
		-- differently at the original callsite (e.g. the value we save to
		-- `partialState` would still be nil)

		-- if partialState == nil then
		--   local componentName = getComponentName(type_) or "Component"
		--   if not didWarnAboutUndefinedDerivedState[componentName] then
		--     didWarnAboutUndefinedDerivedState[componentName] = true
		--     console.error(
		--       "%s.getDerivedStateFromProps(): A valid state object (or nil) must be returned. " ..
		--         "You have returned undefined.",
		--       componentName
		--     )
		--   end
		-- end
	end

	--   -- FIXME: I'm not sure this applies, need to revisit it
	--   -- -- This is so gross but it's at least non-critical and can be removed if
	--   -- -- it causes problems. This is meant to give a nicer error message for
	--   -- -- ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
	--   -- -- ...)) which otherwise throws a "_processChildContext is not a function"
	--   -- -- exception.
	--   -- Object.defineProperty(fakeInternalInstance, '_processChildContext', {
	--   --   enumerable: false,
	--   --   value: function()
	--   --     invariant(
	--   --       false,
	--   --       '_processChildContext is not available in React 16+. This likely ' +
	--   --         'means you have multiple copies of React and are attempting to nest ' +
	--   --         'a React 15 tree inside a React 16 tree using ' +
	--   --         "unstable_renderSubtreeIntoContainer, which isn't supported. Try " +
	--   --         'to make sure you have only one copy of React (and ideally, switch ' +
	--   --         'to ReactDOM.createPortal).',
	--   --     )
	--   --   },
	--   -- })
	--   Object.freeze(fakeInternalInstance)
end

local function applyDerivedStateFromProps<Props, State>(
	workInProgress: Fiber,
	ctor: React_Component<Props, State>,
	getDerivedStateFromProps: (Props, State) -> State?,
	nextProps: Props
)
	local prevState = workInProgress.memoizedState

	if __DEV__ then
		if debugRenderPhaseSideEffectsForStrictMode and bit32.band(workInProgress.mode, StrictMode) ~= 0 then
			disableLogs()
			-- Invoke the function an extra time to help detect side-effects.
			local ok, result = xpcall(getDerivedStateFromProps, describeError, nextProps, prevState)

			reenableLogs()

			if not ok then
				error(result)
			end
		end
	end

	local partialState = getDerivedStateFromProps(nextProps, prevState)

	if __DEV__ then
		warnOnUndefinedDerivedState(ctor, partialState)
	end
	-- Merge the partial state and the previous state.
	local memoizedState = if partialState == nil then prevState else Object.assign({}, prevState, partialState)
	workInProgress.memoizedState = memoizedState

	-- Once the update queue is empty, persist the derived state onto the
	-- base state.
	if workInProgress.lanes == NoLanes then
		-- Queue is always non-null for classes
		local updateQueue: UpdateQueue<any> = workInProgress.updateQueue
		updateQueue.baseState = memoizedState
	end
end

-- deviation: lazy initialize this to avoid cycles
local classComponentUpdater = nil
local function initializeClassComponentUpdater()
	local ReactFiberWorkLoop = require(script.Parent["ReactFiberWorkLoop.new"])
	local requestEventTime = ReactFiberWorkLoop.requestEventTime
	local requestUpdateLane = ReactFiberWorkLoop.requestUpdateLane
	local scheduleUpdateOnFiber = ReactFiberWorkLoop.scheduleUpdateOnFiber

	classComponentUpdater = {
		isMounted = isMounted,
		enqueueSetState = function(inst, payload, callback: (() -> ...any)?)
			local fiber = getInstance(inst)
			local eventTime = requestEventTime()
			local lane = requestUpdateLane(fiber)

			local update = createUpdate(eventTime, lane, payload, callback)
			-- update.payload = payload
			if callback ~= nil then
				if __DEV__ then
					warnOnInvalidCallback(callback, "setState")
				end
				-- update.callback = callback
			end

			enqueueUpdate(fiber, update)
			scheduleUpdateOnFiber(fiber, lane, eventTime)

			if __DEV__ then
				if enableDebugTracing then
					if bit32.band(fiber.mode, DebugTracingMode) ~= 0 then
						local name = getComponentName(fiber.type) or "Unknown"
						logStateUpdateScheduled(name, lane, payload)
					end
				end
			end

			if enableSchedulingProfiler then
				markStateUpdateScheduled(fiber, lane)
			end
		end,
		enqueueReplaceState = function(inst, payload, callback)
			local fiber = getInstance(inst)
			local eventTime = requestEventTime()
			local lane = requestUpdateLane(fiber)

			local update = createUpdate(eventTime, lane, payload, callback)
			update.tag = ReplaceState
			-- update.payload = payload

			if callback ~= nil then
				if __DEV__ then
					warnOnInvalidCallback(callback, "replaceState")
				end
				-- update.callback = callback
			end

			enqueueUpdate(fiber, update)
			scheduleUpdateOnFiber(fiber, lane, eventTime)

			if __DEV__ then
				if enableDebugTracing then
					if bit32.band(fiber.mode, DebugTracingMode) ~= 0 then
						local name = getComponentName(fiber.type) or "Unknown"
						logStateUpdateScheduled(name, lane, payload)
					end
				end
			end

			if enableSchedulingProfiler then
				markStateUpdateScheduled(fiber, lane)
			end
		end,
		enqueueForceUpdate = function(inst, callback)
			local fiber = getInstance(inst)
			local eventTime = requestEventTime()
			local lane = requestUpdateLane(fiber)

			local update = createUpdate(eventTime, lane, nil, callback)
			update.tag = ForceUpdate

			if callback ~= nil then
				if __DEV__ then
					warnOnInvalidCallback(callback, "forceUpdate")
				end
				-- update.callback = callback
			end

			enqueueUpdate(fiber, update)
			scheduleUpdateOnFiber(fiber, lane, eventTime)

			if __DEV__ then
				if enableDebugTracing then
					if bit32.band(fiber.mode, DebugTracingMode) ~= 0 then
						local name = getComponentName(fiber.type) or "Unknown"
						logForceUpdateScheduled(name, lane)
					end
				end
			end

			if enableSchedulingProfiler then
				markForceUpdateScheduled(fiber, lane)
			end
		end,
	}
end

local function getClassComponentUpdater()
	if classComponentUpdater == nil then
		initializeClassComponentUpdater()
	end
	return classComponentUpdater
end

function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext)
	local instance = workInProgress.stateNode
	if instance.shouldComponentUpdate ~= nil and type(instance.shouldComponentUpdate) == "function" then
		if __DEV__ then
			if debugRenderPhaseSideEffectsForStrictMode and bit32.band(workInProgress.mode, StrictMode) ~= 0 then
				disableLogs()
				-- deviation: Pass instance so that the method receives self
				-- Invoke the function an extra time to help detect side-effects.
				local ok, result =
					xpcall(instance.shouldComponentUpdate, describeError, instance, newProps, newState, nextContext)
				-- finally
				reenableLogs()
				if not ok then
					error(result)
				end
			end
		end
		-- deviation: Call with ":" so that the method receives self
		local shouldUpdate = instance:shouldComponentUpdate(newProps, newState, nextContext)

		if __DEV__ then
			if shouldUpdate == nil then
				console.error(
					"%s.shouldComponentUpdate(): Returned nil instead of a "
						.. "boolean value. Make sure to return true or false.",
					getComponentName(ctor) or "Component"
				)
			end
		end

		return shouldUpdate
	end

	-- deviation: for us, the isPureReactComponent flag will be visible as a
	-- direct member of the 'ctor', which in reality is the component definition
	if type(ctor) == "table" and ctor.isPureReactComponent then
		return (not shallowEqual(oldProps, newProps) or not shallowEqual(oldState, newState))
	end

	return true
end

local function checkClassInstance(workInProgress: Fiber, ctor: any, newProps: any)
	local instance = workInProgress.stateNode
	if __DEV__ then
		local name = getComponentName(ctor) or "Component"
		local renderPresent = instance.render

		if not renderPresent then
			-- deviation: for us, the render function will be visible as a direct
			-- member of the 'ctor', which in reality is the component definition
			if type(ctor.render) == "function" then
				console.error(
					"%s(...): No `render` method found on the returned component "
						.. "instance: did you accidentally return an object from the constructor?",
					name
				)
			else
				console.error(
					"%s(...): No `render` method found on the returned component "
						.. "instance: you may have forgotten to define `render`.",
					name
				)
			end
		end

		if instance.getInitialState and not instance.getInitialState.isReactClassApproved and not instance.state then
			console.error(
				"getInitialState was defined on %s, a plain JavaScript class. "
					.. "This is only supported for classes created using React.createClass. "
					.. "Did you mean to define a state property instead?",
				name
			)
		end
		if instance.getDefaultProps and not instance.getDefaultProps.isReactClassApproved then
			console.error(
				"getDefaultProps was defined on %s, a plain JavaScript class. "
					.. "This is only supported for classes created using React.createClass. "
					.. "Use a static property to define defaultProps instead.",
				name
			)
		end
		-- TODO? the original check causes false positives, this adjustment should live up to the intention
		if instance.propTypes and not ctor.propTypes then
			console.error(
				"propTypes was defined as an instance property on %s. Use a static "
					.. "property to define propTypes instead.",
				name
			)
		end
		-- TODO? the original check causes false positives, this adjustment should live up to the intention
		if instance.contextType and not ctor.contextType then
			console.error(
				"contextType was defined as an instance property on %s. Use a static "
					.. "property to define contextType instead.",
				name
			)
		end

		if disableLegacyContext then
			if ctor.childContextTypes then
				console.error(
					"%s uses the legacy childContextTypes API which is no longer supported. "
						.. "Use React.createContext() instead.",
					name
				)
			end
			if ctor.contextTypes then
				console.error(
					"%s uses the legacy contextTypes API which is no longer supported. "
						.. "Use React.createContext() with static contextType instead.",
					name
				)
			end
		else
			-- TODO? the original check causes false positives, this adjustment should live up to the intention
			if instance.contextTypes and not ctor.contextTypes then
				console.error(
					"contextTypes was defined as an instance property on %s. Use a static "
						.. "property to define contextTypes instead.",
					name
				)
			end

			-- deviation: don't access fields on a function
			if
				type(ctor) == "table"
				and ctor.contextType
				and ctor.contextTypes
				and not didWarnAboutContextTypeAndContextTypes[ctor]
			then
				didWarnAboutContextTypeAndContextTypes[ctor] = true
				console.error(
					"%s declares both contextTypes and contextType static properties. "
						.. "The legacy contextTypes property will be ignored.",
					name
				)
			end
		end

		if type(instance.componentShouldUpdate) == "function" then
			console.error(
				"%s has a method called "
					.. "componentShouldUpdate(). Did you mean shouldComponentUpdate()? "
					.. "The name is phrased as a question because the function is "
					.. "expected to return a value.",
				name
			)
		end
		-- deviation: don't access fields on a function
		if type(ctor) == "table" and ctor.isPureReactComponent and instance.shouldComponentUpdate ~= nil then
			console.error(
				"%s has a method called shouldComponentUpdate(). "
					.. "shouldComponentUpdate should not be used when extending React.PureComponent. "
					.. "Please extend React.Component if shouldComponentUpdate is used.",
				getComponentName(ctor) or "A pure component"
			)
		end
		if type(instance.componentDidUnmount) == "function" then
			console.error(
				"%s has a method called "
					.. "componentDidUnmount(). But there is no such lifecycle method. "
					.. "Did you mean componentWillUnmount()?",
				name
			)
		end
		if type(instance.componentDidReceiveProps) == "function" then
			console.error(
				"%s has a method called "
					.. "componentDidReceiveProps(). But there is no such lifecycle method. "
					.. "If you meant to update the state in response to changing props, "
					.. "use componentWillReceiveProps(). If you meant to fetch data or "
					.. "run side-effects or mutations after React has updated the UI, use componentDidUpdate().",
				name
			)
		end
		if type(instance.componentWillRecieveProps) == "function" then
			console.error(
				"%s has a method called " .. "componentWillRecieveProps(). Did you mean componentWillReceiveProps()?",
				name
			)
		end
		if type(instance.UNSAFE_componentWillRecieveProps) == "function" then
			console.error(
				"%s has a method called "
					.. "UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?",
				name
			)
		end
		local hasMutatedProps = instance.props ~= newProps
		if instance.props ~= nil and hasMutatedProps then
			console.error(
				"%s(...): When calling super() in `%s`, make sure to pass "
					.. "up the same props that your component's constructor was passed.",
				name,
				name
			)
		end
		if rawget(instance, "defaultProps") then
			console.error(
				"Setting defaultProps as an instance property on %s is not supported and will be ignored."
					.. " Instead, define defaultProps as a static property on %s.",
				name,
				name
			)
		end

		if
			type(instance.getSnapshotBeforeUpdate) == "function"
			and type(instance.componentDidUpdate) ~= "function"
			and not didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate[ctor]
		then
			didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate[ctor] = true
			console.error(
				"%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). "
					.. "This component defines getSnapshotBeforeUpdate() only.",
				getComponentName(ctor)
			)
		end

		-- TODO: get function arity to see if it takes >0 arguments. if it takes 1, assume it's self, and warn
		-- if type(instance.getDerivedStateFromProps) == "function" then
		--   console.error(
		--     "%s: getDerivedStateFromProps() is defined as an instance method " ..
		--       "and will be ignored. Instead, declare it as a static method.",
		--     name
		--   )
		-- end
		-- if type(instance.getDerivedStateFromError) == "function" then
		--   console.error(
		--     "%s: getDerivedStateFromError() is defined as an instance method " ..
		--       "and will be ignored. Instead, declare it as a static method.",
		--     name
		--   )
		-- end
		-- if type(ctor.getSnapshotBeforeUpdate) == "function" then
		--   console.error(
		--     "%s: getSnapshotBeforeUpdate() is defined as a static method " ..
		--       "and will be ignored. Instead, declare it as an instance method.",
		--     name
		--   )
		-- end
		local state = instance.state
		-- deviation: It's not useful for us to try to distinguish an array from an
		-- object in this case
		-- if state and (type(state) ~= "table" or Array.isArray(state)) then
		if state ~= nil and type(state) ~= "table" then
			console.error("%s.state: must be set to an object or nil", name)
		end
		-- deviation: don't access fields on a function
		if
			type(ctor) == "table"
			and type(instance.getChildContext) == "function"
			and type(ctor.childContextTypes) ~= "table"
		then
			console.error(
				"%s.getChildContext(): childContextTypes must be defined in order to " .. "use getChildContext().",
				name
			)
		end
	end
end

local function adoptClassInstance(workInProgress: Fiber, instance: any)
	-- performance? it looks like this lazy init is a perf problem in tab switching hot path
	instance.__updater = getClassComponentUpdater()
	workInProgress.stateNode = instance
	-- The instance needs access to the fiber so that it can schedule updates
	setInstance(instance, workInProgress)
	if __DEV__ then
		instance._reactInternalInstance = fakeInternalInstance
	end
end

local function constructClassInstance(workInProgress: Fiber, ctor: any, props: any): any
	local isLegacyContextConsumer = false
	local unmaskedContext = emptyContextObject
	local context = emptyContextObject
	local contextType = ctor.contextType

	if __DEV__ then
		-- deviation: `ctor` is actually a table, in our case; use normal indexing
		if ctor["contextType"] ~= nil then
			-- TODO: Double-check this boolean for accuracy
			local isValid =
				-- Allow nil for conditional declaration
				contextType == nil or (contextType["$$typeof"] == REACT_CONTEXT_TYPE and contextType._context == nil) -- Not a <Context.Consumer>

			if not isValid and not didWarnAboutInvalidateContextType[ctor] then
				didWarnAboutInvalidateContextType[ctor] = true

				local addendum = ""
				if contextType == nil then
					addendum =
						-- deviation: s/undefined/nil
						" However, it is set to nil. " .. "This can be caused by a typo or by mixing up named and default imports. " .. "This can also happen due to a circular dependency, so " .. "try moving the createContext() call to a separate file."
				elseif type(contextType) ~= "table" then
					addendum = " However, it is set to a " .. type(contextType) .. "."
				elseif contextType["$$typeof"] == REACT_PROVIDER_TYPE then
					addendum = " Did you accidentally pass the Context.Provider instead?"
				elseif contextType._context ~= nil then
					-- <Context.Consumer>
					addendum = " Did you accidentally pass the Context.Consumer instead?"
				else
					addendum ..= " However, it is set to an object with keys {"
					for key, _ in contextType do
						addendum ..= key .. ", "
					end
					addendum ..= "}."
				end
				console.error(
					"%s defines an invalid contextType. "
						.. "contextType should point to the Context object returned by React.createContext().%s",
					getComponentName(ctor) or "Component",
					addendum
				)
			end
		end
	end

	-- performance: check for nil first to avoid typeof when possible
	if contextType ~= nil and type(contextType) == "table" then
		context = readContext(contextType)
	elseif not disableLegacyContext then
		unmaskedContext = getUnmaskedContext(workInProgress, ctor, true)
		local contextTypes = ctor.contextTypes
		isLegacyContextConsumer = contextTypes ~= nil
		context = isLegacyContextConsumer and getMaskedContext(workInProgress, unmaskedContext) or emptyContextObject
	end

	-- Instantiate twice to help detect side-effects.
	if __DEV__ then
		if debugRenderPhaseSideEffectsForStrictMode and bit32.band(workInProgress.mode, StrictMode) ~= 0 then
			disableLogs()
			-- deviation: ctor will actually refer to a class component, we use the
			-- `__ctor` function that it exposes
			local ok, result = xpcall(ctor.__ctor, describeError, props, context) -- eslint-disable-line no-new
			-- finally
			reenableLogs()

			if not ok then
				error(result)
			end
		end
	end

	-- deviation: ctor will actually refer to a class component, we use the
	-- `__ctor` function that it exposes
	local instance = ctor.__ctor(props, context)
	-- deviation: no need to worry about undefined
	-- local state = (workInProgress.memoizedState =
	--   instance.state ~= nil and instance.state ~= undefined
	--     ? instance.state
	--     : nil)
	workInProgress.memoizedState = instance.state
	local state = workInProgress.memoizedState
	adoptClassInstance(workInProgress, instance)

	if __DEV__ then
		-- deviation: Instead of checking if state is nil, we check if it is our
		-- UninitializedState singleton.
		if type(ctor.getDerivedStateFromProps) == "function" and state == UninitializedState then
			local componentName = getComponentName(ctor) or "Component"
			if not didWarnAboutUninitializedState[componentName] then
				didWarnAboutUninitializedState[componentName] = true
				-- deviation: message adjusted for accuracy with Lua "class" components
				console.error(
					"`%s` uses `getDerivedStateFromProps` but its initial state has not been initialized. "
						.. "This is not recommended. Instead, define the initial state by "
						.. "passing an object to `self:setState` in the `init` method of `%s`. "
						.. "This ensures that `getDerivedStateFromProps` arguments have a consistent shape.",
					componentName,
					-- deviation: no need to worry about undefined
					-- instance.state == nil and 'nil' or 'undefined',
					componentName
				)
			end
		end

		-- If new component APIs are defined, "unsafe" lifecycles won't be called.
		-- Warn about these lifecycles if they are present.
		-- Don't warn about react-lifecycles-compat polyfilled methods though.
		if
			type(ctor.getDerivedStateFromProps) == "function"
			or type(instance.getSnapshotBeforeUpdate) == "function"
		then
			local foundWillMountName = nil
			local foundWillReceivePropsName = nil
			local foundWillUpdateName = nil
			if
				-- FIXME: This won't work! Lua functions can't have properties
				type(instance.componentWillMount) == "function" -- and
				-- instance.componentWillMount.__suppressDeprecationWarning ~= true
			then
				foundWillMountName = "componentWillMount"
			elseif type(instance.UNSAFE_componentWillMount) == "function" then
				foundWillMountName = "UNSAFE_componentWillMount"
			end
			if
				-- FIXME: This won't work! Lua functions can't have properties
				type(instance.componentWillReceiveProps) == "function" -- and
				-- instance.componentWillReceiveProps.__suppressDeprecationWarning ~= true
			then
				foundWillReceivePropsName = "componentWillReceiveProps"
			elseif type(instance.UNSAFE_componentWillReceiveProps) == "function" then
				foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps"
			end
			if
				-- FIXME: This won't work! Lua functions can't have properties
				type(instance.componentWillUpdate) == "function" -- and
				-- instance.componentWillUpdate.__suppressDeprecationWarning ~= true
			then
				foundWillUpdateName = "componentWillUpdate"
			elseif type(instance.UNSAFE_componentWillUpdate) == "function" then
				foundWillUpdateName = "UNSAFE_componentWillUpdate"
			end
			if foundWillMountName ~= nil or foundWillReceivePropsName ~= nil or foundWillUpdateName ~= nil then
				local componentName = getComponentName(ctor) or "Component"
				local newApiName
				if type(ctor.getDerivedStateFromProps) == "function" then
					newApiName = "getDerivedStateFromProps()"
				else
					newApiName = "getSnapshotBeforeUpdate()"
				end

				local willMountName
				if foundWillMountName ~= nil then
					willMountName = ("\n  " .. tostring(foundWillMountName))
				else
					willMountName = ""
				end

				local willReceievePropsName
				if foundWillReceivePropsName ~= nil then
					willReceievePropsName = ("\n  " .. tostring(foundWillReceivePropsName))
				else
					willReceievePropsName = ""
				end

				local willUpdateName
				if foundWillUpdateName ~= nil then
					willUpdateName = "\n  " .. tostring(foundWillUpdateName)
				else
					willUpdateName = ""
				end

				if not didWarnAboutLegacyLifecyclesAndDerivedState[componentName] then
					didWarnAboutLegacyLifecyclesAndDerivedState[componentName] = true
					console.error(
						"Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n"
							.. "%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n"
							.. "The above lifecycles should be removed. Learn more about this warning here:\n"
							.. "https://reactjs.org/link/unsafe-component-lifecycles",
						componentName,
						newApiName,
						willMountName,
						willReceievePropsName,
						willUpdateName
					)
				end
			end
		end
	end

	-- Cache unmasked context so we can avoid recreating masked context unless necessary.
	-- ReactFiberContext usually updates this cache but can't for newly-created instances.
	if isLegacyContextConsumer then
		cacheContext(workInProgress, unmaskedContext, context)
	end

	return instance
end

local function callComponentWillMount(workInProgress, instance)
	local oldState = instance.state

	if instance.componentWillMount ~= nil and type(instance.componentWillMount) == "function" then
		-- deviation: Call with ":" so that the method receives self
		instance:componentWillMount()
	end
	-- TODO: Should we really run both of these?
	if instance.UNSAFE_componentWillMount ~= nil and type(instance.UNSAFE_componentWillMount) == "function" then
		-- deviation: Call with ":" so that the method receives self
		instance:UNSAFE_componentWillMount()
	end

	if oldState ~= instance.state then
		if __DEV__ then
			console.error(
				"%s.componentWillMount(): Assigning directly to this.state is "
					.. "deprecated (except inside a component's "
					.. "constructor). Use setState instead.",
				getComponentName(workInProgress.type) or "Component"
			)
		end
		getClassComponentUpdater().enqueueReplaceState(instance, instance.state)
	end
end

function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext)
	local oldState = instance.state
	if instance.componentWillReceiveProps ~= nil and type(instance.componentWillReceiveProps) == "function" then
		-- deviation: Call with ":" so that the method receives self
		instance:componentWillReceiveProps(newProps, nextContext)
	end
	if
		instance.UNSAFE_componentWillReceiveProps ~= nil
		and type(instance.UNSAFE_componentWillReceiveProps) == "function"
	then
		-- deviation: Call with ":" so that the method receives self
		instance:UNSAFE_componentWillReceiveProps(newProps, nextContext)
	end

	if instance.state ~= oldState then
		if __DEV__ then
			local componentName = getComponentName(workInProgress.type) or "Component"
			if not didWarnAboutStateAssignmentForComponent[componentName] then
				didWarnAboutStateAssignmentForComponent[componentName] = true
				console.error(
					"%s.componentWillReceiveProps(): Assigning directly to "
						.. "this.state is deprecated (except inside a component's "
						.. "constructor). Use setState instead.",
					componentName
				)
			end
		end
		getClassComponentUpdater().enqueueReplaceState(instance, instance.state)
	end
end

-- Invokes the mount life-cycles on a previously never rendered instance.
local function mountClassInstance(workInProgress: Fiber, ctor: any, newProps: any, renderLanes: Lanes)
	if __DEV__ then
		checkClassInstance(workInProgress, ctor, newProps)
	end

	local instance = workInProgress.stateNode
	instance.props = newProps
	instance.state = workInProgress.memoizedState
	-- deviation: Uses __refs instead of refs to avoid conflicts
	-- instance.refs = emptyRefsObject
	instance.__refs = emptyRefsObject

	initializeUpdateQueue(workInProgress)

	-- deviation: don't access field on a function
	local contextType
	if type(ctor) == "table" then
		contextType = ctor.contextType
	end
	-- deviation: nil check first so we don't call typeof() unnecessarily
	if contextType ~= nil and type(contextType) == "table" then
		instance.context = readContext(contextType)
	elseif disableLegacyContext then
		instance.context = emptyContextObject
	else
		local unmaskedContext = getUnmaskedContext(workInProgress, ctor, true)
		instance.context = getMaskedContext(workInProgress, unmaskedContext)
	end

	if __DEV__ then
		if instance.state == newProps then
			local componentName = getComponentName(ctor) or "Component"
			if not didWarnAboutDirectlyAssigningPropsToState[componentName] then
				didWarnAboutDirectlyAssigningPropsToState[componentName] = true
				console.error(
					"%s: It is not recommended to assign props directly to state "
						.. "because updates to props won't be reflected in state. "
						.. "In most cases, it is better to use props directly.",
					componentName
				)
			end
		end

		if bit32.band(workInProgress.mode, StrictMode) ~= 0 then
			ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance)
		end

		if warnAboutDeprecatedLifecycles then
			ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance)
		end
	end

	processUpdateQueue(workInProgress, newProps, instance, renderLanes)
	instance.state = workInProgress.memoizedState

	-- deviation START: don't access field on a function, cache typeofCtor
	local typeofCtor = type(ctor)
	local getDerivedStateFromProps
	if type(ctor) == "table" then
		getDerivedStateFromProps = ctor.getDerivedStateFromProps
	end
	if getDerivedStateFromProps ~= nil and type(getDerivedStateFromProps) == "function" then
		applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps)
		instance.state = workInProgress.memoizedState
	end

	-- In order to support react-lifecycles-compat polyfilled components,
	-- Unsafe lifecycles should not be invoked for components using the new APIs.
	-- deviation: don't access fields on a function
	if
		typeofCtor == "table"
		and type(ctor.getDerivedStateFromProps) ~= "function"
		and type(instance.getSnapshotBeforeUpdate) ~= "function"
		and (type(instance.UNSAFE_componentWillMount) == "function" or type(instance.componentWillMount) == "function")
	then
		callComponentWillMount(workInProgress, instance)
		-- If we had additional state updates during this life-cycle, let's
		-- process them now.
		processUpdateQueue(workInProgress, newProps, instance, renderLanes)
		instance.state = workInProgress.memoizedState
	end

	if type(instance.componentDidMount) == "function" then
		if __DEV__ and enableDoubleInvokingEffects then
			workInProgress.flags = bit32.bor(workInProgress.flags, bit32.bor(MountLayoutDev, Update))
		else
			workInProgress.flags = bit32.bor(workInProgress.flags, Update)
		end
	end
end

function resumeMountClassInstance(workInProgress: Fiber, ctor: any, newProps: any, renderLanes: Lanes): boolean
	local instance = workInProgress.stateNode

	local oldProps = workInProgress.memoizedProps
	instance.props = oldProps

	local oldContext = instance.context
	local contextType = ctor.contextType
	local nextContext = emptyContextObject

	-- performance: check for nil first to avoid typeof when possible
	if contextType ~= nil and type(contextType) == "table" then
		nextContext = readContext(contextType)
	elseif not disableLegacyContext then
		local nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true)
		nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext)
	end

	local getDerivedStateFromProps = ctor.getDerivedStateFromProps
	local hasNewLifecycles = type(getDerivedStateFromProps) == "function"
		or type(instance.getSnapshotBeforeUpdate) == "function"

	-- NOTE: During these life-cycles, instance.props/instance.state are what
	-- ever the previously attempted to render - not the "current". However,
	-- during componentDidUpdate we pass the "current" props.

	-- In order to support react-lifecycles-compat polyfilled components,
	-- Unsafe lifecycles should not be invoked for components using the new APIs.
	if
		not hasNewLifecycles
		and (
			type(instance.UNSAFE_componentWillReceiveProps) == "function"
			or type(instance.componentWillReceiveProps) == "function"
		)
	then
		if oldProps ~= newProps or oldContext ~= nextContext then
			callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext)
		end
	end

	resetHasForceUpdateBeforeProcessing()

	local oldState = workInProgress.memoizedState
	instance.state = oldState
	local newState = oldState
	processUpdateQueue(workInProgress, newProps, instance, renderLanes)
	newState = workInProgress.memoizedState
	if
		oldProps == newProps
		and oldState == newState
		and not hasContextChanged()
		and not checkHasForceUpdateAfterProcessing()
	then
		-- If an update was already in progress, we should schedule an Update
		-- effect even though we're bailing out, so that cWU/cDU are called.
		if type(instance.componentDidMount) == "function" then
			if __DEV__ and enableDoubleInvokingEffects then
				workInProgress.flags = bit32.bor(workInProgress.flags, MountLayoutDev, Update)
			else
				workInProgress.flags = bit32.bor(workInProgress.flags, Update)
			end
		end
		return false
	end

	if getDerivedStateFromProps ~= nil and type(getDerivedStateFromProps) == "function" then
		applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps)
		newState = workInProgress.memoizedState
	end

	local shouldUpdate = checkHasForceUpdateAfterProcessing()
		or checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext)

	if shouldUpdate then
		-- In order to support react-lifecycles-compat polyfilled components,
		-- Unsafe lifecycles should not be invoked for components using the new APIs.
		if
			not hasNewLifecycles
			and (
				type(instance.UNSAFE_componentWillMount) == "function"
				or type(instance.componentWillMount) == "function"
			)
		then
			if type(instance.componentWillMount) == "function" then
				instance:componentWillMount()
			end
			if type(instance.UNSAFE_componentWillMount) == "function" then
				instance:UNSAFE_componentWillMount()
			end
		end
		if type(instance.componentDidMount) == "function" then
			if __DEV__ and enableDoubleInvokingEffects then
				workInProgress.flags = bit32.bor(workInProgress.flags, MountLayoutDev, Update)
			else
				workInProgress.flags = bit32.bor(workInProgress.flags, Update)
			end
		end
	else
		-- If an update was already in progress, we should schedule an Update
		-- effect even though we're bailing out, so that cWU/cDU are called.
		if type(instance.componentDidMount) == "function" then
			if __DEV__ and enableDoubleInvokingEffects then
				workInProgress.flags = bit32.bor(workInProgress.flags, MountLayoutDev, Update)
			else
				workInProgress.flags = bit32.bor(workInProgress.flags, Update)
			end
		end

		-- If shouldComponentUpdate returned false, we should still update the
		-- memoized state to indicate that this work can be reused.
		workInProgress.memoizedProps = newProps
		workInProgress.memoizedState = newState
	end

	-- Update the existing instance's state, props, and context pointers even
	-- if shouldComponentUpdate returns false.
	instance.props = newProps
	instance.state = newState
	instance.context = nextContext

	return shouldUpdate
end

-- Invokes the update life-cycles and returns false if it shouldn't rerender.
local function updateClassInstance(
	current: Fiber,
	workInProgress: Fiber,
	ctor: any,
	newProps: any,
	renderLanes: Lanes
): boolean
	local instance = workInProgress.stateNode

	cloneUpdateQueue(current, workInProgress)

	local unresolvedOldProps = workInProgress.memoizedProps
	local oldProps = if workInProgress.type == workInProgress.elementType
		then unresolvedOldProps
		else resolveDefaultProps(workInProgress.type, unresolvedOldProps)
	instance.props = oldProps
	local unresolvedNewProps = workInProgress.pendingProps

	local oldContext = instance.context
	local contextType
	local getDerivedStateFromProps
	-- deviation: don't access fields on a function
	if type(ctor) == "table" then
		contextType = ctor.contextType
		getDerivedStateFromProps = ctor.getDerivedStateFromProps
	end
	local nextContext = emptyContextObject
	if type(contextType) == "table" then
		nextContext = readContext(contextType)
	elseif not disableLegacyContext then
		local nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true)
		nextContext = getMaskedContext(workInProgress, nextUnmaskedContext)
	end

	local hasNewLifecycles = (getDerivedStateFromProps ~= nil and type(getDerivedStateFromProps) == "function")
		or (instance.getSnapshotBeforeUpdate ~= nil and type(instance.getSnapshotBeforeUpdate) == "function")

	-- NOTE: During these life-cycles, instance.props/instance.state are what
	-- ever the previously attempted to render - not the "current". However,
	-- during componentDidUpdate we pass the "current" props.

	-- In order to support react-lifecycles-compat polyfilled components,
	-- Unsafe lifecycles should not be invoked for components using the new APIs.
	if
		not hasNewLifecycles
		and (
			(
				instance.UNSAFE_componentWillReceiveProps ~= nil
				and type(instance.UNSAFE_componentWillReceiveProps) == "function"
			)
			or (instance.componentWillReceiveProps ~= nil and type(instance.componentWillReceiveProps) == "function")
		)
	then
		if unresolvedOldProps ~= unresolvedNewProps or oldContext ~= nextContext then
			callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext)
		end
	end

	resetHasForceUpdateBeforeProcessing()

	local oldState = workInProgress.memoizedState
	instance.state = oldState
	local newState = instance.state
	processUpdateQueue(workInProgress, newProps, instance, renderLanes)
	newState = workInProgress.memoizedState

	if
		unresolvedOldProps == unresolvedNewProps
		and oldState == newState
		and not hasContextChanged()
		and not checkHasForceUpdateAfterProcessing()
	then
		-- If an update was already in progress, we should schedule an Update
		-- effect even though we're bailing out, so that cWU/cDU are called.
		if instance.componentDidUpdate ~= nil and type(instance.componentDidUpdate) == "function" then
			if unresolvedOldProps ~= current.memoizedProps or oldState ~= current.memoizedState then
				workInProgress.flags = bit32.bor(workInProgress.flags, Update)
			end
		end
		if instance.getSnapshotBeforeUpdate ~= nil and type(instance.getSnapshotBeforeUpdate) == "function" then
			if unresolvedOldProps ~= current.memoizedProps or oldState ~= current.memoizedState then
				workInProgress.flags = bit32.bor(workInProgress.flags, Snapshot)
			end
		end
		return false
	end

	if getDerivedStateFromProps ~= nil and type(getDerivedStateFromProps) == "function" then
		applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps)
		newState = workInProgress.memoizedState
	end

	local shouldUpdate = checkHasForceUpdateAfterProcessing()
		or checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext)

	if shouldUpdate then
		-- In order to support react-lifecycles-compat polyfilled components,
		-- Unsafe lifecycles should not be invoked for components using the new APIs.
		if
			not hasNewLifecycles
			and (
				(instance.UNSAFE_componentWillUpdate ~= nil and type(instance.UNSAFE_componentWillUpdate) == "function")
				or (instance.componentWillUpdate ~= nil and type(instance.componentWillUpdate) == "function")
			)
		then
			if instance.componentWillUpdate ~= nil and type(instance.componentWillUpdate) == "function" then
				-- deviation: Call with ":" so that the method receives self
				instance:componentWillUpdate(newProps, newState, nextContext)
			end
			if
				instance.UNSAFE_componentWillUpdate ~= nil
				and type(instance.UNSAFE_componentWillUpdate) == "function"
			then
				-- deviation: Call with ":" so that the method receives self
				instance:UNSAFE_componentWillUpdate(newProps, newState, nextContext)
			end
		end
		if instance.componentDidUpdate ~= nil and type(instance.componentDidUpdate) == "function" then
			workInProgress.flags = bit32.bor(workInProgress.flags, Update)
		end
		if instance.getSnapshotBeforeUpdate ~= nil and type(instance.getSnapshotBeforeUpdate) == "function" then
			workInProgress.flags = bit32.bor(workInProgress.flags, Snapshot)
		end
	else
		-- If an update was already in progress, we should schedule an Update
		-- effect even though we're bailing out, so that cWU/cDU are called.
		if instance.componentDidUpdate ~= nil and type(instance.componentDidUpdate) == "function" then
			if unresolvedOldProps ~= current.memoizedProps or oldState ~= current.memoizedState then
				workInProgress.flags = bit32.bor(workInProgress.flags, Update)
			end
		end
		if instance.getSnapshotBeforeUpdate ~= nil and type(instance.getSnapshotBeforeUpdate) == "function" then
			if unresolvedOldProps ~= current.memoizedProps or oldState ~= current.memoizedState then
				workInProgress.flags = bit32.bor(workInProgress.flags, Snapshot)
			end
		end

		-- If shouldComponentUpdate returned false, we should still update the
		-- memoized props/state to indicate that this work can be reused.
		workInProgress.memoizedProps = newProps
		workInProgress.memoizedState = newState
	end

	-- Update the existing instance's state, props, and context pointers even
	-- if shouldComponentUpdate returns false.
	instance.props = newProps
	instance.state = newState
	instance.context = nextContext

	return shouldUpdate
end

return {
	adoptClassInstance = adoptClassInstance,
	constructClassInstance = constructClassInstance,
	mountClassInstance = mountClassInstance,
	resumeMountClassInstance = resumeMountClassInstance,
	updateClassInstance = updateClassInstance,

	applyDerivedStateFromProps = applyDerivedStateFromProps,
	-- deviation: this should be safe to export, since it gets assigned only once
	emptyRefsObject = emptyRefsObject,
}
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="343">
              <Properties>
                <string name="Name">ReactFiberCommitWork.new</string>
                <string name="Source"><![CDATA[-- upstream: https://github.com/facebook/react/blob/7f08e908b10a58cda902611378ec053003d371ed/packages/react-reconciler/src/ReactFiberCommitWork.new.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]
-- FIXME (roblox): remove this when our unimplemented
local function unimplemented(message: string)
	print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
	print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
	print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
	print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
	print("UNIMPLEMENTED ERROR: " .. tostring(message))
	error("FIXME (roblox): " .. message .. " is unimplemented", 2)
end

local __DEV__ = _G.__DEV__ :: boolean
local __YOLO__ = _G.__YOLO__ :: boolean
-- deviation: keep track of the pcall run depth and stop wrapping pcalls after we hit MAX_RUN_DEPTH.
-- NOTE: if this number is raised to 195, the test in RoactRecursiveLayoutPcallDepth will fail
local runDepth = 0
local MAX_RUN_DEPTH = 20

local function isCallable(value)
	if typeof(value) == "function" then
		return true
	end
	if typeof(value) == "table" then
		local mt = getmetatable(value)
		if mt and rawget(mt, "__call") then
			return true
		end
		if value._isMockFunction then
			return true
		end
	end
	return false
end

local Packages = script.Parent.Parent
-- NOTE: use patched console from shared
local console = require(Packages.Shared).console
local LuauPolyfill = require(Packages.LuauPolyfill)
local Error = LuauPolyfill.Error
local Set = LuauPolyfill.Set
type Array<T> = { [number]: T }

local ReactFiberHostConfig = require(script.Parent.ReactFiberHostConfig)
type Instance = ReactFiberHostConfig.Instance
type Container = ReactFiberHostConfig.Container
type TextInstance = ReactFiberHostConfig.TextInstance
-- deviation START: we have to inline, because type imports don't work across dynamic requires like HostConfig
-- local type {
--   SuspenseInstance,
--   ChildSet,
--   UpdatePayload,
type UpdatePayload = Array<any>
-- } = require(script.Parent.ReactFiberHostConfig)
-- deviation END
local ReactInternalTypes = require(script.Parent.ReactInternalTypes)
type Fiber = ReactInternalTypes.Fiber
type FiberRoot = ReactInternalTypes.FiberRoot
local ReactFiberSuspenseComponent = require(script.Parent["ReactFiberSuspenseComponent.new"])
type SuspenseState = ReactFiberSuspenseComponent.SuspenseState

local ReactUpdateQueueModule = require(script.Parent["ReactUpdateQueue.new"])
type UpdateQueue<T> = ReactInternalTypes.UpdateQueue<T>

-- local ReactFiberHooks = require(script.Parent["ReactFiberHooks.new"])
-- type FunctionComponentUpdateQueue = ReactFiberHooks.FunctionComponentUpdateQueue
-- deviation: inline the typedef here to avoid circular dependency
type Effect = {
	tag: HookFlags,
	create: () -> (() -> ())?,
	destroy: (() -> ())?,
	deps: Array<any>?,
	next: Effect,
}
type FunctionComponentUpdateQueue = {
	lastEffect: Effect?,
}

local ReactTypes = require(Packages.Shared)
type Wakeable = ReactTypes.Wakeable

type ReactPriorityLevel = ReactInternalTypes.ReactPriorityLevel
local ReactFiberOffscreenComponent = require(script.Parent.ReactFiberOffscreenComponent)
type OffscreenState = ReactFiberOffscreenComponent.OffscreenState
local ReactHookEffectTags = require(script.Parent.ReactHookEffectTags)
type HookFlags = ReactHookEffectTags.HookFlags

-- deviation: import tracing as a top-level export to avoid direct file access
local Schedule_tracing_wrap = require(Packages.Scheduler).tracing.unstable_wrap
local ReactFeatureFlags = require(Packages.Shared).ReactFeatureFlags
local enableSchedulerTracing = ReactFeatureFlags.enableSchedulerTracing
local enableProfilerTimer = ReactFeatureFlags.enableProfilerTimer
local enableProfilerCommitHooks = ReactFeatureFlags.enableProfilerCommitHooks
-- local enableSuspenseServerRenderer = ReactFeatureFlags.enableSuspenseServerRenderer
-- local enableFundamentalAPI = ReactFeatureFlags.enableFundamentalAPI
local enableSuspenseCallback = ReactFeatureFlags.enableSuspenseCallback
-- local enableScopeAPI = ReactFeatureFlags.enableScopeAPI
local enableDoubleInvokingEffects = ReactFeatureFlags.enableDoubleInvokingEffects
local ReactWorkTags = require(script.Parent.ReactWorkTags)
local FunctionComponent = ReactWorkTags.FunctionComponent
local ForwardRef = ReactWorkTags.ForwardRef
local ClassComponent = ReactWorkTags.ClassComponent
local HostRoot = ReactWorkTags.HostRoot
local HostComponent = ReactWorkTags.HostComponent
local HostText = ReactWorkTags.HostText
local HostPortal = ReactWorkTags.HostPortal
local Profiler = ReactWorkTags.Profiler
local SuspenseComponent = ReactWorkTags.SuspenseComponent
local DehydratedFragment = ReactWorkTags.DehydratedFragment
local IncompleteClassComponent = ReactWorkTags.IncompleteClassComponent
local MemoComponent = ReactWorkTags.MemoComponent
local SimpleMemoComponent = ReactWorkTags.SimpleMemoComponent
local SuspenseListComponent = ReactWorkTags.SuspenseListComponent
local FundamentalComponent = ReactWorkTags.FundamentalComponent
local ScopeComponent = ReactWorkTags.ScopeComponent
local Block = ReactWorkTags.Block
local OffscreenComponent = ReactWorkTags.OffscreenComponent
local LegacyHiddenComponent = ReactWorkTags.LegacyHiddenComponent
local ReactErrorUtils = require(Packages.Shared).ReactErrorUtils
local invokeGuardedCallback = ReactErrorUtils.invokeGuardedCallback
local hasCaughtError = ReactErrorUtils.hasCaughtError
local clearCaughtError = ReactErrorUtils.clearCaughtError
local ReactFiberFlags = require(script.Parent.ReactFiberFlags)
local NoFlags = ReactFiberFlags.NoFlags
local ContentReset = ReactFiberFlags.ContentReset
local Placement = ReactFiberFlags.Placement
local Snapshot = ReactFiberFlags.Snapshot
local Update = ReactFiberFlags.Update
local Callback = ReactFiberFlags.Callback
local LayoutMask = ReactFiberFlags.LayoutMask
local PassiveMask = ReactFiberFlags.PassiveMask
local Ref = ReactFiberFlags.Ref
local getComponentName = require(Packages.Shared).getComponentName
local invariant = require(Packages.Shared).invariant
local describeError = require(Packages.Shared).describeError
local ReactCurrentFiber = require(script.Parent.ReactCurrentFiber)
--  ROBLOX deviation: this property would be captured as values instead of bound
local currentDebugFiberInDEV = ReactCurrentFiber.current
local resetCurrentDebugFiberInDEV = ReactCurrentFiber.resetCurrentFiber
local setCurrentDebugFiberInDEV = ReactCurrentFiber.setCurrentFiber
local onCommitUnmount = require(script.Parent["ReactFiberDevToolsHook.new"]).onCommitUnmount
local resolveDefaultProps = require(script.Parent["ReactFiberLazyComponent.new"]).resolveDefaultProps
local ReactProfilerTimer = require(script.Parent["ReactProfilerTimer.new"])
local startLayoutEffectTimer = ReactProfilerTimer.startLayoutEffectTimer
local recordPassiveEffectDuration = ReactProfilerTimer.recordPassiveEffectDuration
local recordLayoutEffectDuration = ReactProfilerTimer.recordLayoutEffectDuration
local startPassiveEffectTimer = ReactProfilerTimer.startPassiveEffectTimer
local getCommitTime = ReactProfilerTimer.getCommitTime
local ProfileMode = require(script.Parent.ReactTypeOfMode).ProfileMode
local commitUpdateQueue = ReactUpdateQueueModule.commitUpdateQueue
local getPublicInstance = ReactFiberHostConfig.getPublicInstance
local supportsMutation = ReactFiberHostConfig.supportsMutation
local supportsPersistence = ReactFiberHostConfig.supportsPersistence
local supportsHydration = ReactFiberHostConfig.supportsHydration
local commitMount = ReactFiberHostConfig.commitMount
local commitUpdate = ReactFiberHostConfig.commitUpdate
local resetTextContent = ReactFiberHostConfig.resetTextContent
local commitTextUpdate = ReactFiberHostConfig.commitTextUpdate
local appendChild = ReactFiberHostConfig.appendChild
local appendChildToContainer = ReactFiberHostConfig.appendChildToContainer
local insertBefore = ReactFiberHostConfig.insertBefore
local insertInContainerBefore = ReactFiberHostConfig.insertInContainerBefore
local removeChild = ReactFiberHostConfig.removeChild
local removeChildFromContainer = ReactFiberHostConfig.removeChildFromContainer
-- local clearSuspenseBoundary = ReactFiberHostConfig.clearSuspenseBoundary
-- local clearSuspenseBoundaryFromContainer = ReactFiberHostConfig.clearSuspenseBoundaryFromContainer
-- local replaceContainerChildren = ReactFiberHostConfig.replaceContainerChildren
-- local createContainerChildSet = ReactFiberHostConfig.createContainerChildSet
local hideInstance = ReactFiberHostConfig.hideInstance
local hideTextInstance = ReactFiberHostConfig.hideTextInstance
local unhideInstance = ReactFiberHostConfig.unhideInstance
local unhideTextInstance = ReactFiberHostConfig.unhideTextInstance
-- local unmountFundamentalComponent = ReactFiberHostConfig.unmountFundamentalComponent
-- local updateFundamentalComponent = ReactFiberHostConfig.updateFundamentalComponent
-- local commitHydratedContainer = ReactFiberHostConfig.commitHydratedContainer
local commitHydratedSuspenseInstance = ReactFiberHostConfig.commitHydratedSuspenseInstance
local clearContainer = ReactFiberHostConfig.clearContainer
-- local prepareScopeUpdate = ReactFiberHostConfig.prepareScopeUpdate

-- deviation: Lazy init to avoid circular dependencies
local ReactFiberWorkLoop

local function resolveRetryWakeable(boundaryFiber: Fiber, wakeable: Wakeable): ()
	if not ReactFiberWorkLoop then
		ReactFiberWorkLoop = require(script.Parent["ReactFiberWorkLoop.new"]) :: any
	end
	ReactFiberWorkLoop.resolveRetryWakeable(boundaryFiber, wakeable)
end

local function markCommitTimeOfFallback(): ()
	if not ReactFiberWorkLoop then
		ReactFiberWorkLoop = require(script.Parent["ReactFiberWorkLoop.new"]) :: any
	end
	ReactFiberWorkLoop.markCommitTimeOfFallback()
end

-- deviation: stub to allow dependency injection that breaks circular dependency
local function schedulePassiveEffectCallback(): ()
	console.warn("ReactFiberCommitWork: schedulePassiveEffectCallback causes a dependency cycle\n" .. debug.traceback())
end

-- deviation: stub to allow dependency injection that breaks circular dependency
local function captureCommitPhaseError(rootFiber: Fiber, sourceFiber: Fiber | nil, error_: any?): ()
	console.warn("ReactFiberCommitWork: captureCommitPhaseError causes a dependency cycle")
	error(error_)
end

local NoHookEffect = ReactHookEffectTags.NoFlags
local HookHasEffect = ReactHookEffectTags.HasEffect
local HookLayout = ReactHookEffectTags.Layout
local HookPassive = ReactHookEffectTags.Passive

-- deviation: lazy init to break cyclic dependency
local didWarnAboutReassigningPropsRef
local didWarnAboutReassigningProps = function()
	if not didWarnAboutReassigningPropsRef then
		didWarnAboutReassigningPropsRef = require(script.Parent["ReactFiberBeginWork.new"]).didWarnAboutReassigningProps
	end
	return didWarnAboutReassigningPropsRef
end

-- deviation: Common types
type Set<T> = { [T]: boolean }

-- deviation: pre-declare functions when necessary
local isHostParent, getHostSibling, insertOrAppendPlacementNode, insertOrAppendPlacementNodeIntoContainer, commitLayoutEffectsForHostRoot, commitLayoutEffectsForHostComponent, commitLayoutEffectsForClassComponent, unmountHostComponents, commitNestedUnmounts, commitUnmount

-- Used to avoid traversing the return path to find the nearest Profiler ancestor during commit.
local nearestProfilerOnStack: Fiber | nil = nil

-- deviation: Not possible to return `undefined` in lua
-- local didWarnAboutUndefinedSnapshotBeforeUpdate: Set<any>? = nil
-- if __DEV__ then
--   didWarnAboutUndefinedSnapshotBeforeUpdate = {}
-- end

-- local PossiblyWeakSet = typeof WeakSet == 'function' ? WeakSet : Set

local function callComponentWillUnmountWithTimer(current, instance)
	instance.props = current.memoizedProps
	instance.state = current.memoizedState
	if enableProfilerTimer and enableProfilerCommitHooks and bit32.band(current.mode, ProfileMode) ~= 0 then
		-- performance? we could hoist start...Timer() out and eliminate the anon function, but then the timer would incldue the pcall overhead
		local ok, exception = xpcall(function()
			startLayoutEffectTimer()
			-- deviation: Call with ":" so that the method receives self
			instance:componentWillUnmount()
		end, describeError)

		recordLayoutEffectDuration(current)

		if not ok then
			error(exception)
		end
	else
		-- deviation: Call with ":" so that the method receives self
		instance:componentWillUnmount()
	end
end

-- Capture errors so they don't interrupt unmounting.
function safelyCallComponentWillUnmount(current: Fiber, instance: any, nearestMountedAncestor): ()
	-- performance: eliminate the __DEV__ and invokeGuardedCallback, like React 18 has done
	local ok, error_ = xpcall(callComponentWillUnmountWithTimer, describeError, current, instance)

	if not ok then
		captureCommitPhaseError(current, nearestMountedAncestor, error_)
	end
end

local function safelyDetachRef(current: Fiber, nearestMountedAncestor: Fiber): ()
	local ref = current.ref
	if ref ~= nil then
		if typeof(ref) == "function" then
			-- performance: eliminate the __DEV__ and invokeGuardedCallback, like React 18 has done
			local ok, error_ = xpcall(ref, describeError)
			if not ok then
				captureCommitPhaseError(current, nearestMountedAncestor, error_)
			end
		else
			-- FIXME Luau: next line gets Expected type table, got 'RefObject | {| [string]: any, _stringRef: string? |}' instead
			ref.current = nil
		end
	end
end

local function safelyCallDestroy(current: Fiber, nearestMountedAncestor: Fiber | nil, destroy: () -> ()): ()
	-- performance: eliminate the __DEV__ and invokeGuardedCallback, like React 18 has done
	local ok, error_ = xpcall(destroy, describeError)
	if not ok then
		captureCommitPhaseError(current, nearestMountedAncestor, error_)
	end
end

local function commitBeforeMutationLifeCycles(current: Fiber | nil, finishedWork: Fiber): ()
	if
		finishedWork.tag == FunctionComponent
		or finishedWork.tag == ForwardRef
		or finishedWork.tag == SimpleMemoComponent
		or finishedWork.tag == Block
	then
		return
	elseif finishedWork.tag == ClassComponent then
		if bit32.band(finishedWork.flags, Snapshot) ~= 0 then
			if current ~= nil then
				local prevProps = (current :: Fiber).memoizedProps
				local prevState = (current :: Fiber).memoizedState
				local instance = finishedWork.stateNode
				-- We could update instance props and state here,
				-- but instead we rely on them being set during last render.
				-- TODO: revisit this when we implement resuming.
				if __DEV__ then
					if finishedWork.type == finishedWork.elementType and not didWarnAboutReassigningProps then
						if instance.props ~= finishedWork.memoizedProps then
							console.error(
								"Expected %s props to match memoized props before "
									.. "getSnapshotBeforeUpdate. "
									.. "This might either be because of a bug in React, or because "
									.. "a component reassigns its own `this.props`. "
									.. "Please file an issue.",
								getComponentName(finishedWork.type) or "instance"
							)
						end
						if instance.state ~= finishedWork.memoizedState then
							console.error(
								"Expected %s state to match memoized state before "
									.. "getSnapshotBeforeUpdate. "
									.. "This might either be because of a bug in React, or because "
									.. "a component reassigns its own `this.state`. "
									.. "Please file an issue.",
								getComponentName(finishedWork.type) or "instance"
							)
						end
					end
				end
				-- deviation: Call with ':' instead of '.' so that self is available
				local snapshot = instance:getSnapshotBeforeUpdate(
					finishedWork.elementType == finishedWork.type and prevProps
						or resolveDefaultProps(finishedWork.type, prevProps),
					prevState
				)
				if __DEV__ then
					-- deviation: not possible to return `undefined` in Lua
					-- local didWarnSet = ((didWarnAboutUndefinedSnapshotBeforeUpdate: any): Set<mixed>)
					-- if snapshot == nil and not didWarnSet[finishedWork.type] then
					--   didWarnSet[finishedWork.type] = true
					--   console.error(
					--     "%s.getSnapshotBeforeUpdate(): A snapshot value (or nil) " ..
					--       "must be returned. You have returned undefined.",
					--     getComponentName(finishedWork.type)
					--   )
					-- end
				end
				instance.__reactInternalSnapshotBeforeUpdate = snapshot
			end
		end
		return
	elseif finishedWork.tag == HostRoot then
		if supportsMutation then
			if bit32.band(finishedWork.flags, Snapshot) ~= 0 then
				local root = finishedWork.stateNode
				clearContainer(root.containerInfo)
			end
		end
		return
	elseif
		finishedWork.tag == HostComponent
		or finishedWork.tag == HostText
		or finishedWork.tag == HostPortal
		or finishedWork.tag == IncompleteClassComponent
	then
		-- Nothing to do for these component types
		return
	end
	invariant(
		false,
		"This unit of work tag should not have side-effects. This error is "
			.. "likely caused by a bug in React. Please file an issue."
	)
end

local function commitHookEffectListUnmount(flags: HookFlags, finishedWork: Fiber, nearestMountedAncestor: Fiber?)
	local updateQueue: FunctionComponentUpdateQueue | nil = finishedWork.updateQueue
	local lastEffect
	if updateQueue ~= nil then
		lastEffect = (updateQueue :: FunctionComponentUpdateQueue).lastEffect
	end

	if lastEffect ~= nil then
		local firstEffect = lastEffect.next
		local effect = firstEffect
		repeat
			if bit32.band(effect.tag, flags) == flags then
				-- Unmount
				local destroy = effect.destroy
				effect.destroy = nil
				if destroy ~= nil then
					safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy)
				end
			end
			effect = effect.next
		until effect == firstEffect
	end
end

local function commitHookEffectListMount(flags: HookFlags, finishedWork: Fiber)
	local updateQueue: FunctionComponentUpdateQueue | nil = finishedWork.updateQueue :: any
	local lastEffect = if updateQueue ~= nil then updateQueue.lastEffect else nil
	if lastEffect ~= nil then
		local firstEffect = lastEffect.next
		local effect = firstEffect
		repeat
			if bit32.band(effect.tag, flags) == flags then
				-- Mount
				local create = effect.create
				effect.destroy = create()

				if __DEV__ then
					local destroy = effect.destroy
					if destroy ~= nil and typeof(destroy) ~= "function" then
						local addendum
						if destroy == nil then
							addendum = " You returned nil. If your effect does not require clean "
								.. "up, return nil (or nothing)."
						elseif typeof(destroy.andThen) == "function" then
							addendum =
								-- FIXME: write a real program that does the equivalent and update this example, LUAFDN-754
								"\n\nIt looks like you wrote useEffect(Promise.new(function() --[[...]] end) or returned a Promise. " .. "Instead, write the async function inside your effect " .. "and call it immediately:\n\n" .. "useEffect(function()\n" .. "  function fetchData()\n" .. "    -- You can await here\n" .. "    local response = MyAPI.getData(someId):await()\n" .. "    -- ...\n" .. "  end\n" .. "  fetchData()\n" .. "end, {someId}) -- Or {} if effect doesn't need props or state\n\n" .. "Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching"
						else
							addendum = " You returned: " .. destroy
						end
						console.error(
							"An effect function must not return anything besides a function, "
								.. "which is used for clean-up.%s",
							addendum
						)
					end
				end
			end
			effect = effect.next
		until effect == firstEffect
	end
end

function commitProfilerPassiveEffect(finishedRoot: FiberRoot, finishedWork: Fiber): ()
	if enableProfilerTimer and enableProfilerCommitHooks then
		if finishedWork.tag == Profiler then
			local passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration
			local id, onPostCommit = finishedWork.memoizedProps.id, finishedWork.memoizedProps.onPostCommit

			-- This value will still reflect the previous commit phase.
			-- It does not get reset until the start of the next commit phase.
			local commitTime = getCommitTime()

			if typeof(onPostCommit) == "function" then
				if enableSchedulerTracing then
					onPostCommit(
						id,
						if finishedWork.alternate == nil then "mount" else "update",
						passiveEffectDuration,
						commitTime,
						finishedRoot.memoizedInteractions
					)
				else
					onPostCommit(
						id,
						if finishedWork.alternate == nil then "mount" else "update",
						passiveEffectDuration,
						commitTime
					)
				end
			end
		end
	end
end

local function recursivelyCommitLayoutEffects(
	finishedWork: Fiber,
	finishedRoot: FiberRoot,
	-- deviation: pass in these functions to avoid dependency cycle
	_captureCommitPhaseError: (
		sourceFiber: Fiber,
		nearestMountedAncestor: Fiber?,
		error: any
	) -> (),
	_schedulePassiveEffectCallback: () -> ()
)
	if _captureCommitPhaseError ~= nil then
		captureCommitPhaseError = _captureCommitPhaseError
	end
	if _schedulePassiveEffectCallback ~= nil then
		schedulePassiveEffectCallback = _schedulePassiveEffectCallback
	end
	local flags = finishedWork.flags
	local tag = finishedWork.tag
	if tag == Profiler then
		local prevProfilerOnStack = nil
		if enableProfilerTimer and enableProfilerCommitHooks then
			prevProfilerOnStack = nearestProfilerOnStack
			nearestProfilerOnStack = finishedWork
		end

		local child = finishedWork.child
		while child ~= nil do
			local primarySubtreeFlags = bit32.band(finishedWork.subtreeFlags, LayoutMask)
			if primarySubtreeFlags ~= NoFlags then
				if __DEV__ then
					local prevCurrentFiberInDEV = currentDebugFiberInDEV
					setCurrentDebugFiberInDEV(child)
					invokeGuardedCallback(
						nil,
						recursivelyCommitLayoutEffects,
						nil,
						child,
						finishedRoot,
						-- deviation: pass in these functions to avoid dependency cycle
						captureCommitPhaseError,
						schedulePassiveEffectCallback
					)
					if hasCaughtError() then
						local error_ = clearCaughtError()
						captureCommitPhaseError(child, finishedWork, error_)
					end
					if prevCurrentFiberInDEV ~= nil then
						setCurrentDebugFiberInDEV(prevCurrentFiberInDEV)
					else
						resetCurrentDebugFiberInDEV()
					end
				else
					local ok, error_ = xpcall(
						-- deviation: pass in captureCommitPhaseError function to avoid dependency cycle
						recursivelyCommitLayoutEffects,
						describeError,
						child,
						finishedRoot,
						captureCommitPhaseError,
						schedulePassiveEffectCallback
					)
					if not ok then
						captureCommitPhaseError(child, finishedWork, error_)
					end
				end
			end
			child = child.sibling
		end

		local primaryFlags = bit32.band(flags, bit32.bor(Update, Callback))
		if primaryFlags ~= NoFlags then
			if enableProfilerTimer then
				if __DEV__ then
					local prevCurrentFiberInDEV = currentDebugFiberInDEV
					setCurrentDebugFiberInDEV(finishedWork)
					invokeGuardedCallback(nil, commitLayoutEffectsForProfiler, nil, finishedWork, finishedRoot)
					if hasCaughtError() then
						local error_ = clearCaughtError()
						captureCommitPhaseError(finishedWork, finishedWork.return_, error_)
					end
					if prevCurrentFiberInDEV ~= nil then
						setCurrentDebugFiberInDEV(prevCurrentFiberInDEV)
					else
						resetCurrentDebugFiberInDEV()
					end
				else
					-- TODO? pass in captureCommitPhaseError?
					local ok, error_ = xpcall(commitLayoutEffectsForProfiler, describeError, finishedWork, finishedRoot)
					if not ok then
						captureCommitPhaseError(finishedWork, finishedWork.return_, error_)
					end
				end
			end
		end

		if enableProfilerTimer and enableProfilerCommitHooks then
			-- Propagate layout effect durations to the next nearest Profiler ancestor.
			-- Do not reset these values until the next render so DevTools has a chance to read them first.
			if prevProfilerOnStack ~= nil then
				prevProfilerOnStack.stateNode.effectDuration += finishedWork.stateNode.effectDuration
			end

			nearestProfilerOnStack = prevProfilerOnStack
		end
	-- elseif tag == Offscreen then
	-- TODO: Fast path to invoke all nested layout effects when Offscren goes from hidden to visible.
	else
		local child = finishedWork.child
		while child ~= nil do
			local primarySubtreeFlags = bit32.band(finishedWork.subtreeFlags, LayoutMask)
			if primarySubtreeFlags ~= NoFlags then
				if __DEV__ then
					local prevCurrentFiberInDEV = ReactCurrentFiber.current
					setCurrentDebugFiberInDEV(child)
					--[[
              ROBLOX DEVIATION: In DEV, After MAX_RUN_DEPTH pcalls, do not wrap recursive calls in pcall. Otherwise,
              we hit the stack limit and get a stack overflow error.
            ]]
					if runDepth < MAX_RUN_DEPTH then
						runDepth += 1
						invokeGuardedCallback(
							nil,
							recursivelyCommitLayoutEffects,
							nil,
							child,
							finishedRoot,
							-- deviation: pass in this function to avoid dependency cycle
							captureCommitPhaseError,
							schedulePassiveEffectCallback
						)
						runDepth -= 1

						if hasCaughtError() then
							local error_ = clearCaughtError()
							captureCommitPhaseError(child, finishedWork, error_)
						end
					else
						recursivelyCommitLayoutEffects(
							child,
							finishedRoot,
							captureCommitPhaseError,
							schedulePassiveEffectCallback
						)
					end
					if prevCurrentFiberInDEV ~= nil then
						setCurrentDebugFiberInDEV(prevCurrentFiberInDEV)
					else
						resetCurrentDebugFiberInDEV()
					end
				else
					-- deviation: YOLO flag for disabling pcall
					local ok, error_
					if not __YOLO__ and runDepth < MAX_RUN_DEPTH then
						--[[
              ROBLOX DEVIATION: After MAX_RUN_DEPTH pcalls, do not wrap recursive calls in pcall. Otherwise, we hit the
              stack limit and get a stack overflow error.
            ]]
						runDepth += 1

						ok, error_ = xpcall(
							-- deviation: pass in this function to avoid dependency cycle
							recursivelyCommitLayoutEffects,
							describeError,
							child,
							finishedRoot,
							captureCommitPhaseError,
							schedulePassiveEffectCallback
						)

						runDepth -= 1
					else
						ok = true
						recursivelyCommitLayoutEffects(
							child,
							finishedRoot,
							captureCommitPhaseError,
							schedulePassiveEffectCallback
						)
					end

					if not ok then
						captureCommitPhaseError(child, finishedWork, error_)
					end
				end
			end
			child = child.sibling
		end

		local primaryFlags = bit32.band(flags, bit32.bor(Update, Callback))
		if primaryFlags ~= NoFlags then
			if tag == FunctionComponent or tag == ForwardRef or tag == SimpleMemoComponent or tag == Block then
				if
					enableProfilerTimer
					and enableProfilerCommitHooks
					and bit32.band(finishedWork.mode, ProfileMode) ~= 0
				then
					-- try
					local ok, error_ = xpcall(function()
						startLayoutEffectTimer()
						commitHookEffectListMount(bit32.bor(HookLayout, HookHasEffect), finishedWork)
					end, describeError)
					-- finally
					recordLayoutEffectDuration(finishedWork)
					if not ok then
						error(error_)
					end
				else
					commitHookEffectListMount(bit32.bor(HookLayout, HookHasEffect), finishedWork)
				end

				if bit32.band(finishedWork.subtreeFlags, PassiveMask) ~= NoFlags then
					schedulePassiveEffectCallback()
				end
			elseif tag == ClassComponent then
				-- NOTE: Layout effect durations are measured within this function.
				commitLayoutEffectsForClassComponent(finishedWork)
			elseif tag == HostRoot then
				commitLayoutEffectsForHostRoot(finishedWork)
			elseif tag == HostComponent then
				commitLayoutEffectsForHostComponent(finishedWork)
			elseif tag == SuspenseComponent then
				commitSuspenseHydrationCallbacks(finishedRoot, finishedWork)
			elseif
				tag == FundamentalComponent
				or tag == HostPortal
				or tag == HostText
				or tag == IncompleteClassComponent
				or tag == LegacyHiddenComponent
				or tag == OffscreenComponent
				or tag == ScopeComponent
				or tag == SuspenseListComponent
			then
			-- break
			else
				invariant(
					false,
					"This unit of work tag should not have side-effects. This error is "
						.. "likely caused by a bug in React. Please file an issue."
				)
			end
		end

		-- performance: avoid cmp on always-false value
		-- if enableScopeAPI then
		--   -- TODO: This is a temporary solution that allowed us to transition away from React Flare on www.
		--   if bit32.band(flags, Ref) ~= 0 and tag ~= ScopeComponent then
		--     commitAttachRef(finishedWork)
		--   end
		-- else
		if bit32.band(flags, Ref) ~= 0 then
			commitAttachRef(finishedWork)
		end
		-- end
	end
end

function commitLayoutEffectsForProfiler(finishedWork: Fiber, finishedRoot: FiberRoot)
	if enableProfilerTimer then
		local flags = finishedWork.flags
		local current = finishedWork.alternate

		local onCommit, onRender = finishedWork.memoizedProps.onCommit, finishedWork.memoizedProps.onRender
		local effectDuration = finishedWork.stateNode.effectDuration

		local commitTime = getCommitTime()

		local OnRenderFlag = Update
		local OnCommitFlag = Callback

		if
			bit32.band(flags, OnRenderFlag) ~= NoFlags
			-- deviation: our mocked functions are tables with __call, since they have fields
			and isCallable(onRender)
		then
			if enableSchedulerTracing then
				onRender(
					finishedWork.memoizedProps.id,
					if current == nil then "mount" else "update",
					finishedWork.actualDuration,
					finishedWork.treeBaseDuration,
					finishedWork.actualStartTime,
					commitTime,
					finishedRoot.memoizedInteractions
				)
			else
				onRender(
					finishedWork.memoizedProps.id,
					if current == nil then "mount" else "update",
					finishedWork.actualDuration,
					finishedWork.treeBaseDuration,
					finishedWork.actualStartTime,
					commitTime
				)
			end
		end

		if enableProfilerCommitHooks then
			if
				bit32.band(flags, OnCommitFlag) ~= NoFlags
				-- deviation: our mocked functions are tables with __call, since they have fields
				and isCallable(onCommit)
			then
				if enableSchedulerTracing then
					onCommit(
						finishedWork.memoizedProps.id,
						if current == nil then "mount" else "update",
						effectDuration,
						commitTime,
						finishedRoot.memoizedInteractions
					)
				else
					onCommit(
						finishedWork.memoizedProps.id,
						if current == nil then "mount" else "update",
						effectDuration,
						commitTime
					)
				end
			end
		end
	end
end

function commitLayoutEffectsForClassComponent(finishedWork: Fiber)
	local instance = finishedWork.stateNode
	local current = finishedWork.alternate
	if bit32.band(finishedWork.flags, Update) ~= 0 then
		if current == nil then
			-- We could update instance props and state here,
			-- but instead we rely on them being set during last render.
			-- TODO: revisit this when we implement resuming.
			if __DEV__ then
				if finishedWork.type == finishedWork.elementType and not didWarnAboutReassigningProps then
					if instance.props ~= finishedWork.memoizedProps then
						console.error(
							"Expected %s props to match memoized props before "
								.. "componentDidMount. "
								.. "This might either be because of a bug in React, or because "
								.. "a component reassigns its own `this.props`. "
								.. "Please file an issue.",
							getComponentName(finishedWork.type) or "instance"
						)
					end
					if instance.state ~= finishedWork.memoizedState then
						console.error(
							"Expected %s state to match memoized state before "
								.. "componentDidMount. "
								.. "This might either be because of a bug in React, or because "
								.. "a component reassigns its own `this.state`. "
								.. "Please file an issue.",
							getComponentName(finishedWork.type) or "instance"
						)
					end
				end
			end
			if
				enableProfilerTimer
				and enableProfilerCommitHooks
				and bit32.band(finishedWork.mode, ProfileMode) ~= 0
			then
				local ok, result = xpcall(function()
					startLayoutEffectTimer()
					-- deviation: Call with ":" so that the method receives self
					instance:componentDidMount()
				end, describeError)
				-- finally
				recordLayoutEffectDuration(finishedWork)
				if not ok then
					error(result)
				end
			else
				-- deviation: Call with ":" so that the method receives self
				instance:componentDidMount()
			end
		else
			local prevProps = finishedWork.elementType == finishedWork.type and current.memoizedProps
				or resolveDefaultProps(finishedWork.type, current.memoizedProps)
			local prevState = current.memoizedState
			-- We could update instance props and state here,
			-- but instead we rely on them being set during last render.
			-- TODO: revisit this when we implement resuming.
			if __DEV__ then
				if finishedWork.type == finishedWork.elementType and not didWarnAboutReassigningProps then
					if instance.props ~= finishedWork.memoizedProps then
						console.error(
							"Expected %s props to match memoized props before "
								.. "componentDidUpdate. "
								.. "This might either be because of a bug in React, or because "
								.. "a component reassigns its own `this.props`. "
								.. "Please file an issue.",
							getComponentName(finishedWork.type) or "instance"
						)
					end
					if instance.state ~= finishedWork.memoizedState then
						console.error(
							"Expected %s state to match memoized state before "
								.. "componentDidUpdate. "
								.. "This might either be because of a bug in React, or because "
								.. "a component reassigns its own `this.state`. "
								.. "Please file an issue.",
							getComponentName(finishedWork.type) or "instance"
						)
					end
				end
			end
			if
				enableProfilerTimer
				and enableProfilerCommitHooks
				and bit32.band(finishedWork.mode, ProfileMode) ~= 0
			then
				local ok, result = xpcall(function()
					startLayoutEffectTimer()
					-- deviation: Call with ":" so that the method receives self
					instance:componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate)
				end, describeError)
				-- finally
				recordLayoutEffectDuration(finishedWork)
				if not ok then
					error(result)
				end
			else
				-- deviation: Call with ":" so that the method receives self
				instance:componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate)
			end
		end
	end

	-- TODO: I think this is now always non-null by the time it reaches the
	-- commit phase. Consider removing the type check.
	local updateQueue: UpdateQueue<any> | nil = finishedWork.updateQueue
	if updateQueue ~= nil then
		if __DEV__ then
			if finishedWork.type == finishedWork.elementType and not didWarnAboutReassigningProps then
				if instance.props ~= finishedWork.memoizedProps then
					console.error(
						"Expected %s props to match memoized props before "
							.. "processing the update queue. "
							.. "This might either be because of a bug in React, or because "
							.. "a component reassigns its own `this.props`. "
							.. "Please file an issue.",
						getComponentName(finishedWork.type) or "instance"
					)
				end
				if instance.state ~= finishedWork.memoizedState then
					console.error(
						"Expected %s state to match memoized state before "
							.. "processing the update queue. "
							.. "This might either be because of a bug in React, or because "
							.. "a component reassigns its own `this.state`. "
							.. "Please file an issue.",
						getComponentName(finishedWork.type) or "instance"
					)
				end
			end
		end
		-- We could update instance props and state here,
		-- but instead we rely on them being set during last render.
		-- TODO: revisit this when we implement resuming.
		commitUpdateQueue(finishedWork, updateQueue, instance)
	end
end

function commitLayoutEffectsForHostRoot(finishedWork: Fiber)
	-- TODO: I think this is now always non-null by the time it reaches the
	-- commit phase. Consider removing the type check.
	local updateQueue: UpdateQueue<any> | nil = finishedWork.updateQueue
	if updateQueue ~= nil then
		local instance = nil
		if finishedWork.child ~= nil then
			-- TODO: localize child, workaround Luau type refinement shortcomings
			local child = finishedWork.child
			if child.tag == HostComponent then
				instance = getPublicInstance(child.stateNode)
			elseif child.tag == ClassComponent then
				instance = child.stateNode
			end
		end
		commitUpdateQueue(finishedWork, updateQueue, instance)
	end
end

function commitLayoutEffectsForHostComponent(finishedWork: Fiber)
	local instance: Instance = finishedWork.stateNode
	local current = finishedWork.alternate

	-- Renderers may schedule work to be done after host components are mounted
	-- (eg DOM renderer may schedule auto-focus for inputs and form controls).
	-- These effects should only be committed when components are first mounted,
	-- aka when there is no current/alternate.
	if current == nil and bit32.band(finishedWork.flags, Update) ~= 0 then
		local type = finishedWork.type
		local props = finishedWork.memoizedProps
		commitMount(instance, type, props, finishedWork)
	end
end

local function hideOrUnhideAllChildren(finishedWork, isHidden)
	if supportsMutation then
		-- We only have the top Fiber that was inserted but we need to recurse down its
		-- children to find all the terminal nodes.
		local node: Fiber = finishedWork
		while true do
			if node.tag == HostComponent then
				local instance = node.stateNode
				if isHidden then
					hideInstance(instance)
				else
					unhideInstance(node.stateNode, node.memoizedProps)
				end
			elseif node.tag == HostText then
				local instance = node.stateNode
				if isHidden then
					hideTextInstance(instance)
				else
					unhideTextInstance(instance, node.memoizedProps)
				end
			elseif
				(node.tag == OffscreenComponent or node.tag == LegacyHiddenComponent)
				and (node.memoizedState :: OffscreenState) ~= nil
				and node ~= finishedWork
			then
			-- Found a nested Offscreen component that is hidden. Don't search
			-- any deeper. This tree should remain hidden.
			elseif node.child ~= nil then
				-- FIXME: type casts to silence analyze, Luau doesn't understand nil check
				(node.child :: Fiber).return_ = node
				node = node.child :: Fiber
				continue
			end
			if node == finishedWork then
				return
			end
			while node.sibling == nil do
				if node.return_ == nil or node.return_ == finishedWork then
					return
				end
				node = node.return_ :: Fiber -- TODO: Luau narrowing doesn't understand this loop until nil pattern
			end
			-- FIXME: cast to any to silence analyze
			(node.sibling :: Fiber).return_ = node.return_
			-- FIXME: recast to silence analyze while Luau doesn't understand nil check
			node = node.sibling :: Fiber
		end
	end
end

function commitAttachRef(finishedWork: Fiber)
	local ref = finishedWork.ref
	if ref ~= nil then
		local instance = finishedWork.stateNode
		local instanceToUse
		if finishedWork.tag == HostComponent then
			instanceToUse = getPublicInstance(instance)
		else
			instanceToUse = instance
		end
		-- Moved outside to ensure DCE works with this flag
		-- performance: avoid cmp on always-false value
		-- if enableScopeAPI and finishedWork.tag == ScopeComponent then
		--   instanceToUse = instance
		-- end
		if typeof(ref) == "function" then
			ref(instanceToUse)
		else
			if __DEV__ then
				-- FIXME: We won't be able to recognize a ref object by checking
				-- for the existence of the `current` key, since it won't be initialized
				-- at this point. We might consider using a symbol to uniquely identify
				-- ref objects, or relying more heavily on Luau types
				-- if not ref.current then
				if typeof(ref) ~= "table" then
					console.error(
						"Unexpected ref object provided for %s. "
							.. "Use either a ref-setter function or React.createRef().",
						getComponentName(finishedWork.type) or "instance"
					)
					return
				end
			end

			ref.current = instanceToUse
		end
	end
end

function commitDetachRef(current: Fiber)
	local currentRef = current.ref
	if currentRef ~= nil then
		if typeof(currentRef) == "function" then
			currentRef(nil)
		else
			currentRef.current = nil
		end
	end
end

-- User-originating errors (lifecycles and refs) should not interrupt
-- deletion, so don't local them throw. Host-originating errors should
-- interrupt deletion, so it's okay
function commitUnmount(
	finishedRoot: FiberRoot,
	current: Fiber,
	nearestMountedAncestor: Fiber,
	renderPriorityLevel: ReactPriorityLevel
): ()
	onCommitUnmount(current)

	if
		current.tag == FunctionComponent
		or current.tag == ForwardRef
		or current.tag == MemoComponent
		or current.tag == SimpleMemoComponent
		or current.tag == Block
	then
		local updateQueue: FunctionComponentUpdateQueue | nil = current.updateQueue
		if updateQueue ~= nil then
			local lastEffect = (updateQueue :: FunctionComponentUpdateQueue).lastEffect
			if lastEffect ~= nil then
				local firstEffect = lastEffect.next

				local effect = firstEffect
				repeat
					if effect.destroy ~= nil then
						if bit32.band(effect.tag, HookLayout) ~= NoHookEffect then
							if
								enableProfilerTimer
								and enableProfilerCommitHooks
								and bit32.band(current.mode, ProfileMode) ~= 0
							then
								startLayoutEffectTimer()
								safelyCallDestroy(current, nearestMountedAncestor, effect.destroy)
								recordLayoutEffectDuration(current)
							else
								safelyCallDestroy(current, nearestMountedAncestor, effect.destroy)
							end
						end
					end
					effect = effect.next
				until effect == firstEffect
			end
		end
		return
	elseif current.tag == ClassComponent then
		safelyDetachRef(current, nearestMountedAncestor)
		local instance = current.stateNode
		if typeof(instance.componentWillUnmount) == "function" then
			safelyCallComponentWillUnmount(current, instance, nearestMountedAncestor)
		end
		return
	elseif current.tag == HostComponent then
		safelyDetachRef(current, nearestMountedAncestor)
		return
	elseif current.tag == HostPortal then
		-- TODO: this is recursive.
		-- We are also not using this parent because
		-- the portal will get pushed immediately.
		if supportsMutation then
			unmountHostComponents(finishedRoot, current, nearestMountedAncestor, renderPriorityLevel)
		elseif supportsPersistence then
			unimplemented("emptyPortalContainer")
			-- emptyPortalContainer(current)
		end
		return
		-- elseif current.tag == FundamentalComponent then
		--   unimplemented("commitUnmount - FundamentalComponent")
		-- if enableFundamentalAPI then
		--   local fundamentalInstance = current.stateNode
		--   if fundamentalInstance ~= nil then
		--     unmountFundamentalComponent(fundamentalInstance)
		--     current.stateNode = nil
		--   end
		-- end
		-- return
		-- elseif current.tag == DehydratedFragment then
		--   unimplemented("commitUnmount - DehydratedFragment")
		-- if enableSuspenseCallback then
		--   local hydrationCallbacks = finishedRoot.hydrationCallbacks
		--   if hydrationCallbacks ~= nil then
		--     local onDeleted = hydrationCallbacks.onDeleted
		--     if onDeleted then
		--       onDeleted((current.stateNode: SuspenseInstance))
		--     end
		--   end
		-- end
		-- return
		-- elseif current.tag == ScopeComponent then
		--   if enableScopeAPI then
		--     safelyDetachRef(current, nearestMountedAncestor)
		--   end
		--   return
	end
end

function commitNestedUnmounts(
	finishedRoot: FiberRoot,
	root: Fiber,
	nearestMountedAncestor: Fiber,
	renderPriorityLevel: ReactPriorityLevel
)
	-- While we're inside a removed host node we don't want to call
	-- removeChild on the inner nodes because they're removed by the top
	-- call anyway. We also want to call componentWillUnmount on all
	-- composites before this host node is removed from the tree. Therefore
	-- we do an inner loop while we're still inside the host node.
	local node: Fiber = root
	while true do
		commitUnmount(finishedRoot, node, nearestMountedAncestor, renderPriorityLevel)
		-- Visit children because they may contain more composite or host nodes.
		-- Skip portals because commitUnmount() currently visits them recursively.
		if
			node.child ~= nil
			-- If we use mutation we drill down into portals using commitUnmount above.
			-- If we don't use mutation we drill down into portals here instead.
			and (not supportsMutation or node.tag ~= HostPortal)
		then
			(node.child :: Fiber).return_ = node
			node = node.child :: Fiber
			continue
		end
		if node == root then
			return
		end
		while node.sibling == nil do
			if node.return_ == nil or node.return_ == root then
				return
			end
			node = node.return_ :: Fiber -- TODO: Luau narrowing doesn't understand this loop until nil pattern
		end
		(node.sibling :: Fiber).return_ = node.return_
		node = node.sibling :: Fiber
	end
end

local function detachFiberMutation(fiber: Fiber)
	-- Cut off the return pointer to disconnect it from the tree.
	-- This enables us to detect and warn against state updates on an unmounted component.
	-- It also prevents events from bubbling from within disconnected components.
	--
	-- Ideally, we should also clear the child pointer of the parent alternate to local this
	-- get GC:ed but we don't know which for sure which parent is the current
	-- one so we'll settle for GC:ing the subtree of this child.
	-- This child itself will be GC:ed when the parent updates the next time.
	--
	-- Note that we can't clear child or sibling pointers yet.
	-- They're needed for passive effects and for findDOMNode.
	-- We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).
	local alternate = fiber.alternate
	if alternate ~= nil then
		alternate.return_ = nil
		fiber.alternate = nil
	end
	fiber.return_ = nil
end

-- function emptyPortalContainer(current: Fiber)
--   if !supportsPersistence)
--     return
--   end

--   local portal: {
--     containerInfo: Container,
--     pendingChildren: ChildSet,
--     ...
--   } = current.stateNode
--   local {containerInfo} = portal
--   local emptyChildSet = createContainerChildSet(containerInfo)
--   replaceContainerChildren(containerInfo, emptyChildSet)
-- end

-- function commitContainer(finishedWork: Fiber)
--   if !supportsPersistence)
--     return
--   end

--   switch (finishedWork.tag)
--     case ClassComponent:
--     case HostComponent:
--     case HostText:
--     case FundamentalComponent: {
--       return
--     end
--     case HostRoot:
--     case HostPortal: {
--       local portalOrRoot: {
--         containerInfo: Container,
--         pendingChildren: ChildSet,
--         ...
--       } = finishedWork.stateNode
--       local {containerInfo, pendingChildren} = portalOrRoot
--       replaceContainerChildren(containerInfo, pendingChildren)
--       return
--     end
--   end
--   invariant(
--     false,
--     'This unit of work tag should not have side-effects. This error is ' +
--       'likely caused by a bug in React. Please file an issue.',
--   )
-- end

local function getHostParentFiber(fiber: Fiber): Fiber
	local parent = fiber.return_
	while parent ~= nil do
		if isHostParent(parent) then
			return parent
		end
		parent = parent.return_
	end
	-- deviation START: use React 18 approach, which Luau understands better than invariant
	error(
		Error.new(
			"Expected to find a host parent. This error is likely caused by a bug " .. "in React. Please file an issue."
		)
	)
	-- deviation END
end

function isHostParent(fiber: Fiber): boolean
	return fiber.tag == HostComponent or fiber.tag == HostRoot or fiber.tag == HostPortal
end

function getHostSibling(fiber: Fiber): Instance?
	-- We're going to search forward into the tree until we find a sibling host
	-- node. Unfortunately, if multiple insertions are done in a row we have to
	-- search past them. This leads to exponential search for the next sibling.
	-- TODO: Find a more efficient way to do this.
	local node: Fiber = fiber
	while true do
		-- deviation: we can't `continue` with labels in luau, so some variable
		-- juggling is used instead
		local continueOuter = false
		-- If we didn't find anything, let's try the next sibling.
		while node.sibling == nil do
			if node.return_ == nil or isHostParent(node.return_) then
				-- If we pop out of the root or hit the parent the fiber we are the
				-- last sibling.
				return nil
			end
			node = node.return_ :: Fiber -- TODO: Luau narrowing doesn't understand this loop until nil pattern
		end
		(node.sibling :: Fiber).return_ = node.return_ :: Fiber
		node = node.sibling :: Fiber
		while node.tag ~= HostComponent and node.tag ~= HostText and node.tag ~= DehydratedFragment do
			-- If it is not host node and, we might have a host node inside it.
			-- Try to search down until we find one.
			if bit32.band(node.flags, Placement) ~= 0 then
				-- If we don't have a child, try the siblings instead.
				continueOuter = true
				break
			end
			-- If we don't have a child, try the siblings instead.
			-- We also skip portals because they are not part of this host tree.
			if node.child == nil or node.tag == HostPortal then
				continueOuter = true
				break
			else
				(node.child :: Fiber).return_ = node
				node = node.child :: Fiber
			end
		end
		if continueOuter then
			continue
		end
		-- Check if this host node is stable or about to be placed.
		if bit32.band(node.flags, Placement) == 0 then
			-- Found it!
			return node.stateNode
		end
	end
end

local function commitPlacement(finishedWork: Fiber)
	if not supportsMutation then
		return
	end

	-- Recursively insert all host nodes into the parent.
	local parentFiber = getHostParentFiber(finishedWork)

	-- NOTE: these two variables *must* always be updated together.
	local parent
	local isContainer
	local parentStateNode = parentFiber.stateNode
	if parentFiber.tag == HostComponent then
		parent = parentStateNode
		isContainer = false
	elseif parentFiber.tag == HostRoot then
		parent = parentStateNode.containerInfo
		isContainer = true
	elseif parentFiber.tag == HostPortal then
		parent = parentStateNode.containerInfo
		isContainer = true
	-- elseif parentFiber.tag == FundamentalComponent then
	--   if enableFundamentalAPI then
	--     parent = parentStateNode.instance
	--     isContainer = false
	--   end
	else
		-- eslint-disable-next-line-no-fallthrough
		invariant(
			false,
			"Invalid host parent fiber. This error is likely caused by a bug " .. "in React. Please file an issue."
		)
	end
	if bit32.band(parentFiber.flags, ContentReset) ~= 0 then
		-- Reset the text content of the parent before doing any insertions
		resetTextContent(parent)
		-- Clear ContentReset from the effect tag
		parentFiber.flags = bit32.band(parentFiber.flags, bit32.bnot(ContentReset))
	end

	local before = getHostSibling(finishedWork)
	-- We only have the top Fiber that was inserted but we need to recurse down its
	-- children to find all the terminal nodes.
	if isContainer then
		insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent)
	else
		insertOrAppendPlacementNode(finishedWork, before, parent)
	end
end

function insertOrAppendPlacementNodeIntoContainer(node: Fiber, before: Instance?, parent: Container)
	local tag = node.tag
	local isHost = tag == HostComponent or tag == HostText
	-- performance: avoid always-false compare for Roblox renderer in hot path
	if isHost then -- or (enableFundamentalAPI and tag == FundamentalComponent) then
		local stateNode = node.stateNode
		if before then
			insertInContainerBefore(parent, stateNode, before)
		else
			appendChildToContainer(parent, stateNode)
		end
	elseif tag == HostPortal then
	-- If the insertion itself is a portal, then we don't want to traverse
	-- down its children. Instead, we'll get insertions from each child in
	-- the portal directly.
	else
		local child = node.child
		if child ~= nil then
			insertOrAppendPlacementNodeIntoContainer(child, before, parent)
			local sibling = child.sibling
			while sibling ~= nil do
				insertOrAppendPlacementNodeIntoContainer(sibling, before, parent)
				sibling = sibling.sibling
			end
		end
	end
end

function insertOrAppendPlacementNode(node: Fiber, before: Instance?, parent: Instance): ()
	local tag = node.tag
	local isHost = tag == HostComponent or tag == HostText
	-- performance: avoid always-false compare for Roblox renderer in hot path
	if isHost then -- or (enableFundamentalAPI and tag == FundamentalComponent) then
		local stateNode = node.stateNode
		if before then
			insertBefore(parent, stateNode, before)
		else
			appendChild(parent, stateNode)
		end
	elseif tag == HostPortal then
	-- If the insertion itself is a portal, then we don't want to traverse
	-- down its children. Instead, we'll get insertions from each child in
	-- the portal directly.
	else
		local child = node.child
		if child ~= nil then
			insertOrAppendPlacementNode(child, before, parent)
			local sibling = child.sibling
			while sibling ~= nil do
				insertOrAppendPlacementNode(sibling, before, parent)
				sibling = sibling.sibling
			end
		end
	end
end

function unmountHostComponents(
	finishedRoot: FiberRoot,
	current: Fiber,
	nearestMountedAncestor: Fiber,
	renderPriorityLevel: ReactPriorityLevel
): ()
	-- We only have the top Fiber that was deleted but we need to recurse down its
	-- children to find all the terminal nodes.
	local node: Fiber = current

	-- Each iteration, currentParent is populated with node's host parent if not
	-- currentParentIsValid.
	local currentParentIsValid = false

	-- NOTE: these two variables *must* always be updated together.
	local currentParent
	local currentParentIsContainer

	while true do
		if not currentParentIsValid then
			-- FIXME Luau: Luau doesn't understand the nil guard at the top of the loop
			local parent = node.return_ :: Fiber
			while true do
				-- deviation START: use React 18 approach so Luau understands control flow better
				if parent == nil then
					error(
						Error.new(
							"Expected to find a host parent. This error is likely caused by "
								.. "a bug in React. Please file an issue."
						)
					)
				end
				-- deviation END
				local parentStateNode = parent.stateNode
				if parent.tag == HostComponent then
					currentParent = parentStateNode
					currentParentIsContainer = false
					break
				elseif parent.tag == HostRoot then
					currentParent = parentStateNode.containerInfo
					currentParentIsContainer = true
					break
				elseif parent.tag == HostPortal then
					currentParent = parentStateNode.containerInfo
					currentParentIsContainer = true
					break
					-- performance: eliminate always-false compare for Roblox in hot path
					-- elseif parent.tag == FundamentalComponent then
					--   if enableFundamentalAPI then
					--     currentParent = parentStateNode.instance
					--     currentParentIsContainer = false
					--   end
				end
				-- FIXME Luau: Luau doesn't understand the nil guard at the top of the loop
				parent = parent.return_ :: Fiber
			end
			currentParentIsValid = true
		end

		if node.tag == HostComponent or node.tag == HostText then
			commitNestedUnmounts(finishedRoot, node, nearestMountedAncestor, renderPriorityLevel)
			-- After all the children have unmounted, it is now safe to remove the
			-- node from the tree.
			if currentParentIsContainer then
				-- removeChildFromContainer(
				--   ((currentParent: any): Container),
				--   (fundamentalNode: Instance),
				-- )
				-- FIXME: type coercion
				removeChildFromContainer(currentParent, node.stateNode)
			else
				-- removeChild(
				--   ((currentParent: any): Instance),
				--   (fundamentalNode: Instance),
				-- )
				-- FIXME: type coercion
				removeChild(currentParent, node.stateNode)
			end
		-- Don't visit children because we already visited them.
		-- performance? fundamentalAPI  and suspenseServerRender are always false for Roblox. avoid unnecessary cmp in hot path
		-- elseif enableFundamentalAPI and node.tag == FundamentalComponent then
		--   local fundamentalNode = node.stateNode.instance
		--   commitNestedUnmounts(
		--     finishedRoot,
		--     node,
		--     nearestMountedAncestor,
		--     renderPriorityLevel
		--   )
		--   -- After all the children have unmounted, it is now safe to remove the
		--   -- node from the tree.
		--   if currentParentIsContainer then
		--     -- removeChildFromContainer(
		--     --   ((currentParent: any): Container),
		--     --   (fundamentalNode: Instance),
		--     -- )
		--     -- FIXME: type coercion
		--     removeChildFromContainer(currentParent, fundamentalNode)
		--   else
		--     -- removeChild(
		--     --   ((currentParent: any): Instance),
		--     --   (fundamentalNode: Instance),
		--     -- )
		--     -- FIXME: type coercion
		--     removeChild(currentParent, fundamentalNode)
		--   end
		-- elseif
		--   enableSuspenseServerRenderer and
		--   node.tag == DehydratedFragment
		-- then
		--   unimplemented("clearSuspenseBoundary")
		--   -- if enableSuspenseCallback then
		--   --   local hydrationCallbacks = finishedRoot.hydrationCallbacks
		--   --   if hydrationCallbacks ~= nil)
		--   --     local onDeleted = hydrationCallbacks.onDeleted
		--   --     if onDeleted)
		--   --       onDeleted((node.stateNode: SuspenseInstance))
		--   --     end
		--   --   end
		--   -- end

		--   -- -- Delete the dehydrated suspense boundary and all of its content.
		--   -- if currentParentIsContainer)
		--   --   clearSuspenseBoundaryFromContainer(
		--   --     ((currentParent: any): Container),
		--   --     (node.stateNode: SuspenseInstance),
		--   --   )
		--   -- } else {
		--   --   clearSuspenseBoundary(
		--   --     ((currentParent: any): Instance),
		--   --     (node.stateNode: SuspenseInstance),
		--   --   )
		--   -- end
		elseif node.tag == HostPortal then
			if node.child ~= nil then
				-- When we go into a portal, it becomes the parent to remove from.
				-- We will reassign it back when we pop the portal on the way up.
				currentParent = node.stateNode.containerInfo
				currentParentIsContainer = true
				-- Visit children because portals might contain host components.
				node.child.return_ = node
				node = node.child
				continue
			end
		else
			commitUnmount(finishedRoot, node, nearestMountedAncestor, renderPriorityLevel)
			-- Visit children because we may find more host components below.
			if node.child ~= nil then
				node.child.return_ = node
				node = node.child
				continue
			end
		end
		if node == current then
			return
		end
		while node.sibling == nil do
			if node.return_ == nil or node.return_ == current then
				return
			end
			-- FIXME Luau: Luau doesn't understand narrowing by guard above
			node = node.return_ :: Fiber
			if node.tag == HostPortal then
				-- When we go out of the portal, we need to restore the parent.
				-- Since we don't keep a stack of them, we will search for it.
				currentParentIsValid = false
			end
		end
		-- TODO: flowtype makes an impossible leap here, contribute this annotation upstream
		(node.sibling :: Fiber).return_ = node.return_
		node = node.sibling :: Fiber
	end
end

local function commitDeletion(
	finishedRoot: FiberRoot,
	current: Fiber,
	nearestMountedAncestor: Fiber,
	renderPriorityLevel: ReactPriorityLevel
): ()
	-- performance? supportsMutation always true, eliminate cmp on hot path
	-- if supportsMutation then
	-- Recursively delete all host nodes from the parent.
	-- Detach refs and call componentWillUnmount() on the whole subtree.
	unmountHostComponents(finishedRoot, current, nearestMountedAncestor, renderPriorityLevel)
	-- else
	--   -- Detach refs and call componentWillUnmount() on the whole subtree.
	--   commitNestedUnmounts(
	--     finishedRoot,
	--     current,
	--     nearestMountedAncestor,
	--     renderPriorityLevel
	--   )
	-- end
	local alternate = current.alternate
	detachFiberMutation(current)
	if alternate ~= nil then
		detachFiberMutation(alternate)
	end
end

local function commitWork(current: Fiber | nil, finishedWork: Fiber)
	-- if not supportsMutation then
	--   unimplemented("commitWork: non-mutation branch")
	-- switch (finishedWork.tag)
	--   case FunctionComponent:
	--   case ForwardRef:
	--   case MemoComponent:
	--   case SimpleMemoComponent:
	--   case Block: {
	--     -- Layout effects are destroyed during the mutation phase so that all
	--     -- destroy functions for all fibers are called before any create functions.
	--     -- This prevents sibling component effects from interfering with each other,
	--     -- e.g. a destroy function in one component should never override a ref set
	--     -- by a create function in another component during the same commit.
	--     if
	--       enableProfilerTimer and
	--       enableProfilerCommitHooks and
	--       finishedWork.mode & ProfileMode
	--     )
	--       try {
	--         startLayoutEffectTimer()
	--         commitHookEffectListUnmount(
	--           HookLayout | HookHasEffect,
	--           finishedWork,
	--           finishedWork.return_,
	--         )
	--       } finally {
	--         recordLayoutEffectDuration(finishedWork)
	--       end
	--     } else {
	--       commitHookEffectListUnmount(
	--         HookLayout | HookHasEffect,
	--         finishedWork,
	--         finishedWork.return_,
	--       )
	--     end
	--     return
	--   end
	--   case Profiler: {
	--     return
	--   end
	--   case SuspenseComponent: {
	--     commitSuspenseComponent(finishedWork)
	--     attachSuspenseRetryListeners(finishedWork)
	--     return
	--   end
	--   case SuspenseListComponent: {
	--     attachSuspenseRetryListeners(finishedWork)
	--     return
	--   end
	--   case HostRoot: {
	--     if supportsHydration)
	--       local root: FiberRoot = finishedWork.stateNode
	--       if root.hydrate)
	--         -- We've just hydrated. No need to hydrate again.
	--         root.hydrate = false
	--         commitHydratedContainer(root.containerInfo)
	--       end
	--     end
	--     break
	--   end
	--   case OffscreenComponent:
	--   case LegacyHiddenComponent: {
	--     return
	--   end
	-- end

	-- commitContainer(finishedWork)
	-- return
	-- end

	if
		finishedWork.tag == FunctionComponent
		or finishedWork.tag == ForwardRef
		or finishedWork.tag == MemoComponent
		or finishedWork.tag == SimpleMemoComponent
		or finishedWork.tag == Block
	then
		-- Layout effects are destroyed during the mutation phase so that all
		-- destroy functions for all fibers are called before any create functions.
		-- This prevents sibling component effects from interfering with each other,
		-- e.g. a destroy function in one component should never override a ref set
		-- by a create function in another component during the same commit.
		if enableProfilerTimer and enableProfilerCommitHooks and bit32.band(finishedWork.mode, ProfileMode) ~= 0 then
			-- try
			local ok, result = xpcall(function()
				startLayoutEffectTimer()
				commitHookEffectListUnmount(bit32.bor(HookLayout, HookHasEffect), finishedWork, finishedWork.return_)
			end, describeError)
			-- finally
			recordLayoutEffectDuration(finishedWork)
			if not ok then
				error(result)
			end
		else
			commitHookEffectListUnmount(bit32.bor(HookLayout, HookHasEffect), finishedWork, finishedWork.return_)
		end
		return
	elseif finishedWork.tag == ClassComponent then
		return
	elseif finishedWork.tag == HostComponent then
		local instance: Instance = finishedWork.stateNode
		if instance ~= nil then
			-- Commit the work prepared earlier.
			local newProps = finishedWork.memoizedProps
			-- For hydration we reuse the update path but we treat the oldProps
			-- as the newProps. The updatePayload will contain the real change in
			-- this case.
			local oldProps
			if current then
				oldProps = current.memoizedProps
			else
				oldProps = newProps
			end
			local type = finishedWork.type
			-- TODO: Type the updateQueue to be specific to host components.
			local updatePayload: nil | UpdatePayload = finishedWork.updateQueue :: any
			finishedWork.updateQueue = nil
			if updatePayload ~= nil then
				commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork)
			end
		end
		return
	elseif finishedWork.tag == HostText then
		invariant(
			finishedWork.stateNode ~= nil,
			"This should have a text node initialized. This error is likely "
				.. "caused by a bug in React. Please file an issue."
		)
		local textInstance: TextInstance = finishedWork.stateNode
		local newText: string = finishedWork.memoizedProps
		-- For hydration we reuse the update path but we treat the oldProps
		-- as the newProps. The updatePayload will contain the real change in
		-- this case.
		local oldText: string
		if current ~= nil then
			oldText = (current :: Fiber).memoizedProps
			oldText = newText
		end
		commitTextUpdate(textInstance, oldText, newText)
		return
	elseif finishedWork.tag == HostRoot then
		if supportsHydration then
			local root: FiberRoot = finishedWork.stateNode
			if root.hydrate then
				-- We've just hydrated. No need to hydrate again.
				root.hydrate = false
				unimplemented("commitWork: HostRoot: commitHydratedContainer")
				-- commitHydratedContainer(root.containerInfo)
			end
		end
		return
	elseif finishedWork.tag == Profiler then
		return
	elseif finishedWork.tag == SuspenseComponent then
		commitSuspenseComponent(finishedWork)
		attachSuspenseRetryListeners(finishedWork)
		return
	elseif finishedWork.tag == SuspenseListComponent then
		unimplemented("commitWork: SuspenseListComponent")
	-- attachSuspenseRetryListeners(finishedWork)
	-- return
	elseif finishedWork.tag == IncompleteClassComponent then
		return
	-- elseif finishedWork.tag == FundamentalComponent then
	--   unimplemented("commitWork: FundamentalComponent")
	-- if enableFundamentalAPI)
	--   local fundamentalInstance = finishedWork.stateNode
	--   updateFundamentalComponent(fundamentalInstance)
	--   return
	-- end
	-- break
	-- elseif finishedWork.tag == ScopeComponent then
	--   unimplemented("commitWork: ScopeComponent")
	-- if enableScopeAPI)
	--   local scopeInstance = finishedWork.stateNode
	--   prepareScopeUpdate(scopeInstance, finishedWork)
	--   return
	-- end
	-- break
	elseif finishedWork.tag == OffscreenComponent or finishedWork.tag == LegacyHiddenComponent then
		local newState: OffscreenState | nil = finishedWork.memoizedState
		local isHidden = newState ~= nil
		hideOrUnhideAllChildren(finishedWork, isHidden)
		return
	end
	invariant(
		false,
		"This unit of work tag should not have side-effects. This error is "
			.. "likely caused by a bug in React. Please file an issue."
	)
end

function commitSuspenseComponent(finishedWork: Fiber)
	local newState: SuspenseState | nil = finishedWork.memoizedState

	if newState ~= nil then
		markCommitTimeOfFallback()

		if supportsMutation then
			-- Hide the Offscreen component that contains the primary children. TODO:
			-- Ideally, this effect would have been scheduled on the Offscreen fiber
			-- itself. That's how unhiding works: the Offscreen component schedules an
			-- effect on itself. However, in this case, the component didn't complete,
			-- so the fiber was never added to the effect list in the normal path. We
			-- could have appended it to the effect list in the Suspense component's
			-- second pass, but doing it this way is less complicated. This would be
			-- simpler if we got rid of the effect list and traversed the tree, like
			-- we're planning to do.
			local primaryChildParent: Fiber = finishedWork.child :: any
			hideOrUnhideAllChildren(primaryChildParent, true)
		end
	end

	if enableSuspenseCallback and newState ~= nil then
		local suspenseCallback = finishedWork.memoizedProps.suspenseCallback
		if typeof(suspenseCallback) == "function" then
			local wakeables: Set<Wakeable> | nil = finishedWork.updateQueue :: any
			if wakeables ~= nil then
				suspenseCallback(table.clone(wakeables))
			end
		elseif __DEV__ then
			if suspenseCallback ~= nil then
				console.error("Unexpected type for suspenseCallback: %s", tostring(suspenseCallback))
			end
		end
	end
end

function commitSuspenseHydrationCallbacks(finishedRoot: FiberRoot, finishedWork: Fiber)
	if not supportsHydration then
		return
	end
	local newState: SuspenseState | nil = finishedWork.memoizedState
	if newState == nil then
		local current = finishedWork.alternate
		if current ~= nil then
			local prevState: SuspenseState | nil = current.memoizedState
			if prevState ~= nil then
				local suspenseInstance = prevState.dehydrated
				if suspenseInstance ~= nil then
					commitHydratedSuspenseInstance(suspenseInstance)
					if enableSuspenseCallback then
						local hydrationCallbacks = finishedRoot.hydrationCallbacks
						if hydrationCallbacks ~= nil then
							local onHydrated = hydrationCallbacks.onHydrated
							if onHydrated then
								onHydrated(suspenseInstance)
							end
						end
					end
				end
			end
		end
	end
end

function attachSuspenseRetryListeners(finishedWork: Fiber)
	-- If this boundary just timed out, then it will have a set of wakeables.
	-- For each wakeable, attach a listener so that when it resolves, React
	-- attempts to re-render the boundary in the primary (pre-timeout) state.
	local wakeables: Set<Wakeable> | nil = finishedWork.updateQueue :: any
	if wakeables ~= nil then
		finishedWork.updateQueue = nil
		local retryCache = finishedWork.stateNode
		if retryCache == nil then
			finishedWork.stateNode = Set.new()
			retryCache = finishedWork.stateNode
		end
		for wakeable, _ in wakeables :: Set<Wakeable> do
			-- Memoize using the boundary fiber to prevent redundant listeners.
			local retry = function()
				return resolveRetryWakeable(finishedWork, wakeable)
			end

			if not retryCache:has(wakeable) then
				if enableSchedulerTracing then
					if wakeable.__reactDoNotTraceInteractions ~= true then
						retry = Schedule_tracing_wrap(retry)
					end
				end
				retryCache:add(wakeable)
				wakeable:andThen(function()
					return retry()
				end, function()
					return retry()
				end)
			end
		end
	end
end

-- This function detects when a Suspense boundary goes from visible to hidden.
-- It returns false if the boundary is already hidden.
-- TODO: Use an effect tag.
function isSuspenseBoundaryBeingHidden(current: Fiber | nil, finishedWork: Fiber): boolean
	if current ~= nil then
		-- TODO: remove typechecks when narrowing works better
		local oldState: SuspenseState | nil = (current :: Fiber).memoizedState
		if oldState == nil or (oldState :: SuspenseState).dehydrated ~= nil then
			local newState: SuspenseState | nil = finishedWork.memoizedState
			return newState ~= nil and (newState :: SuspenseState).dehydrated == nil
		end
	end
	return false
end

function commitResetTextContent(current: Fiber): ()
	if not supportsMutation then
		return
	end
	resetTextContent(current.stateNode)
end

local function commitPassiveUnmount(finishedWork: Fiber): ()
	if
		finishedWork.tag == FunctionComponent
		or finishedWork.tag == ForwardRef
		or finishedWork.tag == SimpleMemoComponent
		or finishedWork.tag == Block
	then
		if enableProfilerTimer and enableProfilerCommitHooks and bit32.band(finishedWork.mode, ProfileMode) ~= 0 then
			startPassiveEffectTimer()
			commitHookEffectListUnmount(bit32.bor(HookPassive, HookHasEffect), finishedWork, finishedWork.return_)
			recordPassiveEffectDuration(finishedWork)
		else
			commitHookEffectListUnmount(bit32.bor(HookPassive, HookHasEffect), finishedWork, finishedWork.return_)
		end
	end
end

local function commitPassiveUnmountInsideDeletedTree(current: Fiber, nearestMountedAncestor: Fiber | nil): ()
	if
		current.tag == FunctionComponent
		or current.tag == ForwardRef
		or current.tag == SimpleMemoComponent
		or current.tag == Block
	then
		if enableProfilerTimer and enableProfilerCommitHooks and bit32.band(current.mode, ProfileMode) ~= 0 then
			startPassiveEffectTimer()
			commitHookEffectListUnmount(HookPassive, current, nearestMountedAncestor)
			recordPassiveEffectDuration(current)
		else
			commitHookEffectListUnmount(HookPassive, current, nearestMountedAncestor)
		end
	end
end

local function commitPassiveMount(finishedRoot: FiberRoot, finishedWork: Fiber): ()
	if
		finishedWork.tag == FunctionComponent
		or finishedWork.tag == ForwardRef
		or finishedWork.tag == SimpleMemoComponent
		or finishedWork.tag == Block
	then
		if enableProfilerTimer and enableProfilerCommitHooks and bit32.band(finishedWork.mode, ProfileMode) ~= 0 then
			startPassiveEffectTimer()
			-- try
			local ok, error_ =
				xpcall(commitHookEffectListMount, describeError, bit32.bor(HookPassive, HookHasEffect), finishedWork)
			-- finally
			recordPassiveEffectDuration(finishedWork)
			if not ok then
				error(error_)
			end
		else
			commitHookEffectListMount(bit32.bor(HookPassive, HookHasEffect), finishedWork)
		end
	elseif finishedWork.tag == Profiler then
		commitProfilerPassiveEffect(finishedRoot, finishedWork)
	end
end

function invokeLayoutEffectMountInDEV(fiber: Fiber): ()
	if __DEV__ and enableDoubleInvokingEffects then
		if
			fiber.tag == FunctionComponent
			or fiber.tag == ForwardRef
			or fiber.tag == SimpleMemoComponent
			or fiber.tag == Block
		then
			invokeGuardedCallback(nil, commitHookEffectListMount, nil, bit32.bor(HookLayout, HookHasEffect), fiber)
			if hasCaughtError() then
				local mountError = clearCaughtError()
				captureCommitPhaseError(fiber, fiber.return_, mountError)
			end
			return
		end
	elseif fiber.tag == ClassComponent then
		local instance = fiber.stateNode
		invokeGuardedCallback(nil, instance.componentDidMount, instance)
		if hasCaughtError() then
			local mountError = clearCaughtError()
			captureCommitPhaseError(fiber, fiber.return_, mountError)
		end
		return
	end
end

function invokePassiveEffectMountInDEV(fiber: Fiber): ()
	if __DEV__ and enableDoubleInvokingEffects then
		if
			fiber.tag == FunctionComponent
			or fiber.tag == ForwardRef
			or fiber.tag == SimpleMemoComponent
			or fiber.tag == Block
		then
			invokeGuardedCallback(nil, commitHookEffectListMount, nil, bit32.bor(HookPassive, HookHasEffect), fiber)
			if hasCaughtError() then
				local mountError = clearCaughtError()
				captureCommitPhaseError(fiber, fiber.return_, mountError)
			end
			return
		end
	end
end

function invokeLayoutEffectUnmountInDEV(fiber: Fiber): ()
	if __DEV__ and enableDoubleInvokingEffects then
		if
			fiber.tag == FunctionComponent
			or fiber.tag == ForwardRef
			or fiber.tag == SimpleMemoComponent
			or fiber.tag == Block
		then
			invokeGuardedCallback(
				nil,
				commitHookEffectListUnmount,
				nil,
				bit32.bor(HookLayout, HookHasEffect),
				fiber,
				fiber.return_
			)
			if hasCaughtError() then
				local unmountError = clearCaughtError()
				captureCommitPhaseError(fiber, fiber.return_, unmountError)
			end
			return
		end
	elseif fiber.tag == ClassComponent then
		local instance = fiber.stateNode
		if typeof(instance.componentWillUnmount) == "function" then
			safelyCallComponentWillUnmount(fiber, instance, fiber.return_)
		end
		return
	end
end

function invokePassiveEffectUnmountInDEV(fiber: Fiber): ()
	if __DEV__ and enableDoubleInvokingEffects then
		if
			fiber.tag == FunctionComponent
			or fiber.tag == ForwardRef
			or fiber.tag == SimpleMemoComponent
			or fiber.tag == Block
		then
			invokeGuardedCallback(
				nil,
				commitHookEffectListUnmount,
				nil,
				bit32.bor(HookPassive, HookHasEffect),
				fiber,
				fiber.return_
			)
			if hasCaughtError() then
				local unmountError = clearCaughtError()
				captureCommitPhaseError(fiber, fiber.return_, unmountError)
			end
			return
		end
	end
end

return {
	safelyCallDestroy = safelyCallDestroy,

	commitBeforeMutationLifeCycles = commitBeforeMutationLifeCycles,
	commitResetTextContent = commitResetTextContent,
	commitPlacement = commitPlacement,
	commitDeletion = commitDeletion,
	commitWork = commitWork,
	commitAttachRef = commitAttachRef,
	commitDetachRef = commitDetachRef,
	commitPassiveUnmount = commitPassiveUnmount,
	commitPassiveUnmountInsideDeletedTree = commitPassiveUnmountInsideDeletedTree,
	commitPassiveMount = commitPassiveMount,
	invokeLayoutEffectMountInDEV = invokeLayoutEffectMountInDEV,
	invokeLayoutEffectUnmountInDEV = invokeLayoutEffectUnmountInDEV,
	invokePassiveEffectMountInDEV = invokePassiveEffectMountInDEV,
	invokePassiveEffectUnmountInDEV = invokePassiveEffectUnmountInDEV,
	isSuspenseBoundaryBeingHidden = isSuspenseBoundaryBeingHidden,
	recursivelyCommitLayoutEffects = recursivelyCommitLayoutEffects,
}
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="344">
              <Properties>
                <string name="Name">ReactFiberCompleteWork.new</string>
                <string name="Source"><![CDATA[-- upstream: https://github.com/facebook/react/blob/87c023b1c1b00d6776b7031f6e105913ead355da/packages/react-reconciler/src/ReactFiberCompleteWork.new.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]
-- FIXME (roblox): remove this when our unimplemented
local function unimplemented(message: string)
	print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
	print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
	print("UNIMPLEMENTED ERROR: " .. tostring(message))
	error("FIXME (roblox): " .. message .. " is unimplemented", 2)
end

local Packages = script.Parent.Parent

local ReactInternalTypes = require(script.Parent.ReactInternalTypes)
type Fiber = ReactInternalTypes.Fiber
local ReactFiberLane = require(script.Parent.ReactFiberLane)
type Lanes = ReactFiberLane.Lanes
type Lane = ReactFiberLane.Lane
local OffscreenLane = ReactFiberLane.OffscreenLane
-- local type {
--   ReactFundamentalComponentInstance,
--   ReactScopeInstance,
-- } = require(Packages.Shared).ReactTypes
-- local type {FiberRoot} = require(script.Parent.ReactInternalTypes)
local ReactFiberHostConfig = require(script.Parent.ReactFiberHostConfig)
type Instance = ReactFiberHostConfig.Instance
type Type = ReactFiberHostConfig.Type
type Props = ReactFiberHostConfig.Props
type Container = ReactFiberHostConfig.Container
type ChildSet = ReactFiberHostConfig.ChildSet
-- local type {
--   SuspenseState,
--   SuspenseListRenderState,
-- } = require(script.Parent.ReactFiberSuspenseComponent.new)
local ReactFiberOffscreenComponent = require(script.Parent.ReactFiberOffscreenComponent)
type OffscreenState = ReactFiberOffscreenComponent.OffscreenState

local ReactMutableSource = require(script.Parent["ReactMutableSource.new"])
local resetMutableSourceWorkInProgressVersions = ReactMutableSource.resetWorkInProgressVersions

-- local {now} = require(script.Parent.SchedulerWithReactIntegration.new)

local ReactWorkTags = require(script.Parent.ReactWorkTags)
local IndeterminateComponent = ReactWorkTags.IndeterminateComponent
local FunctionComponent = ReactWorkTags.FunctionComponent
local ClassComponent = ReactWorkTags.ClassComponent
local HostRoot = ReactWorkTags.HostRoot
local HostComponent = ReactWorkTags.HostComponent
local HostText = ReactWorkTags.HostText
local HostPortal = ReactWorkTags.HostPortal
local ContextProvider = ReactWorkTags.ContextProvider
local ContextConsumer = ReactWorkTags.ContextConsumer
local ForwardRef = ReactWorkTags.ForwardRef
local Fragment = ReactWorkTags.Fragment
local Mode = ReactWorkTags.Mode
local Profiler = ReactWorkTags.Profiler
local SuspenseComponent = ReactWorkTags.SuspenseComponent
local SuspenseListComponent = ReactWorkTags.SuspenseListComponent
local MemoComponent = ReactWorkTags.MemoComponent
local SimpleMemoComponent = ReactWorkTags.SimpleMemoComponent
local LazyComponent = ReactWorkTags.LazyComponent
local IncompleteClassComponent = ReactWorkTags.IncompleteClassComponent
local FundamentalComponent = ReactWorkTags.FundamentalComponent
local ScopeComponent = ReactWorkTags.ScopeComponent
local Block = ReactWorkTags.Block
local OffscreenComponent = ReactWorkTags.OffscreenComponent
local LegacyHiddenComponent = ReactWorkTags.LegacyHiddenComponent
local ReactFiberSuspenseComponent = require(script.Parent["ReactFiberSuspenseComponent.new"])
type SuspenseState = ReactFiberSuspenseComponent.SuspenseState
type SuspenseListRenderState = ReactFiberSuspenseComponent.SuspenseState

local ReactTypeOfMode = require(script.Parent.ReactTypeOfMode)
local NoMode = ReactTypeOfMode.NoMode
local ConcurrentMode = ReactTypeOfMode.ConcurrentMode
local BlockingMode = ReactTypeOfMode.BlockingMode
local ProfileMode = ReactTypeOfMode.ProfileMode

local ReactFiberFlags = require(script.Parent.ReactFiberFlags)
local Ref = ReactFiberFlags.Ref
local Update = ReactFiberFlags.Update
local Callback = ReactFiberFlags.Callback
local Passive = ReactFiberFlags.Passive
local Deletion = ReactFiberFlags.Deletion
local NoFlags = ReactFiberFlags.NoFlags
local DidCapture = ReactFiberFlags.DidCapture
local Snapshot = ReactFiberFlags.Snapshot
local MutationMask = ReactFiberFlags.MutationMask
local LayoutMask = ReactFiberFlags.LayoutMask
local PassiveMask = ReactFiberFlags.PassiveMask
local StaticMask = ReactFiberFlags.StaticMask
local PerformedWork = ReactFiberFlags.PerformedWork

local invariant = require(Packages.Shared).invariant

local createInstance = ReactFiberHostConfig.createInstance
local createTextInstance = ReactFiberHostConfig.createTextInstance
local appendInitialChild = ReactFiberHostConfig.appendInitialChild
local finalizeInitialChildren = ReactFiberHostConfig.finalizeInitialChildren
local prepareUpdate = ReactFiberHostConfig.prepareUpdate
local supportsMutation = ReactFiberHostConfig.supportsMutation
local supportsPersistence = ReactFiberHostConfig.supportsPersistence
-- local cloneInstance = ReactFiberHostConfig.cloneInstance
-- local cloneHiddenInstance = ReactFiberHostConfig.cloneHiddenInstance
-- local cloneHiddenTextInstance = ReactFiberHostConfig.cloneHiddenTextInstance
local createContainerChildSet = ReactFiberHostConfig.createContainerChildSet
-- local appendChildToContainerChildSet = ReactFiberHostConfig.appendChildToContainerChildSet
local finalizeContainerChildren = ReactFiberHostConfig.finalizeContainerChildren
-- local getFundamentalComponentInstance = ReactFiberHostConfig.getFundamentalComponentInstance
-- local mountFundamentalComponent = ReactFiberHostConfig.mountFundamentalComponent
-- local cloneFundamentalInstance = ReactFiberHostConfig.cloneFundamentalInstance
-- local shouldUpdateFundamentalComponent = ReactFiberHostConfig.shouldUpdateFundamentalComponent
local preparePortalMount = ReactFiberHostConfig.preparePortalMount
-- local prepareScopeUpdate = ReactFiberHostConfig.prepareScopeUpdate
local ReactFiberHostContext = require(script.Parent["ReactFiberHostContext.new"])
local getRootHostContainer = ReactFiberHostContext.getRootHostContainer
local popHostContext = ReactFiberHostContext.popHostContext
local getHostContext = ReactFiberHostContext.getHostContext
local popHostContainer = ReactFiberHostContext.popHostContainer

local ReactFiberSuspenseContext = require(script.Parent["ReactFiberSuspenseContext.new"])
local popSuspenseContext = ReactFiberSuspenseContext.popSuspenseContext
local suspenseStackCursor = ReactFiberSuspenseContext.suspenseStackCursor
local InvisibleParentSuspenseContext = ReactFiberSuspenseContext.InvisibleParentSuspenseContext
local hasSuspenseContext = ReactFiberSuspenseContext.hasSuspenseContext
type SuspenseContext = ReactFiberSuspenseContext.SuspenseContext
-- local pushSuspenseContext = ReactFiberSuspenseContext.pushSuspenseContext
-- local setShallowSuspenseContext = ReactFiberSuspenseContext.setShallowSuspenseContext
-- local ForceSuspenseFallback = ReactFiberSuspenseContext.ForceSuspenseFallback
-- local setDefaultShallowSuspenseContext = ReactFiberSuspenseContext.setDefaultShallowSuspenseContext

-- local {findFirstSuspended} = require(script.Parent.ReactFiberSuspenseComponent.new)
local ReactFiberContext = require(script.Parent["ReactFiberContext.new"])
local isLegacyContextProvider = ReactFiberContext.isContextProvider
local popLegacyContext = ReactFiberContext.popContext
local popTopLevelLegacyContextObject = ReactFiberContext.popTopLevelContextObject
local popProvider = require(script.Parent["ReactFiberNewContext.new"]).popProvider

local ReactFiberHydrationContext = require(script.Parent["ReactFiberHydrationContext.new"])
local prepareToHydrateHostSuspenseInstance = ReactFiberHydrationContext.prepareToHydrateHostSuspenseInstance
local popHydrationState = ReactFiberHydrationContext.popHydrationState
local resetHydrationState = ReactFiberHydrationContext.resetHydrationState
-- local getIsHydrating = ReactFiberHydrationContext.getIsHydrating
local prepareToHydrateHostInstance = ReactFiberHydrationContext.prepareToHydrateHostInstance
local prepareToHydrateHostTextInstance = ReactFiberHydrationContext.prepareToHydrateHostTextInstance
local ReactFeatureFlags = require(Packages.Shared).ReactFeatureFlags
local enableSchedulerTracing = ReactFeatureFlags.enableSchedulerTracing
local enableSuspenseCallback = ReactFeatureFlags.enableSuspenseCallback
local enableSuspenseServerRenderer = ReactFeatureFlags.enableSuspenseServerRenderer
local enableFundamentalAPI = ReactFeatureFlags.enableFundamentalAPI
-- local enableScopeAPI = ReactFeatureFlags.enableScopeAPI
local enableProfilerTimer = ReactFeatureFlags.enableProfilerTimer

local ReactFiberWorkLoop = require(script.Parent["ReactFiberWorkLoop.new"]) :: any

local popRenderLanes = ReactFiberWorkLoop.popRenderLanes
-- deviation: this is a live value in WorkLoop's module state, so it must be accessed directly and not 'cached'
-- local subtreeRenderLanes = ReactFiberWorkLoop.subtreeRenderLanes
local markSpawnedWork = ReactFiberWorkLoop.markSpawnedWork
local renderDidSuspend = ReactFiberWorkLoop.renderDidSuspend
local renderDidSuspendDelayIfPossible = ReactFiberWorkLoop.renderDidSuspendDelayIfPossible
-- local renderHasNotSuspendedYet = ReactFiberWorkLoop.renderHasNotSuspendedYet
-- local getRenderTargetTime = ReactFiberWorkLoop.getRenderTargetTime

-- local {createFundamentalStateInstance} = require(script.Parent.ReactFiberFundamental.new)

-- local OffscreenLane = ReactFiberLane.OffscreenLane
-- local SomeRetryLane = ReactFiberLane.SomeRetryLane
local NoLanes = ReactFiberLane.NoLanes
local includesSomeLane = ReactFiberLane.includesSomeLane
local mergeLanes = ReactFiberLane.mergeLanes
-- local {resetChildFibers} = require(script.Parent.ReactChildFiber.new)
-- local {createScopeInstance} = require(script.Parent.ReactFiberScope.new)
local ReactProfilerTimer = require(script.Parent["ReactProfilerTimer.new"])
local transferActualDuration = ReactProfilerTimer.transferActualDuration

local function markUpdate(workInProgress: Fiber)
	-- Tag the fiber with an update effect. This turns a Placement into
	-- a PlacementAndUpdate.
	workInProgress.flags = bit32.bor(workInProgress.flags, Update)
end

local function markRef(workInProgress: Fiber)
	workInProgress.flags = bit32.bor(workInProgress.flags, Ref)
end

-- FIXME: type refinement
-- local function hadNoMutationsEffects(current: nil | Fiber, completedWork: Fiber)
local function hadNoMutationsEffects(current, completedWork: Fiber)
	local didBailout = current ~= nil and current.child == completedWork.child
	if didBailout then
		return true
	end

	local child = completedWork.child
	while child ~= nil do
		if bit32.band(child.flags, MutationMask) ~= NoFlags then
			return false
		end
		if bit32.band(child.subtreeFlags, MutationMask) ~= NoFlags then
			return false
		end
		child = child.sibling
	end
	return true
end

local appendAllChildren
local updateHostContainer
local updateHostComponent
local updateHostText
if supportsMutation then
	-- Mutation mode

	appendAllChildren = function(
		parent: Instance,
		workInProgress: Fiber,
		needsVisibilityToggle: boolean,
		isHidden: boolean
	)
		-- We only have the top Fiber that was created but we need recurse down its
		-- children to find all the terminal nodes.
		local node = workInProgress.child
		while node ~= nil do
			if node.tag == HostComponent or node.tag == HostText then
				appendInitialChild(parent, node.stateNode)
			elseif enableFundamentalAPI and node.tag == FundamentalComponent then
				appendInitialChild(parent, node.stateNode.instance)
			elseif node.tag == HostPortal then
				-- If we have a portal child, then we don't want to traverse
				-- down its children. Instead, we'll get insertions from each child in
				-- the portal directly.
			elseif node.child ~= nil then
				node.child.return_ = node
				node = node.child
				continue
			end
			if node == workInProgress then
				return
			end
			while node.sibling == nil do
				if node.return_ == nil or node.return_ == workInProgress then
					return
				end
				node = node.return_
			end
			-- FIXME Luau: Luau doesn't understand loop predicates above results in node.sibling ~= nil
			(node.sibling :: Fiber).return_ = node.return_
			node = node.sibling
		end
	end

	updateHostContainer = function(current: nil | Fiber, workInProgress: Fiber)
		-- Noop
	end
	function updateHostComponent(
		current: Fiber,
		workInProgress: Fiber,
		type: Type,
		newProps: Props,
		rootContainerInstance: Container
	)
		-- If we have an alternate, that means this is an update and we need to
		-- schedule a side-effect to do the updates.
		local oldProps = current.memoizedProps
		if oldProps == newProps then
			-- In mutation mode, this is sufficient for a bailout because
			-- we won't touch this node even if children changed.
			return
		end

		-- If we get updated because one of our children updated, we don't
		-- have newProps so we'll have to reuse them.
		-- TODO: Split the update API as separate for the props vs. children.
		-- Even better would be if children weren't special cased at all tho.
		local instance: Instance = workInProgress.stateNode
		local currentHostContext = getHostContext()
		-- TODO: Experiencing an error where oldProps is nil. Suggests a host
		-- component is hitting the resume path. Figure out why. Possibly
		-- related to `hidden`.
		local updatePayload =
			prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext)
		-- TODO: Type this specific to this type of component.
		workInProgress.updateQueue = updatePayload
		-- If the update payload indicates that there is a change or if there
		-- is a new ref we mark this as an update. All the work is done in commitWork.
		if updatePayload then
			markUpdate(workInProgress)
		end
	end
	function updateHostText(current: Fiber, workInProgress: Fiber, oldText: string, newText: string)
		-- If the text differs, mark it as an update. All the work in done in commitWork.
		if oldText ~= newText then
			markUpdate(workInProgress)
		end
	end
elseif supportsPersistence then
	-- Persistent host tree mode
	appendAllChildren = function(
		parent: Instance,
		workInProgress: Fiber,
		needsVisibilityToggle: boolean,
		isHidden: boolean
	)
		unimplemented("appendAllChildren")
		--     -- We only have the top Fiber that was created but we need recurse down its
		--     -- children to find all the terminal nodes.
		--     local node = workInProgress.child
		--     while (node ~= nil)
		--       -- eslint-disable-next-line no-labels
		--       branches: if node.tag == HostComponent)
		--         local instance = node.stateNode
		--         if needsVisibilityToggle and isHidden)
		--           -- This child is inside a timed out tree. Hide it.
		--           local props = node.memoizedProps
		--           local type = node.type
		--           instance = cloneHiddenInstance(instance, type, props, node)
		--         end
		--         appendInitialChild(parent, instance)
		--       } else if node.tag == HostText)
		--         local instance = node.stateNode
		--         if needsVisibilityToggle and isHidden)
		--           -- This child is inside a timed out tree. Hide it.
		--           local text = node.memoizedProps
		--           instance = cloneHiddenTextInstance(instance, text, node)
		--         end
		--         appendInitialChild(parent, instance)
		--       } else if enableFundamentalAPI and node.tag == FundamentalComponent)
		--         local instance = node.stateNode.instance
		--         if needsVisibilityToggle and isHidden)
		--           -- This child is inside a timed out tree. Hide it.
		--           local props = node.memoizedProps
		--           local type = node.type
		--           instance = cloneHiddenInstance(instance, type, props, node)
		--         end
		--         appendInitialChild(parent, instance)
		--       } else if node.tag == HostPortal)
		--         -- If we have a portal child, then we don't want to traverse
		--         -- down its children. Instead, we'll get insertions from each child in
		--         -- the portal directly.
		--       } else if node.tag == SuspenseComponent)
		--         if (node.flags & Update) ~= NoFlags)
		--           -- Need to toggle the visibility of the primary children.
		--           local newIsHidden = node.memoizedState ~= nil
		--           if newIsHidden)
		--             local primaryChildParent = node.child
		--             if primaryChildParent ~= nil)
		--               if primaryChildParent.child ~= nil)
		--                 primaryChildParent.child.return = primaryChildParent
		--                 appendAllChildren(
		--                   parent,
		--                   primaryChildParent,
		--                   true,
		--                   newIsHidden,
		--                 )
		--               end
		--               local fallbackChildParent = primaryChildParent.sibling
		--               if fallbackChildParent ~= nil)
		--                 fallbackChildParent.return = node
		--                 node = fallbackChildParent
		--                 continue
		--               end
		--             end
		--           end
		--         end
		--         if node.child ~= nil)
		--           -- Continue traversing like normal
		--           node.child.return = node
		--           node = node.child
		--           continue
		--         end
		--       } else if node.child ~= nil)
		--         node.child.return = node
		--         node = node.child
		--         continue
		--       end
		--       -- $FlowFixMe This is correct but Flow is confused by the labeled break.
		--       node = (node: Fiber)
		--       if node == workInProgress)
		--         return
		--       end
		--       while (node.sibling == nil)
		--         if node.return == nil or node.return == workInProgress)
		--           return
		--         end
		--         node = node.return
		--       end
		--       node.sibling.return = node.return
		--       node = node.sibling
		--     end
	end

	-- An unfortunate fork of appendAllChildren because we have two different parent types.
	local function appendAllChildrenToContainer(
		containerChildSet: ChildSet,
		workInProgress: Fiber,
		needsVisibilityToggle: boolean,
		isHidden: boolean
	)
		unimplemented("appendAllChildrenToContainer")
		-- -- We only have the top Fiber that was created but we need recurse down its
		-- -- children to find all the terminal nodes.
		-- local node = workInProgress.child
		-- while node ~= nil do
		--   -- eslint-disable-next-line no-labels
		--   if node.tag == HostComponent then
		--     local instance = node.stateNode
		--     if needsVisibilityToggle and isHidden then
		--       -- This child is inside a timed out tree. Hide it.
		--       local props = node.memoizedProps
		--       local type = node.type
		--       instance = cloneHiddenInstance(instance, type, props, node)
		--     end
		--     appendChildToContainerChildSet(containerChildSet, instance)
		--   elseif node.tag == HostText then
		--     local instance = node.stateNode
		--     if needsVisibilityToggle and isHidden then
		--       -- This child is inside a timed out tree. Hide it.
		--       local text = node.memoizedProps
		--       instance = cloneHiddenTextInstance(instance, text, node)
		--     end
		--     appendChildToContainerChildSet(containerChildSet, instance)
		--   elseif enableFundamentalAPI and node.tag == FundamentalComponent then
		--     local instance = node.stateNode.instance
		--     if needsVisibilityToggle and isHidden then
		--       -- This child is inside a timed out tree. Hide it.
		--       local props = node.memoizedProps
		--       local type = node.type
		--       instance = cloneHiddenInstance(instance, type, props, node)
		--     end
		--     appendChildToContainerChildSet(containerChildSet, instance)
		--   elseif node.tag == HostPortal then
		--     -- If we have a portal child, then we don't want to traverse
		--     -- down its children. Instead, we'll get insertions from each child in
		--     -- the portal directly.
		--   elseif node.tag == SuspenseComponent then
		--     if bit32.band(node.flags, Update) ~= NoFlags then
		--       -- Need to toggle the visibility of the primary children.
		--       local newIsHidden = node.memoizedState ~= nil
		--       if newIsHidden then
		--         local primaryChildParent = node.child
		--         if primaryChildParent ~= nil then
		--           if primaryChildParent.child ~= nil then
		--             primaryChildParent.child.return_ = primaryChildParent
		--             appendAllChildrenToContainer(
		--               containerChildSet,
		--               primaryChildParent,
		--               true,
		--               newIsHidden
		--             )
		--           end
		--           local fallbackChildParent = primaryChildParent.sibling
		--           if fallbackChildParent ~= nil then
		--             fallbackChildParent.return_ = node
		--             node = fallbackChildParent
		--             continue
		--           end
		--         end
		--       end
		--     end
		--     if node.child ~= nil then
		--       -- Continue traversing like normal
		--       node.child.return_ = node
		--       node = node.child
		--       continue
		--     end
		--   elseif node.child ~= nil then
		--     node.child.return_ = node
		--     node = node.child
		--     continue
		--   end
		--   -- $FlowFixMe This is correct but Flow is confused by the labeled break.
		--   -- node = (node: Fiber)
		--   if node == workInProgress then
		--     return
		--   end
		--   while node.sibling == nil do
		--     if node.return_ == nil or node.return_ == workInProgress then
		--       return
		--     end
		--     node = node.return_
		--   end
		--   node.sibling.return_ = node.return_
		--   node = node.sibling
		-- end
	end

	function updateHostContainer(current: nil | Fiber, workInProgress: Fiber)
		local portalOrRoot: {
			containerInfo: Container,
			pendingChildren: ChildSet,
			-- ...
			[any]: any,
		} =
			workInProgress.stateNode
		local childrenUnchanged = hadNoMutationsEffects(current, workInProgress)
		if childrenUnchanged then
		-- No changes, just reuse the existing instance.
		else
			local container = portalOrRoot.containerInfo
			local newChildSet = createContainerChildSet(container)
			-- If children might have changed, we have to add them all to the set.
			appendAllChildrenToContainer(newChildSet, workInProgress, false, false)
			portalOrRoot.pendingChildren = newChildSet
			-- Schedule an update on the container to swap out the container.
			markUpdate(workInProgress)
			finalizeContainerChildren(container, newChildSet)
		end
	end
--   updateHostComponent = function(
--     current: Fiber,
--     workInProgress: Fiber,
--     type: Type,
--     newProps: Props,
--     rootContainerInstance: Container,
--   )
--     local currentInstance = current.stateNode
--     local oldProps = current.memoizedProps
--     -- If there are no effects associated with this node, then none of our children had any updates.
--     -- This guarantees that we can reuse all of them.
--     local childrenUnchanged = workInProgress.firstEffect == nil
--     if childrenUnchanged and oldProps == newProps)
--       -- No changes, just reuse the existing instance.
--       -- Note that this might release a previous clone.
--       workInProgress.stateNode = currentInstance
--       return
--     end
--     local recyclableInstance: Instance = workInProgress.stateNode
--     local currentHostContext = getHostContext()
--     local updatePayload = nil
--     if oldProps ~= newProps)
--       updatePayload = prepareUpdate(
--         recyclableInstance,
--         type,
--         oldProps,
--         newProps,
--         rootContainerInstance,
--         currentHostContext,
--       )
--     end
--     if childrenUnchanged and updatePayload == nil)
--       -- No changes, just reuse the existing instance.
--       -- Note that this might release a previous clone.
--       workInProgress.stateNode = currentInstance
--       return
--     end
--     local newInstance = cloneInstance(
--       currentInstance,
--       updatePayload,
--       type,
--       oldProps,
--       newProps,
--       workInProgress,
--       childrenUnchanged,
--       recyclableInstance,
--     )
--     if
--       finalizeInitialChildren(
--         newInstance,
--         type,
--         newProps,
--         rootContainerInstance,
--         currentHostContext,
--       )
--     )
--       markUpdate(workInProgress)
--     end
--     workInProgress.stateNode = newInstance
--     if childrenUnchanged)
--       -- If there are no other effects in this tree, we need to flag this node as having one.
--       -- Even though we're not going to use it for anything.
--       -- Otherwise parents won't know that there are new children to propagate upwards.
--       markUpdate(workInProgress)
--     else
--       -- If children might have changed, we have to add them all to the set.
--       appendAllChildren(newInstance, workInProgress, false, false)
--     end
--   end
--   updateHostText = function(
--     current: Fiber,
--     workInProgress: Fiber,
--     oldText: string,
--     newText: string,
--   )
--     if oldText ~= newText)
--       -- If the text content differs, we'll create a new text instance for it.
--       local rootContainerInstance = getRootHostContainer()
--       local currentHostContext = getHostContext()
--       workInProgress.stateNode = createTextInstance(
--         newText,
--         rootContainerInstance,
--         currentHostContext,
--         workInProgress,
--       )
--       -- We'll have to mark it as having an effect, even though we won't use the effect for anything.
--       -- This lets the parents know that at least one of their children has changed.
--       markUpdate(workInProgress)
--     else
--       workInProgress.stateNode = current.stateNode
--     end
--   end
else
	-- No host operations
	updateHostContainer = function(current: nil | Fiber, workInProgress: Fiber)
		-- Noop
	end
	--   updateHostComponent = function(
	--     current: Fiber,
	--     workInProgress: Fiber,
	--     type: Type,
	--     newProps: Props,
	--     rootContainerInstance: Container,
	--   )
	--     -- Noop
	--   end
	--   updateHostText = function(
	--     current: Fiber,
	--     workInProgress: Fiber,
	--     oldText: string,
	--     newText: string,
	--   )
	--     -- Noop
	--   end
	-- end

	-- function cutOffTailIfNeeded(
	--   renderState: SuspenseListRenderState,
	--   hasRenderedATailFallback: boolean,
	-- )
	--   if getIsHydrating())
	--     -- If we're hydrating, we should consume as many items as we can
	--     -- so we don't leave any behind.
	--     return
	--   end
	--   switch (renderState.tailMode)
	--     case 'hidden': {
	--       -- Any insertions at the end of the tail list after this point
	--       -- should be invisible. If there are already mounted boundaries
	--       -- anything before them are not considered for collapsing.
	--       -- Therefore we need to go through the whole tail to find if
	--       -- there are any.
	--       local tailNode = renderState.tail
	--       local lastTailNode = nil
	--       while (tailNode ~= nil)
	--         if tailNode.alternate ~= nil)
	--           lastTailNode = tailNode
	--         end
	--         tailNode = tailNode.sibling
	--       end
	--       -- Next we're simply going to delete all insertions after the
	--       -- last rendered item.
	--       if lastTailNode == nil)
	--         -- All remaining items in the tail are insertions.
	--         renderState.tail = nil
	--       else
	--         -- Detach the insertion after the last node that was already
	--         -- inserted.
	--         lastTailNode.sibling = nil
	--       end
	--       break
	--     end
	--     case 'collapsed': {
	--       -- Any insertions at the end of the tail list after this point
	--       -- should be invisible. If there are already mounted boundaries
	--       -- anything before them are not considered for collapsing.
	--       -- Therefore we need to go through the whole tail to find if
	--       -- there are any.
	--       local tailNode = renderState.tail
	--       local lastTailNode = nil
	--       while (tailNode ~= nil)
	--         if tailNode.alternate ~= nil)
	--           lastTailNode = tailNode
	--         end
	--         tailNode = tailNode.sibling
	--       end
	--       -- Next we're simply going to delete all insertions after the
	--       -- last rendered item.
	--       if lastTailNode == nil)
	--         -- All remaining items in the tail are insertions.
	--         if !hasRenderedATailFallback and renderState.tail ~= nil)
	--           -- We suspended during the head. We want to show at least one
	--           -- row at the tail. So we'll keep on and cut off the rest.
	--           renderState.tail.sibling = nil
	--         else
	--           renderState.tail = nil
	--         end
	--       else
	--         -- Detach the insertion after the last node that was already
	--         -- inserted.
	--         lastTailNode.sibling = nil
	--       end
	--       break
	--     end
	--   end
end

local function bubbleProperties(completedWork: Fiber)
	local didBailout = completedWork.alternate ~= nil
		and (completedWork.alternate :: Fiber).child == completedWork.child

	local newChildLanes = NoLanes
	local subtreeFlags = NoFlags

	if not didBailout then
		-- Bubble up the earliest expiration time.
		if enableProfilerTimer and bit32.band(completedWork.mode, ProfileMode) ~= NoMode then
			-- In profiling mode, resetChildExpirationTime is also used to reset
			-- profiler durations.
			local actualDuration = completedWork.actualDuration
			local treeBaseDuration = completedWork.selfBaseDuration

			local child = completedWork.child
			while child ~= nil do
				newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes))

				subtreeFlags = bit32.bor(subtreeFlags, child.subtreeFlags)
				subtreeFlags = bit32.bor(subtreeFlags, child.flags)

				-- When a fiber is cloned, its actualDuration is reset to 0. This value will
				-- only be updated if work is done on the fiber (i.e. it doesn't bailout).
				-- When work is done, it should bubble to the parent's actualDuration. If
				-- the fiber has not been cloned though, (meaning no work was done), then
				-- this value will reflect the amount of time spent working on a previous
				-- render. In that case it should not bubble. We determine whether it was
				-- cloned by comparing the child pointer.
				actualDuration += child.actualDuration

				treeBaseDuration += child.treeBaseDuration
				child = child.sibling
			end

			completedWork.actualDuration = actualDuration
			completedWork.treeBaseDuration = treeBaseDuration
		else
			local child = completedWork.child
			while child ~= nil do
				-- performance: inline mergeLanes
				-- newChildLanes = mergeLanes(
				--   newChildLanes,
				--   mergeLanes(child.lanes, child.childLanes)
				-- )
				newChildLanes = bit32.bor(newChildLanes, bit32.bor(child.lanes, child.childLanes))

				subtreeFlags = bit32.bor(subtreeFlags, child.subtreeFlags)
				subtreeFlags = bit32.bor(subtreeFlags, child.flags)

				-- NOTE: this was missed in the "new" version of the file in React 17, but is fixed in React 18
				-- Update the return pointer so the tree is consistent. This is a code
				-- smell because it assumes the commit phase is never concurrent with
				-- the render phase. Will address during refactor to alternate model.
				child.return_ = completedWork

				child = child.sibling
			end
		end

		completedWork.subtreeFlags = bit32.bor(completedWork.subtreeFlags, subtreeFlags)
	else
		-- Bubble up the earliest expiration time.
		if enableProfilerTimer and bit32.band(completedWork.mode, ProfileMode) ~= NoMode then
			-- In profiling mode, resetChildExpirationTime is also used to reset
			-- profiler durations.
			local treeBaseDuration = completedWork.selfBaseDuration

			local child = completedWork.child
			while child ~= nil do
				newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes))

				-- "Static" flags share the lifetime of the fiber/hook they belong to,
				-- so we should bubble those up even during a bailout. All the other
				-- flags have a lifetime only of a single render + commit, so we should
				-- ignore them.
				subtreeFlags = bit32.bor(subtreeFlags, bit32.band(child.subtreeFlags, StaticMask))
				subtreeFlags = bit32.bor(subtreeFlags, bit32.band(child.flags, StaticMask))

				treeBaseDuration += child.treeBaseDuration
				child = child.sibling
			end

			completedWork.treeBaseDuration = treeBaseDuration
		else
			local child = completedWork.child
			while child ~= nil do
				-- performance: inline mergeLanes
				-- newChildLanes = mergeLanes(
				--   newChildLanes,
				--   mergeLanes(child.lanes, child.childLanes)
				-- )
				newChildLanes = bit32.bor(newChildLanes, bit32.bor(child.lanes, child.childLanes))

				-- "Static" flags share the lifetime of the fiber/hook they belong to,
				-- so we should bubble those up even during a bailout. All the other
				-- flags have a lifetime only of a single render + commit, so we should
				-- ignore them.
				subtreeFlags = bit32.bor(subtreeFlags, bit32.band(child.subtreeFlags, StaticMask))
				subtreeFlags = bit32.bor(subtreeFlags, bit32.band(child.flags, StaticMask))

				-- NOTE: this was missed in the "new" version of the file in React 17, but is fixed in React 18
				-- Update the return pointer so the tree is consistent. This is a code
				-- smell because it assumes the commit phase is never concurrent with
				-- the render phase. Will address during refactor to alternate model.
				child.return_ = completedWork

				child = child.sibling
			end
		end

		completedWork.subtreeFlags = bit32.bor(completedWork.subtreeFlags, subtreeFlags)
	end

	completedWork.childLanes = newChildLanes

	return didBailout
end

-- FIXME (roblox): type refinement
-- local function completeWork(
--   current: Fiber | nil,
--   workInProgress: Fiber,
--   renderLanes: Lanes
-- ): Fiber | nil
local function completeWork(current, workInProgress: Fiber, renderLanes: Lanes): Fiber | nil
	local newProps = workInProgress.pendingProps

	if
		workInProgress.tag == IndeterminateComponent
		or workInProgress.tag == LazyComponent
		or workInProgress.tag == SimpleMemoComponent
		or workInProgress.tag == FunctionComponent
		or workInProgress.tag == ForwardRef
		or workInProgress.tag == Fragment
		or workInProgress.tag == Mode
		or workInProgress.tag == ContextConsumer
		or workInProgress.tag == MemoComponent
	then
		bubbleProperties(workInProgress)
		return nil
	elseif workInProgress.tag == ClassComponent then
		local Component = workInProgress.type
		if isLegacyContextProvider(Component) then
			popLegacyContext(workInProgress)
		end
		bubbleProperties(workInProgress)
		return nil
	elseif workInProgress.tag == HostRoot then
		popHostContainer(workInProgress)
		popTopLevelLegacyContextObject(workInProgress)
		resetMutableSourceWorkInProgressVersions()
		-- FIXME: type coercion
		-- local fiberRoot = (workInProgress.stateNode: FiberRoot)
		local fiberRoot = workInProgress.stateNode
		if fiberRoot.pendingContext then
			fiberRoot.context = fiberRoot.pendingContext
			fiberRoot.pendingContext = nil
		end
		if current == nil or current.child == nil then
			-- If we hydrated, pop so that we can delete any remaining children
			-- that weren't hydrated.
			local wasHydrated = popHydrationState(workInProgress)
			if wasHydrated then
				-- If we hydrated, then we'll need to schedule an update for
				-- the commit side-effects on the root.
				markUpdate(workInProgress)
			elseif not fiberRoot.hydrate then
				-- Schedule an effect to clear this container at the start of the next commit.
				-- This handles the case of React rendering into a container with previous children.
				-- It's also safe to do for updates too, because current.child would only be nil
				-- if the previous render was nil (so the the container would already be empty).
				workInProgress.flags = bit32.bor(workInProgress.flags, Snapshot)
			end
		end
		updateHostContainer(current, workInProgress)
		bubbleProperties(workInProgress)
		return nil
	elseif workInProgress.tag == HostComponent then
		popHostContext(workInProgress)
		local rootContainerInstance = getRootHostContainer()
		local type = workInProgress.type
		if current ~= nil and workInProgress.stateNode ~= nil then
			updateHostComponent(current, workInProgress, type, newProps, rootContainerInstance)

			if current.ref ~= workInProgress.ref then
				markRef(workInProgress)
			end
		else
			if not newProps then
				invariant(
					workInProgress.stateNode ~= nil,
					"We must have new props for new mounts. This error is likely "
						.. "caused by a bug in React. Please file an issue."
				)
				-- This can happen when we abort work.
				bubbleProperties(workInProgress)
				return nil
			end

			local currentHostContext = getHostContext()
			-- TODO: Move createInstance to beginWork and keep it on a context
			-- "stack" as the parent. Then append children as we go in beginWork
			-- or completeWork depending on whether we want to add them top->down or
			-- bottom->up. Top->down is faster in IE11.
			local wasHydrated = popHydrationState(workInProgress)
			if wasHydrated then
				-- TODO: Move this and createInstance step into the beginPhase
				-- to consolidate.
				if prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext) then
					-- If changes to the hydrated node need to be applied at the
					-- commit-phase we mark this as such.
					markUpdate(workInProgress)
				end
			else
				local instance =
					createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress)

				appendAllChildren(instance, workInProgress, false, false)

				workInProgress.stateNode = instance

				-- Certain renderers require commit-time effects for initial mount.
				-- (eg DOM renderer supports auto-focus for certain elements).
				-- Make sure such renderers get scheduled for later work.
				if finalizeInitialChildren(instance, type, newProps, rootContainerInstance, currentHostContext) then
					markUpdate(workInProgress)
				end
			end

			if workInProgress.ref ~= nil then
				-- If there is a ref on a host node we need to schedule a callback
				markRef(workInProgress)
			end
		end
		bubbleProperties(workInProgress)
		return nil
	elseif workInProgress.tag == HostText then
		local newText = newProps
		if current and workInProgress.stateNode ~= nil then
			local oldText = current.memoizedProps
			-- If we have an alternate, that means this is an update and we need
			-- to schedule a side-effect to do the updates.
			updateHostText(current, workInProgress, oldText, newText)
		else
			if typeof(newText) ~= "string" then
				invariant(
					workInProgress.stateNode ~= nil,
					"We must have new props for new mounts. This error is likely "
						.. "caused by a bug in React. Please file an issue."
				)
				-- This can happen when we abort work.
			end
			local rootContainerInstance = getRootHostContainer()
			local currentHostContext = getHostContext()
			local wasHydrated = popHydrationState(workInProgress)
			if wasHydrated then
				if prepareToHydrateHostTextInstance(workInProgress) then
					markUpdate(workInProgress)
				end
			else
				workInProgress.stateNode =
					createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress)
			end
		end
		bubbleProperties(workInProgress)
		return nil
	elseif workInProgress.tag == Profiler then
		local didBailout = bubbleProperties(workInProgress)
		if not didBailout then
			-- Use subtreeFlags to determine which commit callbacks should fire.
			-- TODO: Move this logic to the commit phase, since we already check if
			-- a fiber's subtree contains effects. Refactor the commit phase's
			-- depth-first traversal so that we can put work tag-specific logic
			-- before or after committing a subtree's effects.
			local OnRenderFlag = Update
			local OnCommitFlag = Callback
			local OnPostCommitFlag = Passive
			local subtreeFlags = workInProgress.subtreeFlags
			local flags = workInProgress.flags
			local newFlags = flags

			-- Call onRender any time this fiber or its subtree are worked on.
			if bit32.band(flags, PerformedWork) ~= NoFlags or bit32.band(subtreeFlags, PerformedWork) ~= NoFlags then
				newFlags = bit32.bor(newFlags, OnRenderFlag)
			end

			-- Call onCommit only if the subtree contains layout work, or if it
			-- contains deletions, since those might result in unmount work, which
			-- we include in the same measure.
			-- TODO: Can optimize by using a static flag to track whether a tree
			-- contains layout effects, like we do for passive effects.
			if
				bit32.band(flags, bit32.bor(LayoutMask, Deletion)) ~= NoFlags
				or bit32.band(subtreeFlags, bit32.bor(LayoutMask, Deletion)) ~= NoFlags
			then
				newFlags = bit32.bor(newFlags, OnCommitFlag)
			end

			-- Call onPostCommit only if the subtree contains passive work.
			-- Don't have to check for deletions, because Deletion is already
			-- a passive flag.
			if bit32.band(flags, PassiveMask) ~= NoFlags or bit32.band(subtreeFlags, PassiveMask) ~= NoFlags then
				newFlags = bit32.bor(newFlags, OnPostCommitFlag)
			end
			workInProgress.flags = newFlags
		else
			-- This fiber and its subtree bailed out, so don't fire any callbacks.
		end

		return nil
	elseif workInProgress.tag == SuspenseComponent then
		popSuspenseContext(workInProgress)
		local nextState: nil | SuspenseState = workInProgress.memoizedState

		if enableSuspenseServerRenderer then
			-- FIXME: remove :: recast once Luau understands if statement nil check
			if nextState ~= nil and (nextState :: SuspenseState).dehydrated ~= nil then
				if current == nil then
					local wasHydrated = popHydrationState(workInProgress)
					invariant(
						wasHydrated,
						"A dehydrated suspense component was completed without a hydrated node. "
							.. "This is probably a bug in React."
					)
					prepareToHydrateHostSuspenseInstance(workInProgress)
					if enableSchedulerTracing then
						markSpawnedWork(OffscreenLane)
					end
					bubbleProperties(workInProgress)
					if enableProfilerTimer then
						if bit32.band(workInProgress.mode, ProfileMode) ~= NoMode then
							local isTimedOutSuspense = nextState ~= nil
							if isTimedOutSuspense then
								-- Don't count time spent in a timed out Suspense subtree as part of the base duration.
								local primaryChildFragment = workInProgress.child
								if primaryChildFragment ~= nil then
									-- $FlowFixMe Flow doens't support type casting in combiation with the -= operator
									workInProgress.treeBaseDuration = (
										primaryChildFragment.treeBaseDuration :: any
									) :: number
								end
							end
						end
					end
					return nil
				else
					-- We should never have been in a hydration state if we didn't have a current.
					-- However, in some of those paths, we might have reentered a hydration state
					-- and then we might be inside a hydration state. In that case, we'll need to exit out of it.
					resetHydrationState()
					if bit32.band(workInProgress.flags, DidCapture) == NoFlags then
						-- This boundary did not suspend so it's now hydrated and unsuspended.
						workInProgress.memoizedState = nil
					end
					-- If nothing suspended, we need to schedule an effect to mark this boundary
					-- as having hydrated so events know that they're free to be invoked.
					-- It's also a signal to replay events and the suspense callback.
					-- If something suspended, schedule an effect to attach retry listeners.
					-- So we might as well always mark this.
					workInProgress.flags = bit32.bor(workInProgress.flags, Update)
					bubbleProperties(workInProgress)
					if enableProfilerTimer then
						if bit32.band(workInProgress.mode, ProfileMode) ~= NoMode then
							local isTimedOutSuspense = nextState ~= nil
							if isTimedOutSuspense then
								-- Don't count time spent in a timed out Suspense subtree as part of the base duration.
								local primaryChildFragment = workInProgress.child
								if primaryChildFragment ~= nil then
									-- $FlowFixMe Flow doens't support type casting in combiation with the -= operator
									-- deviation: remove recast to silence analyze
									workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration
								end
							end
						end
					end
					return nil
				end
			end
		end

		if bit32.band(workInProgress.flags, DidCapture) ~= NoFlags then
			-- Something suspended. Re-render with the fallback children.
			workInProgress.lanes = renderLanes
			-- Do not reset the effect list.
			if enableProfilerTimer and bit32.band(workInProgress.mode, ProfileMode) ~= NoMode then
				transferActualDuration(workInProgress)
			end
			-- Don't bubble properties in this case.
			return workInProgress
		end

		local nextDidTimeout = nextState ~= nil
		local prevDidTimeout = false
		if current == nil then
			if workInProgress.memoizedProps.fallback ~= nil then
				popHydrationState(workInProgress)
			end
		else
			local prevState: nil | SuspenseState = current.memoizedState
			prevDidTimeout = prevState ~= nil
		end

		if nextDidTimeout and not prevDidTimeout then
			-- If this subtreee is running in blocking mode we can suspend,
			-- otherwise we won't suspend.
			-- TODO: This will still suspend a synchronous tree if anything
			-- in the concurrent tree already suspended during this render.
			-- This is a known bug.
			if bit32.band(workInProgress.mode, BlockingMode) ~= NoMode then
				-- TODO: Move this back to throwException because this is too late
				-- if this is a large tree which is common for initial loads. We
				-- don't know if we should restart a render or not until we get
				-- this marker, and this is too late.
				-- If this render already had a ping or lower pri updates,
				-- and this is the first time we know we're going to suspend we
				-- should be able to immediately restart from within throwException.
				local hasInvisibleChildContext = current == nil
					and workInProgress.memoizedProps.unstable_avoidThisFallback ~= true
				if
					hasInvisibleChildContext
					or hasSuspenseContext(
						suspenseStackCursor.current,
						InvisibleParentSuspenseContext :: SuspenseContext
					)
				then
					-- If this was in an invisible tree or a new render, then showing
					-- this boundary is ok.
					renderDidSuspend()
				else
					-- Otherwise, we're going to have to hide content so we should
					-- suspend for longer if possible.
					renderDidSuspendDelayIfPossible()
				end
			end
		end

		if supportsPersistence then
			-- TODO: Only schedule updates if not prevDidTimeout.
			if nextDidTimeout then
				-- If this boundary just timed out, schedule an effect to attach a
				-- retry listener to the promise. This flag is also used to hide the
				-- primary children.
				workInProgress.flags = bit32.bor(workInProgress.flags, Update)
			end
		end
		if supportsMutation then
			-- TODO: Only schedule updates if these values are non equal, i.e. it changed.
			if nextDidTimeout or prevDidTimeout then
				-- If this boundary just timed out, schedule an effect to attach a
				-- retry listener to the promise. This flag is also used to hide the
				-- primary children. In mutation mode, we also need the flag to
				-- *unhide* children that were previously hidden, so check if this
				-- is currently timed out, too.
				workInProgress.flags = bit32.bor(workInProgress.flags, Update)
			end
		end
		if
			enableSuspenseCallback
			and workInProgress.updateQueue ~= nil
			and workInProgress.memoizedProps.suspenseCallback ~= nil
		then
			-- Always notify the callback
			workInProgress.flags = bit32.bor(workInProgress.flags, Update)
		end
		bubbleProperties(workInProgress)
		if enableProfilerTimer then
			if bit32.band(workInProgress.mode, ProfileMode) ~= NoMode then
				if nextDidTimeout then
					-- Don't count time spent in a timed out Suspense subtree as part of the base duration.
					local primaryChildFragment = workInProgress.child
					if primaryChildFragment ~= nil then
						-- $FlowFixMe Flow doens't support type casting in combiation with the -= operator
						-- deviation: remove recast to silence analyze
						workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration
					end
				end
			end
		end
		return nil
	elseif workInProgress.tag == HostPortal then
		popHostContainer(workInProgress)
		updateHostContainer(current, workInProgress)
		if current == nil then
			preparePortalMount(workInProgress.stateNode.containerInfo)
		end
		bubbleProperties(workInProgress)
		return nil
	elseif workInProgress.tag == ContextProvider then
		-- Pop provider fiber
		popProvider(workInProgress)
		bubbleProperties(workInProgress)
		return nil
	elseif workInProgress.tag == IncompleteClassComponent then
		-- Same as class component case. I put it down here so that the tags are
		-- sequential to ensure this switch is compiled to a jump table.
		local Component = workInProgress.type
		if isLegacyContextProvider(Component) then
			popLegacyContext(workInProgress)
		end
		bubbleProperties(workInProgress)
		return nil
	elseif workInProgress.tag == SuspenseListComponent then
		unimplemented("SuspenseListComponent")
	-- popSuspenseContext(workInProgress)

	-- local renderState: nil | SuspenseListRenderState =
	--   workInProgress.memoizedState

	-- if renderState == nil)
	--   -- We're running in the default, "independent" mode.
	--   -- We don't do anything in this mode.
	--   bubbleProperties(workInProgress)
	--   return nil
	-- end

	-- local didSuspendAlready = (workInProgress.flags & DidCapture) ~= NoFlags

	-- local renderedTail = renderState.rendering
	-- if renderedTail == nil)
	--   -- We just rendered the head.
	--   if !didSuspendAlready)
	--     -- This is the first pass. We need to figure out if anything is still
	--     -- suspended in the rendered set.

	--     -- If new content unsuspended, but there's still some content that
	--     -- didn't. Then we need to do a second pass that forces everything
	--     -- to keep showing their fallbacks.

	--     -- We might be suspended if something in this render pass suspended, or
	--     -- something in the previous committed pass suspended. Otherwise,
	--     -- there's no chance so we can skip the expensive call to
	--     -- findFirstSuspended.
	--     local cannotBeSuspended =
	--       renderHasNotSuspendedYet() and
	--       (current == nil or (current.flags & DidCapture) == NoFlags)
	--     if !cannotBeSuspended)
	--       local row = workInProgress.child
	--       while (row ~= nil)
	--         local suspended = findFirstSuspended(row)
	--         if suspended ~= nil)
	--           didSuspendAlready = true
	--           workInProgress.flags |= DidCapture
	--           cutOffTailIfNeeded(renderState, false)

	--           -- If this is a newly suspended tree, it might not get committed as
	--           -- part of the second pass. In that case nothing will subscribe to
	--           -- its thennables. Instead, we'll transfer its thennables to the
	--           -- SuspenseList so that it can retry if they resolve.
	--           -- There might be multiple of these in the list but since we're
	--           -- going to wait for all of them anyway, it doesn't really matter
	--           -- which ones gets to ping. In theory we could get clever and keep
	--           -- track of how many dependencies remain but it gets tricky because
	--           -- in the meantime, we can add/remove/change items and dependencies.
	--           -- We might bail out of the loop before finding any but that
	--           -- doesn't matter since that means that the other boundaries that
	--           -- we did find already has their listeners attached.
	--           local newThennables = suspended.updateQueue
	--           if newThennables ~= nil)
	--             workInProgress.updateQueue = newThennables
	--             workInProgress.flags |= Update
	--           end

	--           -- Rerender the whole list, but this time, we'll force fallbacks
	--           -- to stay in place.
	--           -- Reset the child fibers to their original state.
	--           workInProgress.subtreeFlags = NoFlags
	--           resetChildFibers(workInProgress, renderLanes)

	--           -- Set up the Suspense Context to force suspense and immediately
	--           -- rerender the children.
	--           pushSuspenseContext(
	--             workInProgress,
	--             setShallowSuspenseContext(
	--               suspenseStackCursor.current,
	--               ForceSuspenseFallback,
	--             ),
	--           )
	--           -- Don't bubble properties in this case.
	--           return workInProgress.child
	--         end
	--         row = row.sibling
	--       end
	--     end

	--     if renderState.tail ~= nil and now() > getRenderTargetTime())
	--       -- We have already passed our CPU deadline but we still have rows
	--       -- left in the tail. We'll just give up further attempts to render
	--       -- the main content and only render fallbacks.
	--       workInProgress.flags |= DidCapture
	--       didSuspendAlready = true

	--       cutOffTailIfNeeded(renderState, false)

	--       -- Since nothing actually suspended, there will nothing to ping this
	--       -- to get it started back up to attempt the next item. While in terms
	--       -- of priority this work has the same priority as this current render,
	--       -- it's not part of the same transition once the transition has
	--       -- committed. If it's sync, we still want to yield so that it can be
	--       -- painted. Conceptually, this is really the same as pinging.
	--       -- We can use any RetryLane even if it's the one currently rendering
	--       -- since we're leaving it behind on this node.
	--       workInProgress.lanes = SomeRetryLane
	--       if enableSchedulerTracing)
	--         markSpawnedWork(SomeRetryLane)
	--       end
	--     end
	--   else
	--     cutOffTailIfNeeded(renderState, false)
	--   end
	--   -- Next we're going to render the tail.
	-- else
	--   -- Append the rendered row to the child list.
	--   if !didSuspendAlready)
	--     local suspended = findFirstSuspended(renderedTail)
	--     if suspended ~= nil)
	--       workInProgress.flags |= DidCapture
	--       didSuspendAlready = true

	--       -- Ensure we transfer the update queue to the parent so that it doesn't
	--       -- get lost if this row ends up dropped during a second pass.
	--       local newThennables = suspended.updateQueue
	--       if newThennables ~= nil)
	--         workInProgress.updateQueue = newThennables
	--         workInProgress.flags |= Update
	--       end

	--       cutOffTailIfNeeded(renderState, true)
	--       -- This might have been modified.
	--       if
	--         renderState.tail == nil and
	--         renderState.tailMode == 'hidden' and
	--         !renderedTail.alternate and
	--         !getIsHydrating() -- We don't cut it if we're hydrating.
	--       )
	--         -- We're done.
	--         bubbleProperties(workInProgress)
	--         return nil
	--       end
	--     } else if
	--       -- The time it took to render last row is greater than the remaining
	--       -- time we have to render. So rendering one more row would likely
	--       -- exceed it.
	--       now() * 2 - renderState.renderingStartTime >
	--         getRenderTargetTime() and
	--       renderLanes ~= OffscreenLane
	--     )
	--       -- We have now passed our CPU deadline and we'll just give up further
	--       -- attempts to render the main content and only render fallbacks.
	--       -- The assumption is that this is usually faster.
	--       workInProgress.flags |= DidCapture
	--       didSuspendAlready = true

	--       cutOffTailIfNeeded(renderState, false)

	--       -- Since nothing actually suspended, there will nothing to ping this
	--       -- to get it started back up to attempt the next item. If we can show
	--       -- them, then they really have the same priority as this render.
	--       -- So we'll pick it back up the very next render pass once we've had
	--       -- an opportunity to yield for paint.
	--       workInProgress.lanes = SomeRetryLane
	--       if enableSchedulerTracing)
	--         markSpawnedWork(SomeRetryLane)
	--       end
	--     end
	--   end
	--   if renderState.isBackwards)
	--     -- The effect list of the backwards tail will have been added
	--     -- to the end. This breaks the guarantee that life-cycles fire in
	--     -- sibling order but that isn't a strong guarantee promised by React.
	--     -- Especially since these might also just pop in during future commits.
	--     -- Append to the beginning of the list.
	--     renderedTail.sibling = workInProgress.child
	--     workInProgress.child = renderedTail
	--   else
	--     local previousSibling = renderState.last
	--     if previousSibling ~= nil)
	--       previousSibling.sibling = renderedTail
	--     else
	--       workInProgress.child = renderedTail
	--     end
	--     renderState.last = renderedTail
	--   end
	-- end

	-- if renderState.tail ~= nil)
	--   -- We still have tail rows to render.
	--   -- Pop a row.
	--   local next = renderState.tail
	--   renderState.rendering = next
	--   renderState.tail = next.sibling
	--   renderState.renderingStartTime = now()
	--   next.sibling = nil

	--   -- Restore the context.
	--   -- TODO: We can probably just avoid popping it instead and only
	--   -- setting it the first time we go from not suspended to suspended.
	--   local suspenseContext = suspenseStackCursor.current
	--   if didSuspendAlready)
	--     suspenseContext = setShallowSuspenseContext(
	--       suspenseContext,
	--       ForceSuspenseFallback,
	--     )
	--   else
	--     suspenseContext = setDefaultShallowSuspenseContext(suspenseContext)
	--   end
	--   pushSuspenseContext(workInProgress, suspenseContext)
	--   -- Do a pass over the next row.
	--   -- Don't bubble properties in this case.
	--   return next
	-- end
	-- bubbleProperties(workInProgress)
	-- return nil
	-- end
	elseif workInProgress.tag == FundamentalComponent then
		unimplemented("FundamentalComponent")
	--   if enableFundamentalAPI)
	--   local fundamentalImpl = workInProgress.type.impl
	--   local fundamentalInstance: ReactFundamentalComponentInstance<
	--     any,
	--     any,
	--   > | nil = workInProgress.stateNode

	--   if fundamentalInstance == nil)
	--     local getInitialState = fundamentalImpl.getInitialState
	--     local fundamentalState
	--     if getInitialState ~= undefined)
	--       fundamentalState = getInitialState(newProps)
	--     end
	--     fundamentalInstance = workInProgress.stateNode = createFundamentalStateInstance(
	--       workInProgress,
	--       newProps,
	--       fundamentalImpl,
	--       fundamentalState or {},
	--     )
	--     local instance = ((getFundamentalComponentInstance(
	--       fundamentalInstance,
	--     ): any): Instance)
	--     fundamentalInstance.instance = instance
	--     if fundamentalImpl.reconcileChildren == false)
	--       bubbleProperties(workInProgress)
	--       return nil
	--     end
	--     appendAllChildren(instance, workInProgress, false, false)
	--     mountFundamentalComponent(fundamentalInstance)
	--   else
	--     -- We fire update in commit phase
	--     local prevProps = fundamentalInstance.props
	--     fundamentalInstance.prevProps = prevProps
	--     fundamentalInstance.props = newProps
	--     fundamentalInstance.currentFiber = workInProgress
	--     if supportsPersistence)
	--       local instance = cloneFundamentalInstance(fundamentalInstance)
	--       fundamentalInstance.instance = instance
	--       appendAllChildren(instance, workInProgress, false, false)
	--     end
	--     local shouldUpdate = shouldUpdateFundamentalComponent(
	--       fundamentalInstance,
	--     )
	--     if shouldUpdate)
	--       markUpdate(workInProgress)
	--     end
	--   end
	--   bubbleProperties(workInProgress)
	--   return nil
	-- end
	elseif workInProgress.tag == ScopeComponent then
		unimplemented("ScopeComponent")
	-- if enableScopeAPI)
	--   if current == nil)
	--     local scopeInstance: ReactScopeInstance = createScopeInstance()
	--     workInProgress.stateNode = scopeInstance
	--     prepareScopeUpdate(scopeInstance, workInProgress)
	--     if workInProgress.ref ~= nil)
	--       markRef(workInProgress)
	--       markUpdate(workInProgress)
	--     end
	--   else
	--     if workInProgress.ref ~= nil)
	--       markUpdate(workInProgress)
	--     end
	--     if current.ref ~= workInProgress.ref)
	--       markRef(workInProgress)
	--     end
	--   end
	--   bubbleProperties(workInProgress)
	--   return nil
	-- end
	elseif workInProgress.tag == Block then
		unimplemented("Block")
	-- if enableBlocksAPI)
	--   bubbleProperties(workInProgress)
	--   return nil
	-- end
	elseif workInProgress.tag == OffscreenComponent or workInProgress.tag == LegacyHiddenComponent then
		popRenderLanes(workInProgress)
		local nextState: OffscreenState | nil = workInProgress.memoizedState
		local nextIsHidden = nextState ~= nil

		if current ~= nil then
			local prevState: OffscreenState | nil = current.memoizedState

			local prevIsHidden = prevState ~= nil
			if prevIsHidden ~= nextIsHidden and newProps.mode ~= "unstable-defer-without-hiding" then
				workInProgress.flags = bit32.bor(workInProgress.flags, Update)
			end
		end

		-- Don't bubble properties for hidden children.
		if
			not nextIsHidden
			or includesSomeLane(ReactFiberWorkLoop.subtreeRenderLanes, OffscreenLane :: Lane)
			or bit32.band(workInProgress.mode, ConcurrentMode) == NoMode
		then
			bubbleProperties(workInProgress)
		end

		return nil
	end
	invariant(
		false,
		"Unknown unit of work tag (%s). This error is likely caused by a bug in " .. "React. Please file an issue.",
		tostring(workInProgress.tag)
	)
	return nil
end

return {
	completeWork = completeWork,
}
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="345">
              <Properties>
                <string name="Name">ReactFiberComponentStack</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/72d00ab623502983ebd7ac0756cf2787df109811/packages/react-reconciler/src/ReactFiberComponentStack.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]

local Packages = script.Parent.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)
type Function = (...any) -> ...any
type Error = LuauPolyfill.Error

local ReactInternalTypes = require(script.Parent.ReactInternalTypes)
type Fiber = ReactInternalTypes.Fiber

local ReactWorkTags = require(script.Parent.ReactWorkTags)
local HostComponent = ReactWorkTags.HostComponent
local LazyComponent = ReactWorkTags.LazyComponent
local SuspenseComponent = ReactWorkTags.SuspenseComponent
local SuspenseListComponent = ReactWorkTags.SuspenseListComponent
local FunctionComponent = ReactWorkTags.FunctionComponent
local IndeterminateComponent = ReactWorkTags.IndeterminateComponent
local ForwardRef = ReactWorkTags.ForwardRef
local SimpleMemoComponent = ReactWorkTags.SimpleMemoComponent
local ClassComponent = ReactWorkTags.ClassComponent

local ReactComponentStackFrame = require(Packages.Shared).ReactComponentStackFrame
local describeBuiltInComponentFrame = ReactComponentStackFrame.describeBuiltInComponentFrame
local describeFunctionComponentFrame = ReactComponentStackFrame.describeFunctionComponentFrame
local describeClassComponentFrame = ReactComponentStackFrame.describeClassComponentFrame

local function describeFiber(fiber: Fiber): string
	-- deviation: untangling some nested ternaries to use more idiomatic if/else
	local owner: nil | Function = nil
	if _G.__DEV__ then
		-- FIXME (roblox): Luau's limited narrowing necessitates this local
		local debugOwner = fiber._debugOwner
		if debugOwner then
			owner = debugOwner.type
		end
	end
	local source = nil
	if _G.__DEV__ then
		source = fiber._debugSource
	end
	if fiber.tag == HostComponent then
		return describeBuiltInComponentFrame(fiber.type, source, owner)
	elseif fiber.tag == LazyComponent then
		return describeBuiltInComponentFrame("Lazy", source, owner)
	elseif fiber.tag == SuspenseComponent then
		return describeBuiltInComponentFrame("Suspense", source, owner)
	elseif fiber.tag == SuspenseListComponent then
		return describeBuiltInComponentFrame("SuspenseList", source, owner)
	elseif
		fiber.tag == FunctionComponent
		or fiber.tag == IndeterminateComponent
		or fiber.tag == SimpleMemoComponent
	then
		return describeFunctionComponentFrame(fiber.type, source, owner)
	elseif fiber.tag == ForwardRef then
		return describeFunctionComponentFrame(fiber.type.render, source, owner)
	elseif fiber.tag == ClassComponent then
		return describeClassComponentFrame(fiber.type, source, owner)
	else
		return ""
	end
end

return {
	getStackByFiberInDevAndProd = function(workInProgress: Fiber?): string
		local ok: boolean, result: Error | string = pcall(function()
			local info = ""
			local node = workInProgress
			repeat
				info ..= describeFiber(node :: Fiber)
				node = (node :: Fiber).return_
			until node == nil
			return info
		end)

		if not ok then
			local message = "\nError generating stack: "
			if typeof(result) == "table" and (result :: Error).message and (result :: Error).stack then
				return message .. (result :: Error).message .. "\n" .. tostring((result :: Error).stack)
			end
			return message .. tostring(result)
		end

		return result :: string
	end,
}
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="346">
              <Properties>
                <string name="Name">ReactFiberContext.new</string>
                <string name="Source"><![CDATA[-- upstream: https://github.com/facebook/react/blob/a724a3b578dce77d427bef313102a4d0e978d9b4/packages/react-reconciler/src/ReactFiberContext.new.js
--!strict
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]
local __DEV__ = _G.__DEV__ :: boolean
local __DISABLE_ALL_WARNINGS_EXCEPT_PROP_VALIDATION__ = _G.__DISABLE_ALL_WARNINGS_EXCEPT_PROP_VALIDATION__ :: boolean

local Packages = script.Parent.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)
local Object = LuauPolyfill.Object
local Error = LuauPolyfill.Error

-- NOTE: use patched console from shared
local console = require(Packages.Shared).console

local ReactInternalTypes = require(script.Parent.ReactInternalTypes)
type Fiber = ReactInternalTypes.Fiber
local ReactFiberStack = require(script.Parent["ReactFiberStack.new"])
type StackCursor<T> = ReactFiberStack.StackCursor<T>

local isFiberMounted = require(script.Parent.ReactFiberTreeReflection).isFiberMounted
local disableLegacyContext = require(Packages.Shared).ReactFeatureFlags.disableLegacyContext
local ReactWorkTags = require(script.Parent.ReactWorkTags)
local ClassComponent = ReactWorkTags.ClassComponent
local HostRoot = ReactWorkTags.HostRoot
local getComponentName = require(Packages.Shared).getComponentName
local checkPropTypes = require(Packages.Shared).checkPropTypes

local createCursor = ReactFiberStack.createCursor
local push = ReactFiberStack.push
local pop = ReactFiberStack.pop

local warnedAboutMissingGetChildContext

if __DEV__ then
	warnedAboutMissingGetChildContext = {}
end

local emptyContextObject = {}
if __DEV__ then
	Object.freeze(emptyContextObject)
end

-- deviation: Common types
type Object = { [any]: any }

-- A cursor to the current merged context object on the stack.
local contextStackCursor: StackCursor<Object> = createCursor(emptyContextObject)
-- A cursor to a boolean indicating whether the context has changed.
local didPerformWorkStackCursor: StackCursor<boolean> = createCursor(false)
-- Keep track of the previous context object that was on the stack.
-- We use this to get access to the parent context after we have already
-- pushed the next context provider, and now need to merge their contexts.
local previousContext: Object = emptyContextObject

-- deviation: Pre-declare function
local isContextProvider

-- deviation: FIXME: `Component: Function` - lock down component type def
local function getUnmaskedContext(workInProgress: Fiber, Component: any, didPushOwnContextIfProvider: boolean): Object
	-- performance: skip always-false compare in hot path
	-- if disableLegacyContext then
	-- 	return emptyContextObject
	-- else
	if didPushOwnContextIfProvider and isContextProvider(Component) then
		-- If the fiber is a context provider itself, when we read its context
		-- we may have already pushed its own child context on the stack. A context
		-- provider should not "see" its own child context. Therefore we read the
		-- previous (parent) context instead for a context provider.
		return previousContext
	end
	return contextStackCursor.current
	-- end
end

local function cacheContext(workInProgress: Fiber, unmaskedContext: Object, maskedContext: Object): ()
	-- performance: skip always-false compare in hot path
	-- if disableLegacyContext then
	-- 	return
	-- else
	local instance = workInProgress.stateNode
	instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext
	instance.__reactInternalMemoizedMaskedChildContext = maskedContext
	-- end
end

local function getMaskedContext(workInProgress: Fiber, unmaskedContext: Object): Object
	-- performance: skip always-false compare in hot path
	-- if disableLegacyContext then
	-- 	return emptyContextObject
	-- else
	local type_ = workInProgress.type
	-- deviation: For function components, we can't support `contextTypes`;
	-- instead, just return unmaskedContext
	if type(type_) == "function" then
		return unmaskedContext
	end

	local contextTypes = type_.contextTypes
	if not contextTypes then
		return emptyContextObject
	end

	-- Avoid recreating masked context unless unmasked context has changed.
	-- Failing to do this will result in unnecessary calls to componentWillReceiveProps.
	-- This may trigger infinite loops if componentWillReceiveProps calls setState.
	local instance = workInProgress.stateNode
	if instance and instance.__reactInternalMemoizedUnmaskedChildContext == unmaskedContext then
		return instance.__reactInternalMemoizedMaskedChildContext
	end

	local context = {}
	for key, _ in contextTypes do
		context[key] = unmaskedContext[key]
	end

	if __DEV__ or __DISABLE_ALL_WARNINGS_EXCEPT_PROP_VALIDATION__ then
		local name = getComponentName(type_) or "Unknown"
		-- deviation: nil as second argument for validateProps compatibility
		checkPropTypes(contextTypes, nil, context, "context", name)
	end

	-- Cache unmasked context so we can avoid recreating masked context unless necessary.
	-- Context is created before the class component is instantiated so check for instance.
	if instance then
		cacheContext(workInProgress, unmaskedContext, context)
	end

	return context
	-- end
end

local function hasContextChanged(): boolean
	if disableLegacyContext then
		return false
	else
		return didPerformWorkStackCursor.current
	end
end

-- deviation: `type: Function` - lock down component type def
function isContextProvider(type_): boolean
	-- performance: skip always-false compare in hot path
	-- if disableLegacyContext then
	-- 	return false
	-- else
	-- deviation: context types only valid for class components
	-- performance: type is already guarded as being a ClassComponent and/or typeof == 'table' in all call sites
	if type(type_) == "function" then
		return false
	end
	local childContextTypes = type_.childContextTypes
	return childContextTypes ~= nil
	-- end
end

local function popContext(fiber: Fiber): ()
	-- performance: skip always-false compare in hot path
	-- if disableLegacyContext then
	-- 	return
	-- else
	pop(didPerformWorkStackCursor, fiber)
	pop(contextStackCursor, fiber)
	-- end
end

local function popTopLevelContextObject(fiber: Fiber): ()
	-- performance: skip always-false compare in hot path
	-- if disableLegacyContext then
	-- 	return
	-- else
	pop(didPerformWorkStackCursor, fiber)
	pop(contextStackCursor, fiber)
	-- end
end

local function pushTopLevelContextObject(fiber: Fiber, context: Object, didChange: boolean): ()
	-- performance: disable always-false cmp in hot path
	-- if disableLegacyContext then
	-- 	return
	-- else
	if contextStackCursor.current ~= emptyContextObject then
		error(
			Error.new(
				"Unexpected context found on stack. "
					.. "This error is likely caused by a bug in React. Please file an issue."
			)
		)
	end

	push(contextStackCursor, context, fiber)
	push(didPerformWorkStackCursor, didChange, fiber)
	-- end
end

local function processChildContext(fiber: Fiber, type_: any, parentContext: Object): Object
	-- performance: eliminate always-false compare in hot path
	-- if disableLegacyContext then
	-- 	return parentContext
	-- else
	local instance = fiber.stateNode
	local childContextTypes = type_.childContextTypes

	-- TODO (bvaughn) Replace this behavior with an invariant() in the future.
	-- It has only been added in Fiber to match the (unintentional) behavior in Stack.
	if instance.getChildContext == nil or type(instance.getChildContext) ~= "function" then
		if __DEV__ then
			local componentName = getComponentName(type_) or "Unknown"

			if not warnedAboutMissingGetChildContext[componentName] then
				warnedAboutMissingGetChildContext[componentName] = true
				console.error(
					"%s.childContextTypes is specified but there is no getChildContext() method "
						.. "on the instance. You can either define getChildContext() on %s or remove "
						.. "childContextTypes from it.",
					componentName,
					componentName
				)
			end
		end
		return parentContext
	end

	local childContext = instance:getChildContext()
	for contextKey, _ in childContext do
		if childContextTypes[contextKey] == nil then
			local name = getComponentName(type_) or "Unknown"
			error(
				Error.new(
					string.format(
						'%s.getChildContext(): key "%s" is not defined in childContextTypes.',
						name,
						contextKey
					)
				)
			)
		end
	end
	if __DEV__ or __DISABLE_ALL_WARNINGS_EXCEPT_PROP_VALIDATION__ then
		local name = getComponentName(type_) or "Unknown"
		-- deviation: nil as second argument for validateProps compatibility
		checkPropTypes(childContextTypes, nil, childContext, "child context", name)
	end

	return Object.assign({}, parentContext, childContext)
	-- end
end

local function pushContextProvider(workInProgress: Fiber): boolean
	-- performance: eliminate always-false compare in hot path
	-- if disableLegacyContext then
	-- 	return false
	-- else
	local instance = workInProgress.stateNode
	-- We push the context as early as possible to ensure stack integrity.
	-- If the instance does not exist yet, we will push nil at first,
	-- and replace it on the stack later when invalidating the context.
	local memoizedMergedChildContext = (instance and instance.__reactInternalMemoizedMergedChildContext)
		or emptyContextObject

	-- Remember the parent context so we can merge with it later.
	-- Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
	previousContext = contextStackCursor.current
	push(contextStackCursor, memoizedMergedChildContext, workInProgress)
	push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress)

	return true
	-- end
end

local function invalidateContextProvider(workInProgress: Fiber, type_: any, didChange: boolean): ()
	-- performance: eliminate always-false compare in hot path
	-- if disableLegacyContext then
	-- 	return
	-- else
	local instance = workInProgress.stateNode

	if not instance then
		error(
			Error.new(
				"Expected to have an instance by this point. "
					.. "This error is likely caused by a bug in React. Please file an issue."
			)
		)
	end

	if didChange then
		-- Merge parent and own context.
		-- Skip this if we're not updating due to sCU.
		-- This avoids unnecessarily recomputing memoized values.
		local mergedContext = processChildContext(workInProgress, type_, previousContext)
		instance.__reactInternalMemoizedMergedChildContext = mergedContext

		-- Replace the old (or empty) context with the new one.
		-- It is important to unwind the context in the reverse order.
		pop(didPerformWorkStackCursor, workInProgress)
		pop(contextStackCursor, workInProgress)
		-- Now push the new context and mark that it has changed.
		push(contextStackCursor, mergedContext, workInProgress)
		push(didPerformWorkStackCursor, didChange, workInProgress)
	else
		pop(didPerformWorkStackCursor, workInProgress)
		push(didPerformWorkStackCursor, didChange, workInProgress)
	end
	-- end
end

local function findCurrentUnmaskedContext(fiber: Fiber): Object
	-- performance: eliminate always-false in hot path
	-- if disableLegacyContext then
	-- 	return emptyContextObject
	-- else
	-- Currently this is only used with renderSubtreeIntoContainer; not sure if it
	-- makes sense elsewhere
	if fiber.tag ~= ClassComponent or not isFiberMounted(fiber) then
		error(
			Error.new(
				"Expected subtree parent to be a mounted class component. "
					.. "This error is likely caused by a bug in React. Please file an issue."
			)
		)
	end

	-- TODO: Luau analyze can't accommodate the 'repeat until (not) nil' pattern
	local node: any = fiber
	repeat
		if node.tag == HostRoot then
			return node.stateNode.context
		elseif node.tag == ClassComponent then
			local Component = node.type
			-- deviation: inline specialized check for isContextProvider since we know it's a class
			if Component.childContextTypes ~= nil then
				return node.stateNode.__reactInternalMemoizedMergedChildContext
			end
		end

		node = node.return_
	until node == nil

	error(
		Error.new(
			"Found unexpected detached subtree parent. "
				.. "This error is likely caused by a bug in React. Please file an issue."
		)
	)
	-- end
end

return {
	emptyContextObject = emptyContextObject,
	getUnmaskedContext = getUnmaskedContext,
	cacheContext = cacheContext,
	getMaskedContext = getMaskedContext,
	hasContextChanged = hasContextChanged,
	popContext = popContext,
	popTopLevelContextObject = popTopLevelContextObject,
	pushTopLevelContextObject = pushTopLevelContextObject,
	processChildContext = processChildContext,
	isContextProvider = isContextProvider,
	pushContextProvider = pushContextProvider,
	invalidateContextProvider = invalidateContextProvider,
	findCurrentUnmaskedContext = findCurrentUnmaskedContext,
}
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="347">
              <Properties>
                <string name="Name">ReactFiberDevToolsHook.new</string>
                <string name="Source"><![CDATA[-- upstream: https://github.com/facebook/react/blob/16654436039dd8f16a63928e71081c7745872e8f/packages/react-reconciler/src/ReactFiberDevToolsHook.new.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
 ]]

local Packages = script.Parent.Parent
-- NOTE: use patched console from shared
local console = require(Packages.Shared).console
local LuauPolyfill = require(Packages.LuauPolyfill)
type Object = LuauPolyfill.Object
local exports = {}

-- deviation: subset copied here from devtools-shared/backend/types, to have stronger enforcement than 'Object' without circular dep
type DevToolsHook = {
	-- TODO: ideally, ReactRenderer type would be importable from this file so we could use it here
	inject: (Object) -> number | nil,
	supportsFiber: boolean,
	isDisabled: boolean,
	--   ...
}

-- deviation: we use callable tables instead of functions sometimes, so typeof() == "function" isn't enough
local function isCallable(value)
	if typeof(value) == "function" then
		return true
	end
	if typeof(value) == "table" then
		local mt = getmetatable(value)
		if mt and rawget(mt, "__call") then
			return true
		end
		if value._isMockFunction then
			return true
		end
	end
	return false
end

local enableProfilerTimer = require(Packages.Shared).ReactFeatureFlags.enableProfilerTimer

local ReactInternalTypes = require(script.Parent.ReactInternalTypes)
type Fiber = ReactInternalTypes.Fiber
type FiberRoot = ReactInternalTypes.FiberRoot
type ReactPriorityLevel = ReactInternalTypes.ReactPriorityLevel
local ReactTypes = require(Packages.Shared)
type ReactNodeList = ReactTypes.ReactNodeList

local DidCapture = require(script.Parent.ReactFiberFlags).DidCapture

-- deviation: we'll inject this a different way
-- declare var __REACT_DEVTOOLS_GLOBAL_HOOK__: Object | void

local rendererID = nil
local injectedHook = nil
local hasLoggedError = false

-- deviation: We use a function to handle the hook being changed at runtime
exports.isDevToolsPresent = function()
	return _G.__REACT_DEVTOOLS_GLOBAL_HOOK__ ~= nil
end

exports.injectInternals = function(internals: Object): boolean
	if _G.__REACT_DEVTOOLS_GLOBAL_HOOK__ == nil then
		-- No DevTools
		return false
	end
	local hook: DevToolsHook = _G.__REACT_DEVTOOLS_GLOBAL_HOOK__
	if hook.isDisabled then
		-- This isn't a real property on the hook, but it can be set to opt out
		-- of DevTools integration and associated warnings and logs.
		-- http://github.com/facebook/react/issues/3877
		return true
	end
	if not hook.supportsFiber then
		if _G.__DEV__ then
			console.error(
				"The installed version of React DevTools is too old and will not work "
					.. "with the current version of React. Please update React DevTools. "
					.. "https://reactjs.org/link/react-devtools"
			)
		end
		-- DevTools exists, even though it doesn't support Fiber.
		return true
	end
	local ok, err = pcall(function()
		rendererID = hook.inject(internals)
		-- We have successfully injected, so now it is safe to set up hooks.
		injectedHook = hook
	end)

	if not ok then
		-- Catch all errors because it is unsafe to throw during initialization.
		if _G.__DEV__ then
			console.error("React instrumentation encountered an error: %s.", err)
		end
	end
	-- DevTools exists
	return true
end

exports.onScheduleRoot = function(root: FiberRoot, children: ReactNodeList)
	if _G.__DEV__ then
		if
			injectedHook
			-- deviation: our mocked functions are tables with __call, since they have fields
			and isCallable(injectedHook.onScheduleFiberRoot)
		then
			local ok, err = pcall(injectedHook.onScheduleFiberRoot, rendererID, root, children)

			if not ok then
				if _G.__DEV__ and not hasLoggedError then
					hasLoggedError = true
					console.error("React instrumentation encountered an error: %s", err)
				end
			end
		end
	end
end

exports.onCommitRoot = function(root: FiberRoot, priorityLevel: ReactPriorityLevel)
	if
		injectedHook
		-- deviation: our mocked functions are tables with __call, since they have fields
		and isCallable(injectedHook.onCommitFiberRoot)
	then
		local ok, err = pcall(function()
			local didError = bit32.band(root.current.flags, DidCapture) == DidCapture
			if enableProfilerTimer then
				injectedHook.onCommitFiberRoot(rendererID, root, priorityLevel, didError)
			else
				injectedHook.onCommitFiberRoot(rendererID, root, nil, didError)
			end
		end)
		if not ok then
			if _G.__DEV__ then
				if not hasLoggedError then
					hasLoggedError = true
					console.error("React instrumentation encountered an error: %s", err)
				end
			end
		end
	end
end

exports.onCommitUnmount = function(fiber: Fiber)
	if
		injectedHook
		-- deviation: our mocked functions are tables with __call, since they have fields
		and isCallable(injectedHook.onCommitFiberUnmount)
	then
		local ok, err = pcall(injectedHook.onCommitFiberUnmount, rendererID, fiber)
		if not ok then
			if _G.__DEV__ then
				if not hasLoggedError then
					hasLoggedError = true
					console.error("React instrumentation encountered an error: %s", err)
				end
			end
		end
	end
end

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="348">
              <Properties>
                <string name="Name">ReactFiberErrorDialog</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/56e9feead0f91075ba0a4f725c9e4e343bca1c67/packages/react-reconciler/src/ReactFiberErrorDialog.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]

-- This module is forked in different environments.
-- By default, return `true` to log errors to the console.
-- Forks can return `false` if this isn't desirable.
local exports = {}

exports.showErrorDialog = function(boundary, errorInfo): boolean
	-- TODO: we may replace this with something that sends telemetry LUAFDN-222
	return true
end

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="349">
              <Properties>
                <string name="Name">ReactFiberErrorLogger</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/702fad4b1b48ac8f626ed3f35e8f86f5ea728084/packages/react-reconciler/src/ReactFiberErrorLogger.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
 ]]

local Packages = script.Parent.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)
type Error = LuauPolyfill.Error
local inspect = LuauPolyfill.util.inspect
local setTimeout = LuauPolyfill.setTimeout

local Shared = require(Packages.Shared)
local console = Shared.console
local errorToString = Shared.errorToString

local ReactInternalTypes = require(script.Parent.ReactInternalTypes)
type Fiber = ReactInternalTypes.Fiber
local ReactCapturedValue = require(script.Parent.ReactCapturedValue)
type CapturedValue<T> = ReactCapturedValue.CapturedValue<T>

local showErrorDialog = require(script.Parent.ReactFiberErrorDialog).showErrorDialog
local ClassComponent = require(script.Parent.ReactWorkTags).ClassComponent
local getComponentName = require(Packages.Shared).getComponentName

local exports = {}

exports.logCapturedError = function(boundary: Fiber, errorInfo: CapturedValue<any>)
	local ok, e = pcall(function()
		local logError = showErrorDialog(boundary, errorInfo)

		-- Allow injected showErrorDialog() to prevent default console.error logging.
		-- This enables renderers like ReactNative to better manage redbox behavior.
		if logError == false then
			-- FIXME Luau: needs void return Luau bugfix
			return nil
		end

		local error_ = errorInfo.value
		if _G.__DEV__ then
			local source = errorInfo.source
			local stack = errorInfo.stack
			local componentStack = stack or ""
			-- Browsers support silencing uncaught errors by calling
			-- `preventDefault()` in window `error` handler.
			-- We record this information as an expando on the error.
			if error_ ~= nil and error_._suppressLogging then
				if boundary.tag == ClassComponent then
					-- The error is recoverable and was silenced.
					-- Ignore it and don't print the stack addendum.
					-- This is handy for testing error boundaries without noise.
					return
				end
				-- The error is fatal. Since the silencing might have
				-- been accidental, we'll surface it anyway.
				-- However, the browser would have silenced the original error
				-- so we'll print it first, and then print the stack addendum.
				console["error"](error_) -- Don't transform to our wrapper
				-- For a more detailed description of this block, see:
				-- https://github.com/facebook/react/pull/13384
			end

			local componentName
			if source ~= nil then
				componentName = getComponentName(source.type)
			else
				componentName = nil
			end

			local componentNameMessage
			if componentName then
				componentNameMessage = "The above error occurred in the <" .. tostring(componentName) .. "> component:"
			else
				componentNameMessage = "The above error occurred in one of your React components:"
			end

			local errorBoundaryMessage
			local errorBoundaryName = getComponentName(boundary.type)
			if errorBoundaryName then
				errorBoundaryMessage = "React will try to recreate this component tree from scratch "
					.. "using the error boundary you provided, "
					.. errorBoundaryName
					.. "."
			else
				errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\n"
					.. "Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries."
			end
			local combinedMessage = componentNameMessage .. "\n" .. componentStack .. "\n\n" .. errorBoundaryMessage

			-- In development, we provide our own message with just the component stack.
			-- We don't include the original error message and JS stack because the browser
			-- has already printed it. Even if the application swallows the error, it is still
			-- displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
			console["error"](combinedMessage) -- Don't transform to our wrapper
		else
			-- In production, we print the error directly.
			-- This will include the message, the JS stack, and anything the browser wants to show.
			-- We pass the error object instead of custom message so that the browser displays the error natively.
			console["error"](inspect(error_)) -- Don't transform to our wrapper
		end

		-- FIXME Luau: needs void return Luau bugfix
		return nil
	end)

	if not ok then
		warn("failed to error with error: " .. inspect(e))
		-- TODO: we may need to think about this more deeply and do something different
		-- This method must not throw, or React internal state will get messed up.
		-- If console.error is overridden, or logCapturedError() shows a dialog that throws,
		-- we want to report this error outside of the normal stack as a last resort.
		-- https://github.com/facebook/react/issues/13188
		setTimeout(function()
			-- FIXME: the top-level Luau VM handler doesn't deal with non-string errors, so massage it until VM support lands
			error(errorToString(e :: any))
		end)
	end
end

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="350">
              <Properties>
                <string name="Name">ReactFiberFlags</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/37cb732c59863297e48f69ac1f6e2ba1aa1886f0/packages/react-reconciler/src/ReactFiberFlags.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]

export type Flags = number

local exports = {}

-- Don't change these two values. They're used by React Dev Tools.
exports.NoFlags = --[[                      ]]
	0b000000000000000000
exports.PerformedWork = --[[                ]]
	0b000000000000000001

-- You can change the rest (and add more).
exports.Placement = --[[                    ]]
	0b000000000000000010
exports.Update = --[[                       ]]
	0b000000000000000100
exports.PlacementAndUpdate = --[[           ]]
	0b000000000000000110
exports.Deletion = --[[                     ]]
	0b000000000000001000
exports.ContentReset = --[[                 ]]
	0b000000000000010000
exports.Callback = --[[                     ]]
	0b000000000000100000
exports.DidCapture = --[[                   ]]
	0b000000000001000000
exports.Ref = --[[                          ]]
	0b000000000010000000
exports.Snapshot = --[[                     ]]
	0b000000000100000000
exports.Passive = --[[                      ]]
	0b000000001000000000
-- TODO (effects) Remove this bit once the new reconciler is synced to the old.
exports.PassiveUnmountPendingDev = --[[     ]]
	0b000010000000000000
exports.Hydrating = --[[                    ]]
	0b000000010000000000
exports.HydratingAndUpdate = --[[           ]]
	0b000000010000000100

-- Passive & Update & Callback & Ref & Snapshot
exports.LifecycleEffectMask = --[[          ]]
	0b000000001110100100

-- Union of all host effects
exports.HostEffectMask = --[[               ]]
	0b000000011111111111

-- These are not really side effects, but we still reuse this field.
exports.Incomplete = --[[                   ]]
	0b000000100000000000
exports.ShouldCapture = --[[                ]]
	0b000001000000000000
exports.ForceUpdateForLegacySuspense = --[[ ]]
	0b000100000000000000

-- Static tags describe aspects of a fiber that are not specific to a render,
-- e.g. a fiber uses a passive effect (even if there are no updates on this particular render).
-- This enables us to defer more work in the unmount case,
-- since we can defer traversing the tree during layout to look for Passive effects,
-- and instead rely on the static flag as a signal that there may be cleanup work.
exports.PassiveStatic = --[[                ]]
	0b001000000000000000

-- Union of side effect groupings as pertains to subtreeFlags
exports.BeforeMutationMask = --[[           ]]
	0b000000001100001010
exports.MutationMask = --[[                 ]]
	0b000000010010011110
exports.LayoutMask = --[[                   ]]
	0b000000000010100100
exports.PassiveMask = --[[                  ]]
	0b000000001000001000

-- Union of tags that don't get reset on clones.
-- This allows certain concepts to persist without recalculting them,
-- e.g. whether a subtree contains passive effects or portals.
exports.StaticMask = --[[                   ]]
	0b001000000000000000

-- These flags allow us to traverse to fibers that have effects on mount
-- without traversing the entire tree after every commit for
-- double invoking
exports.MountLayoutDev = --[[               ]]
	0b010000000000000000
exports.MountPassiveDev = --[[              ]]
	0b100000000000000000

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="351">
              <Properties>
                <string name="Name">ReactFiberHooks.new</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/43363e2795393a00fd77312a16d6b80e626c29de/packages/react-reconciler/src/ReactFiberHooks.new.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]
-- FIXME (roblox): remove this when our unimplemented
local function unimplemented(message: string)
	print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
	print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
	print("UNIMPLEMENTED ERROR: " .. message)
	error("FIXME (roblox): " .. message .. " is unimplemented")
end
local __DEV__ = _G.__DEV__ :: boolean
local Packages = script.Parent.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)
local Array = LuauPolyfill.Array
local Error = LuauPolyfill.Error
local Object = LuauPolyfill.Object

-- NOTE: use Bindings to implement useRef
local createRef = require(Packages.React).createRef
local createBinding = require(Packages.React).createBinding

-- NOTE: use patched console from shared
local console = require(Packages.Shared).console

local ReactTypes = require(Packages.Shared)
type ReactContext<T> = ReactTypes.ReactContext<T>
type ReactBinding<T> = ReactTypes.ReactBinding<T>
type ReactBindingUpdater<T> = ReactTypes.ReactBindingUpdater<T>
type MutableSource<T> = ReactTypes.MutableSource<T>
type MutableSourceGetSnapshotFn<Source, Snapshot> = ReactTypes.MutableSourceGetSnapshotFn<Source, Snapshot>
type MutableSourceSubscribeFn<Source, Snapshot> = ReactTypes.MutableSourceSubscribeFn<Source, Snapshot>

local ReactInternalTypes = require(script.Parent.ReactInternalTypes)
type Fiber = ReactInternalTypes.Fiber
type Dispatcher = ReactInternalTypes.Dispatcher
type HookType = ReactInternalTypes.HookType
type ReactPriorityLevel = ReactInternalTypes.ReactPriorityLevel
local ReactFiberLane = require(script.Parent.ReactFiberLane)
type Lanes = ReactFiberLane.Lanes
type Lane = ReactFiberLane.Lane
local ReactHookEffectTags = require(script.Parent.ReactHookEffectTags)
type HookFlags = ReactHookEffectTags.HookFlags
type FiberRoot = ReactInternalTypes.FiberRoot
-- TODO: figure out how to expose types through dynamic exports
-- local type {OpaqueIDType} = require(script.Parent.ReactFiberHostConfig)
type OpaqueIDType = any

local ReactSharedInternals = require(Packages.Shared).ReactSharedInternals
local ReactFeatureFlags = require(Packages.Shared).ReactFeatureFlags
local enableDebugTracing: boolean? = ReactFeatureFlags.enableDebugTracing
local enableSchedulingProfiler: boolean? = ReactFeatureFlags.enableSchedulingProfiler
local enableNewReconciler: boolean? = ReactFeatureFlags.enableNewReconciler
-- local decoupleUpdatePriorityFromScheduler = ReactFeatureFlags.decoupleUpdatePriorityFromScheduler
local enableDoubleInvokingEffects = ReactFeatureFlags.enableDoubleInvokingEffects

-- local ReactTypeOfMode = require(script.Parent.ReactTypeOfMode)
local DebugTracingMode = require(script.Parent.ReactTypeOfMode).DebugTracingMode
local NoLane = ReactFiberLane.NoLane
local NoLanes = ReactFiberLane.NoLanes
-- local InputContinuousLanePriority = ReactFiberLane.InputContinuousLanePriority
local isSubsetOfLanes = ReactFiberLane.isSubsetOfLanes
local mergeLanes = ReactFiberLane.mergeLanes
local removeLanes = ReactFiberLane.removeLanes
local markRootEntangled = ReactFiberLane.markRootEntangled
local markRootMutableRead = ReactFiberLane.markRootMutableRead
-- local getCurrentUpdateLanePriority = ReactFiberLane.getCurrentUpdateLanePriority
-- local setCurrentUpdateLanePriority = ReactFiberLane.setCurrentUpdateLanePriority
-- local higherLanePriority = ReactFiberLane.higherLanePriority
-- local DefaultLanePriority = ReactFiberLane.DefaultLanePriority
local ReactFiberNewContext = require(script.Parent["ReactFiberNewContext.new"])
local readContext = ReactFiberNewContext.readContext
local ReactFiberFlags = require(script.Parent.ReactFiberFlags)
local UpdateEffect = ReactFiberFlags.Update
local PassiveEffect = ReactFiberFlags.Passive
local PassiveStaticEffect = ReactFiberFlags.PassiveStatic
local MountLayoutDevEffect = ReactFiberFlags.MountLayoutDev
local MountPassiveDevEffect = ReactFiberFlags.MountPassiveDev
local HookHasEffect = ReactHookEffectTags.HasEffect
local HookLayout = ReactHookEffectTags.Layout
local HookPassive = ReactHookEffectTags.Passive
local ReactFiberWorkLoop = require(script.Parent["ReactFiberWorkLoop.new"]) :: any
local warnIfNotCurrentlyActingUpdatesInDEV = ReactFiberWorkLoop.warnIfNotCurrentlyActingUpdatesInDEV
local scheduleUpdateOnFiber = ReactFiberWorkLoop.scheduleUpdateOnFiber
local warnIfNotScopedWithMatchingAct = ReactFiberWorkLoop.warnIfNotScopedWithMatchingAct
local requestEventTime = ReactFiberWorkLoop.requestEventTime
local requestUpdateLane = ReactFiberWorkLoop.requestUpdateLane
local markSkippedUpdateLanes = ReactFiberWorkLoop.markSkippedUpdateLanes
local getWorkInProgressRoot = ReactFiberWorkLoop.getWorkInProgressRoot
local warnIfNotCurrentlyActingEffectsInDEV = ReactFiberWorkLoop.warnIfNotCurrentlyActingEffectsInDEV
-- local {
--   getWorkInProgressRoot,
--   requestUpdateLane,
--   requestEventTime,
--   warnIfNotCurrentlyActingEffectsInDEV,
-- } = require(script.Parent.ReactFiberWorkLoop.new)

local invariant = require(Packages.Shared).invariant
local getComponentName = require(Packages.Shared).getComponentName
-- local is = require(Packages.Shared).objectIs
local function is(x: any, y: any)
	return x == y and (x ~= 0 or 1 / x == 1 / y) or x ~= x and y ~= y -- eslint-disable-line no-self-compare
end
local markWorkInProgressReceivedUpdate =
	require(script.Parent["ReactFiberBeginWork.new"]).markWorkInProgressReceivedUpdate :: any
-- local {
--   UserBlockingPriority,
--   NormalPriority,
--   runWithPriority,
--   getCurrentPriorityLevel,
-- } = require(script.Parent.SchedulerWithReactIntegration.new)
local getIsHydrating = require(script.Parent["ReactFiberHydrationContext.new"]).getIsHydrating
-- local {
--   makeClientId,
--   makeClientIdInDEV,
--   makeOpaqueHydratingObject,
local ReactFiberHostConfig = require(script.Parent.ReactFiberHostConfig)
local makeClientId = ReactFiberHostConfig.makeClientId
-- local makeOpaqueHydratingObject = ReactFiberHostConfig.makeOpaqueHydratingObject
-- local makeClientIdInDEV = ReactFiberHostConfig.makeClientIdInDEV

local ReactMutableSource = require(script.Parent["ReactMutableSource.new"])
local warnAboutMultipleRenderersDEV = ReactMutableSource.warnAboutMultipleRenderersDEV
local getWorkInProgressVersion = ReactMutableSource.getWorkInProgressVersion
local setWorkInProgressVersion = ReactMutableSource.setWorkInProgressVersion
local markSourceAsDirty = ReactMutableSource.markSourceAsDirty

-- local getIsRendering = require(script.Parent.ReactCurrentFiber).getIsRendering
local logStateUpdateScheduled = require(script.Parent.DebugTracing).logStateUpdateScheduled
local markStateUpdateScheduled = require(script.Parent.SchedulingProfiler).markStateUpdateScheduled

local ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher
-- local ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig

-- deviation: common types
type Array<T> = { [number]: T }

type Update<S, A> = {
	lane: Lane,
	action: A,
	eagerReducer: ((S, A) -> S) | nil,
	eagerState: S | nil,
	next: Update<S, A>,
	priority: ReactPriorityLevel?,
}

type UpdateQueue<S, A> = {
	pending: Update<S, A> | nil,
	dispatch: ((A) -> ...any) | nil,
	lastRenderedReducer: ((S, A) -> S) | nil,
	lastRenderedState: S | nil,
}

local didWarnAboutMismatchedHooksForComponent
local _didWarnAboutUseOpaqueIdentifier
if __DEV__ then
	_didWarnAboutUseOpaqueIdentifier = {}
	didWarnAboutMismatchedHooksForComponent = {}
end

export type Hook = {
	memoizedState: any,
	baseState: any,
	baseQueue: Update<any, any> | nil,
	queue: UpdateQueue<any, any> | nil,
	next: Hook?,
}

export type Effect = {
	tag: HookFlags,
	-- TODO: this needs Luau type pack support to express accurately
	create: (() -> (() -> ())) | () -> (),
	destroy: (() -> ())?,
	deps: Array<any> | nil,
	next: Effect,
}

export type FunctionComponentUpdateQueue = {
	lastEffect: Effect?,
}

type BasicStateAction<S> = ((S) -> S) | S

type Dispatch<A> = (A) -> ()

local exports: any = {}

-- These are set right before calling the component.
local renderLanes: Lanes = NoLanes
-- The work-in-progress fiber. I've named it differently to distinguish it from
-- the work-in-progress hook.
local currentlyRenderingFiber: Fiber = nil :: any

-- Hooks are stored as a linked list on the fiber's memoizedState field. The
-- current hook list is the list that belongs to the current fiber. The
-- work-in-progress hook list is a new list that will be added to the
-- work-in-progress fiber.
-- FIXME (roblox): type refinement
-- local currentHook: Hook | nil = nil
local currentHook: any = nil
-- FIXME (roblox): type refinement
-- local workInProgressHook: Hook | nil = nil
local workInProgressHook: any = nil

-- Whether an update was scheduled at any point during the render phase. This
-- does not get reset if we do another render pass; only when we're completely
-- finished evaluating this component. This is an optimization so we know
-- whether we need to clear render phase updates after a throw.
local didScheduleRenderPhaseUpdate: boolean = false
-- Where an update was scheduled only during the current render pass. This
-- gets reset after each attempt.
-- TODO: Maybe there's some way to consolidate this with
-- `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.
local didScheduleRenderPhaseUpdateDuringThisPass: boolean = false

local RE_RENDER_LIMIT = 25

-- In DEV, this is the name of the currently executing primitive hook
local currentHookNameInDev: HookType? = nil

-- In DEV, this list ensures that hooks are called in the same order between renders.
-- The list stores the order of hooks used during the initial render (mount).
-- Subsequent renders (updates) reference this list.
local hookTypesDev: Array<HookType> | nil = nil
local hookTypesUpdateIndexDev: number = 0

-- In DEV, this tracks whether currently rendering component needs to ignore
-- the dependencies for Hooks that need them (e.g. useEffect or useMemo).
-- When true, such Hooks will always be "remounted". Only used during hot reload.
-- performance: eliminate unuseful cmp in hot path, we don't currently support hot reloading
local ignorePreviousDependencies: boolean = false

-- Deviation: move to top so below function can reference
local HooksDispatcherOnMountInDEV: Dispatcher | nil = nil
local HooksDispatcherOnMountWithHookTypesInDEV: Dispatcher | nil = nil
local HooksDispatcherOnUpdateInDEV: Dispatcher | nil = nil
local HooksDispatcherOnRerenderInDEV: Dispatcher | nil = nil
local InvalidNestedHooksDispatcherOnMountInDEV: Dispatcher | nil = nil
local InvalidNestedHooksDispatcherOnUpdateInDEV: Dispatcher | nil = nil
local InvalidNestedHooksDispatcherOnRerenderInDEV: Dispatcher | nil = nil

-- deviation: Used to better compare dependency arrays with gaps
local function getHighestIndex(array: Array<any>)
	local highestIndex = 0
	for k, v in array do
		highestIndex = if k > highestIndex then k else highestIndex
	end
	return highestIndex
end

-- deviation: Used to better detect dependency arrays with gaps, to be
-- used in place of Array.isArray
local function isArrayOrSparseArray(deps: any)
	if type(deps) ~= "table" then
		return false
	end
	for k, _v in deps do
		if type(k) ~= "number" then
			return false
		end
	end
	return true
end

local function mountHookTypesDev()
	if __DEV__ then
		local hookName = (currentHookNameInDev :: any) :: HookType

		if hookTypesDev == nil then
			-- FIXME Luau: needs normalization (I think)
			hookTypesDev = ({ hookName } :: any) :: Array<HookType>
		else
			table.insert(hookTypesDev, hookName)
		end
	end
end

function updateHookTypesDev()
	if __DEV__ then
		-- FIXME Luau: needs normalization (I think) to avoid duplicate type declaration
		local hookName: HookType = (currentHookNameInDev :: any) :: HookType

		if hookTypesDev ~= nil then
			hookTypesUpdateIndexDev += 1
			if hookTypesDev[hookTypesUpdateIndexDev] ~= hookName then
				warnOnHookMismatchInDev(hookName)
			end
		end
	end
end

local function checkDepsAreArrayDev(deps: any)
	if __DEV__ then
		if deps ~= nil and not isArrayOrSparseArray(deps) then
			-- Verify deps, but only on mount to avoid extra checks.
			-- It's unlikely their type would change as usually you define them inline.
			console.error(
				"%s received a final argument that is not an array (instead, received `%s`). When "
					.. "specified, the final argument must be an array.",
				currentHookNameInDev,
				type(deps)
			)
		end
	end
end

function warnOnHookMismatchInDev(currentHookName: HookType)
	if __DEV__ then
		-- deviation: getComponentName will return nil in most Hook cases, use same fallback as elsewhere
		local componentName = getComponentName(currentlyRenderingFiber.type) or "Component"
		if not didWarnAboutMismatchedHooksForComponent[componentName] then
			didWarnAboutMismatchedHooksForComponent[componentName] = true

			if hookTypesDev ~= nil then
				local table_ = ""

				local secondColumnStart = 30

				for i = 1, hookTypesUpdateIndexDev do
					local oldHookName = (hookTypesDev :: any)[i]
					local newHookName
					if i == hookTypesUpdateIndexDev then
						newHookName = currentHookName
					else
						newHookName = oldHookName
					end

					-- NOTE: upstream lets this be void and string concat coerces it to 'undefined'
					local row = tostring(i) .. ". " .. (oldHookName or "undefined")

					-- Extra space so second column lines up
					-- lol @ IE not supporting String#repeat
					while string.len(row) < secondColumnStart do
						row ..= " "
					end

					row ..= newHookName .. "\n"

					table_ ..= row
				end

				console.error(
					"React has detected a change in the order of Hooks called by %s. "
						.. "This will lead to bugs and errors if not fixed. "
						.. "For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n"
						.. "   Previous render            Next render\n"
						.. "   ------------------------------------------------------\n"
						.. "%s"
						.. "   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
					componentName,
					table_
				)
			end
		end
	end
end

local function throwInvalidHookError(): ()
	error(
		Error.new(
			"Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for"
				.. " one of the following reasons:\n"
				.. "1. You might have mismatching versions of React and the renderer (such as React DOM)\n"
				.. "2. You might be breaking the Rules of Hooks\n"
				.. "3. You might have more than one copy of React in the same app\n"
				.. "See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem."
		)
	)
end

-- FIXME (roblox): type refinement
-- prevDeps: Array<any>?
local function areHookInputsEqual(nextDeps: Array<any>, prevDeps: Array<any>)
	if __DEV__ then
		if ignorePreviousDependencies then
			-- Only true when this component is being hot reloaded.
			return false
		end
	end

	if prevDeps == nil then
		if __DEV__ then
			-- TODO: no unit tests in upstream for this, we should add some
			console.error(
				"%s received a final argument during this render, but not during "
					.. "the previous render. Even though the final argument is optional, "
					.. "its type cannot change between renders.",
				currentHookNameInDev
			)
		end
		return false
	end

	-- deviation START: calculate lengths with iteration instead of # to
	-- accommodate nil values and disable warning for differing lengths
	local nextDepsLength = getHighestIndex(nextDeps)
	local prevDepsLength = getHighestIndex(prevDeps)

	-- NOTE: In upstream, lengths aren't even compared unless dev mode is
	-- enabled because they _always_ indicate a misuse of dependency arrays. In
	-- luau, since trailing `nil`s effectively change the length of the array,
	-- it's possible to trigger this scenario with a valid use of the dependencies
	-- array (e.g. `{1, 2, 3}` -> `{1, 2, nil}`)
	if nextDepsLength ~= prevDepsLength then
		-- TODO: linting like upstream does would make this warning less
		-- necessary, and would help justify our exclusion of the warning.

		-- https://jira.rbx.com/browse/LUAFDN-1175
		-- if __DEV__ then
		--   console.error(
		--     "The final argument passed to %s changed size between renders. The " ..
		--       "order and size of this array must remain constant.\n\n" ..
		--       "Previous: %s\n" ..
		--       "Incoming: %s",
		--     currentHookNameInDev,
		--     inspect(prevDeps),
		--     inspect(nextDeps)
		--   )
		-- end

		-- Short-circuit here since we know that different lengths means a change in
		-- values, even if it's due to trailing nil values
		return false
	end
	-- deviation END

	local minDependencyCount = math.min(prevDepsLength, nextDepsLength)
	for i = 1, minDependencyCount do
		if is(nextDeps[i], prevDeps[i]) then
			continue
		end
		return false
	end
	return true
end

exports.bailoutHooks = function(current: Fiber, workInProgress: Fiber, lanes: Lanes)
	-- performance TODO: return non-nil updateQueue object to the ReactUpdateQUeue pool
	workInProgress.updateQueue = current.updateQueue
	if __DEV__ and enableDoubleInvokingEffects then
		workInProgress.flags = bit32.band(
			workInProgress.flags,
			bit32.bnot(bit32.bor(MountPassiveDevEffect, PassiveEffect, MountLayoutDevEffect, UpdateEffect))
		)
	else
		workInProgress.flags = bit32.band(workInProgress.flags, bit32.bnot(bit32.bor(PassiveEffect, UpdateEffect)))
	end
	current.lanes = removeLanes(current.lanes, lanes)
end

local _isUpdatingOpaqueValueInRenderPhase = false
exports.resetHooksAfterThrow = function(): ()
	-- We can assume the previous dispatcher is always this one, since we set it
	-- at the beginning of the render phase and there's no re-entrancy.
	ReactCurrentDispatcher.current = exports.ContextOnlyDispatcher

	if didScheduleRenderPhaseUpdate then
		-- There were render phase updates. These are only valid for this render
		-- phase, which we are now aborting. Remove the updates from the queues so
		-- they do not persist to the next render. Do not remove updates from hooks
		-- that weren't processed.
		--
		-- Only reset the updates from the queue if it has a clone. If it does
		-- not have a clone, that means it wasn't processed, and the updates were
		-- scheduled before we entered the render phase.
		-- FIXME (roblox): Better type refinement
		-- local hook: Hook | nil = currentlyRenderingFiber.memoizedState
		local hook: any = currentlyRenderingFiber.memoizedState
		while hook ~= nil do
			local queue = hook.queue
			if queue ~= nil then
				queue.pending = nil
			end
			hook = hook.next
		end
		didScheduleRenderPhaseUpdate = false
	end

	renderLanes = NoLanes
	currentlyRenderingFiber = nil :: any

	currentHook = nil
	workInProgressHook = nil

	if __DEV__ then
		hookTypesDev = nil
		hookTypesUpdateIndexDev = 0

		currentHookNameInDev = nil

		_isUpdatingOpaqueValueInRenderPhase = false
	end

	didScheduleRenderPhaseUpdateDuringThisPass = false
end

local function mountWorkInProgressHook(): Hook
	local hook: Hook = {
		memoizedState = nil,

		baseState = nil,
		baseQueue = nil,
		queue = nil,

		next = nil,
	}

	if workInProgressHook == nil then
		-- This is the first hook in the list
		currentlyRenderingFiber.memoizedState = hook
		workInProgressHook = hook
	else
		-- Append to the end of the list
		workInProgressHook.next = hook
		workInProgressHook = hook
	end
	return workInProgressHook
end

local function updateWorkInProgressHook(): Hook
	-- This function is used both for updates and for re-renders triggered by a
	-- render phase update. It assumes there is either a current hook we can
	-- clone, or a work-in-progress hook from a previous render pass that we can
	-- use as a base. When we reach the end of the base list, we must switch to
	-- the dispatcher used for mounts.
	-- FIXME (roblox): type refinement
	-- local nextCurrentHook: Hook?
	local nextCurrentHook
	if currentHook == nil then
		local current = currentlyRenderingFiber.alternate
		if current ~= nil then
			nextCurrentHook = current.memoizedState
		else
			nextCurrentHook = nil
		end
	else
		nextCurrentHook = currentHook.next
	end

	-- FIXME (roblox): type refinement
	-- local nextWorkInProgressHook: Hook?
	local nextWorkInProgressHook: Hook
	if workInProgressHook == nil then
		nextWorkInProgressHook = currentlyRenderingFiber.memoizedState
	else
		nextWorkInProgressHook = workInProgressHook.next
	end

	if nextWorkInProgressHook ~= nil then
		-- There's already a work-in-progress. Reuse it.
		workInProgressHook = nextWorkInProgressHook
		nextWorkInProgressHook = workInProgressHook.next

		currentHook = nextCurrentHook
	else
		-- Clone from the current hook.

		-- performance: use React 18 check to avoid function call overhead
		if nextCurrentHook == nil then
			error(Error.new("Rendered more hooks than during the previous render."))
		end

		currentHook = nextCurrentHook

		local newHook: Hook = {
			memoizedState = currentHook.memoizedState,

			baseState = currentHook.baseState,
			baseQueue = currentHook.baseQueue,
			queue = currentHook.queue,

			next = nil,
		}

		if workInProgressHook == nil then
			-- This is the first hook in the list.
			workInProgressHook = newHook
			currentlyRenderingFiber.memoizedState = newHook
		else
			-- Append to the end of the list.
			workInProgressHook.next = newHook
			workInProgressHook = newHook
		end
	end
	return workInProgressHook
end

-- performance: inlined in hot path
-- local function createFunctionComponentUpdateQueue(): FunctionComponentUpdateQueue
--   return {
--     lastEffect = nil,
--   }
-- end

function basicStateReducer<S>(state: S, action: BasicStateAction<S>): S
	-- $FlowFixMe: Flow doesn't like mixed types
	if type(action) == "function" then
		return action(state)
	else
		return action
	end
end

function mountReducer<S, I, A>(reducer: (S, A) -> S, initialArg: I, init: ((I) -> S)?): (S, Dispatch<A>)
	local hook = mountWorkInProgressHook()
	local initialState
	if init ~= nil then
		initialState = init(initialArg)
	else
		initialState = (initialArg :: any) :: S
	end
	hook.baseState = initialState
	hook.memoizedState = hook.baseState

	local queue: UpdateQueue<S, A> = {
		pending = nil,
		dispatch = nil,
		lastRenderedReducer = reducer,
		lastRenderedState = initialState :: any,
	}
	hook.queue = queue

	-- deviation: set currentlyRenderingFiber to a local varible so it doesn't change
	-- by call time
	local cRF = currentlyRenderingFiber
	-- FIXME? we pass in action here, but is that what really happens upstream?
	local dispatch: Dispatch<A> = function(action, ...)
		-- FIXME Luau: relies on normalization
		dispatchAction(cRF, queue :: UpdateQueue<any, any>, action, ...)
	end :: any
	queue.dispatch = dispatch :: any
	-- deviation START: Lua version of useState and useReducer return two items, not list like upstream
	return hook.memoizedState, dispatch
	-- deviation END: Lua version of useState and useReducer return two items, not list like upstream
end

function updateReducer<S, I, A>(reducer: (S, A) -> S, initialArg: I, init: ((I) -> S)?): (S, Dispatch<A>)
	local hook = updateWorkInProgressHook()
	local queue = hook.queue
	-- deviation: change from invariant to avoid funtion call in hot path
	assert(queue ~= nil, "Should have a queue. This is likely a bug in React. Please file an issue.")

	queue.lastRenderedReducer = reducer

	local current: Hook = currentHook

	-- The last rebase update that is NOT part of the base state.
	local baseQueue = current.baseQueue

	-- The last pending update that hasn't been processed yet.
	local pendingQueue = queue.pending
	if pendingQueue ~= nil then
		-- We have new updates that haven't been processed yet.
		-- We'll add them to the base queue.
		if baseQueue ~= nil then
			-- Merge the pending queue and the base queue.
			local baseFirst = baseQueue.next
			local pendingFirst = pendingQueue.next
			baseQueue.next = pendingFirst
			pendingQueue.next = baseFirst
		end
		-- performance: elimiante cmp in hot path
		-- if __DEV__ then
		--   if current.baseQueue ~= baseQueue then
		--     -- Internal invariant that should never happen, but feasibly could in
		--     -- the future if we implement resuming, or some form of that.
		--     console.error(
		--       'Internal error: Expected work-in-progress queue to be a clone. ' ..
		--         'This is a bug in React.'
		--     )
		--   end
		-- end
		baseQueue = pendingQueue
		current.baseQueue = baseQueue
		queue.pending = nil
	end

	if baseQueue ~= nil then
		-- We have a queue to process.
		local first = baseQueue.next
		local newState = current.baseState

		local newBaseState = nil
		local newBaseQueueFirst = nil
		local newBaseQueueLast = nil
		local update = first
		repeat
			local updateLane = update.lane
			-- performance: inline isSubsetOfLanes for hot path
			-- if not isSubsetOfLanes(renderLanes, updateLane) then
			if bit32.band(renderLanes, updateLane) ~= updateLane then
				-- Priority is insufficient. Skip this update. If this is the first
				-- skipped update, the previous update/state is the new base
				-- update/state.
				local clone: Update<S, A> = {
					lane = updateLane,
					action = update.action,
					eagerReducer = update.eagerReducer,
					eagerState = update.eagerState,
					next = nil :: any,
				}
				if newBaseQueueLast == nil then
					newBaseQueueLast = clone
					newBaseQueueFirst = newBaseQueueLast
					newBaseState = newState
				else
					newBaseQueueLast.next = clone
					newBaseQueueLast = newBaseQueueLast.next
				end
				-- Update the remaining priority in the queue.
				-- TODO: Don't need to accumulate this. Instead, we can remove
				-- renderLanes from the original lanes.
				currentlyRenderingFiber.lanes = mergeLanes(currentlyRenderingFiber.lanes, updateLane)
				markSkippedUpdateLanes(updateLane)
			else
				-- This update does have sufficient priority.

				if newBaseQueueLast ~= nil then
					local clone: Update<S, A> = {
						-- This update is going to be committed so we never want uncommit
						-- it. Using NoLane works because 0 is a subset of all bitmasks, so
						-- this will never be skipped by the check above.
						lane = NoLane,
						action = update.action,
						eagerReducer = update.eagerReducer,
						eagerState = update.eagerState,
						next = nil :: any,
					}
					newBaseQueueLast.next = clone
					newBaseQueueLast = newBaseQueueLast.next
				end

				-- Process this update.
				if update.eagerReducer == reducer then
					-- If this update was processed eagerly, and its reducer matches the
					-- current reducer, we can use the eagerly computed state.
					newState = update.eagerState
				else
					local action = update.action
					newState = reducer(newState, action)
				end
			end
			update = update.next
		until update == nil or update == first

		if newBaseQueueLast == nil then
			newBaseState = newState
		else
			newBaseQueueLast.next = newBaseQueueFirst
		end

		-- Mark that the fiber performed work, but only if the new state is
		-- different from the current state.
		if not is(newState, hook.memoizedState) then
			markWorkInProgressReceivedUpdate()
		end

		hook.memoizedState = newState
		hook.baseState = newBaseState
		hook.baseQueue = newBaseQueueLast

		queue.lastRenderedState = newState
	end

	local dispatch: Dispatch<A> = queue.dispatch :: any
	-- deviation: Lua version of useState and useReducer return two items, not list like upstream
	return hook.memoizedState, dispatch
end

function rerenderReducer<S, I, A>(reducer: (S, A) -> S, initialArg: I, init: ((I) -> S)?): (S, Dispatch<A>)
	local hook = updateWorkInProgressHook()
	local queue = hook.queue
	-- performance: changed from invariant to avoid function call in hot path
	assert(queue ~= nil, "Should have a queue. This is likely a bug in React. Please file an issue.")

	queue.lastRenderedReducer = reducer

	-- This is a re-render. Apply the new render phase updates to the previous
	-- work-in-progress hook.
	local dispatch: Dispatch<A> = queue.dispatch :: Dispatch<A>
	local lastRenderPhaseUpdate = queue.pending
	local newState = hook.memoizedState
	if lastRenderPhaseUpdate ~= nil then
		-- The queue doesn't persist past this render pass.
		queue.pending = nil

		local firstRenderPhaseUpdate = lastRenderPhaseUpdate.next
		local update = firstRenderPhaseUpdate
		repeat
			-- Process this render phase update. We don't have to check the
			-- priority because it will always be the same as the current
			-- render's.
			local action = update.action
			newState = reducer(newState, action)
			update = update.next
		until update == firstRenderPhaseUpdate

		-- Mark that the fiber performed work, but only if the new state is
		-- different from the current state.
		if not is(newState, hook.memoizedState) then
			markWorkInProgressReceivedUpdate()
		end

		hook.memoizedState = newState
		-- Don't persist the state accumulated from the render phase updates to
		-- the base state unless the queue is empty.
		-- TODO: Not sure if this is the desired semantics, but it's what we
		-- do for gDSFP. I can't remember why.
		if hook.baseQueue == nil then
			hook.baseState = newState
		end

		queue.lastRenderedState = newState
	end
	-- deviation: Lua version returns two values instead of an array
	return newState, dispatch
end

type MutableSourceMemoizedState<Source, Snapshot> = {
	refs: {
		getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,
		setSnapshot: (Snapshot) -> (),
	},
	source: MutableSource<any>,
	subscribe: MutableSourceSubscribeFn<Source, Snapshot>,
}

function readFromUnsubcribedMutableSource<Source, Snapshot>(
	root: FiberRoot,
	source: MutableSource<Source>,
	getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>
): Snapshot
	if __DEV__ then
		warnAboutMultipleRenderersDEV(source)
	end

	local getVersion = source._getVersion
	local version_ = getVersion(source._source)

	-- Is it safe for this component to read from this source during the current render?
	local isSafeToReadFromSource = false

	-- Check the version first.
	-- If this render has already been started with a specific version,
	-- we can use it alone to determine if we can safely read from the source.
	local currentRenderVersion = getWorkInProgressVersion(source)
	if currentRenderVersion ~= nil then
		-- It's safe to read if the store hasn't been mutated since the last time
		-- we read something.
		isSafeToReadFromSource = currentRenderVersion == version_
	else
		-- If there's no version, then this is the first time we've read from the
		-- source during the current render pass, so we need to do a bit more work.
		-- What we need to determine is if there are any hooks that already
		-- subscribed to the source, and if so, whether there are any pending
		-- mutations that haven't been synchronized yet.
		--
		-- If there are no pending mutations, then `root.mutableReadLanes` will be
		-- empty, and we know we can safely read.
		--
		-- If there *are* pending mutations, we may still be able to safely read
		-- if the currently rendering lanes are inclusive of the pending mutation
		-- lanes, since that guarantees that the value we're about to read from
		-- the source is consistent with the values that we read during the most
		-- recent mutation.
		isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root.mutableReadLanes)

		if isSafeToReadFromSource then
			-- If it's safe to read from this source during the current render,
			-- store the version in case other components read from it.
			-- A changed version number will local those components know to throw and restart the render.
			setWorkInProgressVersion(source, version_)
		end
	end

	if isSafeToReadFromSource then
		local snapshot = getSnapshot(source._source)
		if __DEV__ then
			-- deviation: the Snapshot generic isn't constrained upstream, but it as to be for this typeof() to work
			if type(snapshot :: any) == "function" then
				console.error(
					"Mutable source should not return a function as the snapshot value. "
						.. "Functions may close over mutable values and cause tearing."
				)
			end
		end
		return snapshot
	else
		-- This handles the special case of a mutable source being shared between renderers.
		-- In that case, if the source is mutated between the first and second renderer,
		-- The second renderer don't know that it needs to reset the WIP version during unwind,
		-- (because the hook only marks sources as dirty if it's written to their WIP version).
		-- That would cause this tear check to throw again and eventually be visible to the user.
		-- We can avoid this infinite loop by explicitly marking the source as dirty.
		--
		-- This can lead to tearing in the first renderer when it resumes,
		-- but there's nothing we can do about that (short of throwing here and refusing to continue the render).
		markSourceAsDirty(source)

		error(
			Error.new(
				"Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue."
			)
		)
	end
end

function useMutableSource<Source, Snapshot>(
	hook: Hook,
	source: MutableSource<Source>,
	getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,
	subscribe: MutableSourceSubscribeFn<Source, Snapshot>
): Snapshot
	local root: FiberRoot = getWorkInProgressRoot()
	invariant(root ~= nil, "Expected a work-in-progress root. This is a bug in React. Please file an issue.")

	local getVersion = source._getVersion
	local version_ = getVersion(source._source)

	local dispatcher = ReactCurrentDispatcher.current
	-- deviation: upstream doesn't assert non-nil, but we have to for type soundness
	assert(dispatcher ~= nil, "dispatcher was nil, this is a bug in React")
	-- eslint-disable-next-line prefer-const
	local currentSnapshot, setSnapshot = dispatcher.useState(function()
		return readFromUnsubcribedMutableSource(root, source, getSnapshot)
	end)
	local snapshot = currentSnapshot

	-- Grab a handle to the state hook as well.
	-- We use it to clear the pending update queue if we have a new source.

	-- TODO: recast local stateHook = ((workInProgressHook: any): Hook)
	local stateHook = workInProgressHook

	local memoizedState: MutableSourceMemoizedState<any, any> = hook.memoizedState
	if memoizedState.refs == nil then
		error(tostring(debug.traceback()))
	end
	local refs = memoizedState.refs
	local prevGetSnapshot = refs.getSnapshot
	local prevSource = memoizedState.source
	local prevSubscribe = memoizedState.subscribe

	local fiber = currentlyRenderingFiber

	hook.memoizedState = {
		refs = refs,
		source = source,
		subscribe = subscribe,
	}

	-- Sync the values needed by our subscription handler after each commit.
	dispatcher.useEffect(function()
		refs.getSnapshot = getSnapshot

		-- Normally the dispatch function for a state hook never changes,
		-- but this hook recreates the queue in certain cases  to avoid updates from stale sources.
		-- handleChange() below needs to reference the dispatch function without re-subscribing,
		-- so we use a ref to ensure that it always has the latest version.
		refs.setSnapshot = setSnapshot

		-- Check for a possible change between when we last rendered now.
		local maybeNewVersion = getVersion(source._source)
		if not is(version_, maybeNewVersion) then
			local maybeNewSnapshot = getSnapshot(source._source)
			if __DEV__ then
				-- deviation: the Snapshot generic isn't constrained upstream, but it as to be for this typeof() to work
				if type(maybeNewSnapshot :: any) == "function" then
					console.error(
						"Mutable source should not return a function as the snapshot value. "
							.. "Functions may close over mutable values and cause tearing."
					)
				end
			end

			if not is(snapshot, maybeNewSnapshot) then
				setSnapshot(maybeNewSnapshot)

				local lane = requestUpdateLane(fiber)
				markRootMutableRead(root, lane)
			end
			-- If the source mutated between render and now,
			-- there may be state updates already scheduled from the old source.
			-- Entangle the updates so that they render in the same batch.
			markRootEntangled(root, root.mutableReadLanes)
		end
		-- FIXME Luau: Luau doesn't support mixed arrays
	end, { getSnapshot, source, subscribe } :: Array<any>)

	-- If we got a new source or subscribe function, re-subscribe in a passive effect.
	dispatcher.useEffect(function()
		local handleChange = function()
			local latestGetSnapshot = refs.getSnapshot
			local latestSetSnapshot = refs.setSnapshot

			-- performance? only latestGet..() is throwable. hoist the rest out to eliminate anon func overhead?
			local ok, result = pcall(function()
				latestSetSnapshot(latestGetSnapshot(source._source))

				-- Record a pending mutable source update with the same expiration time.
				local lane = requestUpdateLane(fiber)

				markRootMutableRead(root, lane)
			end)

			if not ok then
				-- A selector might throw after a source mutation.
				-- e.g. it might try to read from a part of the store that no longer exists.
				-- In this case we should still schedule an update with React.
				-- Worst case the selector will throw again and then an error boundary will handle it.
				latestSetSnapshot(function()
					error(result)
				end)
			end
		end

		local unsubscribe = subscribe(source._source, handleChange)
		if __DEV__ then
			if type(unsubscribe) ~= "function" then
				console.error("Mutable source subscribe function must return an unsubscribe function.")
			end
		end

		return unsubscribe
		-- FIXME Luau: Luau doesn't support mixed arrays
	end, { source, subscribe } :: Array<any>)

	-- If any of the inputs to useMutableSource change, reading is potentially unsafe.
	--
	-- If either the source or the subscription have changed we can't can't trust the update queue.
	-- Maybe the source changed in a way that the old subscription ignored but the new one depends on.
	--
	-- If the getSnapshot function changed, we also shouldn't rely on the update queue.
	-- It's possible that the underlying source was mutated between the when the last "change" event fired,
	-- and when the current render (with the new getSnapshot function) is processed.
	--
	-- In both cases, we need to throw away pending updates (since they are no longer relevant)
	-- and treat reading from the source as we do in the mount case.
	if not is(prevGetSnapshot, getSnapshot) or not is(prevSource, source) or not is(prevSubscribe, subscribe) then
		-- Create a new queue and setState method,
		-- So if there are interleaved updates, they get pushed to the older queue.
		-- When this becomes current, the previous queue and dispatch method will be discarded,
		-- including any interleaving updates that occur.
		local newQueue = {
			pending = nil,
			dispatch = nil,
			lastRenderedReducer = basicStateReducer,
			lastRenderedState = snapshot,
		}

		-- deviation: keep local pointer so if global changes we maintain correct reference.
		local cRF = currentlyRenderingFiber

		setSnapshot = function(...)
			dispatchAction(cRF, newQueue, ...)
		end :: any
		newQueue.dispatch = setSnapshot :: any
		stateHook.queue = newQueue
		stateHook.baseQueue = nil
		snapshot = readFromUnsubcribedMutableSource(root, source, getSnapshot)
		stateHook.baseState = snapshot
		stateHook.memoizedState = stateHook.baseState
	end

	return snapshot
end

function mountMutableSource<Source, Snapshot>(
	source: MutableSource<Source>,
	getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,
	subscribe: MutableSourceSubscribeFn<Source, Snapshot>
): Snapshot
	local hook = mountWorkInProgressHook()
	hook.memoizedState = {
		refs = {
			getSnapshot = getSnapshot,
			setSnapshot = nil,
		},
		source = source,
		subscribe = subscribe,
	}
	return useMutableSource(hook, source, getSnapshot, subscribe)
end

function updateMutableSource<Source, Snapshot>(
	source: MutableSource<Source>,
	getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,
	subscribe: MutableSourceSubscribeFn<Source, Snapshot>
): Snapshot
	local hook = updateWorkInProgressHook()
	return useMutableSource(hook, source, getSnapshot, subscribe)
end

function mountState<S>(initialState: (() -> S) | S): (S, Dispatch<BasicStateAction<S>>)
	local hook = mountWorkInProgressHook()
	if type(initialState) == "function" then
		-- $FlowFixMe: Flow doesn't like mixed types
		-- deviation: workaround to silence cli analyze not understanding that we've already verified initialState is a function
		local initialStateAsFunction: () -> S = initialState
		initialState = initialStateAsFunction()
	end
	hook.baseState = initialState
	hook.memoizedState = hook.baseState
	local queue: UpdateQueue<S, BasicStateAction<S>> = {
		pending = nil,
		dispatch = nil,
		lastRenderedReducer = nil, --basicStateReducer,
		lastRenderedState = initialState :: any,
	}
	-- FIXME Luau: work around a toposorting issue in Luau: CLI-48752
	queue.lastRenderedReducer = basicStateReducer
	hook.queue = queue

	-- deviation: set currentlyRenderingFiber to a local varible so it doesn't change by call time
	local cRF = currentlyRenderingFiber
	local dispatch: Dispatch<BasicStateAction<S>> = function(action, ...)
		-- FIXME? we pass in action here, but is that what really happens upstream?
		dispatchAction(cRF, queue :: UpdateQueue<any, any>, action, ...)
	end :: any
	queue.dispatch = dispatch
	-- deviation: Lua version of useState and useReducer return two items, not list like upstream
	return hook.memoizedState, dispatch
end

function updateState<S>(initialState: (() -> S) | S): (S, Dispatch<BasicStateAction<S>>)
	return updateReducer(basicStateReducer, initialState)
end

function rerenderState<S>(initialState: (() -> S) | S): (S, Dispatch<BasicStateAction<S>>)
	return rerenderReducer(basicStateReducer, initialState)
end

local function pushEffect(tag, create, destroy, deps)
	local effect: Effect = {
		tag = tag,
		create = create,
		destroy = destroy,
		deps = deps,
		-- Circular
		next = nil :: any,
	}
	local componentUpdateQueue: FunctionComponentUpdateQueue = currentlyRenderingFiber.updateQueue :: any
	if componentUpdateQueue == nil then
		-- performance: inline simple function in hot path
		-- componentUpdateQueue = createFunctionComponentUpdateQueue()
		componentUpdateQueue = {
			lastEffect = nil,
		}
		currentlyRenderingFiber.updateQueue = componentUpdateQueue
		effect.next = effect
		componentUpdateQueue.lastEffect = effect
	else
		local lastEffect = componentUpdateQueue.lastEffect
		if lastEffect == nil then
			componentUpdateQueue.lastEffect = effect
			effect.next = effect
		else
			local firstEffect = lastEffect.next
			lastEffect.next = effect
			effect.next = firstEffect
			componentUpdateQueue.lastEffect = effect
		end
	end
	return effect
end

-- deviation: Bindings are a feature unique to Roact
function mountBinding<T>(initialValue: T): (ReactBinding<T>, ReactBindingUpdater<T>)
	local hook = mountWorkInProgressHook()
	local value, updateValue = createBinding(initialValue)

	-- FIXME Luau: Luau doesn't allow mixed arrays, forcing us to use any here
	hook.memoizedState = { value :: any, updateValue :: any }
	return value, updateValue
end

-- deviation: TS models this slightly differently, which is needed to have an initially empty ref and clear the ref, and still typecheck
function updateBinding<T>(initialValue: T): (ReactBinding<T>, ReactBindingUpdater<T>)
	local hook = updateWorkInProgressHook()
	return unpack(hook.memoizedState)
end

-- deviation: TS models this slightly differently, which is needed to have an initially empty ref and clear the ref, and still typecheck
function mountRef<T>(initialValue: T): { current: T | nil }
	local hook = mountWorkInProgressHook()
	-- deviation: Implement useRef with bindings
	local ref: any = createRef()
	ref.current = initialValue
	-- if (__DEV__) then
	--   Object.seal(ref)
	-- end
	hook.memoizedState = ref
	return ref :: { current: T | nil }
end

-- deviation: TS models this slightly differently, which is needed to have an initially empty ref and clear the ref, and still typecheck
function updateRef<T>(initialValue: T): { current: T | nil }
	local hook = updateWorkInProgressHook()
	return hook.memoizedState
end

local function mountEffectImpl(fiberFlags, hookFlags, create, deps): ()
	local hook = mountWorkInProgressHook()
	-- deviation: no need to account for undefined
	-- local nextDeps = deps == undefined ? nil : deps
	local nextDeps = deps
	currentlyRenderingFiber.flags = bit32.bor(currentlyRenderingFiber.flags, fiberFlags)

	hook.memoizedState = pushEffect(bit32.bor(HookHasEffect, hookFlags), create, nil, nextDeps)
end

-- deviation START: must explicitly mark deps argument as optional/nil-able
function updateEffectImpl(fiberFlags, hookFlags, create, deps: Array<any>?): ()
	-- deviation END
	local hook = updateWorkInProgressHook()
	-- deviation: no need to account for undefined
	-- local nextDeps = deps == undefined ? nil : deps
	local nextDeps = deps
	local destroy

	if currentHook ~= nil then
		local prevEffect = currentHook.memoizedState
		destroy = prevEffect.destroy
		if nextDeps ~= nil then
			local prevDeps = prevEffect.deps
			if areHookInputsEqual(nextDeps, prevDeps) then
				hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps)
				return
			end
		end
	end

	currentlyRenderingFiber.flags = bit32.bor(currentlyRenderingFiber.flags, fiberFlags)

	hook.memoizedState = pushEffect(bit32.bor(HookHasEffect, hookFlags), create, destroy, nextDeps)
end

local function mountEffect(
	-- TODO: Luau needs union type packs for this type to translate idiomatically
	create: (() -> ()) | (() -> (() -> ())),
	deps: Array<any>?
): ()
	if __DEV__ then
		-- deviation: use TestEZ's __TESTEZ_RUNNING_TEST__ as well as jest
		-- $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
		if type(_G.jest) ~= "nil" or _G.__TESTEZ_RUNNING_TEST__ then
			warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber)
		end
	end

	if __DEV__ and enableDoubleInvokingEffects then
		mountEffectImpl(bit32.bor(MountPassiveDevEffect, PassiveEffect, PassiveStaticEffect), HookPassive, create, deps)
	else
		mountEffectImpl(bit32.bor(PassiveEffect, PassiveStaticEffect), HookPassive, create, deps)
	end
end

local function updateEffect(
	-- TODO: Luau needs union type packs for this type to translate idiomatically
	create: (() -> ()) | (() -> (() -> ())),
	deps: Array<any>?
): ()
	if __DEV__ then
		-- deviation: use TestEZ's __TESTEZ_RUNNING_TEST__ in addition to jest
		-- $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
		if type(_G.jest) ~= "nil" or _G.__TESTEZ_RUNNING_TEST__ then
			warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber)
		end
	end
	updateEffectImpl(PassiveEffect, HookPassive, create, deps)
end

local function mountLayoutEffect(
	-- TODO: Luau needs union type packs for this type to translate idiomatically
	create: (() -> ()) | (() -> (() -> ())),
	deps: Array<any>?
): ()
	if __DEV__ and enableDoubleInvokingEffects then
		mountEffectImpl(bit32.bor(MountLayoutDevEffect, UpdateEffect), HookLayout, create, deps)
	else
		mountEffectImpl(UpdateEffect, HookLayout, create, deps)
	end
end

local function updateLayoutEffect(
	-- TODO: Luau needs union type packs for this type to translate idiomatically
	create: (() -> ()) | (() -> (() -> ())),
	deps: Array<any>?
): ()
	updateEffectImpl(UpdateEffect, HookLayout, create, deps)
end

function imperativeHandleEffect<T>(
	create: () -> T,
	ref: { current: T | nil } | ((inst: T | nil) -> ...any) | nil
	-- deviation: explicit type annotation needed due to mixed return
): nil | () -> ...any
	if ref ~= nil and type(ref) == "function" then
		local refCallback = ref
		local inst = create()
		refCallback(inst)
		return function()
			return refCallback(nil)
		end
	elseif ref ~= nil then
		local refObject = ref :: any
		-- deviation: can't check for key presence because nil is a legitimate value.
		if __DEV__ then
			-- FIXME: This is a clumsy approximation, since we don't have any
			-- explicit way to know that something is a ref object; instead, we check
			-- that it's an empty object with a metatable, which is what Roact refs
			-- look like since they indirect to bindings via their metatable
			local isRefObject = getmetatable(refObject) ~= nil and #Object.keys(refObject) == 0
			if not isRefObject then
				console.error(
					"Expected useImperativeHandle() first argument to either be a "
						.. "ref callback or React.createRef() object. Instead received: %s.",
					"an object with keys {" .. Array.join(Object.keys(refObject), ", ") .. "}"
				)
			end
		end
		local inst = create()
		refObject.current = inst
		return function()
			refObject.current = nil
		end
	-- deviation: explicit return to silence analyze
	else
		return nil
	end
end

function mountImperativeHandle<T>(
	ref: { current: T | nil } | ((inst: T | nil) -> ...any) | nil,
	create: () -> T,
	deps: Array<any> | nil
): ()
	if __DEV__ then
		if type(create) ~= "function" then
			console.error(
				"Expected useImperativeHandle() second argument to be a function "
					.. "that creates a handle. Instead received: %s.",
				-- deviation START: nil instead of null
				if create ~= nil then type(create) else "nil"
				-- deviation END
			)
		end
	end
	-- TODO: If deps are provided, should we skip comparing the ref itself?
	local effectDeps = if deps ~= nil then Array.concat(deps, { ref }) else nil

	if __DEV__ and enableDoubleInvokingEffects then
		return mountEffectImpl(bit32.bor(MountLayoutDevEffect, UpdateEffect), HookLayout, function()
			return imperativeHandleEffect(create, ref)
		end, effectDeps)
	else
		return mountEffectImpl(UpdateEffect, HookLayout, function()
			return imperativeHandleEffect(create, ref)
		end, effectDeps)
	end
end

function updateImperativeHandle<T>(
	ref: { current: T | nil } | ((inst: T | nil) -> ...any) | nil,
	create: () -> T,
	deps: Array<any> | nil
): ()
	if __DEV__ then
		if type(create) ~= "function" then
			local errorArg = "nil"
			if create then
				errorArg = type(create)
			end
			console.error(
				"Expected useImperativeHandle() second argument to be a function "
					.. "that creates a handle. Instead received: %s.",
				errorArg
			)
		end
	end

	-- TODO: If deps are provided, should we skip comparing the ref itself?
	-- deviation: ternary turned to explicit if/else
	local effectDeps
	if deps ~= nil then
		effectDeps = table.clone(deps)
		table.insert(effectDeps, ref)
	end

	return updateEffectImpl(UpdateEffect, HookLayout, function()
		return imperativeHandleEffect(create, ref)
	end, effectDeps)
end

function mountDebugValue<T>(value: T, formatterFn: nil | (T) -> any): ()
	-- This hook is normally a no-op.
	-- The react-debug-hooks package injects its own implementation
	-- so that e.g. DevTools can display custom hook values.
end

local updateDebugValue = mountDebugValue

function mountCallback<T>(callback: T, deps: Array<any> | nil): T
	local hook = mountWorkInProgressHook()
	local nextDeps = deps
	-- FIXME Luau: Luau doesn't allow mixed arrays, forcing us to use any here
	hook.memoizedState = { callback :: any, nextDeps :: any }
	return callback
end

function updateCallback<T>(callback: T, deps: Array<any> | nil): T
	local hook = updateWorkInProgressHook()
	local nextDeps = deps
	local prevState = hook.memoizedState
	if prevState ~= nil then
		if nextDeps ~= nil then
			-- TODO: Luau false positive when this is `Array<any>?` (E001) Type 'Array<any>?' could not be converted into 'Array<any>'
			local prevDeps: Array<any> = prevState[2]
			if areHookInputsEqual(nextDeps, prevDeps) then
				return prevState[1]
			end
		end
	end
	-- FIXME Luau: Luau doesn't allow mixed arrays, forcing us to use any here
	hook.memoizedState = { callback :: any, nextDeps :: any }
	return callback
end

-- FIXME Luau: work around 'Failed to unify type packs' error: CLI-51338
function mountMemo<T...>(nextCreate: () -> T..., deps: Array<any> | nil): ...any
	local hook = mountWorkInProgressHook()

	-- deviation: equivilant to upstream ternary logic
	local nextDeps = deps
	-- deviation: Wrap memoized values in a table and unpack to allow for multiple return values
	local nextValue = { nextCreate() }
	hook.memoizedState = { nextValue :: any, nextDeps }
	return unpack(nextValue)
end

-- FIXME Luau: work around 'Failed to unify type packs' error: CLI-51338
function updateMemo<T...>(nextCreate: () -> T..., deps: Array<any> | nil): ...any
	local hook = updateWorkInProgressHook()
	-- deviation: equivilant to upstream ternary logic
	local nextDeps = deps
	local prevState = hook.memoizedState
	if prevState ~= nil then
		-- Assume these are defined. If they're not, areHookInputsEqual will warn.
		if nextDeps ~= nil then
			local prevDeps: Array<any> = prevState[2]
			if areHookInputsEqual(nextDeps, prevDeps) then
				return unpack(prevState[1])
			end
		end
	end
	-- deviation: Wrap memoized values in a table and unpack to allow for multiple return values
	local nextValue = { nextCreate() }
	hook.memoizedState = { nextValue :: any, nextDeps }
	return unpack(nextValue)
end

-- function mountDeferredValue<T>(value: T): T {
--   local [prevValue, setValue] = mountState(value)
--   mountEffect(() => {
--     local prevTransition = ReactCurrentBatchConfig.transition
--     ReactCurrentBatchConfig.transition = 1
--     try {
--       setValue(value)
--     } finally {
--       ReactCurrentBatchConfig.transition = prevTransition
--     end
--   }, [value])
--   return prevValue
-- end

-- function updateDeferredValue<T>(value: T): T {
--   local [prevValue, setValue] = updateState(value)
--   updateEffect(() => {
--     local prevTransition = ReactCurrentBatchConfig.transition
--     ReactCurrentBatchConfig.transition = 1
--     try {
--       setValue(value)
--     } finally {
--       ReactCurrentBatchConfig.transition = prevTransition
--     end
--   }, [value])
--   return prevValue
-- end

-- function rerenderDeferredValue<T>(value: T): T {
--   local [prevValue, setValue] = rerenderState(value)
--   updateEffect(() => {
--     local prevTransition = ReactCurrentBatchConfig.transition
--     ReactCurrentBatchConfig.transition = 1
--     try {
--       setValue(value)
--     } finally {
--       ReactCurrentBatchConfig.transition = prevTransition
--     end
--   }, [value])
--   return prevValue
-- end

-- function startTransition(setPending, callback)
--   local priorityLevel = getCurrentPriorityLevel()
--   if decoupleUpdatePriorityFromScheduler)
--     local previousLanePriority = getCurrentUpdateLanePriority()
--     setCurrentUpdateLanePriority(
--       higherLanePriority(previousLanePriority, InputContinuousLanePriority),
--     )

--     runWithPriority(
--       priorityLevel < UserBlockingPriority
--         ? UserBlockingPriority
--         : priorityLevel,
--       () => {
--         setPending(true)
--       },
--     )

--     -- TODO: Can remove this. Was only necessary because we used to give
--     -- different behavior to transitions without a config object. Now they are
--     -- all treated the same.
--     setCurrentUpdateLanePriority(DefaultLanePriority)

--     runWithPriority(
--       priorityLevel > NormalPriority ? NormalPriority : priorityLevel,
--       () => {
--         local prevTransition = ReactCurrentBatchConfig.transition
--         ReactCurrentBatchConfig.transition = 1
--         try {
--           setPending(false)
--           callback()
--         } finally {
--           if decoupleUpdatePriorityFromScheduler)
--             setCurrentUpdateLanePriority(previousLanePriority)
--           end
--           ReactCurrentBatchConfig.transition = prevTransition
--         end
--       },
--     )
--   } else {
--     runWithPriority(
--       priorityLevel < UserBlockingPriority
--         ? UserBlockingPriority
--         : priorityLevel,
--       () => {
--         setPending(true)
--       },
--     )

--     runWithPriority(
--       priorityLevel > NormalPriority ? NormalPriority : priorityLevel,
--       () => {
--         local prevTransition = ReactCurrentBatchConfig.transition
--         ReactCurrentBatchConfig.transition = 1
--         try {
--           setPending(false)
--           callback()
--         } finally {
--           ReactCurrentBatchConfig.transition = prevTransition
--         end
--       },
--     )
--   end
-- end

-- function mountTransition(): [(() => void) => void, boolean] {
--   local [isPending, setPending] = mountState(false)
--   -- The `start` method can be stored on a ref, since `setPending`
--   -- never changes.
--   local start = startTransition.bind(null, setPending)
--   mountRef(start)
--   return [start, isPending]
-- end

-- function updateTransition(): [(() => void) => void, boolean] {
--   local [isPending] = updateState(false)
--   local startRef = updateRef()
--   local start: (() => void) => void = (startRef.current: any)
--   return [start, isPending]
-- end

-- function rerenderTransition(): [(() => void) => void, boolean] {
--   local [isPending] = rerenderState(false)
--   local startRef = updateRef()
--   local start: (() => void) => void = (startRef.current: any)
--   return [start, isPending]
-- end

local isUpdatingOpaqueValueInRenderPhase = false
exports.getIsUpdatingOpaqueValueInRenderPhaseInDEV = function(): boolean?
	if __DEV__ then
		return isUpdatingOpaqueValueInRenderPhase
	end
	return nil
end

-- function warnOnOpaqueIdentifierAccessInDEV(fiber)
--   if __DEV__ then
--     -- TODO: Should warn in effects and callbacks, too
--     local name = getComponentName(fiber.type) or 'Unknown'
--     if getIsRendering() and not didWarnAboutUseOpaqueIdentifier[name] then
--       console.error(
--         'The object passed back from useOpaqueIdentifier is meant to be ' ..
--           'passed through to attributes only. Do not read the ' ..
--           'value directly.'
--       )
--       didWarnAboutUseOpaqueIdentifier[name] = true
--     end
--   end
-- end

function mountOpaqueIdentifier()
	local makeId
	if __DEV__ then
		console.warn("!!! unimplemented: warnOnOpaqueIdentifierAccessInDEV")
	-- makeId = makeClientIdInDEV.bind(
	--     nil,
	--     warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber),
	--   )
	else
		makeId = makeClientId
	end

	if getIsHydrating() then
		unimplemented("ReactFiberHooks: getIsHydrating() true")
		return nil
	--   local didUpgrade = false
	--   local fiber = currentlyRenderingFiber
	--   local readValue = function()
	--     if not didUpgrade then
	--       -- Only upgrade once. This works even inside the render phase because
	--       -- the update is added to a shared queue, which outlasts the
	--       -- in-progress render.
	--       didUpgrade = true
	--       if __DEV__ then
	--         isUpdatingOpaqueValueInRenderPhase = true
	--         setId(makeId())
	--         isUpdatingOpaqueValueInRenderPhase = false
	--         warnOnOpaqueIdentifierAccessInDEV(fiber)
	--       else
	--         setId(makeId())
	--       end
	--     end
	--     invariant(
	--       false,
	--       'The object passed back from useOpaqueIdentifier is meant to be ' ..
	--         'passed through to attributes only. Do not read the value directly.'
	--     )
	--   end
	--   local id = makeOpaqueHydratingObject(readValue)

	--   local setId = mountState(id)[1]

	--   if bit32.band(currentlyRenderingFiber.mode, ReactTypeOfMode.BlockingMode) == ReactTypeOfMode.NoMode then
	--     if __DEV__ and enableDoubleInvokingEffects then
	--       currentlyRenderingFiber.flags = bit32.bor(currentlyRenderingFiber.flags,
	--         MountPassiveDevEffect, PassiveEffect, PassiveStaticEffect)
	--     else
	--       currentlyRenderingFiber.flags = bit32.bor(currentlyRenderingFiber.flags,
	-- 				PassiveEffect, PassiveStaticEffect)
	--     end
	--     pushEffect(
	--       bit32.bor(HookHasEffect, HookPassive),
	--       function()
	--         setId(makeId())
	-- 			end,
	--       nil,
	--       nil
	--     )
	--   end
	--   return id
	else
		local id = makeId()
		mountState(id)
		return id
	end
end

function updateOpaqueIdentifier(): OpaqueIDType
	local id, _ = updateState(nil)
	return id
end

function rerenderOpaqueIdentifier(): OpaqueIDType
	local id, _ = rerenderState(nil)
	return id
end

function dispatchAction<S, A>(fiber: Fiber, queue: UpdateQueue<S, A>, action: A, ...): ()
	if __DEV__ then
		local childrenLength = select("#", ...)
		local extraArg
		if childrenLength == 1 then
			extraArg = select(1, ...)
		end
		if type(extraArg) == "function" then
			console.error(
				"State updates from the useState() and useReducer() Hooks don't support the "
					.. "second callback argument. To execute a side effect after "
					.. "rendering, declare it in the component body with useEffect()."
			)
		end
	end

	local eventTime = requestEventTime()
	local lane = requestUpdateLane(fiber)

	local update: Update<S, A> = {
		lane = lane,
		action = action,
		eagerReducer = nil,
		eagerState = nil,
		next = nil :: any,
	}

	-- Append the update to the end of the list.
	local pending = queue.pending
	if pending == nil then
		-- This is the first update. Create a circular list.
		update.next = update
	else
		update.next = pending.next
		pending.next = update
	end
	queue.pending = update

	local alternate = fiber.alternate
	if fiber == currentlyRenderingFiber or (alternate ~= nil and alternate == currentlyRenderingFiber) then
		-- This is a render phase update. Stash it in a lazily-created map of
		-- queue -> linked list of updates. After this render pass, we'll restart
		-- and apply the stashed updates on top of the work-in-progress hook.
		didScheduleRenderPhaseUpdate = true
		didScheduleRenderPhaseUpdateDuringThisPass = true
	else
		if fiber.lanes == NoLanes and (alternate == nil or alternate.lanes == NoLanes) then
			-- The queue is currently empty, which means we can eagerly compute the
			-- next state before entering the render phase. If the new state is the
			-- same as the current state, we may be able to bail out entirely.
			local lastRenderedReducer = queue.lastRenderedReducer
			if lastRenderedReducer ~= nil then
				local prevDispatcher
				if __DEV__ then
					prevDispatcher = ReactCurrentDispatcher.current
					ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV
				end
				-- try
				local currentState: S = queue.lastRenderedState :: any
				-- performance: only wrap the thing that can throw in a pcall to elimiante anon function creation overhead
				local ok, eagerState = pcall(lastRenderedReducer, currentState, action)
				-- Stash the eagerly computed state, and the reducer used to compute
				-- it, on the update object. If the reducer hasn't changed by the
				-- time we enter the render phase, then the eager state can be used
				-- without calling the reducer again.
				if ok then
					update.eagerReducer = lastRenderedReducer
					update.eagerState = eagerState
				end

				-- finally
				if __DEV__ then
					ReactCurrentDispatcher.current = prevDispatcher
				end

				if is(eagerState, currentState) then
					-- Fast path. We can bail out without scheduling React to re-render.
					-- It's still possible that we'll need to rebase this update later,
					-- if the component re-renders for a different reason and by that
					-- time the reducer has changed.
					return
				end
				-- catch
				if not ok then
					-- Suppress the error. It will throw again in the render phase.
				end
			end
		end
		if __DEV__ then
			-- $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
			-- deviation: use TestEZ's __TESTEZ_RUNNING_TEST__ as well as jest
			if type(_G.jest) ~= "nil" or _G.__TESTEZ_RUNNING_TEST__ then
				warnIfNotScopedWithMatchingAct(fiber)
				warnIfNotCurrentlyActingUpdatesInDEV(fiber)
			end
		end
		scheduleUpdateOnFiber(fiber, lane, eventTime)
	end

	if __DEV__ then
		if enableDebugTracing then
			if bit32.band(fiber.mode, DebugTracingMode) ~= 0 then
				local name = getComponentName(fiber.type) or "Unknown"
				logStateUpdateScheduled(name, lane, action)
			end
		end
	end

	if enableSchedulingProfiler then
		markStateUpdateScheduled(fiber, lane)
	end

	return
end

-- deviation: Move these to the top so they're in scope for above functions
local ContextOnlyDispatcher: Dispatcher = {
	readContext = readContext,

	useCallback = throwInvalidHookError :: any,
	useContext = throwInvalidHookError :: any,
	useEffect = throwInvalidHookError :: any,
	useImperativeHandle = throwInvalidHookError :: any,
	useLayoutEffect = throwInvalidHookError :: any,
	useMemo = throwInvalidHookError :: any,
	useReducer = throwInvalidHookError :: any,
	useRef = throwInvalidHookError :: any,
	useBinding = throwInvalidHookError :: any,
	useState = throwInvalidHookError :: any,
	useDebugValue = throwInvalidHookError :: any,
	-- useDeferredValue = throwInvalidHookError,
	-- useTransition = throwInvalidHookError,
	useMutableSource = throwInvalidHookError :: any,
	useOpaqueIdentifier = throwInvalidHookError :: any,

	unstable_isNewReconciler = enableNewReconciler,
}
exports.ContextOnlyDispatcher = ContextOnlyDispatcher

local HooksDispatcherOnMount: Dispatcher = {
	readContext = readContext,

	useCallback = mountCallback,
	useContext = readContext,
	useEffect = mountEffect,
	useImperativeHandle = mountImperativeHandle,
	useLayoutEffect = mountLayoutEffect,
	-- FIXME Luau: work around 'Failed to unify type packs' error: CLI-51338
	useMemo = mountMemo :: any,
	useReducer = mountReducer,
	useRef = mountRef,
	useBinding = mountBinding,
	useState = mountState,
	useDebugValue = mountDebugValue,
	-- useDeferredValue = mountDeferredValue,
	-- useTransition = mountTransition,
	useMutableSource = mountMutableSource,
	useOpaqueIdentifier = mountOpaqueIdentifier,

	unstable_isNewReconciler = enableNewReconciler,
}

local HooksDispatcherOnUpdate: Dispatcher = {
	readContext = readContext,

	useCallback = updateCallback,
	useContext = readContext,
	useEffect = updateEffect,
	useImperativeHandle = updateImperativeHandle,
	useLayoutEffect = updateLayoutEffect,
	-- FIXME Luau: work around 'Failed to unify type packs' error: CLI-51338
	useMemo = updateMemo :: any,
	useReducer = updateReducer,
	useRef = updateRef,
	useBinding = updateBinding,
	useState = updateState,
	useDebugValue = updateDebugValue,
	-- useDeferredValue = updateDeferredValue,
	-- useTransition = updateTransition,
	useMutableSource = updateMutableSource,
	useOpaqueIdentifier = updateOpaqueIdentifier,

	unstable_isNewReconciler = enableNewReconciler,
}

local HooksDispatcherOnRerender: Dispatcher = {
	readContext = readContext,

	useCallback = updateCallback,
	useContext = readContext,
	useEffect = updateEffect,
	useImperativeHandle = updateImperativeHandle,
	useLayoutEffect = updateLayoutEffect,
	-- FIXME Luau: work around 'Failed to unify type packs' error: CLI-51338
	useMemo = updateMemo :: any,
	useReducer = rerenderReducer,
	useRef = updateRef,
	useBinding = updateBinding,
	useState = rerenderState,
	useDebugValue = updateDebugValue,
	-- useDeferredValue = rerenderDeferredValue,
	-- useTransition = rerenderTransition,
	useMutableSource = updateMutableSource,
	useOpaqueIdentifier = rerenderOpaqueIdentifier,

	unstable_isNewReconciler = enableNewReconciler,
}

if __DEV__ then
	local warnInvalidContextAccess = function()
		console.error(
			"Context can only be read while React is rendering. "
				.. "In classes, you can read it in the render method or getDerivedStateFromProps. "
				.. "In function components, you can read it directly in the function body, but not "
				.. "inside Hooks like useReducer() or useMemo()."
		)
	end

	local warnInvalidHookAccess = function()
		console.error(
			"Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. "
				.. "You can only call Hooks at the top level of your React function. "
				.. "For more information, see "
				.. "https://reactjs.org/link/rules-of-hooks"
		)
	end

	HooksDispatcherOnMountInDEV = {
		readContext = function<T>(context: ReactContext<T>, observedBits: number | boolean | nil): T
			return readContext(context, observedBits)
		end,
		useCallback = function<T>(callback: T, deps: Array<any> | nil): T
			currentHookNameInDev = "useCallback"
			mountHookTypesDev()
			checkDepsAreArrayDev(deps)
			return mountCallback(callback, deps)
		end,
		useContext = function<T>(context: ReactContext<T>, observedBits: nil | number | boolean): T
			currentHookNameInDev = "useContext"
			mountHookTypesDev()
			return readContext(context, observedBits)
		end,
		useEffect = function(
			-- TODO: Luau needs union type packs for this type to translate idiomatically
			create: (() -> ()) | (() -> (() -> ())),
			deps: Array<any>?
		): ()
			currentHookNameInDev = "useEffect"
			mountHookTypesDev()
			checkDepsAreArrayDev(deps)
			return mountEffect(create, deps)
		end,
		useImperativeHandle = function<T>(
			ref: { current: T | nil } | ((inst: T | nil) -> ...any) | nil,
			create: () -> T,
			deps: Array<any> | nil
		): ()
			currentHookNameInDev = "useImperativeHandle"
			mountHookTypesDev()
			checkDepsAreArrayDev(deps)
			return mountImperativeHandle(ref, create, deps)
		end,
		useLayoutEffect = function(
			-- TODO: Luau needs union type packs for this type to translate idiomatically
			create: (() -> ()) | (() -> (() -> ())),
			deps: Array<any>?
		): ()
			currentHookNameInDev = "useLayoutEffect"
			mountHookTypesDev()
			checkDepsAreArrayDev(deps)
			return mountLayoutEffect(create, deps)
		end,
		-- FIXME Luau: work around 'Failed to unify type packs' error
		useMemo = function<T...>(create: () -> T..., deps: Array<any> | nil): ...any
			currentHookNameInDev = "useMemo"
			mountHookTypesDev()
			checkDepsAreArrayDev(deps)
			local prevDispatcher = ReactCurrentDispatcher.current
			ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV
			--[[
        ROBLOX DEVIATION: `results` captures all pcall return value: either
        { false, errorObject } or { true, ...returnValues }
      ]]
			local results = { pcall(mountMemo, create, deps) }
			ReactCurrentDispatcher.current = prevDispatcher
			if not results[1] then
				error(results[2])
			end
			-- FIXME Luau: TypeError: Type 'boolean' could not be converted into 'T'
			return unpack(results, 2)
		end :: any,
		useReducer = function<S, I, A>(reducer: (S, A) -> S, initialArg: I, init: ((I) -> S)?): (S, Dispatch<A>)
			currentHookNameInDev = "useReducer"
			mountHookTypesDev()
			local prevDispatcher = ReactCurrentDispatcher.current
			ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV
			local ok, result, setResult = pcall(mountReducer, reducer, initialArg, init)
			-- finally
			ReactCurrentDispatcher.current = prevDispatcher
			if not ok then
				error(result)
			end
			-- deviation: Lua version of useState and useReducer return two items, not list like upstream
			return result, setResult
		end,
		-- deviation: TS models this slightly differently, which is needed to have an initially empty ref and clear the ref, and still typecheck
		useRef = function<T>(initialValue: T): { current: T | nil }
			currentHookNameInDev = "useRef"
			mountHookTypesDev()
			return mountRef(initialValue)
		end,
		-- deviation: Bindings are a feature unique to Roact
		useBinding = function<T>(initialValue: T): (ReactBinding<T>, ReactBindingUpdater<T>)
			currentHookNameInDev = "useBinding"
			mountHookTypesDev()
			return mountBinding(initialValue)
		end,
		useState = function<S>(initialState: (() -> S) | S): (S, Dispatch<BasicStateAction<S>>)
			currentHookNameInDev = "useState"
			mountHookTypesDev()
			local prevDispatcher = ReactCurrentDispatcher.current
			ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV
			-- deviation: Lua version of mountState return two items, not list like upstream.
			local ok, result, setResult = pcall(mountState, initialState)
			ReactCurrentDispatcher.current = prevDispatcher
			if not ok then
				error(result)
			end
			-- deviation: Lua version of useState and useReducer return two items, not list like upstream
			return result, setResult
		end,
		useDebugValue = function<T>(value: T, formatterFn: ((value: T) -> any)?): ()
			currentHookNameInDev = "useDebugValue"
			mountHookTypesDev()
			return mountDebugValue(value, formatterFn)
		end,
		--     useDeferredValue<T>(value: T): T {
		--       currentHookNameInDev = 'useDeferredValue'
		--       mountHookTypesDev()
		--       return mountDeferredValue(value)
		--     },
		--     useTransition(): [(() => void) => void, boolean] {
		--       currentHookNameInDev = 'useTransition'
		--       mountHookTypesDev()
		--       return mountTransition()
		--     },
		useMutableSource = function<Source, Snapshot>(
			source: MutableSource<Source>,
			getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,
			subscribe: MutableSourceSubscribeFn<Source, Snapshot>
		): Snapshot
			currentHookNameInDev = "useMutableSource"
			mountHookTypesDev()
			return mountMutableSource(source, getSnapshot, subscribe)
		end,
		useOpaqueIdentifier = function()
			currentHookNameInDev = "useOpaqueIdentifier"
			mountHookTypesDev()
			return mountOpaqueIdentifier()
		end,

		unstable_isNewReconciler = enableNewReconciler,
	}

	HooksDispatcherOnMountWithHookTypesInDEV = {
		readContext = function<T>(context: ReactContext<T>, observedBits: number | boolean | nil): T
			return readContext(context, observedBits)
		end,
		useCallback = function<T>(callback: T, deps: Array<any> | nil): T
			currentHookNameInDev = "useCallback"
			updateHookTypesDev()
			checkDepsAreArrayDev(deps)
			return mountCallback(callback, deps)
		end,
		useContext = function<T>(context: ReactContext<T>, observedBits: nil | number | boolean): T
			currentHookNameInDev = "useContext"
			updateHookTypesDev()
			return readContext(context, observedBits)
		end,
		useEffect = function(
			-- TODO: Luau needs union type packs for this type to translate idiomatically
			create: (() -> ()) | (() -> (() -> ())),
			deps: Array<any>?
		): ()
			currentHookNameInDev = "useEffect"
			updateHookTypesDev()
			return mountEffect(create, deps)
		end,
		useImperativeHandle = function<T>(
			ref: { current: T | nil } | ((inst: T | nil) -> ...any) | nil,
			create: () -> T,
			deps: Array<any> | nil
		): ()
			currentHookNameInDev = "useImperativeHandle"
			updateHookTypesDev()
			return mountImperativeHandle(ref, create, deps)
		end,
		useLayoutEffect = function(
			-- TODO: Luau needs union type packs for this type to translate idiomatically
			create: (() -> ()) | (() -> (() -> ())),
			deps: Array<any>?
		): ()
			currentHookNameInDev = "useLayoutEffect"
			updateHookTypesDev()
			return mountLayoutEffect(create, deps)
		end,
		-- FIXME Luau: work around 'Failed to unify type packs' error: CLI-51338
		useMemo = function<T...>(create: () -> T..., deps: Array<any> | nil): ...any
			currentHookNameInDev = "useMemo"
			updateHookTypesDev()
			local prevDispatcher = ReactCurrentDispatcher.current
			ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV
			--[[
        ROBLOX DEVIATION: `results` captures all pcall return value: either
        { false, errorObject } or { true, ...returnValues }
      ]]
			local results = { pcall(mountMemo, create, deps) }
			ReactCurrentDispatcher.current = prevDispatcher
			if not results[1] then
				error(results[2])
			end
			return unpack(results, 2)
		end :: any,
		useReducer = function<S, I, A>(reducer: (S, A) -> S, initialArg: I, init: ((I) -> S)?): (S, Dispatch<A>)
			currentHookNameInDev = "useReducer"
			updateHookTypesDev()
			local prevDispatcher = ReactCurrentDispatcher.current
			ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV
			local ok, result, setResult = pcall(mountReducer, reducer, initialArg, init)
			-- finally
			ReactCurrentDispatcher.current = prevDispatcher
			if not ok then
				error(result)
			end
			-- deviation: Lua version of useState and useReducer return two items, not list like upstream
			return result, setResult
		end,
		-- deviation: TS models this slightly differently, which is needed to have an initially empty ref and clear the ref, and still typecheck
		useRef = function<T>(initialValue: T): { current: T | nil }
			currentHookNameInDev = "useRef"
			updateHookTypesDev()
			return mountRef(initialValue)
		end,
		-- deviation: Bindings are a feature unique to Roact
		useBinding = function<T>(initialValue: T): (ReactBinding<T>, ReactBindingUpdater<T>)
			currentHookNameInDev = "useBinding"
			updateHookTypesDev()
			return mountBinding(initialValue)
		end,
		useState = function<S>(initialState: (() -> S) | S): (S, Dispatch<BasicStateAction<S>>)
			currentHookNameInDev = "useState"
			updateHookTypesDev()
			local prevDispatcher = ReactCurrentDispatcher.current
			ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV
			-- deviation: Lua version of mountState return two items, not list like upstream
			local ok, result, setResult = pcall(mountState, initialState)
			ReactCurrentDispatcher.current = prevDispatcher
			if not ok then
				error(result)
			end
			-- deviation: Lua version of mountState return two items, not list like upstream
			return result, setResult
		end,
		useDebugValue = function<T>(value: T, formatterFn: ((value: T) -> any)?): ()
			currentHookNameInDev = "useDebugValue"
			updateHookTypesDev()
			return mountDebugValue(value, formatterFn)
		end,
		--     useDeferredValue<T>(value: T): T {
		--       currentHookNameInDev = 'useDeferredValue'
		--       updateHookTypesDev()
		--       return mountDeferredValue(value)
		--     },
		--     useTransition(): [(() => void) => void, boolean] {
		--       currentHookNameInDev = 'useTransition'
		--       updateHookTypesDev()
		--       return mountTransition()
		--     },
		useMutableSource = function<Source, Snapshot>(
			source: MutableSource<Source>,
			getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,
			subscribe: MutableSourceSubscribeFn<Source, Snapshot>
		): Snapshot
			currentHookNameInDev = "useMutableSource"
			updateHookTypesDev()
			return mountMutableSource(source, getSnapshot, subscribe)
		end,
		useOpaqueIdentifier = function()
			currentHookNameInDev = "useOpaqueIdentifier"
			updateHookTypesDev()
			return mountOpaqueIdentifier()
		end,

		unstable_isNewReconciler = enableNewReconciler,
	}

	HooksDispatcherOnUpdateInDEV = {
		readContext = function<T>(context: ReactContext<T>, observedBits: number | boolean | nil): T
			return readContext(context, observedBits)
		end,
		useCallback = function<T>(callback: T, deps: Array<any> | nil): T
			currentHookNameInDev = "useCallback"
			updateHookTypesDev()
			return updateCallback(callback, deps)
		end,
		useContext = function<T>(context: ReactContext<T>, observedBits: nil | number | boolean): T
			currentHookNameInDev = "useContext"
			updateHookTypesDev()
			return readContext(context, observedBits)
		end,
		useEffect = function(
			-- TODO: Luau needs union type packs for this type to translate idiomatically
			create: (() -> ()) | (() -> (() -> ())),
			deps: Array<any>?
		): ()
			currentHookNameInDev = "useEffect"
			updateHookTypesDev()
			return updateEffect(create, deps)
		end,
		useImperativeHandle = function<T>(
			ref: { current: T | nil } | ((inst: T | nil) -> ...any) | nil,
			create: () -> T,
			deps: Array<any> | nil
		): ()
			currentHookNameInDev = "useImperativeHandle"
			updateHookTypesDev()
			return updateImperativeHandle(ref, create, deps)
		end,
		useLayoutEffect = function(
			-- TODO: Luau needs union type packs for this type to translate idiomatically
			create: (() -> ()) | (() -> (() -> ())),
			deps: Array<any>?
		): ()
			currentHookNameInDev = "useLayoutEffect"
			updateHookTypesDev()
			return updateLayoutEffect(create, deps)
		end,
		-- FIXME Luau: work around 'Failed to unify type packs' error: CLI-51338
		useMemo = function<T...>(create: () -> T..., deps: Array<any> | nil): ...any
			currentHookNameInDev = "useMemo"
			updateHookTypesDev()
			local prevDispatcher = ReactCurrentDispatcher.current
			ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV
			--[[
        ROBLOX DEVIATION: `results` captures all pcall return value: either
        { false, errorObject } or { true, ...returnValues }
      ]]
			local results = { pcall(updateMemo, create, deps) }
			ReactCurrentDispatcher.current = prevDispatcher
			if not results[1] then
				error(results[2])
			end
			return unpack(results, 2)
		end :: any,
		useReducer = function<S, I, A>(reducer: (S, A) -> S, initialArg: I, init: ((I) -> S)?): (S, Dispatch<A>)
			currentHookNameInDev = "useReducer"
			updateHookTypesDev()
			local prevDispatcher = ReactCurrentDispatcher.current
			ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV
			local ok, result, setResult = pcall(updateReducer, reducer, initialArg, init)
			-- finally
			ReactCurrentDispatcher.current = prevDispatcher
			if not ok then
				error(result)
			end
			-- deviation: Lua version of useState and useReducer return two items, not list like upstream
			return result, setResult
		end,
		-- deviation: TS models this slightly differently, which is needed to have an initially empty ref and clear the ref, and still typecheck
		useRef = function<T>(initialValue: T): { current: T | nil }
			currentHookNameInDev = "useRef"
			updateHookTypesDev()
			return updateRef(initialValue)
		end,
		-- deviation: Bindings are a feature unique to Roact
		useBinding = function<T>(initialValue: T): (ReactBinding<T>, ReactBindingUpdater<T>)
			currentHookNameInDev = "useBinding"
			updateHookTypesDev()
			return updateBinding(initialValue)
		end,
		useState = function<S>(initialState: (() -> S) | S): (S, Dispatch<BasicStateAction<S>>)
			currentHookNameInDev = "useState"
			updateHookTypesDev()
			local prevDispatcher = ReactCurrentDispatcher.current
			ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV
			-- deviation: Lua version of updateState returns two items, not list like upstream
			local ok, result, setResult = pcall(updateState, initialState)
			ReactCurrentDispatcher.current = prevDispatcher
			if not ok then
				error(result)
			end
			-- deviation: Lua version of useState returns two items, not list like upstream
			return result, setResult
		end,
		useDebugValue = function<T>(value: T, formatterFn: ((value: T) -> any)?): ()
			currentHookNameInDev = "useDebugValue"
			updateHookTypesDev()
			return updateDebugValue(value, formatterFn)
		end,
		--     useDeferredValue<T>(value: T): T {
		--       currentHookNameInDev = 'useDeferredValue'
		--       updateHookTypesDev()
		--       return updateDeferredValue(value)
		--     },
		--     useTransition(): [(() => void) => void, boolean] {
		--       currentHookNameInDev = 'useTransition'
		--       updateHookTypesDev()
		--       return updateTransition()
		--     },
		useMutableSource = function<Source, Snapshot>(
			source: MutableSource<Source>,
			getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,
			subscribe: MutableSourceSubscribeFn<Source, Snapshot>
		): Snapshot
			currentHookNameInDev = "useMutableSource"
			updateHookTypesDev()
			return updateMutableSource(source, getSnapshot, subscribe)
		end,
		useOpaqueIdentifier = function(): OpaqueIDType
			currentHookNameInDev = "useOpaqueIdentifier"
			updateHookTypesDev()
			return updateOpaqueIdentifier()
		end,

		unstable_isNewReconciler = enableNewReconciler,
	}

	HooksDispatcherOnRerenderInDEV = {
		readContext = function<T>(context: ReactContext<T>, observedBits: number | boolean | nil): T
			return readContext(context, observedBits)
		end,
		useCallback = function<T>(callback: T, deps: Array<any> | nil): T
			currentHookNameInDev = "useCallback"
			updateHookTypesDev()
			return mountCallback(callback, deps)
		end,
		useContext = function<T>(context: ReactContext<T>, observedBits: nil | number | boolean): T
			currentHookNameInDev = "useContext"
			updateHookTypesDev()
			return readContext(context, observedBits)
		end,
		useEffect = function(
			-- TODO: Luau needs union type packs for this type to translate idiomatically
			create: (() -> ()) | (() -> (() -> ())),
			deps: Array<any> | nil
		): ()
			currentHookNameInDev = "useEffect"
			updateHookTypesDev()
			return updateEffect(create, deps)
		end,
		useImperativeHandle = function<T>(
			ref: { current: T | nil } | ((inst: T | nil) -> ...any) | nil,
			create: () -> T,
			deps: Array<any> | nil
		): ()
			currentHookNameInDev = "useImperativeHandle"
			updateHookTypesDev()
			return updateImperativeHandle(ref, create, deps)
		end,
		useLayoutEffect = function(
			-- TODO: Luau needs union type packs for this type to translate idiomatically
			create: (() -> ()) | (() -> (() -> ())),
			deps: Array<any>?
		): ()
			currentHookNameInDev = "useLayoutEffect"
			updateHookTypesDev()
			return updateLayoutEffect(create, deps)
		end,
		-- FIXME Luau: work around 'Failed to unify type packs' error: CLI-51338
		useMemo = function<T...>(create: () -> T..., deps: Array<any> | nil): ...any
			currentHookNameInDev = "useMemo"
			updateHookTypesDev()
			local prevDispatcher = ReactCurrentDispatcher.current
			ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV
			--[[
        ROBLOX DEVIATION: `results` captures all pcall return value: either
        { false, errorObject } or { true, ...returnValues }
      ]]
			local results = { pcall(updateMemo, create, deps) }
			ReactCurrentDispatcher.current = prevDispatcher
			if not results[1] then
				error(results[2])
			end
			return unpack(results, 2)
		end :: any,
		useReducer = function<S, I, A>(reducer: (S, A) -> S, initialArg: I, init: ((I) -> S)?): (S, Dispatch<A>)
			currentHookNameInDev = "useReducer"
			updateHookTypesDev()
			local prevDispatcher = ReactCurrentDispatcher.current
			ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV
			local ok, result, setResult = pcall(rerenderReducer, reducer, initialArg, init)
			-- finally
			ReactCurrentDispatcher.current = prevDispatcher
			if not ok then
				error(result)
			end
			-- deviation: Lua version of useState and useReducer return two items, not list like upstream
			return result, setResult
		end,
		-- deviation: TS models this slightly differently, which is needed to have an initially empty ref and clear the ref, and still typecheck
		useRef = function<T>(initialValue: T): { current: T | nil }
			currentHookNameInDev = "useRef"
			updateHookTypesDev()
			return updateRef(initialValue)
		end,
		-- deviation: Bindings are a feature unique to Roact
		useBinding = function<T>(initialValue: T): (ReactBinding<T>, ReactBindingUpdater<T>)
			currentHookNameInDev = "useBinding"
			updateHookTypesDev()
			return updateBinding(initialValue)
		end,
		useState = function<S>(initialState: (() -> S) | S): (S, Dispatch<BasicStateAction<S>>)
			currentHookNameInDev = "useState"
			updateHookTypesDev()
			local prevDispatcher = ReactCurrentDispatcher.current
			ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV
			-- deviation: Lua version of useState returns two items, not list like upstream
			local ok, result, setResult = pcall(rerenderState, initialState)
			ReactCurrentDispatcher.current = prevDispatcher
			if not ok then
				error(result)
			end
			-- deviation: Lua version of useState returns two items, not list like upstream
			return result, setResult
		end,
		useDebugValue = function<T>(value: T, formatterFn: ((value: T) -> any)?): ()
			currentHookNameInDev = "useDebugValue"
			updateHookTypesDev()
			return updateDebugValue(value, formatterFn)
		end,
		--     useDeferredValue<T>(value: T): T {
		--       currentHookNameInDev = 'useDeferredValue'
		--       updateHookTypesDev()
		--       return rerenderDeferredValue(value)
		--     },
		--     useTransition(): [(() => void) => void, boolean] {
		--       currentHookNameInDev = 'useTransition'
		--       updateHookTypesDev()
		--       return rerenderTransition()
		--     },
		useMutableSource = function<Source, Snapshot>(
			source: MutableSource<Source>,
			getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,
			subscribe: MutableSourceSubscribeFn<Source, Snapshot>
		): Snapshot
			currentHookNameInDev = "useMutableSource"
			updateHookTypesDev()
			return updateMutableSource(source, getSnapshot, subscribe)
		end,
		useOpaqueIdentifier = function(): OpaqueIDType
			currentHookNameInDev = "useOpaqueIdentifier"
			updateHookTypesDev()
			return rerenderOpaqueIdentifier()
		end,

		unstable_isNewReconciler = enableNewReconciler,
	}

	InvalidNestedHooksDispatcherOnMountInDEV = {
		readContext = function<T>(context: ReactContext<T>, observedBits: number | boolean | nil): T
			warnInvalidContextAccess()
			return readContext(context, observedBits)
		end,
		useCallback = function<T>(callback: T, deps: Array<any> | nil): T
			currentHookNameInDev = "useCallback"
			warnInvalidHookAccess()
			mountHookTypesDev()
			return mountCallback(callback, deps)
		end,
		useContext = function<T>(context: ReactContext<T>, observedBits: nil | number | boolean): T
			currentHookNameInDev = "useContext"
			warnInvalidHookAccess()
			mountHookTypesDev()
			return readContext(context, observedBits)
		end,
		useEffect = function(
			-- TODO: Luau needs union type packs for this type to translate idiomatically
			create: (() -> ()) | (() -> (() -> ())),
			deps: Array<any> | nil
		): ()
			currentHookNameInDev = "useEffect"
			warnInvalidHookAccess()
			mountHookTypesDev()
			return mountEffect(create, deps)
		end,
		useImperativeHandle = function<T>(
			ref: { current: T | nil } | ((inst: T | nil) -> ...any) | nil,
			create: () -> T,
			deps: Array<any> | nil
		): ()
			currentHookNameInDev = "useImperativeHandle"
			warnInvalidHookAccess()
			mountHookTypesDev()
			return mountImperativeHandle(ref, create, deps)
		end,
		useLayoutEffect = function(
			-- TODO: Luau needs union type packs for this type to translate idiomatically
			create: (() -> ()) | (() -> (() -> ())),
			deps: Array<any> | nil
		): ()
			currentHookNameInDev = "useLayoutEffect"
			warnInvalidHookAccess()
			mountHookTypesDev()
			return mountLayoutEffect(create, deps)
		end,
		-- FIXME Luau: work around 'Failed to unify type packs' error: CLI-51338
		useMemo = function<T...>(create: () -> T..., deps: Array<any> | nil): ...any
			currentHookNameInDev = "useMemo"
			warnInvalidHookAccess()
			mountHookTypesDev()
			local prevDispatcher = ReactCurrentDispatcher.current
			ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV
			--[[
        ROBLOX DEVIATION: `results` captures all pcall return value: either
        { false, errorObject } or { true, ...returnValues }
      ]]
			local results = { pcall(mountMemo, create, deps) }
			ReactCurrentDispatcher.current = prevDispatcher
			if not results[1] then
				error(results[2])
			end
			return unpack(results, 2)
		end :: any,
		useReducer = function<S, I, A>(reducer: (S, A) -> S, initialArg: I, init: ((I) -> S)?): (S, Dispatch<A>)
			currentHookNameInDev = "useReducer"
			warnInvalidHookAccess()
			mountHookTypesDev()
			local prevDispatcher = ReactCurrentDispatcher.current
			ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV
			local ok, result, setResult = pcall(mountReducer, reducer, initialArg, init)
			-- finally
			ReactCurrentDispatcher.current = prevDispatcher
			if not ok then
				error(result)
			end
			-- deviation: Lua version of useState and useReducer return two items, not list like upstream
			return result, setResult
		end,
		-- deviation: TS models this slightly differently, which is needed to have an initially empty ref and clear the ref, and still typecheck
		useRef = function<T>(initialValue: T): { current: T | nil }
			currentHookNameInDev = "useRef"
			warnInvalidHookAccess()
			mountHookTypesDev()
			return mountRef(initialValue)
		end,
		-- deviation: Bindings are a feature unique to Roact
		useBinding = function<T>(initialValue: T): (ReactBinding<T>, ReactBindingUpdater<T>)
			currentHookNameInDev = "useBinding"
			warnInvalidHookAccess()
			mountHookTypesDev()
			return mountBinding(initialValue)
		end,
		useState = function<S>(initialState: (() -> S) | S): (S, Dispatch<BasicStateAction<S>>)
			currentHookNameInDev = "useState"
			warnInvalidHookAccess()
			mountHookTypesDev()
			local prevDispatcher = ReactCurrentDispatcher.current
			ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV
			-- deviation: Lua version of useState returns two items, not list like upstream
			local ok, result, setResult = pcall(mountState, initialState)
			ReactCurrentDispatcher.current = prevDispatcher
			if not ok then
				error(result)
			end
			-- deviation: Lua version of useState returns two items, not list like upstream
			return result, setResult
		end,
		useDebugValue = function<T>(value: T, formatterFn: ((value: T) -> any)?): ()
			currentHookNameInDev = "useDebugValue"
			warnInvalidHookAccess()
			mountHookTypesDev()
			return mountDebugValue(value, formatterFn)
		end,
		-- useDeferredValue<T>(value: T): T {
		--   currentHookNameInDev = 'useDeferredValue'
		--   warnInvalidHookAccess()
		--   mountHookTypesDev()
		--   return mountDeferredValue(value)
		-- },
		-- useTransition(): [(() => void) => void, boolean] {
		--   currentHookNameInDev = 'useTransition'
		--   warnInvalidHookAccess()
		--   mountHookTypesDev()
		--   return mountTransition()
		-- },
		useMutableSource = function<Source, Snapshot>(
			source: MutableSource<Source>,
			getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,
			subscribe: MutableSourceSubscribeFn<Source, Snapshot>
		): Snapshot
			currentHookNameInDev = "useMutableSource"
			warnInvalidHookAccess()
			mountHookTypesDev()
			return mountMutableSource(source, getSnapshot, subscribe)
		end,
		useOpaqueIdentifier = function(): OpaqueIDType
			currentHookNameInDev = "useOpaqueIdentifier"
			warnInvalidHookAccess()
			mountHookTypesDev()
			return mountOpaqueIdentifier()
		end,

		unstable_isNewReconciler = enableNewReconciler,
	}

	InvalidNestedHooksDispatcherOnUpdateInDEV = {
		readContext = function<T>(context: ReactContext<T>, observedBits: number | boolean | nil): T
			warnInvalidContextAccess()
			return readContext(context, observedBits)
		end,
		useCallback = function<T>(callback: T, deps: Array<any> | nil): T
			currentHookNameInDev = "useCallback"
			warnInvalidHookAccess()
			updateHookTypesDev()
			return mountCallback(callback, deps)
		end,
		useContext = function<T>(context: ReactContext<T>, observedBits: nil | number | boolean): T
			currentHookNameInDev = "useContext"
			warnInvalidHookAccess()
			updateHookTypesDev()
			return readContext(context, observedBits)
		end,
		useEffect = function(
			-- TODO: Luau needs union type packs for this type to translate idiomatically
			create: (() -> ()) | (() -> (() -> ())),
			deps: Array<any> | nil
		): ()
			currentHookNameInDev = "useEffect"
			warnInvalidHookAccess()
			updateHookTypesDev()
			return updateEffect(create, deps)
		end,
		useImperativeHandle = function<T>(
			ref: { current: T | nil } | ((inst: T | nil) -> ...any) | nil,
			create: () -> T,
			deps: Array<any> | nil
		): ()
			currentHookNameInDev = "useImperativeHandle"
			warnInvalidHookAccess()
			updateHookTypesDev()
			return updateImperativeHandle(ref, create, deps)
		end,
		useLayoutEffect = function(
			-- TODO: Luau needs union type packs for this type to translate idiomatically
			create: (() -> ()) | (() -> (() -> ())),
			deps: Array<any>?
		): ()
			currentHookNameInDev = "useLayoutEffect"
			warnInvalidHookAccess()
			updateHookTypesDev()
			return updateLayoutEffect(create, deps)
		end,
		-- FIXME Luau: work around 'Failed to unify type packs' error: CLI-51338
		useMemo = function<T...>(create: () -> T..., deps: Array<any> | nil): ...any
			currentHookNameInDev = "useMemo"
			warnInvalidHookAccess()
			updateHookTypesDev()
			local prevDispatcher = ReactCurrentDispatcher.current
			ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV
			--[[
        ROBLOX DEVIATION: `results` captures all pcall return value: either
        { false, errorObject } or { true, ...returnValues }
      ]]
			local results = { pcall(updateMemo, create, deps) }
			ReactCurrentDispatcher.current = prevDispatcher
			if not results[1] then
				error(results[2])
			end
			return unpack(results, 2)
		end :: any,
		useReducer = function<S, I, A>(reducer: (S, A) -> S, initialArg: I, init: ((I) -> S)?): (S, Dispatch<A>)
			currentHookNameInDev = "useReducer"
			warnInvalidHookAccess()
			updateHookTypesDev()
			local prevDispatcher = ReactCurrentDispatcher.current
			ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV
			local ok, result, setResult = pcall(updateReducer, reducer, initialArg, init)
			-- finally
			ReactCurrentDispatcher.current = prevDispatcher

			if not ok then
				error(result)
			end
			-- deviation: Lua version of useState and useReducer return two items, not list like upstream
			return result, setResult
		end,
		-- deviation: TS models this slightly differently, which is needed to have an initially empty ref and clear the ref, and still typecheck
		useRef = function<T>(initialValue: T): { current: T | nil }
			currentHookNameInDev = "useRef"
			warnInvalidHookAccess()
			updateHookTypesDev()
			return updateRef(initialValue)
		end,
		-- deviation: Bindings are a feature unique to Roact
		useBinding = function<T>(initialValue: T): (ReactBinding<T>, ReactBindingUpdater<T>)
			currentHookNameInDev = "useBinding"
			warnInvalidHookAccess()
			updateHookTypesDev()
			return updateBinding(initialValue)
		end,
		useState = function<S>(initialState: (() -> S) | S): (S, Dispatch<BasicStateAction<S>>)
			currentHookNameInDev = "useState"
			warnInvalidHookAccess()
			updateHookTypesDev()
			local prevDispatcher = ReactCurrentDispatcher.current
			ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV
			-- deviation: Lua version of useState returns two items, not list like upstream
			local ok, result, setResult = pcall(updateState, initialState)
			ReactCurrentDispatcher.current = prevDispatcher
			if not ok then
				error(result)
			end
			-- deviation: Lua version of useState returns two items, not list like upstream
			return result, setResult
		end,
		useDebugValue = function<T>(value: T, formatterFn: ((value: T) -> any)?): ()
			currentHookNameInDev = "useDebugValue"
			warnInvalidHookAccess()
			updateHookTypesDev()
			return updateDebugValue(value, formatterFn)
		end,
		--     useDeferredValue<T>(value: T): T {
		--       currentHookNameInDev = 'useDeferredValue'
		--       warnInvalidHookAccess()
		--       updateHookTypesDev()
		--       return updateDeferredValue(value)
		--     },
		--     useTransition(): [(() => void) => void, boolean] {
		--       currentHookNameInDev = 'useTransition'
		--       warnInvalidHookAccess()
		--       updateHookTypesDev()
		--       return updateTransition()
		--     },
		useMutableSource = function<Source, Snapshot>(
			source: MutableSource<Source>,
			getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,
			subscribe: MutableSourceSubscribeFn<Source, Snapshot>
		): Snapshot
			currentHookNameInDev = "useMutableSource"
			warnInvalidHookAccess()
			updateHookTypesDev()
			return updateMutableSource(source, getSnapshot, subscribe)
		end,
		useOpaqueIdentifier = function(): OpaqueIDType
			currentHookNameInDev = "useOpaqueIdentifier"
			warnInvalidHookAccess()
			updateHookTypesDev()
			return updateOpaqueIdentifier()
		end,

		unstable_isNewReconciler = enableNewReconciler,
	}

	InvalidNestedHooksDispatcherOnRerenderInDEV = {
		readContext = function<T>(context: ReactContext<T>, observedBits: number | boolean | nil): T
			warnInvalidContextAccess()
			return readContext(context, observedBits)
		end,
		useCallback = function<T>(callback: T, deps: Array<any> | nil): T
			currentHookNameInDev = "useCallback"
			warnInvalidHookAccess()
			updateHookTypesDev()
			return updateCallback(callback, deps)
		end,
		useContext = function<T>(context: ReactContext<T>, observedBits: nil | number | boolean): T
			currentHookNameInDev = "useContext"
			warnInvalidHookAccess()
			updateHookTypesDev()
			return readContext(context, observedBits)
		end,
		useEffect = function(
			-- TODO: Luau needs union type packs for this type to translate idiomatically
			create: (() -> ()) | (() -> (() -> ())),
			deps: Array<any> | nil
		): ()
			currentHookNameInDev = "useEffect"
			warnInvalidHookAccess()
			updateHookTypesDev()
			return updateEffect(create, deps)
		end,
		useImperativeHandle = function<T>(
			ref: { current: T | nil } | ((inst: T | nil) -> ...any) | nil,
			create: () -> T,
			deps: Array<any> | nil
		): ()
			currentHookNameInDev = "useImperativeHandle"
			warnInvalidHookAccess()
			updateHookTypesDev()
			return updateImperativeHandle(ref, create, deps)
		end,
		useLayoutEffect = function(
			-- TODO: Luau needs union type packs for this type to translate idiomatically
			create: (() -> ()) | (() -> (() -> ())),
			deps: Array<any>?
		): ()
			currentHookNameInDev = "useLayoutEffect"
			warnInvalidHookAccess()
			updateHookTypesDev()
			return updateLayoutEffect(create, deps)
		end,
		-- FIXME Luau: work around 'Failed to unify type packs' error: CLI-51338
		useMemo = function<T...>(create: () -> T..., deps: Array<any> | nil): ...any
			currentHookNameInDev = "useMemo"
			warnInvalidHookAccess()
			updateHookTypesDev()
			local prevDispatcher = ReactCurrentDispatcher.current
			ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV
			--[[
        ROBLOX DEVIATION: `results` captures all pcall return value: either
        { false, errorObject } or { true, ...returnValues }
      ]]
			local results = { pcall(updateMemo, create, deps) }
			ReactCurrentDispatcher.current = prevDispatcher
			if not results[1] then
				error(results[2])
			end
			return unpack(results, 2)
		end :: any,
		useReducer = function<S, I, A>(reducer: (S, A) -> S, initialArg: I, init: ((I) -> S)?): (S, Dispatch<A>)
			currentHookNameInDev = "useReducer"
			warnInvalidHookAccess()
			updateHookTypesDev()
			local prevDispatcher = ReactCurrentDispatcher.current
			ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV
			local ok, result, setResult = pcall(rerenderReducer, reducer, initialArg, init)
			-- finally
			ReactCurrentDispatcher.current = prevDispatcher
			if not ok then
				error(result)
			end
			-- deviation: Lua version of useState and useReducer return two items, not list like upstream
			return result, setResult
		end,
		-- deviation: TS models this slightly differently, which is needed to have an initially empty ref and clear the ref, and still typecheck
		useRef = function<T>(initialValue: T): { current: T | nil }
			currentHookNameInDev = "useRef"
			warnInvalidHookAccess()
			updateHookTypesDev()
			return updateRef(initialValue)
		end,
		-- deviation: Bindings are a feature unique to Roact
		useBinding = function<T>(initialValue: T): (ReactBinding<T>, ReactBindingUpdater<T>)
			currentHookNameInDev = "useBinding"
			warnInvalidHookAccess()
			updateHookTypesDev()
			return updateBinding(initialValue)
		end,
		useState = function<S>(initialState: (() -> S) | S): (S, Dispatch<BasicStateAction<S>>)
			currentHookNameInDev = "useState"
			warnInvalidHookAccess()
			updateHookTypesDev()
			local prevDispatcher = ReactCurrentDispatcher.current
			ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV
			-- deviation: Lua version of useState returns two items, not list like upstream
			local ok, result, setResult = pcall(rerenderState, initialState)
			ReactCurrentDispatcher.current = prevDispatcher
			if not ok then
				error(result)
			end
			-- deviation: Lua version of useState returns two items, not list like upstream
			return result, setResult
		end,
		useDebugValue = function<T>(value: T, formatterFn: ((value: T) -> any)?): ()
			currentHookNameInDev = "useDebugValue"
			warnInvalidHookAccess()
			updateHookTypesDev()
			return updateDebugValue(value, formatterFn)
		end,
		--     useDeferredValue<T>(value: T): T {
		--       currentHookNameInDev = 'useDeferredValue'
		--       warnInvalidHookAccess()
		--       updateHookTypesDev()
		--       return rerenderDeferredValue(value)
		--     },
		--     useTransition(): [(() => void) => void, boolean] {
		--       currentHookNameInDev = 'useTransition'
		--       warnInvalidHookAccess()
		--       updateHookTypesDev()
		--       return rerenderTransition()
		--     },
		useMutableSource = function<Source, Snapshot>(
			source: MutableSource<Source>,
			getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,
			subscribe: MutableSourceSubscribeFn<Source, Snapshot>
		): Snapshot
			currentHookNameInDev = "useMutableSource"
			warnInvalidHookAccess()
			updateHookTypesDev()
			return updateMutableSource(source, getSnapshot, subscribe)
		end,
		useOpaqueIdentifier = function(): OpaqueIDType
			currentHookNameInDev = "useOpaqueIdentifier"
			warnInvalidHookAccess()
			updateHookTypesDev()
			return rerenderOpaqueIdentifier()
		end,

		unstable_isNewReconciler = enableNewReconciler,
	}
end

local function renderWithHooks<Props, SecondArg>(
	current: Fiber | nil,
	workInProgress: Fiber,
	Component: (p: Props, arg: SecondArg) -> any,
	props: Props,
	secondArg: SecondArg,
	nextRenderLanes: Lanes
): any
	renderLanes = nextRenderLanes
	currentlyRenderingFiber = workInProgress

	if __DEV__ then
		hookTypesDev = if current ~= nil then (current._debugHookTypes :: any) :: Array<HookType> else nil
		-- deviation START: index variable offset by one for Lua
		hookTypesUpdateIndexDev = 0
		-- deviation END
		-- Used for hot reloading:
		-- performance: eliminate unuseful cmp in hot path, we don't currently support hot reloading
		-- ignorePreviousDependencies =
		--   current ~= nil and current.type ~= workInProgress.type
	end

	workInProgress.memoizedState = nil
	-- performance TODO: return non-nil updateQueue object to the ReactUpdateQUeue pool
	workInProgress.updateQueue = nil
	workInProgress.lanes = NoLanes

	-- The following should have already been reset
	-- currentHook = nil
	-- workInProgressHook = nil

	-- didScheduleRenderPhaseUpdate = false

	-- TODO Warn if no hooks are used at all during mount, then some are used during update.
	-- Currently we will identify the update render as a mount because memoizedState == nil.
	-- This is tricky because it's valid for certain types of components (e.g. React.lazy)

	-- Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.
	-- Non-stateful hooks (e.g. context) don't get added to memoizedState,
	-- so memoizedState would be nil during updates and mounts.
	if __DEV__ then
		if current ~= nil and current.memoizedState ~= nil then
			ReactCurrentDispatcher.current = HooksDispatcherOnUpdateInDEV
		elseif hookTypesDev ~= nil then
			-- This dispatcher handles an edge case where a component is updating,
			-- but no stateful hooks have been used.
			-- We want to match the production code behavior (which will use HooksDispatcherOnMount),
			-- but with the extra DEV validation to ensure hooks ordering hasn't changed.
			-- This dispatcher does that.
			ReactCurrentDispatcher.current = HooksDispatcherOnMountWithHookTypesInDEV
		else
			ReactCurrentDispatcher.current = HooksDispatcherOnMountInDEV
		end
	else
		ReactCurrentDispatcher.current = (current == nil or current.memoizedState == nil) and HooksDispatcherOnMount
			or HooksDispatcherOnUpdate
	end

	local children = Component(props, secondArg)

	-- Check if there was a render phase update
	if didScheduleRenderPhaseUpdateDuringThisPass then
		-- Keep rendering in a loop for as long as render phase updates continue to
		-- be scheduled. Use a counter to prevent infinite loops.
		local numberOfReRenders: number = 0
		repeat
			didScheduleRenderPhaseUpdateDuringThisPass = false
			-- performance: use React 18 approach to avoid invariant in hot path
			if numberOfReRenders >= RE_RENDER_LIMIT then
				error(
					Error.new(
						"Too many re-renders. React limits the number of renders to prevent " .. "an infinite loop."
					)
				)
			end

			numberOfReRenders += 1
			-- performance: eliminate unuseful cmp in hot path, we don't currently support hot reloading
			-- if __DEV__ then
			-- Even when hot reloading, allow dependencies to stabilize
			-- after first render to prevent infinite render phase updates.
			-- ignorePreviousDependencies = false
			-- end

			-- Start over from the beginning of the list
			currentHook = nil
			workInProgressHook = nil

			-- performance TODO: return non-nil updateQueue object to the ReactUpdateQUeue pool
			workInProgress.updateQueue = nil

			if __DEV__ then
				-- Also validate hook order for cascading updates.
				hookTypesUpdateIndexDev = 0
			end

			ReactCurrentDispatcher.current = __DEV__ and HooksDispatcherOnRerenderInDEV or HooksDispatcherOnRerender

			children = Component(props, secondArg)
		until not didScheduleRenderPhaseUpdateDuringThisPass
	end

	-- We can assume the previous dispatcher is always this one, since we set it
	-- at the beginning of the render phase and there's no re-entrancy.
	ReactCurrentDispatcher.current = ContextOnlyDispatcher

	if __DEV__ then
		workInProgress._debugHookTypes = hookTypesDev
	end

	-- This check uses currentHook so that it works the same in DEV and prod bundles.
	-- hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.
	local didRenderTooFewHooks = currentHook ~= nil and currentHook.next ~= nil

	renderLanes = NoLanes
	currentlyRenderingFiber = nil :: any

	currentHook = nil
	workInProgressHook = nil

	if __DEV__ then
		currentHookNameInDev = nil
		hookTypesDev = nil
		hookTypesUpdateIndexDev = 0
	end

	didScheduleRenderPhaseUpdate = false

	-- performance: use React 18 approach that avoid invariant in hot paths
	if didRenderTooFewHooks then
		error(
			Error.new(
				"Rendered fewer hooks than expected. This may be caused by an accidental " .. "early return statement."
			)
		)
	end

	return children
end
exports.renderWithHooks = renderWithHooks

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="352">
              <Properties>
                <string name="Name">ReactFiberHostConfig</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/9ac42dd074c42b66ecc0334b75200b1d2989f892/packages/react-reconciler/src/ReactFiberHostConfig.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]

--[[ eslint-disable react-internal/invariant-args ]]

-- FIXME: Cannot carry types over via the module overriding that's in use
-- here; this is a particularly tricky case of cross-dependency type definitions
-- Use a common set of typedefs across ReactTestHostConfig and ReactRobloxHostTypes
type Object = { [string]: any }

export type Instance = Object
export type HostInstance = Instance
export type TextInstance = Instance
export type Container = Object
export type HostContext = Object
export type HydratableInstance = Instance | SuspenseInstance
export type SuspenseInstance = Object
export type PublicInstance = HostInstance

export type Type = string
export type Props = Object
export type ChildSet = {} -- void, unused
export type RendererInspectionConfig = Object

-- if _G.__NO_LOADMODULE__ then
local exports: { [string]: any } = {}
return exports
-- end

-- -- We expect that our Rollup, Jest, and Flow configurations
-- -- always shim this module with the corresponding host config
-- -- (either provided by a renderer, or a generic shim for npm).
-- --
-- -- We should never resolve to this file, but it exists to make
-- -- sure that if we *do* accidentally break the configuration,
-- -- the failure isn't silent.

-- -- deviation: FIXME (roblox): is there a way to configure luau to account for this module
-- -- being shimmed?
-- error('This module must be shimmed by a specific renderer.')
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="353">
              <Properties>
                <string name="Name">ReactFiberHostContext.new</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/17f582e0453b808860be59ed3437c6a426ae52de/packages/react-reconciler/src/ReactFiberHostContext.new.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]

-- local Packages = script.Parent.Parent

local ReactInternalTypes = require(script.Parent.ReactInternalTypes)
type Fiber = ReactInternalTypes.Fiber
local ReactFiberStack = require(script.Parent["ReactFiberStack.new"])
type StackCursor<T> = ReactFiberStack.StackCursor<T>
local ReactFiberHostConfig = require(script.Parent.ReactFiberHostConfig)
type Container = ReactFiberHostConfig.Container
type HostContext = ReactFiberHostConfig.HostContext

-- local invariant = require(Packages.Shared).invariant

local getChildHostContext = ReactFiberHostConfig.getChildHostContext
local getRootHostContext = ReactFiberHostConfig.getRootHostContext
local createCursor = ReactFiberStack.createCursor
local push = ReactFiberStack.push
local pop = ReactFiberStack.pop

-- FIXME (roblox): The upstream code here should be guaranteeing that the type
-- is always this exact object, but I think ours will match against any empty
-- table
-- declare class NoContextT {}
type NoContextT = {}
local NO_CONTEXT: NoContextT = {}

local contextStackCursor: StackCursor<HostContext | NoContextT> = createCursor(NO_CONTEXT)
local contextFiberStackCursor: StackCursor<Fiber | NoContextT> = createCursor(NO_CONTEXT)
local rootInstanceStackCursor: StackCursor<Container | NoContextT> = createCursor(NO_CONTEXT)

function requiredContext<Value>(c: Value | NoContextT): Value
	-- performance: eliminate expensive optional cmp in hot path
	-- invariant(
	--   c ~= NO_CONTEXT,
	--   "Expected host context to exist. This error is likely caused by a bug " ..
	--     "in React. Please file an issue."
	-- )
	return c :: any
end

function getRootHostContainer(): Container
	-- performance: inline requiredContext impl for hot path
	-- local rootInstance = requiredContext(rootInstanceStackCursor.current)
	-- return rootInstance
	return rootInstanceStackCursor.current
end

function pushHostContainer(fiber: Fiber, nextRootInstance: Container)
	-- Push current root instance onto the stack
	-- This allows us to reset root when portals are popped.
	push(rootInstanceStackCursor, nextRootInstance, fiber)
	-- Track the context and the Fiber that provided it.
	-- This enables us to pop only Fibers that provide unique contexts.
	push(contextFiberStackCursor, fiber, fiber)

	-- Finally, we need to push the host context to the stack.
	-- However, we can't just call getRootHostContext() and push it because
	-- we'd have a different number of entries on the stack depending on
	-- whether getRootHostContext() throws somewhere in renderer code or not.
	-- So we push an empty value first. This lets us safely unwind on errors.
	push(contextStackCursor, NO_CONTEXT, fiber)
	local nextRootContext = getRootHostContext(nextRootInstance)
	-- Now that we know this function doesn't throw, replace it.
	pop(contextStackCursor, fiber)
	push(contextStackCursor, nextRootContext, fiber)
end

function popHostContainer(fiber: Fiber)
	pop(contextStackCursor, fiber)
	pop(contextFiberStackCursor, fiber)
	pop(rootInstanceStackCursor, fiber)
end

function getHostContext(): HostContext
	-- performance: inline requiredContext impl for hot path
	-- local context = requiredContext(contextStackCursor.current)
	-- return context
	return contextStackCursor.current
end

function pushHostContext(fiber: Fiber)
	local rootInstance: Container = requiredContext(rootInstanceStackCursor.current)
	local context: HostContext = requiredContext(contextStackCursor.current)
	local nextContext = getChildHostContext(context, fiber.type, rootInstance)

	-- Don't push this Fiber's context unless it's unique.
	if context == nextContext then
		return
	end

	-- Track the context and the Fiber that provided it.
	-- This enables us to pop only Fibers that provide unique contexts.
	push(contextFiberStackCursor, fiber, fiber)
	push(contextStackCursor, nextContext, fiber)
end

function popHostContext(fiber: Fiber)
	-- Do not pop unless this Fiber provided the current context.
	-- pushHostContext() only pushes Fibers that provide unique contexts.
	if contextFiberStackCursor.current ~= fiber then
		return
	end

	pop(contextStackCursor, fiber)
	pop(contextFiberStackCursor, fiber)
end

return {
	getHostContext = getHostContext,
	getRootHostContainer = getRootHostContainer,
	popHostContainer = popHostContainer,
	popHostContext = popHostContext,
	pushHostContainer = pushHostContainer,
	pushHostContext = pushHostContext,
}
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="354">
              <Properties>
                <string name="Name">ReactFiberHotReloading.new</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/6edaf6f764f23043f0cd1c2da355b42f641afd8b/packages/react-reconciler/src/ReactFiberHotReloading.new.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]

local Packages = script.Parent.Parent

local ReactElementType = require(Packages.Shared)
-- deviation: ReactElement is defined at the top level of Shared along
-- with the rest of the ReactTypes
type ReactElement = ReactElementType.ReactElement<any, any>

local ReactInternalTypes = require(script.Parent.ReactInternalTypes)
type Fiber = ReactInternalTypes.Fiber
-- local type {FiberRoot} = require(script.Parent.ReactInternalTypes)
-- local type {Instance} = require(script.Parent.ReactFiberHostConfig)
-- local type {ReactNodeList} = require(Packages.Shared).ReactTypes

-- local {
-- 	flushSync,
-- 	scheduleUpdateOnFiber,
-- 	flushPassiveEffects,
-- } = require(script.Parent.ReactFiberWorkLoop.new)
-- local {updateContainer} = require(script.Parent.ReactFiberReconciler.new)
-- local {emptyContextObject} = require(script.Parent.ReactFiberContext.new)
-- local {SyncLane, NoTimestamp} = require(script.Parent.ReactFiberLane)
-- local {
-- 	ClassComponent,
-- 	FunctionComponent,
-- 	ForwardRef,
-- 	HostComponent,
-- 	HostPortal,
-- 	HostRoot,
-- 	MemoComponent,
-- 	SimpleMemoComponent,
-- } = require(script.Parent.ReactWorkTags)
local ReactSymbols = require(Packages.Shared).ReactSymbols
local REACT_FORWARD_REF_TYPE = ReactSymbols.REACT_FORWARD_REF_TYPE
-- 	REACT_MEMO_TYPE,
-- 	REACT_LAZY_TYPE,

export type Family = {
	current: any,
}

-- export type RefreshUpdate = {|
-- 	staleFamilies: Set<Family>,
-- 	updatedFamilies: Set<Family>,
-- |}

-- Resolves type to a family.
type RefreshHandler = (any) -> Family?

-- -- Used by React Refresh runtime through DevTools Global Hook.
-- export type SetRefreshHandler = (handler: RefreshHandler | nil) => void
-- export type ScheduleRefresh = (root: FiberRoot, update: RefreshUpdate) => void
-- export type ScheduleRoot = (root: FiberRoot, element: ReactNodeList) => void
-- export type FindHostInstancesForRefresh = (
-- 	root: FiberRoot,
-- 	families: Array<Family>,
-- ) => Set<Instance>

-- FIXME (roblox): restore type 'resolveFamily: RefreshHandler?' when type
-- refinement in Luau works better
local resolveFamily = nil
-- $FlowFixMe Flow gets confused by a WeakSet feature check below.
-- deviation: Using table instead of WeakSet
local failedBoundaries: { [number]: Fiber } | nil = nil

local exports = {}

-- export local setRefreshHandler = (handler: RefreshHandler | nil): void => {
-- 	if _G.__DEV__)
-- 		resolveFamily = handler
-- 	end
-- end

local function resolveFunctionForHotReloading(type: any): any
	if _G.__DEV__ then
		if resolveFamily == nil then
			-- Hot reloading is disabled.
			return type
		end
		local family = resolveFamily(type)
		if family == nil then
			return type
		end
		-- Use the latest known implementation.
		return family.current
	else
		return type
	end
end
exports.resolveFunctionForHotReloading = resolveFunctionForHotReloading

local function resolveClassForHotReloading(type: any): any
	-- No implementation differences.
	return resolveFunctionForHotReloading(type)
end
exports.resolveClassForHotReloading = resolveClassForHotReloading

local function resolveForwardRefForHotReloading(type: any): any
	if _G.__DEV__ then
		if resolveFamily == nil then
			-- Hot reloading is disabled.
			return type
		end
		local family = resolveFamily(type)
		if family == nil then
			-- Check if we're dealing with a real forwardRef. Don't want to crash early.
			if type ~= nil and typeof(type.render) == "function" then
				-- ForwardRef is special because its resolved .type is an object,
				-- but it's possible that we only have its inner render function in the map.
				-- If that inner render function is different, we'll build a new forwardRef type.
				local currentRender = resolveFunctionForHotReloading(type.render)
				if type.render ~= currentRender then
					local syntheticType = {
						["$$typeof"] = REACT_FORWARD_REF_TYPE,
						render = currentRender,
						-- deviation: Luau needs table initializers to be complete
						displayName = nil,
					}
					if type.displayName ~= nil then
						syntheticType.displayName = type.displayName
					end
					return syntheticType
				end
			end
			return type
		end
		-- Use the latest known implementation.
		return family.current
	else
		return type
	end
end
exports.resolveForwardRefForHotReloading = resolveForwardRefForHotReloading

exports.isCompatibleFamilyForHotReloading = function(fiber: Fiber, element: ReactElement): boolean
	warn("isCompatibleFamilyForHotReloading is stubbed (returns false)")
	return false
	-- if _G.__DEV__ then
	-- 	if resolveFamily == nil then
	-- 		-- Hot reloading is disabled.
	-- 		return false
	-- 	end

	-- 	local prevType = fiber.elementType
	-- 	local nextType = element.type

	-- 	-- If we got here, we know types aren't == equal.
	-- 	local needsCompareFamilies = false

	-- 	local $$typeofNextType =
	-- 		typeof nextType == 'table’' and nextType ~= nil
	-- 			? nextType.$$typeof
	-- 			: nil

	-- 	switch (fiber.tag)
	-- 		case ClassComponent: {
	-- 			if typeof nextType == 'function')
	-- 				needsCompareFamilies = true
	-- 			end
	-- 			break
	-- 		end
	-- 		case FunctionComponent: {
	-- 			if typeof nextType == 'function')
	-- 				needsCompareFamilies = true
	-- 			} else if $$typeofNextType == REACT_LAZY_TYPE)
	-- 				-- We don't know the inner type yet.
	-- 				-- We're going to assume that the lazy inner type is stable,
	-- 				-- and so it is sufficient to avoid reconciling it away.
	-- 				-- We're not going to unwrap or actually use the new lazy type.
	-- 				needsCompareFamilies = true
	-- 			end
	-- 			break
	-- 		end
	-- 		case ForwardRef: {
	-- 			if $$typeofNextType == REACT_FORWARD_REF_TYPE)
	-- 				needsCompareFamilies = true
	-- 			} else if $$typeofNextType == REACT_LAZY_TYPE)
	-- 				needsCompareFamilies = true
	-- 			end
	-- 			break
	-- 		end
	-- 		case MemoComponent:
	-- 		case SimpleMemoComponent: {
	-- 			if $$typeofNextType == REACT_MEMO_TYPE)
	-- 				-- TODO: if it was but can no longer be simple,
	-- 				-- we shouldn't set this.
	-- 				needsCompareFamilies = true
	-- 			} else if $$typeofNextType == REACT_LAZY_TYPE)
	-- 				needsCompareFamilies = true
	-- 			end
	-- 			break
	-- 		end
	-- 		default:
	-- 			return false
	-- 	end

	-- 	-- Check if both types have a family and it's the same one.
	-- 	if needsCompareFamilies)
	-- 		-- NOTE: memo() and forwardRef() we'll compare outer rather than inner type.
	-- 		-- This means both of them need to be registered to preserve state.
	-- 		-- If we unwrapped and compared the inner types for wrappers instead,
	-- 		-- then we would risk falsely saying two separate memo(Foo)
	-- 		-- calls are equivalent because they wrap the same Foo function.
	-- 		local prevFamily = resolveFamily(prevType)
	-- 		if prevFamily ~= undefined and prevFamily == resolveFamily(nextType))
	-- 			return true
	-- 		end
	-- 	end
	-- 	return false
	-- } else {
	-- 	return false
	-- end
end

exports.markFailedErrorBoundaryForHotReloading = function(fiber: Fiber)
	if _G.__DEV__ then
		if resolveFamily == nil then
			-- Hot reloading is disabled.
			return
		end
		-- if typeof(WeakSet) ~= 'function' then
		-- 	return
		-- end
		-- deviation: {} in place of WeakSet
		if failedBoundaries == nil then
			failedBoundaries = {}
		end
		-- FIXME: remove :: once Luau understands nil check
		table.insert(failedBoundaries :: { [number]: Fiber }, fiber)
	end
end

-- export local scheduleRefresh: ScheduleRefresh = (
-- 	root: FiberRoot,
-- 	update: RefreshUpdate,
-- ): void => {
-- 	if _G.__DEV__)
-- 		if resolveFamily == nil)
-- 			-- Hot reloading is disabled.
-- 			return
-- 		end
-- 		local {staleFamilies, updatedFamilies} = update
-- 		flushPassiveEffects()
-- 		flushSync(() => {
-- 			scheduleFibersWithFamiliesRecursively(
-- 				root.current,
-- 				updatedFamilies,
-- 				staleFamilies,
-- 			)
-- 		})
-- 	end
-- end

-- export local scheduleRoot: ScheduleRoot = (
-- 	root: FiberRoot,
-- 	element: ReactNodeList,
-- ): void => {
-- 	if _G.__DEV__)
-- 		if root.context ~= emptyContextObject)
-- 			-- Super edge case: root has a legacy _renderSubtree context
-- 			-- but we don't know the parentComponent so we can't pass it.
-- 			-- Just ignore. We'll delete this with _renderSubtree code path later.
-- 			return
-- 		end
-- 		flushPassiveEffects()
-- 		flushSync(() => {
-- 			updateContainer(element, root, nil, nil)
-- 		})
-- 	end
-- end

-- function scheduleFibersWithFamiliesRecursively(
-- 	fiber: Fiber,
-- 	updatedFamilies: Set<Family>,
-- 	staleFamilies: Set<Family>,
-- )
-- 	if _G.__DEV__)
-- 		local {alternate, child, sibling, tag, type} = fiber

-- 		local candidateType = nil
-- 		switch (tag)
-- 			case FunctionComponent:
-- 			case SimpleMemoComponent:
-- 			case ClassComponent:
-- 				candidateType = type
-- 				break
-- 			case ForwardRef:
-- 				candidateType = type.render
-- 				break
-- 			default:
-- 				break
-- 		end

-- 		if resolveFamily == nil)
-- 			throw new Error('Expected resolveFamily to be set during hot reload.')
-- 		end

-- 		local needsRender = false
-- 		local needsRemount = false
-- 		if candidateType ~= nil)
-- 			local family = resolveFamily(candidateType)
-- 			if family ~= undefined)
-- 				if staleFamilies.has(family))
-- 					needsRemount = true
-- 				} else if updatedFamilies.has(family))
-- 					if tag == ClassComponent)
-- 						needsRemount = true
-- 					} else {
-- 						needsRender = true
-- 					end
-- 				end
-- 			end
-- 		end
-- 		if failedBoundaries ~= nil)
-- 			if
-- 				failedBoundaries.has(fiber) or
-- 				(alternate ~= nil and failedBoundaries.has(alternate))
-- 			)
-- 				needsRemount = true
-- 			end
-- 		end

-- 		if needsRemount)
-- 			fiber._debugNeedsRemount = true
-- 		end
-- 		if needsRemount or needsRender)
-- 			scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp)
-- 		end
-- 		if child ~= nil and !needsRemount)
-- 			scheduleFibersWithFamiliesRecursively(
-- 				child,
-- 				updatedFamilies,
-- 				staleFamilies,
-- 			)
-- 		end
-- 		if sibling ~= nil)
-- 			scheduleFibersWithFamiliesRecursively(
-- 				sibling,
-- 				updatedFamilies,
-- 				staleFamilies,
-- 			)
-- 		end
-- 	end
-- end

-- export local findHostInstancesForRefresh: FindHostInstancesForRefresh = (
-- 	root: FiberRoot,
-- 	families: Array<Family>,
-- ): Set<Instance> => {
-- 	if _G.__DEV__)
-- 		local hostInstances = new Set()
-- 		local types = new Set(families.map(family => family.current))
-- 		findHostInstancesForMatchingFibersRecursively(
-- 			root.current,
-- 			types,
-- 			hostInstances,
-- 		)
-- 		return hostInstances
-- 	} else {
-- 		throw new Error(
-- 			'Did not expect findHostInstancesForRefresh to be called in production.',
-- 		)
-- 	end
-- end

-- function findHostInstancesForMatchingFibersRecursively(
-- 	fiber: Fiber,
-- 	types: Set<any>,
-- 	hostInstances: Set<Instance>,
-- )
-- 	if _G.__DEV__)
-- 		local {child, sibling, tag, type} = fiber

-- 		local candidateType = nil
-- 		switch (tag)
-- 			case FunctionComponent:
-- 			case SimpleMemoComponent:
-- 			case ClassComponent:
-- 				candidateType = type
-- 				break
-- 			case ForwardRef:
-- 				candidateType = type.render
-- 				break
-- 			default:
-- 				break
-- 		end

-- 		local didMatch = false
-- 		if candidateType ~= nil)
-- 			if types.has(candidateType))
-- 				didMatch = true
-- 			end
-- 		end

-- 		if didMatch)
-- 			-- We have a match. This only drills down to the closest host components.
-- 			-- There's no need to search deeper because for the purpose of giving
-- 			-- visual feedback, "flashing" outermost parent rectangles is sufficient.
-- 			findHostInstancesForFiberShallowly(fiber, hostInstances)
-- 		} else {
-- 			-- If there's no match, maybe there will be one further down in the child tree.
-- 			if child ~= nil)
-- 				findHostInstancesForMatchingFibersRecursively(
-- 					child,
-- 					types,
-- 					hostInstances,
-- 				)
-- 			end
-- 		end

-- 		if sibling ~= nil)
-- 			findHostInstancesForMatchingFibersRecursively(
-- 				sibling,
-- 				types,
-- 				hostInstances,
-- 			)
-- 		end
-- 	end
-- end

-- function findHostInstancesForFiberShallowly(
-- 	fiber: Fiber,
-- 	hostInstances: Set<Instance>,
-- ): void {
-- 	if _G.__DEV__)
-- 		local foundHostInstances = findChildHostInstancesForFiberShallowly(
-- 			fiber,
-- 			hostInstances,
-- 		)
-- 		if foundHostInstances)
-- 			return
-- 		end
-- 		-- If we didn't find any host children, fallback to closest host parent.
-- 		local node = fiber
-- 		while (true)
-- 			switch (node.tag)
-- 				case HostComponent:
-- 					hostInstances.add(node.stateNode)
-- 					return
-- 				case HostPortal:
-- 					hostInstances.add(node.stateNode.containerInfo)
-- 					return
-- 				case HostRoot:
-- 					hostInstances.add(node.stateNode.containerInfo)
-- 					return
-- 			end
-- 			if node.return == nil)
-- 				throw new Error('Expected to reach root first.')
-- 			end
-- 			node = node.return
-- 		end
-- 	end
-- end

-- function findChildHostInstancesForFiberShallowly(
-- 	fiber: Fiber,
-- 	hostInstances: Set<Instance>,
-- ): boolean {
-- 	if _G.__DEV__)
-- 		local node: Fiber = fiber
-- 		local foundHostInstances = false
-- 		while (true)
-- 			if node.tag == HostComponent)
-- 				-- We got a match.
-- 				foundHostInstances = true
-- 				hostInstances.add(node.stateNode)
-- 				-- There may still be more, so keep searching.
-- 			} else if node.child ~= nil)
-- 				node.child.return = node
-- 				node = node.child
-- 				continue
-- 			end
-- 			if node == fiber)
-- 				return foundHostInstances
-- 			end
-- 			while (node.sibling == nil)
-- 				if node.return == nil or node.return == fiber)
-- 					return foundHostInstances
-- 				end
-- 				node = node.return
-- 			end
-- 			node.sibling.return = node.return
-- 			node = node.sibling
-- 		end
-- 	end
-- 	return false
-- end

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="355">
              <Properties>
                <string name="Name">ReactFiberHydrationContext.new</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/16654436039dd8f16a63928e71081c7745872e8f/packages/react-reconciler/src/ReactFiberHydrationContext.new.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
 ]]

local Packages = script.Parent.Parent
-- NOTE: use patched console from shared
local console = require(Packages.Shared).console

-- FIXME (roblox): remove this when our unimplemented
local function unimplemented(message: string)
	print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
	print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
	print("UNIMPLEMENTED ERROR: " .. message)
	error("FIXME (roblox): " .. message .. " is unimplemented", 2)
end

local ReactInternalTypes = require(script.Parent.ReactInternalTypes)
type Fiber = ReactInternalTypes.Fiber
local ReactFiberHostConfig = require(script.Parent.ReactFiberHostConfig)
type Instance = ReactFiberHostConfig.Instance
type TextInstance = ReactFiberHostConfig.TextInstance
type HydratableInstance = ReactFiberHostConfig.HydratableInstance
type SuspenseInstance = ReactFiberHostConfig.SuspenseInstance
type Container = ReactFiberHostConfig.Container
type HostContext = ReactFiberHostConfig.HostContext

local ReactFiberSuspenseComponent = require(script.Parent["ReactFiberSuspenseComponent.new"])
type SuspenseState = ReactFiberSuspenseComponent.SuspenseState

local ReactWorkTags = require(script.Parent.ReactWorkTags)
local HostComponent = ReactWorkTags.HostComponent
local HostText = ReactWorkTags.HostText
local HostRoot = ReactWorkTags.HostRoot
local SuspenseComponent = ReactWorkTags.SuspenseComponent
local ReactFiberFlags = require(script.Parent.ReactFiberFlags)
local Placement = ReactFiberFlags.Placement
local Hydrating = ReactFiberFlags.Hydrating
-- local Deletion = ReactFiberFlags.Deletion

local invariant = require(Packages.Shared).invariant

local ReactFiber = require(script.Parent["ReactFiber.new"])
-- local createFiberFromHostInstanceForDeletion = ReactFiber.createFiberFromHostInstanceForDeletion
local createFiberFromDehydratedFragment = ReactFiber.createFiberFromDehydratedFragment

local supportsHydration = ReactFiberHostConfig.supportsHydration
local getNextHydratableSibling = ReactFiberHostConfig.getNextHydratableSibling
local getFirstHydratableChild = ReactFiberHostConfig.getFirstHydratableChild
local canHydrateInstance = ReactFiberHostConfig.canHydrateInstance
local canHydrateTextInstance = ReactFiberHostConfig.canHydrateTextInstance
local canHydrateSuspenseInstance = ReactFiberHostConfig.canHydrateSuspenseInstance
local hydrateInstance = ReactFiberHostConfig.hydrateInstance
local hydrateTextInstance = ReactFiberHostConfig.hydrateTextInstance
local hydrateSuspenseInstance = ReactFiberHostConfig.hydrateSuspenseInstance
local getNextHydratableInstanceAfterSuspenseInstance =
	ReactFiberHostConfig.getNextHydratableInstanceAfterSuspenseInstance
local didNotMatchHydratedContainerTextInstance = ReactFiberHostConfig.didNotMatchHydratedContainerTextInstance
local didNotMatchHydratedTextInstance = ReactFiberHostConfig.didNotMatchHydratedTextInstance
local shouldSetTextContent = ReactFiberHostConfig.shouldSetTextContent

-- local {
--   didNotHydrateContainerInstance,
--   didNotHydrateInstance,
--   didNotFindHydratableContainerInstance,
--   didNotFindHydratableContainerTextInstance,
--   didNotFindHydratableContainerSuspenseInstance,
--   didNotFindHydratableInstance,
--   didNotFindHydratableTextInstance,
--   didNotFindHydratableSuspenseInstance,
-- } = require(Packages../ReactFiberHostConfig'
local enableSuspenseServerRenderer = require(Packages.Shared).ReactFeatureFlags.enableSuspenseServerRenderer
local OffscreenLane = require(script.Parent.ReactFiberLane).OffscreenLane

-- The deepest Fiber on the stack involved in a hydration context.
-- This may have been an insertion or a hydration.
local hydrationParentFiber: Fiber? = nil
local nextHydratableInstance: nil | HydratableInstance = nil
local isHydrating: boolean = false

function warnIfHydrating()
	if _G.__DEV__ then
		if isHydrating then
			console.error("We should not be hydrating here. This is a bug in React. Please file a bug.")
		end
	end
end

function enterHydrationState(fiber: Fiber): boolean
	if not supportsHydration then
		return false
	end

	local parentInstance = fiber.stateNode.containerInfo
	nextHydratableInstance = getFirstHydratableChild(parentInstance)
	hydrationParentFiber = fiber
	isHydrating = true
	return true
end

function reenterHydrationStateFromDehydratedSuspenseInstance(fiber: Fiber, suspenseInstance: SuspenseInstance): boolean
	if not supportsHydration then
		return false
	end

	nextHydratableInstance = getNextHydratableSibling(suspenseInstance)
	popToNextHostParent(fiber)
	isHydrating = true
	return true
end

function deleteHydratableInstance(returnFiber: Fiber?, instance: HydratableInstance)
	unimplemented("deleteHydratableInstance")
	-- if _G.__DEV__ then
	--   switch (returnFiber.tag)
	--     case HostRoot:
	--       didNotHydrateContainerInstance(
	--         returnFiber.stateNode.containerInfo,
	--         instance,
	--       )
	--       break
	--     case HostComponent:
	--       didNotHydrateInstance(
	--         returnFiber.type,
	--         returnFiber.memoizedProps,
	--         returnFiber.stateNode,
	--         instance,
	--       )
	--       break
	-- 		end
	-- 	end

	-- local childToDelete = createFiberFromHostInstanceForDeletion()
	-- childToDelete.stateNode = instance
	-- childToDelete.return = returnFiber

	-- local deletions = returnFiber.deletions
	-- if deletions == nil)
	--   returnFiber.deletions = [childToDelete]
	--   -- TODO (effects) Rename this to better reflect its new usage (e.g. ChildDeletions)
	--   returnFiber.flags |= Deletion
	-- } else {
	--   deletions.push(childToDelete)
	-- }
end

function insertNonHydratedInstance(returnFiber: Fiber?, fiber: Fiber)
	unimplemented("insertNonHydratedInstance")
	fiber.flags = bit32.bor(bit32.band(fiber.flags, bit32.bnot(Hydrating)), Placement)
	if _G.__DEV__ then
		-- switch (returnFiber.tag)
		--   case HostRoot: {
		--     local parentContainer = returnFiber.stateNode.containerInfo
		--     switch (fiber.tag)
		--       case HostComponent:
		--         local type = fiber.type
		--         local props = fiber.pendingProps
		--         didNotFindHydratableContainerInstance(parentContainer, type, props)
		--         break
		--       case HostText:
		--         local text = fiber.pendingProps
		--         didNotFindHydratableContainerTextInstance(parentContainer, text)
		--         break
		--       case SuspenseComponent:
		--         didNotFindHydratableContainerSuspenseInstance(parentContainer)
		--         break
		--     }
		--     break
		--   }
		--   case HostComponent: {
		--     local parentType = returnFiber.type
		--     local parentProps = returnFiber.memoizedProps
		--     local parentInstance = returnFiber.stateNode
		--     switch (fiber.tag)
		--       case HostComponent:
		--         local type = fiber.type
		--         local props = fiber.pendingProps
		--         didNotFindHydratableInstance(
		--           parentType,
		--           parentProps,
		--           parentInstance,
		--           type,
		--           props,
		--         )
		--         break
		--       case HostText:
		--         local text = fiber.pendingProps
		--         didNotFindHydratableTextInstance(
		--           parentType,
		--           parentProps,
		--           parentInstance,
		--           text,
		--         )
		--         break
		--       case SuspenseComponent:
		--         didNotFindHydratableSuspenseInstance(
		--           parentType,
		--           parentProps,
		--           parentInstance,
		--         )
		--         break
		--     }
		--     break
		--   }
		--   default:
		--     return
		-- end
	end
end

function tryHydrate(fiber, nextInstance)
	if fiber.tag == HostComponent then
		local type_ = fiber.type
		local props = fiber.pendingProps
		local instance = canHydrateInstance(nextInstance, type_, props)
		if instance ~= nil then
			fiber.stateNode = instance
			return true
		end
		return false
	elseif fiber.tag == HostText then
		local text = fiber.pendingProps
		local textInstance = canHydrateTextInstance(nextInstance, text)
		if textInstance ~= nil then
			fiber.stateNode = textInstance
			return true
		end
		return false
	elseif fiber.tag == SuspenseComponent then
		if enableSuspenseServerRenderer then
			local suspenseInstance: nil | SuspenseInstance = canHydrateSuspenseInstance(nextInstance)
			if suspenseInstance ~= nil then
				local suspenseState: SuspenseState = {
					dehydrated = suspenseInstance,
					retryLane = OffscreenLane,
				}
				fiber.memoizedState = suspenseState
				-- Store the dehydrated fragment as a child fiber.
				-- This simplifies the code for getHostSibling and deleting nodes,
				-- since it doesn't have to consider all Suspense boundaries and
				-- check if they're dehydrated ones or not.
				local dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance)
				dehydratedFragment.return_ = fiber
				fiber.child = dehydratedFragment
				return true
			end
		end
		return false
	else
		return false
	end
end

function tryToClaimNextHydratableInstance(fiber: Fiber)
	if not isHydrating then
		return
	end
	local nextInstance = nextHydratableInstance
	if not nextInstance then
		-- Nothing to hydrate. Make it an insertion.
		insertNonHydratedInstance(hydrationParentFiber, fiber)
		isHydrating = false
		hydrationParentFiber = fiber
		return
	end
	-- FIXME Luau: Luau doesn't narrow based on the guard above
	local firstAttemptedInstance = nextInstance :: HydratableInstance
	if not tryHydrate(fiber, nextInstance) then
		-- If we can't hydrate this instance let's try the next one.
		-- We use this as a heuristic. It's based on intuition and not data so it
		-- might be flawed or unnecessary.
		nextInstance = getNextHydratableSibling(firstAttemptedInstance)
		if not nextInstance or not tryHydrate(fiber, nextInstance) then
			-- Nothing to hydrate. Make it an insertion.
			insertNonHydratedInstance(hydrationParentFiber, fiber)
			isHydrating = false
			hydrationParentFiber = fiber
			return
		end
		-- We matched the next one, we'll now assume that the first one was
		-- superfluous and we'll delete it. Since we can't eagerly delete it
		-- we'll have to schedule a deletion. To do that, this node needs a dummy
		-- fiber associated with it.
		deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance)
	end
	hydrationParentFiber = fiber
	nextHydratableInstance = getFirstHydratableChild(nextInstance)
end

function prepareToHydrateHostInstance(fiber: Fiber, rootContainerInstance: Container, hostContext: HostContext): boolean
	if not supportsHydration then
		invariant(
			false,
			"Expected prepareToHydrateHostInstance() to never be called. "
				.. "This error is likely caused by a bug in React. Please file an issue."
		)
	end

	local instance: Instance = fiber.stateNode
	local updatePayload =
		hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber)
	-- TODO: Type this specific to this type of component.
	fiber.updateQueue = updatePayload
	-- If the update payload indicates that there is a change or if there
	-- is a new ref we mark this as an update.
	if updatePayload ~= nil then
		return true
	end
	return false
end

function prepareToHydrateHostTextInstance(fiber: Fiber): boolean
	if not supportsHydration then
		invariant(
			false,
			"Expected prepareToHydrateHostTextInstance() to never be called. "
				.. "This error is likely caused by a bug in React. Please file an issue."
		)
	end

	local textInstance: TextInstance = fiber.stateNode
	local textContent: string = fiber.memoizedProps
	local shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber)
	if _G.__DEV__ then
		if shouldUpdate then
			-- We assume that prepareToHydrateHostTextInstance is called in a context where the
			-- hydration parent is the parent host component of this host text.
			local returnFiber = hydrationParentFiber
			if returnFiber ~= nil then
				if returnFiber.tag == HostRoot then
					local parentContainer = returnFiber.stateNode.containerInfo
					didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent)
				elseif returnFiber.tag == HostComponent then
					local parentType = returnFiber.type
					local parentProps = returnFiber.memoizedProps
					local parentInstance = returnFiber.stateNode
					didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent)
				end
			end
		end
	end
	return shouldUpdate
end

function prepareToHydrateHostSuspenseInstance(fiber: Fiber)
	if not supportsHydration then
		invariant(
			false,
			"Expected prepareToHydrateHostSuspenseInstance() to never be called. "
				.. "This error is likely caused by a bug in React. Please file an issue."
		)
	end

	local suspenseState: SuspenseState = fiber.memoizedState
	local suspenseInstance: nil | SuspenseInstance
	if suspenseState ~= nil then
		suspenseInstance = suspenseState.dehydrated
	else
		suspenseInstance = nil
	end

	invariant(
		suspenseInstance,
		"Expected to have a hydrated suspense instance. "
			.. "This error is likely caused by a bug in React. Please file an issue."
	)
	hydrateSuspenseInstance(suspenseInstance, fiber)
end

function skipPastDehydratedSuspenseInstance(fiber: Fiber): nil | HydratableInstance
	if not supportsHydration then
		invariant(
			false,
			"Expected skipPastDehydratedSuspenseInstance() to never be called. "
				.. "This error is likely caused by a bug in React. Please file an issue."
		)
	end
	local suspenseState: SuspenseState = fiber.memoizedState
	local suspenseInstance: nil | SuspenseInstance
	if suspenseState ~= nil then
		suspenseInstance = suspenseState.dehydrated
	else
		suspenseInstance = nil
	end
	invariant(
		suspenseInstance,
		"Expected to have a hydrated suspense instance. "
			.. "This error is likely caused by a bug in React. Please file an issue."
	)
	return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance)
end

function popToNextHostParent(fiber: Fiber)
	local parent = fiber.return_
	while
		parent ~= nil
		and parent.tag ~= HostComponent
		and parent.tag ~= HostRoot
		and parent.tag ~= SuspenseComponent
	do
		parent = parent.return_
	end
	hydrationParentFiber = parent
end

function popHydrationState(fiber: Fiber): boolean
	if not supportsHydration then
		return false
	end
	if fiber ~= hydrationParentFiber then
		-- We're deeper than the current hydration context, inside an inserted
		-- tree.
		return false
	end
	if not isHydrating then
		-- If we're not currently hydrating but we're in a hydration context, then
		-- we were an insertion and now need to pop up reenter hydration of our
		-- siblings.
		popToNextHostParent(fiber)
		isHydrating = true
		return false
	end

	local type_ = fiber.type

	-- If we have any remaining hydratable nodes, we need to delete them now.
	-- We only do this deeper than head and body since they tend to have random
	-- other nodes in them. We also ignore components with pure text content in
	-- side of them.
	-- TODO: Better heuristic.
	if
		fiber.tag ~= HostComponent
		or (type_ ~= "head" and type_ ~= "body" and not shouldSetTextContent(type_, fiber.memoizedProps))
	then
		local nextInstance = nextHydratableInstance
		while nextInstance do
			deleteHydratableInstance(fiber, nextInstance)
			nextInstance = getNextHydratableSibling(nextInstance)
		end
	end

	popToNextHostParent(fiber)
	if fiber.tag == SuspenseComponent then
		nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber)
	else
		if hydrationParentFiber then
			nextHydratableInstance = getNextHydratableSibling(fiber.stateNode)
		else
			nextHydratableInstance = nil
		end
	end
	return true
end

function resetHydrationState()
	if not supportsHydration then
		return
	end

	hydrationParentFiber = nil
	nextHydratableInstance = nil
	isHydrating = false
end

function getIsHydrating(): boolean
	return isHydrating
end

return {
	warnIfHydrating = warnIfHydrating,
	enterHydrationState = enterHydrationState,
	getIsHydrating = getIsHydrating,
	reenterHydrationStateFromDehydratedSuspenseInstance = reenterHydrationStateFromDehydratedSuspenseInstance,
	resetHydrationState = resetHydrationState,
	tryToClaimNextHydratableInstance = tryToClaimNextHydratableInstance,
	prepareToHydrateHostInstance = prepareToHydrateHostInstance,
	prepareToHydrateHostTextInstance = prepareToHydrateHostTextInstance,
	prepareToHydrateHostSuspenseInstance = prepareToHydrateHostSuspenseInstance,
	popHydrationState = popHydrationState,
}
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="356">
              <Properties>
                <string name="Name">ReactFiberLane</string>
                <string name="Source"><![CDATA[-- upstream: https://github.com/facebook/react/blob/6f62abb58ae46d9c88525635f1790487285666e6/packages/react-reconciler/src/ReactFiberLane.js
--!strict
--[[
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]
local Packages = script.Parent.Parent
local ReactInternalTypes = require(script.Parent.ReactInternalTypes)
type FiberRoot = ReactInternalTypes.FiberRoot
type ReactPriorityLevel = ReactInternalTypes.ReactPriorityLevel
local console = require(Packages.Shared).console

local ReactFiberSchedulerPriorities = require(script.Parent["ReactFiberSchedulerPriorities.roblox"])

-- deviation: Instead of defining these here, and and re-exporting in
-- `ReactInternalTypes`, we depend on and re-export them here to avoid cyclical
-- require issues
export type LanePriority = ReactInternalTypes.LanePriority
export type Lane = ReactInternalTypes.Lane
export type Lanes = ReactInternalTypes.Lanes
export type LaneMap<T> = ReactInternalTypes.LaneMap<T>

local invariant = require(Packages.Shared).invariant

local ImmediateSchedulerPriority = ReactFiberSchedulerPriorities.ImmediatePriority
local UserBlockingSchedulerPriority = ReactFiberSchedulerPriorities.UserBlockingPriority
local NormalSchedulerPriority = ReactFiberSchedulerPriorities.NormalPriority
local LowSchedulerPriority = ReactFiberSchedulerPriorities.LowPriority
local IdleSchedulerPriority = ReactFiberSchedulerPriorities.IdlePriority
local NoSchedulerPriority = ReactFiberSchedulerPriorities.NoPriority

local exports = {}

local SyncLanePriority: LanePriority = 15
exports.SyncLanePriority = SyncLanePriority
local SyncBatchedLanePriority: LanePriority = 14
exports.SyncBatchedLanePriority = SyncBatchedLanePriority

local InputDiscreteHydrationLanePriority: LanePriority = 13
local InputDiscreteLanePriority: LanePriority = 12
exports.InputDiscreteLanePriority = InputDiscreteLanePriority

local InputContinuousHydrationLanePriority: LanePriority = 11
local InputContinuousLanePriority: LanePriority = 10
exports.InputContinuousLanePriority = InputContinuousLanePriority

local DefaultHydrationLanePriority: LanePriority = 9
local DefaultLanePriority: LanePriority = 8
exports.DefaultLanePriority = DefaultLanePriority

local TransitionHydrationPriority: LanePriority = 7
local TransitionPriority: LanePriority = 6
exports.TransitionPriority = TransitionPriority

local RetryLanePriority: LanePriority = 5

local SelectiveHydrationLanePriority: LanePriority = 4

local IdleHydrationLanePriority: LanePriority = 3
local IdleLanePriority: LanePriority = 2

local OffscreenLanePriority: LanePriority = 1

local NoLanePriority: LanePriority = 0
exports.NoLanePriority = NoLanePriority

-- performance: only use was for loop that was manually unrolled
-- local TotalLanes = 31

local NoLanes: Lanes = --[[                             ]]
	0b0000000000000000000000000000000
exports.NoLanes = NoLanes
local NoLane: Lane = --[[                               ]]
	0b0000000000000000000000000000000
exports.NoLane = NoLane

local SyncLane: Lane = --[[                             ]]
	0b0000000000000000000000000000001
exports.SyncLane = SyncLane
local SyncBatchedLane: Lanes = --[[                     ]]
	0b0000000000000000000000000000010
exports.SyncBatchedLane = SyncBatchedLane

local InputDiscreteHydrationLane: Lane = --[[           ]]
	0b0000000000000000000000000000100
exports.InputDiscreteHydrationLane = InputDiscreteHydrationLane
local InputDiscreteLanes: Lanes = --[[                  ]]
	0b0000000000000000000000000011000

local InputContinuousHydrationLane: Lane = --[[         ]]
	0b0000000000000000000000000100000
local InputContinuousLanes: Lanes = --[[                ]]
	0b0000000000000000000000011000000

local DefaultHydrationLane: Lane = --[[                 ]]
	0b0000000000000000000000100000000
exports.DefaultHydrationLane = DefaultHydrationLane
local DefaultLanes: Lanes = --[[                        ]]
	0b0000000000000000000111000000000
exports.DefaultLanes = DefaultLanes

local TransitionHydrationLane: Lane = --[[              ]]
	0b0000000000000000001000000000000
local TransitionLanes: Lanes = --[[                     ]]
	0b0000000001111111110000000000000

local RetryLanes: Lanes = --[[                          ]]
	0b0000011110000000000000000000000
-- deviation: we expose this symbol from the module for ReactUpdateQueue.roblox tests, we don't re-export outside the package
exports.RetryLanes = RetryLanes
local SomeRetryLane: Lanes = --[[                       ]]
	0b0000010000000000000000000000000
exports.SomeRetryLane = SomeRetryLane

local SelectiveHydrationLane: Lane = --[[               ]]
	0b0000100000000000000000000000000
exports.SelectiveHydrationLane = SelectiveHydrationLane

local NonIdleLanes = --[[                               ]]
	0b0000111111111111111111111111111

local IdleHydrationLane: Lane = --[[                    ]]
	0b0001000000000000000000000000000
exports.IdleHydrationLane = IdleHydrationLane
local IdleLanes: Lanes = --[[                           ]]
	0b0110000000000000000000000000000

local OffscreenLane: Lane = --[[                        ]]
	0b1000000000000000000000000000000
exports.OffscreenLane = OffscreenLane

local NoTimestamp = -1
exports.NoTimestamp = NoTimestamp

local currentUpdateLanePriority: LanePriority = exports.NoLanePriority

exports.getCurrentUpdateLanePriority = function(): LanePriority
	return currentUpdateLanePriority
end

exports.setCurrentUpdateLanePriority = function(newLanePriority: LanePriority)
	currentUpdateLanePriority = newLanePriority
end

-- // "Registers" used to "return" multiple values
-- // Used by getHighestPriorityLanes and getNextLanes:
local return_highestLanePriority: LanePriority = exports.DefaultLanePriority

local function getHighestPriorityLanes(lanes: Lanes | Lane): Lanes
	if bit32.band(SyncLane, lanes) ~= NoLanes then
		return_highestLanePriority = SyncLanePriority
		return SyncLane
	end
	if bit32.band(SyncBatchedLane, lanes) ~= NoLanes then
		return_highestLanePriority = SyncBatchedLanePriority
		return SyncBatchedLane
	end
	if bit32.band(InputDiscreteHydrationLane, lanes) ~= NoLanes then
		return_highestLanePriority = InputDiscreteHydrationLanePriority
		return InputDiscreteHydrationLane
	end
	local inputDiscreteLanes = bit32.band(InputDiscreteLanes, lanes)
	if inputDiscreteLanes ~= NoLanes then
		return_highestLanePriority = InputDiscreteLanePriority
		return inputDiscreteLanes
	end
	if bit32.band(lanes, InputContinuousHydrationLane) ~= NoLanes then
		return_highestLanePriority = InputContinuousHydrationLanePriority
		return InputContinuousHydrationLane
	end
	local inputContinuousLanes = bit32.band(InputContinuousLanes, lanes)
	if inputContinuousLanes ~= NoLanes then
		return_highestLanePriority = InputContinuousLanePriority
		return inputContinuousLanes
	end
	if bit32.band(lanes, DefaultHydrationLane) ~= NoLanes then
		return_highestLanePriority = DefaultHydrationLanePriority
		return DefaultHydrationLane
	end
	local defaultLanes = bit32.band(DefaultLanes, lanes)
	if defaultLanes ~= NoLanes then
		return_highestLanePriority = DefaultLanePriority
		return defaultLanes
	end
	if bit32.band(lanes, TransitionHydrationLane) ~= NoLanes then
		return_highestLanePriority = TransitionHydrationPriority
		return TransitionHydrationLane
	end
	local transitionLanes = bit32.band(TransitionLanes, lanes)
	if transitionLanes ~= NoLanes then
		return_highestLanePriority = TransitionPriority
		return transitionLanes
	end
	local retryLanes = bit32.band(RetryLanes, lanes)
	if retryLanes ~= NoLanes then
		return_highestLanePriority = RetryLanePriority
		return retryLanes
	end
	if bit32.band(lanes, SelectiveHydrationLane) ~= 0 then
		return_highestLanePriority = SelectiveHydrationLanePriority
		return SelectiveHydrationLane
	end
	if bit32.band(lanes, IdleHydrationLane) ~= NoLanes then
		return_highestLanePriority = IdleHydrationLanePriority
		return IdleHydrationLane
	end
	local idleLanes = bit32.band(IdleLanes, lanes)
	if idleLanes ~= NoLanes then
		return_highestLanePriority = IdleLanePriority
		return idleLanes
	end
	if bit32.band(OffscreenLane, lanes) ~= NoLanes then
		return_highestLanePriority = OffscreenLanePriority
		return OffscreenLane
	end
	if _G.__DEV__ then
		console.error("Should have found matching lanes. This is a bug in React.")
	end
	-- // This shouldn't be reachable, but as a fallback, return the entire bitmask.
	return_highestLanePriority = DefaultLanePriority
	return lanes
end

local function schedulerPriorityToLanePriority(schedulerPriorityLevel: ReactPriorityLevel): LanePriority
	if schedulerPriorityLevel == ImmediateSchedulerPriority then
		return SyncLanePriority
	elseif schedulerPriorityLevel == UserBlockingSchedulerPriority then
		return InputContinuousLanePriority
	elseif schedulerPriorityLevel == NormalSchedulerPriority or schedulerPriorityLevel == LowSchedulerPriority then
		-- // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.
		return DefaultLanePriority
	elseif schedulerPriorityLevel == IdleSchedulerPriority then
		return IdleLanePriority
	else
		return NoLanePriority
	end
end
exports.schedulerPriorityToLanePriority = schedulerPriorityToLanePriority

local function lanePriorityToSchedulerPriority(lanePriority: LanePriority): ReactPriorityLevel
	if lanePriority == SyncLanePriority or lanePriority == SyncBatchedLanePriority then
		return ImmediateSchedulerPriority
	elseif
		lanePriority == InputDiscreteHydrationLanePriority
		or lanePriority == InputDiscreteLanePriority
		or lanePriority == InputContinuousHydrationLanePriority
		or lanePriority == InputContinuousLanePriority
	then
		return UserBlockingSchedulerPriority
	elseif
		lanePriority == DefaultHydrationLanePriority
		or lanePriority == DefaultLanePriority
		or lanePriority == TransitionHydrationPriority
		or lanePriority == TransitionPriority
		or lanePriority == SelectiveHydrationLanePriority
		or lanePriority == RetryLanePriority
	then
		return NormalSchedulerPriority
	elseif
		lanePriority == IdleHydrationLanePriority
		or lanePriority == IdleLanePriority
		or lanePriority == OffscreenLanePriority
	then
		return IdleSchedulerPriority
	elseif lanePriority == NoLanePriority then
		return NoSchedulerPriority
	else
		invariant(false, "Invalid update priority: %s. This is a bug in React.", lanePriority)
		-- deviation: luau doesn't know that invariant throws, so we error
		error("unreachable")
	end
end
exports.lanePriorityToSchedulerPriority = lanePriorityToSchedulerPriority

-- deviation: pre-declare pickArbitraryLaneIndex to keep ordering
local pickArbitraryLaneIndex, getLowestPriorityLane, getEqualOrHigherPriorityLanes

local function getNextLanes(root: FiberRoot, wipLanes: Lanes): Lanes
	-- // Early bailout if there's no pending work left.
	local pendingLanes = root.pendingLanes
	if pendingLanes == NoLanes then
		return_highestLanePriority = NoLanePriority
		return NoLanes
	end

	local nextLanes = NoLanes
	local nextLanePriority = NoLanePriority

	local expiredLanes = root.expiredLanes
	local suspendedLanes = root.suspendedLanes
	local pingedLanes = root.pingedLanes

	-- // Check if any work has expired.
	if expiredLanes ~= NoLanes then
		nextLanes = expiredLanes
		return_highestLanePriority = SyncLanePriority
		nextLanePriority = SyncLanePriority
	else
		-- // Do not work on any idle work until all the non-idle work has finished,
		-- // even if the work is suspended.
		local nonIdlePendingLanes = bit32.band(pendingLanes, NonIdleLanes)
		if nonIdlePendingLanes ~= NoLanes then
			local nonIdleUnblockedLanes = bit32.band(nonIdlePendingLanes, bit32.bnot(suspendedLanes))
			if nonIdleUnblockedLanes ~= NoLanes then
				nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes)
				nextLanePriority = return_highestLanePriority
			else
				local nonIdlePingedLanes = bit32.band(nonIdlePendingLanes, pingedLanes)
				if nonIdlePingedLanes ~= NoLanes then
					nextLanes = getHighestPriorityLanes(nonIdlePingedLanes)
					nextLanePriority = return_highestLanePriority
				end
			end
		else
			-- // The only remaining work is Idle.
			local unblockedLanes = bit32.band(pendingLanes, bit32.bnot(suspendedLanes))
			if unblockedLanes ~= NoLanes then
				nextLanes = getHighestPriorityLanes(unblockedLanes)
				nextLanePriority = return_highestLanePriority
			else
				if pingedLanes ~= NoLanes then
					nextLanes = getHighestPriorityLanes(pingedLanes)
					nextLanePriority = return_highestLanePriority
				end
			end
		end
	end

	if nextLanes == NoLanes then
		-- // This should only be reachable if we're suspended
		-- // TODO: Consider warning in this path if a fallback timer is not scheduled.
		return NoLanes
	end

	-- // If there are higher priority lanes, we'll include them even if they
	-- // are suspended.
	-- performance: inline getEqualOrHigherPriorityLanes to avoid function call overhead in hot path
	-- nextLanes = bit32.band(pendingLanes, getEqualOrHigherPriorityLanes(nextLanes))
	nextLanes = bit32.band(pendingLanes, bit32.lshift(getLowestPriorityLane(nextLanes), 1) - 1)

	-- // If we're already in the middle of a render, switching lanes will interrupt
	-- // it and we'll lose our progress. We should only do this if the new lanes are
	-- // higher priority.
	if
		wipLanes ~= NoLanes
		and wipLanes ~= nextLanes
		-- // If we already suspended with a delay, then interrupting is fine. Don't
		-- // bother waiting until the root is complocale.
		and bit32.band(wipLanes, suspendedLanes) == NoLanes
	then
		getHighestPriorityLanes(wipLanes)
		local wipLanePriority = return_highestLanePriority
		if nextLanePriority <= wipLanePriority then
			return wipLanes
		else
			return_highestLanePriority = nextLanePriority
		end
	end

	-- // Check for entangled lanes and add them to the batch.
	-- //
	-- // A lane is said to be entangled with another when it's not allowed to render
	-- // in a batch that does not also include the other lane. Typically we do this
	-- // when multiple updates have the same source, and we only want to respond to
	-- // the most recent event from that source.
	-- //
	-- // Note that we apply entanglements *after* checking for partial work above.
	-- // This means that if a lane is entangled during an interleaved event while
	-- // it's already rendering, we won't interrupt it. This is intentional, since
	-- // entanglement is usually "best effort": we'll try our best to render the
	-- // lanes in the same batch, but it's not worth throwing out partially
	-- // complocaled work in order to do it.
	-- //
	-- // For those exceptions where entanglement is semantically important, like
	-- // useMutableSource, we should ensure that there is no partial work at the
	-- // time we apply the entanglement.
	local entangledLanes = root.entangledLanes
	if entangledLanes ~= NoLanes then
		local entanglements = root.entanglements
		local lanes = bit32.band(nextLanes, entangledLanes)
		while lanes > 0 do
			local index = pickArbitraryLaneIndex(lanes)
			local lane = bit32.lshift(1, index)

			nextLanes = bit32.bor(nextLanes, entanglements[index])

			lanes = bit32.band(lanes, bit32.bnot(lane))
		end
	end

	return nextLanes
end
exports.getNextLanes = getNextLanes

local function getMostRecentEventTime(root: FiberRoot, lanes: Lanes): number
	local eventTimes = root.eventTimes

	local mostRecentEventTime = NoTimestamp
	while lanes > 0 do
		local index = pickArbitraryLaneIndex(lanes)
		local lane = bit32.lshift(1, index)

		local eventTime = eventTimes[index]
		if eventTime > mostRecentEventTime then
			mostRecentEventTime = eventTime
		end

		lanes = bit32.band(lanes, bit32.bnot(lane))
	end

	return mostRecentEventTime
end
exports.getMostRecentEventTime = getMostRecentEventTime

local function computeExpirationTime(lane: Lane, currentTime: number)
	-- // TODO: Expiration heuristic is constant per lane, so could use a map.
	getHighestPriorityLanes(lane)
	local priority = return_highestLanePriority
	if priority >= InputContinuousLanePriority then
		-- // User interactions should expire slightly more quickly.
		-- //
		-- // NOTE: This is set to the corresponding constant as in Scheduler.js. When
		-- // we made it larger, a product metric in www regressed, suggesting there's
		-- // a user interaction that's being starved by a series of synchronous
		-- // updates. If that theory is correct, the proper solution is to fix the
		-- // starvation. However, this scenario supports the idea that expiration
		-- // times are an important safeguard when starvation does happen.
		-- //
		-- // Also note that, in the case of user input specifically, this will soon no
		-- // longer be an issue because we plan to make user input synchronous by
		-- // default (until you enter `startTransition`, of course.)
		-- //
		-- // If weren't planning to make these updates synchronous soon anyway, I
		-- // would probably make this number a configurable parameter.
		return currentTime + 250
	elseif priority >= TransitionPriority then
		return currentTime + 5000
	else
		-- // Anything idle priority or lower should never expire.
		return NoTimestamp
	end
end
exports.computeExpirationTime = computeExpirationTime

local function markStarvedLanesAsExpired(root: FiberRoot, currentTime: number)
	-- // TODO: This gets called every time we yield. We can optimize by storing
	-- // the earliest expiration time on the root. Then use that to quickly bail out
	-- // of this function.

	local pendingLanes = root.pendingLanes
	local suspendedLanes = root.suspendedLanes
	local pingedLanes = root.pingedLanes
	local expirationTimes = root.expirationTimes

	-- // Iterate through the pending lanes and check if we've reached their
	-- // expiration time. If so, we'll assume the update is being starved and mark
	-- // it as expired to force it to finish.
	local lanes = pendingLanes
	while lanes > 0 do
		local index = pickArbitraryLaneIndex(lanes)
		local lane = bit32.lshift(1, index)

		local expirationTime = expirationTimes[index]
		if expirationTime == NoTimestamp then
			-- // Found a pending lane with no expiration time. If it's not suspended, or
			-- // if it's pinged, assume it's CPU-bound. Compute a new expiration time
			-- // using the current time.
			if bit32.band(lane, suspendedLanes) == NoLanes or bit32.band(lane, pingedLanes) ~= NoLanes then
				-- // Assumes timestamps are monotonically increasing.
				expirationTimes[index] = computeExpirationTime(lane, currentTime)
			end
		elseif expirationTime <= currentTime then
			-- // This lane expired
			root.expiredLanes = bit32.bor(root.expiredLanes, lane)
		end

		lanes = bit32.band(lanes, bit32.bnot(lane))
	end
end
exports.markStarvedLanesAsExpired = markStarvedLanesAsExpired

-- // This returns the highest priority pending lanes regardless of whether they
-- // are suspended.
local function getHighestPriorityPendingLanes(root: FiberRoot)
	return getHighestPriorityLanes(root.pendingLanes)
end
exports.getHighestPriorityPendingLanes = getHighestPriorityPendingLanes

local function getLanesToRetrySynchronouslyOnError(root: FiberRoot): Lanes
	local everythingButOffscreen = bit32.band(root.pendingLanes, bit32.bnot(OffscreenLane))
	if everythingButOffscreen ~= NoLanes then
		return everythingButOffscreen
	end
	if bit32.band(everythingButOffscreen, OffscreenLane) ~= 0 then
		return OffscreenLane
	end
	return NoLanes
end
exports.getLanesToRetrySynchronouslyOnError = getLanesToRetrySynchronouslyOnError

local function returnNextLanesPriority()
	return return_highestLanePriority
end
exports.returnNextLanesPriority = returnNextLanesPriority

local function includesNonIdleWork(lanes: Lanes)
	return bit32.band(lanes, NonIdleLanes) ~= NoLanes
end
exports.includesNonIdleWork = includesNonIdleWork

local function includesOnlyRetries(lanes: Lanes)
	return bit32.band(lanes, RetryLanes) == lanes
end
exports.includesOnlyRetries = includesOnlyRetries

local function includesOnlyTransitions(lanes: Lanes)
	return bit32.band(lanes, TransitionLanes) == lanes
end
exports.includesOnlyTransitions = includesOnlyTransitions

-- deviation: pre-declare pickArbitraryLane to keep ordering
local pickArbitraryLane

-- // To ensure consistency across multiple updates in the same event, this should
-- // be a pure function, so that it always returns the same lane for given inputs.
local function findUpdateLane(lanePriority: LanePriority, wipLanes: Lanes): Lane
	if lanePriority == NoLanePriority then
		-- break
	elseif lanePriority == SyncLanePriority then
		return SyncLane
	elseif lanePriority == SyncBatchedLanePriority then
		return SyncBatchedLane
	elseif lanePriority == InputDiscreteLanePriority then
		local lane = pickArbitraryLane(bit32.band(InputDiscreteLanes, bit32.bnot(wipLanes)))
		if lane == NoLane then
			-- // Shift to the next priority level
			return findUpdateLane(InputContinuousLanePriority, wipLanes)
		end
		return lane
	elseif lanePriority == InputContinuousLanePriority then
		local lane = pickArbitraryLane(bit32.band(InputContinuousLanes, bit32.bnot(wipLanes)))
		if lane == NoLane then
			-- // Shift to the next priority level
			return findUpdateLane(DefaultLanePriority, wipLanes)
		end
		return lane
	elseif lanePriority == DefaultLanePriority then
		local lane = pickArbitraryLane(bit32.band(DefaultLanes, bit32.bnot(wipLanes)))
		if lane == NoLane then
			-- // If all the default lanes are already being worked on, look for a
			-- // lane in the transition range.
			lane = pickArbitraryLane(bit32.band(TransitionLanes, bit32.bnot(wipLanes)))
			if lane == NoLane then
				-- // All the transition lanes are taken, too. This should be very
				-- // rare, but as a last resort, pick a default lane. This will have
				-- // the effect of interrupting the current work-in-progress render.
				lane = pickArbitraryLane(DefaultLanes)
			end
		end
		return lane
	elseif
		lanePriority == TransitionPriority -- // Should be handled by findTransitionLane instead
		or lanePriority == RetryLanePriority -- // Should be handled by findRetryLane instead
	then
		-- break
	elseif lanePriority == IdleLanePriority then
		local lane = pickArbitraryLane(bit32.band(IdleLanes, bit32.bnot(wipLanes)))
		if lane == NoLane then
			lane = pickArbitraryLane(IdleLanes)
		end
		return lane
	else
		-- // The remaining priorities are not valid for updates
	end
	invariant(false, "Invalid update priority: %s. This is a bug in React.", lanePriority)
	-- deviation: luau doesn't know that invariant throws, so we error
	error("unreachable")
end
exports.findUpdateLane = findUpdateLane

-- // To ensure consistency across multiple updates in the same event, this should
-- // be pure function, so that it always returns the same lane for given inputs.
local function findTransitionLane(wipLanes: Lanes, pendingLanes: Lanes): Lane
	-- // First look for lanes that are completely unclaimed, i.e. have no
	-- // pending work.
	local lane = pickArbitraryLane(bit32.band(TransitionLanes, bit32.bnot(pendingLanes)))
	if lane == NoLane then
		-- // If all lanes have pending work, look for a lane that isn't currently
		-- // being worked on.
		lane = pickArbitraryLane(bit32.band(TransitionLanes, bit32.bnot(wipLanes)))
		if lane == NoLane then
			-- // If everything is being worked on, pick any lane. This has the
			-- // effect of interrupting the current work-in-progress.
			lane = pickArbitraryLane(TransitionLanes)
		end
	end
	return lane
end
exports.findTransitionLane = findTransitionLane

-- // To ensure consistency across multiple updates in the same event, this should
-- // be pure function, so that it always returns the same lane for given inputs.
local function findRetryLane(wipLanes: Lanes): Lane
	-- // This is a fork of `findUpdateLane` designed specifically for Suspense
	-- // "retries" — a special update that attempts to flip a Suspense boundary
	-- // from its placeholder state to its primary/resolved state.
	local lane = pickArbitraryLane(bit32.band(RetryLanes, bit32.bnot(wipLanes)))
	if lane == NoLane then
		lane = pickArbitraryLane(RetryLanes)
	end
	return lane
end
exports.findRetryLane = findRetryLane

local function getHighestPriorityLane(lanes: Lanes)
	return bit32.band(lanes, -lanes)
end

function getLowestPriorityLane(lanes: Lanes): Lane
	-- // This finds the most significant non-zero bit.
	local index = 31 - bit32.countlz(lanes)
	if index < 0 then
		return NoLanes
	else
		return bit32.lshift(1, index)
	end
end

function getEqualOrHigherPriorityLanes(lanes: Lanes | Lane): Lanes
	return bit32.lshift(getLowestPriorityLane(lanes), 1) - 1
end

function pickArbitraryLane(lanes: Lanes): Lane
	-- // This wrapper function gets inlined. Only exists so to communicate that it
	-- // doesn't matter which bit is selected; you can pick any bit without
	-- // affecting the algorithms where its used. Here I'm using
	-- // getHighestPriorityLane because it requires the fewest operations.
	return getHighestPriorityLane(lanes)
end
exports.pickArbitraryLane = pickArbitraryLane

function pickArbitraryLaneIndex(lanes: Lanes)
	return 31 - bit32.countlz(lanes)
end

-- performance: all uses have been inlined
-- local function laneToIndex(lane: Lane)
-- 	return pickArbitraryLaneIndex(lane)
-- end

local function includesSomeLane(a: Lanes | Lane, b: Lanes | Lane)
	return bit32.band(a, b) ~= NoLanes
end
exports.includesSomeLane = includesSomeLane

local function isSubsetOfLanes(set: Lanes, subset: Lanes | Lane)
	return bit32.band(set, subset) == subset
end
exports.isSubsetOfLanes = isSubsetOfLanes

local function mergeLanes(a: Lanes | Lane, b: Lanes | Lane): Lanes
	return bit32.bor(a, b)
end
exports.mergeLanes = mergeLanes

local function removeLanes(set: Lanes, subset: Lanes | Lane): Lanes
	return bit32.band(set, bit32.bnot(subset))
end
exports.removeLanes = removeLanes

-- // Seems redundant, but it changes the type from a single lane (used for
-- // updates) to a group of lanes (used for flushing work).
local function laneToLanes(lane: Lane): Lanes
	return lane
end
exports.laneToLanes = laneToLanes

local function higherPriorityLane(a: Lane, b: Lane)
	-- // This works because the bit ranges decrease in priority as you go left.
	if a ~= NoLane and b ~= NoLane then
		if a < b then
			return a
		end
		return b
	else
		if a ~= NoLane then
			return a
		end
		return b
	end
end
exports.higherPriorityLane = higherPriorityLane

local function higherLanePriority(a: LanePriority, b: LanePriority): LanePriority
	if a ~= NoLanePriority and a > b then
		return a
	else
		return b
	end
end
exports.higherLanePriority = higherLanePriority

-- deviation: luau does not support generic functions yet
-- local function createLaneMap<T>(initial: T): LaneMap<T>
local function createLaneMap(initial): LaneMap<any>
	-- // Intentionally pushing one by one.
	-- // https://v8.dev/blog/elements-kinds#avoid-creating-holes
	-- performance: manually unroll this loop so the table creation is a one-shot
	--for i = 0, TotalLanes do
	local laneMap = {
		[0] = initial,
		[1] = initial,
		[2] = initial,
		[3] = initial,
		[4] = initial,
		[5] = initial,
		[6] = initial,
		[7] = initial,
		[8] = initial,
		[9] = initial,
		[10] = initial,
		[11] = initial,
		[12] = initial,
		[13] = initial,
		[14] = initial,
		[15] = initial,
		[16] = initial,
		[17] = initial,
		[18] = initial,
		[19] = initial,
		[20] = initial,
		[21] = initial,
		[22] = initial,
		[23] = initial,
		[24] = initial,
		[25] = initial,
		[26] = initial,
		[27] = initial,
		[28] = initial,
		[29] = initial,
		[30] = initial,
		[31] = initial,
		-- TODO: must be updated when TotalLanes is updated!
	}
	return laneMap
end
exports.createLaneMap = createLaneMap

local function markRootUpdated(root: FiberRoot, updateLane: Lane, eventTime: number)
	root.pendingLanes = bit32.bor(root.pendingLanes, updateLane)

	-- // TODO: Theoretically, any update to any lane can unblock any other lane. But
	-- // it's not practical to try every single possible combination. We need a
	-- // heuristic to decide which lanes to attempt to render, and in which batches.
	-- // For now, we use the same heuristic as in the old ExpirationTimes model:
	-- // retry any lane at equal or lower priority, but don't try updates at higher
	-- // priority without also including the lower priority updates. This works well
	-- // when considering updates across different priority levels, but isn't
	-- // sufficient for updates within the same priority, since we want to treat
	-- // those updates as parallel.

	-- // Unsuspend any update at equal or lower priority.
	local higherPriorityLanes = updateLane - 1 -- // Turns 0b1000 into 0b0111

	root.suspendedLanes = bit32.band(root.suspendedLanes, higherPriorityLanes)
	root.pingedLanes = bit32.band(root.pingedLanes, higherPriorityLanes)

	local eventTimes = root.eventTimes
	-- performance: inline laneToIndex in hot path
	-- local index = laneToIndex(updateLane)
	local index = 31 - bit32.countlz(updateLane)
	-- // We can always overwrite an existing timestamp because we prefer the most
	-- // recent event, and we assume time is monotonically increasing.
	eventTimes[index] = eventTime
end
exports.markRootUpdated = markRootUpdated

local function markRootSuspended(root: FiberRoot, suspendedLanes: Lanes)
	root.suspendedLanes = bit32.bor(root.suspendedLanes, suspendedLanes)
	root.pingedLanes = bit32.band(root.pingedLanes, bit32.bnot(suspendedLanes))

	-- // The suspended lanes are no longer CPU-bound. Clear their expiration times.
	local expirationTimes = root.expirationTimes
	local lanes = suspendedLanes
	while lanes > 0 do
		local index = pickArbitraryLaneIndex(lanes)
		local lane = bit32.lshift(1, index)

		expirationTimes[index] = NoTimestamp

		lanes = bit32.band(lanes, bit32.bnot(lane))
	end
end
exports.markRootSuspended = markRootSuspended

local function markRootPinged(root: FiberRoot, pingedLanes: Lanes, eventTime: number)
	root.pingedLanes = bit32.bor(root.pingedLanes, bit32.band(root.suspendedLanes, pingedLanes))
end
exports.markRootPinged = markRootPinged

local function markRootExpired(root: FiberRoot, expiredLanes: Lanes)
	root.expiredLanes = bit32.bor(root.expiredLanes, bit32.band(expiredLanes, root.pendingLanes))
end
exports.markRootExpired = markRootExpired

local function markDiscreteUpdatesExpired(root: FiberRoot)
	root.expiredLanes = bit32.bor(root.expiredLanes, bit32.band(InputDiscreteLanes, root.pendingLanes))
end
exports.markDiscreteUpdatesExpired = markDiscreteUpdatesExpired

local function hasDiscreteLanes(lanes: Lanes)
	return bit32.band(lanes, InputDiscreteLanes) ~= NoLanes
end
exports.hasDiscreteLanes = hasDiscreteLanes

local function markRootMutableRead(root: FiberRoot, updateLane: Lane)
	root.mutableReadLanes = bit32.bor(root.mutableReadLanes, bit32.band(updateLane, root.pendingLanes))
end
exports.markRootMutableRead = markRootMutableRead

local function markRootFinished(root: FiberRoot, remainingLanes: Lanes)
	local noLongerPendingLanes = bit32.band(root.pendingLanes, bit32.bnot(remainingLanes))

	root.pendingLanes = remainingLanes

	-- // Let's try everything again
	root.suspendedLanes = 0
	root.pingedLanes = 0

	root.expiredLanes = bit32.band(root.expiredLanes, remainingLanes)
	root.mutableReadLanes = bit32.band(root.mutableReadLanes, remainingLanes)

	root.entangledLanes = bit32.band(root.entangledLanes, remainingLanes)

	local entanglements = root.entanglements
	local eventTimes = root.eventTimes
	local expirationTimes = root.expirationTimes

	-- // Clear the lanes that no longer have pending work
	local lanes = noLongerPendingLanes
	while lanes > 0 do
		local index = pickArbitraryLaneIndex(lanes)
		local lane = bit32.lshift(1, index)

		entanglements[index] = NoLanes
		eventTimes[index] = NoTimestamp
		expirationTimes[index] = NoTimestamp

		lanes = bit32.band(lanes, bit32.bnot(lane))
	end
end
exports.markRootFinished = markRootFinished

local function markRootEntangled(root: FiberRoot, entangledLanes: Lanes)
	root.entangledLanes = bit32.bor(root.entangledLanes, entangledLanes)

	local entanglements = root.entanglements
	local lanes = entangledLanes
	while lanes > 0 do
		local index = pickArbitraryLaneIndex(lanes)
		local lane = bit32.lshift(1, index)

		entanglements[index] = bit32.bor(entanglements[index], entangledLanes)

		lanes = bit32.band(lanes, bit32.bnot(lane))
	end
end
exports.markRootEntangled = markRootEntangled

local function getBumpedLaneForHydration(root: FiberRoot, renderLanes: Lanes): Lane
	getHighestPriorityLanes(renderLanes)
	local highestLanePriority = return_highestLanePriority

	local lane

	if highestLanePriority == SyncLanePriority or highestLanePriority == SyncBatchedLanePriority then
		lane = NoLane
	elseif
		highestLanePriority == InputDiscreteHydrationLanePriority
		or highestLanePriority == InputDiscreteLanePriority
	then
		lane = InputDiscreteHydrationLane
	elseif
		highestLanePriority == InputContinuousHydrationLanePriority
		or highestLanePriority == InputContinuousLanePriority
	then
		lane = InputContinuousHydrationLane
	elseif highestLanePriority == DefaultHydrationLanePriority or highestLanePriority == DefaultLanePriority then
		lane = DefaultHydrationLane
	elseif highestLanePriority == TransitionHydrationPriority or highestLanePriority == TransitionPriority then
		lane = TransitionHydrationLane
	elseif highestLanePriority == RetryLanePriority then
		-- // Shouldn't be reachable under normal circumstances, so there's no
		-- // dedicated lane for retry priority. Use the one for long transitions.
		lane = TransitionHydrationLane
	elseif highestLanePriority == SelectiveHydrationLanePriority then
		lane = SelectiveHydrationLane
	elseif highestLanePriority == IdleHydrationLanePriority or highestLanePriority == IdleLanePriority then
		lane = IdleHydrationLane
	elseif highestLanePriority == OffscreenLanePriority or highestLanePriority == NoLanePriority then
		lane = NoLane
	else
		invariant(false, "Invalid lane: %s. This is a bug in React.", tostring(lane))
	end

	-- // Check if the lane we chose is suspended. If so, that indicates that we
	-- // already attempted and failed to hydrate at that level. Also check if we're
	-- // already rendering that lane, which is rare but could happen.
	if bit32.band(lane, bit32.bor(root.suspendedLanes, renderLanes)) ~= NoLane then
		-- // Give up trying to hydrate and fall back to client render.
		return NoLane
	end

	return lane
end
exports.getBumpedLaneForHydration = getBumpedLaneForHydration

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="357">
              <Properties>
                <string name="Name">ReactFiberLazyComponent.new</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/17f582e0453b808860be59ed3437c6a426ae52de/packages/react-reconciler/src/ReactFiberLazyComponent.new.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]

type Object = { [any]: any }

local function resolveDefaultProps(Component: any, baseProps: Object): Object
	-- deviation: check if type is table before checking defaultProps to prevent non-table index
	if Component and typeof(Component) == "table" and Component.defaultProps then
		-- Resolve default props. Taken from ReactElement
		-- FIXME Luau: hard cast to object until we can model this better in Luau. avoids Expected type table, got 'Object & any & any & { [any]: any }' instead
		local props = table.clone(baseProps) :: Object
		local defaultProps = Component.defaultProps
		for propName, _ in defaultProps do
			if props[propName] == nil then
				props[propName] = defaultProps[propName]
			end
		end
		return props
	end
	return baseProps
end

return {
	resolveDefaultProps = resolveDefaultProps,
}
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="358">
              <Properties>
                <string name="Name">ReactFiberNewContext.new</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/1eaafc9ade46ba708b2361b324dd907d019e3939/packages/react-reconciler/src/ReactFiberNewContext.new.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]

local Packages = script.Parent.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)
local Number = LuauPolyfill.Number
local Error = LuauPolyfill.Error

-- NOTE: use patched console from shared
local console = require(Packages.Shared).console

local ReactTypes = require(Packages.Shared)
type ReactContext<T> = ReactTypes.ReactContext<T>
local ReactInternalTypes = require(script.Parent.ReactInternalTypes)
type Fiber = ReactInternalTypes.Fiber
type ContextDependency<T> = ReactInternalTypes.ContextDependency<T>

local ReactFiberStack = require(script.Parent["ReactFiberStack.new"])
type StackCursor<T> = ReactFiberStack.StackCursor<T>
local ReactFiberLane = require(script.Parent.ReactFiberLane)
type Lanes = ReactFiberLane.Lanes
local ReactUpdateQueue = require(script.Parent["ReactUpdateQueue.new"])
type SharedQueue<T> = ReactUpdateQueue.SharedQueue<T>

local ReactFiberHostConfig = require(script.Parent.ReactFiberHostConfig)
local isPrimaryRenderer = ReactFiberHostConfig.isPrimaryRenderer
local createCursor = ReactFiberStack.createCursor
local push = ReactFiberStack.push
local pop = ReactFiberStack.pop
local MAX_SIGNED_31_BIT_INT = require(script.Parent.MaxInts).MAX_SIGNED_31_BIT_INT
local ReactWorkTags = require(script.Parent.ReactWorkTags)
local ContextProvider = ReactWorkTags.ContextProvider
local ClassComponent = ReactWorkTags.ClassComponent
-- local DehydratedFragment = ReactWorkTags.DehydratedFragment
local NoLanes = ReactFiberLane.NoLanes
local NoTimestamp = ReactFiberLane.NoTimestamp
local isSubsetOfLanes = ReactFiberLane.isSubsetOfLanes
local includesSomeLane = ReactFiberLane.includesSomeLane
local mergeLanes = ReactFiberLane.mergeLanes
local pickArbitraryLane = ReactFiberLane.pickArbitraryLane

local is = require(Packages.Shared).objectIs
local createUpdate = ReactUpdateQueue.createUpdate
local ForceUpdate = ReactUpdateQueue.ForceUpdate
-- deviation: passed in as an arg to eliminate cycle
-- local markWorkInProgressReceivedUpdate = require(script.Parent["ReactFiberBeginWork.new"]).markWorkInProgressReceivedUpdate
-- local enableSuspenseServerRenderer = require(Packages.Shared).ReactFeatureFlags.enableSuspenseServerRenderer

local exports = {}

local valueCursor: StackCursor<any> = createCursor(nil)

local rendererSigil
if _G.__DEV__ then
	-- Use this to detect multiple renderers using the same context
	rendererSigil = {}
end

local currentlyRenderingFiber: Fiber | nil = nil
local lastContextDependency: ContextDependency<any> | nil = nil
local lastContextWithAllBitsObserved: ReactContext<any> | nil = nil

local isDisallowedContextReadInDEV: boolean = false

exports.resetContextDependencies = function(): ()
	-- This is called right before React yields execution, to ensure `readContext`
	-- cannot be called outside the render phase.
	currentlyRenderingFiber = nil
	lastContextDependency = nil
	lastContextWithAllBitsObserved = nil
	if _G.__DEV__ then
		isDisallowedContextReadInDEV = false
	end
end

exports.enterDisallowedContextReadInDEV = function(): ()
	if _G.__DEV__ then
		isDisallowedContextReadInDEV = true
	end
end

exports.exitDisallowedContextReadInDEV = function(): ()
	if _G.__DEV__ then
		isDisallowedContextReadInDEV = false
	end
end

exports.pushProvider = function<T>(providerFiber: Fiber, nextValue: T): ()
	local context: ReactContext<T> = providerFiber.type._context

	if isPrimaryRenderer then
		push(valueCursor, context._currentValue, providerFiber)

		context._currentValue = nextValue
		if _G.__DEV__ then
			if context._currentRenderer ~= nil and context._currentRenderer ~= rendererSigil then
				console.error(
					"Detected multiple renderers concurrently rendering the "
						.. "same context provider. This is currently unsupported."
				)
			end
			context._currentRenderer = rendererSigil
		end
	else
		push(valueCursor, context._currentValue2, providerFiber)

		context._currentValue2 = nextValue
		if _G.__DEV__ then
			if context._currentRenderer2 ~= nil and context._currentRenderer2 ~= rendererSigil then
				console.error(
					"Detected multiple renderers concurrently rendering the "
						.. "same context provider. This is currently unsupported."
				)
			end
			context._currentRenderer2 = rendererSigil
		end
	end
end

exports.popProvider = function(providerFiber: Fiber)
	local currentValue = valueCursor.current

	pop(valueCursor, providerFiber)

	local context: ReactContext<any> = providerFiber.type._context
	if isPrimaryRenderer then
		context._currentValue = currentValue
	else
		context._currentValue2 = currentValue
	end
end

exports.calculateChangedBits = function<T>(context: ReactContext<T>, newValue: T, oldValue: T)
	if is(oldValue, newValue) then
		-- No change
		return 0
	else
		-- deviation: unravel ternary that's unsafe to translate
		local changedBits = MAX_SIGNED_31_BIT_INT
		if typeof(context._calculateChangedBits) == "function" then
			changedBits = context._calculateChangedBits(oldValue, newValue)
		end

		-- performance: eliminate nice-to-have compare in hot path that's removed in React 18
		-- if _G.__DEV__ then
		--   if bit32.band(changedBits, MAX_SIGNED_31_BIT_INT) ~= changedBits then
		--     console.error(
		--       "calculateChangedBits: Expected the return value to be a " ..
		--         "31-bit integer. Instead received: %s",
		--       changedBits
		--     )
		--   end
		-- end
		-- deviation: JS does a bitwise OR with 0 presumably to floor the value and
		-- coerce to an int; we just use math.floor
		return math.floor(changedBits)
	end
end

exports.scheduleWorkOnParentPath = function(parent: Fiber | nil, renderLanes: Lanes)
	-- Update the child lanes of all the ancestors, including the alternates.
	local node = parent
	while node ~= nil do
		local alternate = node.alternate
		if not isSubsetOfLanes(node.childLanes, renderLanes) then
			node.childLanes = mergeLanes(node.childLanes, renderLanes)
			if alternate ~= nil then
				alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes)
			end
		elseif alternate ~= nil and not isSubsetOfLanes(alternate.childLanes, renderLanes) then
			alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes)
		else
			-- Neither alternate was updated, which means the rest of the
			-- ancestor path already has sufficient priority.
			break
		end
		node = node.return_
	end
end

exports.propagateContextChange = function<T>(
	workInProgress: Fiber,
	context: ReactContext<T>,
	changedBits: number,
	renderLanes: Lanes
): ()
	local fiber = workInProgress.child
	if fiber ~= nil then
		-- Set the return pointer of the child to the work-in-progress fiber.
		fiber.return_ = workInProgress
	end
	while fiber ~= nil do
		local nextFiber

		-- Visit this fiber.
		local list = fiber.dependencies
		if list ~= nil then
			nextFiber = fiber.child

			local dependency = list.firstContext
			while dependency ~= nil do
				-- Check if the context matches.
				if
					dependency.context == context
					-- performance: unstable observedBits is removed in React 18
					and bit32.band(dependency.observedBits, changedBits) ~= 0
				then
					-- Match! Schedule an update on this fiber.

					if fiber.tag == ClassComponent then
						-- Schedule a force update on the work-in-progress.
						local update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes))
						update.tag = ForceUpdate
						-- TODO: Because we don't have a work-in-progress, this will add the
						-- update to the current fiber, too, which means it will persist even if
						-- this render is thrown away. Since it's a race condition, not sure it's
						-- worth fixing.

						-- Inlined `enqueueUpdate` to remove interleaved update check
						local updateQueue = fiber.updateQueue
						if updateQueue == nil then
							-- Only occurs if the fiber has been unmounted.
						else
							local sharedQueue: SharedQueue<any> = (updateQueue :: any).shared
							local pending = sharedQueue.pending
							if pending == nil then
								-- This is the first update. Create a circular list.
								update.next = update
							else
								update.next = pending.next
								pending.next = update
							end
							sharedQueue.pending = update
						end
					end

					-- performance: inline mergeLanes(fiber.lanes, renderLanes)
					fiber.lanes = bit32.bor(fiber.lanes, renderLanes)
					local alternate = fiber.alternate
					if alternate ~= nil then
						-- performance: inline mergeLanes(alternate.lanes, renderLanes)
						alternate.lanes = bit32.bor(alternate.lanes, renderLanes)
					end
					exports.scheduleWorkOnParentPath(fiber.return_, renderLanes)

					-- Mark the updated lanes on the list, too.
					-- performance: inline mergeLanes(list.lanes, renderLanes)
					list.lanes = bit32.bor(list.lanes, renderLanes)

					-- Since we already found a match, we can stop traversing the
					-- dependency list.
					break
				end
				dependency = dependency.next
			end
		elseif fiber.tag == ContextProvider then
			-- Don't scan deeper if this is a matching provider
			if fiber.type == workInProgress.type then
				nextFiber = nil
			else
				nextFiber = fiber.child
			end
			-- performance: eliminate always-false compare in tab switching hot path
			-- elseif
			--   enableSuspenseServerRenderer and
			--   fiber.tag == DehydratedFragment
			-- then
			--   -- If a dehydrated suspense boundary is in this subtree, we don't know
			--   -- if it will have any context consumers in it. The best we can do is
			--   -- mark it as having updates.
			--   local parentSuspense = fiber.return_
			--   if parentSuspense == nil then
			--     error("We just came from a parent so we must have had a parent. This is a bug in React.")
			--   end
			--   parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes)
			--   local alternate = parentSuspense.alternate
			--   if alternate ~= nil then
			--     alternate.lanes = mergeLanes(alternate.lanes, renderLanes)
			--   end
			--   -- This is intentionally passing this fiber as the parent
			--   -- because we want to schedule this fiber as having work
			--   -- on its children. We'll use the childLanes on
			--   -- this fiber to indicate that a context has changed.
			--   exports.scheduleWorkOnParentPath(parentSuspense, renderLanes)
			--   nextFiber = fiber.sibling
		else
			-- Traverse down.
			nextFiber = fiber.child
		end

		if nextFiber ~= nil then
			-- Set the return pointer of the child to the work-in-progress fiber.
			nextFiber.return_ = fiber
		else
			-- No child. Traverse to next sibling.
			nextFiber = fiber
			while nextFiber ~= nil do
				if nextFiber == workInProgress then
					-- We're back to the root of this subtree. Exit.
					nextFiber = nil
					break
				end
				local sibling = nextFiber.sibling
				if sibling ~= nil then
					-- Set the return pointer of the sibling to the work-in-progress fiber.
					sibling.return_ = nextFiber.return_
					nextFiber = sibling
					break
				end
				-- No more siblings. Traverse up.
				nextFiber = nextFiber.return_
			end
		end
		fiber = nextFiber
	end
end

-- deviation: third argument added to eliminate cycle
exports.prepareToReadContext = function(
	workInProgress: Fiber,
	renderLanes: Lanes,
	markWorkInProgressReceivedUpdate: () -> ()
): ()
	currentlyRenderingFiber = workInProgress
	lastContextDependency = nil
	lastContextWithAllBitsObserved = nil

	local dependencies = workInProgress.dependencies
	if dependencies ~= nil then
		local firstContext = dependencies.firstContext
		if firstContext ~= nil then
			if includesSomeLane(dependencies.lanes, renderLanes) then
				-- Context list has a pending update. Mark that this fiber performed work.
				markWorkInProgressReceivedUpdate()
			end
			-- Reset the work-in-progress list
			dependencies.firstContext = nil
		end
	end
end

exports.readContext = function<T>(context: ReactContext<T>, observedBits: nil | number | boolean): T
	if _G.__DEV__ then
		-- This warning would fire if you read context inside a Hook like useMemo.
		-- Unlike the class check below, it's not enforced in production for perf.
		if isDisallowedContextReadInDEV then
			console.error(
				"Context can only be read while React is rendering. "
					.. "In classes, you can read it in the render method or getDerivedStateFromProps. "
					.. "In function components, you can read it directly in the function body, but not "
					.. "inside Hooks like useReducer() or useMemo()."
			)
		end
	end

	if lastContextWithAllBitsObserved == context then
		-- Nothing to do. We already observe everything in this context.
	elseif observedBits == false or observedBits == 0 then
		-- Do not observe any updates.
	else
		local resolvedObservedBits -- Avoid deopting on observable arguments or heterogeneous types.
		if typeof(observedBits) ~= "number" or observedBits == Number.MAX_SAFE_INTEGER then
			-- Observe all updates.
			-- lastContextWithAllBitsObserved = ((context: any): ReactContext<mixed>)
			lastContextWithAllBitsObserved = context
			resolvedObservedBits = Number.MAX_SAFE_INTEGER
		else
			resolvedObservedBits = observedBits
		end

		local contextItem = {
			-- context: ((context: any): ReactContext<mixed>),
			context = context,
			observedBits = resolvedObservedBits,
			next = nil,
		}

		if lastContextDependency == nil then
			if currentlyRenderingFiber == nil then
				error(
					Error.new(
						"Context can only be read while React is rendering. "
							.. "In classes, you can read it in the render method or getDerivedStateFromProps. "
							.. "In function components, you can read it directly in the function body, but not "
							.. "inside Hooks like useReducer() or useMemo()."
					)
				)
			end

			-- This is the first dependency for this component. Create a new list.
			lastContextDependency = contextItem;
			(currentlyRenderingFiber :: Fiber).dependencies = {
				lanes = NoLanes,
				firstContext = contextItem,
				responders = nil,
			}
		else
			-- Append a new context item.
			(lastContextDependency :: any).next = contextItem
			lastContextDependency = contextItem
		end
	end
	return if isPrimaryRenderer then context._currentValue else context._currentValue2
end

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="359">
              <Properties>
                <string name="Name">ReactFiberOffscreenComponent</string>
                <string name="Source"><![CDATA[-- upstream: https://github.com/facebook/react/blob/1faf9e3dd5d6492f3607d5c721055819e4106bc6/packages/react-reconciler/src/ReactFiberOffscreenComponent.js
--!strict
-- /**
--  * Copyright (c) Facebook, Inc. and its affiliates.
--  *
--  * This source code is licensed under the MIT license found in the
--  * LICENSE file in the root directory of this source tree.
--  *
--  * @flow
--  */

local Packages = script.Parent.Parent
local ReactTypes = require(Packages.Shared)
type ReactNodeList = ReactTypes.ReactNodeList

local ReactFiberLanes = require(script.Parent.ReactFiberLane)
type Lanes = ReactFiberLanes.Lanes

export type OffscreenProps = {
	-- TODO: Pick an API before exposing the Offscreen type. I've chosen an enum
	-- for now, since we might have multiple variants. For example, hiding the
	-- content without changing the layout.
	--
	-- Default mode is visible. Kind of a weird default for a component
	-- called "Offscreen." Possible alt: <Visibility />?
	mode: string | nil,
	children: ReactNodeList,
}

-- We use the existence of the state object as an indicator that the component
-- is hidden.
export type OffscreenState = {
	-- TODO: This doesn't do anything, yet. It's always NoLanes. But eventually it
	-- will represent the pending work that must be included in the render in
	-- order to unhide the component.
	baseLanes: Lanes,
}

return {}
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="360">
              <Properties>
                <string name="Name">ReactFiberReconciler</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/faa697f4f9afe9f1c98e315b2a9e70f5a74a7a74/packages/react-reconciler/src/ReactFiberReconciler.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
 ]]

-- deviation: old version of reconciler not ported
return require(script.Parent["ReactFiberReconciler.new"])
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="361">
              <Properties>
                <string name="Name">ReactFiberReconciler.new</string>
                <string name="Source"><![CDATA[-- upstream: https://github.com/facebook/react/blob/50d9451f320a9aaf94304209193562cc385567d8/packages/react-reconciler/src/ReactFiberReconciler.new.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]

local __DEV__ = _G.__DEV__ :: boolean
local Packages = script.Parent.Parent
local flowtypes = require(Packages.Shared)
type React_Component<Props, State> = flowtypes.React_Component<Props, State>
local LuauPolyfill = require(Packages.LuauPolyfill)
local Array = LuauPolyfill.Array
local Object = LuauPolyfill.Object
type Function = (...any) -> ...any

-- NOTE: use patched console from shared
local console = require(Packages.Shared).console

type Object = { [string]: any }
type Array<T> = { [number]: T }

local ReactInternalTypes = require(script.Parent.ReactInternalTypes)
type Fiber = ReactInternalTypes.Fiber
type SuspenseHydrationCallbacks = ReactInternalTypes.SuspenseHydrationCallbacks
type FiberRoot = ReactInternalTypes.FiberRoot

local ReactRootTags = require(script.Parent.ReactRootTags)
type RootTag = ReactRootTags.RootTag

local ReactFiberFlags = require(script.Parent.ReactFiberFlags)

local ReactFiberHostConfig = require(script.Parent.ReactFiberHostConfig)
type Instance = ReactFiberHostConfig.Instance
type TextInstance = ReactFiberHostConfig.TextInstance
type Container = ReactFiberHostConfig.Container
type PublicInstance = ReactFiberHostConfig.PublicInstance
type RendererInspectionConfig = ReactFiberHostConfig.RendererInspectionConfig

local ReactWorkTags = require(script.Parent.ReactWorkTags)
local FundamentalComponent = ReactWorkTags.FundamentalComponent
local ReactTypes = require(Packages.Shared)
type ReactNodeList = ReactTypes.ReactNodeList

local ReactFiberLane = require(script.Parent.ReactFiberLane)
type Lane = ReactFiberLane.Lane
type LanePriority = ReactFiberLane.LanePriority
local ReactFiberSuspenseComponent = require(script.Parent["ReactFiberSuspenseComponent.new"])
type SuspenseState = ReactFiberSuspenseComponent.SuspenseState

local ReactFiberTreeReflection = require(script.Parent.ReactFiberTreeReflection)
local findCurrentHostFiber = ReactFiberTreeReflection.findCurrentHostFiber
local findCurrentHostFiberWithNoPortals = ReactFiberTreeReflection.findCurrentHostFiberWithNoPortals
local getInstance = require(Packages.Shared).ReactInstanceMap.get
local HostComponent = ReactWorkTags.HostComponent
local ClassComponent = ReactWorkTags.ClassComponent
local HostRoot = ReactWorkTags.HostRoot
local SuspenseComponent = ReactWorkTags.SuspenseComponent
local getComponentName = require(Packages.Shared).getComponentName
local invariant = require(Packages.Shared).invariant
local describeError = require(Packages.Shared).describeError
local enableSchedulingProfiler = require(Packages.Shared).ReactFeatureFlags.enableSchedulingProfiler
local ReactSharedInternals = require(Packages.Shared).ReactSharedInternals
local getPublicInstance = require(script.Parent.ReactFiberHostConfig).getPublicInstance
local ReactFiberContext = require(script.Parent["ReactFiberContext.new"])
local findCurrentUnmaskedContext = ReactFiberContext.findCurrentUnmaskedContext
local processChildContext = ReactFiberContext.processChildContext
local emptyContextObject = ReactFiberContext.emptyContextObject
local isLegacyContextProvider = ReactFiberContext.isContextProvider
local ReactFiberRoot = require(script.Parent["ReactFiberRoot.new"])
local createFiberRoot = ReactFiberRoot.createFiberRoot
local ReactFiberDevToolsHook = require(script.Parent["ReactFiberDevToolsHook.new"])
local injectInternals = ReactFiberDevToolsHook.injectInternals
local onScheduleRoot = ReactFiberDevToolsHook.onScheduleRoot
local ReactFiberWorkLoop = require(script.Parent["ReactFiberWorkLoop.new"]) :: any
local requestEventTime = ReactFiberWorkLoop.requestEventTime
local requestUpdateLane = ReactFiberWorkLoop.requestUpdateLane
local scheduleUpdateOnFiber = ReactFiberWorkLoop.scheduleUpdateOnFiber
local flushRoot = ReactFiberWorkLoop.flushRoot
local batchedEventUpdates = ReactFiberWorkLoop.batchedEventUpdates
local batchedUpdates = ReactFiberWorkLoop.batchedUpdates
local unbatchedUpdates = ReactFiberWorkLoop.unbatchedUpdates
local flushSync = ReactFiberWorkLoop.flushSync
local flushControlled = ReactFiberWorkLoop.flushControlled
local deferredUpdates = ReactFiberWorkLoop.deferredUpdates
local discreteUpdates = ReactFiberWorkLoop.discreteUpdates
local flushDiscreteUpdates = ReactFiberWorkLoop.flushDiscreteUpdates
local flushPassiveEffects = ReactFiberWorkLoop.flushPassiveEffects
local warnIfNotScopedWithMatchingAct = ReactFiberWorkLoop.warnIfNotScopedWithMatchingAct
local warnIfUnmockedScheduler = ReactFiberWorkLoop.warnIfUnmockedScheduler
local IsThisRendererActing = ReactFiberWorkLoop.IsThisRendererActing
local act = ReactFiberWorkLoop.act :: (() -> ()) -> ()
local ReactUpdateQueue = require(script.Parent["ReactUpdateQueue.new"])
local createUpdate = ReactUpdateQueue.createUpdate
local enqueueUpdate = ReactUpdateQueue.enqueueUpdate
local ReactCurrentFiber = require(script.Parent.ReactCurrentFiber)
local ReactCurrentFiberIsRendering = ReactCurrentFiber.isRendering
-- deviation: this property would be captured as values instead of bound
-- local ReactCurrentFiber.current = ReactCurrentFiber.current
local resetCurrentDebugFiberInDEV = ReactCurrentFiber.resetCurrentFiber
local setCurrentDebugFiberInDEV = ReactCurrentFiber.setCurrentFiber
local ReactTypeOfMode = require(script.Parent.ReactTypeOfMode)
local StrictMode = ReactTypeOfMode.StrictMode
local SyncLane = ReactFiberLane.SyncLane
local InputDiscreteHydrationLane = ReactFiberLane.InputDiscreteHydrationLane
local SelectiveHydrationLane = ReactFiberLane.SelectiveHydrationLane
local NoTimestamp = ReactFiberLane.NoTimestamp
local getHighestPriorityPendingLanes = ReactFiberLane.getHighestPriorityPendingLanes
local higherPriorityLane = ReactFiberLane.higherPriorityLane
local getCurrentUpdateLanePriority = ReactFiberLane.getCurrentUpdateLanePriority
local setCurrentUpdateLanePriority = ReactFiberLane.setCurrentUpdateLanePriority
-- local ReactFiberHotReloading = require(script.Parent["ReactFiberHotReloading.new"])
-- local scheduleRefresh = ReactFiberHotReloading.scheduleRefresh
-- local scheduleRoot = ReactFiberHotReloading.scheduleRoot
-- local setRefreshHandler = ReactFiberHotReloading.setRefreshHandler
-- local findHostInstancesForRefresh = ReactFiberHotReloading.findHostInstancesForRefresh
local markRenderScheduled = require(script.Parent.SchedulingProfiler).markRenderScheduled

local exports = {}

-- deviation: explicitly export internal type definitions used by the noop and test renderers
exports.ReactRootTags = ReactRootTags
-- deviation: explicitly export internal type definitions used by the test renderer
exports.ReactWorkTags = ReactWorkTags

-- deviation: explicitly export internal type definitions used by the dev tools
exports.ReactTypeOfMode = ReactTypeOfMode
exports.ReactFiberFlags = ReactFiberFlags
exports.getNearestMountedFiber = ReactFiberTreeReflection.getNearestMountedFiber
exports.findCurrentFiberUsingSlowPath = ReactFiberTreeReflection.findCurrentFiberUsingSlowPath

-- exports.registerMutableSourceForHydration = require(script.Parent["ReactMutableSource.new"]).registerMutableSourceForHydration
exports.createPortal = require(script.Parent.ReactPortal).createPortal
-- local ReactTestSelectors = require(script.Parent.ReactTestSelectors)
-- exports.createComponentSelector = ReactTestSelectors.createComponentSelector
-- FIXME: Should we deviate and fix this typo?
-- exports.createHasPsuedoClassSelector = ReactTestSelectors.createHasPsuedoClassSelector
-- exports.createRoleSelector = ReactTestSelectors.createRoleSelector
-- exports.createTestNameSelector = ReactTestSelectors.createTestNameSelector
-- exports.createTextSelector = ReactTestSelectors.createTextSelector
-- exports.getFindAllNodesFailureDescription = ReactTestSelectors.getFindAllNodesFailureDescription
-- exports.findAllNodes = ReactTestSelectors.findAllNodes
-- exports.findBoundingRects = ReactTestSelectors.findBoundingRects
-- exports.focusWithin = ReactTestSelectors.focusWithin
-- exports.observeVisibleRects = ReactTestSelectors.observeVisibleRects

type OpaqueRoot = FiberRoot

-- 0 is PROD, 1 is DEV.
-- Might add PROFILE later.
type BundleType = number

type DevToolsConfig = {
	bundleType: BundleType,
	version: string,
	rendererPackageName: string,
	-- NOTE: this actually *does* depend on Fiber internal fields.
	-- Used by "inspect clicked DOM element" in React DevTools.
	findFiberByHostInstance: ((Instance | TextInstance) -> Fiber)?,
	rendererConfig: RendererInspectionConfig?,
}

local didWarnAboutNestedUpdates
local didWarnAboutFindNodeInStrictMode

if __DEV__ then
	didWarnAboutNestedUpdates = false
	didWarnAboutFindNodeInStrictMode = {}
end

local function getContextForSubtree(parentComponent: any?): Object
	if not parentComponent then
		return emptyContextObject
	end

	local fiber = getInstance(parentComponent)
	local parentContext = findCurrentUnmaskedContext(fiber)

	if fiber.tag == ClassComponent then
		local Component = fiber.type
		if isLegacyContextProvider(Component) then
			return processChildContext(fiber, Component, parentContext)
		end
	end

	return parentContext
end

local function findHostInstance(component: Object): PublicInstance | nil
	local fiber = getInstance(component)
	if fiber == nil then
		if typeof(component.render) == "function" then
			invariant(false, "Unable to find node on an unmounted component.")
		else
			invariant(
				false,
				"Argument appears to not be a ReactComponent. Keys: %s",
				-- deviation: explicitly coerce the array of strings into a string
				table.concat(Object.keys(component))
			)
		end
	end
	local hostFiber = findCurrentHostFiber(fiber)
	if hostFiber == nil then
		return nil
	end
	return hostFiber.stateNode
end

local function findHostInstanceWithWarning(component: Object, methodName: string): PublicInstance | nil
	if __DEV__ then
		local fiber = getInstance(component)
		if fiber == nil then
			if typeof(component.render) == "function" then
				invariant(false, "Unable to find node on an unmounted component.")
			else
				invariant(
					false,
					"Argument appears to not be a ReactComponent. Keys: %s",
					-- deviation: explicitly convert array into string
					table.concat(Object.keys(component))
				)
			end
		end
		local hostFiber = findCurrentHostFiber(fiber)
		if hostFiber == nil then
			return nil
		end
		if bit32.band(hostFiber.mode, StrictMode) ~= 0 then
			local componentName = getComponentName(fiber.type) or "Component"
			if not didWarnAboutFindNodeInStrictMode[componentName] then
				didWarnAboutFindNodeInStrictMode[componentName] = true

				local previousFiber = ReactCurrentFiber.current
				local ok, result = xpcall(function()
					setCurrentDebugFiberInDEV(hostFiber)
					if bit32.band(fiber.mode, StrictMode) ~= 0 then
						console.error(
							"%s is deprecated in StrictMode. "
								.. "%s was passed an instance of %s which is inside StrictMode. "
								.. "Instead, add a ref directly to the element you want to reference. "
								.. "Learn more about using refs safely here: "
								.. "https://reactjs.org/link/strict-mode-find-node",
							methodName,
							methodName,
							componentName
						)
					else
						console.error(
							"%s is deprecated in StrictMode. "
								.. "%s was passed an instance of %s which renders StrictMode children. "
								.. "Instead, add a ref directly to the element you want to reference. "
								.. "Learn more about using refs safely here: "
								.. "https://reactjs.org/link/strict-mode-find-node",
							methodName,
							methodName,
							componentName
						)
					end
				end, describeError)

				-- Ideally this should reset to previous but this shouldn't be called in
				-- render and there's another warning for that anyway.
				if previousFiber then
					setCurrentDebugFiberInDEV(previousFiber)
				else
					resetCurrentDebugFiberInDEV()
				end

				if not ok then
					error(result)
				end
			end
		end
		return hostFiber.stateNode
	end
	return findHostInstance(component)
end

exports.createContainer = function(
	containerInfo: Container,
	tag: RootTag,
	hydrate: boolean,
	hydrationCallbacks: nil | SuspenseHydrationCallbacks
): OpaqueRoot
	return createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks)
end

exports.updateContainer = function(
	element: ReactNodeList,
	container: OpaqueRoot,
	parentComponent,
	callback: Function?
): Lane
	if __DEV__ then
		onScheduleRoot(container, element)
	end
	local current = container.current
	local eventTime = requestEventTime()
	if __DEV__ then
		-- deviation: use TestEZ's __TESTEZ_RUNNING_TEST__ (no jest global)
		-- $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
		if _G.__TESTEZ_RUNNING_TEST__ then
			warnIfUnmockedScheduler(current)
			warnIfNotScopedWithMatchingAct(current)
		end
	end
	local lane = requestUpdateLane(current)

	if enableSchedulingProfiler then
		markRenderScheduled(lane)
	end

	local context = getContextForSubtree(parentComponent)
	if container.context == nil then
		container.context = context
	else
		container.pendingContext = context
	end

	if __DEV__ then
		if ReactCurrentFiberIsRendering and ReactCurrentFiber.current ~= nil and not didWarnAboutNestedUpdates then
			didWarnAboutNestedUpdates = true
			console.error(
				"Render methods should be a pure function of props and state; "
					.. "triggering nested component updates from render is not allowed. "
					.. "If necessary, trigger nested updates in componentDidUpdate.\n\n"
					.. "Check the render method of %s.",
				getComponentName((ReactCurrentFiber.current :: any).type) or "Unknown"
			)
		end
	end

	local update = createUpdate(eventTime, lane)
	-- deviation: We need to set element to a placeholder so that it gets
	-- removed from previous state when merging tables
	if element == nil then
		element = Object.None
	end
	-- Caution: React DevTools currently depends on this property
	-- being called "element".
	update.payload = {
		element = element,
	}

	-- deviation: no undefined, so not needed
	-- callback = callback == undefined ? nil : callback
	if callback ~= nil then
		if __DEV__ then
			if typeof(callback) ~= "function" then
				console.error(
					"render(...): Expected the last optional `callback` argument to be a "
						.. "function. Instead received: %s.",
					tostring(callback)
				)
			end
		end
		update.callback = callback
	end

	enqueueUpdate(current, update)
	scheduleUpdateOnFiber(current, lane, eventTime)

	return lane
end

-- FIXME: WIP
exports.batchedEventUpdates = batchedEventUpdates
exports.batchedUpdates = batchedUpdates
exports.unbatchedUpdates = unbatchedUpdates
exports.deferredUpdates = deferredUpdates
exports.discreteUpdates = discreteUpdates
exports.flushDiscreteUpdates = flushDiscreteUpdates
exports.flushControlled = flushControlled
exports.flushSync = flushSync
exports.flushPassiveEffects = flushPassiveEffects
exports.IsThisRendererActing = IsThisRendererActing
exports.act = act

exports.getPublicRootInstance = function(container: OpaqueRoot): React_Component<any, any> | PublicInstance | nil
	local containerFiber = container.current
	if not containerFiber.child then
		return nil
	end
	if containerFiber.child.tag == HostComponent then
		return getPublicInstance(containerFiber.child.stateNode)
	else
		return containerFiber.child.stateNode
	end
end

-- deviation: Declare function ahead of use
local markRetryLaneIfNotHydrated

exports.attemptSynchronousHydration = function(fiber: Fiber)
	if fiber.tag == HostRoot then
		local root: FiberRoot = fiber.stateNode
		if root.hydrate then
			-- Flush the first scheduled "update".
			local lanes = getHighestPriorityPendingLanes(root)
			flushRoot(root, lanes)
		end
	elseif fiber.tag == SuspenseComponent then
		local eventTime = requestEventTime()
		flushSync(function()
			return scheduleUpdateOnFiber(fiber, SyncLane, eventTime)
		end)
		-- If we're still blocked after this, we need to increase
		-- the priority of any promises resolving within this
		-- boundary so that they next attempt also has higher pri.
		local retryLane = InputDiscreteHydrationLane
		markRetryLaneIfNotHydrated(fiber, retryLane)
	end
end

local function markRetryLaneImpl(fiber: Fiber, retryLane: Lane)
	local suspenseState: SuspenseState? = fiber.memoizedState
	if suspenseState then
		if suspenseState ~= nil and suspenseState.dehydrated ~= nil then
			suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane)
		end
	end
end

-- Increases the priority of thennables when they resolve within this boundary.
markRetryLaneIfNotHydrated = function(fiber: Fiber, retryLane: Lane)
	markRetryLaneImpl(fiber, retryLane)
	-- TODO: grab local for this since Luau can't deal with nested type narrowing
	local alternate = fiber.alternate
	if alternate then
		markRetryLaneImpl(alternate, retryLane)
	end
end

exports.attemptUserBlockingHydration = function(fiber: Fiber)
	if fiber.tag ~= SuspenseComponent then
		-- We ignore HostRoots here because we can't increase
		-- their priority and they should not suspend on I/O,
		-- since you have to wrap anything that might suspend in
		-- Suspense.
		return
	end
	local eventTime = requestEventTime()
	local lane = InputDiscreteHydrationLane
	scheduleUpdateOnFiber(fiber, lane, eventTime)
	markRetryLaneIfNotHydrated(fiber, lane)
end

exports.attemptContinuousHydration = function(fiber: Fiber)
	if fiber.tag ~= SuspenseComponent then
		-- We ignore HostRoots here because we can't increase
		-- their priority and they should not suspend on I/O,
		-- since you have to wrap anything that might suspend in
		-- Suspense.
		return
	end
	local eventTime = requestEventTime()
	local lane = SelectiveHydrationLane
	scheduleUpdateOnFiber(fiber, lane, eventTime)
	markRetryLaneIfNotHydrated(fiber, lane)
end

exports.attemptHydrationAtCurrentPriority = function(fiber: Fiber)
	if fiber.tag ~= SuspenseComponent then
		-- We ignore HostRoots here because we can't increase
		-- their priority other than synchronously flush it.
		return
	end
	local eventTime = requestEventTime()
	local lane = requestUpdateLane(fiber)
	scheduleUpdateOnFiber(fiber, lane, eventTime)
	markRetryLaneIfNotHydrated(fiber, lane)
end

exports.runWithPriority = function<T>(priority: LanePriority, fn: () -> T): T
	local previousPriority = getCurrentUpdateLanePriority()
	-- performance: hoist non-throwable out of try{} to eliminate anon function
	setCurrentUpdateLanePriority(priority)
	local ok, result = xpcall(fn, describeError)
	setCurrentUpdateLanePriority(previousPriority)
	if not ok then
		error(result)
	end
	return result
end

exports.getCurrentUpdateLanePriority = getCurrentUpdateLanePriority

exports.findHostInstance = findHostInstance

exports.findHostInstanceWithWarning = findHostInstanceWithWarning

exports.findHostInstanceWithNoPortals = function(fiber: Fiber): PublicInstance?
	local hostFiber = findCurrentHostFiberWithNoPortals(fiber)
	if hostFiber == nil then
		return nil
	end
	if hostFiber.tag == FundamentalComponent then
		return hostFiber.stateNode.instance
	end
	return hostFiber.stateNode
end

local function shouldSuspendImpl(fiber)
	return false
end

exports.shouldSuspend = function(fiber: Fiber): boolean
	return shouldSuspendImpl(fiber)
end

local overrideHookState = nil
local overrideHookStateDeletePath = nil
local overrideHookStateRenamePath = nil
local overrideProps = nil
local overridePropsDeletePath = nil
local overridePropsRenamePath = nil
local scheduleUpdate = nil
local setSuspenseHandler = nil

if __DEV__ then
	-- deviation: FIXME: obj: `Object | Array<any>`, narrowing not possible with `isArray`
	local function copyWithDeleteImpl(obj: Object, path: Array<string | number>, index: number)
		local key = path[index]
		local updated
		if Array.isArray(obj) then
			updated = Array.slice(obj)
		else
			updated = table.clone(obj)
		end
		if index + 1 == #path then
			if Array.isArray(updated) then
				-- Narrow type
				local updatedIndex: number = key
				Array.splice(updated, updatedIndex, 1)
			else
				updated[key] = nil
			end
			return updated
		end
		-- $FlowFixMe number or string is fine here
		updated[key] = copyWithDeleteImpl(obj[key], path, index + 1)
		return updated
	end

	-- deviation: FIXME: obj: `Object | Array<any>`, narrowing not possible with `isArray`
	local function copyWithDelete(obj: Object, path: Array<string | number>): Object | Array<any>
		return copyWithDeleteImpl(obj, path, 0)
	end

	-- deviation: FIXME: obj: `Object | Array<any>`, narrowing not possible with `isArray`
	local function copyWithRenameImpl(
		obj: Object,
		oldPath: Array<string | number>,
		newPath: Array<string | number>,
		index: number
	)
		local oldKey = oldPath[index]
		local updated
		if Array.isArray(obj) then
			updated = Array.slice(obj)
		else
			updated = table.clone(obj)
		end
		if index + 1 == #oldPath then
			local newKey = newPath[index]
			-- $FlowFixMe number or string is fine here
			updated[newKey] = updated[oldKey]
			if Array.isArray(updated) then
				Array.splice(updated, oldKey, 1)
			else
				updated[oldKey] = nil
			end
		else
			-- $FlowFixMe number or string is fine here
			updated[oldKey] = copyWithRenameImpl(
				-- $FlowFixMe number or string is fine here
				obj[oldKey],
				oldPath,
				newPath,
				index + 1
			)
		end
		return updated
	end

	-- deviation: FIXME: obj: `Object | Array<any>`, narrowing not possible with `isArray`
	local function copyWithRename(
		obj: Object,
		oldPath: Array<string | number>,
		newPath: Array<string | number>
	): Object | Array<any> | nil
		if #oldPath ~= #newPath then
			console.warn("copyWithRename() expects paths of the same length")
			return nil
		else
			for i = 1, #newPath do
				if oldPath[i] ~= newPath[i] then
					console.warn("copyWithRename() expects paths to be the same except for the deepest key")
					return nil
				end
			end
		end
		return copyWithRenameImpl(obj, oldPath, newPath, 0)
	end

	-- deviation: FIXME: obj: `Object | Array<any>`, narrowing not possible with `isArray`
	local function copyWithSetImpl(obj: Object, path: Array<string | number>, index: number, value: any)
		if index >= (#path + 1) then
			return value
		end
		local key = path[index]
		local updated
		if Array.isArray(obj) then
			updated = Array.slice(obj)
		else
			updated = table.clone(obj)
		end
		-- $FlowFixMe number or string is fine here
		updated[key] = copyWithSetImpl(obj[key], path, index + 2, value)
		return updated
	end

	-- deviation: FIXME: obj: `Object | Array<any>`, narrowing not possible with `isArray`
	local function copyWithSet(obj: Object, path: Array<string | number>, value: any): Object | Array<any>
		return copyWithSetImpl(obj, path, 1, value)
	end

	local function findHook(fiber: Fiber, id: number)
		-- For now, the "id" of stateful hooks is just the stateful hook index.
		-- This may change in the future with e.g. nested hooks.
		local currentHook = fiber.memoizedState
		while currentHook ~= nil and id > 1 do
			currentHook = currentHook.next
			id -= 1
		end
		return currentHook
	end

	-- Support DevTools editable values for useState and useReducer.
	overrideHookState = function(fiber: Fiber, id: number, path: Array<string | number>, value: any)
		local hook = findHook(fiber, id)
		if hook ~= nil then
			local newState = copyWithSet(hook.memoizedState, path, value)
			hook.memoizedState = newState
			hook.baseState = newState

			-- We aren't actually adding an update to the queue,
			-- because there is no update we can add for useReducer hooks that won't trigger an error.
			-- (There's no appropriate action type for DevTools overrides.)
			-- As a result though, React will see the scheduled update as a noop and bailout.
			-- Shallow cloning props works as a workaround for now to bypass the bailout check.
			fiber.memoizedProps = table.clone(fiber.memoizedProps)

			scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp)
		end
	end
	overrideHookStateDeletePath = function(fiber: Fiber, id: number, path: Array<string | number>)
		local hook = findHook(fiber, id)
		if hook ~= nil then
			local newState = copyWithDelete(hook.memoizedState, path)
			hook.memoizedState = newState
			hook.baseState = newState

			-- We aren't actually adding an update to the queue,
			-- because there is no update we can add for useReducer hooks that won't trigger an error.
			-- (There's no appropriate action type for DevTools overrides.)
			-- As a result though, React will see the scheduled update as a noop and bailout.
			-- Shallow cloning props works as a workaround for now to bypass the bailout check.
			fiber.memoizedProps = table.clone(fiber.memoizedProps)

			scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp)
		end
	end
	overrideHookStateRenamePath = function(
		fiber: Fiber,
		id: number,
		oldPath: Array<string | number>,
		newPath: Array<string | number>
	)
		local hook = findHook(fiber, id)
		if hook ~= nil then
			local newState = copyWithRename(hook.memoizedState, oldPath, newPath)
			hook.memoizedState = newState
			hook.baseState = newState

			-- We aren't actually adding an update to the queue,
			-- because there is no update we can add for useReducer hooks that won't trigger an error.
			-- (There's no appropriate action type for DevTools overrides.)
			-- As a result though, React will see the scheduled update as a noop and bailout.
			-- Shallow cloning props works as a workaround for now to bypass the bailout check.
			fiber.memoizedProps = table.clone(fiber.memoizedProps)

			scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp)
		end
	end

	-- Support DevTools props for function components, forwardRef, memo, host components, etc.
	overrideProps = function(fiber: Fiber, path: Array<string | number>, value: any)
		fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value)
		-- TODO: grab local for this since Luau can't deal with nested type narrowing
		local alternate = fiber.alternate
		if alternate then
			alternate.pendingProps = fiber.pendingProps
		end
		scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp)
	end
	overridePropsDeletePath = function(fiber: Fiber, path: Array<string | number>)
		fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path)
		-- TODO: grab local for this since Luau can't deal with nested type narrowing
		local alternate = fiber.alternate
		if alternate then
			alternate.pendingProps = fiber.pendingProps
		end
		scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp)
	end
	overridePropsRenamePath = function(fiber: Fiber, oldPath: Array<string | number>, newPath: Array<string | number>)
		fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath)
		-- TODO: grab local for this since Luau can't deal with nested type narrowing
		local alternate = fiber.alternate
		if alternate then
			alternate.pendingProps = fiber.pendingProps
		end
		scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp)
	end

	scheduleUpdate = function(fiber: Fiber)
		scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp)
	end

	setSuspenseHandler = function(newShouldSuspendImpl: (Fiber) -> boolean)
		shouldSuspendImpl = newShouldSuspendImpl
	end
end

function findHostInstanceByFiber(fiber: Fiber): Instance | TextInstance | nil
	local hostFiber = findCurrentHostFiber(fiber)
	if hostFiber == nil then
		return nil
	end
	return hostFiber.stateNode
end

function emptyFindFiberByHostInstance(instance: Instance | TextInstance): Fiber | nil
	return nil
end

function getCurrentFiberForDevTools()
	return ReactCurrentFiber.current
end

exports.injectIntoDevTools = function(devToolsConfig: DevToolsConfig): boolean
	local findFiberByHostInstance = devToolsConfig.findFiberByHostInstance
	local ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher
	local getCurrentFiber = nil
	if __DEV__ then
		getCurrentFiber = getCurrentFiberForDevTools
	end
	return injectInternals({
		bundleType = devToolsConfig.bundleType,
		version = devToolsConfig.version,
		rendererPackageName = devToolsConfig.rendererPackageName,
		rendererConfig = devToolsConfig.rendererConfig,
		overrideHookState = overrideHookState,
		overrideHookStateDeletePath = overrideHookStateDeletePath,
		overrideHookStateRenamePath = overrideHookStateRenamePath,
		overrideProps = overrideProps,
		overridePropsDeletePath = overridePropsDeletePath,
		overridePropsRenamePath = overridePropsRenamePath,
		setSuspenseHandler = setSuspenseHandler,
		scheduleUpdate = scheduleUpdate,
		currentDispatcherRef = ReactCurrentDispatcher,
		findHostInstanceByFiber = findHostInstanceByFiber,
		findFiberByHostInstance = findFiberByHostInstance or emptyFindFiberByHostInstance,
		-- FIXME: WIP
		-- React Refresh
		-- findHostInstancesForRefresh = __DEV__ and findHostInstancesForRefresh or nil,
		-- scheduleRefresh = __DEV__ and scheduleRefresh or nil,
		-- scheduleRoot = __DEV__ and scheduleRoot or nil,
		-- setRefreshHandler = __DEV__ and setRefreshHandler or nil,
		-- Enables DevTools to append owner stacks to error messages in DEV mode.
		getCurrentFiber = getCurrentFiber,
	})
end

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="362">
              <Properties>
                <string name="Name">ReactFiberRoot.new</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/96ac799eace5d989de3b4f80e6414e94a08ff77a/packages/react-reconciler/src/ReactFiberRoot.new.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]

local Packages = script.Parent.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)
local Set = LuauPolyfill.Set
local Map = LuauPolyfill.Map

local ReactInternalTypes = require(script.Parent.ReactInternalTypes)
type Fiber = ReactInternalTypes.Fiber
type FiberRoot = ReactInternalTypes.FiberRoot
type SuspenseHydrationCallbacks = ReactInternalTypes.SuspenseHydrationCallbacks
local ReactRootTags = require(script.Parent.ReactRootTags)
type RootTag = ReactRootTags.RootTag

local ReactFiberHostConfig = require(script.Parent.ReactFiberHostConfig)
local noTimeout = ReactFiberHostConfig.noTimeout
local supportsHydration = ReactFiberHostConfig.supportsHydration
local ReactFiber = require(script.Parent["ReactFiber.new"])
local createHostRootFiber = ReactFiber.createHostRootFiber
local ReactFiberLane = require(script.Parent.ReactFiberLane)
local NoLanes = ReactFiberLane.NoLanes
local NoLanePriority = ReactFiberLane.NoLanePriority
local NoTimestamp = ReactFiberLane.NoTimestamp
local createLaneMap = ReactFiberLane.createLaneMap
local ReactFeatureFlags = require(Packages.Shared).ReactFeatureFlags
local enableSchedulerTracing = ReactFeatureFlags.enableSchedulerTracing
local enableSuspenseCallback = ReactFeatureFlags.enableSuspenseCallback
-- deviation: import from tracing from Scheduler export to avoid direct file access
local Scheduler = require(Packages.Scheduler).tracing
local unstable_getThreadID = Scheduler.unstable_getThreadID
local ReactUpdateQueue = require(script.Parent["ReactUpdateQueue.new"])
local initializeUpdateQueue = ReactUpdateQueue.initializeUpdateQueue
local LegacyRoot = ReactRootTags.LegacyRoot
local BlockingRoot = ReactRootTags.BlockingRoot
local ConcurrentRoot = ReactRootTags.ConcurrentRoot

local exports = {}

local function FiberRootNode(containerInfo, tag, hydrate)
	-- performance: See if this kind of object init is faster in Luau
	local rootNode = {
		tag = tag,
		containerInfo = containerInfo,
		pendingChildren = nil,
		-- TODO: this isn't typesafe upstream
		current = (nil :: any) :: Fiber,
		pingCache = nil,
		finishedWork = nil,
		timeoutHandle = noTimeout,
		context = nil,
		pendingContext = nil,
		hydrate = hydrate,
		callbackNode = nil,
		callbackPriority = NoLanePriority,
		eventTimes = createLaneMap(NoLanes),
		expirationTimes = createLaneMap(NoTimestamp),

		pendingLanes = NoLanes,
		suspendedLanes = NoLanes,
		pingedLanes = NoLanes,
		expiredLanes = NoLanes,
		mutableReadLanes = NoLanes,
		finishedLanes = NoLanes,

		entangledLanes = NoLanes,
		entanglements = createLaneMap(NoLanes),
	}

	if supportsHydration then
		rootNode.mutableSourceEagerHydrationData = nil
	end

	if enableSchedulerTracing then
		rootNode.interactionThreadID = unstable_getThreadID()
		rootNode.memoizedInteractions = Set.new()
		rootNode.pendingInteractionMap = Map.new()
	end
	if enableSuspenseCallback then
		rootNode.hydrationCallbacks = nil
	end

	if _G.__DEV__ then
		if tag == BlockingRoot then
			rootNode._debugRootType = "createBlockingRoot()"
		elseif tag == ConcurrentRoot then
			rootNode._debugRootType = "createRoot()"
		elseif tag == LegacyRoot then
			rootNode._debugRootType = "createLegacyRoot()"
		end
	end

	return rootNode
end

exports.createFiberRoot = function(
	containerInfo: any,
	tag: RootTag,
	hydrate: boolean,
	hydrationCallbacks: SuspenseHydrationCallbacks?
): FiberRoot
	local root: FiberRoot = FiberRootNode(containerInfo, tag, hydrate)
	if enableSuspenseCallback then
		root.hydrationCallbacks = hydrationCallbacks
	end

	-- Cyclic construction. This cheats the type system right now because
	-- stateNode is any.
	local uninitializedFiber = createHostRootFiber(tag)
	root.current = uninitializedFiber
	uninitializedFiber.stateNode = root

	initializeUpdateQueue(uninitializedFiber)

	return root
end

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="363">
              <Properties>
                <string name="Name">ReactFiberSchedulerPriorities.roblox</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/d17086c7c813402a550d15a2f56dc43f1dbd1735/packages/react-reconciler/src/SchedulerWithReactIntegration.new.js
--[[
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]

-- deviation: Type definition and values extracted from
-- SchedulerWithReactIntegration.new. This helps avoid a cyclic dependency that
-- can occur between SchedulerWithReactIntegration.new, ReactFiberLanes, and
-- various files that depend upon them

export type ReactPriorityLevel = number

local exports: { [string]: ReactPriorityLevel } = {
	-- // Except for NoPriority, these correspond to Scheduler priorities. We use
	-- // ascending numbers so we can compare them like numbers. They start at 90 to
	-- // avoid clashing with Scheduler's priorities.
	ImmediatePriority = 99,
	UserBlockingPriority = 98,
	NormalPriority = 97,
	LowPriority = 96,
	IdlePriority = 95,
	-- // NoPriority is the absence of priority. Also React-only.
	NoPriority = 90,
}

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="364">
              <Properties>
                <string name="Name">ReactFiberStack.new</string>
                <string name="Source"><![CDATA[-- upstream: https://github.com/facebook/react/blob/17f582e0453b808860be59ed3437c6a426ae52de/packages/react-reconciler/src/ReactFiberStack.new.js
--!strict
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]
local Packages = script.Parent.Parent
-- NOTE: use patched console from shared
local console = require(Packages.Shared).console

local ReactInternalTypes = require(script.Parent.ReactInternalTypes)
type Fiber = ReactInternalTypes.Fiber

type Array<T> = { [number]: T }
-- deviation: use this table when pushing nil values
type null = {}
local NULL: null = {}

export type StackCursor<T> = { current: T }

local valueStack: Array<any> = {}

local fiberStack: Array<Fiber | null>

if _G.__DEV__ then
	fiberStack = {}
end

local index = 0

local function createCursor<T>(defaultValue: T): StackCursor<T>
	return {
		current = defaultValue,
	}
end

local function isEmpty(): boolean
	return index == 0
end

local function pop<T>(cursor: StackCursor<T>, fiber: Fiber): ()
	if index < 1 then
		if _G.__DEV__ then
			console.error("Unexpected pop.")
		end
		return
	end

	if _G.__DEV__ then
		-- TODO: workaround for Luau analysis bug
		if fiber ~= fiberStack[index] :: Fiber then
			console.error("Unexpected Fiber popped.")
		end
	end

	local value = valueStack[index]
	if value == NULL then
		-- TODO: this is a sort of incorrect typing in upstream
		cursor.current = nil :: any
	else
		cursor.current = value
	end

	valueStack[index] = nil

	if _G.__DEV__ then
		fiberStack[index] = nil
	end

	index -= 1
end

local function push<T>(cursor: StackCursor<T>, value: T, fiber: Fiber): ()
	index += 1

	local stackValue = cursor.current
	if stackValue == nil then
		valueStack[index] = NULL
	else
		valueStack[index] = stackValue
	end

	if _G.__DEV__ then
		fiberStack[index] = fiber
	end

	cursor.current = value
end

local function checkThatStackIsEmpty()
	if _G.__DEV__ then
		if index ~= 0 then
			console.error("Expected an empty stack. Something was not reset properly.")
		end
	end
end

local function resetStackAfterFatalErrorInDev()
	if _G.__DEV__ then
		index = 0
		-- deviation: Original js simply sets `length`
		table.clear(valueStack)
		table.clear(fiberStack)
	end
end

return {
	createCursor = createCursor,
	isEmpty = isEmpty,
	pop = pop,
	push = push,
	-- DEV only:
	checkThatStackIsEmpty = checkThatStackIsEmpty,
	resetStackAfterFatalErrorInDev = resetStackAfterFatalErrorInDev,
}
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="365">
              <Properties>
                <string name="Name">ReactFiberSuspenseComponent.new</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/1faf9e3dd5d6492f3607d5c721055819e4106bc6/packages/react-reconciler/src/ReactFiberSuspenseComponent.new.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]

local Packages = script.Parent.Parent

local ReactTypes = require(Packages.Shared)
type ReactNodeList = ReactTypes.ReactNodeList
type Wakeable = ReactTypes.Wakeable

local ReactInternalTypes = require(script.Parent.ReactInternalTypes)
type Fiber = ReactInternalTypes.Fiber
local ReactFiberHostConfig = require(script.Parent.ReactFiberHostConfig)
type SuspenseInstance = ReactFiberHostConfig.SuspenseInstance
local ReactFiberLane = require(script.Parent.ReactFiberLane)
type Lane = ReactFiberLane.Lane
local ReactWorkTags = require(script.Parent.ReactWorkTags)
local SuspenseComponent = ReactWorkTags.SuspenseComponent
local SuspenseListComponent = ReactWorkTags.SuspenseListComponent
local ReactFiberFlags = require(script.Parent.ReactFiberFlags)
local NoFlags = ReactFiberFlags.NoFlags
local DidCapture = ReactFiberFlags.DidCapture
local isSuspenseInstancePending = ReactFiberHostConfig.isSuspenseInstancePending
local isSuspenseInstanceFallback = ReactFiberHostConfig.isSuspenseInstanceFallback

-- deviation: Common types
type Set<T> = { [T]: boolean }

export type SuspenseProps = {
	children: ReactNodeList?,
	fallback: ReactNodeList?,

	-- TODO: Add "unstable_" prefix?
	suspenseCallback: (Set<Wakeable>?) -> any,

	unstable_expectedLoadTime: number?,
}

-- A nil SuspenseState represents an unsuspended normal Suspense boundary.
-- A non-null SuspenseState means that it is blocked for one reason or another.
-- - A non-null dehydrated field means it's blocked pending hydration.
--   - A non-null dehydrated field can use isSuspenseInstancePending or
--     isSuspenseInstanceFallback to query the reason for being dehydrated.
-- - A nil dehydrated field means it's blocked by something suspending and
--   we're currently showing a fallback instead.
export type SuspenseState = {
	-- If this boundary is still dehydrated, we store the SuspenseInstance
	-- here to indicate that it is dehydrated (flag) and for quick access
	-- to check things like isSuspenseInstancePending.
	dehydrated: SuspenseInstance?,
	-- Represents the lane we should attempt to hydrate a dehydrated boundary at.
	-- OffscreenLane is the default for dehydrated boundaries.
	-- NoLane is the default for normal boundaries, which turns into "normal" pri.
	retryLane: Lane,
}

-- deviation: Can't use literals for types
-- export type SuspenseListTailMode = 'collapsed' | 'hidden' | void
export type SuspenseListTailMode = string?

export type SuspenseListRenderState = {
	isBackwards: boolean,
	-- The currently rendering tail row.
	rendering: Fiber?,
	-- The absolute time when we started rendering the most recent tail row.
	renderingStartTime: number,
	-- The last of the already rendered children.
	last: Fiber?,
	-- Remaining rows on the tail of the list.
	tail: Fiber?,
	-- Tail insertions setting.
	tailMode: SuspenseListTailMode,
}

local exports = {}

exports.shouldCaptureSuspense = function(workInProgress: Fiber, hasInvisibleParent: boolean): boolean
	-- If it was the primary children that just suspended, capture and render the
	-- fallback. Otherwise, don't capture and bubble to the next boundary.
	local nextState: SuspenseState? = workInProgress.memoizedState
	if nextState then
		if nextState.dehydrated ~= nil then
			-- A dehydrated boundary always captures.
			return true
		end
		return false
	end
	local props = workInProgress.memoizedProps
	-- In order to capture, the Suspense component must have a fallback prop.
	if props.fallback == nil then
		return false
	end
	-- Regular boundaries always capture.
	if props.unstable_avoidThisFallback ~= true then
		return true
	end
	-- If it's a boundary we should avoid, then we prefer to bubble up to the
	-- parent boundary if it is currently invisible.
	if hasInvisibleParent then
		return false
	end
	-- If the parent is not able to handle it, we must handle it.
	return true
end

exports.findFirstSuspended = function(row: Fiber): Fiber?
	local node = row
	while node ~= nil do
		if node.tag == SuspenseComponent then
			local state: SuspenseState? = node.memoizedState
			if state then
				local dehydrated: SuspenseInstance? = state.dehydrated
				if
					dehydrated == nil
					or isSuspenseInstancePending(dehydrated)
					or isSuspenseInstanceFallback(dehydrated)
				then
					return node
				end
			end
		elseif
			node.tag == SuspenseListComponent
			-- revealOrder undefined can't be trusted because it don't
			-- keep track of whether it suspended or not.
			and node.memoizedProps.revealOrder ~= nil
		then
			local didSuspend = bit32.band(node.flags, DidCapture) ~= NoFlags
			if didSuspend then
				return node
			end
		elseif node.child ~= nil then
			node.child.return_ = node
			node = node.child
			continue
		end
		if node == row then
			return nil
		end
		while node.sibling == nil do
			if node.return_ == nil or node.return_ == row then
				return nil
			end
			-- FIXME Luau: Luau narrowing doesn't understand this loop until nil pattern
			node = node.return_ :: Fiber
		end
		-- FIXME Luau: Luau narrowing doesn't understand this loop until nil pattern
		(node.sibling :: Fiber).return_ = node.return_
		node = node.sibling :: Fiber
	end
	return nil
end

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="366">
              <Properties>
                <string name="Name">ReactFiberSuspenseContext.new</string>
                <string name="Source"><![CDATA[-- upstream: https://github.com/facebook/react/blob/17f582e0453b808860be59ed3437c6a426ae52de/packages/react-reconciler/src/ReactFiberSuspenseContext.new.js
--!strict
-- upstream: https://github.com/facebook/react/blob/17f582e0453b808860be59ed3437c6a426ae52de/packages/react-reconciler/src/ReactFiberSuspenseContext.new.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]

local ReactInternalTypes = require(script.Parent.ReactInternalTypes)
type Fiber = ReactInternalTypes.Fiber

local ReactFiberStack = require(script.Parent["ReactFiberStack.new"])
type StackCursor<T> = ReactFiberStack.StackCursor<T>

local createCursor = ReactFiberStack.createCursor
local push = ReactFiberStack.push
local pop = ReactFiberStack.pop

export type SuspenseContext = number
export type SubtreeSuspenseContext = SuspenseContext
export type ShallowSuspenseContext = SuspenseContext

local exports = {}

local DefaultSuspenseContext: SuspenseContext = 0b00

-- // The Suspense Context is split into two parts. The lower bits is
-- // inherited deeply down the subtree. The upper bits only affect
-- // this immediate suspense boundary and gets reset each new
-- // boundary or suspense list.
local SubtreeSuspenseContextMask: SuspenseContext = 0b01

-- // Subtree Flags:

-- // InvisibleParentSuspenseContext indicates that one of our parent Suspense
-- // boundaries is not currently showing visible main content.
-- // Either because it is already showing a fallback or is not mounted at all.
-- // We can use this to determine if it is desirable to trigger a fallback at
-- // the parent. If not, then we might need to trigger undesirable boundaries
-- // and/or suspend the commit to avoid hiding the parent content.
local InvisibleParentSuspenseContext: SubtreeSuspenseContext = 0b01
exports.InvisibleParentSuspenseContext = InvisibleParentSuspenseContext

-- // Shallow Flags:

-- // ForceSuspenseFallback can be used by SuspenseList to force newly added
-- // items into their fallback state during one of the render passes.
local ForceSuspenseFallback: ShallowSuspenseContext = 0b10
exports.ForceSuspenseFallback = ForceSuspenseFallback

local suspenseStackCursor: StackCursor<SuspenseContext> = createCursor(DefaultSuspenseContext)
exports.suspenseStackCursor = suspenseStackCursor

function exports.hasSuspenseContext(parentContext: SuspenseContext, flag: SuspenseContext): boolean
	return bit32.band(parentContext, flag) ~= 0
end

function exports.setDefaultShallowSuspenseContext(parentContext: SuspenseContext): SuspenseContext
	return bit32.band(parentContext, SubtreeSuspenseContextMask)
end

function exports.setShallowSuspenseContext(
	parentContext: SuspenseContext,
	shallowContext: ShallowSuspenseContext
): SuspenseContext
	return bit32.bor(bit32.band(parentContext, SubtreeSuspenseContextMask), shallowContext)
end

function exports.addSubtreeSuspenseContext(
	parentContext: SuspenseContext,
	subtreeContext: SubtreeSuspenseContext
): SuspenseContext
	return bit32.bor(parentContext, subtreeContext)
end

function exports.pushSuspenseContext(fiber: Fiber, newContext: SuspenseContext)
	push(suspenseStackCursor, newContext, fiber)
end

function exports.popSuspenseContext(fiber: Fiber)
	pop(suspenseStackCursor, fiber)
end

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="367">
              <Properties>
                <string name="Name">ReactFiberThrow.new</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/16654436039dd8f16a63928e71081c7745872e8f/packages/react-reconciler/src/ReactFiberThrow.new.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
 ]]

local Packages = script.Parent.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)
local Object = LuauPolyfill.Object
-- NOTE: use patched console from shared
local console = require(Packages.Shared).console
type Error = LuauPolyfill.Error
type Map<K, V> = { [K]: V }
type Object = { [string]: any }
type Set<T> = { [T]: boolean }

local ReactInternalTypes = require(script.Parent.ReactInternalTypes)
type Fiber = ReactInternalTypes.Fiber
type FiberRoot = ReactInternalTypes.FiberRoot
type ReactPriorityLevel = ReactInternalTypes.ReactPriorityLevel
local ReactFiberLane = require(script.Parent.ReactFiberLane)
type Lanes = ReactFiberLane.Lanes
type Lane = ReactFiberLane.Lane
local ReactCapturedValue = require(script.Parent.ReactCapturedValue)
type CapturedValue<T> = ReactCapturedValue.CapturedValue<T>
local ReactUpdateQueue = require(script.Parent["ReactUpdateQueue.new"])
type Update<T> = ReactInternalTypes.Update<T>

local ReactTypes = require(Packages.Shared)
type React_Component<Props, State> = ReactTypes.React_Component<Props, State>
type Thenable<T> = ReactTypes.Thenable<T>
type Wakeable = ReactTypes.Wakeable

local ReactFiberSuspenseContext = require(script.Parent["ReactFiberSuspenseContext.new"])
type SuspenseContext = ReactFiberSuspenseContext.SuspenseContext

local getComponentName = require(Packages.Shared).getComponentName

local ReactWorkTags = require(script.Parent.ReactWorkTags)
local ClassComponent = ReactWorkTags.ClassComponent
local HostRoot = ReactWorkTags.HostRoot
local SuspenseComponent = ReactWorkTags.SuspenseComponent
local IncompleteClassComponent = ReactWorkTags.IncompleteClassComponent

local ReactFiberFlags = require(script.Parent.ReactFiberFlags)
local DidCapture = ReactFiberFlags.DidCapture
local Incomplete = ReactFiberFlags.Incomplete
local NoFlags = ReactFiberFlags.NoFlags
local ShouldCapture = ReactFiberFlags.ShouldCapture
local LifecycleEffectMask = ReactFiberFlags.LifecycleEffectMask
local ForceUpdateForLegacySuspense = ReactFiberFlags.ForceUpdateForLegacySuspense
local shouldCaptureSuspense = require(script.Parent["ReactFiberSuspenseComponent.new"]).shouldCaptureSuspense
local ReactTypeOfMode = require(script.Parent.ReactTypeOfMode)
local NoMode = ReactTypeOfMode.NoMode
local BlockingMode = ReactTypeOfMode.BlockingMode
local DebugTracingMode = ReactTypeOfMode.DebugTracingMode
local ReactFeatureFlags = require(Packages.Shared).ReactFeatureFlags
local enableDebugTracing = ReactFeatureFlags.enableDebugTracing
local enableSchedulingProfiler = ReactFeatureFlags.enableSchedulingProfiler
local createCapturedValue = require(script.Parent.ReactCapturedValue).createCapturedValue

local enqueueCapturedUpdate = ReactUpdateQueue.enqueueCapturedUpdate
local createUpdate = ReactUpdateQueue.createUpdate
local CaptureUpdate = ReactUpdateQueue.CaptureUpdate
local ForceUpdate = ReactUpdateQueue.ForceUpdate
local enqueueUpdate = ReactUpdateQueue.enqueueUpdate
local markFailedErrorBoundaryForHotReloading =
	require(script.Parent["ReactFiberHotReloading.new"]).markFailedErrorBoundaryForHotReloading

local hasSuspenseContext = ReactFiberSuspenseContext.hasSuspenseContext
local InvisibleParentSuspenseContext = ReactFiberSuspenseContext.InvisibleParentSuspenseContext
local suspenseStackCursor = ReactFiberSuspenseContext.suspenseStackCursor

-- FIXME: these will incur a dependency cycle
-- onUncaughtError would be very easy to extract out, or to transplant into this file
local ReactFiberWorkLoop
local markLegacyErrorBoundaryAsFailedRef, isAlreadyFailedLegacyErrorBoundaryRef, pingSuspendedRootRef

-- deviation: lazy initialize ReactFiberWorkLoop to prevent cyclic module dependency
local markLegacyErrorBoundaryAsFailed = function(...)
	if not markLegacyErrorBoundaryAsFailedRef then
		ReactFiberWorkLoop = require(script.Parent["ReactFiberWorkLoop.new"])
		markLegacyErrorBoundaryAsFailedRef = ReactFiberWorkLoop.markLegacyErrorBoundaryAsFailed
	end
	return markLegacyErrorBoundaryAsFailedRef(...)
end
-- local {
--   renderDidError,
--   onUncaughtError,
--   markLegacyErrorBoundaryAsFailed,
--   isAlreadyFailedLegacyErrorBoundary,
--   pingSuspendedRoot,
-- } = require(Packages../ReactFiberWorkLoop.new'
local pingSuspendedRoot = function(...)
	if ReactFiberWorkLoop == nil then
		ReactFiberWorkLoop = require(script.Parent["ReactFiberWorkLoop.new"])
	end
	pingSuspendedRootRef = ReactFiberWorkLoop.pingSuspendedRoot
	return pingSuspendedRootRef(...)
end
local isAlreadyFailedLegacyErrorBoundary = function(...)
	if ReactFiberWorkLoop == nil then
		ReactFiberWorkLoop = require(script.Parent["ReactFiberWorkLoop.new"])
	end
	isAlreadyFailedLegacyErrorBoundaryRef = ReactFiberWorkLoop.isAlreadyFailedLegacyErrorBoundary
	return isAlreadyFailedLegacyErrorBoundaryRef(...)
end

local logCapturedError = require(script.Parent.ReactFiberErrorLogger).logCapturedError
local logComponentSuspended = require(script.Parent.DebugTracing).logComponentSuspended
local markComponentSuspended = require(script.Parent.SchedulingProfiler).markComponentSuspended

local SyncLane = ReactFiberLane.SyncLane
local NoTimestamp = ReactFiberLane.NoTimestamp
local includesSomeLane = ReactFiberLane.includesSomeLane
local mergeLanes = ReactFiberLane.mergeLanes
local pickArbitraryLane = ReactFiberLane.pickArbitraryLane

-- local PossiblyWeakMap = typeof WeakMap == 'function' ? WeakMap : Map

function createRootErrorUpdate(
	fiber: Fiber,
	errorInfo: CapturedValue<Error>,
	lane: Lane,
	-- deviation: parameterize method to avoid circular dependency
	onUncaughtError
): Update<any>
	local update = createUpdate(NoTimestamp, lane)
	-- Unmount the root by rendering nil.
	update.tag = CaptureUpdate
	-- Caution: React DevTools currently depends on this property
	-- being called "element".
	update.payload = { element = Object.None }
	local _error = errorInfo.value
	update.callback = function()
		if onUncaughtError ~= nil then
			onUncaughtError(_error)
		end
		logCapturedError(fiber, errorInfo)
	end
	return update
end

function createClassErrorUpdate(fiber: Fiber, errorInfo: CapturedValue<Error>, lane: Lane): Update<any>
	local update = createUpdate(NoTimestamp, lane)
	update.tag = CaptureUpdate
	local getDerivedStateFromError = (fiber.type :: React_Component<any, any>).getDerivedStateFromError
	if typeof(getDerivedStateFromError) == "function" then
		local error_ = errorInfo.value
		update.payload = function()
			logCapturedError(fiber, errorInfo)
			return getDerivedStateFromError(error_)
		end
	end

	local inst = fiber.stateNode
	if inst ~= nil and typeof(inst.componentDidCatch) == "function" then
		update.callback = function()
			if _G.__DEV__ then
				markFailedErrorBoundaryForHotReloading(fiber)
			end
			if typeof(getDerivedStateFromError) ~= "function" then
				-- To preserve the preexisting retry behavior of error boundaries,
				-- we keep track of which ones already failed during this batch.
				-- This gets reset before we yield back to the browser.
				-- TODO: Warn in strict mode if getDerivedStateFromError is
				-- not defined.
				-- FIXME: used to be `this` upstream, needs verification by ReactIncremental unwinding test
				markLegacyErrorBoundaryAsFailed(inst)

				-- Only log here if componentDidCatch is the only error boundary method defined
				logCapturedError(fiber, errorInfo)
			end
			local error_ = errorInfo.value
			local stack = errorInfo.stack
			-- FIXME: used to be `this` upstream, needs verification by ReactIncremental unwinding test
			inst:componentDidCatch(error_, {
				componentStack = stack or "",
			})
			if _G.__DEV__ then
				if typeof(getDerivedStateFromError) ~= "function" then
					-- If componentDidCatch is the only error boundary method defined,
					-- then it needs to call setState to recover from errors.
					-- If no state update is scheduled then the boundary will swallow the error.
					if not includesSomeLane(fiber.lanes, SyncLane) then
						console.error(
							"%s: Error boundaries should implement getDerivedStateFromError(). "
								.. "In that method, return a state update to display an error message or fallback UI.",
							getComponentName(fiber.type) or "Unknown"
						)
					end
				end
			end
		end
	elseif _G.__DEV__ then
		update.callback = function()
			markFailedErrorBoundaryForHotReloading(fiber)
		end
	end
	return update
end

local function attachPingListener(root: FiberRoot, wakeable: Wakeable, lanes: Lanes)
	-- Attach a listener to the promise to "ping" the root and retry. But only if
	-- one does not already exist for the lanes we're currently rendering (which
	-- acts like a "thread ID" here).
	local pingCache: Map<Wakeable, (Set<any> | Map<Wakeable, Set<any>>)> | nil = root.pingCache
	local threadIDs
	if pingCache == nil then
		-- deviation: use table in place of WeakMap
		-- performance: slight re-ordering so we initialize the table in one shot
		threadIDs = {} :: Set<any>
		root.pingCache = {
			[wakeable] = threadIDs,
		} :: Map<Wakeable, (Set<any> | Map<Wakeable, Set<any>>)>
		pingCache = root.pingCache :: Map<Wakeable, (Set<any> | Map<Wakeable, Set<any>>)>
	else
		threadIDs = (pingCache :: Map<Wakeable, (Set<any> | Map<Wakeable, Set<any>>)>)[wakeable] :: Set<any>
		if threadIDs == nil then
			threadIDs = {} :: Set<any>;
			(pingCache :: Map<Wakeable, (Set<any> | Map<Wakeable, Set<any>>)>)[wakeable] = threadIDs
		end
	end
	if not threadIDs[lanes] then
		-- Memoize using the thread ID to prevent redundant listeners.
		threadIDs[lanes] = true
		local ping = function()
			return pingSuspendedRoot(root, wakeable, lanes)
		end
		wakeable:andThen(ping, ping)
	end
end

function throwException(
	root: FiberRoot,
	returnFiber: Fiber,
	sourceFiber: Fiber,
	value: any,
	rootRenderLanes: Lanes,
	onUncaughtError,
	renderDidError
)
	-- The source fiber did not complete.
	sourceFiber.flags = bit32.bor(sourceFiber.flags, Incomplete)

	if value ~= nil and typeof(value) == "table" and typeof(value.andThen) == "function" then
		-- This is a wakeable.
		local wakeable: Wakeable = value

		if _G.__DEV__ then
			if enableDebugTracing then
				if bit32.band(sourceFiber.mode, DebugTracingMode) ~= 0 then
					local name = getComponentName(sourceFiber.type) or "Unknown"
					logComponentSuspended(name, wakeable)
				end
			end
		end

		if enableSchedulingProfiler then
			markComponentSuspended(sourceFiber, wakeable)
		end

		if bit32.band(sourceFiber.mode, BlockingMode) == NoMode then
			-- Reset the memoizedState to what it was before we attempted
			-- to render it.
			local currentSource = sourceFiber.alternate
			if currentSource then
				-- performance TODO: return non-nil updateQueue object to the ReactUpdateQUeue pool
				sourceFiber.updateQueue = currentSource.updateQueue
				sourceFiber.memoizedState = currentSource.memoizedState
				sourceFiber.lanes = currentSource.lanes
			else
				-- performance TODO: return non-nil updateQueue object to the ReactUpdateQUeue pool
				sourceFiber.updateQueue = nil
				sourceFiber.memoizedState = nil
			end
		end

		local hasInvisibleParentBoundary =
			hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext :: SuspenseContext)

		-- Schedule the nearest Suspense to re-render the timed out view.
		local workInProgress = returnFiber
		repeat
			if
				workInProgress.tag == SuspenseComponent
				and shouldCaptureSuspense(workInProgress, hasInvisibleParentBoundary)
			then
				-- Found the nearest boundary.

				-- Stash the promise on the boundary fiber. If the boundary times out, we'll
				-- attach another listener to flip the boundary back to its normal state.
				local wakeables: Set<Wakeable> = workInProgress.updateQueue
				if wakeables == nil then
					local updateQueue = {
						[wakeable] = true,
					}
					-- performance TODO: return non-nil updateQueue object to the ReactUpdateQUeue pool
					workInProgress.updateQueue = updateQueue
				else
					wakeables[wakeable] = true
				end

				-- If the boundary is outside of blocking mode, we should *not*
				-- suspend the commit. Pretend as if the suspended component rendered
				-- nil and keep rendering. In the commit phase, we'll schedule a
				-- subsequent synchronous update to re-render the Suspense.
				--
				-- NOTE: It doesn't matter whether the component that suspended was
				-- inside a blocking mode tree. If the Suspense is outside of it, we
				-- should *not* suspend the commit.
				if bit32.band(workInProgress.mode, BlockingMode) == NoMode then
					workInProgress.flags = bit32.bor(workInProgress.flags, DidCapture)
					sourceFiber.flags = bit32.bor(sourceFiber.flags, ForceUpdateForLegacySuspense)

					-- We're going to commit this fiber even though it didn't complete.
					-- But we shouldn't call any lifecycle methods or callbacks. Remove
					-- all lifecycle effect tags.
					sourceFiber.flags =
						bit32.band(sourceFiber.flags, bit32.bnot(bit32.bor(LifecycleEffectMask, Incomplete)))

					if sourceFiber.tag == ClassComponent then
						local currentSourceFiber = sourceFiber.alternate
						if currentSourceFiber == nil then
							-- This is a new mount. Change the tag so it's not mistaken for a
							-- completed class component. For example, we should not call
							-- componentWillUnmount if it is deleted.
							sourceFiber.tag = IncompleteClassComponent
						else
							-- When we try rendering again, we should not reuse the current fiber,
							-- since it's known to be in an inconsistent state. Use a force update to
							-- prevent a bail out.
							local update = createUpdate(NoTimestamp, SyncLane)
							update.tag = ForceUpdate
							enqueueUpdate(sourceFiber, update)
						end
					end

					-- The source fiber did not complete. Mark it with Sync priority to
					-- indicate that it still has pending work.
					sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane)

					-- Exit without suspending.
					return
				end

				-- Confirmed that the boundary is in a concurrent mode tree. Continue
				-- with the normal suspend path.
				--
				-- After this we'll use a set of heuristics to determine whether this
				-- render pass will run to completion or restart or "suspend" the commit.
				-- The actual logic for this is spread out in different places.
				--
				-- This first principle is that if we're going to suspend when we complete
				-- a root, then we should also restart if we get an update or ping that
				-- might unsuspend it, and vice versa. The only reason to suspend is
				-- because you think you might want to restart before committing. However,
				-- it doesn't make sense to restart only while in the period we're suspended.
				--
				-- Restarting too aggressively is also not good because it starves out any
				-- intermediate loading state. So we use heuristics to determine when.

				-- Suspense Heuristics
				--
				-- If nothing threw a Promise or all the same fallbacks are already showing,
				-- then don't suspend/restart.
				--
				-- If this is an initial render of a new tree of Suspense boundaries and
				-- those trigger a fallback, then don't suspend/restart. We want to ensure
				-- that we can show the initial loading state as quickly as possible.
				--
				-- If we hit a "Delayed" case, such as when we'd switch from content back into
				-- a fallback, then we should always suspend/restart. Transitions apply
				-- to this case. If none is defined, JND is used instead.
				--
				-- If we're already showing a fallback and it gets "retried", allowing us to show
				-- another level, but there's still an inner boundary that would show a fallback,
				-- then we suspend/restart for 500ms since the last time we showed a fallback
				-- anywhere in the tree. This effectively throttles progressive loading into a
				-- consistent train of commits. This also gives us an opportunity to restart to
				-- get to the completed state slightly earlier.
				--
				-- If there's ambiguity due to batching it's resolved in preference of:
				-- 1) "delayed", 2) "initial render", 3) "retry".
				--
				-- We want to ensure that a "busy" state doesn't get force committed. We want to
				-- ensure that new initial loading states can commit as soon as possible.

				attachPingListener(root, wakeable, rootRenderLanes)

				workInProgress.flags = bit32.bor(workInProgress.flags, ShouldCapture)
				workInProgress.lanes = rootRenderLanes

				return
			end
			-- This boundary already captured during this render. Continue to the next
			-- boundary.
			workInProgress = workInProgress.return_ :: Fiber -- TODO: Luau narrowing doesn't understand this loop until nil pattern
		until workInProgress == nil

		-- No boundary was found. Fallthrough to error mode.
		-- TODO: Use invariant so the message is stripped in prod?
		value = (getComponentName(sourceFiber.type) or "A React component")
			.. " suspended while rendering, but no fallback UI was specified.\n"
			.. "\n"
			.. "Add a <Suspense fallback=...> component higher in the tree to "
			.. "provide a loading indicator or placeholder to display."
	end

	-- We didn't find a boundary that could handle this type of exception. Start
	-- over and traverse parent path again, this time treating the exception
	-- as an error.
	renderDidError()

	value = createCapturedValue(value, sourceFiber)
	local workInProgress = returnFiber
	repeat
		if workInProgress.tag == HostRoot then
			local errorInfo = value
			workInProgress.flags = bit32.bor(workInProgress.flags, ShouldCapture)
			local lane = pickArbitraryLane(rootRenderLanes)
			workInProgress.lanes = mergeLanes(workInProgress.lanes, lane)
			-- deviation: parameterize method onUncaughtError to avoid circular dependency
			local update = createRootErrorUpdate(workInProgress, errorInfo, lane, onUncaughtError)
			enqueueCapturedUpdate(workInProgress, update)
			return
		elseif workInProgress.tag == ClassComponent then
			-- Capture and retry
			local errorInfo = value
			local ctor = workInProgress.type
			local instance = workInProgress.stateNode
			if
				bit32.band(workInProgress.flags, DidCapture) == NoFlags
				and (
					typeof(ctor.getDerivedStateFromError) == "function"
					or (
						instance ~= nil
						and typeof(instance.componentDidCatch) == "function"
						and not isAlreadyFailedLegacyErrorBoundary(instance)
					)
				)
			then
				workInProgress.flags = bit32.bor(workInProgress.flags, ShouldCapture)
				local lane = pickArbitraryLane(rootRenderLanes)
				workInProgress.lanes = mergeLanes(workInProgress.lanes, lane)
				-- Schedule the error boundary to re-render using updated state
				local update = createClassErrorUpdate(workInProgress, errorInfo, lane)
				enqueueCapturedUpdate(workInProgress, update)
				return
			end
		end
		workInProgress = workInProgress.return_ :: Fiber -- TODO: Luau narrowing doesn't understand this loop until nil pattern
	until workInProgress == nil
end

return {
	throwException = throwException,
	createRootErrorUpdate = createRootErrorUpdate,
	createClassErrorUpdate = createClassErrorUpdate,
}
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="368">
              <Properties>
                <string name="Name">ReactFiberTransition</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/ddd1faa1972b614dfbfae205f2aa4a6c0b39a759/packages/react-reconciler/src/ReactFiberTransition.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]

local Packages = script.Parent.Parent

local ReactSharedInternals = require(Packages.Shared).ReactSharedInternals

local ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig

return {
	NoTransition = 0,
	requestCurrentTransition = function(): number
		return ReactCurrentBatchConfig.transition
	end,
}
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="369">
              <Properties>
                <string name="Name">ReactFiberTreeReflection</string>
                <string name="Source"><![CDATA[--!nonstrict
-- upstream: https://github.com/facebook/react/blob/16654436039dd8f16a63928e71081c7745872e8f/packages/react-reconciler/src/ReactFiberTreeReflection.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]

local Packages = script.Parent.Parent
-- NOTE: use patched console from shared
local console = require(Packages.Shared).console

local ReactInternalTypes = require(script.Parent.ReactInternalTypes)
type Fiber = ReactInternalTypes.Fiber
local ReactFiberHostConfig = require(script.Parent.ReactFiberHostConfig)
type Container = ReactFiberHostConfig.Container
type SuspenseInstance = ReactFiberHostConfig.SuspenseInstance
local ReactFiberSuspenseComponent = require(script.Parent["ReactFiberSuspenseComponent.new"])
type SuspenseState = ReactFiberSuspenseComponent.SuspenseState

local invariant = require(Packages.Shared).invariant

local getInstance = require(Packages.Shared).ReactInstanceMap.get
local ReactSharedInternals = require(Packages.Shared).ReactSharedInternals
local getComponentName = require(Packages.Shared).getComponentName
local ReactWorkTags = require(script.Parent.ReactWorkTags)
local ClassComponent = ReactWorkTags.ClassComponent
local HostComponent = ReactWorkTags.HostComponent
local HostRoot = ReactWorkTags.HostRoot
local HostPortal = ReactWorkTags.HostPortal
local HostText = ReactWorkTags.HostText
local FundamentalComponent = ReactWorkTags.FundamentalComponent
local SuspenseComponent = ReactWorkTags.SuspenseComponent
local ReactFiberFlags = require(script.Parent.ReactFiberFlags)
local NoFlags = ReactFiberFlags.NoFlags
local Placement = ReactFiberFlags.Placement
local Hydrating = ReactFiberFlags.Hydrating
local enableFundamentalAPI = require(Packages.Shared).ReactFeatureFlags.enableFundamentalAPI

local ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner

local exports = {}

local function getNearestMountedFiber(fiber: Fiber): Fiber?
	local node = fiber
	-- FIXME Luau: Luau should infer this annotation
	local nearestMounted: Fiber | nil = fiber
	if not fiber.alternate then
		-- If there is no alternate, this might be a new tree that isn't inserted
		-- yet. If it is, then it will have a pending insertion effect on it.
		local nextNode = node
		repeat
			node = nextNode
			if bit32.band(node.flags, bit32.bor(Placement, Hydrating)) ~= NoFlags then
				-- This is an insertion or in-progress hydration. The nearest possible
				-- mounted fiber is the parent but we need to continue to figure out
				-- if that one is still mounted.
				nearestMounted = node.return_
			end
			nextNode = node.return_
		until not nextNode
	else
		while node.return_ do
			node = node.return_
		end
	end
	if node.tag == HostRoot then
		-- TODO: Check if this was a nested HostRoot when used with
		-- renderContainerIntoSubtree.
		return nearestMounted
	end
	-- If we didn't hit the root, that means that we're in an disconnected tree
	-- that has been unmounted.
	return nil
end
exports.getNearestMountedFiber = getNearestMountedFiber

exports.getSuspenseInstanceFromFiber = function(fiber: Fiber): SuspenseInstance?
	if fiber.tag == SuspenseComponent then
		local suspenseState: SuspenseState? = fiber.memoizedState
		if suspenseState == nil then
			local current = fiber.alternate
			if current ~= nil then
				suspenseState = current.memoizedState
			end
		end
		if suspenseState then
			return suspenseState.dehydrated
		end
	end
	return nil
end

exports.getContainerFromFiber = function(fiber: Fiber): Container?
	return if fiber.tag == HostRoot then fiber.stateNode.containerInfo else nil
end

exports.isFiberMounted = function(fiber: Fiber): boolean
	return getNearestMountedFiber(fiber) == fiber
end

-- TODO: Missing React$ internal flow types
-- exports.isMounted = function(component: React$Component<any, any>): boolean
exports.isMounted = function(component): boolean
	if _G.__DEV__ then
		local owner: any = ReactCurrentOwner.current
		if owner ~= nil and owner.tag == ClassComponent then
			local ownerFiber: Fiber = owner
			local instance = ownerFiber.stateNode
			if not instance._warnedAboutRefsInRender then
				console.error(
					"%s is accessing isMounted inside its render() function. "
						.. "render() should be a pure function of props and state. It should "
						.. "never access something that requires stale data from the previous "
						.. "render, such as refs. Move this logic to componentDidMount and "
						.. "componentDidUpdate instead.",
					getComponentName(ownerFiber.type) or "A component"
				)
			end
			instance._warnedAboutRefsInRender = true
		end
	end

	local fiber: Fiber? = getInstance(component)
	if not fiber then
		return false
	else
		-- FIXME: remove any cast once Luau understands if-statement nil check
		local fiberNonNil: any = fiber
		return getNearestMountedFiber(fiberNonNil) == fiber
	end
end

local function assertIsMounted(fiber)
	invariant(getNearestMountedFiber(fiber) == fiber, "Unable to find node on an unmounted component.")
end

local function findCurrentFiberUsingSlowPath(fiber: Fiber): Fiber?
	local alternate = fiber.alternate
	if not alternate then
		-- If there is no alternate, then we only need to check if it is mounted.
		local nearestMounted = getNearestMountedFiber(fiber)
		invariant(nearestMounted ~= nil, "Unable to find node on an unmounted component.")
		if nearestMounted ~= fiber then
			return nil
		end
		return fiber
	end
	-- If we have two possible branches, we'll walk backwards up to the root
	-- to see what path the root points to. On the way we may hit one of the
	-- special cases and we'll deal with them.
	local a: Fiber = fiber
	local b: Fiber = alternate
	while true do
		local parentA = a.return_
		if parentA == nil then
			-- We're at the root.
			break
		end
		local parentB = parentA.alternate
		if parentB == nil then
			-- There is no alternate. This is an unusual case. Currently, it only
			-- happens when a Suspense component is hidden. An extra fragment fiber
			-- is inserted in between the Suspense fiber and its children. Skip
			-- over this extra fragment fiber and proceed to the next parent.
			local nextParent = parentA.return_
			if nextParent ~= nil then
				a = nextParent
				b = nextParent
				continue
			end
			-- If there's no parent, we're at the root.
			break
		end

		-- If both copies of the parent fiber point to the same child, we can
		-- assume that the child is current. This happens when we bailout on low
		-- priority: the bailed out fiber's child reuses the current child.
		if parentA.child == parentB.child then
			local child = parentA.child
			while child do
				if child == a then
					-- We've determined that A is the current branch.
					assertIsMounted(parentA)
					return fiber
				end
				if child == b then
					-- We've determined that B is the current branch.
					assertIsMounted(parentA)
					return alternate
				end
				child = child.sibling
			end
			-- We should never have an alternate for any mounting node. So the only
			-- way this could possibly happen is if this was unmounted, if at all.
			invariant(false, "Unable to find node on an unmounted component.")
		end

		if a.return_ ~= b.return_ then
			-- The return pointer of A and the return pointer of B point to different
			-- fibers. We assume that return pointers never criss-cross, so A must
			-- belong to the child set of A.return, and B must belong to the child
			-- set of B.return.
			a = parentA
			b = parentB
		else
			-- The return pointers point to the same fiber. We'll have to use the
			-- default, slow path: scan the child sets of each parent alternate to see
			-- which child belongs to which set.
			--
			-- Search parent A's child set
			local didFindChild = false
			local child = parentA.child
			while child do
				if child == a then
					didFindChild = true
					a = parentA
					b = parentB
					break
				end
				if child == b then
					didFindChild = true
					b = parentA
					a = parentB
					break
				end
				child = child.sibling
			end
			if not didFindChild then
				-- Search parent B's child set
				child = parentB.child
				while child do
					if child == a then
						didFindChild = true
						a = parentB
						b = parentA
						break
					end
					if child == b then
						didFindChild = true
						b = parentB
						a = parentA
						break
					end
					child = child.sibling
				end
				invariant(
					didFindChild,
					"Child was not found in either parent set. This indicates a bug "
						.. "in React related to the return pointer. Please file an issue."
				)
			end
		end

		invariant(
			a.alternate == b,
			"Return fibers should always be each others' alternates. "
				.. "This error is likely caused by a bug in React. Please file an issue."
		)
	end
	-- If the root is not a host container, we're in a disconnected tree. I.e.
	-- unmounted.
	invariant(a.tag == HostRoot, "Unable to find node on an unmounted component.")
	if a.stateNode.current == a then
		-- We've determined that A is the current branch.
		return fiber
	end
	-- Otherwise B has to be current branch.
	return alternate
end
exports.findCurrentFiberUsingSlowPath = findCurrentFiberUsingSlowPath

exports.findCurrentHostFiber = function(parent: Fiber): Fiber?
	local currentParent = findCurrentFiberUsingSlowPath(parent)
	if not currentParent then
		return nil
	end

	-- Next we'll drill down this component to find the first HostComponent/Text.
	-- FIXME Luau: Luau doesn't narrow based on above branch
	local node: Fiber = currentParent :: Fiber
	while true do
		local child = node.child
		if node.tag == HostComponent or node.tag == HostText then
			return node
		elseif child then
			child.return_ = node
			node = child
			continue
		end
		if node == currentParent then
			return nil
		end
		local return_ = node.return_
		local sibling = node.sibling
		while not sibling do
			if not return_ or return_ == currentParent then
				return nil
			end
			-- FIXME Luau: Luau doesn't narrow based on above branch
			node = return_ :: Fiber
		end
		-- FIXME Luau: Luau doesn't narrow based on above branch
		(sibling :: Fiber).return_ = return_ :: Fiber
		node = sibling :: Fiber
	end
	-- Flow needs the return nil here, but ESLint complains about it.
	-- eslint-disable-next-line no-unreachable
	return nil
end

exports.findCurrentHostFiberWithNoPortals = function(parent: Fiber): Fiber?
	local currentParent = findCurrentFiberUsingSlowPath(parent)
	if not currentParent then
		return nil
	end

	-- Next we'll drill down this component to find the first HostComponent/Text.
	local node: Fiber = currentParent :: Fiber
	while true do
		local child = node.child
		if
			node.tag == HostComponent
			or node.tag == HostText
			or (enableFundamentalAPI and node.tag == FundamentalComponent)
		then
			return node
		elseif child and node.tag ~= HostPortal then
			child.return_ = node
			node = child
			continue
		end
		if node == currentParent then
			return nil
		end
		local return_ = node.return_
		local sibling = node.sibling
		while not sibling do
			if not return_ or return_ == currentParent then
				return nil
			end
			-- FIXME Luau: Luau doesn't narrow based on above branch
			node = return_ :: Fiber
		end
		-- FIXME Luau: Luau doesn't narrow based on above branch
		(sibling :: Fiber).return_ = return_ :: Fiber
		node = sibling :: Fiber
	end
	-- Flow needs the return nil here, but ESLint complains about it.
	-- eslint-disable-next-line no-unreachable
	return nil
end

exports.isFiberSuspenseAndTimedOut = function(fiber: Fiber): boolean
	local memoizedState = fiber.memoizedState
	return fiber.tag == SuspenseComponent and memoizedState ~= nil and memoizedState.dehydrated == nil
end

exports.doesFiberContain = function(parentFiber: Fiber, childFiber: Fiber): boolean
	local node = childFiber
	local parentFiberAlternate = parentFiber.alternate
	while node ~= nil do
		if node == parentFiber or node == parentFiberAlternate then
			return true
		end
		-- FIXME Luau: Luau doesn't understand loop until not nil pattern
		node = node.return_ :: Fiber
	end
	return false
end

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="370">
              <Properties>
                <string name="Name">ReactFiberUnwindWork.new</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/16654436039dd8f16a63928e71081c7745872e8f/packages/react-reconciler/src/ReactFiberUnwindWork.new.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]

local Packages = script.Parent.Parent

local ReactInternalTypes = require(script.Parent.ReactInternalTypes)
type Fiber = ReactInternalTypes.Fiber
local ReactFiberLane = require(script.Parent.ReactFiberLane)
type Lanes = ReactFiberLane.Lanes
local ReactFiberSuspenseComponent = require(script.Parent["ReactFiberSuspenseComponent.new"])
type SuspenseState = ReactFiberSuspenseComponent.SuspenseState

local resetMutableSourceWorkInProgressVersions =
	require(script.Parent["ReactMutableSource.new"]).resetWorkInProgressVersions
local ReactWorkTags = require(script.Parent.ReactWorkTags)
-- local {ReactFiberFlags.DidCapture, ReactFiberFlags.NoFlags, ReactFiberFlags.ShouldCapture} = require(script.Parent.ReactFiberFlags)
local ReactFiberFlags = require(script.Parent.ReactFiberFlags)
local ReactTypeOfMode = require(script.Parent.ReactTypeOfMode)

local ReactFeatureFlags = require(Packages.Shared).ReactFeatureFlags
local enableSuspenseServerRenderer = ReactFeatureFlags.enableSuspenseServerRenderer
local enableProfilerTimer = ReactFeatureFlags.enableProfilerTimer

local ReactFiberHostContext = require(script.Parent["ReactFiberHostContext.new"])
local popHostContainer = ReactFiberHostContext.popHostContainer
local popHostContext = ReactFiberHostContext.popHostContext
local popSuspenseContext = require(script.Parent["ReactFiberSuspenseContext.new"]).popSuspenseContext
local resetHydrationState = require(script.Parent["ReactFiberHydrationContext.new"]).resetHydrationState
local ReactFiberContext = require(script.Parent["ReactFiberContext.new"])
local isLegacyContextProvider = ReactFiberContext.isContextProvider
local popLegacyContext = ReactFiberContext.popContext
local popTopLevelLegacyContextObject = ReactFiberContext.popTopLevelContextObject
local popProvider = require(script.Parent["ReactFiberNewContext.new"]).popProvider
-- FIXME: this causes a circular require
local popRenderLanesRef
local popRenderLanes = function(...)
	if not popRenderLanesRef then
		popRenderLanesRef = require(script.Parent["ReactFiberWorkLoop.new"]).popRenderLanes
	end
	return popRenderLanesRef(...)
end
local transferActualDuration = require(script.Parent["ReactProfilerTimer.new"]).transferActualDuration

local invariant = require(Packages.Shared).invariant

local function unwindWork(workInProgress: Fiber, renderLanes: Lanes): Fiber?
	if workInProgress.tag == ReactWorkTags.ClassComponent then
		local Component = workInProgress.type
		if isLegacyContextProvider(Component) then
			popLegacyContext(workInProgress)
		end
		local flags = workInProgress.flags
		if bit32.band(flags, ReactFiberFlags.ShouldCapture) ~= 0 then
			workInProgress.flags =
				bit32.bor(bit32.band(flags, bit32.bnot(ReactFiberFlags.ShouldCapture)), ReactFiberFlags.DidCapture)
			if
				enableProfilerTimer
				and bit32.band(workInProgress.mode, ReactTypeOfMode.ProfileMode) ~= ReactTypeOfMode.NoMode
			then
				transferActualDuration(workInProgress)
			end
			return workInProgress
		end
		return nil
	elseif workInProgress.tag == ReactWorkTags.HostRoot then
		popHostContainer(workInProgress)
		popTopLevelLegacyContextObject(workInProgress)
		resetMutableSourceWorkInProgressVersions()
		local flags = workInProgress.flags
		invariant(
			bit32.band(flags, ReactFiberFlags.DidCapture) == ReactFiberFlags.NoFlags,
			"The root failed to unmount after an error. This is likely a bug in " .. "React. Please file an issue."
		)
		workInProgress.flags =
			bit32.bor(bit32.band(flags, bit32.bnot(ReactFiberFlags.ShouldCapture)), ReactFiberFlags.DidCapture)
		return workInProgress
	elseif workInProgress.tag == ReactWorkTags.HostComponent then
		-- TODO: popHydrationState
		popHostContext(workInProgress)
		return nil
	elseif workInProgress.tag == ReactWorkTags.SuspenseComponent then
		popSuspenseContext(workInProgress)
		if enableSuspenseServerRenderer then
			local suspenseState = workInProgress.memoizedState
			if suspenseState ~= nil and suspenseState.dehydrated ~= nil then
				invariant(
					workInProgress.alternate ~= nil,
					"Threw in newly mounted dehydrated component. This is likely a bug in "
						.. "React. Please file an issue."
				)
				resetHydrationState()
			end
		end
		local flags = workInProgress.flags
		if bit32.band(flags, ReactFiberFlags.ShouldCapture) ~= 0 then
			workInProgress.flags =
				bit32.bor(bit32.band(flags, bit32.bnot(ReactFiberFlags.ShouldCapture)), ReactFiberFlags.DidCapture)
			-- Captured a suspense effect. Re-render the boundary.
			if
				enableProfilerTimer
				and (bit32.band(workInProgress.mode, ReactTypeOfMode.ProfileMode) ~= ReactTypeOfMode.NoMode)
			then
				transferActualDuration(workInProgress)
			end
			return workInProgress
		end
		return nil
	elseif workInProgress.tag == ReactWorkTags.SuspenseListComponent then
		popSuspenseContext(workInProgress)
		-- SuspenseList doesn't actually catch anything. It should've been
		-- caught by a nested boundary. If not, it should bubble through.
		return nil
	elseif workInProgress.tag == ReactWorkTags.HostPortal then
		popHostContainer(workInProgress)
		return nil
	elseif workInProgress.tag == ReactWorkTags.ContextProvider then
		popProvider(workInProgress)
		return nil
	elseif
		workInProgress.tag == ReactWorkTags.OffscreenComponent
		or workInProgress.tag == ReactWorkTags.LegacyHiddenComponent
	then
		popRenderLanes(workInProgress)
		return nil
	else
		return nil
	end
end

function unwindInterruptedWork(interruptedWork: Fiber)
	if interruptedWork.tag == ReactWorkTags.ClassComponent then
		-- deviation: Lua doesn't support properties on functions
		local childContextTypes
		if typeof(interruptedWork.type) == "table" then
			childContextTypes = interruptedWork.type.childContextTypes
		end
		if childContextTypes ~= nil then
			popLegacyContext(interruptedWork)
		end
	elseif interruptedWork.tag == ReactWorkTags.HostRoot then
		popHostContainer(interruptedWork)
		popTopLevelLegacyContextObject(interruptedWork)
		resetMutableSourceWorkInProgressVersions()
	elseif interruptedWork.tag == ReactWorkTags.HostComponent then
		popHostContext(interruptedWork)
	elseif interruptedWork.tag == ReactWorkTags.HostPortal then
		popHostContainer(interruptedWork)
	elseif interruptedWork.tag == ReactWorkTags.SuspenseComponent then
		popSuspenseContext(interruptedWork)
	elseif interruptedWork.tag == ReactWorkTags.SuspenseListComponent then
		popSuspenseContext(interruptedWork)
	elseif interruptedWork.tag == ReactWorkTags.ContextProvider then
		popProvider(interruptedWork)
	elseif
		interruptedWork.tag == ReactWorkTags.OffscreenComponent
		or interruptedWork.tag == ReactWorkTags.LegacyHiddenComponent
	then
		popRenderLanes(interruptedWork)
		return
	else -- default
		return
	end
end

return {
	unwindWork = unwindWork,
	unwindInterruptedWork = unwindInterruptedWork,
}
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="371">
              <Properties>
                <string name="Name">ReactFiberWorkInProgress</string>
                <string name="Source"><![CDATA[--!strict
-- deviation: this is an extraction of a single state field
-- (and associated mutation/getters) from ReactFiberWorkLooop.new
-- which allows us to break dependency cycles involving that module
-- upstream: https://github.com/facebook/react/blob/56e9feead0f91075ba0a4f725c9e4e343bca1c67/packages/react-reconciler/src/ReactFiberWorkLoop.new.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]

local ReactFiberLane = require(script.Parent.ReactFiberLane)
local _workInProgressRootSkippedLanes: Lanes = ReactFiberLane.NoLanes
local mergeLanes = ReactFiberLane.mergeLanes
type Lanes = ReactFiberLane.Lanes
type Lane = ReactFiberLane.Lane

local exports = {}

-- TODO: turn this into newindex property accessor
exports.workInProgressRootSkippedLanes = function(value: Lanes?): Lanes
	if value == nil then
		return _workInProgressRootSkippedLanes
	end

	-- FIXME Luau: Luau should narrow based on guard above
	_workInProgressRootSkippedLanes = value :: Lanes
	return _workInProgressRootSkippedLanes
end

exports.markSkippedUpdateLanes = function(lane: Lane | Lanes): ()
	_workInProgressRootSkippedLanes = mergeLanes(lane, _workInProgressRootSkippedLanes)
end

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="372">
              <Properties>
                <string name="Name">ReactFiberWorkLoop.new</string>
                <string name="Source"><![CDATA[-- upstream: https://github.com/facebook/react/blob/56e9feead0f91075ba0a4f725c9e4e343bca1c67/packages/react-reconciler/src/ReactFiberWorkLoop.new.js
--!nonstrict
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]
local __DEV__ = _G.__DEV__
local __YOLO__ = _G.__YOLO__

local Packages = script.Parent.Parent
-- NOTE: use patched console from shared
local console = require(Packages.Shared).console
local LuauPolyfill = require(Packages.LuauPolyfill)
local Set = LuauPolyfill.Set
type Set<T> = LuauPolyfill.Set<T>
type Array<T> = LuauPolyfill.Array<T>

local exports: any = {}

local ReactTypes = require(Packages.Shared)
type Thenable<T> = ReactTypes.Thenable<T>
type Wakeable = ReactTypes.Wakeable

local ReactInternalTypes = require(script.Parent.ReactInternalTypes)
type Fiber = ReactInternalTypes.Fiber
type FiberRoot = ReactInternalTypes.FiberRoot
type ReactPriorityLevel = ReactInternalTypes.ReactPriorityLevel
local ReactFiberLane = require(script.Parent.ReactFiberLane)
type Lanes = ReactFiberLane.Lanes
type Lane = ReactFiberLane.Lane
-- The scheduler is imported here *only* to detect whether it's been mocked
local Scheduler = require(Packages.Scheduler)
-- deviation: we import from top-level Scheduler exports to avoid direct file access

type Interaction = Scheduler.Interaction

local ReactFiberSuspenseComponent = require(script.Parent["ReactFiberSuspenseComponent.new"])
type SuspenseState = ReactFiberSuspenseComponent.SuspenseState
local ReactFiberStack = require(script.Parent["ReactFiberStack.new"])
type StackCursor<T> = ReactFiberStack.StackCursor<T>

local ReactFeatureFlags = require(Packages.Shared).ReactFeatureFlags
-- deviation: Use some properties directly instead of localizing to avoid 200 limit
-- local enableSuspenseServerRenderer = ReactFeatureFlags.enableSuspenseServerRenderer
-- local replayFailedUnitOfWorkWithInvokeGuardedCallback = ReactFeatureFlags.replayFailedUnitOfWorkWithInvokeGuardedCallback
-- local warnAboutUnmockedScheduler = ReactFeatureFlags.warnAboutUnmockedScheduler
-- local deferRenderPhaseUpdateToNextBatch = ReactFeatureFlags.ReactFeatureFlags.deferRenderPhaseUpdateToNextBatch
-- local decoupleUpdatePriorityFromScheduler = ReactFeatureFlags.ReactFeatureFlags.decoupleUpdatePriorityFromScheduler
local enableDebugTracing = ReactFeatureFlags.enableDebugTracing
local enableSchedulingProfiler = ReactFeatureFlags.enableSchedulingProfiler
local skipUnmountedBoundaries = ReactFeatureFlags.skipUnmountedBoundaries
local enableDoubleInvokingEffects = ReactFeatureFlags.enableDoubleInvokingEffects
local ReactShared = require(Packages.Shared)
-- deviation: we pull in Dispatcher type because we need it for our lazy loading deviations to typecheck
type Dispatcher = ReactShared.Dispatcher
local describeError = require(Packages.Shared).describeError
local ReactSharedInternals = ReactShared.ReactSharedInternals
local invariant = ReactShared.invariant

local SchedulerWithReactIntegration = require(script.Parent["SchedulerWithReactIntegration.new"])
local scheduleCallback = SchedulerWithReactIntegration.scheduleCallback
local cancelCallback = SchedulerWithReactIntegration.cancelCallback
local getCurrentPriorityLevel = SchedulerWithReactIntegration.getCurrentPriorityLevel
local runWithPriority = SchedulerWithReactIntegration.runWithPriority
local shouldYield = SchedulerWithReactIntegration.shouldYield
local requestPaint = SchedulerWithReactIntegration.requestPaint
local now = SchedulerWithReactIntegration.now
local NoSchedulerPriority = SchedulerWithReactIntegration.NoPriority
local ImmediateSchedulerPriority = SchedulerWithReactIntegration.ImmediatePriority
local UserBlockingSchedulerPriority = SchedulerWithReactIntegration.UserBlockingPriority
local NormalSchedulerPriority = SchedulerWithReactIntegration.NormalPriority
local flushSyncCallbackQueue = SchedulerWithReactIntegration.flushSyncCallbackQueue
local scheduleSyncCallback = SchedulerWithReactIntegration.scheduleSyncCallback
-- deviation: Use properties directly instead of localizing to avoid 200 limit
-- local {
--   DebugTracing.logCommitStarted,
--   DebugTracing.logCommitStopped,
--   DebugTracing.logLayoutEffectsStarted,
--   DebugTracing.logLayoutEffectsStopped,
--   logPassiveEffectsStarted,
--   DebugTracing.logPassiveEffectsStopped,
--   DebugTracing.logRenderStarted,
--   DebugTracing.logRenderStopped,
local DebugTracing = require(script.Parent.DebugTracing)
-- local {
--   SchedulingProfiler.markCommitStarted,
--   SchedulingProfiler.markCommitStopped,
--   SchedulingProfiler.markLayoutEffectsStarted,
--   SchedulingProfiler.markLayoutEffectsStopped,
--   SchedulingProfiler.markPassiveEffectsStarted,
--   SchedulingProfiler.markPassiveEffectsStopped,
--   SchedulingProfiler.markRenderStarted,
--   SchedulingProfiler.markRenderYielded,
--   SchedulingProfiler.markRenderStopped,
local SchedulingProfiler = require(script.Parent.SchedulingProfiler)

local SchedulerTracing = require(Packages.Scheduler).tracing
local __interactionsRef, __subscriberRef = SchedulerTracing.__interactionsRef, SchedulerTracing.__subscriberRef

local ReactFiberHostConfig = require(script.Parent.ReactFiberHostConfig)
-- deviation: Use properties directly instead of localizing to avoid 200 limit
-- local prepareForCommit = ReactFiberHostConfig.prepareForCommit
-- local resetAfterCommit = ReactFiberHostConfig.resetAfterCommit
-- local scheduleTimeout = ReactFiberHostConfig.scheduleTimeout
-- local cancelTimeout = ReactFiberHostConfig.cancelTimeout
-- local noTimeout = ReactFiberHostConfig.noTimeout
-- local warnsIfNotActing = ReactFiberHostConfig.warnsIfNotActing
-- local beforeActiveInstanceBlur = ReactFiberHostConfig.beforeActiveInstanceBlur
-- local afterActiveInstanceBlur = ReactFiberHostConfig.afterActiveInstanceBlur
-- local clearContainer = ReactFiberHostConfig.clearContainer

local ReactFiber = require(script.Parent["ReactFiber.new"])
-- deviation: Use properties directly instead of localizing to avoid 200 limit
-- local createWorkInProgress = ReactFiber.createWorkInProgress
-- local assignFiberPropertiesInDEV = ReactFiber.assignFiberPropertiesInDEV
local ReactTypeOfMode = require(script.Parent.ReactTypeOfMode)
-- deviation: Use properties directly instead of localizing to avoid 200 limit
-- local NoMode = ReactTypeOfMode.NoMode
-- local StrictMode = ReactTypeOfMode.StrictMode
-- local ProfileMode = ReactTypeOfMode.ProfileMode
-- local BlockingMode = ReactTypeOfMode.BlockingMode
-- local ConcurrentMode = ReactTypeOfMode.ConcurrentMode
local ReactWorkTags = require(script.Parent.ReactWorkTags)
-- deviation: Use properties directly instead of localizing to avoid 200 limit
-- local HostRoot = ReactWorkTags.HostRoot
-- local IndeterminateComponent = ReactWorkTags.IndeterminateComponent
-- local ClassComponent = ReactWorkTags.ClassComponent
-- local SuspenseComponent = ReactWorkTags.SuspenseComponent
-- local SuspenseListComponent = ReactWorkTags.SuspenseListComponent
-- local FunctionComponent = ReactWorkTags.FunctionComponent
-- local ForwardRef = ReactWorkTags.ForwardRef
-- local MemoComponent = ReactWorkTags.MemoComponent
-- local SimpleMemoComponent = ReactWorkTags.SimpleMemoComponent
local LegacyRoot = require(script.Parent.ReactRootTags).LegacyRoot
local ReactFiberFlags = require(script.Parent.ReactFiberFlags)
type Flags = ReactFiberFlags.Flags
-- deviation: Use properties directly instead of localizing to avoid 200 limit
-- local NoFlags = ReactFiberFlags.NoFlags
-- local Placement = ReactFiberFlags.Placement
-- local Incomplete = ReactFiberFlags.Incomplete
-- local HostEffectMask = ReactFiberFlags.HostEffectMask
-- local Hydrating = ReactFiberFlags.Hydrating
-- local BeforeMutationMask = ReactFiberFlags.BeforeMutationMask
-- local MutationMask = ReactFiberFlags.MutationMask
-- local LayoutMask = ReactFiberFlags.LayoutMask
-- local PassiveMask = ReactFiberFlags.PassiveMask
-- local NoLane = ReactFiberLane.NoLane
local SyncLane = ReactFiberLane.SyncLane
local SyncBatchedLane = ReactFiberLane.SyncBatchedLane
local NoTimestamp = ReactFiberLane.NoTimestamp
local findUpdateLane = ReactFiberLane.findUpdateLane
local findTransitionLane = ReactFiberLane.findTransitionLane
local findRetryLane = ReactFiberLane.findRetryLane
local includesSomeLane = ReactFiberLane.includesSomeLane
local isSubsetOfLanes = ReactFiberLane.isSubsetOfLanes
local mergeLanes = ReactFiberLane.mergeLanes
local removeLanes = ReactFiberLane.removeLanes
local pickArbitraryLane = ReactFiberLane.pickArbitraryLane
local hasDiscreteLanes = ReactFiberLane.hasDiscreteLanes
local includesNonIdleWork = ReactFiberLane.includesNonIdleWork
local includesOnlyRetries = ReactFiberLane.includesOnlyRetries
local includesOnlyTransitions = ReactFiberLane.includesOnlyTransitions
local getNextLanes = ReactFiberLane.getNextLanes
local returnNextLanesPriority = ReactFiberLane.returnNextLanesPriority
local setCurrentUpdateLanePriority = ReactFiberLane.setCurrentUpdateLanePriority
local getCurrentUpdateLanePriority = ReactFiberLane.getCurrentUpdateLanePriority
local markStarvedLanesAsExpired = ReactFiberLane.markStarvedLanesAsExpired
local getLanesToRetrySynchronouslyOnError = ReactFiberLane.getLanesToRetrySynchronouslyOnError
local getMostRecentEventTime = ReactFiberLane.getMostRecentEventTime
local markRootUpdated = ReactFiberLane.markRootUpdated
local markRootSuspended_dontCallThisOneDirectly = ReactFiberLane.markRootSuspended
local markRootPinged = ReactFiberLane.markRootPinged
local markRootExpired = ReactFiberLane.markRootExpired
local markDiscreteUpdatesExpired = ReactFiberLane.markDiscreteUpdatesExpired
local markRootFinished = ReactFiberLane.markRootFinished
local schedulerPriorityToLanePriority = ReactFiberLane.schedulerPriorityToLanePriority
local lanePriorityToSchedulerPriority = ReactFiberLane.lanePriorityToSchedulerPriority
local ReactFiberTransition = require(script.Parent.ReactFiberTransition)
-- deviation: Use properties directly instead of localizing to avoid 200 limit
-- local requestCurrentTransition = ReactFiberTransition.requestCurrentTransition
-- local NoTransition = ReactFiberTransition.NoTransition

local ReactFiberUnwindWork = require(script.Parent["ReactFiberUnwindWork.new"]) :: any
local unwindWork = ReactFiberUnwindWork.unwindWork
local unwindInterruptedWork = ReactFiberUnwindWork.unwindInterruptedWork
local ReactFiberThrow = require(script.Parent["ReactFiberThrow.new"]) :: any
local throwException = ReactFiberThrow.throwException
local createRootErrorUpdate = ReactFiberThrow.createRootErrorUpdate
local createClassErrorUpdate = ReactFiberThrow.createClassErrorUpdate
local ReactFiberCommitWork = require(script.Parent["ReactFiberCommitWork.new"])
local commitBeforeMutationEffectOnFiber = ReactFiberCommitWork.commitBeforeMutationLifeCycles
local commitPlacement = ReactFiberCommitWork.commitPlacement
local commitWork = ReactFiberCommitWork.commitWork
local commitDeletion = ReactFiberCommitWork.commitDeletion
local commitPassiveUnmountOnFiber = ReactFiberCommitWork.commitPassiveUnmount
local commitPassiveUnmountInsideDeletedTreeOnFiber = ReactFiberCommitWork.commitPassiveUnmountInsideDeletedTree
local commitPassiveMountOnFiber = ReactFiberCommitWork.commitPassiveMount
local commitDetachRef = ReactFiberCommitWork.commitDetachRef
-- local commitAttachRef = ReactFiberCommitWork.commitAttachRef
-- local commitResetTextContent = ReactFiberCommitWork.commitResetTextContent
-- local isSuspenseBoundaryBeingHidden = ReactFiberCommitWork.isSuspenseBoundaryBeingHidden
local invokeLayoutEffectMountInDEV = ReactFiberCommitWork.invokeLayoutEffectMountInDEV
local invokePassiveEffectMountInDEV = ReactFiberCommitWork.invokePassiveEffectMountInDEV
local invokeLayoutEffectUnmountInDEV = ReactFiberCommitWork.invokeLayoutEffectUnmountInDEV
local invokePassiveEffectUnmountInDEV = ReactFiberCommitWork.invokePassiveEffectUnmountInDEV
local recursivelyCommitLayoutEffects = ReactFiberCommitWork.recursivelyCommitLayoutEffects

local Promise = require(Packages.Promise)

local enqueueUpdate = require(script.Parent["ReactUpdateQueue.new"]).enqueueUpdate

local resetContextDependencies = require(script.Parent["ReactFiberNewContext.new"]).resetContextDependencies

-- deviation: Pre-declare function
local ensureRootIsScheduled

-- deviation: lazy init for functions from ReactFiberHooks, put in table b/c local var limit
local lazyInitRefs = {
	resetHooksAfterThrowRef = (nil :: any) :: (...any) -> ...any,
	ContextOnlyDispatcherRef = (nil :: any) :: Dispatcher,
	getIsUpdatingOpaqueValueInRenderPhaseInDEVRef = (nil :: any) :: (...any) -> ...any,
	originalBeginWorkRef = (nil :: any) :: (...any) -> ...any,
	completeWorkRef = (nil :: any) :: (...any) -> ...any,
}

-- deviation: lazy initialize beginwork to break cyclic dependencies
local originalBeginWork = function(current: Fiber | nil, workInProgress: Fiber, renderLanes: Lanes): Fiber | nil
	if not lazyInitRefs.originalBeginWorkRef then
		lazyInitRefs.originalBeginWorkRef = require(script.Parent["ReactFiberBeginWork.new"]).beginWork
	end
	return lazyInitRefs.originalBeginWorkRef(current, workInProgress, renderLanes)
end

local completeWork = function(current: Fiber | nil, workInProgress: Fiber, renderLanes: Lanes): Fiber | nil
	if not lazyInitRefs.completeWorkRef then
		lazyInitRefs.completeWorkRef = require(script.Parent["ReactFiberCompleteWork.new"]).completeWork
	end
	return (lazyInitRefs.completeWorkRef :: any)(current, workInProgress, renderLanes)
end

local ReactFiberHooks
-- deviation: lazy init for functions from ReactFiberHooks
local function initReactFiberHooks()
	ReactFiberHooks = require(script.Parent["ReactFiberHooks.new"])
	lazyInitRefs.resetHooksAfterThrowRef = ReactFiberHooks.resetHooksAfterThrow
	lazyInitRefs.ContextOnlyDispatcherRef = ReactFiberHooks.ContextOnlyDispatcher
	lazyInitRefs.getIsUpdatingOpaqueValueInRenderPhaseInDEVRef =
		ReactFiberHooks.getIsUpdatingOpaqueValueInRenderPhaseInDEV
end

-- deviation: lazy init for resetHooksAfterThrow from ReactFiberHooks
local resetHooksAfterThrow = function(): ()
	if not lazyInitRefs.resetHooksAfterThrowRef then
		initReactFiberHooks()
	end
	return lazyInitRefs.resetHooksAfterThrowRef()
end

-- deviation: lazy init for ContextOnlyDispatcher from ReactFiberHooks
local ContextOnlyDispatcher = function(): Dispatcher
	if not lazyInitRefs.ContextOnlyDispatcherRef then
		initReactFiberHooks()
	end
	return lazyInitRefs.ContextOnlyDispatcherRef
end

-- deviation: lazy init for getIsUpdatingOpaqueValueInRenderPhaseInDEV from ReactFiberHooks
local getIsUpdatingOpaqueValueInRenderPhaseInDEV = function(): boolean?
	if not lazyInitRefs.getIsUpdatingOpaqueValueInRenderPhaseInDEVRef then
		initReactFiberHooks()
	end
	return lazyInitRefs.getIsUpdatingOpaqueValueInRenderPhaseInDEVRef()
end

local createCapturedValue = require(script.Parent.ReactCapturedValue).createCapturedValue
local pushToStack = ReactFiberStack.push
local popFromStack = ReactFiberStack.pop
local createCursor = ReactFiberStack.createCursor

local ReactProfilerTimer = require(script.Parent["ReactProfilerTimer.new"])

-- DEV stuff
local getComponentName = require(Packages.Shared).getComponentName
local ReactStrictModeWarnings = require(script.Parent["ReactStrictModeWarnings.new"])
local ReactCurrentFiber = require(script.Parent.ReactCurrentFiber)
-- deviation: these two properties would be captured as values instead of bound
-- local ReactCurrentDebugFiberIsRenderingInDEV = ReactCurrentFiber.isRendering
local ReactCurrentFiberCurrent = ReactCurrentFiber.current
local resetCurrentDebugFiberInDEV = ReactCurrentFiber.resetCurrentFiber
local setCurrentDebugFiberInDEV = ReactCurrentFiber.setCurrentFiber
local ReactErrorUtils = require(Packages.Shared).ReactErrorUtils
local invokeGuardedCallback = ReactErrorUtils.invokeGuardedCallback
local hasCaughtError = ReactErrorUtils.hasCaughtError
local clearCaughtError = ReactErrorUtils.clearCaughtError
local onCommitRootDevTools = require(script.Parent["ReactFiberDevToolsHook.new"]).onCommitRoot
local onCommitRootTestSelector = require(script.Parent.ReactTestSelectors).onCommitRoot

-- Used by `act`
local enqueueTask = require(Packages.Shared).enqueueTask
local doesFiberContain = require(script.Parent.ReactFiberTreeReflection).doesFiberContain

local ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher
local ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner
local IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing
local captureCommitPhaseErrorOnRoot, flushPassiveMountEffects

-- local ceil = math.ceil

-- deviation: Pre-declare functions
local mod: { [string]: any } = {}

type ExecutionContext = number

local NoContext = --[[                    ]]
	0b0000000
local BatchedContext = --[[               ]]
	0b0000001
local EventContext = --[[                 ]]
	0b0000010
local DiscreteEventContext = --[[         ]]
	0b0000100
local LegacyUnbatchedContext = --[[       ]]
	0b0001000
local RenderContext = --[[                ]]
	0b0010000
local CommitContext = --[[                ]]
	0b0100000
local RetryAfterError = --[[              ]]
	0b1000000

exports.NoContext = NoContext
exports.RetryAfterError = RetryAfterError

-- deviation: Luau doesn't yet support literal types
-- type RootExitStatus = 0 | 1 | 2 | 3 | 4 | 5
type RootExitStatus = number
-- deviation: Define constants in a table instead of locals to avoid 200 limit
local RootExitStatus: { [string]: RootExitStatus } = {
	Incomplete = 0,
	FatalErrored = 1,
	Errored = 2,
	Suspended = 3,
	SuspendedWithDelay = 4,
	Completed = 5,
}

-- Describes where we are in the React execution stack
local executionContext: ExecutionContext = NoContext
-- The root we're working on
local workInProgressRoot: FiberRoot? = nil
-- The fiber we're working on
local workInProgress: Fiber? = nil
-- The lanes we're rendering
local workInProgressRootRenderLanes: Lanes = ReactFiberLane.NoLanes

-- Stack that allows components to change the render lanes for its subtree
-- This is a superset of the lanes we started working on at the root. The only
-- case where it's different from `workInProgressRootRenderLanes` is when we
-- enter a subtree that is hidden and needs to be unhidden: Suspense and
-- Offscreen component.
--
-- Most things in the work loop should deal with workInProgressRootRenderLanes.
-- Most things in begin/complete phases should deal with exports.subtreeRenderLanes.
exports.subtreeRenderLanes = ReactFiberLane.NoLanes
local subtreeRenderLanesCursor: StackCursor<Lanes> = createCursor(ReactFiberLane.NoLanes)

-- Whether to root completed, errored, suspended, etc.
local workInProgressRootExitStatus: RootExitStatus = RootExitStatus.Incomplete
-- A fatal error, if one is thrown
local workInProgressRootFatalError: any = nil
-- "Included" lanes refer to lanes that were worked on during this render. It's
-- slightly different than `renderLanes` because `renderLanes` can change as you
-- enter and exit an Offscreen tree. This value is the combination of all render
-- lanes for the entire render phase.
local workInProgressRootIncludedLanes: Lanes = ReactFiberLane.NoLanes
-- The work left over by components that were visited during this render. Only
-- includes unprocessed updates, not work in bailed out children.
local ReactFiberWorkInProgress = require(script.Parent.ReactFiberWorkInProgress)
local workInProgressRootSkippedLanes: (value: Lanes?) -> Lanes = ReactFiberWorkInProgress.workInProgressRootSkippedLanes --: Lanes = ReactFiberLane.NoLanes
-- Lanes that were updated (in an interleaved event) during this render.
local workInProgressRootUpdatedLanes: Lanes = ReactFiberLane.NoLanes
-- Lanes that were pinged (in an interleaved event) during this render.
local workInProgressRootPingedLanes: Lanes = ReactFiberLane.NoLanes

local mostRecentlyUpdatedRoot: FiberRoot | nil = nil

-- The most recent time we committed a fallback. This lets us ensure a train
-- model where we don't commit new loading states in too quick succession.
local globalMostRecentFallbackTime: number = 0
local FALLBACK_THROTTLE_MS: number = 500

-- The absolute time for when we should start giving up on rendering
-- more and prefer CPU suspense heuristics instead.
local workInProgressRootRenderTargetTime: number = math.huge
-- How long a render is supposed to take before we start following CPU
-- suspense heuristics and opt out of rendering more content.
local RENDER_TIMEOUT_MS = 500

-- Used to avoid traversing the return path to find the nearest Profiler ancestor during commit.
local nearestProfilerOnStack: Fiber | nil = nil

local function resetRenderTimer()
	workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS
end

exports.getRenderTargetTime = function(): number
	return workInProgressRootRenderTargetTime
end

local hasUncaughtError = false
local firstUncaughtError = nil
local legacyErrorBoundariesThatAlreadyFailed: Set<any> | nil = nil

local rootDoesHavePassiveEffects: boolean = false
local rootWithPendingPassiveEffects: FiberRoot? = nil
local pendingPassiveEffectsRenderPriority: ReactPriorityLevel = NoSchedulerPriority
local pendingPassiveEffectsLanes: Lanes = ReactFiberLane.NoLanes

local rootsWithPendingDiscreteUpdates: Set<ReactInternalTypes.FiberRoot> | nil = nil

-- Use these to prevent an infinite loop of nested updates
local NESTED_UPDATE_LIMIT = 50
local nestedUpdateCount: number = 0
local rootWithNestedUpdates: FiberRoot | nil = nil

local NESTED_PASSIVE_UPDATE_LIMIT = 50
local nestedPassiveUpdateCount: number = 0

-- Marks the need to reschedule pending interactions at these lanes
-- during the commit phase. This enables them to be traced across components
-- that spawn new work during render. E.g. hidden boundaries, suspended SSR
-- hydration or SuspenseList.
-- TODO: Can use a bitmask instead of an array
local spawnedWorkDuringRender: nil | Array<Lane | Lanes> = nil

-- If two updates are scheduled within the same event, we should treat their
-- event times as simultaneous, even if the actual clock time has advanced
-- between the first and second call.
local currentEventTime: number = NoTimestamp
local currentEventWipLanes: Lanes = ReactFiberLane.NoLanes
local currentEventPendingLanes: Lanes = ReactFiberLane.NoLanes

local focusedInstanceHandle: nil | Fiber = nil
local shouldFireAfterActiveInstanceBlur: boolean = false

exports.getWorkInProgressRoot = function(): FiberRoot?
	return workInProgressRoot
end

exports.requestEventTime = function()
	if bit32.band(executionContext, bit32.bor(RenderContext, CommitContext)) ~= NoContext then
		-- We're inside React, so it's fine to read the actual time.
		return now()
	end
	-- We're not inside React, so we may be in the middle of a browser event.
	if currentEventTime ~= NoTimestamp then
		-- Use the same start time for all updates until we enter React again.
		return currentEventTime
	end
	-- This is the first update since React yielded. Compute a new start time.
	currentEventTime = now()
	return currentEventTime
end

-- exports.getCurrentTime()
--   return now()
-- end

exports.requestUpdateLane = function(fiber: Fiber): Lane
	-- Special cases
	local mode = fiber.mode
	if bit32.band(mode, ReactTypeOfMode.BlockingMode) == ReactTypeOfMode.NoMode then
		return SyncLane :: Lane
	elseif bit32.band(mode, ReactTypeOfMode.ConcurrentMode) == ReactTypeOfMode.NoMode then
		return if getCurrentPriorityLevel() == ImmediateSchedulerPriority
			then SyncLane :: Lane
			else SyncBatchedLane :: Lane
	elseif
		not ReactFeatureFlags.deferRenderPhaseUpdateToNextBatch
		and bit32.band(executionContext, RenderContext) ~= NoContext
		and workInProgressRootRenderLanes ~= ReactFiberLane.NoLanes
	then
		-- This is a render phase update. These are not officially supported. The
		-- old behavior is to give this the same "thread" (expiration time) as
		-- whatever is currently rendering. So if you call `setState` on a component
		-- that happens later in the same render, it will flush. Ideally, we want to
		-- remove the special case and treat them as if they came from an
		-- interleaved event. Regardless, this pattern is not officially supported.
		-- This behavior is only a fallback. The flag only exists until we can roll
		-- out the setState warning, since existing code might accidentally rely on
		-- the current behavior.
		return pickArbitraryLane(workInProgressRootRenderLanes)
	end

	-- The algorithm for assigning an update to a lane should be stable for all
	-- updates at the same priority within the same event. To do this, the inputs
	-- to the algorithm must be the same. For example, we use the `renderLanes`
	-- to avoid choosing a lane that is already in the middle of rendering.
	--
	-- However, the "included" lanes could be mutated in between updates in the
	-- same event, like if you perform an update inside `flushSync`. Or any other
	-- code path that might call `prepareFreshStack`.
	--
	-- The trick we use is to cache the first of each of these inputs within an
	-- event. Then reset the cached values once we can be sure the event is over.
	-- Our heuristic for that is whenever we enter a concurrent work loop.
	--
	-- We'll do the same for `currentEventPendingLanes` below.
	if currentEventWipLanes == ReactFiberLane.NoLanes then
		currentEventWipLanes = workInProgressRootIncludedLanes
	end

	local isTransition = ReactFiberTransition.requestCurrentTransition() ~= ReactFiberTransition.NoTransition
	if isTransition then
		if currentEventPendingLanes ~= ReactFiberLane.NoLanes then
			if mostRecentlyUpdatedRoot ~= nil then
				currentEventPendingLanes = mostRecentlyUpdatedRoot.pendingLanes
			else
				currentEventPendingLanes = ReactFiberLane.NoLanes
			end
		end
		return findTransitionLane(currentEventWipLanes, currentEventPendingLanes)
	end

	-- TODO: Remove this dependency on the Scheduler priority.
	-- To do that, we're replacing it with an update lane priority.
	local schedulerPriority = getCurrentPriorityLevel()

	-- The old behavior was using the priority level of the Scheduler.
	-- This couples React to the Scheduler internals, so we're replacing it
	-- with the currentUpdateLanePriority above. As an example of how this
	-- could be problematic, if we're not inside `Scheduler.runWithPriority`,
	-- then we'll get the priority of the current running Scheduler task,
	-- which is probably not what we want.
	local lane
	if
		-- TODO: Temporary. We're removing the concept of discrete updates.
		bit32.band(executionContext, DiscreteEventContext) ~= NoContext
		and schedulerPriority == UserBlockingSchedulerPriority
	then
		lane = findUpdateLane(ReactFiberLane.InputDiscreteLanePriority, currentEventWipLanes)
	else
		local schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority)

		if ReactFeatureFlags.decoupleUpdatePriorityFromScheduler then
			-- In the new strategy, we will track the current update lane priority
			-- inside React and use that priority to select a lane for this update.
			-- For now, we're just logging when they're different so we can assess.
			local currentUpdateLanePriority = getCurrentUpdateLanePriority()

			if
				schedulerLanePriority ~= currentUpdateLanePriority
				and currentUpdateLanePriority ~= ReactFiberLane.NoLanePriority
			then
				if __DEV__ then
					console.error(
						"Expected current scheduler lane priority %s to match current update lane priority %s",
						tostring(schedulerLanePriority),
						tostring(currentUpdateLanePriority)
					)
				end
			end
		end

		lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes)
	end

	return lane
end

function requestRetryLane(fiber: Fiber): Lane
	-- This is a fork of `requestUpdateLane` designed specifically for Suspense
	-- "retries" — a special update that attempts to flip a Suspense boundary
	-- from its placeholder state to its primary/resolved state.

	-- Special cases
	local mode = fiber.mode
	if bit32.band(mode, ReactTypeOfMode.BlockingMode) == ReactTypeOfMode.NoMode then
		return SyncLane :: Lane
	elseif bit32.band(mode, ReactTypeOfMode.ConcurrentMode) == ReactTypeOfMode.NoMode then
		return if getCurrentPriorityLevel() == ImmediateSchedulerPriority
			then SyncLane :: Lane
			else SyncBatchedLane :: Lane
	end

	-- See `requestUpdateLane` for explanation of `currentEventWipLanes`
	if currentEventWipLanes == ReactFiberLane.NoLanes then
		currentEventWipLanes = workInProgressRootIncludedLanes
	end
	return findRetryLane(currentEventWipLanes)
end

exports.scheduleUpdateOnFiber = function(fiber: Fiber, lane: Lane, eventTime: number): FiberRoot | nil
	mod.checkForNestedUpdates()

	local root = mod.markUpdateLaneFromFiberToRoot(fiber, lane)
	if root == nil then
		return nil
	end

	-- Mark that the root has a pending update.
	markRootUpdated(root, lane, eventTime)

	if root == workInProgressRoot then
		-- Received an update to a tree that's in the middle of rendering. Mark
		-- that there was an interleaved update work on this root. Unless the
		-- `ReactFeatureFlags.deferRenderPhaseUpdateToNextBatch` flag is off and this is a render
		-- phase update. In that case, we don't treat render phase updates as if
		-- they were interleaved, for backwards compat reasons.
		mod.warnAboutRenderPhaseUpdatesInDEV(fiber)

		if
			ReactFeatureFlags.deferRenderPhaseUpdateToNextBatch
			or bit32.band(executionContext, RenderContext) == NoContext
		then
			workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane)
		end
		if workInProgressRootExitStatus == RootExitStatus.SuspendedWithDelay then
			-- The root already suspended with a delay, which means this render
			-- definitely won't finish. Since we have a new update, let's mark it as
			-- suspended now, right before marking the incoming update. This has the
			-- effect of interrupting the current render and switching to the update.
			-- TODO: Make sure this doesn't override pings that happen while we've
			-- already started rendering.
			mod.markRootSuspended(root, workInProgressRootRenderLanes)
		end
	end

	-- TODO: requestUpdateLanePriority also reads the priority. Pass the
	-- priority as an argument to that function and this one.
	local priorityLevel = getCurrentPriorityLevel()

	if lane == SyncLane then
		if
			-- Check if we're inside unbatchedUpdates
			bit32.band(executionContext, LegacyUnbatchedContext) ~= NoContext
			-- Check if we're not already rendering
			and bit32.band(executionContext, bit32.bor(RenderContext, CommitContext)) == NoContext
		then
			-- Register pending interactions on the root to avoid losing traced interaction data.
			mod.schedulePendingInteractions(root, lane)

			-- This is a legacy edge case. The initial mount of a ReactDOM.render-ed
			-- root inside of batchedUpdates should be synchronous, but layout updates
			-- should be deferred until the end of the batch.
			mod.performSyncWorkOnRoot(root)
		else
			ensureRootIsScheduled(root, eventTime)
			mod.schedulePendingInteractions(root, lane)
			if executionContext == NoContext then
				-- Flush the synchronous work now, unless we're already working or inside
				-- a batch. This is intentionally inside scheduleUpdateOnFiber instead of
				-- scheduleCallbackForFiber to preserve the ability to schedule a callback
				-- without immediately flushing it. We only do this for user-initiated
				-- updates, to preserve historical behavior of legacy mode.
				resetRenderTimer()
				flushSyncCallbackQueue()
			end
		end
	else
		-- Schedule a discrete update but only if it's not Sync.
		if
			bit32.band(executionContext, DiscreteEventContext) ~= NoContext
			-- Only updates at user-blocking priority or greater are considered
			-- discrete, even inside a discrete event.
			and (priorityLevel == UserBlockingSchedulerPriority or priorityLevel == ImmediateSchedulerPriority)
		then
			-- This is the result of a discrete event. Track the lowest priority
			-- discrete update per root so we can flush them early, if needed.
			if rootsWithPendingDiscreteUpdates == nil then
				rootsWithPendingDiscreteUpdates = Set.new({ root })
			else
				rootsWithPendingDiscreteUpdates:add(root)
			end
		end
		-- Schedule other updates after in case the callback is sync.
		ensureRootIsScheduled(root, eventTime)
		mod.schedulePendingInteractions(root, lane)
	end

	-- We use this when assigning a lane for a transition inside
	-- `requestUpdateLane`. We assume it's the same as the root being updated,
	-- since in the common case of a single root app it probably is. If it's not
	-- the same root, then it's not a huge deal, we just might batch more stuff
	-- together more than necessary.
	mostRecentlyUpdatedRoot = root
	return root
end

-- This is split into a separate function so we can mark a fiber with pending
-- work without treating it as a typical update that originates from an event
-- e.g. retrying a Suspense boundary isn't an update, but it does schedule work
-- on a fiber.
mod.markUpdateLaneFromFiberToRoot = function(sourceFiber: Fiber, lane: Lane): FiberRoot?
	-- Update the source fiber's lanes
	sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane)
	local alternate = sourceFiber.alternate
	if alternate ~= nil then
		alternate.lanes = mergeLanes(alternate.lanes, lane)
	end
	if __DEV__ then
		if
			alternate == nil
			and bit32.band(sourceFiber.flags, bit32.bor(ReactFiberFlags.Placement, ReactFiberFlags.Hydrating))
				~= ReactFiberFlags.NoFlags
		then
			mod.warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber)
		end
	end
	-- Walk the parent path to the root and update the child expiration time.
	local node = sourceFiber
	local parent = sourceFiber.return_
	while parent ~= nil do
		parent.childLanes = mergeLanes(parent.childLanes, lane)
		alternate = parent.alternate
		if alternate ~= nil then
			alternate.childLanes = mergeLanes(alternate.childLanes, lane)
		else
			if __DEV__ then
				if
					bit32.band(parent.flags, bit32.bor(ReactFiberFlags.Placement, ReactFiberFlags.Hydrating))
					~= ReactFiberFlags.NoFlags
				then
					mod.warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber)
				end
			end
		end
		node = parent
		parent = parent.return_
	end
	if node.tag == ReactWorkTags.HostRoot then
		local root: FiberRoot = node.stateNode
		return root
	else
		return nil
	end
end

-- Use this function to schedule a task for a root. There's only one task per
-- root; if a task was already scheduled, we'll check to make sure the priority
-- of the existing task is the same as the priority of the next level that the
-- root has work on. This function is called on every update, and right before
-- exiting a task.
ensureRootIsScheduled = function(root: FiberRoot, currentTime: number)
	local existingCallbackNode = root.callbackNode

	-- Check if any lanes are being starved by other work. If so, mark them as
	-- expired so we know to work on those next.
	markStarvedLanesAsExpired(root, currentTime)

	-- Determine the next lanes to work on, and their priority.
	local lanes
	if root == workInProgressRoot then
		lanes = workInProgressRootRenderLanes
	else
		lanes = ReactFiberLane.NoLanes
	end
	local nextLanes = getNextLanes(root, lanes)
	-- This returns the priority level computed during the `getNextLanes` call.
	local newCallbackPriority = returnNextLanesPriority()

	if nextLanes == ReactFiberLane.NoLanes then
		-- Special case: There's nothing to work on.
		if existingCallbackNode ~= nil then
			cancelCallback(existingCallbackNode)
			root.callbackNode = nil
			root.callbackPriority = ReactFiberLane.NoLanePriority
		end
		return
	end

	-- Check if there's an existing task. We may be able to reuse it.
	if existingCallbackNode ~= nil then
		local existingCallbackPriority = root.callbackPriority
		if existingCallbackPriority == newCallbackPriority then
			-- The priority hasn't changed. We can reuse the existing task. Exit.
			return
		end
		-- The priority changed. Cancel the existing callback. We'll schedule a new
		-- one below.
		cancelCallback(existingCallbackNode)
	end

	-- Schedule a new callback.
	local newCallbackNode
	if newCallbackPriority == ReactFiberLane.SyncLanePriority then
		-- Special case: Sync React callbacks are scheduled on a special
		-- internal queue
		newCallbackNode = scheduleSyncCallback(function()
			return mod.performSyncWorkOnRoot(root)
		end)
	elseif newCallbackPriority == ReactFiberLane.SyncBatchedLanePriority then
		newCallbackNode = scheduleCallback(ImmediateSchedulerPriority, function()
			return mod.performSyncWorkOnRoot(root)
		end)
	else
		local schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority)
		newCallbackNode = scheduleCallback(schedulerPriorityLevel, function()
			return mod.performConcurrentWorkOnRoot(root)
		end)
	end

	root.callbackPriority = newCallbackPriority
	root.callbackNode = newCallbackNode
end

-- This is the entry point for every concurrent task, i.e. anything that
-- goes through Scheduler.
-- FIXME Luau: Luau needs explicit annotation with nil-able returns
mod.performConcurrentWorkOnRoot = function(root): (() -> ...any) | nil
	-- Since we know we're in a React event, we can clear the current
	-- event time. The next update will compute a new event time.
	currentEventTime = NoTimestamp
	currentEventWipLanes = ReactFiberLane.NoLanes
	currentEventPendingLanes = ReactFiberLane.NoLanes

	invariant(
		bit32.band(executionContext, bit32.bor(RenderContext, CommitContext)) == NoContext,
		"Should not already be working."
	)

	-- Flush any pending passive effects before deciding which lanes to work on,
	-- in case they schedule additional work.
	local originalCallbackNode = root.callbackNode
	local didFlushPassiveEffects = exports.flushPassiveEffects()
	if didFlushPassiveEffects then
		-- Something in the passive effect phase may have canceled the current task.
		-- Check if the task node for this root was changed.
		if root.callbackNode ~= originalCallbackNode then
			-- The current task was canceled. Exit. We don't need to call
			-- `ensureRootIsScheduled` because the check above implies either that
			-- there's a new task, or that there's no remaining work on this root.
			return nil
		else
			-- Current task was not canceled. Continue.
		end
	end

	-- Determine the next expiration time to work on, using the fields stored
	-- on the root.
	local lanes =
		getNextLanes(root, if root == workInProgressRoot then workInProgressRootRenderLanes else ReactFiberLane.NoLanes)
	if lanes == ReactFiberLane.NoLanes then
		-- Defensive coding. This is never expected to happen.
		return nil
	end

	local exitStatus = mod.renderRootConcurrent(root, lanes)

	if includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes) then
		-- The render included lanes that were updated during the render phase.
		-- For example, when unhiding a hidden tree, we include all the lanes
		-- that were previously skipped when the tree was hidden. That set of
		-- lanes is a superset of the lanes we started rendering with.
		--
		-- So we'll throw out the current work and restart.
		mod.prepareFreshStack(root, ReactFiberLane.NoLanes)
	elseif exitStatus ~= RootExitStatus.Incomplete then
		if exitStatus == RootExitStatus.Errored then
			executionContext = bit32.bor(executionContext, RetryAfterError)

			-- If an error occurred during hydration,
			-- discard server response and fall back to client side render.
			if root.hydrate then
				root.hydrate = false
				ReactFiberHostConfig.clearContainer(root.containerInfo)
			end

			-- If something threw an error, try rendering one more time. We'll render
			-- synchronously to block concurrent data mutations, and we'll includes
			-- all pending updates are included. If it still fails after the second
			-- attempt, we'll give up and commit the resulting tree.
			lanes = getLanesToRetrySynchronouslyOnError(root)
			if lanes ~= ReactFiberLane.NoLanes then
				exitStatus = mod.renderRootSync(root, lanes)
			end
		end

		if exitStatus == RootExitStatus.FatalErrored then
			local fatalError = workInProgressRootFatalError
			mod.prepareFreshStack(root, ReactFiberLane.NoLanes)
			mod.markRootSuspended(root, lanes)
			ensureRootIsScheduled(root, now())
			error(fatalError)
		end

		-- We now have a consistent tree. The next step is either to commit it,
		-- or, if something suspended, wait to commit it after a timeout.
		local finishedWork: Fiber = root.current.alternate :: any
		root.finishedWork = finishedWork
		root.finishedLanes = lanes
		mod.finishConcurrentRender(root, exitStatus, lanes)
	end

	ensureRootIsScheduled(root, now())
	if root.callbackNode == originalCallbackNode then
		-- The task node scheduled for this root is the same one that's
		-- currently executed. Need to return a continuation.
		return function()
			return mod.performConcurrentWorkOnRoot(root)
		end
	end
	-- FIXME Luau: Luau shouldn't error on nil-able returns
	return nil :: any
end

-- we track the 'depth' of the act() calls with this counter,
-- so we can tell if any async act() calls try to run in parallel.
local actingUpdatesScopeDepth = 0
local didWarnAboutUsingActInProd = false

function shouldForceFlushFallbacksInDEV()
	-- Never force flush in production. This function should get stripped out.
	return __DEV__ and actingUpdatesScopeDepth > 0
end

mod.finishConcurrentRender = function(root, exitStatus, lanes)
	if exitStatus == RootExitStatus.Incomplete or exitStatus == RootExitStatus.FatalErrored then
		invariant(false, "Root did not complete. This is a bug in React.")
	-- Flow knows about invariant, so it complains if I add a break
	-- if I do. eslint-disable-next-line no-fallthrough
	-- statement, but eslint doesn't know about invariant, so it complains
	elseif exitStatus == RootExitStatus.Errored then
		-- We should have already attempted to retry this tree. If we reached
		-- this point, it errored again. Commit it.
		mod.commitRoot(root)
	elseif exitStatus == RootExitStatus.Suspended then
		mod.markRootSuspended(root, lanes)

		-- We have an acceptable loading state. We need to figure out if we
		-- should immediately commit it or wait a bit.
		if
			includesOnlyRetries(lanes)
			-- do not delay if we're inside an act() scope
			and not shouldForceFlushFallbacksInDEV()
		then
			-- This render only included retries, no updates. Throttle committing
			-- retries so that we don't show too many loading states too quickly.
			local msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now()
			-- Don't bother with a very short suspense time.
			if msUntilTimeout > 10 then
				local nextLanes = getNextLanes(root, ReactFiberLane.NoLanes)
				if nextLanes ~= ReactFiberLane.NoLanes then
					-- There's additional work on this root.
					return
				end
				local suspendedLanes = root.suspendedLanes
				if not isSubsetOfLanes(suspendedLanes, lanes) then
					-- We should prefer to render the fallback of at the last
					-- suspended level. Ping the last suspended level to try
					-- rendering it again.
					-- FIXME: What if the suspended lanes are Idle? Should not restart.
					local eventTime = exports.requestEventTime()
					markRootPinged(root, suspendedLanes, eventTime)
					return
				end

				-- The render is suspended, it hasn't timed out, and there's no
				-- lower priority work to do. Instead of committing the fallback
				-- immediately, wait for more data to arrive.
				root.timeoutHandle = ReactFiberHostConfig.scheduleTimeout(function()
					return mod.commitRoot(root)
				end, msUntilTimeout)
				return
			end
		end
		-- The work expired. Commit immediately.
		mod.commitRoot(root)
	elseif exitStatus == RootExitStatus.SuspendedWithDelay then
		mod.markRootSuspended(root, lanes)

		if includesOnlyTransitions(lanes) then
			-- This is a transition, so we should exit without committing a
			-- placeholder and without scheduling a timeout. Delay indefinitely
			-- until we receive more data.
			return
		end

		if not shouldForceFlushFallbacksInDEV() then
			-- This is not a transition, but we did trigger an avoided state.
			-- Schedule a placeholder to display after a short delay, using the Just
			-- Noticeable Difference.
			-- TODO: Is the JND optimization worth the added complexity? If this is
			-- the only reason we track the event time, then probably not.
			-- Consider removing.

			local mostRecentEventTime = getMostRecentEventTime(root, lanes)
			local eventTimeMs = mostRecentEventTime
			local timeElapsedMs = now() - eventTimeMs
			local msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs

			-- Don't bother with a very short suspense time.
			if msUntilTimeout > 10 then
				-- Instead of committing the fallback immediately, wait for more data
				-- to arrive.
				root.timeoutHandle = ReactFiberHostConfig.scheduleTimeout(function()
					return mod.commitRoot(root)
				end, msUntilTimeout)
				return
			end
		end
		-- Commit the placeholder.
		mod.commitRoot(root)
	elseif exitStatus == RootExitStatus.Completed then
		-- The work completed. Ready to commit.
		mod.commitRoot(root)
	else
		invariant(false, "Unknown root exit status.")
	end
end

mod.markRootSuspended = function(root, suspendedLanes)
	-- When suspending, we should always exclude lanes that were pinged or (more
	-- rarely, since we try to avoid it) updated during the render phase.
	-- TODO: Lol maybe there's a better way to factor this besides this
	-- obnoxiously named function :)
	suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes)
	suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes)
	markRootSuspended_dontCallThisOneDirectly(root, suspendedLanes)
end

-- This is the entry point for synchronous tasks that don't go
-- through Scheduler
mod.performSyncWorkOnRoot = function(root)
	invariant(
		bit32.band(executionContext, bit32.bor(RenderContext, CommitContext)) == NoContext,
		"Should not already be working."
	)

	exports.flushPassiveEffects()

	local lanes
	local exitStatus
	if root == workInProgressRoot and includesSomeLane(root.expiredLanes, workInProgressRootRenderLanes) then
		-- There's a partial tree, and at least one of its lanes has expired. Finish
		-- rendering it before rendering the rest of the expired work.
		lanes = workInProgressRootRenderLanes
		exitStatus = mod.renderRootSync(root, lanes)
		if includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes) then
			-- The render included lanes that were updated during the render phase.
			-- For example, when unhiding a hidden tree, we include all the lanes
			-- that were previously skipped when the tree was hidden. That set of
			-- lanes is a superset of the lanes we started rendering with.
			--
			-- Note that this only happens when part of the tree is rendered
			-- concurrently. If the whole tree is rendered synchronously, then there
			-- are no interleaved events.
			lanes = getNextLanes(root, lanes)
			exitStatus = mod.renderRootSync(root, lanes)
		end
	else
		lanes = getNextLanes(root, ReactFiberLane.NoLanes)
		exitStatus = mod.renderRootSync(root, lanes)
	end

	if root.tag ~= LegacyRoot and exitStatus == RootExitStatus.Errored then
		executionContext = bit32.bor(executionContext, RetryAfterError)

		-- If an error occurred during hydration,
		-- discard server response and fall back to client side render.
		if root.hydrate then
			root.hydrate = false
			ReactFiberHostConfig.clearContainer(root.containerInfo)
		end

		-- If something threw an error, try rendering one more time. We'll render
		-- synchronously to block concurrent data mutations, and we'll includes
		-- all pending updates are included. If it still fails after the second
		-- attempt, we'll give up and commit the resulting tree.
		lanes = getLanesToRetrySynchronouslyOnError(root)
		if lanes ~= ReactFiberLane.NoLanes then
			exitStatus = mod.renderRootSync(root, lanes)
		end
	end

	if exitStatus == RootExitStatus.FatalErrored then
		local fatalError = workInProgressRootFatalError
		mod.prepareFreshStack(root, ReactFiberLane.NoLanes)
		mod.markRootSuspended(root, lanes)
		ensureRootIsScheduled(root, now())
		error(fatalError)
	end

	-- We now have a consistent tree. Because this is a sync render, we
	-- will commit it even if something suspended.
	local finishedWork: Fiber = root.current.alternate :: any
	root.finishedWork = finishedWork
	root.finishedLanes = lanes
	mod.commitRoot(root)

	-- Before exiting, make sure there's a callback scheduled for the next
	-- pending level.
	ensureRootIsScheduled(root, now())

	return nil
end

exports.flushRoot = function(root: FiberRoot, lanes: Lanes)
	markRootExpired(root, lanes)
	ensureRootIsScheduled(root, now())
	if bit32.band(executionContext, bit32.bor(RenderContext, CommitContext)) == NoContext then
		resetRenderTimer()
		flushSyncCallbackQueue()
	end
end

exports.getExecutionContext = function(): ExecutionContext
	return executionContext
end

exports.flushDiscreteUpdates = function()
	-- TODO: Should be able to flush inside batchedUpdates, but not inside `act`.
	-- However, `act` uses `batchedUpdates`, so there's no way to distinguish
	-- those two cases. Need to fix this before exposing flushDiscreteUpdates
	-- as a public API.
	if bit32.band(executionContext, bit32.bor(BatchedContext, RenderContext, CommitContext)) ~= NoContext then
		if __DEV__ then
			if bit32.band(executionContext, RenderContext) ~= NoContext then
				console.error(
					"unstable_flushDiscreteUpdates: Cannot flush updates when React is " .. "already rendering."
				)
			end
		end
		-- We're already rendering, so we can't synchronously flush pending work.s
		-- This is probably a nested event dispatch triggered by a lifecycle/effect,
		-- like `el.focus()`. Exit.
		return
	end
	mod.flushPendingDiscreteUpdates()
	-- If the discrete updates scheduled passive effects, flush them now so that
	-- they fire before the next serial event.
	exports.flushPassiveEffects()
end

exports.deferredUpdates = function<A>(fn: () -> A): A
	if ReactFeatureFlags.decoupleUpdatePriorityFromScheduler then
		local previousLanePriority = getCurrentUpdateLanePriority()
		-- deviation: YOLO flag for disabling pcall
		local ok, result
		if not __YOLO__ then
			-- performance: hoist non-throwable out of try{} to eliminate anon function
			setCurrentUpdateLanePriority(ReactFiberLane.DefaultLanePriority)
			ok, result = xpcall(runWithPriority, describeError, NormalSchedulerPriority, fn)
		else
			ok = true
			setCurrentUpdateLanePriority(ReactFiberLane.DefaultLanePriority)
			result = runWithPriority(NormalSchedulerPriority, fn)
		end

		-- finally
		setCurrentUpdateLanePriority(previousLanePriority)

		if ok then
			return result
		else
			error(result)
		end
	else
		return runWithPriority(NormalSchedulerPriority, fn)
	end
end

mod.flushPendingDiscreteUpdates = function()
	if rootsWithPendingDiscreteUpdates ~= nil then
		-- For each root with pending discrete updates, schedule a callback to
		-- immediately flush them.
		local roots = rootsWithPendingDiscreteUpdates
		rootsWithPendingDiscreteUpdates = nil
		roots:forEach(function(root)
			markDiscreteUpdatesExpired(root)
			ensureRootIsScheduled(root, now())
		end)
	end
	-- Now flush the immediate queue.
	flushSyncCallbackQueue()
end

exports.batchedUpdates = function<A, R>(fn: (A) -> R, a: A): R
	local prevExecutionContext = executionContext
	executionContext = bit32.bor(executionContext, BatchedContext)

	-- deviation: YOLO flag for disabling pcall
	local ok, result
	if not __YOLO__ then
		ok, result = xpcall(fn, describeError, a)
	else
		ok = true
		result = fn(a)
	end

	-- finally
	executionContext = prevExecutionContext
	if executionContext == NoContext then
		-- Flush the immediate callbacks that were scheduled during this batch
		resetRenderTimer()
		flushSyncCallbackQueue()
	end

	if ok then
		return result
	else
		error(result)
	end
end

exports.batchedEventUpdates = function<A, R>(fn: (A) -> R, a: A): R
	local prevExecutionContext = executionContext
	executionContext = bit32.bor(executionContext, EventContext)

	-- deviation: YOLO flag for disabling pcall
	local ok, result
	if not __YOLO__ then
		ok, result = xpcall(fn, describeError, a)
	else
		ok = true
		result = fn(a)
	end

	-- finally
	executionContext = prevExecutionContext
	if executionContext == NoContext then
		-- Flush the immediate callbacks that were scheduled during this batch
		resetRenderTimer()
		flushSyncCallbackQueue()
	end

	if ok then
		return result
	else
		error(result)
	end
end

exports.discreteUpdates = function<A, B, C, D, R>(fn: (A, B, C, D) -> R, a: A, b: B, c: C, d: D): R
	local prevExecutionContext = executionContext
	executionContext = bit32.bor(executionContext, DiscreteEventContext)

	if ReactFeatureFlags.decoupleUpdatePriorityFromScheduler then
		local previousLanePriority = getCurrentUpdateLanePriority()
		-- performance: extract non-throwable fn call out of try{} so we can remove an anon function
		setCurrentUpdateLanePriority(ReactFiberLane.InputDiscreteLanePriority)
		local ok, result = xpcall(runWithPriority, describeError, UserBlockingSchedulerPriority, function()
			return fn(a, b, c, d)
		end)

		-- finally
		setCurrentUpdateLanePriority(previousLanePriority)
		executionContext = prevExecutionContext
		if executionContext == NoContext then
			-- Flush the immediate callbacks that were scheduled during this batch
			resetRenderTimer()
			flushSyncCallbackQueue()
		end

		if ok then
			return result
		else
			error(result)
		end
	else
		local ok, result = xpcall(runWithPriority, describeError, UserBlockingSchedulerPriority, function()
			return fn(a, b, c, d)
		end)

		-- finally
		executionContext = prevExecutionContext
		if executionContext == NoContext then
			-- Flush the immediate callbacks that were scheduled during this batch
			resetRenderTimer()
			flushSyncCallbackQueue()
		end

		if ok then
			return result
		else
			error(result)
		end
	end
end

exports.unbatchedUpdates = function<A, R>(fn: (A) -> R, a: A): R
	local prevExecutionContext = executionContext
	executionContext = bit32.band(executionContext, bit32.bnot(BatchedContext))
	executionContext = bit32.bor(executionContext, LegacyUnbatchedContext)
	-- deviation: YOLO flag for disabling pcall
	local ok, result
	if not __YOLO__ then
		ok, result = xpcall(fn, describeError, a)
	else
		ok = true
		result = fn(a)
	end

	-- finally
	executionContext = prevExecutionContext
	if executionContext == NoContext then
		-- Flush the immediate callbacks that were scheduled during this batch
		resetRenderTimer()
		flushSyncCallbackQueue()
	end

	if ok then
		return result
	else
		error(result)
	end
end

exports.flushSync = function<A, R>(fn: (A) -> R, a: A): R
	local prevExecutionContext = executionContext
	if (bit32.band(prevExecutionContext, bit32.bor(RenderContext, CommitContext))) ~= NoContext then
		if __DEV__ then
			console.error(
				"flushSync was called from inside a lifecycle method. React cannot "
					.. "flush when React is already rendering. Consider moving this call to "
					.. "a scheduler task or micro task."
			)
		end
		return fn(a)
	end
	executionContext = bit32.bor(executionContext, BatchedContext)

	if ReactFeatureFlags.decoupleUpdatePriorityFromScheduler then
		local previousLanePriority = getCurrentUpdateLanePriority()

		-- performance: extract non-throwable call out of try{} to eliminate an anon function
		setCurrentUpdateLanePriority(ReactFiberLane.SyncLanePriority)
		-- deviation: YOLO flag for disabling pcall
		local ok, result
		if not __YOLO__ then
			if fn then
				ok, result = xpcall(runWithPriority, describeError, ImmediateSchedulerPriority, function()
					return fn(a)
				end)
			else
				ok = true
				-- NOTE: return (undefined: $FlowFixMe)
				result = nil :: any
			end
		else
			ok = true
			setCurrentUpdateLanePriority(ReactFiberLane.SyncLanePriority)
			if fn then
				result = runWithPriority(ImmediateSchedulerPriority, function()
					return fn(a)
				end)
			else
				-- NOTE: return (undefined: $FlowFixMe)
				result = nil :: any
			end
		end

		-- finally
		setCurrentUpdateLanePriority(previousLanePriority)
		executionContext = prevExecutionContext
		-- Flush the immediate callbacks that were scheduled during this batch.
		-- Note that this will happen even if batchedUpdates is higher up
		-- the stack.
		flushSyncCallbackQueue()

		if not ok then
			error(result)
		end
		return result
	else
		-- deviation: YOLO flag for disabling pcall
		local ok, result
		if not __YOLO__ then
			if fn then
				ok, result = xpcall(runWithPriority, describeError, ImmediateSchedulerPriority, function()
					return fn(a)
				end)
			else
				ok = true
				-- NOTE: return (undefined: $FlowFixMe)
				result = nil :: any
			end
		else
			ok = true
			if fn then
				result = runWithPriority(ImmediateSchedulerPriority, function()
					return fn(a)
				end)
			else
				-- NOTE: return (undefined: $FlowFixMe)
				result = nil :: any
			end
		end
		-- NOTE: finally
		executionContext = prevExecutionContext
		-- Flush the immediate callbacks that were scheduled during this batch.
		-- Note that this will happen even if batchedUpdates is higher up
		-- the stack.
		flushSyncCallbackQueue()
		if not ok then
			error(result)
		end
		return result
	end
end

exports.flushControlled = function(fn: () -> any)
	local prevExecutionContext = executionContext
	executionContext = bit32.bor(executionContext, BatchedContext)
	if ReactFeatureFlags.decoupleUpdatePriorityFromScheduler then
		local previousLanePriority = getCurrentUpdateLanePriority()
		-- performance: extract non-throwable call out of try{} to eliminate an anon function
		setCurrentUpdateLanePriority(ReactFiberLane.SyncLanePriority)
		local ok, result = xpcall(runWithPriority, describeError, ImmediateSchedulerPriority, fn)

		-- finally
		setCurrentUpdateLanePriority(previousLanePriority)

		executionContext = prevExecutionContext
		if executionContext == NoContext then
			-- Flush the immediate callbacks that were scheduled during this batch
			resetRenderTimer()
			flushSyncCallbackQueue()
		end

		if not ok then
			error(result)
		end
	else
		local ok, result = xpcall(runWithPriority, describeError, ImmediateSchedulerPriority, fn)
		-- finally
		executionContext = prevExecutionContext
		if executionContext == NoContext then
			-- Flush the immediate callbacks that were scheduled during this batch
			resetRenderTimer()
			flushSyncCallbackQueue()
		end

		if not ok then
			error(result)
		end
	end
end

exports.pushRenderLanes = function(fiber: Fiber, lanes: Lanes)
	pushToStack(subtreeRenderLanesCursor, exports.subtreeRenderLanes, fiber)
	exports.subtreeRenderLanes = mergeLanes(exports.subtreeRenderLanes, lanes)
	workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes)
end

exports.popRenderLanes = function(fiber: Fiber)
	exports.subtreeRenderLanes = subtreeRenderLanesCursor.current
	popFromStack(subtreeRenderLanesCursor, fiber)
end

mod.prepareFreshStack = function(root: FiberRoot, lanes: Lanes)
	root.finishedWork = nil
	root.finishedLanes = ReactFiberLane.NoLanes

	local timeoutHandle = root.timeoutHandle
	if timeoutHandle ~= ReactFiberHostConfig.noTimeout then
		-- The root previous suspended and scheduled a timeout to commit a fallback
		-- state. Now that we have additional work, cancel the timeout.
		root.timeoutHandle = ReactFiberHostConfig.noTimeout
		-- $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
		ReactFiberHostConfig.cancelTimeout(timeoutHandle)
	end

	if workInProgress ~= nil then
		local interruptedWork = workInProgress.return_
		while interruptedWork ~= nil do
			unwindInterruptedWork(interruptedWork)
			interruptedWork = interruptedWork.return_
		end
	end
	workInProgressRoot = root
	workInProgress = ReactFiber.createWorkInProgress(root.current, nil)
	workInProgressRootRenderLanes = lanes
	exports.subtreeRenderLanes = lanes
	workInProgressRootIncludedLanes = lanes
	workInProgressRootExitStatus = RootExitStatus.Incomplete
	workInProgressRootFatalError = nil
	workInProgressRootSkippedLanes(ReactFiberLane.NoLanes)
	workInProgressRootUpdatedLanes = ReactFiberLane.NoLanes
	workInProgressRootPingedLanes = ReactFiberLane.NoLanes

	if ReactFeatureFlags.enableSchedulerTracing then
		spawnedWorkDuringRender = nil
	end

	if __DEV__ then
		ReactStrictModeWarnings.discardPendingWarnings()
	end
end

mod.handleError = function(root, thrownValue): ()
	while true do
		local erroredWork = workInProgress
		-- FIXME Luau: CLI-49835, "Function only returns 1 value, 2 are required"
		local ok, yetAnotherThrownValue = pcall(function()
			-- Reset module-level state that was set during the render phase.
			resetContextDependencies()
			resetHooksAfterThrow()
			resetCurrentDebugFiberInDEV()
			-- TODO: I found and added this missing line while investigating a
			-- separate issue. Write a regression test using string refs.
			ReactCurrentOwner.current = nil

			if erroredWork == nil or erroredWork.return_ == nil then
				-- Expected to be working on a non-root fiber. This is a fatal error
				-- because there's no ancestor that can handle it; the root is
				-- supposed to capture all errors that weren't caught by an error
				-- boundary.
				workInProgressRootExitStatus = RootExitStatus.FatalErrored
				workInProgressRootFatalError = thrownValue
				-- Set `workInProgress` to nil. This represents advancing to the next
				-- sibling, or the parent if there are no siblings. But since the root
				-- has no siblings nor a parent, we set it to nil. Usually this is
				-- handled by `completeUnitOfWork` or `unwindWork`, but since we're
				-- intentionally not calling those, we need set it here.
				-- TODO: Consider calling `unwindWork` to pop the contexts.
				workInProgress = nil
				-- FIXME: THIS IS A BUG, WE SHOULD BAIL ON THE OUTER FUNCTION -- NOT THE PCALL!
				return
			end

			-- FIXME Luau: Luau doesn't narrow based on the erroredWork == nil then return above
			if
				ReactFeatureFlags.enableProfilerTimer
				and bit32.band((erroredWork :: Fiber).mode, ReactTypeOfMode.ProfileMode) ~= 0
			then
				-- Record the time spent rendering before an error was thrown. This
				-- avoids inaccurate Profiler durations in the case of a
				-- suspended render.
				ReactProfilerTimer.stopProfilerTimerIfRunningAndRecordDelta(erroredWork :: Fiber, true)
			end

			-- deviation, we pass in onUncaughtError and renderDidError here since throwException can't call them due to a require cycle
			throwException(
				root,
				(erroredWork :: Fiber).return_,
				erroredWork :: Fiber,
				thrownValue,
				workInProgressRootRenderLanes,
				exports.onUncaughtError,
				exports.renderDidError
			)
			mod.completeUnitOfWork(erroredWork)
		end)
		if not ok then
			-- Something in the return path also threw.
			thrownValue = yetAnotherThrownValue
			if workInProgress == erroredWork and erroredWork ~= nil then
				-- If this boundary has already errored, then we had trouble processing
				-- the error. Bubble it to the next boundary.
				erroredWork = erroredWork.return_
				workInProgress = erroredWork
			else
				erroredWork = workInProgress
			end
			continue
		end
		-- Return to the normal work loop.
		return
	end
end

mod.pushDispatcher = function()
	local prevDispatcher = ReactCurrentDispatcher.current

	-- deviation: lazy init of ContextOnlyDispatcher wrapped in a function
	ReactCurrentDispatcher.current = ContextOnlyDispatcher()
	if prevDispatcher == nil then
		-- The React isomorphic package does not include a default dispatcher.
		-- Instead the first renderer will lazily attach one, in order to give
		-- nicer error messages.

		-- deviation: lazy init of ContextOnlyDispatcher wrapped in a function
		return ContextOnlyDispatcher()
	else
		return prevDispatcher
	end
end

mod.popDispatcher = function(prevDispatcher)
	ReactCurrentDispatcher.current = prevDispatcher
end

mod.pushInteractions = function(root)
	if ReactFeatureFlags.enableSchedulerTracing then
		local prevInteractions: Set<Interaction>? = __interactionsRef.current
		__interactionsRef.current = root.memoizedInteractions
		return prevInteractions
	end
	return nil
end

mod.popInteractions = function(prevInteractions)
	if ReactFeatureFlags.enableSchedulerTracing then
		__interactionsRef.current = prevInteractions
	end
end

exports.markCommitTimeOfFallback = function(): ()
	globalMostRecentFallbackTime = now()
end

exports.markSkippedUpdateLanes = function(lane: Lane | Lanes): ()
	ReactFiberWorkInProgress.markSkippedUpdateLanes(lane)
end

exports.renderDidSuspend = function(): ()
	if workInProgressRootExitStatus == RootExitStatus.Incomplete then
		workInProgressRootExitStatus = RootExitStatus.Suspended
	end
end

exports.renderDidSuspendDelayIfPossible = function(): ()
	if
		workInProgressRootExitStatus == RootExitStatus.Incomplete
		or workInProgressRootExitStatus == RootExitStatus.Suspended
	then
		workInProgressRootExitStatus = RootExitStatus.SuspendedWithDelay
	end

	-- Check if there are updates that we skipped tree that might have unblocked
	-- this render.
	if
		workInProgressRoot ~= nil
		and (
			includesNonIdleWork(workInProgressRootSkippedLanes())
			or includesNonIdleWork(workInProgressRootUpdatedLanes)
		)
	then
		-- Mark the current render as suspended so that we switch to working on
		-- the updates that were skipped. Usually we only suspend at the end of
		-- the render phase.
		-- TODO: We should probably always mark the root as suspended immediately
		-- (inside this function), since by suspending at the end of the render
		-- phase introduces a potential mistake where we suspend lanes that were
		-- pinged or updated while we were rendering.
		mod.markRootSuspended(workInProgressRoot, workInProgressRootRenderLanes)
	end
end

exports.renderDidError = function()
	if workInProgressRootExitStatus ~= RootExitStatus.Completed then
		workInProgressRootExitStatus = RootExitStatus.Errored
	end
end

-- Called during render to determine if anything has suspended.
-- Returns false if we're not sure.
exports.renderHasNotSuspendedYet = function(): boolean
	-- If something errored or completed, we can't really be sure,
	-- so those are false.
	return workInProgressRootExitStatus == RootExitStatus.Incomplete
end

mod.renderRootSync = function(root: FiberRoot, lanes: Lanes)
	local prevExecutionContext = executionContext
	executionContext = bit32.bor(executionContext, RenderContext)
	local prevDispatcher = mod.pushDispatcher()

	-- If the root or lanes have changed, throw out the existing stack
	-- and prepare a fresh one. Otherwise we'll continue where we left off.
	if workInProgressRoot ~= root or workInProgressRootRenderLanes ~= lanes then
		mod.prepareFreshStack(root, lanes)
		mod.startWorkOnPendingInteractions(root, lanes)
	end

	local prevInteractions = mod.pushInteractions(root)

	if __DEV__ then
		if enableDebugTracing then
			DebugTracing.logRenderStarted(lanes)
		end
	end

	if enableSchedulingProfiler then
		SchedulingProfiler.markRenderStarted(lanes)
	end

	while true do
		-- deviation: YOLO flag for disabling pcall
		local ok, thrownValue
		if not __YOLO__ then
			ok, thrownValue = xpcall(mod.workLoopSync, describeError)
		else
			ok = true
			mod.workLoopSync()
		end

		if not ok then
			mod.handleError(root, thrownValue)
		else
			break
		end
	end
	resetContextDependencies()
	if ReactFeatureFlags.enableSchedulerTracing then
		mod.popInteractions(prevInteractions)
	end

	executionContext = prevExecutionContext
	mod.popDispatcher(prevDispatcher)

	if workInProgress ~= nil then
		-- This is a sync render, so we should have finished the whole tree.
		invariant(
			false,
			"Cannot commit an incomplete root. This error is likely caused by a "
				.. "bug in React. Please file an issue."
		)
	end

	if __DEV__ then
		if enableDebugTracing then
			DebugTracing.logRenderStopped()
		end
	end

	if enableSchedulingProfiler then
		SchedulingProfiler.markRenderStopped()
	end

	-- Set this to nil to indicate there's no in-progress render.
	workInProgressRoot = nil
	workInProgressRootRenderLanes = ReactFiberLane.NoLanes

	return workInProgressRootExitStatus
end

-- The work loop is an extremely hot path. Tell Closure not to inline it.
--[[* @noinline ]]
mod.workLoopSync = function()
	-- Already timed out, so perform work without checking if we need to yield.
	while workInProgress ~= nil do
		mod.performUnitOfWork(workInProgress)
	end
end

mod.renderRootConcurrent = function(root: FiberRoot, lanes: Lanes)
	local prevExecutionContext = executionContext
	executionContext = bit32.bor(executionContext, RenderContext)
	local prevDispatcher = mod.pushDispatcher()

	-- If the root or lanes have changed, throw out the existing stack
	-- and prepare a fresh one. Otherwise we'll continue where we left off.
	if workInProgressRoot ~= root or workInProgressRootRenderLanes ~= lanes then
		resetRenderTimer()
		mod.prepareFreshStack(root, lanes)
		mod.startWorkOnPendingInteractions(root, lanes)
	end

	local prevInteractions = mod.pushInteractions(root)

	if __DEV__ then
		if enableDebugTracing then
			DebugTracing.logRenderStarted(lanes)
		end
	end

	if enableSchedulingProfiler then
		SchedulingProfiler.markRenderStarted(lanes)
	end

	while true do
		-- deviation: YOLO flag for disabling pcall
		local ok, thrownValue
		if not __YOLO__ then
			-- deviation: when converting `try` to `pcall`, we can't use break inside it
			ok, thrownValue = xpcall(mod.workLoopConcurrent, describeError)
			if ok then
				thrownValue = "break"
			end
		else
			ok = true
			thrownValue = "break"
			mod.workLoopConcurrent()
		end

		if thrownValue == "break" then
			break
		end
		if not ok then
			mod.handleError(root, thrownValue)
		end
	end
	resetContextDependencies()
	if ReactFeatureFlags.enableSchedulerTracing then
		mod.popInteractions(prevInteractions)
	end

	mod.popDispatcher(prevDispatcher)
	executionContext = prevExecutionContext

	if __DEV__ then
		if enableDebugTracing then
			DebugTracing.logRenderStopped()
		end
	end

	-- Check if the tree has completed.
	if workInProgress ~= nil then
		-- Still work remaining.
		if enableSchedulingProfiler then
			SchedulingProfiler.markRenderYielded()
		end
		return RootExitStatus.Incomplete
	else
		-- Completed the tree.
		if enableSchedulingProfiler then
			SchedulingProfiler.markRenderStopped()
		end

		-- Set this to nil to indicate there's no in-progress render.
		workInProgressRoot = nil
		workInProgressRootRenderLanes = ReactFiberLane.NoLanes

		-- Return the final exit status.
		return workInProgressRootExitStatus
	end
end

--[[* @noinline ]]
mod.workLoopConcurrent = function()
	-- Perform work until Scheduler asks us to yield
	while workInProgress ~= nil and not shouldYield() do
		mod.performUnitOfWork(workInProgress)
	end
end

mod.performUnitOfWork = function(unitOfWork: Fiber): ()
	-- The current, flushed, state of this fiber is the alternate. Ideally
	-- nothing should rely on this, but relying on it here means that we don't
	-- need an additional field on the work in progress.
	local current = unitOfWork.alternate
	setCurrentDebugFiberInDEV(unitOfWork)

	local next_
	if
		ReactFeatureFlags.enableProfilerTimer
		and bit32.band(unitOfWork.mode, ReactTypeOfMode.ProfileMode) ~= ReactTypeOfMode.NoMode
	then
		ReactProfilerTimer.startProfilerTimer(unitOfWork)
		next_ = mod.beginWork(current, unitOfWork, exports.subtreeRenderLanes)
		ReactProfilerTimer.stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true)
	else
		next_ = mod.beginWork(current, unitOfWork, exports.subtreeRenderLanes)
	end

	resetCurrentDebugFiberInDEV()
	unitOfWork.memoizedProps = unitOfWork.pendingProps
	if next_ == nil then
		-- If this doesn't spawn new work, complete the current work.
		mod.completeUnitOfWork(unitOfWork)
	else
		workInProgress = next_
	end

	ReactCurrentOwner.current = nil
end

mod.completeUnitOfWork = function(unitOfWork: Fiber)
	-- Attempt to complete the current unit of work, then move to the next
	-- sibling. If there are no more siblings, return to the parent fiber.
	local completedWork = unitOfWork
	repeat
		-- The current, flushed, state of this fiber is the alternate. Ideally
		-- nothing should rely on this, but relying on it here means that we don't
		-- need an additional field on the work in progress.
		local current = completedWork.alternate
		local returnFiber = completedWork.return_

		-- Check if the work completed or if something threw.
		if bit32.band(completedWork.flags, ReactFiberFlags.Incomplete) == ReactFiberFlags.NoFlags then
			setCurrentDebugFiberInDEV(completedWork)
			local next_
			if
				not ReactFeatureFlags.enableProfilerTimer
				or bit32.band(completedWork.mode, ReactTypeOfMode.ProfileMode) == ReactTypeOfMode.NoMode
			then
				next_ = completeWork(current, completedWork, exports.subtreeRenderLanes)
			else
				ReactProfilerTimer.startProfilerTimer(completedWork)
				next_ = completeWork(current, completedWork, exports.subtreeRenderLanes)
				-- Update render duration assuming we didn't error.
				ReactProfilerTimer.stopProfilerTimerIfRunningAndRecordDelta(completedWork, false)
			end
			resetCurrentDebugFiberInDEV()

			if next_ ~= nil then
				-- Completing this fiber spawned new work. Work on that next.
				workInProgress = next_
				return
			end
		else
			-- This fiber did not complete because something threw. Pop values off
			-- the stack without entering the complete phase. If this is a boundary,
			-- capture values if possible.
			local next_ = unwindWork(completedWork, exports.subtreeRenderLanes)

			-- Because this fiber did not complete, don't reset its expiration time.

			if next_ ~= nil then
				-- If completing this work spawned new work, do that next. We'll come
				-- back here again.
				-- Since we're restarting, remove anything that is not a host effect
				-- from the effect tag.
				next_.flags = bit32.band(next_.flags, ReactFiberFlags.HostEffectMask)
				workInProgress = next_
				return
			end

			if
				ReactFeatureFlags.enableProfilerTimer
				and bit32.band(completedWork.mode, ReactTypeOfMode.ProfileMode) ~= ReactTypeOfMode.NoMode
			then
				-- Record the render duration for the fiber that errored.
				ReactProfilerTimer.stopProfilerTimerIfRunningAndRecordDelta(completedWork, false)

				-- Include the time spent working on failed children before continuing.
				-- TODO: actualDuration is nil-able and only populated with enableProfilerTimer. contribute default value upstream.
				local actualDuration = completedWork.actualDuration or 0
				local child = completedWork.child
				while child ~= nil do
					actualDuration += child.actualDuration or 0
					child = child.sibling
				end
				completedWork.actualDuration = actualDuration
			end

			if returnFiber ~= nil then
				-- Mark the parent fiber as incomplete
				returnFiber.flags = bit32.bor(returnFiber.flags, ReactFiberFlags.Incomplete)
				returnFiber.subtreeFlags = ReactFiberFlags.NoFlags
				returnFiber.deletions = nil
			end
		end

		local siblingFiber = completedWork.sibling
		if siblingFiber ~= nil then
			-- If there is more work to do in this returnFiber, do that next.
			workInProgress = siblingFiber
			return
		end
		-- Otherwise, return to the parent
		-- FIXME Luau: Luau doesn't understand that completedWork is only nil-able at this point in the control flow
		completedWork = returnFiber :: any
		-- Update the next thing we're working on in case something throws.
		workInProgress = completedWork
	until completedWork == nil

	-- We've reached the root.
	if workInProgressRootExitStatus == RootExitStatus.Incomplete then
		workInProgressRootExitStatus = RootExitStatus.Completed
	end
end

mod.commitRoot = function(root)
	local renderPriorityLevel = getCurrentPriorityLevel()
	runWithPriority(ImmediateSchedulerPriority, function()
		return mod.commitRootImpl(root, renderPriorityLevel)
	end)
	return nil
end

-- FIXME Luau: Luau doesn't infer root as FiberRoot via the callgraph from ensureRootIsScheduled(root: FiberRoot)
mod.commitRootImpl = function(root: FiberRoot, renderPriorityLevel)
	repeat
		-- `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
		-- means `flushPassiveEffects` will sometimes result in additional
		-- passive effects. So we need to keep flushing in a loop until there are
		-- no more pending effects.
		-- TODO: Might be better if `flushPassiveEffects` did not automatically
		-- flush synchronous work at the end, to avoid factoring hazards like this.
		exports.flushPassiveEffects()
	until rootWithPendingPassiveEffects == nil
	flushRenderPhaseStrictModeWarningsInDEV()

	invariant(
		bit32.band(executionContext, bit32.bor(RenderContext, CommitContext)) == NoContext,
		"Should not already be working."
	)

	-- FIXME Luau: Luau doesn't narrow finishedWork based on the nil guard below
	local finishedWork = root.finishedWork :: Fiber
	local lanes = root.finishedLanes

	if __DEV__ then
		if enableDebugTracing then
			DebugTracing.logCommitStarted(lanes)
		end
	end

	if enableSchedulingProfiler then
		SchedulingProfiler.markCommitStarted(lanes)
	end

	if finishedWork == nil then
		if __DEV__ then
			if enableDebugTracing then
				DebugTracing.logCommitStopped()
			end
		end

		if enableSchedulingProfiler then
			SchedulingProfiler.markCommitStopped()
		end

		return nil
	end
	root.finishedWork = nil
	root.finishedLanes = ReactFiberLane.NoLanes

	invariant(
		finishedWork ~= root.current,
		"Cannot commit the same tree as before. This error is likely caused by "
			.. "a bug in React. Please file an issue."
	)

	-- commitRoot never returns a continuation; it always finishes synchronously.
	-- So we can clear these now to allow a new callback to be scheduled.
	root.callbackNode = nil

	-- Update the first and last pending times on this root. The new first
	-- pending time is whatever is left on the root fiber.
	local remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes)
	markRootFinished(root, remainingLanes)

	-- Clear already finished discrete updates in case that a later call of
	-- `flushDiscreteUpdates` starts a useless render pass which may cancels
	-- a scheduled timeout.
	if rootsWithPendingDiscreteUpdates ~= nil then
		if not hasDiscreteLanes(remainingLanes) and rootsWithPendingDiscreteUpdates:has(root) then
			rootsWithPendingDiscreteUpdates:delete(root)
		end
	end

	if root == workInProgressRoot then
		-- We can reset these now that they are finished.
		workInProgressRoot = nil
		workInProgress = nil
		workInProgressRootRenderLanes = ReactFiberLane.NoLanes
	else
		-- This indicates that the last root we worked on is not the same one that
		-- we're committing now. This most commonly happens when a suspended root
		-- times out.
	end

	-- Check if there are any effects in the whole tree.
	-- TODO: This is left over from the effect list implementation, where we had
	-- to check for the existence of `firstEffect` to satsify Flow. I think the
	-- only other reason this optimization exists is because it affects profiling.
	-- Reconsider whether this is necessary.
	local subtreeHasEffects = bit32.band(
		finishedWork.subtreeFlags,
		bit32.bor(
			ReactFiberFlags.BeforeMutationMask,
			ReactFiberFlags.MutationMask,
			ReactFiberFlags.LayoutMask,
			ReactFiberFlags.PassiveMask
		)
	) ~= ReactFiberFlags.NoFlags
	local rootHasEffect = bit32.band(
		finishedWork.flags,
		bit32.bor(
			ReactFiberFlags.BeforeMutationMask,
			ReactFiberFlags.MutationMask,
			ReactFiberFlags.LayoutMask,
			ReactFiberFlags.PassiveMask
		)
	) ~= ReactFiberFlags.NoFlags

	if subtreeHasEffects or rootHasEffect then
		local previousLanePriority
		if ReactFeatureFlags.decoupleUpdatePriorityFromScheduler then
			previousLanePriority = getCurrentUpdateLanePriority()
			setCurrentUpdateLanePriority(ReactFiberLane.SyncLanePriority)
		end

		local prevExecutionContext = executionContext
		executionContext = bit32.bor(executionContext, CommitContext)
		local prevInteractions = mod.pushInteractions(root)

		-- Reset this to nil before calling lifecycles
		ReactCurrentOwner.current = nil

		-- The commit phase is broken into several sub-phases. We do a separate pass
		-- of the effect list for each phase: all mutation effects come before all
		-- layout effects, and so on.

		-- The first phase a "before mutation" phase. We use this phase to read the
		-- state of the host tree right before we mutate it. This is where
		-- getSnapshotBeforeUpdate is called.
		focusedInstanceHandle = ReactFiberHostConfig.prepareForCommit(root.containerInfo)
		shouldFireAfterActiveInstanceBlur = false

		mod.commitBeforeMutationEffects(finishedWork)

		-- We no longer need to track the active instance fiber
		focusedInstanceHandle = nil

		if ReactFeatureFlags.enableProfilerTimer then
			-- Mark the current commit time to be shared by all Profilers in this
			-- batch. This enables them to be grouped later.
			ReactProfilerTimer.recordCommitTime()
		end

		-- The next phase is the mutation phase, where we mutate the host tree.
		mod.commitMutationEffects(finishedWork, root, renderPriorityLevel)

		if shouldFireAfterActiveInstanceBlur then
			ReactFiberHostConfig.afterActiveInstanceBlur()
		end
		ReactFiberHostConfig.resetAfterCommit(root.containerInfo)

		-- The work-in-progress tree is now the current tree. This must come after
		-- the mutation phase, so that the previous tree is still current during
		-- componentWillUnmount, but before the layout phase, so that the finished
		-- work is current during componentDidMount/Update.
		root.current = finishedWork

		-- The next phase is the layout phase, where we call effects that read
		-- the host tree after it's been mutated. The idiomatic use case for this is
		-- layout, but class component lifecycles also fire here for legacy reasons.
		if __DEV__ then
			if enableDebugTracing then
				DebugTracing.logLayoutEffectsStarted(lanes)
			end
		end
		if enableSchedulingProfiler then
			SchedulingProfiler.markLayoutEffectsStarted(lanes)
		end

		if __DEV__ then
			setCurrentDebugFiberInDEV(finishedWork)
			invokeGuardedCallback(
				nil,
				recursivelyCommitLayoutEffects,
				nil,
				finishedWork,
				root,
				-- deviation: pass in this function to avoid dependency cycle
				exports.captureCommitPhaseError,
				exports.schedulePassiveEffectCallback
			)
			if hasCaughtError() then
				local err = clearCaughtError()
				captureCommitPhaseErrorOnRoot(finishedWork, finishedWork, err)
			end
			resetCurrentDebugFiberInDEV()
		else
			-- deviation: YOLO flag for disabling pcall
			local ok, result
			if not __YOLO__ then
				-- deviation: pass in captureCommitPhaseError and schedulePassiveEffectCallback to avoid dependency cycle
				ok, result = xpcall(
					recursivelyCommitLayoutEffects,
					describeError,
					finishedWork,
					root,
					exports.captureCommitPhaseError,
					exports.schedulePassiveEffectCallback
				)
			else
				ok = true
				recursivelyCommitLayoutEffects(
					finishedWork,
					root,
					exports.captureCommitPhaseError,
					exports.schedulePassiveEffectCallback
				)
			end

			if not ok then
				captureCommitPhaseErrorOnRoot(finishedWork, finishedWork, result)
			end
		end

		if __DEV__ then
			if enableDebugTracing then
				DebugTracing.logLayoutEffectsStopped()
			end
		end
		if enableSchedulingProfiler then
			SchedulingProfiler.markLayoutEffectsStopped()
		end

		-- If there are pending passive effects, schedule a callback to process them.
		if
			bit32.band(finishedWork.subtreeFlags, ReactFiberFlags.PassiveMask) ~= ReactFiberFlags.NoFlags
			or bit32.band(finishedWork.flags, ReactFiberFlags.PassiveMask) ~= ReactFiberFlags.NoFlags
		then
			if not rootDoesHavePassiveEffects then
				rootDoesHavePassiveEffects = true
				scheduleCallback(NormalSchedulerPriority, function()
					exports.flushPassiveEffects()
					return nil
				end)
			end
		end

		-- Tell Scheduler to yield at the end of the frame, so the browser has an
		-- opportunity to paint.
		requestPaint()

		if ReactFeatureFlags.enableSchedulerTracing then
			mod.popInteractions(prevInteractions)
		end
		executionContext = prevExecutionContext

		if ReactFeatureFlags.decoupleUpdatePriorityFromScheduler and previousLanePriority ~= nil then
			-- Reset the priority to the previous non-sync value.
			setCurrentUpdateLanePriority(previousLanePriority)
		end
	else
		-- No effects.
		root.current = finishedWork
		-- Measure these anyway so the flamegraph explicitly shows that there were
		-- no effects.
		-- TODO: Maybe there's a better way to report this.
		if ReactFeatureFlags.enableProfilerTimer then
			ReactProfilerTimer.recordCommitTime()
		end
	end

	local rootDidHavePassiveEffects = rootDoesHavePassiveEffects

	if rootDoesHavePassiveEffects then
		-- This commit has passive effects. Stash a reference to them. But don't
		-- schedule a callback until after flushing layout work.
		rootDoesHavePassiveEffects = false
		rootWithPendingPassiveEffects = root
		pendingPassiveEffectsLanes = lanes
		pendingPassiveEffectsRenderPriority = renderPriorityLevel
	end

	-- Read this again, since an effect might have updated it
	remainingLanes = root.pendingLanes

	-- Check if there's remaining work on this root
	if remainingLanes ~= ReactFiberLane.NoLanes then
		if ReactFeatureFlags.enableSchedulerTracing then
			if spawnedWorkDuringRender ~= nil then
				local expirationTimes = spawnedWorkDuringRender
				spawnedWorkDuringRender = nil
				for i = 1, #expirationTimes do
					scheduleInteractions(root, expirationTimes[i], root.memoizedInteractions)
				end
			end
			mod.schedulePendingInteractions(root, remainingLanes)
		end
	else
		-- If there's no remaining work, we can clear the set of already failed
		-- error boundaries.
		legacyErrorBoundariesThatAlreadyFailed = nil
	end

	if __DEV__ and enableDoubleInvokingEffects then
		if not rootDidHavePassiveEffects then
			commitDoubleInvokeEffectsInDEV(root.current, false)
		end
	end

	if ReactFeatureFlags.enableSchedulerTracing then
		if not rootDidHavePassiveEffects then
			-- If there are no passive effects, then we can complete the pending interactions.
			-- Otherwise, we'll wait until after the passive effects are flushed.
			-- Wait to do this until after remaining work has been scheduled,
			-- so that we don't prematurely signal complete for interactions when there's e.g. hidden work.
			mod.finishPendingInteractions(root, lanes)
		end
	end

	if remainingLanes == SyncLane then
		-- Count the number of times the root synchronously re-renders without
		-- finishing. If there are too many, it indicates an infinite update loop.
		if root == rootWithNestedUpdates then
			nestedUpdateCount += 1
		else
			nestedUpdateCount = 0
			rootWithNestedUpdates = root
		end
	else
		nestedUpdateCount = 0
	end

	onCommitRootDevTools(finishedWork.stateNode, renderPriorityLevel)

	if __DEV__ then
		onCommitRootTestSelector()
	end

	-- Always call this before exiting `commitRoot`, to ensure that any
	-- additional work on this root is scheduled.
	ensureRootIsScheduled(root, now())

	if hasUncaughtError then
		hasUncaughtError = false
		local error_ = firstUncaughtError
		firstUncaughtError = nil
		-- FIXME: we lose the original stack trace when we re-throw this way
		error(error_)
	end

	if bit32.band(executionContext, LegacyUnbatchedContext) ~= NoContext then
		if __DEV__ then
			if enableDebugTracing then
				DebugTracing.logCommitStopped()
			end
		end

		if enableSchedulingProfiler then
			SchedulingProfiler.markCommitStopped()
		end

		-- This is a legacy edge case. We just committed the initial mount of
		-- a ReactDOM.render-ed root inside of batchedUpdates. The commit fired
		-- synchronously, but layout updates should be deferred until the end
		-- of the batch.
		return nil
	end

	-- If layout work was scheduled, flush it now.
	flushSyncCallbackQueue()

	if __DEV__ then
		if enableDebugTracing then
			DebugTracing.logCommitStopped()
		end
	end

	if enableSchedulingProfiler then
		SchedulingProfiler.markCommitStopped()
	end

	return nil
end

mod.commitBeforeMutationEffects = function(firstChild: Fiber)
	local fiber = firstChild
	while fiber ~= nil do
		if fiber.deletions ~= nil then
			mod.commitBeforeMutationEffectsDeletions(fiber.deletions)
		end

		if fiber.child ~= nil then
			local primarySubtreeFlags = bit32.band(fiber.subtreeFlags, ReactFiberFlags.BeforeMutationMask)
			if primarySubtreeFlags ~= ReactFiberFlags.NoFlags then
				mod.commitBeforeMutationEffects(fiber.child)
			end
		end

		if __DEV__ then
			setCurrentDebugFiberInDEV(fiber)
			invokeGuardedCallback(nil, mod.commitBeforeMutationEffectsImpl, nil, fiber)
			if hasCaughtError() then
				local error_ = clearCaughtError()
				exports.captureCommitPhaseError(fiber, fiber.return_, error_)
			end
			resetCurrentDebugFiberInDEV()
		else
			-- deviation: YOLO flag for disabling pcall
			local ok, error_
			if not __YOLO__ then
				ok, error_ = xpcall(mod.commitBeforeMutationEffectsImpl, describeError, fiber)
			else
				ok = true
				mod.commitBeforeMutationEffectsImpl(fiber)
			end

			if not ok then
				exports.captureCommitPhaseError(fiber, fiber.return_, error_)
			end
		end
		-- FIXME Luau: Luau doesn't narrow correctly for the while ~= nil pattern
		fiber = fiber.sibling :: Fiber
	end
end

mod.commitBeforeMutationEffectsImpl = function(fiber: Fiber)
	local current = fiber.alternate
	local flags = fiber.flags

	if not shouldFireAfterActiveInstanceBlur and focusedInstanceHandle ~= nil then
		-- Check to see if the focused element was inside of a hidden (Suspense) subtree.
		-- TODO: Move this out of the hot path using a dedicated effect tag.
		if
			fiber.tag == ReactWorkTags.SuspenseComponent
			and ReactFiberCommitWork.isSuspenseBoundaryBeingHidden(current, fiber)
			and doesFiberContain(fiber, focusedInstanceHandle)
		then
			shouldFireAfterActiveInstanceBlur = true
			ReactFiberHostConfig.beforeActiveInstanceBlur()
		end
	end

	if bit32.band(flags, ReactFiberFlags.Snapshot) ~= ReactFiberFlags.NoFlags then
		setCurrentDebugFiberInDEV(fiber)
		commitBeforeMutationEffectOnFiber(current, fiber)
		resetCurrentDebugFiberInDEV()
	end

	if bit32.band(flags, ReactFiberFlags.Passive) ~= ReactFiberFlags.NoFlags then
		-- If there are passive effects, schedule a callback to flush at
		-- the earliest opportunity.
		if not rootDoesHavePassiveEffects then
			rootDoesHavePassiveEffects = true
			scheduleCallback(NormalSchedulerPriority, function()
				exports.flushPassiveEffects()
				return nil
			end)
		end
	end
end

mod.commitBeforeMutationEffectsDeletions = function(deletions: Array<Fiber>)
	for i = 1, #deletions do
		local fiber = deletions[i]

		-- TODO (effects) It would be nice to avoid calling doesFiberContain()
		-- Maybe we can repurpose one of the subtreeFlags positions for this instead?
		-- Use it to store which part of the tree the focused instance is in?
		-- This assumes we can safely determine that instance during the "render" phase.
		if doesFiberContain(fiber, (focusedInstanceHandle :: any) :: Fiber) then
			shouldFireAfterActiveInstanceBlur = true
			ReactFiberHostConfig.beforeActiveInstanceBlur()
		end
	end
end

mod.commitMutationEffects = function(firstChild: Fiber, root: FiberRoot, renderPriorityLevel: ReactPriorityLevel)
	local fiber = firstChild
	while fiber ~= nil do
		local deletions = fiber.deletions
		if deletions ~= nil then
			-- performance: React 18 inlines commitMutationEffectsDeletions, pulling that in based on tab switching hot path
			for _, childToDelete in deletions do
				-- FIXME Luau: CLI-49835, "Function only returns 1 value, 2 are required"
				local ok, error_ =
					xpcall(commitDeletion, describeError, root, childToDelete, fiber, renderPriorityLevel)
				if not ok then
					exports.captureCommitPhaseError(childToDelete, fiber, error_)
				end
			end
		end

		if fiber.child ~= nil then
			local mutationFlags = bit32.band(fiber.subtreeFlags, ReactFiberFlags.MutationMask)
			if mutationFlags ~= ReactFiberFlags.NoFlags then
				mod.commitMutationEffects(fiber.child, root, renderPriorityLevel)
			end
		end

		if __DEV__ then
			setCurrentDebugFiberInDEV(fiber)
			invokeGuardedCallback(nil, mod.commitMutationEffectsImpl, nil, fiber, root, renderPriorityLevel)
			if hasCaughtError() then
				local error_ = clearCaughtError()
				exports.captureCommitPhaseError(fiber, fiber.return_, error_)
			end
			resetCurrentDebugFiberInDEV()
		else
			-- deviation: YOLO flag for disabling pcall
			local ok, result
			if not __YOLO__ then
				ok, result = xpcall(mod.commitMutationEffectsImpl, describeError, fiber, root, renderPriorityLevel)
			else
				ok = true
				mod.commitMutationEffectsImpl(fiber, root, renderPriorityLevel)
			end
			if not ok then
				exports.captureCommitPhaseError(fiber, fiber.return_, result)
			end
		end
		-- FIXME Luau: Luau doesn't understand the while ~= nil construct
		fiber = fiber.sibling :: Fiber
	end
end

mod.commitMutationEffectsImpl = function(fiber: Fiber, root: FiberRoot, renderPriorityLevel)
	local flags = fiber.flags
	-- performance: avoid always-false compare for Roblox renderer in hot path
	-- if bit32.band(flags, ReactFiberFlags.ContentReset) ~= 0 then
	--   unimplemented("commitResetTextContent")
	-- commitResetTextContent(fiber)
	-- end

	if bit32.band(flags, ReactFiberFlags.Ref) ~= 0 then
		local current = fiber.alternate
		if current ~= nil then
			commitDetachRef(current)
		end
		-- performance: avoid always-false compare for Roblox renderer in hot path
		-- if ReactFeatureFlags.enableScopeAPI then
		--   -- TODO: This is a temporary solution that allowed us to transition away from React Flare on www.
		--   if fiber.tag == ReactWorkTags.ScopeComponent then
		--     commitAttachRef(fiber)
		--   end
		-- end
	end

	-- The following switch statement is only concerned about placement,
	-- updates, and deletions. To avoid needing to add a case for every possible
	-- bitmap value, we remove the secondary effects from the effect tag and
	-- switch on that value.
	local primaryFlags =
		bit32.band(flags, bit32.bor(ReactFiberFlags.Placement, ReactFiberFlags.Update, ReactFiberFlags.Hydrating))
	if primaryFlags == ReactFiberFlags.Placement then
		commitPlacement(fiber)
		-- Clear the "placement" from effect tag so that we know that this is
		-- inserted, before any life-cycles like componentDidMount gets called.
		-- TODO: findDOMNode doesn't rely on this any more but isMounted does
		-- and isMounted is deprecated anyway so we should be able to kill this.
		fiber.flags = bit32.band(fiber.flags, bit32.bnot(ReactFiberFlags.Placement))
	elseif primaryFlags == ReactFiberFlags.PlacementAndUpdate then
		-- Placement
		commitPlacement(fiber)
		-- Clear the "placement" from effect tag so that we know that this is
		-- inserted, before any life-cycles like componentDidMount gets called.
		fiber.flags = bit32.band(fiber.flags, bit32.bnot(ReactFiberFlags.Placement))

		-- Update
		local current = fiber.alternate
		commitWork(current, fiber)
		-- performance: avoid always-false compare for Roblox renderer in hot path
		-- elseif primaryFlags == ReactFiberFlags.Hydrating then
		--   fiber.flags = bit32.band(fiber.flags, bit32.bnot(ReactFiberFlags.Hydrating))
		-- elseif primaryFlags == ReactFiberFlags.HydratingAndUpdate then
		--   fiber.flags = bit32.band(fiber.flags, bit32.bnot(ReactFiberFlags.Hydrating))
		--   -- Update
		--   local current = fiber.alternate
		--   commitWork(current, fiber)
	elseif primaryFlags == ReactFiberFlags.Update then
		local current = fiber.alternate
		commitWork(current, fiber)
	end
end

mod.commitMutationEffectsDeletions = function(
	deletions: Array<Fiber>,
	fiber: Fiber,
	root: FiberRoot,
	renderPriorityLevel
)
	-- performance: align to React 18, which ditches the __DEV__ branch and use of invokeGuardedCallback
	for _, childToDelete in deletions do
		-- FIXME Luau: CLI-49835, "Function only returns 1 value, 2 are required"
		local ok, error_ = xpcall(commitDeletion, describeError, root, childToDelete, fiber, renderPriorityLevel)
		if not ok then
			exports.captureCommitPhaseError(childToDelete, fiber, error_)
		end
	end
end

exports.schedulePassiveEffectCallback = function()
	if not rootDoesHavePassiveEffects then
		rootDoesHavePassiveEffects = true
		scheduleCallback(NormalSchedulerPriority, function()
			exports.flushPassiveEffects()
			return nil
		end)
	end
end

-- deviation: Pre-declare functions
local flushPassiveEffectsImpl
exports.flushPassiveEffects = function(): boolean
	-- Returns whether passive effects were flushed.
	if pendingPassiveEffectsRenderPriority ~= NoSchedulerPriority then
		local priorityLevel = if pendingPassiveEffectsRenderPriority > NormalSchedulerPriority
			then NormalSchedulerPriority
			else pendingPassiveEffectsRenderPriority
		pendingPassiveEffectsRenderPriority = NoSchedulerPriority
		if ReactFeatureFlags.decoupleUpdatePriorityFromScheduler then
			local previousLanePriority = getCurrentUpdateLanePriority()

			-- performance: extract non-throwable function from try{} to remove need for anon function
			setCurrentUpdateLanePriority(schedulerPriorityToLanePriority(priorityLevel))
			-- deviation: YOLO flag for disabling pcall
			local ok, result
			if not __YOLO__ then
				ok, result = xpcall(runWithPriority, describeError, priorityLevel, flushPassiveEffectsImpl)
			else
				ok = true
				setCurrentUpdateLanePriority(schedulerPriorityToLanePriority(priorityLevel))
				result = runWithPriority(priorityLevel, flushPassiveEffectsImpl)
			end

			-- finally
			setCurrentUpdateLanePriority(previousLanePriority)

			if not ok then
				error(result)
			end
			return result
		else
			return runWithPriority(priorityLevel, flushPassiveEffectsImpl)
		end
	end
	return false
end

flushPassiveMountEffects = function(root, firstChild: Fiber): ()
	local fiber = firstChild
	while fiber ~= nil do
		local prevProfilerOnStack = nil
		if ReactFeatureFlags.enableProfilerTimer and ReactFeatureFlags.enableProfilerCommitHooks then
			if fiber.tag == ReactWorkTags.Profiler then
				prevProfilerOnStack = nearestProfilerOnStack
				nearestProfilerOnStack = fiber
			end
		end

		local primarySubtreeFlags = bit32.band(fiber.subtreeFlags, ReactFiberFlags.PassiveMask)

		if fiber.child ~= nil and primarySubtreeFlags ~= ReactFiberFlags.NoFlags then
			flushPassiveMountEffects(root, fiber.child)
		end

		if bit32.band(fiber.flags, ReactFiberFlags.Passive) ~= ReactFiberFlags.NoFlags then
			if __DEV__ then
				setCurrentDebugFiberInDEV(fiber)
				invokeGuardedCallback(nil, commitPassiveMountOnFiber, nil, root, fiber)
				if hasCaughtError() then
					local error_ = clearCaughtError()
					exports.captureCommitPhaseError(fiber, fiber.return_, error_)
				end
				resetCurrentDebugFiberInDEV()
			else
				-- deviation: YOLO flag for disabling pcall
				local ok, error_
				if not __YOLO__ then
					ok, error_ = xpcall(commitPassiveMountOnFiber, describeError, root, fiber)
				else
					ok = true
					commitPassiveMountOnFiber(root, fiber)
				end

				if not ok then
					exports.captureCommitPhaseError(fiber, fiber.return_, error_)
				end
			end
		end

		if ReactFeatureFlags.enableProfilerTimer and ReactFeatureFlags.enableProfilerCommitHooks then
			if fiber.tag == ReactWorkTags.Profiler then
				-- Bubble times to the next nearest ancestor Profiler.
				-- After we process that Profiler, we'll bubble further up.
				if prevProfilerOnStack ~= nil then
					prevProfilerOnStack.stateNode.passiveEffectDuration += fiber.stateNode.passiveEffectDuration
				end

				nearestProfilerOnStack = prevProfilerOnStack
			end
		end

		-- FIXME Luau: Luau doesn't understand the loop ~= nil construct
		fiber = fiber.sibling :: Fiber
	end
end

local function flushPassiveUnmountEffects(firstChild: Fiber): ()
	local fiber = firstChild
	while fiber ~= nil do
		local deletions = fiber.deletions
		if deletions ~= nil then
			for i = 1, #deletions do
				local fiberToDelete = deletions[i]
				mod.flushPassiveUnmountEffectsInsideOfDeletedTree(fiberToDelete, fiber)

				-- Now that passive effects have been processed, it's safe to detach lingering pointers.
				mod.detachFiberAfterEffects(fiberToDelete)
			end
		end

		local child = fiber.child
		if child ~= nil then
			-- If any children have passive effects then traverse the subtree.
			-- Note that this requires checking subtreeFlags of the current Fiber,
			-- rather than the subtreeFlags/effectsTag of the first child,
			-- since that would not cover passive effects in siblings.
			local passiveFlags = bit32.band(fiber.subtreeFlags, ReactFiberFlags.PassiveMask)
			if passiveFlags ~= ReactFiberFlags.NoFlags then
				flushPassiveUnmountEffects(child)
			end
		end

		local primaryFlags = bit32.band(fiber.flags, ReactFiberFlags.Passive)
		if primaryFlags ~= ReactFiberFlags.NoFlags then
			setCurrentDebugFiberInDEV(fiber)
			commitPassiveUnmountOnFiber(fiber)
			resetCurrentDebugFiberInDEV()
		end

		-- FIXME Luau: Luau doesn't understand the loop ~= nil construct
		fiber = fiber.sibling :: Fiber
	end
end

mod.flushPassiveUnmountEffectsInsideOfDeletedTree = function(fiberToDelete: Fiber, nearestMountedAncestor: Fiber)
	if bit32.band(fiberToDelete.subtreeFlags, ReactFiberFlags.PassiveStatic) ~= ReactFiberFlags.NoFlags then
		-- If any children have passive effects then traverse the subtree.
		-- Note that this requires checking subtreeFlags of the current Fiber,
		-- rather than the subtreeFlags/effectsTag of the first child,
		-- since that would not cover passive effects in siblings.
		local child = fiberToDelete.child
		while child ~= nil do
			mod.flushPassiveUnmountEffectsInsideOfDeletedTree(child, nearestMountedAncestor)
			child = child.sibling
		end
	end

	if bit32.band(fiberToDelete.flags, ReactFiberFlags.PassiveStatic) ~= ReactFiberFlags.NoFlags then
		setCurrentDebugFiberInDEV(fiberToDelete)
		commitPassiveUnmountInsideDeletedTreeOnFiber(fiberToDelete, nearestMountedAncestor)
		resetCurrentDebugFiberInDEV()
	end
end

flushPassiveEffectsImpl = function()
	if rootWithPendingPassiveEffects == nil then
		return false
	end

	-- FIXME Luau: Luau doesn't narrow to non-nil with the guard above
	local root = rootWithPendingPassiveEffects :: FiberRoot
	local lanes = pendingPassiveEffectsLanes
	rootWithPendingPassiveEffects = nil
	pendingPassiveEffectsLanes = ReactFiberLane.NoLanes

	invariant(
		bit32.band(executionContext, bit32.bor(RenderContext, CommitContext)) == NoContext,
		"Cannot flush passive effects while already rendering."
	)

	if __DEV__ then
		if enableDebugTracing then
			DebugTracing.logPassiveEffectsStarted(lanes)
		end
	end

	if enableSchedulingProfiler then
		SchedulingProfiler.markPassiveEffectsStarted(lanes)
	end

	local prevExecutionContext = executionContext
	executionContext = bit32.bor(executionContext, CommitContext)
	local prevInteractions = mod.pushInteractions(root)

	-- It's important that ALL pending passive effect destroy functions are called
	-- before ANY passive effect create functions are called.
	-- Otherwise effects in sibling components might interfere with each other.
	-- e.g. a destroy function in one component may unintentionally override a ref
	-- value set by a create function in another component.
	-- Layout effects have the same constraint.
	flushPassiveUnmountEffects(root.current)
	flushPassiveMountEffects(root, root.current)

	if __DEV__ then
		if enableDebugTracing then
			DebugTracing.logPassiveEffectsStopped()
		end
	end

	if enableSchedulingProfiler then
		SchedulingProfiler.markPassiveEffectsStopped()
	end

	if __DEV__ and enableDoubleInvokingEffects then
		commitDoubleInvokeEffectsInDEV(root.current, true)
	end

	if ReactFeatureFlags.enableSchedulerTracing then
		mod.popInteractions(prevInteractions)
		mod.finishPendingInteractions(root, lanes)
	end

	executionContext = prevExecutionContext

	flushSyncCallbackQueue()

	-- If additional passive effects were scheduled, increment a counter. If this
	-- exceeds the limit, we'll fire a warning.
	if rootWithPendingPassiveEffects == nil then
		nestedPassiveUpdateCount = 0
	else
		nestedPassiveUpdateCount = nestedPassiveUpdateCount + 1
	end

	return true
end

exports.isAlreadyFailedLegacyErrorBoundary = function(instance): boolean
	return legacyErrorBoundariesThatAlreadyFailed ~= nil and legacyErrorBoundariesThatAlreadyFailed:has(instance)
end

exports.markLegacyErrorBoundaryAsFailed = function(instance)
	if legacyErrorBoundariesThatAlreadyFailed == nil then
		legacyErrorBoundariesThatAlreadyFailed = Set.new({ instance })
	else
		legacyErrorBoundariesThatAlreadyFailed:add(instance)
	end
end

-- TODO: this function and the related fields should be extracted/relocated to break a cycle
local function prepareToThrowUncaughtError(error_)
	if not hasUncaughtError then
		hasUncaughtError = true
		firstUncaughtError = error_
	end
end
exports.onUncaughtError = prepareToThrowUncaughtError

captureCommitPhaseErrorOnRoot = function(rootFiber: Fiber, sourceFiber: Fiber, error_)
	local errorInfo = createCapturedValue(error_, sourceFiber)
	-- deviation: parameterize method onUncaughtError to avoid circular dependency
	local update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane, exports.onUncaughtError)
	enqueueUpdate(rootFiber, update)
	local eventTime = exports.requestEventTime()
	local root = mod.markUpdateLaneFromFiberToRoot(rootFiber, SyncLane)
	if root ~= nil then
		markRootUpdated(root, SyncLane, eventTime)
		ensureRootIsScheduled(root, eventTime)
		mod.schedulePendingInteractions(root, SyncLane)
	end
end

-- exports.captureCommitPhaseError(
--   sourceFiber: Fiber,
--   nearestMountedAncestor: Fiber | nil,
--   error: mixed
-- )
exports.captureCommitPhaseError = function(sourceFiber: Fiber, nearestMountedAncestor, error_)
	if sourceFiber.tag == ReactWorkTags.HostRoot then
		-- Error was thrown at the root. There is no parent, so the root
		-- itself should capture it.
		captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error_)
		return
	end

	local fiber = nil
	if skipUnmountedBoundaries then
		fiber = nearestMountedAncestor
	else
		fiber = sourceFiber.return_
	end

	while fiber ~= nil do
		if fiber.tag == ReactWorkTags.HostRoot then
			captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error_)
			return
		else
			if fiber.tag == ReactWorkTags.ClassComponent then
				local ctor = fiber.type
				local instance = fiber.stateNode
				if
					typeof(ctor.getDerivedStateFromError) == "function"
					or (
						typeof(instance.componentDidCatch) == "function"
						and not exports.isAlreadyFailedLegacyErrorBoundary(instance)
					)
				then
					local errorInfo = createCapturedValue(error_, sourceFiber)
					local update = createClassErrorUpdate(fiber, errorInfo, SyncLane)
					enqueueUpdate(fiber, update)
					local eventTime = exports.requestEventTime()
					local root = mod.markUpdateLaneFromFiberToRoot(fiber, SyncLane)
					if root ~= nil then
						markRootUpdated(root, SyncLane, eventTime)
						ensureRootIsScheduled(root, eventTime)
						mod.schedulePendingInteractions(root, SyncLane)
					end
					return
				end
			end
			fiber = fiber.return_
		end
	end
end

exports.pingSuspendedRoot = function(root: FiberRoot, wakeable: Wakeable, pingedLanes: Lanes)
	local pingCache = root.pingCache
	if pingCache ~= nil then
		-- The wakeable resolved, so we no longer need to memoize, because it will
		-- never be thrown again.
		pingCache[wakeable] = nil
	end

	local eventTime = exports.requestEventTime()
	markRootPinged(root, pingedLanes, eventTime)

	if workInProgressRoot == root and isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes) then
		-- Received a ping at the same priority level at which we're currently
		-- rendering. We might want to restart this render. This should mirror
		-- the logic of whether or not a root suspends once it completes.

		-- TODO: If we're rendering sync either due to Sync, Batched or expired,
		-- we should probably never restart.

		-- If we're suspended with delay, or if it's a retry, we'll always suspend
		-- so we can always restart.
		if
			workInProgressRootExitStatus == RootExitStatus.SuspendedWithDelay
			or workInProgressRootExitStatus == RootExitStatus.Suspended
				and includesOnlyRetries(workInProgressRootRenderLanes)
				and now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS
		then
			-- Restart from the root.
			mod.prepareFreshStack(root, ReactFiberLane.NoLanes)
		else
			-- Even though we can't restart right now, we might get an
			-- opportunity later. So we mark this render as having a ping.
			workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes)
		end
	end

	ensureRootIsScheduled(root, eventTime)
	mod.schedulePendingInteractions(root, pingedLanes)
end

function retryTimedOutBoundary(boundaryFiber: Fiber, retryLane: Lane)
	-- The boundary fiber (a Suspense component or SuspenseList component)
	-- previously was rendered in its fallback state. One of the promises that
	-- suspended it has resolved, which means at least part of the tree was
	-- likely unblocked. Try rendering again, at a new expiration time.
	if retryLane == ReactFiberLane.NoLane then
		retryLane = requestRetryLane(boundaryFiber)
	end
	-- TODO: Special case idle priority?
	local eventTime = exports.requestEventTime()
	local root = mod.markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane)
	if root ~= nil then
		markRootUpdated(root, retryLane, eventTime)
		ensureRootIsScheduled(root, eventTime)
		mod.schedulePendingInteractions(root, retryLane)
	end
end

-- exports.retryDehydratedSuspenseBoundary(boundaryFiber: Fiber)
--   local suspenseState: nil | SuspenseState = boundaryFiber.memoizedState
--   local retryLane = NoLane
--   if suspenseState ~= nil)
--     retryLane = suspenseState.retryLane
--   end
--   retryTimedOutBoundary(boundaryFiber, retryLane)
-- end

exports.resolveRetryWakeable = function(boundaryFiber: Fiber, wakeable: Wakeable)
	local retryLane = ReactFiberLane.NoLane -- Default
	local retryCache -- : WeakSet<Wakeable> | Set<Wakeable> | nil
	-- performance: avoid always-false comapare
	-- if ReactFeatureFlags.enableSuspenseServerRenderer then
	--   if boundaryFiber.tag == ReactWorkTags.SuspenseComponent then
	--       retryCache = boundaryFiber.stateNode
	--       local suspenseState: nil | SuspenseState = boundaryFiber.memoizedState
	--       if suspenseState ~= nil then
	--         -- TODO: Remove Luau narrowing workaround
	--         retryLane = (suspenseState :: SuspenseState).retryLane
	--       end
	--     elseif boundaryFiber.tag == ReactWorkTags.SuspenseListComponent then
	--       retryCache = boundaryFiber.stateNode
	--     else
	--       invariant(
	--         false,
	--         'Pinged unknown suspense boundary type. ' ..
	--           'This is probably a bug in React.'
	--       )
	--   end
	-- else
	retryCache = boundaryFiber.stateNode
	-- end

	if retryCache ~= nil then
		-- The wakeable resolved, so we no longer need to memoize, because it will
		-- never be thrown again.
		retryCache:delete(wakeable)
	end

	retryTimedOutBoundary(boundaryFiber, retryLane)
end

-- Computes the next Just Noticeable Difference (JND) boundary.
-- The theory is that a person can't tell the difference between small differences in time.
-- Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
-- difference in the experience. However, waiting for longer might mean that we can avoid
-- showing an intermediate loading state. The longer we have already waited, the harder it
-- is to tell small differences in time. Therefore, the longer we've already waited,
-- the longer we can wait additionally. At some point we have to give up though.
-- We pick a train model where the next boundary commits at a consistent schedule.
-- These particular numbers are vague estimates. We expect to adjust them based on research.
-- FIXME Luau: Luau needs an explicit number annotation here, but should infer: CLI-49832
function jnd(timeElapsed: number): number
	if timeElapsed < 120 then
		return 120
	elseif timeElapsed < 480 then
		return 480
	elseif timeElapsed < 1080 then
		return 1080
	elseif timeElapsed < 1920 then
		return 1920
	elseif timeElapsed < 3000 then
		return 3000
	elseif timeElapsed < 4320 then
		return 4320
	else
		return math.ceil(timeElapsed / 1960) * 1960
	end
end

mod.checkForNestedUpdates = function()
	if nestedUpdateCount > NESTED_UPDATE_LIMIT then
		nestedUpdateCount = 0
		rootWithNestedUpdates = nil
		invariant(
			false,
			"Maximum update depth exceeded. This can happen when a component "
				.. "repeatedly calls setState inside componentWillUpdate or "
				.. "componentDidUpdate. React limits the number of nested updates to "
				.. "prevent infinite loops."
		)
	end

	if __DEV__ then
		if nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT then
			nestedPassiveUpdateCount = 0
			console.error(
				"Maximum update depth exceeded. This can happen when a component "
					.. "calls setState inside useEffect, but useEffect either doesn't "
					.. "have a dependency array, or one of the dependencies changes on "
					.. "every render."
			)
		end
	end
end

function flushRenderPhaseStrictModeWarningsInDEV()
	if __DEV__ then
		ReactStrictModeWarnings.flushLegacyContextWarning()

		if ReactFeatureFlags.warnAboutDeprecatedLifecycles then
			ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings()
		end
	end
end

function commitDoubleInvokeEffectsInDEV(fiber: Fiber, hasPassiveEffects: boolean)
	if __DEV__ and enableDoubleInvokingEffects then
		setCurrentDebugFiberInDEV(fiber)
		invokeEffectsInDev(fiber, ReactFiberFlags.MountLayoutDev, invokeLayoutEffectUnmountInDEV)
		if hasPassiveEffects then
			invokeEffectsInDev(fiber, ReactFiberFlags.MountPassiveDev, invokePassiveEffectUnmountInDEV)
		end

		invokeEffectsInDev(fiber, ReactFiberFlags.MountLayoutDev, invokeLayoutEffectMountInDEV)
		if hasPassiveEffects then
			invokeEffectsInDev(fiber, ReactFiberFlags.MountPassiveDev, invokePassiveEffectMountInDEV)
		end
		resetCurrentDebugFiberInDEV()
	end
end

function invokeEffectsInDev(firstChild: Fiber, fiberFlags: Flags, invokeEffectFn: (fiber: Fiber) -> ()): ()
	if __DEV__ and enableDoubleInvokingEffects then
		local fiber = firstChild
		while fiber ~= nil do
			if fiber.child ~= nil then
				local primarySubtreeFlag = bit32.band(fiber.subtreeFlags, fiberFlags)
				if primarySubtreeFlag ~= ReactFiberFlags.NoFlags then
					invokeEffectsInDev(fiber.child, fiberFlags, invokeEffectFn)
				end
			end

			if bit32.band(fiber.flags, fiberFlags) ~= ReactFiberFlags.NoFlags then
				invokeEffectFn(fiber)
			end
			-- FIXME Luau: Luau doesn't understand the loop ~= nil construct
			fiber = fiber.sibling :: Fiber
		end
	end
end

-- deviation: FIXME restore type Set<string>?, has trouble with narrowing
local didWarnStateUpdateForNotYetMountedComponent: any = nil
mod.warnAboutUpdateOnNotYetMountedFiberInDEV = function(fiber)
	if __DEV__ then
		if bit32.band(executionContext, RenderContext) ~= NoContext then
			-- We local the other warning about render phase updates deal with this one.
			return
		end

		if bit32.band(fiber.mode, bit32.bor(ReactTypeOfMode.BlockingMode, ReactTypeOfMode.ConcurrentMode)) == 0 then
			return
		end

		local tag = fiber.tag
		if
			tag ~= ReactWorkTags.IndeterminateComponent
			and tag ~= ReactWorkTags.HostRoot
			and tag ~= ReactWorkTags.ClassComponent
			and tag ~= ReactWorkTags.FunctionComponent
			and tag ~= ReactWorkTags.ForwardRef
			and tag ~= ReactWorkTags.MemoComponent
			and tag ~= ReactWorkTags.SimpleMemoComponent
			and tag ~= ReactWorkTags.Block
		then
			-- Only warn for user-defined components, not internal ones like Suspense.
			return
		end

		-- We show the whole stack but dedupe on the top component's name because
		-- the problematic code almost always lies inside that component.
		local componentName = getComponentName(fiber.type) or "ReactComponent"
		if didWarnStateUpdateForNotYetMountedComponent ~= nil then
			if didWarnStateUpdateForNotYetMountedComponent[componentName] then
				return
			end
			didWarnStateUpdateForNotYetMountedComponent[componentName] = true
		else
			-- FIXME? not sure this translation is correct
			didWarnStateUpdateForNotYetMountedComponent = { [componentName] = true }
		end

		local previousFiber = ReactCurrentFiber.current
		local ok, result = pcall(function()
			setCurrentDebugFiberInDEV(fiber)
			console.error(
				"Can't perform a React state update on a component that hasn't mounted yet. "
					.. "This indicates that you have a side-effect in your render function that "
					.. "asynchronously later calls tries to update the component. Move this work to "
					.. "useEffect instead."
			)
		end)

		-- finally
		if previousFiber then
			setCurrentDebugFiberInDEV(fiber)
		else
			resetCurrentDebugFiberInDEV()
		end

		if not ok then
			error(result)
		end
	end
end

-- deviation: Declared on the mod table instead of as a local
if __DEV__ and ReactFeatureFlags.replayFailedUnitOfWorkWithInvokeGuardedCallback then
	local dummyFiber = nil
	mod.beginWork = function(current, unitOfWork, lanes)
		-- If a component throws an error, we replay it again in a synchronously
		-- dispatched event, so that the debugger will treat it as an uncaught
		-- error See ReactErrorUtils for more information.

		-- Before entering the begin phase, copy the work-in-progress onto a dummy
		-- fiber. If beginWork throws, we'll use this to reset the state.
		local originalWorkInProgressCopy = ReactFiber.assignFiberPropertiesInDEV(dummyFiber, unitOfWork)
		local ok, result = xpcall(originalBeginWork, describeError, current, unitOfWork, lanes)
		if not ok then
			local originalError = result

			if
				originalError ~= nil
				and typeof(originalError) == "table"
				and typeof(originalError.andThen) == "function"
			then
				-- Don't replay promises. Treat everything else like an error.
				error(originalError)
			end

			-- Keep this code in sync with handleError; any changes here must have
			-- corresponding changes there.
			resetContextDependencies()
			resetHooksAfterThrow()
			-- Don't reset current debug fiber, since we're about to work on the
			-- same fiber again.

			-- Unwind the failed stack frame
			unwindInterruptedWork(unitOfWork)

			-- Restore the original properties of the fiber.
			ReactFiber.assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy)

			if
				ReactFeatureFlags.enableProfilerTimer
				and bit32.band(unitOfWork.mode, ReactTypeOfMode.ProfileMode) ~= 0
			then
				-- Reset the profiler timer.
				ReactProfilerTimer.startProfilerTimer(unitOfWork)
			end

			-- Run beginWork again.
			invokeGuardedCallback(nil, originalBeginWork, nil, current, unitOfWork, lanes)

			if hasCaughtError() then
				local replayError = clearCaughtError()
				-- `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.
				-- Rethrow this error instead of the original one.
				error(replayError)
			else
				-- This branch is reachable if the render phase is impure.
				error(originalError)
			end
		end

		return result
	end
else
	mod.beginWork = originalBeginWork
end

local didWarnAboutUpdateInRender = false
local didWarnAboutUpdateInRenderForAnotherComponent
if __DEV__ then
	didWarnAboutUpdateInRenderForAnotherComponent = {}
end

mod.warnAboutRenderPhaseUpdatesInDEV = function(fiber: Fiber): ()
	if __DEV__ then
		if
			ReactCurrentFiber.isRendering
			and bit32.band(executionContext, RenderContext) ~= NoContext
			and not getIsUpdatingOpaqueValueInRenderPhaseInDEV()
		then
			if
				fiber.tag == ReactWorkTags.FunctionComponent
				or fiber.tag == ReactWorkTags.ForwardRef
				or fiber.tag == ReactWorkTags.SimpleMemoComponent
			then
				local renderingComponentName = (function()
					if workInProgress ~= nil then
						return getComponentName((workInProgress :: Fiber).type)
					end
					return "Unknown"
				end)()
				-- Dedupe by the rendering component because it's the one that needs to be fixed.
				local dedupeKey = renderingComponentName
				-- deviation:
				-- if !didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey))
				if didWarnAboutUpdateInRenderForAnotherComponent[dedupeKey] == nil then
					didWarnAboutUpdateInRenderForAnotherComponent[dedupeKey] = true
					local setStateComponentName = getComponentName(fiber.type) or "Unknown"
					console.error(
						"Cannot update a component (`%s`) while rendering a "
							.. "different component (`%s`). To locate the bad setState() call inside `%s`, "
							.. "follow the stack trace as described in https://reactjs.org/link/setstate-in-render",
						setStateComponentName,
						renderingComponentName,
						renderingComponentName
					)
				end
			elseif fiber.tag == ReactWorkTags.ClassComponent then
				if not didWarnAboutUpdateInRender then
					console.error(
						"Cannot update during an existing state transition (such as "
							.. "within `render`). Render methods should be a pure "
							.. "function of props and state."
					)
					didWarnAboutUpdateInRender = true
				end
			end
		end
	end
end

-- a 'shared' variable that changes when act() opens/closes in tests.
exports.IsThisRendererActing = { current = false }

exports.warnIfNotScopedWithMatchingAct = function(fiber: Fiber)
	if __DEV__ then
		if
			ReactFiberHostConfig.warnsIfNotActing == true
			and IsSomeRendererActing.current == true
			and exports.IsThisRendererActing.current ~= true
		then
			local previousFiber = ReactCurrentFiber.current
			local ok, result = pcall(function()
				setCurrentDebugFiberInDEV(fiber)
				-- deviation: error modified to suggest proper lua instead of JS

				-- FIXME (roblox): return to this when we have a better idea of what it
				-- looks like; in React, this string is broken up oddly to avoid
				-- confusing tools, but we don't have any reason to do that right now
				console.error(
					"It looks like you're using the wrong act() around your test interactions.\n"
						.. "Be sure to use the matching version of act() corresponding to your renderer:\n\n"
						.. "-- for react-roblox:\n"
						.. "local React = require(Packages.React)\n"
						.. "-- ...\n"
						.. "React.TestUtils.act(function() ... end)\n\n"
						.. "-- for react-test-renderer:\n"
						.. "local TestRenderer = require(Packages.ReactTestRenderer)\n"
						.. "-- ...\n"
						.. "TestRenderer.act(function() ... end)"
				)
			end)

			-- finally
			if previousFiber then
				setCurrentDebugFiberInDEV(fiber)
			else
				resetCurrentDebugFiberInDEV()
			end

			if not ok then
				error(result)
			end
		end
	end
end

exports.warnIfNotCurrentlyActingEffectsInDEV = function(fiber: Fiber): ()
	if __DEV__ then
		if
			ReactFiberHostConfig.warnsIfNotActing == true
			and bit32.band(fiber.mode, ReactTypeOfMode.StrictMode) ~= ReactTypeOfMode.NoMode
			and IsSomeRendererActing.current == false
			and exports.IsThisRendererActing.current == false
		then
			-- deviation: Use Lua syntax for example fix
			console.error(
				"An update to %s ran an effect, but was not wrapped in act(...).\n\n"
					.. "When testing, code that causes React state updates should be "
					.. "wrapped into act(...):\n\n"
					.. "act(function()\n"
					.. "  --[[ fire events that update state ]]\n"
					.. "end)\n"
					.. "--[[ assert on the output ]]\n\n"
					.. "This ensures that you're testing the behavior the user would see "
					.. "in the real client."
					.. " Learn more at https://reactjs.org/link/wrap-tests-with-act",
				getComponentName(fiber.type)
			)
		end
	end
end

exports.warnIfNotCurrentlyActingUpdatesInDEV = function(fiber: Fiber): ()
	if __DEV__ then
		if
			ReactFiberHostConfig.warnsIfNotActing == true
			and executionContext == NoContext
			and IsSomeRendererActing.current == false
			and exports.IsThisRendererActing.current == false
		then
			local previousFiber = ReactCurrentFiberCurrent
			local ok, result = pcall(function()
				setCurrentDebugFiberInDEV(fiber)
				-- deviation: Use Lua syntax for example fix
				console.error(
					"An update to %s inside a test was not wrapped in act(...).\n\n"
						.. "When testing, code that causes React state updates should be "
						.. "wrapped into act(...):\n\n"
						.. "act(function()\n"
						.. "  --[[ fire events that update state ]]\n"
						.. "end)\n"
						.. "--[[ assert on the output ]]\n\n"
						.. "This ensures that you're testing the behavior the user would see "
						.. "in the client application."
						.. " Learn more at https://reactjs.org/link/wrap-tests-with-act",
					getComponentName(fiber.type)
				)
			end)

			-- Finally
			if previousFiber then
				setCurrentDebugFiberInDEV(fiber)
			else
				resetCurrentDebugFiberInDEV()
			end

			if ok then
				return result
			end
		end
	end
	-- deviation: explicit return to silence analyze
	return
end

-- In tests, we want to enforce a mocked scheduler.
local didWarnAboutUnmockedScheduler = false
-- TODO Before we release concurrent mode, revisit this and decide whether a mocked
-- scheduler is the actual recommendation. The alternative could be a testing build,
-- a new lib, or whatever; we dunno just yet. This message is for early adopters
-- to get their tests right.

exports.warnIfUnmockedScheduler = function(fiber: Fiber)
	if __DEV__ then
		if didWarnAboutUnmockedScheduler == false and Scheduler.unstable_flushAllWithoutAsserting == nil then
			if
				bit32.band(fiber.mode, ReactTypeOfMode.BlockingMode) ~= 0
				or bit32.band(fiber.mode, ReactTypeOfMode.ConcurrentMode) ~= 0
			then
				didWarnAboutUnmockedScheduler = true
				-- deviation: error modified to suggest proper lua instead of JS

				-- FIXME (roblox): return to this when jest-roblox is in use; in React,
				-- this string is broken up oddly to avoid confusing tools, but we don't
				-- have any reason to do that right now
				console.error(
					"In Concurrent or Sync modes, the 'scheduler' module needs to be mocked "
						.. "to guarantee consistent behaviour across tests and client application. "
						.. "For example, with Jest: \n"
						-- Break up requires to avoid accidentally parsing them as dependencies.
						.. "jest.mock('scheduler', function() return require(Packages.Scheduler).unstable_mock end)\n\n"
						.. "For more info, visit https://reactjs.org/link/mock-scheduler"
				)
			elseif ReactFeatureFlags.warnAboutUnmockedScheduler == true then
				didWarnAboutUnmockedScheduler = true
				-- deviation: error modified to suggest proper lua instead of JS

				-- FIXME (roblox): return to this when jest-roblox is in use; in React,
				-- this string is broken up oddly to avoid confusing tools, but we don't
				-- have any reason to do that right now
				console.error(
					"Starting from React v18, the 'scheduler' module will need to be mocked "
						.. "to guarantee consistent behaviour across tests and client applications. "
						.. "For example, with Jest: \n"
						-- Break up requires to avoid accidentally parsing them as dependencies.
						.. "jest.mock('scheduler', function() return require(Packages.Scheduler).unstable_mock end)\n\n"
						.. "For more info, visit https://reactjs.org/link/mock-scheduler"
				)
			end
		end
	end
end

function computeThreadID(root: FiberRoot, lane: Lane | Lanes)
	-- Interaction threads are unique per root and expiration time.
	-- NOTE: Intentionally unsound cast. All that matters is that it's a number
	-- and it represents a batch of work. Could make a helper function instead,
	-- but meh this is fine for now.
	return lane * 1000 + root.interactionThreadID
end

exports.markSpawnedWork = function(lane: Lane | Lanes)
	if not ReactFeatureFlags.enableSchedulerTracing then
		return
	end
	if spawnedWorkDuringRender == nil then
		spawnedWorkDuringRender = { lane }
	else
		-- FIXME Luau: depends on Luau type states
		table.insert(spawnedWorkDuringRender :: Array<number>, lane)
	end
end

function scheduleInteractions(root: FiberRoot, lane: Lane | Lanes, interactions: Set<Interaction>)
	if not ReactFeatureFlags.enableSchedulerTracing then
		return
	end

	if interactions.size > 0 then
		local pendingInteractionMap = root.pendingInteractionMap
		local pendingInteractions = pendingInteractionMap:get(lane)
		if pendingInteractions ~= nil then
			interactions:forEach(function(interaction)
				if not pendingInteractions:has(interaction) then
					-- Update the pending async work count for previously unscheduled interaction.
					interaction.__count += 1
				end

				pendingInteractions:add(interaction)
			end)
		else
			pendingInteractionMap:set(lane, Set.new(interactions))

			-- Update the pending async work count for the current interactions.
			for _, interaction in interactions do
				interaction.__count += 1
			end
		end

		local subscriber = __subscriberRef.current
		if subscriber ~= nil then
			local threadID = computeThreadID(root, lane)
			subscriber.onWorkScheduled(interactions, threadID)
		end
	end
end

mod.schedulePendingInteractions = function(root: FiberRoot, lane: Lane | Lanes)
	-- This is called when work is scheduled on a root.
	-- It associates the current interactions with the newly-scheduled expiration.
	-- They will be restored when that expiration is later committed.
	if not ReactFeatureFlags.enableSchedulerTracing then
		return
	end

	scheduleInteractions(root, lane, __interactionsRef.current)
end

mod.startWorkOnPendingInteractions = function(root: FiberRoot, lanes: Lanes)
	-- This is called when new work is started on a root.
	if not ReactFeatureFlags.enableSchedulerTracing then
		return
	end

	-- Determine which interactions this batch of work currently includes, So that
	-- we can accurately attribute time spent working on it, And so that cascading
	-- work triggered during the render phase will be associated with it.
	local interactions: Set<Interaction> = Set.new()
	root.pendingInteractionMap:forEach(function(scheduledInteractions, scheduledLane)
		if includesSomeLane(lanes, scheduledLane) then
			scheduledInteractions:forEach(function(interaction)
				interactions:add(interaction)
			end)
		end
	end)

	-- Store the current set of interactions on the ReactInternalTypes.FiberRoot for a few reasons:
	-- We can re-use it in hot functions like performConcurrentWorkOnRoot()
	-- without having to recalculate it. We will also use it in commitWork() to
	-- pass to any Profiler onRender() hooks. This also provides DevTools with a
	-- way to access it when the onCommitRoot() hook is called.
	-- FIXME: manual type check to workaround Luau analyze bug "Type 'Set<Interaction>' could not be converted into 'Set<Interaction>'"
	root.memoizedInteractions = interactions :: any

	if interactions.size > 0 then
		local subscriber = __subscriberRef.current
		if subscriber ~= nil then
			local threadID = computeThreadID(root, lanes)
			local ok, error_ = xpcall(subscriber.onWorkStarted, describeError, interactions, threadID)
			if not ok then
				-- If the subscriber throws, rethrow it in a separate task
				scheduleCallback(ImmediateSchedulerPriority, function()
					error(error_)
				end)
			end
		end
	end
end

mod.finishPendingInteractions = function(root: FiberRoot, committedLanes)
	if not ReactFeatureFlags.enableSchedulerTracing then
		return
	end

	local remainingLanesAfterCommit = root.pendingLanes

	local subscriber

	-- try
	local ok = true
	local error_
	if subscriber ~= nil and root.memoizedInteractions.size > 0 then
		-- FIXME: More than one lane can finish in a single commit.
		-- performance: hoist non-throwable things out of the pcall() so we can remove an anon function
		local threadID = computeThreadID(root, committedLanes)
		subscriber = __subscriberRef.current
		-- deviation: helper for raw table set/map size > 0
		ok, error_ = xpcall(subscriber.onWorkStopped, describeError, root.memoizedInteractions, threadID)
	end

	-- finally
	-- Clear completed interactions from the pending Map.
	-- Unless the render was suspended or cascading work was scheduled,
	-- In which case– leave pending interactions until the subsequent render.
	local pendingInteractionMap = root.pendingInteractionMap
	pendingInteractionMap:forEach(function(scheduledInteractions, lane)
		-- Only decrement the pending interaction count if we're done.
		-- If there's still work at the current priority,
		-- That indicates that we are waiting for suspense data.
		if not includesSomeLane(remainingLanesAfterCommit, lane) then
			pendingInteractionMap:delete(lane)
			scheduledInteractions:forEach(function(interaction)
				interaction.__count -= 1

				if subscriber ~= nil and interaction.__count == 0 then
					local ok_, error__ =
						xpcall(subscriber.onInteractionScheduledWorkCompleted, describeError, interaction)
					if not ok_ then
						-- If the subscriber throws, rethrow it in a separate task
						scheduleCallback(ImmediateSchedulerPriority, function()
							error(error__)
						end)
					end
				end
			end)
		end
	end)

	-- catch
	if not ok then
		-- If the subscriber throws, rethrow it in a separate task
		scheduleCallback(ImmediateSchedulerPriority, function()
			error(error_)
		end)
	end
end

-- `act` testing API
--
-- TODO: This is mostly a copy-paste from the legacy `act`, which does not have
-- access to the same internals that we do here. Some trade offs in the
-- implementation no longer make sense.
local isFlushingAct = false
local isInsideThisAct = false

local flushMockScheduler = Scheduler.unstable_flushAllWithoutAsserting
local isSchedulerMocked = typeof(flushMockScheduler) == "function"

-- Returns whether additional work was scheduled. Caller should keep flushing
-- until there's no work left.
local function flushActWork(): boolean
	if flushMockScheduler ~= nil then
		local prevIsFlushing = isFlushingAct
		isFlushingAct = true
		local ok, result = xpcall(flushMockScheduler, describeError)

		-- finally
		isFlushingAct = prevIsFlushing

		if not ok then
			error(result)
		else
			return result
		end
	else
		-- No mock scheduler available. However, the only type of pending work is
		-- passive effects, which we control. So we can flush that.
		local prevIsFlushing = isFlushingAct
		isFlushingAct = true
		-- performance? rewrite this loop to eliminate anon function?
		local ok, result = xpcall(function()
			local didFlushWork = false
			while exports.flushPassiveEffects() do
				didFlushWork = true
			end
			return didFlushWork
		end, describeError)

		-- finally
		isFlushingAct = prevIsFlushing

		if not ok then
			error(result)
		else
			return result
		end
	end
end

local function flushWorkAndMicroTasks(onDone: (any?) -> ())
	-- performance: split into two pcall to eliminate anonymous func allocation per call
	local ok, result = xpcall(flushActWork, describeError)
	if ok then
		ok, result = xpcall(enqueueTask, describeError, function()
			if flushActWork() then
				flushWorkAndMicroTasks(onDone)
			else
				onDone()
			end
		end)
	end

	if not ok then
		onDone(result)
	end
end

exports.act = function(callback: () -> Thenable<any>): Thenable<any>
	-- It's only viable to export `act` when we're using mocked scheduling logic.
	-- Since there are numerous testing scenarios in which we call `require` on
	-- the Roact library _before_ we bootstrap tests, we expose a global to toggle
	-- this explicilty
	if not (__DEV__ or _G.__ROACT_17_MOCK_SCHEDULER__) then
		if didWarnAboutUsingActInProd == false then
			didWarnAboutUsingActInProd = true
			-- eslint-disable-next-line react-internal/no-production-logging
			console.error("act(...) is not supported in production builds of React, and might not behave as expected.")
		end
	end

	local previousActingUpdatesScopeDepth = actingUpdatesScopeDepth
	actingUpdatesScopeDepth += 1

	local previousIsSomeRendererActing = IsSomeRendererActing.current
	local previousIsThisRendererActing = exports.IsThisRendererActing.current
	local previousIsInsideThisAct = isInsideThisAct
	IsSomeRendererActing.current = true
	exports.IsThisRendererActing.current = true
	isInsideThisAct = true

	local function onDone()
		actingUpdatesScopeDepth -= 1
		IsSomeRendererActing.current = previousIsSomeRendererActing
		exports.IsThisRendererActing.current = previousIsThisRendererActing
		isInsideThisAct = previousIsInsideThisAct
		if __DEV__ then
			if actingUpdatesScopeDepth > previousActingUpdatesScopeDepth then
				-- if it's _less than_ previousActingUpdatesScopeDepth, then we can assume the 'other' one has warned
				console.error(
					"You seem to have overlapping act() calls, this is not supported. "
						.. "Be sure to await previous act() calls before making a new one. "
				)
			end
		end
	end

	local ok, result = xpcall(exports.batchedUpdates, describeError, callback)
	if not ok then
		onDone()
		error(result)
	end

	if result ~= nil and typeof(result) == "table" and typeof(result.andThen) == "function" then
		-- setup a boolean that gets set to true only
		-- once this act() call is await-ed
		local called = false
		if __DEV__ then
			if typeof(Promise) ~= nil then
				--eslint-disable-next-line no-undef
				Promise.resolve():andThen(function() end):andThen(function()
					if called == false then
						-- FIXME (roblox): We should replace this with proper Lua promise
						-- logic
						console.error(
							"You called act(Promise.new(function() --[[ ... ]] end)) without :await() or :expect(). "
								.. "This could lead to unexpected testing behaviour, interleaving multiple act "
								.. "calls and mixing their scopes. You should - act(function() Promise.new(function() --[[ ... ]] end):await() end);"
						)
					end
				end)
			end
		end

		-- in the async case, the returned thenable runs the callback, flushes
		-- effects and microtasks in a loop until flushPassiveEffects() == false,
		-- and cleans up
		return {
			-- FIXME Luau: have to explicitly annotate the unused generic arg: CLI-49996
			andThen = function<U>(self, resolve, reject)
				called = true
				return result:andThen(function()
					if
						actingUpdatesScopeDepth > 1
						or (isSchedulerMocked == true and previousIsSomeRendererActing == true)
					then
						onDone()
						resolve()
						return
					end
					-- we're about to exit the act() scope,
					-- now's the time to flush tasks/effects
					flushWorkAndMicroTasks(function(err: any?)
						onDone()
						if err then
							reject(err)
						else
							resolve()
						end
					end)
				end, function(err)
					onDone()
					reject(err)
				end)
			end,
		}
	else
		if __DEV__ then
			if result ~= nil then
				-- deviation: use Lua syntax
				console.error(
					"The callback passed to act(...) function " .. "must return nil, or a Promise. You returned %s",
					tostring(result)
				)
			end
		end

		-- flush effects until none remain, and cleanup
		local flushOk, flushResult = xpcall(function()
			if
				actingUpdatesScopeDepth == 1
				and (isSchedulerMocked == false or previousIsSomeRendererActing == false)
			then
				-- we're about to exit the act() scope,
				-- now's the time to flush effects
				flushActWork()
			end
			onDone()
		end, describeError)

		if not flushOk then
			onDone()
			error(flushResult)
		end

		-- in the sync case, the returned thenable only warns *if* await-ed
		return {
			-- FIXME Luau: have to explicitly annotate the unused generic arg: CLI-49996
			andThen = function<U>(self, resolve, reject_)
				if __DEV__ then
					console.error("Do not await the result of calling act(...) with sync logic, it is not a Promise.")
				end
				resolve()
			end,
		}
	end
end

mod.detachFiberAfterEffects = function(fiber: Fiber)
	-- Null out fields to improve GC for references that may be lingering (e.g. DevTools).
	-- Note that we already cleared the return pointer in detachFiberMutation().
	fiber.child = nil
	fiber.deletions = nil
	fiber.dependencies = nil
	fiber.memoizedProps = nil
	fiber.memoizedState = nil
	fiber.pendingProps = nil
	fiber.sibling = nil
	fiber.stateNode = nil
	fiber.updateQueue = nil

	if __DEV__ then
		fiber._debugOwner = nil
	end
end

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="373">
              <Properties>
                <string name="Name">ReactHookEffectTags</string>
                <string name="Source"><![CDATA[-- upstream: https://github.com/facebook/react/blob/16654436039dd8f16a63928e71081c7745872e8f/packages/react-reconciler/src/ReactHookEffectTags.js
--!strict
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
 ]]

export type HookFlags = number

return {
	--[[  ]]
	NoFlags = 0b000,

	-- Represents whether effect should fire.
	--[[ ]]
	HasEffect = 0b001,

	-- Represents the phase in which the effect (not the clean-up) fires.
	--[[    ]]
	Layout = 0b010,
	--[[   ]]
	Passive = 0b100,
}
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="374">
              <Properties>
                <string name="Name">ReactInternalTypes</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/7baf9d4128d41903de125527b50285ea9862cf9a/packages/react-reconciler/src/ReactInternalTypes.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]

local Packages = script.Parent.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)
type Array<T> = LuauPolyfill.Array<T>
type Map<K, V> = LuauPolyfill.Map<K, V>
type Object = { [string]: any }
type SimpleSet<T> = { [T]: boolean }
type SimpleMap<K, V> = { [K]: V }
type Set<T> = LuauPolyfill.Set<T>

local ReactTypes = require(Packages.Shared)
-- deviation: ReactElement is defined at the top level of Shared along
-- with the rest of the ReactTypes
type Source = ReactTypes.Source
type RefObject = ReactTypes.RefObject
type ReactContext<T> = ReactTypes.ReactContext<T>
type MutableSourceVersion = ReactTypes.MutableSourceVersion
type MutableSource<Source> = ReactTypes.MutableSource<Source>
type MutableSourceSubscribeFn<Source, Snapshot> = ReactTypes.MutableSourceSubscribeFn<Source, Snapshot>
type MutableSourceGetSnapshotFn<Source, Snapshot> = ReactTypes.MutableSourceGetSnapshotFn<Source, Snapshot>

-- deviation START: These are 'mixed' by default, and specialized by the renderer, need complicated dynamic resolution to do this properly
-- local ReactFiberHostConfig = require(script.Parent.ReactFiberHostConfig)
-- type SuspenseInstance = ReactFiberHostConfig.SuspenseInstance
type SuspenseInstance = any
-- deviation END
local ReactWorkTags = require(script.Parent.ReactWorkTags)
type WorkTag = ReactWorkTags.WorkTag
local ReactTypeOfMode = require(script.Parent.ReactTypeOfMode)
type TypeOfMode = ReactTypeOfMode.TypeOfMode
local ReactFiberFlags = require(script.Parent.ReactFiberFlags)
type Flags = ReactFiberFlags.Flags
-- deviation: FiberLane types are defined and exported from here to avoid
-- cyclical requires
export type LanePriority = number
export type Lanes = number
export type Lane = number
export type LaneMap<T> = { [number]: T }

-- deviation: Update<>, SharedQueue<>, UpdateQueue<> transplanted from ReactUpdateQueue for use by createReactNoop
export type Update<State> = {
	-- TODO: Temporary field. Will remove this by storing a map of
	-- transition -> event time on the root.
	eventTime: number,
	lane: Lane,

	-- FIXME Luau: revert when luau supports singleton integers
	-- tag: 0 | 1 | 2 | 3,
	tag: number,
	payload: any,
	callback: (() -> ...any)?,

	next: Update<State>?,
}

export type SharedQueue<State> = {
	pending: Update<State>?,
}

export type UpdateQueue<State> = {
	baseState: State,
	firstBaseUpdate: Update<State>?,
	lastBaseUpdate: Update<State>?,
	shared: SharedQueue<State>,
	effects: Array<Update<State>>?,
}

export type HookType =
	"useState"
	| "useReducer"
	| "useContext"
	| "useRef"
	-- deviation: Bindings are a feature unique to Roact
	| "useBinding"
	| "useEffect"
	| "useLayoutEffect"
	| "useCallback"
	| "useMemo"
	| "useImperativeHandle"
	| "useDebugValue"
	| "useDeferredValue"
	| "useTransition"
	| "useMutableSource"
	| "useOpaqueIdentifier"
local ReactRootTags = require(script.Parent.ReactRootTags)
type RootTag = ReactRootTags.RootTag
-- deviation: we can't import types for dynamic imports like HostConfig files
-- type TimeoutHandle = ReactFiberHostConfig.TimeoutHandle;
-- type NoTimeout = ReactFiberHostConfig.NoTimeout;
type TimeoutHandle = any
type NoTimeout = any
-- deviation: type forwarded to top-level export
local Shared = require(Packages.Shared)
type Wakeable = Shared.Wakeable
-- deviation: Interaction type forwarded to top-level export
local Scheduler = require(Packages.Scheduler)
type Interaction = Scheduler.Interaction

-- deviation: Luau doesn't support type literals:  99 | 98 | 97 | 96 | 95 | 90
export type ReactPriorityLevel = number

export type ContextDependency<T> = {
	context: ReactContext<T>,
	observedBits: number,
	-- TODO: upstream only parameterizes this type with `mixed`, so avoid Luau recursive type constraint. upstream this change later.
	next: ContextDependency<T> | nil,
	-- deviation START: don't allow for extension unless we have to
	-- ...
	-- deviation END
}

export type Dependencies = {
	lanes: Lanes,
	firstContext: ContextDependency<any> | nil,
	-- deviation START: don't allow for extension unless we have to
	-- ...
	-- deviation END
}

-- deviation: Roact stable keys - slightly widen the type definition of a
-- stable key so that it's likely to work with existing Roact code. Includes
-- numbers for mixed/sparse tables
export type RoactStableKey = string | number

-- A Fiber is work on a Component that needs to be done or was done. There can
-- be more than one per component.
export type Fiber = {
	-- These first fields are conceptually members of an Instance. This used to
	-- be split into a separate type and intersected with the other Fiber fields,
	-- but until Flow fixes its intersection bugs, we've merged them into a
	-- single type.

	-- An Instance is shared between all versions of a component. We can easily
	-- break this out into a separate object to avoid copying so much to the
	-- alternate versions of the tree. We put this on a single object for now to
	-- minimize the number of objects created during the initial render.

	-- Tag identifying the type of fiber.
	tag: WorkTag,

	-- deviation: Use a slightly more permissive key type to allow for
	-- sparse arrays, which will still be distinct from actual arrays.
	-- Unique identifier of this child.
	key: RoactStableKey?,

	-- The value of element.type which is used to preserve the identity during
	-- reconciliation of this child.
	elementType: any,

	-- The resolved function/class/ associated with this fiber.
	type: any,

	-- The local state associated with this fiber.
	stateNode: any,

	-- Conceptual aliases
	-- parent : Instance -> return The parent happens to be the same as the
	-- return fiber since we've merged the fiber and instance.

	-- Remaining fields belong to Fiber

	-- The Fiber to return to after finishing processing this one.
	-- This is effectively the parent, but there can be multiple parents (two)
	-- so this is only the parent of the thing we're currently processing.
	-- It is conceptually the same as the return address of a stack frame.
	return_: Fiber | nil,

	-- Singly Linked List Tree Structure.
	child: Fiber?,
	sibling: Fiber?,
	index: number,

	-- The ref last used to attach this node.
	-- I'll avoid adding an owner field for prod and model that as functions.
	-- deviation: Lua doesn't allow fields on functions
	-- ref: (((any) -> ()) & {_stringRef: string?, [string]: any}) | RefObject,
	ref: nil | ((handle: any) -> ()) | { _stringRef: string?, [string]: any } | RefObject,

	-- Input is the data coming into process this fiber. Arguments. Props.
	pendingProps: any, -- This type will be more specific once we overload the tag.
	memoizedProps: any, -- The props used to create the output.

	-- A queue of state updates and callbacks.
	updateQueue: any,

	-- The state used to create the output
	memoizedState: any,

	-- Dependencies (contexts, events) for this fiber, if it has any
	dependencies: Dependencies?,

	-- Bitfield that describes properties about the fiber and its subtree. E.g.
	-- the ConcurrentMode flag indicates whether the subtree should be async-by-
	-- default. When a fiber is created, it inherits the mode of its
	-- parent. Additional flags can be set at creation time, but after that the
	-- value should remain unchanged throughout the fiber's lifetime, particularly
	-- before its child fibers are created.
	mode: TypeOfMode,

	-- Effect
	flags: Flags,
	subtreeFlags: Flags,
	deletions: Array<Fiber>?,

	-- Singly linked list fast path to the next fiber with side-effects.
	nextEffect: Fiber?,

	-- The first and last fiber with side-effect within this subtree. This allows
	-- us to reuse a slice of the linked list when we reuse the work done within
	-- this fiber.
	firstEffect: Fiber?,
	lastEffect: Fiber?,

	lanes: Lanes,
	childLanes: Lanes,

	-- This is a pooled version of a Fiber. Every fiber that gets updated will
	-- eventually have a pair. There are cases when we can clean up pairs to save
	-- memory if we need to.
	alternate: Fiber?,

	-- Time spent rendering this Fiber and its descendants for the current update.
	-- This tells us how well the tree makes use of sCU for memoization.
	-- It is reset to 0 each time we render and only updated when we don't bailout.
	-- This field is only set when the enableProfilerTimer flag is enabled.
	actualDuration: number?,

	-- If the Fiber is currently active in the "render" phase,
	-- This marks the time at which the work began.
	-- This field is only set when the enableProfilerTimer flag is enabled.
	actualStartTime: number?,

	-- Duration of the most recent render time for this Fiber.
	-- This value is not updated when we bailout for memoization purposes.
	-- This field is only set when the enableProfilerTimer flag is enabled.
	selfBaseDuration: number?,

	-- Sum of base times for all descendants of this Fiber.
	-- This value bubbles up during the "complete" phase.
	-- This field is only set when the enableProfilerTimer flag is enabled.
	treeBaseDuration: number?,

	-- Conceptual aliases
	-- workInProgress : Fiber ->  alternate The alternate used for reuse happens
	-- to be the same as work in progress.
	-- _G.__DEV__ only
	_debugID: number?,
	_debugSource: Source?,
	_debugOwner: Fiber?,
	_debugIsCurrentlyTiming: boolean?,
	_debugNeedsRemount: boolean?,

	-- Used to verify that the order of hooks does not change between renders.
	_debugHookTypes: Array<HookType>?,
}

export type SuspenseHydrationCallbacks = {
	onHydrated: ((SuspenseInstance) -> ())?,
	onDeleted: ((SuspenseInstance) -> ())?,
	-- deviation START: don't allow for extension unless we have to
	-- ...
	-- deviation END
}

-- deviation: Instead of combining all these props after the fact, we define
-- them all in one to allow Luau's syntax

-- Exported FiberRoot type includes all properties,
-- To avoid requiring potentially error-prone :any casts throughout the project.
-- Profiling properties are only safe to access in profiling builds (when enableSchedulerTracing is true).
-- The types are defined separately within this file to ensure they stay in sync.
-- (We don't have to use an inline :any cast when enableSchedulerTracing is disabled.)
export type FiberRoot = {
	-- ...BaseFiberRootProperties,
	-- The type of root (legacy, batched, concurrent, etc.)
	tag: RootTag,

	-- Any additional information from the host associated with this root.
	containerInfo: any,
	-- Used only by persistent updates.
	pendingChildren: any,
	-- The currently active root fiber. This is the mutable root of the tree.
	current: Fiber,

	-- deviation START: we use a lightweight unordered set for performance
	pingCache: SimpleMap<Wakeable, (SimpleSet<any> | SimpleMap<Wakeable, SimpleSet<any>>)> | nil,
	-- deviation END

	-- A finished work-in-progress HostRoot that's ready to be committed.
	finishedWork: Fiber?,
	-- Timeout handle returned by setTimeout. Used to cancel a pending timeout, if
	-- it's superseded by a new one.
	timeoutHandle: TimeoutHandle | NoTimeout,
	-- Top context object, used by renderSubtreeIntoContainer
	context: Object?,
	pendingContext: Object?,
	-- Determines if we should attempt to hydrate on the initial mount
	hydrate: boolean,

	-- Used by useMutableSource hook to avoid tearing during hydration.
	mutableSourceEagerHydrationData: Array<MutableSource<any> | MutableSourceVersion>?,

	-- Node returned by Scheduler.scheduleCallback. Represents the next rendering
	-- task that the root will work on.
	callbackNode: any,
	callbackPriority: LanePriority,
	eventTimes: LaneMap<number>,
	expirationTimes: LaneMap<number>,

	pendingLanes: Lanes,
	suspendedLanes: Lanes,
	pingedLanes: Lanes,
	expiredLanes: Lanes,
	mutableReadLanes: Lanes,

	finishedLanes: Lanes,

	entangledLanes: Lanes,
	entanglements: LaneMap<Lanes>,

	-- ...ProfilingOnlyFiberRootProperties,
	-- The following attributes are only used by interaction tracing builds.
	-- They enable interactions to be associated with their async work,
	-- And expose interaction metadata to the React DevTools Profiler plugin.
	-- Note that these attributes are only defined when the enableSchedulerTracing flag is enabled.
	interactionThreadID: number,
	memoizedInteractions: Set<Interaction>,
	pendingInteractionMap: Map<Lane | Lanes, Set<Interaction>>,

	-- ...SuspenseCallbackOnlyFiberRootProperties,
	-- The follow fields are only used by enableSuspenseCallback for hydration.
	hydrationCallbacks: SuspenseHydrationCallbacks?,

	-- deviation START: don't allow for extension unless we have to
	-- ...
	-- deviation END
}

type BasicStateAction<S> = ((S) -> S) | S
type Dispatch<A> = (A) -> ()

-- deviation: Dispatcher is defined in Shared to avoid circular deps
export type Dispatcher = Shared.Dispatcher

-- deviation: Return something so that the module system is happy
return {}
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="375">
              <Properties>
                <string name="Name">ReactMutableSource.new</string>
                <string name="Source"><![CDATA[-- upstream: https://github.com/facebook/react/blob/142d4f1c00c66f3d728177082dbc027fd6335115/packages/react-reconciler/src/ReactMutableSource.new.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
 ]]

local Packages = script.Parent.Parent
-- NOTE: use patched console from shared
local console = require(Packages.Shared).console

type Array<T> = { [number]: T }
local exports = {}

local ReactTypes = require(Packages.Shared)
type MutableSource<T> = ReactTypes.MutableSource<T>
type MutableSourceVersion = ReactTypes.MutableSourceVersion

local ReactInternalTypes = require(script.Parent.ReactInternalTypes)
type FiberRoot = ReactInternalTypes.FiberRoot

local isPrimaryRenderer = require(script.Parent.ReactFiberHostConfig).isPrimaryRenderer

-- Work in progress version_ numbers only apply to a single render,
-- and should be reset before starting a new render.
-- This tracks which mutable sources need to be reset after a render.
local workInProgressSources: Array<MutableSource<any>> = {}

local rendererSigil
if _G.__DEV__ then
	-- Used to detect multiple renderers using the same mutable source.
	rendererSigil = {}
end

exports.markSourceAsDirty = function(mutableSource: MutableSource<any>)
	table.insert(workInProgressSources, mutableSource)
end

exports.resetWorkInProgressVersions = function()
	for i, mutableSource in workInProgressSources do
		if isPrimaryRenderer then
			mutableSource._workInProgressVersionPrimary = nil
		else
			mutableSource._workInProgressVersionSecondary = nil
		end
	end
	table.clear(workInProgressSources)
end

exports.getWorkInProgressVersion = function(mutableSource: MutableSource<any>): nil | MutableSourceVersion
	if isPrimaryRenderer then
		return mutableSource._workInProgressVersionPrimary
	else
		return mutableSource._workInProgressVersionSecondary
	end
end

exports.setWorkInProgressVersion = function(mutableSource: MutableSource<any>, version_: MutableSourceVersion)
	if isPrimaryRenderer then
		mutableSource._workInProgressVersionPrimary = version_
	else
		mutableSource._workInProgressVersionSecondary = version_
	end
	table.insert(workInProgressSources, mutableSource)
end

exports.warnAboutMultipleRenderersDEV = function(mutableSource: MutableSource<any>)
	if _G.__DEV__ then
		if isPrimaryRenderer then
			if mutableSource._currentPrimaryRenderer == nil then
				mutableSource._currentPrimaryRenderer = rendererSigil
			elseif mutableSource._currentPrimaryRenderer ~= rendererSigil then
				console.error(
					"Detected multiple renderers concurrently rendering the "
						.. "same mutable source. This is currently unsupported."
				)
			end
		else
			if mutableSource._currentSecondaryRenderer == nil then
				mutableSource._currentSecondaryRenderer = rendererSigil
			elseif mutableSource._currentSecondaryRenderer ~= rendererSigil then
				console.error(
					"Detected multiple renderers concurrently rendering the "
						.. "same mutable source. This is currently unsupported."
				)
			end
		end
	end
end

-- Eager reads the version of a mutable source and stores it on the root.
-- This ensures that the version used for server rendering matches the one
-- that is eventually read during hydration.
-- If they don't match there's a potential tear and a full deopt render is required.
exports.registerMutableSourceForHydration = function(root: FiberRoot, mutableSource: MutableSource<any>)
	local getVersion = mutableSource._getVersion
	local version_ = getVersion(mutableSource._source)

	-- TODO Clear this data once all pending hydration work is finished.
	-- Retaining it forever may interfere with GC.
	if root.mutableSourceEagerHydrationData == nil then
		root.mutableSourceEagerHydrationData = { mutableSource, version_ }
	else
		-- FIXME: having trouble with type coercion in this case
		-- table.insert(root.mutableSourceEagerHydrationData, mutableSource)
		-- table.insert(root.mutableSourceEagerHydrationData, version_)
	end
end

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="376">
              <Properties>
                <string name="Name">ReactPortal</string>
                <string name="Source"><![CDATA[-- upstream: https://github.com/facebook/react/blob/142d4f1c00c66f3d728177082dbc027fd6335115/packages/react-reconciler/src/ReactPortal.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]

local Packages = script.Parent.Parent

local REACT_PORTAL_TYPE = require(Packages.Shared).ReactSymbols.REACT_PORTAL_TYPE

local ReactTypes = require(Packages.Shared)
type ReactNodeList = ReactTypes.ReactNodeList
type ReactPortal = ReactTypes.ReactPortal

local function createPortal(
	children: ReactNodeList,
	containerInfo: any,
	-- TODO: figure out the API for cross-renderer implementation.
	implementation: any,
	key: string?
): ReactPortal
	if key ~= nil then
		key = tostring(key)
	end
	return {
		-- This tag allow us to uniquely identify this as a React Portal
		["$$typeof"] = REACT_PORTAL_TYPE,
		key = key,
		children = children,
		containerInfo = containerInfo,
		implementation = implementation,
	}
end

return {
	createPortal = createPortal,
}
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="377">
              <Properties>
                <string name="Name">ReactProfilerTimer.new</string>
                <string name="Source"><![CDATA[-- upstream: https://github.com/facebook/react/blob/142d4f1c00c66f3d728177082dbc027fd6335115/packages/react-reconciler/src/ReactProfilerTimer.new.js
-- /**
--  * Copyright (c) Facebook, Inc. and its affiliates.
--  *
--  * This source code is licensed under the MIT license found in the
--  * LICENSE file in the root directory of this source tree.
--  *
--  * @flow
--  */

local Packages = script.Parent.Parent

local ReactInternalTypes = require(script.Parent.ReactInternalTypes)
type Fiber = ReactInternalTypes.Fiber

local ReactFeatureFlags = require(Packages.Shared).ReactFeatureFlags
local enableProfilerTimer = ReactFeatureFlags.enableProfilerTimer
local enableProfilerCommitHooks = ReactFeatureFlags.enableProfilerCommitHooks

local ReactWorkTags = require(script.Parent.ReactWorkTags)
local Profiler = ReactWorkTags.Profiler

-- Intentionally not named imports because Rollup would use dynamic dispatch for
-- CommonJS interop named imports.
local Scheduler = require(Packages.Scheduler)

local now = Scheduler.unstable_now

export type ProfilerTimer = {
	getCommitTime: () -> number,
	recordCommitTime: () -> (),
	startProfilerTimer: (Fiber) -> (),
	stopProfilerTimerIfRunning: (Fiber) -> (),
	stopProfilerTimerIfRunningAndRecordDelta: (Fiber) -> (),
	-- ...
}

local commitTime: number = 0
local layoutEffectStartTime: number = -1
local profilerStartTime: number = -1
local passiveEffectStartTime: number = -1

function getCommitTime(): number
	return commitTime
end

function recordCommitTime(): ()
	if not enableProfilerTimer then
		return
	end
	commitTime = now()
end

function startProfilerTimer(fiber: Fiber): ()
	if not enableProfilerTimer then
		return
	end

	profilerStartTime = now()

	-- deviation: JS can compare null/undefined to 0, but Lua can't
	if fiber.actualStartTime ~= nil and (fiber.actualStartTime :: number) < 0 then
		fiber.actualStartTime = now()
	end
end

function stopProfilerTimerIfRunning(fiber: Fiber): ()
	if not enableProfilerTimer then
		return
	end
	profilerStartTime = -1
end

function stopProfilerTimerIfRunningAndRecordDelta(fiber: Fiber, overrideBaseTime: boolean): ()
	if not enableProfilerTimer then
		return
	end

	if profilerStartTime >= 0 then
		local elapsedTime_ = now() - profilerStartTime
		fiber.actualDuration += elapsedTime_
		if overrideBaseTime then
			fiber.selfBaseDuration = elapsedTime_
		end
		profilerStartTime = -1
	end
end

function recordLayoutEffectDuration(fiber: Fiber): ()
	if not enableProfilerTimer or not enableProfilerCommitHooks then
		return
	end

	if layoutEffectStartTime >= 0 then
		local elapsedTime_ = now() - layoutEffectStartTime

		layoutEffectStartTime = -1

		-- Store duration on the next nearest Profiler ancestor.
		local parentFiber = fiber.return_
		while parentFiber ~= nil do
			if parentFiber.tag == Profiler then
				local parentStateNode = parentFiber.stateNode
				parentStateNode.effectDuration += elapsedTime_
				break
			end
			parentFiber = parentFiber.return_
		end
	end
end

function recordPassiveEffectDuration(fiber: Fiber): ()
	if not enableProfilerTimer or not enableProfilerCommitHooks then
		return
	end

	if passiveEffectStartTime >= 0 then
		local elapsedTime_ = now() - passiveEffectStartTime

		passiveEffectStartTime = -1

		-- Store duration on the next nearest Profiler ancestor.
		local parentFiber = fiber.return_
		while parentFiber ~= nil do
			if parentFiber.tag == Profiler then
				local parentStateNode = parentFiber.stateNode
				if parentStateNode ~= nil then
					-- Detached fibers have their state node cleared out.
					-- In this case, the return pointer is also cleared out,
					-- so we won't be able to report the time spent in this Profiler's subtree.
					parentStateNode.passiveEffectDuration += elapsedTime_
				end
				break
			end
			parentFiber = parentFiber.return_
		end
	end
end

function startLayoutEffectTimer(): ()
	if not enableProfilerTimer or not enableProfilerCommitHooks then
		return
	end
	layoutEffectStartTime = now()
end

function startPassiveEffectTimer(): ()
	if not enableProfilerTimer or not enableProfilerCommitHooks then
		return
	end
	passiveEffectStartTime = now()
end

function transferActualDuration(fiber: Fiber): ()
	-- Transfer time spent rendering these children so we don't lose it
	-- after we rerender. This is used as a helper in special cases
	-- where we should count the work of multiple passes.
	local child = fiber.child
	while child do
		fiber.actualDuration += child.actualDuration
		child = child.sibling
	end
end

return {
	getCommitTime = getCommitTime,
	recordCommitTime = recordCommitTime,
	recordLayoutEffectDuration = recordLayoutEffectDuration,
	recordPassiveEffectDuration = recordPassiveEffectDuration,
	startLayoutEffectTimer = startLayoutEffectTimer,
	startPassiveEffectTimer = startPassiveEffectTimer,
	startProfilerTimer = startProfilerTimer,
	stopProfilerTimerIfRunning = stopProfilerTimerIfRunning,
	stopProfilerTimerIfRunningAndRecordDelta = stopProfilerTimerIfRunningAndRecordDelta,
	transferActualDuration = transferActualDuration,
}
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="378">
              <Properties>
                <string name="Name">ReactRootTags</string>
                <string name="Source"><![CDATA[-- upstream: https://github.com/facebook/react/blob/c5d2fc7127654e43de59fff865b74765a103c4a5/packages/react-reconciler/src/ReactRootTags.js
--!strict
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
 ]]

export type RootTag = number

return {
	LegacyRoot = 0,
	BlockingRoot = 1,
	ConcurrentRoot = 2,
}
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="379">
              <Properties>
                <string name="Name">ReactStrictModeWarnings.new</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/702fad4b1b48ac8f626ed3f35e8f86f5ea728084/packages/react-reconciler/src/ReactStrictModeWarnings.new.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
 ]]

local Packages = script.Parent.Parent
-- NOTE: use patched console from shared
local console = require(Packages.Shared).console

local ReactInternalTypes = require(script.Parent.ReactInternalTypes)
type Fiber = ReactInternalTypes.Fiber
local ReactCurrentFiber = require(script.Parent.ReactCurrentFiber)
local resetCurrentDebugFiberInDEV = ReactCurrentFiber.resetCurrentFiber
local setCurrentDebugFiberInDEV = ReactCurrentFiber.setCurrentFiber
local getComponentName = require(Packages.Shared).getComponentName
local StrictMode = require(script.Parent.ReactTypeOfMode).StrictMode

type Set<T> = { [T]: boolean }
type Array<T> = { [number]: T }
type Map<K, V> = { [K]: V }
type FiberArray = Array<Fiber>
type FiberToFiberComponentsMap = Map<Fiber, FiberArray>

local ReactStrictModeWarnings = {
	recordUnsafeLifecycleWarnings = function(fiber: Fiber, instance: any) end,
	flushPendingUnsafeLifecycleWarnings = function() end,
	recordLegacyContextWarning = function(fiber: Fiber, instance: any) end,
	flushLegacyContextWarning = function() end,
	discardPendingWarnings = function() end,
}

if _G.__DEV__ then
	local findStrictRoot = function(fiber: Fiber): Fiber | nil
		local maybeStrictRoot = nil

		-- FIXME Luau: Luau needs to understand while not nil loops
		local node: Fiber? = fiber
		while node ~= nil do
			if bit32.band(node.mode, StrictMode) ~= 0 then
				maybeStrictRoot = node
			end
			node = node.return_
		end

		return maybeStrictRoot
	end

	local setToSortedString = function(set): string
		local array = {}
		for key, value in set do
			table.insert(array, key)
		end
		table.sort(array)
		return table.concat(array, ", ")
	end

	local pendingComponentWillMountWarnings: Array<Fiber> = {}
	local pendingUNSAFE_ComponentWillMountWarnings: Array<Fiber> = {}
	local pendingComponentWillReceivePropsWarnings: Array<Fiber> = {}
	local pendingUNSAFE_ComponentWillReceivePropsWarnings: Array<Fiber> = {}
	local pendingComponentWillUpdateWarnings: Array<Fiber> = {}
	local pendingUNSAFE_ComponentWillUpdateWarnings: Array<Fiber> = {}

	-- Tracks components we have already warned about.
	local didWarnAboutUnsafeLifecycles = {}

	ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber: Fiber, instance: any)
		-- Dedupe strategy: Warn once per component.
		if didWarnAboutUnsafeLifecycles[fiber.type] then
			return
		end

		if
			typeof(instance.componentWillMount) == "function"
			-- Don't warn about react-lifecycles-compat polyfilled components.
			-- deviation: Lua doesn't allow fields on function
			-- instance.componentWillMount.__suppressDeprecationWarning ~= true
		then
			table.insert(pendingComponentWillMountWarnings, fiber)
		end

		if bit32.band(fiber.mode, StrictMode) ~= 0 and typeof(instance.UNSAFE_componentWillMount) == "function" then
			table.insert(pendingUNSAFE_ComponentWillMountWarnings, fiber)
		end

		if
			typeof(instance.componentWillReceiveProps) == "function"
			-- deviation: Lua doesn't allow fields on function
			-- instance.componentWillReceiveProps.__suppressDeprecationWarning ~= true
		then
			table.insert(pendingComponentWillReceivePropsWarnings, fiber)
		end

		if
			bit32.band(fiber.mode, StrictMode) ~= 0
			and typeof(instance.UNSAFE_componentWillReceiveProps) == "function"
		then
			table.insert(pendingUNSAFE_ComponentWillReceivePropsWarnings, fiber)
		end

		if
			typeof(instance.componentWillUpdate) == "function"
			-- deviation: Lua doesn't allow fields on function
			-- instance.componentWillUpdate.__suppressDeprecationWarning ~= true
		then
			table.insert(pendingComponentWillUpdateWarnings, fiber)
		end

		if bit32.band(fiber.mode, StrictMode) ~= 0 and typeof(instance.UNSAFE_componentWillUpdate) == "function" then
			table.insert(pendingUNSAFE_ComponentWillUpdateWarnings, fiber)
		end
	end

	ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function()
		-- We do an initial pass to gather component names
		local componentWillMountUniqueNames = {}
		if #pendingComponentWillMountWarnings > 0 then
			for i, fiber in pendingComponentWillMountWarnings do
				componentWillMountUniqueNames[getComponentName(fiber.type) or "Component"] = true
				didWarnAboutUnsafeLifecycles[fiber.type] = true
			end
			table.clear(pendingComponentWillMountWarnings)
		end

		local UNSAFE_componentWillMountUniqueNames = {}
		if #pendingUNSAFE_ComponentWillMountWarnings > 0 then
			for i, fiber in pendingUNSAFE_ComponentWillMountWarnings do
				UNSAFE_componentWillMountUniqueNames[getComponentName(fiber.type) or "Component"] = true
				didWarnAboutUnsafeLifecycles[fiber.type] = true
			end
			table.clear(pendingUNSAFE_ComponentWillMountWarnings)
		end

		local componentWillReceivePropsUniqueNames = {}
		if #pendingComponentWillReceivePropsWarnings > 0 then
			for i, fiber in pendingComponentWillReceivePropsWarnings do
				componentWillReceivePropsUniqueNames[getComponentName(fiber.type) or "Component"] = true
				didWarnAboutUnsafeLifecycles[fiber.type] = true
			end

			table.clear(pendingComponentWillReceivePropsWarnings)
		end

		local UNSAFE_componentWillReceivePropsUniqueNames = {}
		if #pendingUNSAFE_ComponentWillReceivePropsWarnings > 0 then
			for i, fiber in pendingUNSAFE_ComponentWillReceivePropsWarnings do
				UNSAFE_componentWillReceivePropsUniqueNames[getComponentName(fiber.type) or "Component"] = true
				didWarnAboutUnsafeLifecycles[fiber.type] = true
			end

			table.clear(pendingUNSAFE_ComponentWillReceivePropsWarnings)
		end

		local componentWillUpdateUniqueNames = {}
		if #pendingComponentWillUpdateWarnings > 0 then
			for i, fiber in pendingComponentWillUpdateWarnings do
				componentWillUpdateUniqueNames[getComponentName(fiber.type) or "Component"] = true
				didWarnAboutUnsafeLifecycles[fiber.type] = true
			end

			table.clear(pendingComponentWillUpdateWarnings)
		end

		local UNSAFE_componentWillUpdateUniqueNames = {}
		if #pendingUNSAFE_ComponentWillUpdateWarnings > 0 then
			for i, fiber in pendingUNSAFE_ComponentWillUpdateWarnings do
				UNSAFE_componentWillUpdateUniqueNames[getComponentName(fiber.type) or "Component"] = true
				didWarnAboutUnsafeLifecycles[fiber.type] = true
			end

			table.clear(pendingUNSAFE_ComponentWillUpdateWarnings)
		end

		-- Finally, we flush all the warnings
		-- UNSAFE_ ones before the deprecated ones, since they'll be 'louder'
		-- deviation: use `next` to determine whether set is empty
		if next(UNSAFE_componentWillMountUniqueNames) ~= nil then
			local sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames)
			console.error(
				"Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. "
					.. "See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n"
					.. "* Move code with side effects to componentDidMount, and set initial state in the constructor.\n"
					.. "\nPlease update the following components: %s",
				sortedNames
			)
		end

		-- deviation: use `next` to determine whether set is empty
		if next(UNSAFE_componentWillReceivePropsUniqueNames) ~= nil then
			local sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames)
			console.error(
				"Using UNSAFE_componentWillReceiveProps in strict mode is not recommended "
					.. "and may indicate bugs in your code. "
					.. "See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n"
					.. "* Move data fetching code or side effects to componentDidUpdate.\n"
					.. "* If you're updating state whenever props change, "
					.. "refactor your code to use memoization techniques or move it to "
					.. "static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n"
					.. "\nPlease update the following components: %s",
				sortedNames
			)
		end

		-- deviation: use `next` to determine whether set is empty
		if next(UNSAFE_componentWillUpdateUniqueNames) ~= nil then
			local sortedNames = setToSortedString(UNSAFE_componentWillUpdateUniqueNames)
			console.error(
				"Using UNSAFE_componentWillUpdate in strict mode is not recommended "
					.. "and may indicate bugs in your code. "
					.. "See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n"
					.. "* Move data fetching code or side effects to componentDidUpdate.\n"
					.. "\nPlease update the following components: %s",
				sortedNames
			)
		end

		-- deviation: use `next` to determine whether set is empty
		if next(componentWillMountUniqueNames) ~= nil then
			local sortedNames = setToSortedString(componentWillMountUniqueNames)

			-- TODO: Make decisions about whether or not we'll support these
			-- methods in the first place
			-- deviation: Remove some non-applicable information
			console.warn(
				"componentWillMount has been renamed, and is not recommended for use. "
					.. "See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n"
					.. "* Move code with side effects to componentDidMount, and set initial state in the constructor.\n"
					.. "* Rename componentWillMount to UNSAFE_componentWillMount to suppress "
					.. "this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work.\n"
					.. "\nPlease update the following components: %s",
				sortedNames
			)
		end

		-- deviation: use `next` to determine whether set is empty
		if next(componentWillReceivePropsUniqueNames) ~= nil then
			local sortedNames = setToSortedString(componentWillReceivePropsUniqueNames)

			-- TODO: Make decisions about whether or not we'll support these
			-- methods in the first place
			-- deviation: Remove some non-applicable information
			console.warn(
				"componentWillReceiveProps has been renamed, and is not recommended for use. "
					.. "See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n"
					.. "* Move data fetching code or side effects to componentDidUpdate.\n"
					.. "* If you're updating state whenever props change, refactor your "
					.. "code to use memoization techniques or move it to "
					.. "static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n"
					.. "* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress "
					.. "this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work.\n"
					.. "\nPlease update the following components: %s",
				sortedNames
			)
		end

		-- deviation: use `next` to determine whether set is empty
		if next(componentWillUpdateUniqueNames) ~= nil then
			local sortedNames = setToSortedString(componentWillUpdateUniqueNames)

			-- TODO: Make decisions about whether or not we'll support these
			-- methods in the first place
			-- deviation: Remove some non-applicable information
			console.warn(
				"componentWillUpdate has been renamed, and is not recommended for use. "
					.. "See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n"
					.. "* Move data fetching code or side effects to componentDidUpdate.\n"
					.. "* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress "
					.. "this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work.\n"
					.. "\nPlease update the following components: %s",
				sortedNames
			)
		end
	end

	local pendingLegacyContextWarning: FiberToFiberComponentsMap = {}

	-- Tracks components we have already warned about.
	local didWarnAboutLegacyContext = {}

	ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber: Fiber, instance: any)
		local strictRoot = findStrictRoot(fiber)
		if strictRoot == nil then
			console.error(
				"Expected to find a StrictMode component in a strict mode tree. "
					.. "This error is likely caused by a bug in React. Please file an issue."
			)
			return
		end

		-- Dedup strategy: Warn once per component.
		if didWarnAboutLegacyContext[fiber.type] then
			return
		end

		-- FIXME Luau: Luau should narrow based on the nil guard
		local warningsForRoot = pendingLegacyContextWarning[strictRoot :: Fiber]

		-- deviation: Lua can't have fields on functions
		if
			typeof(fiber.type) ~= "function"
			and (
				fiber.type.contextTypes ~= nil
				or fiber.type.childContextTypes ~= nil
				or (instance ~= nil and typeof(instance.getChildContext) == "function")
			)
		then
			if warningsForRoot == nil then
				warningsForRoot = {}
				-- FIXME Luau: Luau should narrow based on the nil guard
				pendingLegacyContextWarning[strictRoot :: Fiber] = warningsForRoot
			end
			table.insert(warningsForRoot, fiber)
		end
	end

	ReactStrictModeWarnings.flushLegacyContextWarning = function()
		for strictRoot, fiberArray in pendingLegacyContextWarning do
			if #fiberArray == 0 then
				return
			end
			local firstFiber = fiberArray[1]

			local uniqueNames = {}
			for i, fiber in fiberArray do
				uniqueNames[getComponentName(fiber.type) or "Component"] = true
				didWarnAboutLegacyContext[fiber.type] = true
			end

			local sortedNames = setToSortedString(uniqueNames)

			local ok, error_ = pcall(function()
				setCurrentDebugFiberInDEV(firstFiber)
				console.error(
					"Legacy context API has been detected within a strict-mode tree."
						.. "\n\nThe old API will be supported in all 16.x releases, but applications "
						.. "using it should migrate to the new version."
						.. "\n\nPlease update the following components: %s"
						.. "\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context",
					sortedNames
				)
			end)

			-- finally
			resetCurrentDebugFiberInDEV()

			if not ok then
				error(error_)
			end
		end
	end

	ReactStrictModeWarnings.discardPendingWarnings = function()
		-- performance? use table.clear instead of assigning new array
		table.clear(pendingComponentWillMountWarnings)
		table.clear(pendingUNSAFE_ComponentWillMountWarnings)
		table.clear(pendingComponentWillReceivePropsWarnings)
		table.clear(pendingUNSAFE_ComponentWillReceivePropsWarnings)
		table.clear(pendingComponentWillUpdateWarnings)
		table.clear(pendingUNSAFE_ComponentWillUpdateWarnings)
		table.clear(pendingLegacyContextWarning)
	end
end

return ReactStrictModeWarnings
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="380">
              <Properties>
                <string name="Name">ReactTestSelectors</string>
                <string name="Source"><![CDATA[-- upstream: https://github.com/facebook/react/blob/3cde22a84e246fc5361f038bf0c23405b2572c22/packages/react-reconciler/src/ReactTestSelectors.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
 ]]
local Packages = script.Parent.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)
type Set<T> = { [T]: boolean }
type Array<T> = LuauPolyfill.Array<T>
type Function = (...any) -> ...any
type Object = LuauPolyfill.Object

-- local type {Fiber} = require(Packages.react-reconciler/src/ReactInternalTypes'
-- local type {Instance} = require(Packages../ReactFiberHostConfig'

-- local invariant = require(Packages.shared/invariant'
-- local {HostComponent, HostText} = require(Packages.react-reconciler/src/ReactWorkTags'
-- local getComponentName = require(Packages.shared/getComponentName'

local ReactFiberHostConfig = require(script.Parent.ReactFiberHostConfig)
local supportsTestSelectors = ReactFiberHostConfig.supportsTestSelectors
-- local {
--   findFiberRoot,
--   getBoundingRect,
--   getInstanceFromNode,
--   getTextContent,
--   isHiddenSubtree,
--   matchAccessibilityRole,
--   setFocusIfFocusable,
--   setupIntersectionObserver,
--   ,
-- } = require(Packages../ReactFiberHostConfig'

-- local COMPONENT_TYPE = 0b000
-- local HAS_PSEUDO_CLASS_TYPE = 0b001
-- local ROLE_TYPE = 0b010
-- local TEST_NAME_TYPE = 0b011
-- local TEXT_TYPE = 0b100

-- if typeof Symbol == 'function' and Symbol.for)
--   local symbolFor = Symbol.for
--   COMPONENT_TYPE = symbolFor('selector.component')
--   HAS_PSEUDO_CLASS_TYPE = symbolFor('selector.has_pseudo_class')
--   ROLE_TYPE = symbolFor('selector.role')
--   TEST_NAME_TYPE = symbolFor('selector.test_id')
--   TEXT_TYPE = symbolFor('selector.text')
-- end

-- type Type = Symbol | number

-- type ComponentSelector = {|
--   $$typeof: Type,
--   value: React$AbstractComponent<empty, mixed>,
-- |}

-- type HasPsuedoClassSelector = {|
--   $$typeof: Type,
--   value: Array<Selector>,
-- |}

-- type RoleSelector = {|
--   $$typeof: Type,
--   value: string,
-- |}

-- type TextSelector = {|
--   $$typeof: Type,
--   value: string,
-- |}

-- type TestNameSelector = {|
--   $$typeof: Type,
--   value: string,
-- |}

-- type Selector =
--   | ComponentSelector
--   | HasPsuedoClassSelector
--   | RoleSelector
--   | TextSelector
--   | TestNameSelector

local exports = {}

-- exports.createComponentSelector(
--   component: React$AbstractComponent<empty, mixed>,
-- ): ComponentSelector {
--   return {
--     $$typeof: COMPONENT_TYPE,
--     value: component,
--   }
-- end

-- exports.createHasPsuedoClassSelector(
--   selectors: Array<Selector>,
-- ): HasPsuedoClassSelector {
--   return {
--     $$typeof: HAS_PSEUDO_CLASS_TYPE,
--     value: selectors,
--   }
-- end

-- exports.createRoleSelector(role: string): RoleSelector {
--   return {
--     $$typeof: ROLE_TYPE,
--     value: role,
--   }
-- end

-- exports.createTextSelector(text: string): TextSelector {
--   return {
--     $$typeof: TEXT_TYPE,
--     value: text,
--   }
-- end

-- exports.createTestNameSelector(id: string): TestNameSelector {
--   return {
--     $$typeof: TEST_NAME_TYPE,
--     value: id,
--   }
-- end

-- function findFiberRootForHostRoot(hostRoot: Instance): Fiber {
--   local maybeFiber = getInstanceFromNode((hostRoot: any))
--   if maybeFiber ~= nil)
--     invariant(
--       typeof maybeFiber.memoizedProps['data-testname'] == 'string',
--       'Invalid host root specified. Should be either a React container or a node with a testname attribute.',
--     )
--     return ((maybeFiber: any): Fiber)
--   } else {
--     local fiberRoot = findFiberRoot(hostRoot)
--     invariant(
--       fiberRoot ~= nil,
--       'Could not find React container within specified host subtree.',
--     )
--     -- The Flow type for FiberRoot is a little funky.
--     -- createFiberRoot() cheats this by treating the root as :any and adding stateNode lazily.
--     return ((fiberRoot: any).stateNode.current: Fiber)
--   }
-- end

-- function matchSelector(fiber: Fiber, selector: Selector): boolean {
--   switch (selector.$$typeof)
--     case COMPONENT_TYPE:
--       if fiber.type == selector.value)
--         return true
--       }
--       break
--     case HAS_PSEUDO_CLASS_TYPE:
--       return hasMatchingPaths(
--         fiber,
--         ((selector: any): HasPsuedoClassSelector).value,
--       )
--     case ROLE_TYPE:
--       if fiber.tag == HostComponent)
--         local node = fiber.stateNode
--         if
--           matchAccessibilityRole(node, ((selector: any): RoleSelector).value)
--         )
--           return true
--         }
--       }
--       break
--     case TEXT_TYPE:
--       if fiber.tag == HostComponent or fiber.tag == HostText)
--         local textContent = getTextContent(fiber)
--         if
--           textContent ~= nil and
--           textContent.indexOf(((selector: any): TextSelector).value) >= 0
--         )
--           return true
--         }
--       }
--       break
--     case TEST_NAME_TYPE:
--       if fiber.tag == HostComponent)
--         local dataTestID = fiber.memoizedProps['data-testname']
--         if
--           typeof dataTestID == 'string' and
--           dataTestID.toLowerCase() ==
--             ((selector: any): TestNameSelector).value.toLowerCase()
--         )
--           return true
--         }
--       }
--       break
--     default:
--       invariant(null, 'Invalid selector type %s specified.', selector)
--       break
--   }

--   return false
-- end

-- function selectorToString(selector: Selector): string | nil {
--   switch (selector.$$typeof)
--     case COMPONENT_TYPE:
--       local displayName = getComponentName(selector.value) or 'Unknown'
--       return `<${displayName}>`
--     case HAS_PSEUDO_CLASS_TYPE:
--       return `:has(${selectorToString(selector) or ''})`
--     case ROLE_TYPE:
--       return `[role="${((selector: any): RoleSelector).value}"]`
--     case TEXT_TYPE:
--       return `"${((selector: any): TextSelector).value}"`
--     case TEST_NAME_TYPE:
--       return `[data-testname="${((selector: any): TestNameSelector).value}"]`
--     default:
--       invariant(null, 'Invalid selector type %s specified.', selector)
--       break
--   }

--   return nil
-- end

-- function findPaths(root: Fiber, selectors: Array<Selector>): Array<Fiber> {
--   local matchingFibers: Array<Fiber> = []

--   local stack = [root, 0]
--   local index = 0
--   while (index < stack.length)
--     local fiber = ((stack[index++]: any): Fiber)
--     local selectorIndex = ((stack[index++]: any): number)
--     local selector = selectors[selectorIndex]

--     if fiber.tag == HostComponent and isHiddenSubtree(fiber))
--       continue
--     } else {
--       while (selector ~= nil and matchSelector(fiber, selector))
--         selectorIndex++
--         selector = selectors[selectorIndex]
--       }
--     }

--     if selectorIndex == selectors.length)
--       matchingFibers.push(fiber)
--     } else {
--       local child = fiber.child
--       while (child ~= nil)
--         stack.push(child, selectorIndex)
--         child = child.sibling
--       }
--     }
--   }

--   return matchingFibers
-- end

-- -- Same as findPaths but with eager bailout on first match
-- function hasMatchingPaths(root: Fiber, selectors: Array<Selector>): boolean {
--   local stack = [root, 0]
--   local index = 0
--   while (index < stack.length)
--     local fiber = ((stack[index++]: any): Fiber)
--     local selectorIndex = ((stack[index++]: any): number)
--     local selector = selectors[selectorIndex]

--     if fiber.tag == HostComponent and isHiddenSubtree(fiber))
--       continue
--     } else {
--       while (selector ~= nil and matchSelector(fiber, selector))
--         selectorIndex++
--         selector = selectors[selectorIndex]
--       }
--     }

--     if selectorIndex == selectors.length)
--       return true
--     } else {
--       local child = fiber.child
--       while (child ~= nil)
--         stack.push(child, selectorIndex)
--         child = child.sibling
--       }
--     }
--   }

--   return false
-- end

-- exports.findAllNodes(
--   hostRoot: Instance,
--   selectors: Array<Selector>,
-- ): Array<Instance> {
--   if !supportsTestSelectors)
--     invariant(false, 'Test selector API is not supported by this renderer.')
--   }

--   local root = findFiberRootForHostRoot(hostRoot)
--   local matchingFibers = findPaths(root, selectors)

--   local instanceRoots: Array<Instance> = []

--   local stack = Array.from(matchingFibers)
--   local index = 0
--   while (index < stack.length)
--     local node = ((stack[index++]: any): Fiber)
--     if node.tag == HostComponent)
--       if isHiddenSubtree(node))
--         continue
--       }
--       instanceRoots.push(node.stateNode)
--     } else {
--       local child = node.child
--       while (child ~= nil)
--         stack.push(child)
--         child = child.sibling
--       }
--     }
--   }

--   return instanceRoots
-- end

-- exports.getFindAllNodesFailureDescription(
--   hostRoot: Instance,
--   selectors: Array<Selector>,
-- ): string | nil {
--   if !supportsTestSelectors)
--     invariant(false, 'Test selector API is not supported by this renderer.')
--   }

--   local root = findFiberRootForHostRoot(hostRoot)

--   local maxSelectorIndex: number = 0
--   local matchedNames = []

--   -- The logic of this loop should be kept in sync with findPaths()
--   local stack = [root, 0]
--   local index = 0
--   while (index < stack.length)
--     local fiber = ((stack[index++]: any): Fiber)
--     local selectorIndex = ((stack[index++]: any): number)
--     local selector = selectors[selectorIndex]

--     if fiber.tag == HostComponent and isHiddenSubtree(fiber))
--       continue
--     } else if matchSelector(fiber, selector))
--       matchedNames.push(selectorToString(selector))
--       selectorIndex++

--       if selectorIndex > maxSelectorIndex)
--         maxSelectorIndex = selectorIndex
--       }
--     }

--     if selectorIndex < selectors.length)
--       local child = fiber.child
--       while (child ~= nil)
--         stack.push(child, selectorIndex)
--         child = child.sibling
--       }
--     }
--   }

--   if maxSelectorIndex < selectors.length)
--     local unmatchedNames = []
--     for (local i = maxSelectorIndex; i < selectors.length; i++)
--       unmatchedNames.push(selectorToString(selectors[i]))
--     }

--     return (
--       'findAllNodes was able to match part of the selector:\n' +
--       `  ${matchedNames.join(' > ')}\n\n` +
--       'No matching component was found for:\n' +
--       `  ${unmatchedNames.join(' > ')}`
--     )
--   }

--   return nil
-- end

export type BoundingRect = {
	x: number,
	y: number,
	width: number,
	height: number,
}

-- exports.findBoundingRects(
--   hostRoot: Instance,
--   selectors: Array<Selector>,
-- ): Array<BoundingRect> {
--   if !supportsTestSelectors)
--     invariant(false, 'Test selector API is not supported by this renderer.')
--   }

--   local instanceRoots = findAllNodes(hostRoot, selectors)

--   local boundingRects: Array<BoundingRect> = []
--   for (local i = 0; i < instanceRoots.length; i++)
--     boundingRects.push(getBoundingRect(instanceRoots[i]))
--   }

--   for (local i = boundingRects.length - 1; i > 0; i--)
--     local targetRect = boundingRects[i]
--     local targetLeft = targetRect.x
--     local targetRight = targetLeft + targetRect.width
--     local targetTop = targetRect.y
--     local targetBottom = targetTop + targetRect.height

--     for (local j = i - 1; j >= 0; j--)
--       if i ~= j)
--         local otherRect = boundingRects[j]
--         local otherLeft = otherRect.x
--         local otherRight = otherLeft + otherRect.width
--         local otherTop = otherRect.y
--         local otherBottom = otherTop + otherRect.height

--         -- Merging all rects to the minimums set would be complicated,
--         -- but we can handle the most common cases:
--         -- 1. completely overlapping rects
--         -- 2. adjacent rects that are the same width or height (e.g. items in a list)
--         --
--         -- Even given the above constraints,
--         -- we still won't end up with the fewest possible rects without doing multiple passes,
--         -- but it's good enough for this purpose.

--         if
--           targetLeft >= otherLeft and
--           targetTop >= otherTop and
--           targetRight <= otherRight and
--           targetBottom <= otherBottom
--         )
--           -- Complete overlapping rects; remove the inner one.
--           boundingRects.splice(i, 1)
--           break
--         } else if
--           targetLeft == otherLeft and
--           targetRect.width == otherRect.width and
--           !(otherBottom < targetTop) and
--           !(otherTop > targetBottom)
--         )
--           -- Adjacent vertical rects; merge them.
--           if otherTop > targetTop)
--             otherRect.height += otherTop - targetTop
--             otherRect.y = targetTop
--           }
--           if otherBottom < targetBottom)
--             otherRect.height = targetBottom - otherTop
--           }

--           boundingRects.splice(i, 1)
--           break
--         } else if
--           targetTop == otherTop and
--           targetRect.height == otherRect.height and
--           !(otherRight < targetLeft) and
--           !(otherLeft > targetRight)
--         )
--           -- Adjacent horizontal rects; merge them.
--           if otherLeft > targetLeft)
--             otherRect.width += otherLeft - targetLeft
--             otherRect.x = targetLeft
--           }
--           if otherRight < targetRight)
--             otherRect.width = targetRight - otherLeft
--           }

--           boundingRects.splice(i, 1)
--           break
--         }
--       }
--     }
--   }

--   return boundingRects
-- end

-- exports.focusWithin(
--   hostRoot: Instance,
--   selectors: Array<Selector>,
-- ): boolean {
--   if !supportsTestSelectors)
--     invariant(false, 'Test selector API is not supported by this renderer.')
--   }

--   local root = findFiberRootForHostRoot(hostRoot)
--   local matchingFibers = findPaths(root, selectors)

--   local stack = Array.from(matchingFibers)
--   local index = 0
--   while (index < stack.length)
--     local fiber = ((stack[index++]: any): Fiber)
--     if isHiddenSubtree(fiber))
--       continue
--     }
--     if fiber.tag == HostComponent)
--       local node = fiber.stateNode
--       if setFocusIfFocusable(node))
--         return true
--       }
--     }
--     local child = fiber.child
--     while (child ~= nil)
--       stack.push(child)
--       child = child.sibling
--     }
--   }

--   return false
-- end

local commitHooks: Array<Function> = {}

exports.onCommitRoot = function(): ()
	if supportsTestSelectors then
		for i, commitHook in commitHooks do
			commitHook()
		end
	end
end

export type IntersectionObserverOptions = Object

export type ObserveVisibleRectsCallback = (intersections: Array<{ ratio: number, rect: BoundingRect }>) -> ()

-- exports.observeVisibleRects(
--   hostRoot: Instance,
--   selectors: Array<Selector>,
--   callback: (intersections: Array<{ratio: number, rect: BoundingRect}>) => void,
--   options?: IntersectionObserverOptions,
-- ): {|disconnect: () => void|} {
--   if !supportsTestSelectors)
--     invariant(false, 'Test selector API is not supported by this renderer.')
--   }

--   local instanceRoots = findAllNodes(hostRoot, selectors)

--   local {disconnect, observe, unobserve} = setupIntersectionObserver(
--     instanceRoots,
--     callback,
--     options,
--   )

--   -- When React mutates the host environment, we may need to change what we're listening to.
--   local commitHook = () => {
--     local nextInstanceRoots = findAllNodes(hostRoot, selectors)

--     instanceRoots.forEach(target => {
--       if nextInstanceRoots.indexOf(target) < 0)
--         unobserve(target)
--       }
--     })

--     nextInstanceRoots.forEach(target => {
--       if instanceRoots.indexOf(target) < 0)
--         observe(target)
--       }
--     })
--   }

--   commitHooks.push(commitHook)

--   return {
--     disconnect: () => {
--       -- Stop listening for React mutations:
--       local index = commitHooks.indexOf(commitHook)
--       if index >= 0)
--         commitHooks.splice(index, 1)
--       }

--       -- Disconnect the host observer:
--       disconnect()
--     },
--   }
-- end

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="381">
              <Properties>
                <string name="Name">ReactTypeOfMode</string>
                <string name="Source"><![CDATA[-- upstream: https://github.com/facebook/react/blob/22dc2e42bdc00d87fc19c5e75fc7c0b3fdcdc572/packages/react-reconciler/src/ReactTypeOfMode.js
--!strict
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
 ]]

export type TypeOfMode = number

return {
	NoMode = 0b00000,
	StrictMode = 0b00001,
	-- TODO: Remove BlockingMode and ConcurrentMode by reading from the root
	-- tag instead
	BlockingMode = 0b00010,
	ConcurrentMode = 0b00100,
	ProfileMode = 0b01000,
	DebugTracingMode = 0b10000,
}
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="382">
              <Properties>
                <string name="Name">ReactUpdateQueue.new</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/16654436039dd8f16a63928e71081c7745872e8f/packages/react-reconciler/src/ReactUpdateQueue.new.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]

-- UpdateQueue is a linked list of prioritized updates.
--
-- Like fibers, update queues come in pairs: a current queue, which represents
-- the visible state of the screen, and a work-in-progress queue, which can be
-- mutated and processed asynchronously before it is committed — a form of
-- double buffering. If a work-in-progress render is discarded before finishing,
-- we create a new work-in-progress by cloning the current queue.
--
-- Both queues share a persistent, singly-linked list structure. To schedule an
-- update, we append it to the end of both queues. Each queue maintains a
-- pointer to first update in the persistent list that hasn't been processed.
-- The work-in-progress pointer always has a position equal to or greater than
-- the current queue, since we always work on that one. The current queue's
-- pointer is only updated during the commit phase, when we swap in the
-- work-in-progress.
--
-- For example:
--
--   Current pointer:           A - B - C - D - E - F
--   Work-in-progress pointer:              D - E - F
--                                          ^
--                                          The work-in-progress queue has
--                                          processed more updates than current.
--
-- The reason we append to both queues is because otherwise we might drop
-- updates without ever processing them. For example, if we only add updates to
-- the work-in-progress queue, some updates could be lost whenever a work-in
-- -progress render restarts by cloning from current. Similarly, if we only add
-- updates to the current queue, the updates will be lost whenever an already
-- in-progress queue commits and swaps with the current queue. However, by
-- adding to both queues, we guarantee that the update will be part of the next
-- work-in-progress. (And because the work-in-progress queue becomes the
-- current queue once it commits, there's no danger of applying the same
-- update twice.)
--
-- Prioritization
-- --------------
--
-- Updates are not sorted by priority, but by insertion; new updates are always
-- appended to the end of the list.
--
-- The priority is still important, though. When processing the update queue
-- during the render phase, only the updates with sufficient priority are
-- included in the result. If we skip an update because it has insufficient
-- priority, it remains in the queue to be processed later, during a lower
-- priority render. Crucially, all updates subsequent to a skipped update also
-- remain in the queue *regardless of their priority*. That means high priority
-- updates are sometimes processed twice, at two separate priorities. We also
-- keep track of a base state, that represents the state before the first
-- update in the queue is applied.
--
-- For example:
--
--   Given a base state of '', and the following queue of updates
--
--     A1 - B2 - C1 - D2
--
--   where the number indicates the priority, and the update is applied to the
--   previous state by appending a letter, React will process these updates as
--   two separate renders, one per distinct priority level:
--
--   First render, at priority 1:
--     Base state: ''
--     Updates: [A1, C1]
--     Result state: 'AC'
--
--   Second render, at priority 2:
--     Base state: 'A'            <-  The base state does not include C1,
--                                    because B2 was skipped.
--     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2
--     Result state: 'ABCD'
--
-- Because we process updates in insertion order, and rebase high priority
-- updates when preceding updates are skipped, the final result is deterministic
-- regardless of priority. Intermediate state may vary according to system
-- resources, but the final state is always the same.

local __DEV__ = _G.__DEV__
local __YOLO__ = _G.__YOLO__

local Packages = script.Parent.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)
local Object = LuauPolyfill.Object

-- NOTE: use patched console from shared
local console = require(Packages.Shared).console

local ReactInternalTypes = require(script.Parent.ReactInternalTypes)
type Fiber = ReactInternalTypes.Fiber
type Lane = ReactInternalTypes.Lane
type Lanes = ReactInternalTypes.Lanes

local ReactFiberLane = require(script.Parent.ReactFiberLane)
local NoLane = ReactFiberLane.NoLane
local NoLanes = ReactFiberLane.NoLanes
local isSubsetOfLanes = ReactFiberLane.isSubsetOfLanes
local mergeLanes = ReactFiberLane.mergeLanes

-- deviation: lazy instantiate to avoid circular require
local ReactFiberNewContext --= require(script.Parent["ReactFiberNewContext.new"])
-- local enterDisallowedContextReadInDEV = ReactFiberNewContext.enterDisallowedContextReadInDEV
-- local exitDisallowedContextReadInDEV = ReactFiberNewContext.exitDisallowedContextReadInDEV
local function enterDisallowedContextReadInDEV()
	if not ReactFiberNewContext then
		ReactFiberNewContext = require(script.Parent["ReactFiberNewContext.new"]) :: any
	end
	ReactFiberNewContext.enterDisallowedContextReadInDEV()
end
local function exitDisallowedContextReadInDEV()
	if not ReactFiberNewContext then
		ReactFiberNewContext = require(script.Parent["ReactFiberNewContext.new"]) :: any
	end
	ReactFiberNewContext.exitDisallowedContextReadInDEV()
end
local ReactFiberFlags = require(script.Parent.ReactFiberFlags)
local Callback = ReactFiberFlags.Callback
local ShouldCapture = ReactFiberFlags.ShouldCapture
local DidCapture = ReactFiberFlags.DidCapture

local ReactFeatureFlags = require(Packages.Shared).ReactFeatureFlags
local debugRenderPhaseSideEffectsForStrictMode = ReactFeatureFlags.debugRenderPhaseSideEffectsForStrictMode

local ReactTypeOfMode = require(script.Parent.ReactTypeOfMode)
local StrictMode = ReactTypeOfMode.StrictMode
-- local ReactFiberWorkLoop = require(script.Parent["ReactFiberWorkLoop.new"])
local markSkippedUpdateLanes = require(script.Parent.ReactFiberWorkInProgress).markSkippedUpdateLanes

-- deviation START: use if-then-error, which avoid string format and function call overhead, as in React 18
-- local invariant = require(Packages.Shared).invariant
-- deviation END
local describeError = require(Packages.Shared).describeError

local ConsolePatchingDev = require(Packages.Shared).ConsolePatchingDev
local disableLogs = ConsolePatchingDev.disableLogs
local reenableLogs = ConsolePatchingDev.reenableLogs

-- deviation: Common types
type Array<T> = { [number]: T }

-- deviation: transplants UpdateQueue<> and SharedState<> types to ReactInternalTypes for export to createReactNoop
type Update<T> = ReactInternalTypes.Update<T>
type UpdateQueue<T> = ReactInternalTypes.UpdateQueue<T>
export type SharedQueue<T> = ReactInternalTypes.SharedQueue<T>

local exports = {}

local UpdateState = 0
exports.UpdateState = UpdateState
local ReplaceState = 1
exports.ReplaceState = ReplaceState
local ForceUpdate = 2
exports.ForceUpdate = ForceUpdate
local CaptureUpdate = 3
exports.CaptureUpdate = CaptureUpdate

-- Global state that is reset at the beginning of calling `processUpdateQueue`.
-- It should only be read right after calling `processUpdateQueue`, via
-- `checkHasForceUpdateAfterProcessing`.
local hasForceUpdate = false

local didWarnUpdateInsideUpdate
local currentlyProcessingQueue: SharedQueue<any>?
-- export local resetCurrentlyProcessingQueue
if __DEV__ then
	didWarnUpdateInsideUpdate = false
	currentlyProcessingQueue = nil
	exports.resetCurrentlyProcessingQueue = function()
		currentlyProcessingQueue = nil
	end
end

-- performance: use a recycle pool for update tables
local poolInitSize = 210 -- TODO: Tune to LuaApps
-- local poolAdditionalSize = 0
local updatePool = table.create(poolInitSize)
local updatePoolIndex = poolInitSize
for i = 1, poolInitSize do
	updatePool[i] = {
		eventTime = -1,
		lane = -1,
		tag = -1,
		payload = nil,
		callback = nil,
		next = nil,
	}
end

local function initializeUpdateQueue<State>(fiber: Fiber): ()
	local queue: UpdateQueue<State> = {
		baseState = fiber.memoizedState,
		firstBaseUpdate = nil,
		lastBaseUpdate = nil,
		shared = {
			pending = nil,
		},
		effects = nil,
	}
	fiber.updateQueue = queue
end
exports.initializeUpdateQueue = initializeUpdateQueue

local function cloneUpdateQueue<State>(current: Fiber, workInProgress: Fiber): ()
	-- Clone the update queue from current. Unless it's already a clone.
	local queue: UpdateQueue<State> = workInProgress.updateQueue :: any
	local currentQueue: UpdateQueue<State> = current.updateQueue :: any
	if queue == currentQueue then
		-- deviation START: use our queue method for hot path optimizations
		local clone: UpdateQueue<State> = table.clone(currentQueue)
		-- deviation END
		workInProgress.updateQueue = clone
	end
end
exports.cloneUpdateQueue = cloneUpdateQueue

-- deviation START: add extra parameters here so updates can be create in single table ctor
local function createUpdate(eventTime: number, lane: Lane, payload: any?, callback: (() -> ...any)?): Update<any>
	-- performance: Use pooled update object when available
	if updatePoolIndex > 0 then
		local update = updatePool[updatePoolIndex]
		updatePool[updatePoolIndex] = nil
		updatePoolIndex -= 1

		update.eventTime = eventTime
		update.lane = lane
		update.tag = UpdateState
		update.payload = payload
		update.callback = callback :: any

		return update :: Update<any>
	end
	-- deviation END

	-- performance FIXME: This warning is very noisy in practice and not
	-- actionable by Roact developers in any way. We should re-establish the
	-- warning once we've done some tuning and thought more about what messaging
	-- we want to convey to Roact users

	-- if __DEV__ then
	-- 	poolAdditionalSize += 1
	-- 	console.warn(
	-- 		"ReactUpdateQueue createUpdate's object pool exhausted, allocating fresh table."
	-- 			.. "\nConsider setting poolInitSize to " .. poolInitSize + poolAdditionalSize
	-- 			.. " to avoid this occurring in the future."
	-- 	)
	-- end

	local update = {
		eventTime = eventTime,
		lane = lane,

		tag = UpdateState,
		payload = payload,
		callback = callback :: any,

		next = nil,
	}
	return update :: Update<any>
end
exports.createUpdate = createUpdate

local function enqueueUpdate<State>(fiber: Fiber, update: Update<State>)
	local updateQueue = fiber.updateQueue
	if updateQueue == nil then
		-- Only occurs if the fiber has been unmounted.
		return
	end

	local sharedQueue: SharedQueue<State> = (updateQueue :: any).shared
	local pending = sharedQueue.pending
	if pending == nil then
		-- This is the first update. Create a circular list.
		update.next = update
	else
		update.next = pending.next
		pending.next = update
	end
	sharedQueue.pending = update

	if __DEV__ then
		if currentlyProcessingQueue == sharedQueue and not didWarnUpdateInsideUpdate then
			console.error(
				"An update (setState, replaceState, or forceUpdate) was scheduled "
					.. "from inside an update function. Update functions should be pure, "
					.. "with zero side-effects. Consider using componentDidUpdate or a "
					.. "callback."
			)
			didWarnUpdateInsideUpdate = true
		end
	end
end
exports.enqueueUpdate = enqueueUpdate

local function enqueueCapturedUpdate<State>(workInProgress: Fiber, capturedUpdate: Update<State>)
	-- Captured updates are updates that are thrown by a child during the render
	-- phase. They should be discarded if the render is aborted. Therefore,
	-- we should only put them on the work-in-progress queue, not the current one.
	local queue: UpdateQueue<State> = workInProgress.updateQueue :: any

	-- Check if the work-in-progress queue is a clone.
	local current = workInProgress.alternate
	if current ~= nil then
		local currentQueue: UpdateQueue<State> = current.updateQueue :: any
		if queue == currentQueue then
			-- The work-in-progress queue is the same as current. This happens when
			-- we bail out on a parent fiber that then captures an error thrown by
			-- a child. Since we want to append the update only to the work-in
			-- -progress queue, we need to clone the updates. We usually clone during
			-- processUpdateQueue, but that didn't happen in this case because we
			-- skipped over the parent when we bailed out.
			local newFirst = nil
			local newLast = nil
			local firstBaseUpdate = queue.firstBaseUpdate
			if firstBaseUpdate ~= nil then
				-- Loop through the updates and clone them.
				local update = firstBaseUpdate
				repeat
					local clone: Update<State> = {
						eventTime = update.eventTime,
						lane = update.lane,

						tag = update.tag,
						payload = update.payload,
						callback = update.callback,

						next = nil,
					}
					if newLast == nil then
						newLast = clone
						newFirst = clone
					else
						newLast.next = clone
						newLast = clone
					end
					-- FIXME Luau: Luau needs to support repeat until nil pattern
					update = update.next :: Update<State>
				until update == nil

				-- Append the captured update the end of the cloned list.
				if newLast == nil then
					newLast = capturedUpdate
					newFirst = capturedUpdate
				else
					newLast.next = capturedUpdate
					newLast = capturedUpdate
				end
			else
				-- There are no base updates.
				newLast = capturedUpdate
				newFirst = capturedUpdate
			end
			queue = {
				baseState = currentQueue.baseState,
				firstBaseUpdate = newFirst,
				lastBaseUpdate = newLast,
				shared = currentQueue.shared,
				effects = currentQueue.effects,
			}
			workInProgress.updateQueue = queue
			return
		end
	end

	-- Append the update to the end of the list.
	local lastBaseUpdate = queue.lastBaseUpdate
	if lastBaseUpdate == nil then
		queue.firstBaseUpdate = capturedUpdate
	else
		lastBaseUpdate.next = capturedUpdate
	end
	queue.lastBaseUpdate = capturedUpdate
end
exports.enqueueCapturedUpdate = enqueueCapturedUpdate

local function getStateFromUpdate<State>(
	workInProgress: Fiber,
	queue: UpdateQueue<State>,
	update: Update<State>,
	prevState: State,
	nextProps: any,
	instance: any
): any
	local updateTag = update.tag
	if updateTag == ReplaceState then
		local payload = update.payload
		if type(payload) == "function" then
			-- Updater function
			if __DEV__ then
				enterDisallowedContextReadInDEV()
			end
			-- deviation: Upstream binds this callback to the instance;
			-- in order for us to get the same behavior, we'd need to change the
			-- signature of the updater, which doesn't make sense for our case
			local nextState = payload(prevState, nextProps)
			if __DEV__ then
				if debugRenderPhaseSideEffectsForStrictMode and bit32.band(workInProgress.mode, StrictMode) ~= 0 then
					disableLogs()
					-- deviation: YOLO flag for disabling pcall
					local ok, result
					if not __YOLO__ then
						ok, result = xpcall(payload, describeError, prevState, nextProps)
					else
						ok = true
						payload(prevState, nextProps)
					end
					-- finally
					reenableLogs()

					if not ok then
						error(result)
					end
				end
				exitDisallowedContextReadInDEV()
			end
			return nextState
		end
		-- State object
		return payload
	elseif updateTag == CaptureUpdate or updateTag == UpdateState then
		if updateTag == CaptureUpdate then
			workInProgress.flags = bit32.bor(bit32.band(workInProgress.flags, bit32.bnot(ShouldCapture)), DidCapture)
		end
		-- Intentional fallthrough
		local payload = update.payload
		local partialState
		if type(payload) == "function" then
			-- Updater function
			if __DEV__ then
				enterDisallowedContextReadInDEV()
			end
			-- deviation: Upstream binds this callback to the instance;
			-- in order for us to get the same behavior, we'd need to change the
			-- signature of the updater, which doesn't make sense for our case
			partialState = payload(prevState, nextProps)
			if __DEV__ then
				if debugRenderPhaseSideEffectsForStrictMode and bit32.band(workInProgress.mode, StrictMode) ~= 0 then
					disableLogs()
					-- deviation: YOLO flag for disabling pcall
					local ok, result
					if not __YOLO__ then
						ok, result = xpcall(payload, describeError, prevState, nextProps)
					else
						ok = true
						payload(prevState, nextProps)
					end
					-- finally
					reenableLogs()

					if not ok then
						error(result)
					end
				end
				exitDisallowedContextReadInDEV()
			end
		else
			-- Partial state object
			partialState = payload
		end
		if partialState == nil then
			-- Null and undefined are treated as no-ops.
			return prevState
		end
		-- Merge the partial state and the previous state.
		-- TODO: the below optimziation doesn't work because: invalid argument #1 to 'clone' (table has a protected metatable)
		-- local newState = if prevState ~= nil then table.clone(prevState :: any) else {}
		return Object.assign({}, prevState, partialState)
	elseif updateTag == ForceUpdate then
		hasForceUpdate = true
		return prevState
	end
	return prevState
end
exports.getStateFromUpdate = getStateFromUpdate

local function processUpdateQueue<State>(workInProgress: Fiber, props: any, instance: any, renderLanes: Lanes): ()
	-- This is always non-null on a ClassComponent or HostRoot
	local queue: UpdateQueue<State> = workInProgress.updateQueue :: any

	hasForceUpdate = false

	if __DEV__ then
		currentlyProcessingQueue = queue.shared
	end

	local firstBaseUpdate = queue.firstBaseUpdate
	local lastBaseUpdate = queue.lastBaseUpdate

	-- Check if there are pending updates. If so, transfer them to the base queue.
	local pendingQueue = queue.shared.pending
	if pendingQueue ~= nil then
		queue.shared.pending = nil

		-- The pending queue is circular. Disconnect the pointer between first
		-- and last so that it's non-circular.
		local lastPendingUpdate = pendingQueue
		local firstPendingUpdate = lastPendingUpdate.next
		lastPendingUpdate.next = nil
		-- Append pending updates to base queue
		if lastBaseUpdate == nil then
			firstBaseUpdate = firstPendingUpdate
		else
			lastBaseUpdate.next = firstPendingUpdate
		end
		lastBaseUpdate = lastPendingUpdate

		-- If there's a current queue, and it's different from the base queue, then
		-- we need to transfer the updates to that queue, too. Because the base
		-- queue is a singly-linked list with no cycles, we can append to both
		-- lists and take advantage of structural sharing.
		-- TODO: Pass `current` as argument
		local current = workInProgress.alternate
		if current ~= nil then
			-- This is always non-null on a ClassComponent or HostRoot
			local currentQueue: UpdateQueue<State> = current.updateQueue :: any
			local currentLastBaseUpdate = currentQueue.lastBaseUpdate
			if currentLastBaseUpdate ~= lastBaseUpdate then
				if currentLastBaseUpdate == nil then
					currentQueue.firstBaseUpdate = firstPendingUpdate
				else
					currentLastBaseUpdate.next = firstPendingUpdate
				end
				currentQueue.lastBaseUpdate = lastPendingUpdate
			end
		end
	end

	-- These values may change as we process the queue.
	if firstBaseUpdate ~= nil then
		-- Iterate through the list of updates to compute the result.
		local newState = queue.baseState
		-- TODO: Don't need to accumulate this. Instead, we can remove renderLanes
		-- from the original lanes.
		local newLanes = NoLanes

		local newBaseState = nil
		local newFirstBaseUpdate = nil
		local newLastBaseUpdate = nil

		local update = firstBaseUpdate
		while true do
			local updateLane = update.lane
			local updateEventTime = update.eventTime
			if not isSubsetOfLanes(renderLanes, updateLane) then
				-- Priority is insufficient. Skip this update. If this is the first
				-- skipped update, the previous update/state is the new base
				-- update/state.
				local clone: Update<State> = {
					eventTime = updateEventTime,
					lane = updateLane,

					tag = update.tag,
					payload = update.payload,
					callback = update.callback,

					next = nil,
				}
				if newLastBaseUpdate == nil then
					newFirstBaseUpdate = clone
					newLastBaseUpdate = clone
					newBaseState = newState
				else
					newLastBaseUpdate.next = clone
					newLastBaseUpdate = clone
				end
				-- Update the remaining priority in the queue.
				newLanes = mergeLanes(newLanes, updateLane)
			else
				-- This update does have sufficient priority.

				if newLastBaseUpdate ~= nil then
					local clone: Update<State> = {
						eventTime = updateEventTime,
						-- This update is going to be committed so we never want uncommit
						-- it. Using NoLane works because 0 is a subset of all bitmasks, so
						-- this will never be skipped by the check above.
						lane = NoLane,

						tag = update.tag,
						payload = update.payload,
						callback = update.callback,

						next = nil,
					}
					newLastBaseUpdate.next = clone
					newLastBaseUpdate = clone
				end

				-- Process this update.
				newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance)
				local callback = update.callback
				if
					callback ~= nil
					-- If the update was already committed, we should not queue its
					-- callback again.
					and update.lane ~= NoLane
				then
					workInProgress.flags = bit32.bor(workInProgress.flags, Callback)
					local effects = queue.effects
					if effects == nil then
						queue.effects = { update }
					else
						table.insert(effects, update)
					end
				end
			end
			-- FIXME Luau: Luau needs to support repeat until nil pattern
			update = update.next :: Update<State>
			if update == nil then
				pendingQueue = queue.shared.pending
				if pendingQueue == nil then
					break
				else
					-- An update was scheduled from inside a reducer. Add the new
					-- pending updates to the end of the list and keep processing.
					local lastPendingUpdate = pendingQueue
					-- Intentionally unsound. Pending updates form a circular list, but we
					-- unravel them when transferring them to the base queue.
					local firstPendingUpdate = (lastPendingUpdate.next :: any) :: Update<State>
					lastPendingUpdate.next = nil
					update = firstPendingUpdate
					queue.lastBaseUpdate = lastPendingUpdate
					queue.shared.pending = nil
				end
			end
		end

		if newLastBaseUpdate == nil then
			newBaseState = newState
		end

		queue.baseState = (newBaseState :: any) :: State
		queue.firstBaseUpdate = newFirstBaseUpdate
		queue.lastBaseUpdate = newLastBaseUpdate

		-- Set the remaining expiration time to be whatever is remaining in the queue.
		-- This should be fine because the only two other things that contribute to
		-- expiration time are props and context. We're already in the middle of the
		-- begin phase by the time we start processing the queue, so we've already
		-- dealt with the props. Context in components that specify
		-- shouldComponentUpdate is tricky; but we'll have to account for
		-- that regardless.
		markSkippedUpdateLanes(newLanes)
		workInProgress.lanes = newLanes
		workInProgress.memoizedState = newState
	end

	if __DEV__ then
		currentlyProcessingQueue = nil
	end
end
exports.processUpdateQueue = processUpdateQueue

local function callCallback(callback, context)
	-- deviation START: use if-then-error, which avoid string format and function call overhead, as in React 18
	if type(callback) ~= "function" then
		error(
			string.format(
				"Invalid argument passed as callback. Expected a function. Instead " .. "received: %s",
				tostring(callback)
			)
		)
		-- deviation END
	end
	callback(context)
end

exports.resetHasForceUpdateBeforeProcessing = function()
	hasForceUpdate = false
end

exports.checkHasForceUpdateAfterProcessing = function(): boolean
	return hasForceUpdate
end

local function commitUpdateQueue<State>(finishedWork: Fiber, finishedQueue: UpdateQueue<State>, instance: any): ()
	-- Commit the effects
	local effects = finishedQueue.effects
	finishedQueue.effects = nil
	if effects ~= nil then
		for _, effect in effects do
			local callback = effect.callback
			if callback ~= nil then
				callCallback(callback, instance)
			end

			-- performance: return this object to the pool
			table.clear(effect)
			table.insert(updatePool, effect :: any)
			updatePoolIndex += 1
		end
	end
end
exports.commitUpdateQueue = commitUpdateQueue

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="383">
              <Properties>
                <string name="Name">ReactWorkTags</string>
                <string name="Source"><![CDATA[-- upstream: https://github.com/facebook/react/blob/56e9feead0f91075ba0a4f725c9e4e343bca1c67/packages/react-reconciler/src/ReactWorkTags.js
--!strict
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
 ]]

export type WorkTag = number

return {
	FunctionComponent = 0,
	ClassComponent = 1,
	IndeterminateComponent = 2, -- Before we know whether it is function or class
	HostRoot = 3, -- Root of a host tree. Could be nested inside another node.
	HostPortal = 4, -- A subtree. Could be an entry point to a different renderer.
	HostComponent = 5,
	HostText = 6,
	Fragment = 7,
	Mode = 8,
	ContextConsumer = 9,
	ContextProvider = 10,
	ForwardRef = 11,
	Profiler = 12,
	SuspenseComponent = 13,
	MemoComponent = 14,
	SimpleMemoComponent = 15,
	LazyComponent = 16,
	IncompleteClassComponent = 17,
	DehydratedFragment = 18,
	SuspenseListComponent = 19,
	FundamentalComponent = 20,
	ScopeComponent = 21,
	Block = 22,
	OffscreenComponent = 23,
	LegacyHiddenComponent = 24,
}
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="384">
              <Properties>
                <string name="Name">SchedulerWithReactIntegration.new</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/d17086c7c813402a550d15a2f56dc43f1dbd1735/packages/react-reconciler/src/SchedulerWithReactIntegration.new.js
--[[*
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*
* @flow
]]

local Packages = script.Parent.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)
local Array = LuauPolyfill.Array

local ReactInternalTypes = require(script.Parent.ReactInternalTypes)
export type ReactPriorityLevel = ReactInternalTypes.ReactPriorityLevel

-- Intentionally not named imports because Rollup would use dynamic dispatch for
-- CommonJS interop named imports.
local Scheduler = require(Packages.Scheduler)
-- local __interactionsRef = require(Packages.Scheduler.tracing).__interactionsRef
local ReactFeatureFlags = require(Packages.Shared).ReactFeatureFlags
-- local enableSchedulerTracing = ReactFeatureFlags.enableSchedulerTracing
local decoupleUpdatePriorityFromScheduler = ReactFeatureFlags.decoupleUpdatePriorityFromScheduler
local invariant = require(Packages.Shared).invariant
local describeError = require(Packages.Shared).describeError
local ReactFiberLane = require(script.Parent.ReactFiberLane)
local SyncLanePriority = ReactFiberLane.SyncLanePriority
local getCurrentUpdateLanePriority = ReactFiberLane.getCurrentUpdateLanePriority
local setCurrentUpdateLanePriority = ReactFiberLane.setCurrentUpdateLanePriority

local Scheduler_runWithPriority = Scheduler.unstable_runWithPriority
local Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback
local Scheduler_cancelCallback = Scheduler.unstable_cancelCallback
local Scheduler_shouldYield = Scheduler.unstable_shouldYield
local Scheduler_requestPaint = Scheduler.unstable_requestPaint
local Scheduler_now = Scheduler.unstable_now
local Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel
local Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority
local Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority
local Scheduler_NormalPriority = Scheduler.unstable_NormalPriority
local Scheduler_LowPriority = Scheduler.unstable_LowPriority
local Scheduler_IdlePriority = Scheduler.unstable_IdlePriority

-- deviation: Instead of defining these here, we require them from a small file
-- with _just_ these constant definitions; it helps us avoid a circular require
-- issue with `ReactFiberLanes`
local ReactFiberSchedulerPriorities = require(script.Parent["ReactFiberSchedulerPriorities.roblox"])
local ImmediatePriority = ReactFiberSchedulerPriorities.ImmediatePriority
local UserBlockingPriority = ReactFiberSchedulerPriorities.UserBlockingPriority
local NormalPriority = ReactFiberSchedulerPriorities.NormalPriority
local LowPriority = ReactFiberSchedulerPriorities.LowPriority
local IdlePriority = ReactFiberSchedulerPriorities.IdlePriority
local NoPriority = ReactFiberSchedulerPriorities.NoPriority

-- deviation: common types
type Array<T> = { [number]: T }

-- deviation: pre-declare functions
local flushSyncCallbackQueueImpl

-- if enableSchedulerTracing)
--   -- Provide explicit error message when production+profiling bundle of e.g.
--   -- react-dom is used with production (non-profiling) bundle of
--   -- scheduler/tracing
--   invariant(
--     __interactionsRef ~= nil and __interactionsRef.current ~= nil,
--     'It is not supported to run the profiling version of a renderer (for ' +
--       'example, `react-dom/profiling`) without also replacing the ' +
--       '`scheduler/tracing` module with `scheduler/tracing-profiling`. Your ' +
--       'bundler might have a setting for aliasing both modules. Learn more at ' +
--       'https://reactjs.org/link/profiling',
--   )
-- end

export type SchedulerCallback = (isSync: boolean) -> SchedulerCallback | nil

-- deviation START: don't allow extension unless we need to
-- type SchedulerCallbackOptions = { timeout: number?, ... };
type SchedulerCallbackOptions = { timeout: number? }
-- deviation END
local fakeCallbackNode = {}

local shouldYield = Scheduler_shouldYield
local requestPaint
-- Fall back gracefully if we're running an older version of Scheduler.
if Scheduler_requestPaint ~= nil then
	requestPaint = Scheduler_requestPaint
else
	requestPaint = function() end
end

local syncQueue: Array<SchedulerCallback>? = nil
local immediateQueueCallbackNode: any? = nil
local isFlushingSyncQueue: boolean = false
local initialTimeMs: number = Scheduler_now()

-- -- If the initial timestamp is reasonably small, use Scheduler's `now` directly.
-- -- This will be the case for modern browsers that support `performance.now`. In
-- -- older browsers, Scheduler falls back to `Date.now`, which returns a Unix
-- -- timestamp. In that case, subtract the module initialization time to simulate
-- -- the behavior of performance.now and keep our times small enough to fit
-- -- within 32 bits.
-- -- TODO: Consider lifting this into Scheduler.
-- FIXME: properly account for ms vs s from tick
-- local now = initialTimeMs < 10000
--   and Scheduler_now
--   or function()
--     return Scheduler_now() - initialTimeMs
--   end

-- deviation: Roblox uses `tick` under the hood, which is more like the unix
-- timestamp behavior referenced above
local function now(): number
	return Scheduler_now() - initialTimeMs
end

local function getCurrentPriorityLevel(): ReactPriorityLevel
	local currentPriorityLevel = Scheduler_getCurrentPriorityLevel()
	if currentPriorityLevel == Scheduler_ImmediatePriority then
		return ImmediatePriority
	elseif currentPriorityLevel == Scheduler_UserBlockingPriority then
		return UserBlockingPriority
	elseif currentPriorityLevel == Scheduler_NormalPriority then
		return NormalPriority
	elseif currentPriorityLevel == Scheduler_LowPriority then
		return LowPriority
	elseif currentPriorityLevel == Scheduler_IdlePriority then
		return IdlePriority
	else
		invariant(false, "Unknown priority level.")
		-- deviation: FIXME: Luau needs explicit return here
		return NoPriority
	end
end

function reactPriorityToSchedulerPriority(reactPriorityLevel)
	if reactPriorityLevel == ImmediatePriority then
		return Scheduler_ImmediatePriority
	elseif reactPriorityLevel == UserBlockingPriority then
		return Scheduler_UserBlockingPriority
	elseif reactPriorityLevel == NormalPriority then
		return Scheduler_NormalPriority
	elseif reactPriorityLevel == LowPriority then
		return Scheduler_LowPriority
	elseif reactPriorityLevel == IdlePriority then
		return Scheduler_IdlePriority
	else
		invariant(false, "Unknown priority level.")
		-- deviation: return appeases Luau
		return nil
	end
end

-- FIXME Luau: should be T... but hits CLI-50289: failure to unify
local function runWithPriority<T...>(reactPriorityLevel: ReactPriorityLevel, fn: () -> T...): ...any
	local priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel)
	return Scheduler_runWithPriority(priorityLevel, fn)
end

local function scheduleCallback(
	reactPriorityLevel: ReactPriorityLevel,
	callback: SchedulerCallback,
	options: SchedulerCallbackOptions | nil
)
	local priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel)
	return Scheduler_scheduleCallback(priorityLevel, callback, options)
end

local function scheduleSyncCallback(callback: SchedulerCallback)
	-- Push this callback into an internal queue. We'll flush these either in
	-- the next tick, or earlier if something calls `flushSyncCallbackQueue`.
	if syncQueue == nil then
		syncQueue = { callback }
		-- Flush the queue in the next tick, at the earliest.
		immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl)
	else
		-- Push onto existing queue. Don't need to schedule a callback because
		-- we already scheduled one when we created the queue.
		local coercedSyncQueue = syncQueue
		table.insert(coercedSyncQueue, callback)
	end
	return fakeCallbackNode
end

local function cancelCallback(callbackNode: any)
	if callbackNode ~= fakeCallbackNode then
		Scheduler_cancelCallback(callbackNode)
	end
end

local function flushSyncCallbackQueue(): boolean
	if immediateQueueCallbackNode ~= nil then
		local node = immediateQueueCallbackNode
		immediateQueueCallbackNode = nil
		Scheduler_cancelCallback(node)
	end
	return flushSyncCallbackQueueImpl()
end

flushSyncCallbackQueueImpl = function()
	if not isFlushingSyncQueue and syncQueue ~= nil then
		-- Prevent re-entrancy.
		isFlushingSyncQueue = true
		local i = 1
		if decoupleUpdatePriorityFromScheduler then
			local previousLanePriority = getCurrentUpdateLanePriority()
			-- deviation: YOLO flag for disabling pcall
			local ok = true
			local result
			if not _G.__YOLO__ then
				-- performance: hoist non-throwables out of try{} to eliminate anon function
				local isSync = true
				local queue = syncQueue

				setCurrentUpdateLanePriority(SyncLanePriority)
				ok, result = xpcall(
					runWithPriority,
					describeError,
					ImmediatePriority,
					-- FIXME Luau: Luau sees this as returning void, but then sees an explicit return in runWithPriority and errors
					function(): ...any
						for index, callback in queue do
							i = index
							repeat
								-- FIXME Luau: Luau doesn't understand loop until nil construct
								callback = callback(isSync) :: any
							until callback == nil
						end
					end
				)
				syncQueue = nil
			else
				ok = true
				local isSync = true
				local queue = syncQueue

				setCurrentUpdateLanePriority(SyncLanePriority)
				-- FIXME Luau: Luau sees this as returning void, but then sees an explicit return in runWithPriority and errors
				runWithPriority(ImmediatePriority, function(): ...any
					for index, callback in queue do
						i = index
						repeat
							-- FIXME Luau: Luau doesn't understand loop until nil construct
							callback = callback(isSync) :: any
						until callback == nil
						i += 1
					end
				end)
				syncQueue = nil
			end

			-- finally
			setCurrentUpdateLanePriority(previousLanePriority)
			isFlushingSyncQueue = false

			if not ok then
				-- If something throws, leave the remaining callbacks on the queue.
				if syncQueue ~= nil then
					syncQueue = Array.slice(syncQueue, i + 1)
				end
				-- Resume flushing in the next tick
				Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue)
				error(result)
			end
		else
			-- deviation: YOLO flag for disabling pcall
			local ok, result
			if not _G.__YOLO__ then
				-- performance: hoist non-throwables out of try{} to eliminate anon function
				local isSync = true
				local queue = syncQueue

				ok, result = xpcall(
					runWithPriority,
					describeError,
					ImmediatePriority,
					-- FIXME Luau: Luau sees this as returning void, but then sees an explicit return in runWithPriority and errors
					function(): ...any
						for index, callback in queue do
							i = index
							repeat
								-- FIXME Luau: Luau doesn't understand loop until nil construct
								callback = callback(isSync) :: any
							until callback == nil
						end
					end
				)
				syncQueue = nil
			else
				ok = true
				local isSync = true
				local queue = syncQueue
				-- FIXME Luau: Luau sees this as returning void, but then sees an explicit return in runWithPriority and errors
				runWithPriority(ImmediatePriority, function(): ...any
					for index, callback in queue do
						i = index
						repeat
							-- FIXME Luau: Luau doesn't understand loop until nil construct
							callback = callback(isSync) :: any
						until callback == nil
					end
				end)
				syncQueue = nil
			end

			-- finally
			isFlushingSyncQueue = false

			if not ok then
				-- If something throws, leave the remaining callbacks on the queue.
				if syncQueue ~= nil then
					syncQueue = Array.slice(syncQueue, i + 1)
				end
				-- Resume flushing in the next tick
				Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue)
				error(result)
			end
		end
		return true
	else
		return false
	end
end

return {
	ImmediatePriority = ImmediatePriority,
	UserBlockingPriority = UserBlockingPriority,
	NormalPriority = NormalPriority,
	LowPriority = LowPriority,
	IdlePriority = IdlePriority,
	NoPriority = NoPriority,

	getCurrentPriorityLevel = getCurrentPriorityLevel,
	flushSyncCallbackQueue = flushSyncCallbackQueue,
	runWithPriority = runWithPriority,
	scheduleCallback = scheduleCallback,
	scheduleSyncCallback = scheduleSyncCallback,
	cancelCallback = cancelCallback,
	now = now,
	requestPaint = requestPaint,
	shouldYield = shouldYield,
}
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="385">
              <Properties>
                <string name="Name">SchedulingProfiler</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/56e9feead0f91075ba0a4f725c9e4e343bca1c67/packages/react-reconciler/src/SchedulingProfiler.js
-- /**
--  * Copyright (c) Facebook, Inc. and its affiliates.
--  *
--  * This source code is licensed under the MIT license found in the
--  * LICENSE file in the root directory of this source tree.
--  *
--  * @flow
--  */

local exports = {}
local Packages = script.Parent.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)
local WeakMap = LuauPolyfill.WeakMap
type WeakMap<K, V> = LuauPolyfill.WeakMap<K, V>

local ReactFiberLane = require(script.Parent.ReactFiberLane)
type Lane = ReactFiberLane.Lane
type Lanes = ReactFiberLane.Lanes

local ReactInternalTypes = require(script.Parent.ReactInternalTypes)
type Fiber = ReactInternalTypes.Fiber

local ReactTypes = require(Packages.Shared)
type Wakeable = ReactTypes.Wakeable

local ReactFeatureFlags = require(Packages.Shared).ReactFeatureFlags
local enableSchedulingProfiler = ReactFeatureFlags.enableSchedulingProfiler
local ReactVersion = require(Packages.Shared).ReactVersion
local getComponentName = require(Packages.Shared).getComponentName

-- /**
--  * If performance exists and supports the subset of the User Timing API that we
--  * require.
--  */
local supportsUserTiming = _G.performance ~= nil
local performance = _G.performance or {
	mark = function(str)
		debug.profilebegin(str)
		debug.profileend()
	end,
}

function formatLanes(laneOrLanes: Lane | Lanes): string
	return tostring(laneOrLanes)
end

-- Create a mark on React initialization
if enableSchedulingProfiler then
	if supportsUserTiming then
		performance.mark("--react-init-" .. tostring(ReactVersion))
	end
end

exports.markCommitStarted = function(lanes: Lanes): ()
	if enableSchedulingProfiler then
		if supportsUserTiming then
			performance.mark("--commit-start-" .. formatLanes(lanes))
		end
	end
end

exports.markCommitStopped = function(): ()
	if enableSchedulingProfiler then
		if supportsUserTiming then
			performance.mark("--commit-stop")
		end
	end
end

-- deviation: we use our custom Map
-- local PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map

-- $FlowFixMe: Flow cannot handle polymorphic WeakMaps
local wakeableIDs: WeakMap<Wakeable, number> = WeakMap.new()
local wakeableID: number = 0
function getWakeableID(wakeable: Wakeable): number
	if not wakeableIDs:has(wakeable) then
		wakeableIDs:set(wakeable, wakeableID)
		wakeableID += 1
	end
	return wakeableIDs:get(wakeable)
end

exports.markComponentSuspended = function(fiber: Fiber, wakeable: Wakeable): ()
	if enableSchedulingProfiler then
		if supportsUserTiming then
			local id = getWakeableID(wakeable)
			local componentName = getComponentName(fiber.type) or "Unknown"
			-- TODO Add component stack id
			performance.mark("--suspense-suspend-" .. tostring(id) .. "-" .. componentName)
			wakeable:andThen(function()
				performance.mark("--suspense-resolved-" .. tostring(id) .. "-" .. componentName)
			end, function()
				performance.mark("--suspense-rejected-" .. tostring(id) .. "-" .. componentName)
			end)
		end
	end
end

exports.markLayoutEffectsStarted = function(lanes: Lanes): ()
	if enableSchedulingProfiler then
		if supportsUserTiming then
			performance.mark("--layout-effects-start-" .. formatLanes(lanes))
		end
	end
end

exports.markLayoutEffectsStopped = function(): ()
	if enableSchedulingProfiler then
		if supportsUserTiming then
			performance.mark("--layout-effects-stop")
		end
	end
end

exports.markPassiveEffectsStarted = function(lanes: Lanes): ()
	if enableSchedulingProfiler then
		if supportsUserTiming then
			performance.mark("--passive-effects-start-" .. formatLanes(lanes))
		end
	end
end

exports.markPassiveEffectsStopped = function(): ()
	if enableSchedulingProfiler then
		if supportsUserTiming then
			performance.mark("--passive-effects-stop")
		end
	end
end

exports.markRenderStarted = function(lanes: Lanes): ()
	if enableSchedulingProfiler then
		if supportsUserTiming then
			performance.mark("--render-start-" .. formatLanes(lanes))
		end
	end
end

exports.markRenderYielded = function(): ()
	if enableSchedulingProfiler then
		if supportsUserTiming then
			performance.mark("--render-yield")
		end
	end
end

exports.markRenderStopped = function(): ()
	if enableSchedulingProfiler then
		if supportsUserTiming then
			performance.mark("--render-stop")
		end
	end
end

exports.markRenderScheduled = function(lane: Lane): ()
	if enableSchedulingProfiler then
		if supportsUserTiming then
			performance.mark("--schedule-render-" .. formatLanes(lane))
		end
	end
end

exports.markForceUpdateScheduled = function(fiber: Fiber, lane: Lane): ()
	if enableSchedulingProfiler then
		if supportsUserTiming then
			local componentName = getComponentName(fiber.type) or "Unknown"
			-- TODO Add component stack id
			performance.mark("--schedule-forced-update-" .. formatLanes(lane) .. "-" .. componentName)
		end
	end
end

exports.markStateUpdateScheduled = function(fiber: Fiber, lane: Lane): ()
	if enableSchedulingProfiler then
		if supportsUserTiming then
			local componentName = getComponentName(fiber.type) or "Unknown"
			-- TODO Add component stack id
			performance.mark("--schedule-state-update-" .. formatLanes(lane) .. "-" .. componentName)
		end
	end
end

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="Folder" referent="386">
              <Properties>
                <string name="Name">forks</string>
              </Properties>
              <Item class="ModuleScript" referent="387">
                <Properties>
                  <string name="Name">ReactFiberHostConfig.test</string>
                  <string name="Source"><![CDATA[-- upstream: https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/react-reconciler/src/forks/ReactFiberHostConfig.test.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]

local Packages = script.Parent.Parent.Parent

return require(Packages.Dev.ReactTestRenderer)
]]></string>
                </Properties>
              </Item>
            </Item>
          </Item>
          <Item class="ModuleScript" referent="388">
            <Properties>
              <string name="Name">react-reflex</string>
              <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local exports = {}
exports.ReflexProvider = TS.import(script, script, "components", "ReflexProvider").default
exports.ReflexContext = TS.import(script, script, "components", "ReflexContext").default
for _k, _v in TS.import(script, script, "hooks", "use-producer") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "hooks", "use-selector") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "hooks", "use-selector-creator") or {} do
	exports[_k] = _v
end
return exports
]]></string>
            </Properties>
            <Item class="Folder" referent="389">
              <Properties>
                <string name="Name">components</string>
              </Properties>
              <Item class="ModuleScript" referent="390">
                <Properties>
                  <string name="Name">ReflexContext</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local createContext = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS")).createContext
local ReflexContext = createContext(nil)
local default = ReflexContext
return {
	default = default,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="391">
                <Properties>
                  <string name="Name">ReflexProvider</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local _roact = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS"))
local Roact = _roact
local useMemo = _roact.useMemo
local ReflexContext = TS.import(script, script.Parent, "ReflexContext").default
local function ReflexProvider(_param)
	local producer = _param.producer
	local initialState = _param.initialState
	local children = _param[Roact.Children]
	useMemo(function()
		-- Run in useMemo to set the state before rendering children
		if initialState == nil then
			return nil
		end
		local _fn = producer
		local _object = {}
		local _spread = producer:getState()
		if type(_spread) == "table" then
			for _k, _v in _spread do
				_object[_k] = _v
			end
		end
		for _k, _v in initialState do
			_object[_k] = _v
		end
		_fn:setState(_object)
	end, {})
	local _attributes = {
		value = producer,
	}
	local _children = {}
	local _length = #_children
	if children then
		for _k, _v in children do
			if type(_k) == "number" then
				_children[_length + _k] = _v
			else
				_children[_k] = _v
			end
		end
	end
	return Roact.createElement(ReflexContext.Provider, _attributes, _children)
end
return {
	default = ReflexProvider,
}
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="Folder" referent="392">
              <Properties>
                <string name="Name">hooks</string>
              </Properties>
              <Item class="ModuleScript" referent="393">
                <Properties>
                  <string name="Name">use-producer</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local useContext = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS")).useContext
local ReflexContext = TS.import(script, script.Parent.Parent, "components", "ReflexContext").default
--[[
	*
	* A hook that returns the producer from the ReflexProvider.
	*
	* @example
	* // reflex-hooks.ts
	* export const useAppProducer: UseProducerHook<RootProducer> = useProducer;
	*
	* // MyComponent.tsx
	* const producer = useAppProducer();
	* producer.incrementCounter();
	*
	* @returns The producer from the ReflexProvider.
]]
--[[
	*
	* Returns the producer from the ReflexProvider. Accepts a generic type
	* parameter that can be used to narrow the type of the producer.
	*
	* @example
	* const producer = useProducer<MyProducer>();
	* producer.incrementCounter();
	*
	* @returns The producer from the ReflexProvider.
]]
local function useProducer()
	local producer = useContext(ReflexContext)
	assert(producer, "A ReflexProvider must be rendered above this component to use Roact Reflex Hooks.")
	return producer
end
return {
	useProducer = useProducer,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="394">
                <Properties>
                  <string name="Name">use-selector-creator</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local useMemo = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS")).useMemo
local useSelector = TS.import(script, script.Parent, "use-selector").useSelector
--[[
	*
	* A hook that returns the result of a selector function that is called
	* with the current state of the producer.
	*
	* This type is typically not necessary if your selector function is created
	* with an explicitly typed `state` parameter.
	*
	* @example
	* // reflex-hooks.ts
	* export const useAppSelectorCreator: UseSelectorCreatorHook<RootProducer> = useSelectorCreator;
	*
	* // selectors.ts
	* export const selectUsers = (state: RootState) => state.users;
	* export const selectUsername = (id: number) => {
	* 	return createSelector([selectUsers], (users) => users[id].name);
	* };
	*
	* // MyComponent.tsx
	* const username = useAppSelectorCreator(selectUsername, 1);
	*
	* @param selectorCreator A function that takes the current state of the producer
	* and returns a value to be used in the component.
	* @param args Arguments to pass to the selector creator
	* @returns The result of the selector function.
]]
--[[
	*
	* Similar to `useSelector`, but accepts a selector creator function that
	* returns a selector. The selector creator is only called when the arguments
	* change and the selector is memoized.
	*
	* @example
	* // selectors.ts
	* export const selectUsers = (state: RootState) => state.users;
	* export const selectUsername = (id: number) => {
	* 	return createSelector([selectUsers], (users) => users[id].name);
	* };
	*
	* // MyComponent.tsx
	* const username = useSelectorCreator(selectUsername, 1);
	*
	* @param selectorCreator A function that takes the current state of the producer
	* and returns a value to be used in the component.
	* @param args Arguments to pass to the selector creator function.
	* @returns The result of the selector function.
]]
local function useSelectorCreator(selectorCreator, ...)
	local args = { ... }
	local selector = useMemo(function()
		return selectorCreator(unpack(args))
	end, args)
	return useSelector(selector)
end
return {
	useSelectorCreator = useSelectorCreator,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="395">
                <Properties>
                  <string name="Name">use-selector</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.1
local TS = _G[script]
local _roact = TS.import(script, TS.getModule(script, "@rbxts", "RoactTS"))
local useEffect = _roact.useEffect
local useRef = _roact.useRef
local useState = _roact.useState
local useProducer = TS.import(script, script.Parent, "use-producer").useProducer
--[[
	*
	* A hook that returns the result of a selector function that is called
	* with the current state of the producer.
	*
	* This type is typically not necessary if your selector function is created
	* with an explicitly typed `state` parameter.
	*
	* @example
	* // reflex-hooks.ts
	* export const useAppSelector: UseSelectorHook<RootProducer> = useSelector;
	*
	* // MyComponent.tsx
	* const counter = useAppSelector((state) => state.counter);
	*
	* @param selector A function that takes the current state of the producer
	* and returns a value to be used in the component.
	* @param equalityFn An optional function that takes the previous and new
	* values returned by the selector and returns true if the new value should
	* be used in the component.
	* @returns The result of the selector function.
]]
--[[
	*
	* Returns the result of a selector function that is called with the current
	* state of the producer.
	*
	* Accepts a generic type parameter to narrow the type of the producer, but it
	* is typically not necessary if your selector function is created with an
	* explicitly typed `state` parameter.
	*
	* @example
	* const selectCounter = (state: RootState) => state.counter;
	* const counter = useSelector(selectCounter);
	*
	* @param selector A function that takes the current state of the producer
	* and returns a value to be used in the component.
	* @param equalityFn An optional function that takes the previous and new
	* values returned by the selector and returns true if the new value should
	* be used in the component.
	* @returns The result of the selector function.
]]
local function useSelector(selector, equalityFn)
	local producer = useProducer()
	local latestSelector = useRef(selector)
	local isMount = useRef(true)
	local selection, setSelection = useState(function()
		return producer:getState(selector)
	end)
	useEffect(function()
		if isMount.current then
			isMount.current = false
			return nil
		end
		setSelection(producer:getState(selector))
		latestSelector.current = selector
	end, { selector })
	useEffect(function()
		local prevSelection = selection
		return producer:subscribe(function(newState)
			local newSelection = latestSelector.current(newState)
			if if equalityFn then not equalityFn(newSelection, prevSelection) else newSelection ~= prevSelection then
				prevSelection = newSelection
				setSelection(newSelection)
			end
		end)
	end, { producer })
	return selection
end
return {
	useSelector = useSelector,
}
]]></string>
                </Properties>
              </Item>
            </Item>
          </Item>
          <Item class="ModuleScript" referent="396">
            <Properties>
              <string name="Name">ReactRoblox</string>
              <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/efd8f6442d1aa7c4566fe812cba03e7e83aaccc3/packages/react-native-renderer/index.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]

local HostTypes = require(script.client["ReactRobloxHostTypes.roblox"])
export type RootType = HostTypes.RootType
return require(script.client.ReactRoblox)
]]></string>
            </Properties>
            <Item class="ModuleScript" referent="397">
              <Properties>
                <string name="Name">ReactReconciler.roblox</string>
                <string name="Source"><![CDATA[-- NOTE: This file is too small and/or simple to be sufficiently rewritten under a new license. Assume MIT.
--!strict
-- deviation: Initializes the reconciler with this package's host
-- config and returns the resulting module

local Packages = script.Parent.Parent
local initializeReconciler = require(Packages.ReactReconciler)

local ReactRobloxHostConfig = require(script.Parent.client.ReactRobloxHostConfig)

return initializeReconciler(ReactRobloxHostConfig)
]]></string>
              </Properties>
            </Item>
            <Item class="Folder" referent="398">
              <Properties>
                <string name="Name">client</string>
              </Properties>
              <Item class="ModuleScript" referent="399">
                <Properties>
                  <string name="Name">ReactRoblox</string>
                  <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/8e5adfbd7e605bda9c5e96c10e015b3dc0df688e/packages/react-dom/src/client/ReactDOM.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]
local Packages = script.Parent.Parent.Parent

local ReactTypes = require(Packages.Shared)
type ReactNodeList = ReactTypes.ReactNodeList
local ReactRobloxHostTypes = require(script.Parent["ReactRobloxHostTypes.roblox"])
type Container = ReactRobloxHostTypes.Container

-- local '../shared/checkReact'
-- local ReactRobloxLegacy = require(script.Parent.ReactRobloxLegacy)
-- local findDOMNode = ReactRobloxLegacy.findDOMNode
-- local render = ReactRobloxLegacy.render
-- local hydrate = ReactRobloxLegacy.hydrate
-- local unstable_renderSubtreeIntoContainer = ReactRobloxLegacy.unstable_renderSubtreeIntoContainer
-- local unmountComponentAtNode = ReactRobloxLegacy.unmountComponentAtNode

local ReactRobloxRoot
ReactRobloxRoot = require(script.Parent.ReactRobloxRoot)
local createRoot = ReactRobloxRoot.createRoot
local createBlockingRoot = ReactRobloxRoot.createBlockingRoot
local createLegacyRoot = ReactRobloxRoot.createLegacyRoot
local isValidContainer = ReactRobloxRoot.isValidContainer
-- local createEventHandle = require(script.Parent.ReactDOMEventHandle).createEventHandle

-- deviation: Use the config-injecting entry point for the reconciler
local ReactReconciler = require(script.Parent.Parent["ReactReconciler.roblox"])
-- local batchedEventUpdates = ReactReconciler.batchedEventUpdates
local batchedUpdates = ReactReconciler.batchedUpdates
-- local discreteUpdates = ReactReconciler.discreteUpdates
-- local flushDiscreteUpdates = ReactReconciler.flushDiscreteUpdates
-- local flushSync = ReactReconciler.flushSync
-- local flushControlled = ReactReconciler.flushControlled
local injectIntoDevTools = ReactReconciler.injectIntoDevTools
local flushPassiveEffects = ReactReconciler.flushPassiveEffects
local IsThisRendererActing = ReactReconciler.IsThisRendererActing
-- local attemptSynchronousHydration = ReactReconciler.attemptSynchronousHydration
-- local attemptUserBlockingHydration = ReactReconciler.attemptUserBlockingHydration
-- local attemptContinuousHydration = ReactReconciler.attemptContinuousHydration
-- local attemptHydrationAtCurrentPriority = ReactReconciler.attemptHydrationAtCurrentPriority
-- local runWithPriority = ReactReconciler.runWithPriority
-- local getCurrentUpdateLanePriority = ReactReconciler.getCurrentUpdateLanePriority

local createPortalImpl = ReactReconciler.createPortal
-- local canUseDOM = require(Packages.Shared).ExecutionEnvironment.canUseDOM
local ReactVersion = require(Packages.Shared).ReactVersion
local invariant = require(Packages.Shared).invariant
local ReactFeatureFlags = require(Packages.Shared).ReactFeatureFlags
-- local warnUnstableRenderSubtreeIntoContainer = ReactFeatureFlags.warnUnstableRenderSubtreeIntoContainer
local enableNewReconciler = ReactFeatureFlags.enableNewReconciler

local ReactRobloxComponentTree = require(script.Parent.ReactRobloxComponentTree)
local getInstanceFromNode = ReactRobloxComponentTree.getInstanceFromNode
local getNodeFromInstance = ReactRobloxComponentTree.getNodeFromInstance
local getFiberCurrentPropsFromNode = ReactRobloxComponentTree.getFiberCurrentPropsFromNode
local getClosestInstanceFromNode = ReactRobloxComponentTree.getClosestInstanceFromNode
-- local restoreControlledState = require(script.Parent.ReactRobloxComponent).restoreControlledState

-- local ReactDOMEventReplaying = require(Packages.Parent.Parent.events.ReactDOMEventReplaying)
-- local setAttemptSynchronousHydration = ReactDOMEventReplaying.setAttemptSynchronousHydration
-- local setAttemptUserBlockingHydration = ReactDOMEventReplaying.setAttemptUserBlockingHydration
-- local setAttemptContinuousHydration = ReactDOMEventReplaying.setAttemptContinuousHydration
-- local setAttemptHydrationAtCurrentPriority = ReactDOMEventReplaying.setAttemptHydrationAtCurrentPriority
-- local queueExplicitHydrationTarget = ReactDOMEventReplaying.queueExplicitHydrationTarget
-- local setGetCurrentUpdatePriority = ReactDOMEventReplaying.setGetCurrentUpdatePriority
-- local setAttemptHydrationAtPriority = ReactDOMEventReplaying.setAttemptHydrationAtPriority

-- local setBatchingImplementation = require(Packages.Parent.Parent.events.ReactDOMUpdateBatching).setBatchingImplementation
-- local ReactDOMControlledComponent = require(script.Parent.Parent.events.ReactDOMControlledComponent)
-- local setRestoreImplementation = ReactDOMControlledComponent.setRestoreImplementation
-- local enqueueStateRestore = ReactDOMControlledComponent.enqueueStateRestore
-- local restoreStateIfNeeded = ReactDOMControlledComponent.restoreStateIfNeeded

local Event = require(Packages.Shared).Event
local Change = require(Packages.Shared).Change
local Tag = require(Packages.Shared).Tag

-- setAttemptSynchronousHydration(attemptSynchronousHydration)
-- setAttemptUserBlockingHydration(attemptUserBlockingHydration)
-- setAttemptContinuousHydration(attemptContinuousHydration)
-- setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority)
-- setGetCurrentUpdatePriority(getCurrentUpdateLanePriority)
-- setAttemptHydrationAtPriority(runWithPriority)

-- local didWarnAboutUnstableCreatePortal = false
-- local didWarnAboutUnstableRenderSubtreeIntoContainer = false

-- deviation: Built-ins for maps and sets are not required
-- if _G.__DEV__ then
--   if
--     typeof Map ~= 'function' or
--     -- $FlowIssue Flow incorrectly thinks Map has no prototype
--     Map.prototype == nil or
--     typeof Map.prototype.forEach ~= 'function' or
--     typeof Set ~= 'function' or
--     -- $FlowIssue Flow incorrectly thinks Set has no prototype
--     Set.prototype == nil or
--     typeof Set.prototype.clear ~= 'function' or
--     typeof Set.prototype.forEach ~= 'function'
--   )
--     console.error(
--       'React depends on Map and Set built-in types. Make sure that you load a ' +
--         'polyfill in older browsers. https://reactjs.org/link/react-polyfills',
--     )
--   end
-- end

-- setRestoreImplementation(restoreControlledState)
-- setBatchingImplementation(
--   batchedUpdates,
--   discreteUpdates,
--   flushDiscreteUpdates,
--   batchedEventUpdates
-- )

local function createPortal(children: ReactNodeList, container: Container, key: string?): any
	-- ): React$Portal
	invariant(
		isValidContainer(container),
		-- deviation: Use roblox engine terminology
		"Target container is not a Roblox Instance."
	)
	-- TODO: pass ReactDOM portal implementation as third argument
	-- $FlowFixMe The Flow type is opaque but there's no way to actually create it.
	-- FIXME: luau doesn't realize that this function errors, and it's
	-- expecting us to return something. Can be removed when implementation is
	-- done.
	return createPortalImpl(children, container, nil, key)
end

-- local function scheduleHydration(target: any)
--   if target then
--     queueExplicitHydrationTarget(target)
--   end
-- end

-- local function renderSubtreeIntoContainer(
--   parentComponent: React$Component<any, any>,
--   element: React$Element<any>,
--   containerNode: Container,
--   callback: ?Function,
-- )
-- local function renderSubtreeIntoContainer(
--   parentComponent: any,
--   element: any,
--   containerNode: Container,
--   callback: any
-- )
--   if _G.__DEV__ then
--     if
--       warnUnstableRenderSubtreeIntoContainer and
--       not didWarnAboutUnstableRenderSubtreeIntoContainer
--     then
--       didWarnAboutUnstableRenderSubtreeIntoContainer = true
--       console.warn(
--         "ReactDOM.unstable_renderSubtreeIntoContainer() is deprecated " ..
--           "and will be removed in a future major release. Consider using " ..
--           "React Portals instead."
--       )
--     end
--   end
--   return unstable_renderSubtreeIntoContainer(
--     parentComponent,
--     element,
--     containerNode,
--     callback
--   )
-- end

-- local function unstable_createPortal(
--   children: ReactNodeList,
--   container: Container,
--   key: string?
-- )
--   if _G.__DEV__ then
--     if not didWarnAboutUnstableCreatePortal then
--       didWarnAboutUnstableCreatePortal = true
--       console.warn(
--         "The ReactDOM.unstable_createPortal() alias has been deprecated, " ..
--           "and will be removed in React 18+. Update your code to use " ..
--           "ReactDOM.createPortal() instead. It has the exact same API, " ..
--           "but without the \"unstable_\" prefix."
--       )
--     end
--   end
--   return createPortal(children, container, key)
-- end

local Internals = {
	-- Keep in sync with ReactTestUtils.js, and ReactTestUtilsAct.js.
	-- This is an array for better minification.
	Events = {
		getInstanceFromNode = getInstanceFromNode,
		getNodeFromInstance = getNodeFromInstance,
		getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNode,
		-- enqueueStateRestore = enqueueStateRestore,
		-- restoreStateIfNeeded = restoreStateIfNeeded,
		flushPassiveEffects = flushPassiveEffects,
		-- TODO: This is related to `act`, not events. Move to separate key?
		IsThisRendererActing = IsThisRendererActing,
	},
}

local exports = {
	createPortal = createPortal,
	unstable_batchedUpdates = batchedUpdates,
	-- flushSync = flushSync,
	__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals,
	version = ReactVersion,
	-- Disabled behind disableLegacyReactDOMAPIs
	-- findDOMNode = findDOMNode,
	-- hydrate = hydrate,
	-- render = render,
	-- unmountComponentAtNode = unmountComponentAtNode,
	-- exposeConcurrentModeAPIs
	createRoot = createRoot,
	createBlockingRoot = createBlockingRoot,
	createLegacyRoot = createLegacyRoot,
	-- unstable_flushControlled = flushControlled,
	-- unstable_scheduleHydration = scheduleHydration,
	-- Disabled behind disableUnstableRenderSubtreeIntoContainer
	-- unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer,
	-- Disabled behind disableUnstableCreatePortal
	-- Temporary alias since we already shipped React 16 RC with it.
	-- TODO: remove in React 18.
	-- unstable_createPortal = unstable_createPortal,
	-- enableCreateEventHandleAPI
	-- unstable_createEventHandle = createEventHandle,
	-- TODO: Remove this once callers migrate to alternatives.
	-- This should only be used by React internals.
	-- unstable_runWithPriority = runWithPriority,

	-- deviation: Export logic attached from Roact

	-- FIXME: Is there a better way to provide this? Exposing these here
	-- means that a large number of react components that wouldn't otherwise need
	-- to import `ReactRoblox` will need to do so in order to set events/change
	Event = Event,
	Change = Change,
	Tag = Tag,
	unstable_isNewReconciler = enableNewReconciler,

	-- deviation: Export `act` function for testing purposes; in
	-- production (a.k.a. scheduler isn't mocked), give an instructive error
	act = function(_: () -> ()): ()
		error(
			"ReactRoblox.act is only available in testing environments, not "
				.. "production. Enable the `__ROACT_17_MOCK_SCHEDULER__` global in your "
				.. "test configuration in order to use `act`."
		)
	end,
}

if _G.__ROACT_17_MOCK_SCHEDULER__ then
	-- deviation: When the __ROACT_17_MOCK_SCHEDULER__ is enabled, we
	-- re-export the `act` function from ReactReconciler. The global will
	-- additionally force the scheduler to use the mock interface
	exports.act = ReactReconciler.act
end

-- deviation: we don't currently implement the logic below that uses this
-- value
local _foundDevTools = injectIntoDevTools({
	findFiberByHostInstance = getClosestInstanceFromNode,
	bundleType = if _G.__DEV__ then 1 else 0,
	version = ReactVersion,
	rendererPackageName = "ReactRoblox",
})

if _G.__DEV__ then
	-- if not foundDevTools and canUseDOM and window.top == window.self then
	--   If we're in Chrome or Firefox, provide a download link if not installed.
	--   if
	--     (navigator.userAgent.indexOf('Chrome') > -1 and
	--       navigator.userAgent.indexOf('Edge') == -1) or
	--     navigator.userAgent.indexOf('Firefox') > -1
	--   )
	--     local protocol = window.location.protocol
	--     -- Don't warn in exotic cases like chrome-extension://.
	--     if /^(https?|file):$/.test(protocol))
	--       -- eslint-disable-next-line react-internal/no-production-logging
	--       console.info(
	--         '%cDownload the React DevTools ' +
	--           'for a better development experience: ' +
	--           'https://reactjs.org/link/react-devtools' +
	--           (protocol == 'file:'
	--             ? '\nYou might need to use a local HTTP server (instead of file://): ' +
	--               'https://reactjs.org/link/react-devtools-faq'
	--             : ''),
	--         'font-weight:bold',
	--       )
	--     end
	--   end
	-- end
end

return exports
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="400">
                <Properties>
                  <string name="Name">ReactRobloxComponent</string>
                  <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/8e5adfbd7e605bda9c5e96c10e015b3dc0df688e/packages/react-dom/src/client/ReactDOMComponent.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]

local Packages = script.Parent.Parent.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)
local Object = LuauPolyfill.Object

local RobloxComponentProps = require(script.Parent.roblox.RobloxComponentProps)

local ReactRobloxHostTypes = require(script.Parent["ReactRobloxHostTypes.roblox"])
type HostInstance = ReactRobloxHostTypes.HostInstance

-- deviation: Essentially a placeholder for dom-specific logic, taking the place
-- of ReactDOMComponent. Most of the logic will differ pretty dramatically

type Array<T> = { [number]: T }
type Object = { [any]: any }

local exports: { [string]: any } = {}

exports.setInitialProperties = RobloxComponentProps.setInitialProperties

-- Calculate the diff between the two objects.
local function diffProperties(
	domElement: HostInstance,
	tag: string,
	lastRawProps: Object,
	nextRawProps: Object,
	rootContainerElement: HostInstance
): (nil | Array<any>)
	-- if _G.__DEV__ then
	--   validatePropertiesInDevelopment(tag, nextRawProps)
	-- end

	-- FIXME: Type refinement
	-- local updatePayload: nil | Array<any> = nil
	local updatePayload = nil

	local lastProps = lastRawProps
	local nextProps = nextRawProps
	-- local lastProps: Object
	-- local nextProps: Object
	-- switch (tag) {
	--   case 'input':
	--     lastProps = ReactDOMInputGetHostProps(domElement, lastRawProps);
	--     nextProps = ReactDOMInputGetHostProps(domElement, nextRawProps);
	--     updatePayload = [];
	--     break;
	--   case 'option':
	--     lastProps = ReactDOMOptionGetHostProps(domElement, lastRawProps);
	--     nextProps = ReactDOMOptionGetHostProps(domElement, nextRawProps);
	--     updatePayload = [];
	--     break;
	--   case 'select':
	--     lastProps = ReactDOMSelectGetHostProps(domElement, lastRawProps);
	--     nextProps = ReactDOMSelectGetHostProps(domElement, nextRawProps);
	--     updatePayload = [];
	--     break;
	--   case 'textarea':
	--     lastProps = ReactDOMTextareaGetHostProps(domElement, lastRawProps);
	--     nextProps = ReactDOMTextareaGetHostProps(domElement, nextRawProps);
	--     updatePayload = [];
	--     break;
	--   default:
	--     lastProps = lastRawProps;
	--     nextProps = nextRawProps;
	--     if (
	--       typeof lastProps.onClick !== 'function' &&
	--       typeof nextProps.onClick === 'function'
	--     ) {
	--       // TODO: This cast may not be sound for SVG, MathML or custom elements.
	--       trapClickOnNonInteractiveElement(((domElement: any): HTMLElement));
	--     }
	--     break;
	-- }

	-- assertValidProps(tag, nextProps);

	-- let propKey;
	-- let styleName;
	-- let styleUpdates = null;
	for propKey, _ in lastProps do
		if nextProps[propKey] ~= nil then
			continue
		end
		-- if (propKey === STYLE) {
		--   const lastStyle = lastProps[propKey];
		--   for (styleName in lastStyle) {
		--     if (lastStyle.hasOwnProperty(styleName)) {
		--       if (!styleUpdates) {
		--         styleUpdates = {};
		--       }
		--       styleUpdates[styleName] = '';
		--     }
		--   }
		-- } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) {
		--   // Noop. This is handled by the clear text mechanism.
		-- } else if (
		--   propKey === SUPPRESS_CONTENT_EDITABLE_WARNING ||
		--   propKey === SUPPRESS_HYDRATION_WARNING
		-- ) {
		--   // Noop
		-- } else if (propKey === AUTOFOCUS) {
		--   // Noop. It doesn't work on updates anyway.
		-- } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
		--   // This is a special case. If any listener updates we need to ensure
		--   // that the "current" fiber pointer gets updated so we need a commit
		--   // to update this element.
		--   if (!updatePayload) {
		--     updatePayload = [];
		--   }
		-- } else {
		-- For all other deleted properties we add it to the queue. We use
		-- the allowed property list in the commit phase instead.
		-- performance: prealloc table size 2 for these 2 items at least
		updatePayload = updatePayload or table.create(2)
		table.insert(updatePayload, propKey)
		table.insert(updatePayload, Object.None)
		-- }
	end
	for propKey, nextProp in nextProps do
		local lastProp = if lastProps ~= nil then lastProps[propKey] else nil
		if nextProp == lastProp then
			continue
		end
		-- if (propKey === STYLE) {
		--   if (__DEV__) {
		--     if (nextProp) {
		--       // Freeze the next style object so that we can assume it won't be
		--       // mutated. We have already warned for this in the past.
		--       Object.freeze(nextProp);
		--     }
		--   }
		--   if (lastProp) {
		--     // Unset styles on `lastProp` but not on `nextProp`.
		--     for (styleName in lastProp) {
		--       if (
		--         lastProp.hasOwnProperty(styleName) &&
		--         (!nextProp || !nextProp.hasOwnProperty(styleName))
		--       ) {
		--         if (!styleUpdates) {
		--           styleUpdates = {};
		--         }
		--         styleUpdates[styleName] = '';
		--       }
		--     }
		--     // Update styles that changed since `lastProp`.
		--     for (styleName in nextProp) {
		--       if (
		--         nextProp.hasOwnProperty(styleName) &&
		--         lastProp[styleName] !== nextProp[styleName]
		--       ) {
		--         if (!styleUpdates) {
		--           styleUpdates = {};
		--         }
		--         styleUpdates[styleName] = nextProp[styleName];
		--       }
		--     }
		--   } else {
		--     // Relies on `updateStylesByID` not mutating `styleUpdates`.
		--     if (!styleUpdates) {
		--       if (!updatePayload) {
		--         updatePayload = [];
		--       }
		--       updatePayload.push(propKey, styleUpdates);
		--     }
		--     styleUpdates = nextProp;
		--   }
		-- } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
		--   const nextHtml = nextProp ? nextProp[HTML] : undefined;
		--   const lastHtml = lastProp ? lastProp[HTML] : undefined;
		--   if (nextHtml != null) {
		--     if (lastHtml !== nextHtml) {
		--       (updatePayload = updatePayload || []).push(propKey, nextHtml);
		--     }
		--   } else {
		--     // TODO: It might be too late to clear this if we have children
		--     // inserted already.
		--   }
		-- } else if (propKey === CHILDREN) {
		--   if (typeof nextProp === 'string' || typeof nextProp === 'number') {
		--     (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
		--   }
		-- } else if (
		--   propKey === SUPPRESS_CONTENT_EDITABLE_WARNING ||
		--   propKey === SUPPRESS_HYDRATION_WARNING
		-- ) {
		--   // Noop
		-- } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
		--   if (nextProp != null) {
		--     // We eagerly listen to this even though we haven't committed yet.
		--     if (__DEV__ && typeof nextProp !== 'function') {
		--       warnForInvalidEventListener(propKey, nextProp);
		--     }
		--     if (!enableEagerRootListeners) {
		--       ensureListeningTo(rootContainerElement, propKey, domElement);
		--     } else if (propKey === 'onScroll') {
		--       listenToNonDelegatedEvent('scroll', domElement);
		--     }
		--   }
		--   if (!updatePayload && lastProp !== nextProp) {
		--     // This is a special case. If any listener updates we need to ensure
		--     // that the "current" props pointer gets updated so we need a commit
		--     // to update this element.
		--     updatePayload = [];
		--   }
		-- } else if (
		--   typeof nextProp === 'object' &&
		--   nextProp !== null &&
		--   nextProp.$$typeof === REACT_OPAQUE_ID_TYPE
		-- ) {
		--   // If we encounter useOpaqueReference's opaque object, this means we are hydrating.
		--   // In this case, call the opaque object's toString function which generates a new client
		--   // ID so client and server IDs match and throws to rerender.
		--   nextProp.toString();
		-- } else {
		-- For any other property we always add it to the queue and then we
		-- filter it out using the allowed property list during the commit.
		-- performance: prealloc table size 2 for these 2 items at least
		-- performance TODO: don't create a table here, return multiple values!
		updatePayload = updatePayload or table.create(2)
		table.insert(updatePayload, propKey)
		table.insert(updatePayload, nextProp)
		-- }
	end
	-- if (styleUpdates) {
	--   if (__DEV__) {
	--     validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
	--   }
	--   (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
	-- }
	return updatePayload
end
exports.diffProperties = diffProperties
exports.updateProperties = RobloxComponentProps.updateProperties
exports.cleanupHostComponent = RobloxComponentProps.cleanupHostComponent

return exports
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="401">
                <Properties>
                  <string name="Name">ReactRobloxComponentTree</string>
                  <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/8e5adfbd7e605bda9c5e96c10e015b3dc0df688e/packages/react-dom/src/client/ReactDOMComponentTree.js
-- upstream: https://github.com/facebook/react/blob/efd8f6442d1aa7c4566fe812cba03e7e83aaccc3/packages/react-native-renderer/src/ReactNativeComponentTree.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]

local Packages = script.Parent.Parent.Parent

local ReactRobloxHostTypes = require(script.Parent["ReactRobloxHostTypes.roblox"])
type HostInstance = ReactRobloxHostTypes.HostInstance
type TextInstance = ReactRobloxHostTypes.TextInstance
type SuspenseInstance = ReactRobloxHostTypes.SuspenseInstance
type Container = ReactRobloxHostTypes.Container
type Props = ReactRobloxHostTypes.Props

local ReactInternalTypes = require(Packages.ReactReconciler)
type Fiber = ReactInternalTypes.Fiber
local Shared = require(Packages.Shared)
type ReactScopeInstance = Shared.ReactScopeInstance
-- local type {
--   ReactDOMEventHandle,
--   ReactDOMEventHandleListener,
-- } = require(Packages.../shared/ReactDOMTypes'
-- local type {
--   Container,
--   TextInstance,
--   Instance,
--   SuspenseInstance,
--   Props,
-- } = require(Packages../ReactDOMHostConfig'

local ReactWorkTags
local HostComponent
local HostText
local HostRoot
local SuspenseComponent

local getParentSuspenseInstance
local invariant = Shared.invariant
-- local {enableScopeAPI} = require(Packages.shared/ReactFeatureFlags'

local exports: { [any]: any } = {}

-- deviation: Use internal maps, since we can't set properties on Containers
-- (which are Instances). We might consider using the Attributes feature for
-- this when it releases
local containerToRoot: { [Container]: Fiber } = {}
local instanceToFiber: { [HostInstance | SuspenseInstance | ReactScopeInstance]: Fiber } = {}
local instanceToProps: { [HostInstance | SuspenseInstance]: Props } = {}

local randomKey = string.sub(tostring(math.random()), 3)
local internalInstanceKey = "__reactFiber$" .. randomKey
local internalContainerInstanceKey = "__reactContainer$" .. randomKey
-- local internalPropsKey = "__reactProps$" .. randomKey
-- local internalEventHandlersKey = '__reactEvents$' + randomKey
-- local internalEventHandlerListenersKey = '__reactListeners$' + randomKey
-- local internalEventHandlesSetKey = '__reactHandles$' + randomKey

exports.precacheFiberNode = function(hostInst: Fiber, node: HostInstance | SuspenseInstance | ReactScopeInstance)
	instanceToFiber[node] = hostInst
end

exports.uncacheFiberNode = function(node: HostInstance | SuspenseInstance | ReactScopeInstance)
	instanceToFiber[node] = nil
	instanceToProps[node] = nil
end

exports.markContainerAsRoot = function(hostRoot: Fiber, node: Container)
	-- deviation: Use our module-level map
	containerToRoot[node] = hostRoot
	-- node[internalContianerInstanceKey] = hostRoot
end

exports.unmarkContainerAsRoot = function(node: Container)
	-- deviation: Use our module-level map
	containerToRoot[node] = nil
	-- node[internalContainerInstanceKey] = nil
end

exports.isContainerMarkedAsRoot = function(node: Container): boolean
	-- deviation: Use our module-level map
	return not not containerToRoot[node]
	-- return not not node[internalContainerInstanceKey]
end

-- Given a Roblox node, return the closest HostComponent or HostText fiber ancestor.
-- If the target node is part of a hydrated or not yet rendered subtree, then
-- this may also return a SuspenseComponent or HostRoot to indicate that.
-- Conceptually the HostRoot fiber is a child of the Container node. So if you
-- pass the Container node as the targetNode, you will not actually get the
-- HostRoot back. To get to the HostRoot, you need to pass a child of it.
-- The same thing applies to Suspense boundaries.
-- TODO: This function is untested and may not work!
exports.getClosestInstanceFromNode = function(targetNode: Instance): Fiber?
	-- deviation: Use internal maps since we can't set properties on Containers
	local targetInst = instanceToFiber[targetNode]
	if targetInst then
		-- Don't return HostRoot or SuspenseComponent here.
		return targetInst
	end
	-- If the direct event target isn't a React owned DOM node, we need to look
	-- to see if one of its parents is a React owned DOM node.
	local parentNode = targetNode.Parent
	while parentNode do
		-- We'll check if this is a container root that could include
		-- React nodes in the future. We need to check this first because
		-- if we're a child of a dehydrated container, we need to first
		-- find that inner container before moving on to finding the parent
		-- instance. Note that we don't check this field on  the targetNode
		-- itself because the fibers are conceptually between the container
		-- node and the first child. It isn't surrounding the container node.
		-- If it's not a container, we check if it's an instance.
		targetInst = instanceToFiber[parentNode]
		if targetInst then
			-- Since this wasn't the direct target of the event, we might have
			-- stepped past dehydrated DOM nodes to get here. However they could
			-- also have been non-React nodes. We need to answer which one.
			-- If we the instance doesn't have any children, then there can't be
			-- a nested suspense boundary within it. So we can use this as a fast
			-- bailout. Most of the time, when people add non-React children to
			-- the tree, it is using a ref to a child-less DOM node.
			-- Normally we'd only need to check one of the fibers because if it
			-- has ever gone from having children to deleting them or vice versa
			-- it would have deleted the dehydrated boundary nested inside already.
			-- However, since the HostRoot starts out with an alternate it might
			-- have one on the alternate so we need to check in case this was a
			-- root.
			local alternate = targetInst.alternate
			if targetInst.child ~= nil or (alternate ~= nil and alternate.child ~= nil) then
				-- deviation: lazy initialize to work around circular dependency
				if getParentSuspenseInstance == nil then
					getParentSuspenseInstance = (require(script.Parent.ReactRobloxHostConfig) :: any).getParentSuspenseInstance
				end

				-- Next we need to figure out if the node that skipped past is
				-- nested within a dehydrated boundary and if so, which one.
				local suspenseInstance = getParentSuspenseInstance(targetNode)
				while suspenseInstance ~= nil do
					-- We found a suspense instance. That means that we haven't
					-- hydrated it yet. Even though we leave the comments in the
					-- DOM after hydrating, and there are boundaries in the DOM
					-- that could already be hydrated, we wouldn't have found them
					-- through this pass since if the target is hydrated it would
					-- have had an internalInstanceKey on it.
					-- Let's get the fiber associated with the SuspenseComponent
					-- as the deepest instance.
					local targetSuspenseInst = instanceToFiber[suspenseInstance]
					if targetSuspenseInst then
						return targetSuspenseInst
					end
					-- If we don't find a Fiber on the comment, it might be because
					-- we haven't gotten to hydrate it yet. There might still be a
					-- parent boundary that hasn't above this one so we need to find
					-- the outer most that is known.
					suspenseInstance = getParentSuspenseInstance(suspenseInstance)
					-- If we don't find one, then that should mean that the parent
					-- host component also hasn't hydrated yet. We can return it
					-- below since it will bail out on the isMounted check later.
				end
			end
			return targetInst
		end
		targetNode = parentNode
		parentNode = targetNode.Parent
	end
	return nil
end

--[[*
 * Given a Roblox node, return the Roblox Component
 * instance, or nil if the node was not rendered by this React.
 ]]
exports.getInstanceFromNode = function(node): Fiber?
	-- deviation: lazy initialize to avoid circular dependency
	if ReactWorkTags == nil then
		local ReactReconciler = require(script.Parent.Parent["ReactReconciler.roblox"]) :: any
		ReactWorkTags = ReactReconciler.ReactWorkTags

		HostComponent = ReactWorkTags.HostComponent
		HostText = ReactWorkTags.HostComponent
		HostRoot = ReactWorkTags.HostComponent
		SuspenseComponent = ReactWorkTags.HostComponent
	end

	local inst = (node :: any)[internalInstanceKey] or (node :: any)[internalContainerInstanceKey]
	if inst then
		if
			inst.tag == HostComponent
			or inst.tag == HostText
			or inst.tag == SuspenseComponent
			or inst.tag == HostRoot
		then
			return inst
		else
			return nil
		end
	end
	return nil
end

--[[*
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 ]]
exports.getNodeFromInstance = function(inst: Fiber): Instance | TextInstance
	if inst.tag == HostComponent or inst.tag == HostText then
		-- In Fiber this, is just the state node right now. We assume it will be
		-- a host component or host text.
		return inst.stateNode
	end

	-- Without this first invariant, passing a non-DOM-component triggers the next
	-- invariant for a missing parent, which is super confusing.
	invariant(false, "getNodeFromInstance: Invalid argument.")
	-- deviation: Luau analysis doesn't understand that invariant(false,...) is always-throw
	error("getNodeFromInstance: Invalid argument.")
end

exports.getFiberCurrentPropsFromNode = function(node: Instance | TextInstance | SuspenseInstance): Props
	return instanceToProps[node]
end

exports.updateFiberProps = function(node: Instance | SuspenseInstance, props: Props)
	instanceToProps[node] = props
end

-- exports.getEventListenerSet(node: EventTarget): Set<string> {
--   local elementListenerSet = (node: any)[internalEventHandlersKey]
--   if elementListenerSet == undefined)
--     elementListenerSet = (node: any)[internalEventHandlersKey] = new Set()
--   end
--   return elementListenerSet
-- end

-- exports.getFiberFromScopeInstance(
--   scope: ReactScopeInstance,
-- ): nil | Fiber {
--   if enableScopeAPI)
--     return (scope: any)[internalInstanceKey] or nil
--   end
--   return nil
-- end

-- exports.setEventHandlerListeners(
--   scope: EventTarget | ReactScopeInstance,
--   listeners: Set<ReactDOMEventHandleListener>,
-- ): void {
--   (scope: any)[internalEventHandlerListenersKey] = listeners
-- end

-- exports.getEventHandlerListeners(
--   scope: EventTarget | ReactScopeInstance,
-- ): nil | Set<ReactDOMEventHandleListener> {
--   return (scope: any)[internalEventHandlerListenersKey] or nil
-- end

-- exports.addEventHandleToTarget(
--   target: EventTarget | ReactScopeInstance,
--   eventHandle: ReactDOMEventHandle,
-- ): void {
--   local eventHandles = (target: any)[internalEventHandlesSetKey]
--   if eventHandles == undefined)
--     eventHandles = (target: any)[internalEventHandlesSetKey] = new Set()
--   end
--   eventHandles.add(eventHandle)
-- end

-- exports.doesTargetHaveEventHandle(
--   target: EventTarget | ReactScopeInstance,
--   eventHandle: ReactDOMEventHandle,
-- ): boolean {
--   local eventHandles = (target: any)[internalEventHandlesSetKey]
--   if eventHandles == undefined)
--     return false
--   end
--   return eventHandles.has(eventHandle)
-- end

return exports
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="402">
                <Properties>
                  <string name="Name">ReactRobloxHostConfig</string>
                  <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/8e5adfbd7e605bda9c5e96c10e015b3dc0df688e/packages/react-dom/src/client/ReactDOMHostConfig.js
-- upstream: https://github.com/facebook/react/blob/efd8f6442d1aa7c4566fe812cba03e7e83aaccc3/packages/react-native-renderer/src/ReactNativeHostConfig.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]
-- FIXME (roblox): remove this when our unimplemented
local function unimplemented(message: string)
	print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
	print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
	print("UNIMPLEMENTED ERROR: " .. tostring(message))
	error("FIXME (roblox): " .. message .. " is unimplemented", 2)
end

local CollectionService = game:GetService("CollectionService")
local Packages = script.Parent.Parent.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)
local inspect = LuauPolyfill.util.inspect
local console = require(Packages.Shared).console
local Object = LuauPolyfill.Object
local setTimeout = LuauPolyfill.setTimeout
local clearTimeout = LuauPolyfill.clearTimeout

-- local type {DOMEventName} = require(Packages.../events/DOMEventNames'
-- local type {Fiber, FiberRoot} = require(Packages.react-reconciler/src/ReactInternalTypes'
-- local type {
--   BoundingRect,
--   IntersectionObserverOptions,
--   ObserveVisibleRectsCallback,
-- } = require(Packages.react-reconciler/src/ReactTestSelectors'
local ReactRobloxHostTypes = require(script.Parent["ReactRobloxHostTypes.roblox"])
type RootType = ReactRobloxHostTypes.RootType
type Container = ReactRobloxHostTypes.Container
type HostInstance = ReactRobloxHostTypes.HostInstance
type SuspenseInstance = ReactRobloxHostTypes.SuspenseInstance
type TextInstance = ReactRobloxHostTypes.TextInstance
type Props = ReactRobloxHostTypes.Props
type Type = ReactRobloxHostTypes.Type
type HostContext = ReactRobloxHostTypes.HostContext

-- local type {ReactScopeInstance} = require(Packages.shared/ReactTypes'
-- local type {ReactDOMFundamentalComponentInstance} = require(Packages.../shared/ReactDOMTypes'

local ReactRobloxComponentTree = require(script.Parent.ReactRobloxComponentTree)
local precacheFiberNode = ReactRobloxComponentTree.precacheFiberNode
local uncacheFiberNode = ReactRobloxComponentTree.uncacheFiberNode
local updateFiberProps = ReactRobloxComponentTree.updateFiberProps
-- local getClosestInstanceFromNode = ReactRobloxComponentTree.getClosestInstanceFromNode
-- local getFiberFromScopeInstance = ReactRobloxComponentTree.getFiberFromScopeInstance
-- local getInstanceFromNodeDOMTree = ReactRobloxComponentTree.getInstanceFromNode
-- local isContainerMarkedAsRoot = ReactRobloxComponentTree.isContainerMarkedAsRoot

-- local {hasRole} = require(Packages../DOMAccessibilityRoles'
local ReactRobloxComponent = require(script.Parent.ReactRobloxComponent)
-- local createElement = ReactRobloxComponent.createElement
-- local createTextNode = ReactRobloxComponent.createTextNode
local setInitialProperties = ReactRobloxComponent.setInitialProperties
local diffProperties = ReactRobloxComponent.diffProperties
local updateProperties = ReactRobloxComponent.updateProperties
local cleanupHostComponent = ReactRobloxComponent.cleanupHostComponent
-- local diffHydratedProperties = ReactRobloxComponent.diffHydratedProperties
-- local diffHydratedText = ReactRobloxComponent.diffHydratedText
-- local trapClickOnNonInteractiveElement = ReactRobloxComponent.trapClickOnNonInteractiveElement
-- local warnForUnmatchedText = ReactRobloxComponent.warnForUnmatchedText
-- local warnForDeletedHydratableElement = ReactRobloxComponent.warnForDeletedHydratableElement
-- local warnForDeletedHydratableText = ReactRobloxComponent.warnForDeletedHydratableText
-- local warnForInsertedHydratedElement = ReactRobloxComponent.warnForInsertedHydratedElement
-- local warnForInsertedHydratedText = ReactRobloxComponent.warnForInsertedHydratedText
-- local {getSelectionInformation, restoreSelection} = require(Packages../ReactInputSelection'
-- local setTextContent = require(Packages../setTextContent'
-- local {validateDOMNesting, updatedAncestorInfo} = require(Packages../validateDOMNesting'
-- local {
--   isEnabled as ReactBrowserEventEmitterIsEnabled,
--   setEnabled as ReactBrowserEventEmitterSetEnabled,
-- } = require(Packages.../events/ReactDOMEventListener'
-- local {getChildNamespace} = require(Packages.../shared/DOMNamespaces'
-- local {
--   ELEMENT_NODE,
--   TEXT_NODE,
--   COMMENT_NODE,
--   DOCUMENT_NODE,
--   DOCUMENT_FRAGMENT_NODE,
-- } = require(Packages.../shared/HTMLNodeType'
-- local dangerousStyleValue = require(Packages.../shared/dangerousStyleValue'

-- local {REACT_OPAQUE_ID_TYPE} = require(Packages.shared/ReactSymbols'
-- local {retryIfBlockedOn} = require(Packages.../events/ReactDOMEventReplaying'

local ReactFeatureFlags = require(Packages.Shared).ReactFeatureFlags
-- local enableSuspenseServerRenderer = ReactFeatureFlags.enableSuspenseServerRenderer
-- local enableFundamentalAPI = ReactFeatureFlags.enableFundamentalAPI
local enableCreateEventHandleAPI = ReactFeatureFlags.enableCreateEventHandleAPI
-- local enableScopeAPI = ReactFeatureFlags.enableScopeAPI
-- local enableEagerRootListeners = ReactFeatureFlags.enableEagerRootListeners

-- local {HostComponent, HostText} = require(Packages.react-reconciler/src/ReactWorkTags'
-- local {
--   listenToReactEvent,
--   listenToAllSupportedEvents,
-- } = require(Packages.../events/DOMPluginEventSystem'

type Array<T> = { [number]: T }
type Object = { [any]: any }

-- deviation: Moved to ReactRobloxHostTypes
-- export type Type = string;
-- export type Props = {
--   autoFocus: boolean?,
--   children: any,
--   disabled: boolean?,
--   hidden: boolean?,
--   suppressHydrationWarning: boolean?,
--   dangerouslySetInnerHTML: any,
--   style: { display: string, [any]: any }?,
--   bottom: number?,
--   left: number?,
--   right: number?,
--   top: number?,
--   -- ...
--   [any]: any,
-- };
-- export type EventTargetChildElement = {
--   type: string,
--   props: nil | {
--     style?: {
--       position?: string,
--       zIndex?: number,
--       bottom?: string,
--       left?: string,
--       right?: string,
--       top?: string,
--       ...
--     },
--     ...
--   },
--   ...
-- end

-- deviation: Moved to ReactRobloxHostTypes
-- export type SuspenseInstance = Comment & {_reactRetry?: () => void, ...}
-- export type HydratableInstance = Instance | TextInstance | SuspenseInstance

-- deviation: Moved to ReactRobloxHostTypes
-- export type PublicInstance = Element | Text
-- type HostContextDev = {
--   namespace: string,
--   ancestorInfo: any,
--   -- ...
--   [any]: any,
-- }
-- type HostContextProd = string
-- export type HostContext = HostContextDev | HostContextProd

-- export type UpdatePayload = Array<mixed>
-- FIXME: cannot create type equal to void
-- export type ChildSet = void; -- Unused
-- export type TimeoutHandle = TimeoutID
-- export type NoTimeout = -1
-- export type RendererInspectionConfig = $ReadOnly<{or}>

-- export opaque type OpaqueIDType =
--   | string
--   | {
--       toString: () => string | void,
--       valueOf: () => string | void,
--     end

-- type SelectionInformation = {|
--   focusedElem: nil | HTMLElement,
--   selectionRange: mixed,
-- |}

-- local SUPPRESS_HYDRATION_WARNING
-- if __DEV__)
--   SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning'
-- end

-- local SUSPENSE_START_DATA = '$'
-- local SUSPENSE_END_DATA = '/$'
-- local SUSPENSE_PENDING_START_DATA = '$?'
-- local SUSPENSE_FALLBACK_START_DATA = '$!'

-- local STYLE = 'style'

-- local eventsEnabled: boolean? = nil
-- local selectionInformation: nil | SelectionInformation = nil

-- function shouldAutoFocusHostComponent(type: string, props: Props): boolean {
--   switch (type)
--     case 'button':
--     case 'input':
--     case 'select':
--     case 'textarea':
--       return !!props.autoFocus
--   end
--   return false
-- end

-- deviation: Use GetDescendants rather than recursion
local function recursivelyUncacheFiberNode(node: HostInstance)
	-- ROBLOX https://jira.rbx.com/browse/LUAFDN-713: Tables are somehow ending up
	-- in this function that expects Instances. In that case, we won't be able to
	-- iterate through its descendants.
	if typeof(node :: any) ~= "Instance" then
		return
	end

	uncacheFiberNode(node)

	for _, child in node:GetDescendants() do
		uncacheFiberNode(child)
	end
end

local exports: { [any]: any } = {}
Object.assign(exports, require(Packages.Shared).ReactFiberHostConfig.WithNoPersistence)

exports.getRootHostContext = function(rootContainerInstance: Container): HostContext
	-- deviation: This is a lot of HTML-DOM specific logic; I'm not clear on
	-- whether there'll be an equivalent of `namespaceURI` for our use cases, but
	-- we may want to provide other kinds of context for host objects.

	-- For now, as a guess, we'll return the kind of instance we're attached to
	return rootContainerInstance.ClassName

	-- local type
	-- local namespace
	-- local nodeType = rootContainerInstance.nodeType
	-- switch (nodeType)
	--   case DOCUMENT_NODE:
	--   case DOCUMENT_FRAGMENT_NODE: {
	--     type = nodeType == DOCUMENT_NODE ? '#document' : '#fragment'
	--     local root = (rootContainerInstance: any).documentElement
	--     namespace = root ? root.namespaceURI : getChildNamespace(null, '')
	--     break
	--   end
	--   default: {
	--     local container: any =
	--       nodeType == COMMENT_NODE
	--         ? rootContainerInstance.parentNode
	--         : rootContainerInstance
	--     local ownNamespace = container.namespaceURI or nil
	--     type = container.tagName
	--     namespace = getChildNamespace(ownNamespace, type)
	--     break
	--   end
	-- end
	-- if _G.__DEV__ then
	--   local validatedTag = type.toLowerCase()
	--   local ancestorInfo = updatedAncestorInfo(null, validatedTag)
	--   return {namespace, ancestorInfo}
	-- end
	-- return namespace
end

exports.getChildHostContext = function(
	parentHostContext: HostContext,
	type: string,
	rootContainerInstance: Container
): HostContext
	-- deviation: unclear on the purpose here just yet, might be fine to
	-- just return parent's hostContext for now
	return parentHostContext
	-- if _G.__DEV__ then
	--   local parentHostContextDev = ((parentHostContext: any): HostContextDev)
	--   local namespace = getChildNamespace(parentHostContextDev.namespace, type)
	--   local ancestorInfo = updatedAncestorInfo(
	--     parentHostContextDev.ancestorInfo,
	--     type,
	--   )
	--   return {namespace, ancestorInfo}
	-- end
	-- local parentNamespace = ((parentHostContext: any): HostContextProd)
	-- return getChildNamespace(parentNamespace, type)
end

exports.getPublicInstance = function(instance: Instance): any
	return instance
end

exports.prepareForCommit = function(containerInfo: Container): Object?
	-- eventsEnabled = ReactBrowserEventEmitterIsEnabled()
	-- selectionInformation = getSelectionInformation()
	local activeInstance = nil
	if enableCreateEventHandleAPI then
		unimplemented("enableCreateEventHandleAPI")
		--   local focusedElem = selectionInformation.focusedElem
		--   if focusedElem ~= nil then
		--     activeInstance = getClosestInstanceFromNode(focusedElem)
		--   end
	end
	-- ReactBrowserEventEmitterSetEnabled(false)
	return activeInstance
end

exports.beforeActiveInstanceBlur = function()
	if enableCreateEventHandleAPI then
		unimplemented("enableCreateEventHandleAPI")
		-- ReactBrowserEventEmitterSetEnabled(true)
		-- dispatchBeforeDetachedBlur((selectionInformation: any).focusedElem)
		-- ReactBrowserEventEmitterSetEnabled(false)
	end
end

exports.afterActiveInstanceBlur = function()
	if enableCreateEventHandleAPI then
		unimplemented("enableCreateEventHandleAPI")
		-- ReactBrowserEventEmitterSetEnabled(true)
		-- dispatchAfterDetachedBlur((selectionInformation: any).focusedElem)
		-- ReactBrowserEventEmitterSetEnabled(false)
	end
end

exports.resetAfterCommit = function(containerInfo: Container)
	-- warn("Skip unimplemented: resetAfterCommit")
	-- restoreSelection(selectionInformation)
	-- ReactBrowserEventEmitterSetEnabled(eventsEnabled)
	-- eventsEnabled = nil
	-- selectionInformation = nil
end

exports.createInstance = function(
	type_: string,
	props: Props,
	rootContainerInstance: Container,
	hostContext: HostContext,
	internalInstanceHandle: Object
): HostInstance
	-- local hostKey = virtualNode.hostKey

	local domElement = Instance.new(type_)
	-- deviation: compatibility with old Roact where instances have their name
	-- set to the key value
	if internalInstanceHandle.key then
		domElement.Name = internalInstanceHandle.key
	else
		local currentHandle = internalInstanceHandle.return_
		while currentHandle do
			if currentHandle.key then
				domElement.Name = currentHandle.key
				break
			end
			currentHandle = currentHandle.return_
		end
	end

	precacheFiberNode(internalInstanceHandle, domElement)
	updateFiberProps(domElement, props)

	-- TODO: Support refs (does that actually happen here, or later?)
	-- applyRef(element.props[Ref], instance)

	-- Will have to be managed outside of createInstance
	-- if virtualNode.eventManager ~= nil then
	--   virtualNode.eventManager:resume()
	-- end

	return domElement

	-- return Instance.new("Frame")
	-- local parentNamespace: string
	-- if __DEV__)
	--   -- TODO: take namespace into account when validating.
	--   local hostContextDev = ((hostContext: any): HostContextDev)
	--   validateDOMNesting(type, nil, hostContextDev.ancestorInfo)
	--   if
	--     typeof props.children == 'string' or
	--     typeof props.children == 'number'
	--   )
	--     local string = '' + props.children
	--     local ownAncestorInfo = updatedAncestorInfo(
	--       hostContextDev.ancestorInfo,
	--       type,
	--     )
	--     validateDOMNesting(null, string, ownAncestorInfo)
	--   end
	--   parentNamespace = hostContextDev.namespace
	-- } else {
	--   parentNamespace = ((hostContext: any): HostContextProd)
	-- end
	-- local domElement: Instance = createElement(
	--   type,
	--   props,
	--   rootContainerInstance,
	--   parentNamespace,
	-- )
end

exports.appendInitialChild = function(parentInstance: Instance, child: Instance)
	-- deviation: Establish hierarchy with Parent property
	child.Parent = parentInstance
end

exports.finalizeInitialChildren = function(
	domElement: HostInstance,
	type_: string,
	props: Props,
	rootContainerInstance: Container,
	hostContext: HostContext
): boolean
	setInitialProperties(domElement, type_, props, rootContainerInstance)
	return false
	-- return shouldAutoFocusHostComponent(type_, props)
end

local function prepareUpdate(
	domElement: Instance,
	type_: string,
	oldProps: Props,
	newProps: Props,
	rootContainerInstance: Container,
	hostContext: HostContext
): nil | Array<any>
	-- if _G.__DEV__ then
	--   local hostContextDev = ((hostContext: any): HostContextDev)
	--   if
	--     typeof newProps.children ~= typeof oldProps.children and
	--     (typeof newProps.children == 'string' or
	--       typeof newProps.children == 'number')
	--   )
	--     local string = '' + newProps.children
	--     local ownAncestorInfo = updatedAncestorInfo(
	--       hostContextDev.ancestorInfo,
	--       type,
	--     )
	--     validateDOMNesting(null, string, ownAncestorInfo)
	--   end
	-- end
	return diffProperties(domElement, type_, oldProps, newProps, rootContainerInstance)
end
exports.prepareUpdate = prepareUpdate

exports.shouldSetTextContent = function(_type: string, _props: Props): boolean
	-- deviation: Ignore TextInstance logic, which isn't applicable to Roblox
	return false
	--   return (
	--     type == 'textarea' or
	--     type == 'option' or
	--     type == 'noscript' or
	--     typeof props.children == 'string' or
	--     typeof props.children == 'number' or
	--     (typeof props.dangerouslySetInnerHTML == 'table’' and
	--       props.dangerouslySetInnerHTML ~= nil and
	--       props.dangerouslySetInnerHTML.__html ~= nil)
	--   )
end

-- deviation: Text nodes aren't supported in Roblox renderer, so error so that tests fail immediately
exports.createTextInstance = function(
	text: string,
	rootContainerInstance: Container,
	hostContext: HostContext,
	internalInstanceHandle: Object
): any
	unimplemented("createTextInstance")
	return nil
end

exports.isPrimaryRenderer = true
exports.warnsIfNotActing = true
-- This initialization code may run even on server environments
-- if a component just imports ReactDOM (e.g. for findDOMNode).
-- Some environments might not have setTimeout or clearTimeout.
-- deviation: We're only dealing with client right now, so these always populate
exports.scheduleTimeout = setTimeout
exports.cancelTimeout = clearTimeout
exports.noTimeout = -1

-- -------------------
--     Mutation
-- -------------------

exports.supportsMutation = true

exports.commitMount = function(domElement: Instance, type: string, newProps: Props, internalInstanceHandle: Object)
	unimplemented("commitMount")
	-- -- Despite the naming that might imply otherwise, this method only
	-- -- fires if there is an `Update` effect scheduled during mounting.
	-- -- This happens if `finalizeInitialChildren` returns `true` (which it
	-- -- does to implement the `autoFocus` attribute on the client). But
	-- -- there are also other cases when this might happen (such as patching
	-- -- up text content during hydration mismatch). So we'll check this again.
	-- if shouldAutoFocusHostComponent(type, newProps))
	--   ((domElement: any):
	--     | HTMLButtonElement
	--     | HTMLInputElement
	--     | HTMLSelectElement
	--     | HTMLTextAreaElement).focus()
	-- end
end

exports.commitUpdate = function(
	domElement: Instance,
	updatePayload: Array<any>,
	type_: string,
	oldProps: Props,
	newProps: Props,
	internalInstanceHandle: Object
)
	-- Update the props handle so that we know which props are the ones with
	-- with current event handlers.
	updateFiberProps(domElement, newProps)
	-- Apply the diff to the DOM node.
	updateProperties(domElement, updatePayload, oldProps)
end

-- deviation: Ignore TextInstance logic, which isn't applicable to Roblox
-- exports.resetTextContent(domElement: Instance): void {
--   setTextContent(domElement, '')
-- end

-- deviation: Ignore TextInstance logic, which isn't applicable to Roblox
-- exports.commitTextUpdate(
--   textInstance: TextInstance,
--   oldText: string,
--   newText: string,
-- ): void {
--   textInstance.nodeValue = newText
-- end

local function checkTags(instance: Instance)
	if typeof(instance :: any) ~= "Instance" then
		console.warn("Could not check tags on non-instance %s.", inspect(instance))
		return
	end
	if not instance:IsDescendantOf(game) then
		if #CollectionService:GetTags(instance) > 0 then
			console.warn(
				'Tags applied to orphaned %s "%s" cannot be accessed via'
					.. " CollectionService:GetTagged. If you're relying on tag"
					.. " behavior in a unit test, consider mounting your test "
					.. "root into the DataModel.",
				instance.ClassName,
				instance.Name
			)
		end
	end
end

exports.appendChild = function(parentInstance: Instance, child: Instance)
	-- deviation: Roblox's DOM is based on child->parent references
	child.Parent = parentInstance
	-- parentInstance.appendChild(child)
	if _G.__DEV__ then
		checkTags(child)
	end
end

exports.appendChildToContainer = function(container: Container, child: Instance)
	-- TODO: Some of this logic may come back; for now, keep it simple
	local parentNode = container
	exports.appendChild(parentNode, child)

	-- if container.nodeType == COMMENT_NODE)
	--   parentNode = (container.parentNode: any)
	--   parentNode.insertBefore(child, container)
	-- } else {
	--   parentNode = container
	--   parentNode.appendChild(child)
	-- end
	-- -- This container might be used for a portal.
	-- -- If something inside a portal is clicked, that click should bubble
	-- -- through the React tree. However, on Mobile Safari the click would
	-- -- never bubble through the *DOM* tree unless an ancestor with onclick
	-- -- event exists. So we wouldn't see it and dispatch it.
	-- -- This is why we ensure that non React root containers have inline onclick
	-- -- defined.
	-- -- https://github.com/facebook/react/issues/11918
	-- local reactRootContainer = container._reactRootContainer
	-- if
	--   reactRootContainer == nil and parentNode.onclick == nil
	-- then
	--   -- TODO: This cast may not be sound for SVG, MathML or custom elements.
	--   trapClickOnNonInteractiveElement(((parentNode: any): HTMLElement))
	-- end
end

exports.insertBefore = function(parentInstance: Instance, child: Instance, _beforeChild: Instance)
	-- deviation: Roblox's DOM is based on child->parent references
	child.Parent = parentInstance
	-- parentInstance.insertBefore(child, beforeChild)
	if _G.__DEV__ then
		checkTags(child)
	end
end

exports.insertInContainerBefore = function(container: Container, child: Instance, beforeChild: Instance)
	-- deviation: use our container definition
	local parentNode = container
	exports.insertBefore(parentNode, child, beforeChild)
	-- if container.nodeType == COMMENT_NODE)
	--   (container.parentNode: any).insertBefore(child, beforeChild)
	-- } else {
	--   container.insertBefore(child, beforeChild)
	-- end
end

-- function createEvent(type: DOMEventName, bubbles: boolean): Event {
--   local event = document.createEvent('Event')
--   event.initEvent(((type: any): string), bubbles, false)
--   return event
-- end

-- function dispatchBeforeDetachedBlur(target: HTMLElement): void {
--   if enableCreateEventHandleAPI)
--     local event = createEvent('beforeblur', true)
--     -- Dispatch "beforeblur" directly on the target,
--     -- so it gets picked up by the event system and
--     -- can propagate through the React internal tree.
--     target.dispatchEvent(event)
--   end
-- end

-- function dispatchAfterDetachedBlur(target: HTMLElement): void {
--   if enableCreateEventHandleAPI)
--     local event = createEvent('afterblur', false)
--     -- So we know what was detached, make the relatedTarget the
--     -- detached target on the "afterblur" event.
--     (event: any).relatedTarget = target
--     -- Dispatch the event on the document.
--     document.dispatchEvent(event)
--   end
-- end

exports.removeChild = function(_parentInstance: Instance, child: Instance)
	recursivelyUncacheFiberNode(child)
	-- deviation: The roblox renderer tracks bindings and event managers
	-- for instances, so make sure we clean those up when we remove the instance
	cleanupHostComponent(child)
	-- deviation: Roblox's DOM is based on child->parent references
	child.Parent = nil
	-- parentInstance.removeChild(child)
	-- deviation: Guard against misuse by locking parent and forcing external cleanup via Destroy
	child:Destroy()
end

exports.removeChildFromContainer = function(_container: Container, child: Instance)
	-- deviation: Containers don't have special behavior and comment nodes
	-- have no datamodel equivalent, so just forward to the removeChild logic
	exports.removeChild(_container, child)
	-- if container.nodeType == COMMENT_NODE)
	--   (container.parentNode: any).removeChild(child)
	-- } else {
	--   container.removeChild(child)
	-- end
end

exports.clearSuspenseBoundary = function(parentInstance: Instance, suspenseInstance: SuspenseInstance)
	-- FIXME: this is a major thing we need to fix for Suspense to work as a feature
	unimplemented("clearSuspenseBoundary")
	--   local node = suspenseInstance
	--   -- Delete all nodes within this suspense boundary.
	--   -- There might be nested nodes so we need to keep track of how
	--   -- deep we are and only break out when we're back on top.
	--   local depth = 0
	--   do {
	--     local nextNode = node.nextSibling
	--     parentInstance.removeChild(node)
	--     if nextNode and nextNode.nodeType == COMMENT_NODE)
	--       local data = ((nextNode: any).data: string)
	--       if data == SUSPENSE_END_DATA)
	--         if depth == 0)
	--           parentInstance.removeChild(nextNode)
	--           -- Retry if any event replaying was blocked on this.
	--           retryIfBlockedOn(suspenseInstance)
	--           return
	--         } else {
	--           depth--
	--         end
	--       } else if
	--         data == SUSPENSE_START_DATA or
	--         data == SUSPENSE_PENDING_START_DATA or
	--         data == SUSPENSE_FALLBACK_START_DATA
	--       )
	--         depth++
	--       end
	--     end
	--     node = nextNode
	--   } while (node)
	--   -- TODO: Warn, we didn't find the end comment boundary.
	--   -- Retry if any event replaying was blocked on this.
	--   retryIfBlockedOn(suspenseInstance)
end

exports.clearSuspenseBoundaryFromContainer = function(container: Container, suspenseInstance: SuspenseInstance)
	-- FIXME: this is a major thing we need to fix for Suspense to work as a feature
	unimplemented("clearSuspenseBoundaryFromContainer")
	--   if container.nodeType == COMMENT_NODE)
	--     clearSuspenseBoundary((container.parentNode: any), suspenseInstance)
	--   } else if container.nodeType == ELEMENT_NODE)
	--     clearSuspenseBoundary((container: any), suspenseInstance)
	--   } else {
	--     -- Document nodes should never contain suspense boundaries.
	--   end
	--   -- Retry if any event replaying was blocked on this.
	--   retryIfBlockedOn(container)
end

exports.hideInstance = function(instance: Instance)
	unimplemented("hideInstance")
	-- -- TODO: Does this work for all element types? What about MathML? Should we
	-- -- pass host context to this method?
	-- instance = ((instance: any): HTMLElement)
	-- local style = instance.style
	-- if typeof style.setProperty == 'function')
	--   style.setProperty('display', 'none', 'important')
	-- } else {
	--   style.display = 'none'
	-- end
end

-- deviation: error on TextInstance logic, which isn't applicable to Roblox
exports.hideTextInstance = function(textInstance: TextInstance): ()
	unimplemented("hideTextInstance")
	--   textInstance.nodeValue = ''
end

exports.unhideInstance = function(instance: Instance, props: Props)
	unimplemented("unhideInstance")
	-- instance = ((instance: any): HTMLElement)
	-- local styleProp = props[STYLE]
	-- local display =
	--   styleProp ~= undefined and
	--   styleProp ~= nil and
	--   styleProp.hasOwnProperty('display')
	--     ? styleProp.display
	--     : nil
	-- instance.style.display = dangerousStyleValue('display', display)
end

-- deviation: error on TextInstance logic, which isn't applicable to Roblox
exports.unhideTextInstance = function(textInstance: TextInstance, text: string): ()
	unimplemented("unhideTextInstance")
	--   textInstance.nodeValue = text
end

exports.clearContainer = function(container: Container)
	-- deviation: with Roblox, we can simply enumerate and remove the children
	local parentInstance = container
	for _, child in parentInstance:GetChildren() do
		exports.removeChild(parentInstance, child)
	end
	-- if container.nodeType == ELEMENT_NODE)
	--   ((container: any): Element).textContent = ''
	-- } else if container.nodeType == DOCUMENT_NODE)
	--   local body = ((container: any): Document).body
	--   if body ~= nil)
	--     body.textContent = ''
	--   end
	-- end
end

-- -- -------------------
-- --     Hydration
-- -- -------------------

-- export local supportsHydration = true

-- exports.canHydrateInstance(
--   instance: HydratableInstance,
--   type: string,
--   props: Props,
-- ): nil | Instance {
--   if
--     instance.nodeType ~= ELEMENT_NODE or
--     type.toLowerCase() ~= instance.nodeName.toLowerCase()
--   )
--     return nil
--   end
--   -- This has now been refined to an element node.
--   return ((instance: any): Instance)
-- end

-- exports.canHydrateTextInstance(
--   instance: HydratableInstance,
--   text: string,
-- ): nil | TextInstance {
--   if text == '' or instance.nodeType ~= TEXT_NODE)
--     -- Empty strings are not parsed by HTML so there won't be a correct match here.
--     return nil
--   end
--   -- This has now been refined to a text node.
--   return ((instance: any): TextInstance)
-- end

-- exports.canHydrateSuspenseInstance(
--   instance: HydratableInstance,
-- ): nil | SuspenseInstance {
--   if instance.nodeType ~= COMMENT_NODE)
--     -- Empty strings are not parsed by HTML so there won't be a correct match here.
--     return nil
--   end
--   -- This has now been refined to a suspense node.
--   return ((instance: any): SuspenseInstance)
-- end

-- exports.isSuspenseInstanceFallback(instance: SuspenseInstance)
--   return instance.data == SUSPENSE_FALLBACK_START_DATA
-- end

-- exports.registerSuspenseInstanceRetry(
--   instance: SuspenseInstance,
--   callback: () => void,
-- )
--   instance._reactRetry = callback
-- end

-- function getNextHydratable(node)
--   -- Skip non-hydratable nodes.
--   for (; node ~= nil; node = node.nextSibling)
--     local nodeType = node.nodeType
--     if nodeType == ELEMENT_NODE or nodeType == TEXT_NODE)
--       break
--     end
--     if enableSuspenseServerRenderer)
--       if nodeType == COMMENT_NODE)
--         local nodeData = (node: any).data
--         if
--           nodeData == SUSPENSE_START_DATA or
--           nodeData == SUSPENSE_FALLBACK_START_DATA or
--           nodeData == SUSPENSE_PENDING_START_DATA
--         )
--           break
--         end
--       end
--     end
--   end
--   return (node: any)
-- end

-- exports.getNextHydratableSibling(
--   instance: HydratableInstance,
-- ): nil | HydratableInstance {
--   return getNextHydratable(instance.nextSibling)
-- end

-- exports.getFirstHydratableChild(
--   parentInstance: Container | Instance,
-- ): nil | HydratableInstance {
--   return getNextHydratable(parentInstance.firstChild)
-- end

-- exports.hydrateInstance(
--   instance: Instance,
--   type: string,
--   props: Props,
--   rootContainerInstance: Container,
--   hostContext: HostContext,
--   internalInstanceHandle: Object,
-- ): nil | Array<mixed> {
--   precacheFiberNode(internalInstanceHandle, instance)
--   -- TODO: Possibly defer this until the commit phase where all the events
--   -- get attached.
--   updateFiberProps(instance, props)
--   local parentNamespace: string
--   if __DEV__)
--     local hostContextDev = ((hostContext: any): HostContextDev)
--     parentNamespace = hostContextDev.namespace
--   } else {
--     parentNamespace = ((hostContext: any): HostContextProd)
--   end
--   return diffHydratedProperties(
--     instance,
--     type,
--     props,
--     parentNamespace,
--     rootContainerInstance,
--   )
-- end

-- exports.hydrateTextInstance(
--   textInstance: TextInstance,
--   text: string,
--   internalInstanceHandle: Object,
-- ): boolean {
--   precacheFiberNode(internalInstanceHandle, textInstance)
--   return diffHydratedText(textInstance, text)
-- end

-- exports.hydrateSuspenseInstance(
--   suspenseInstance: SuspenseInstance,
--   internalInstanceHandle: Object,
-- )
--   precacheFiberNode(internalInstanceHandle, suspenseInstance)
-- end

-- exports.getNextHydratableInstanceAfterSuspenseInstance(
--   suspenseInstance: SuspenseInstance,
-- ): nil | HydratableInstance {
--   local node = suspenseInstance.nextSibling
--   -- Skip past all nodes within this suspense boundary.
--   -- There might be nested nodes so we need to keep track of how
--   -- deep we are and only break out when we're back on top.
--   local depth = 0
--   while (node)
--     if node.nodeType == COMMENT_NODE)
--       local data = ((node: any).data: string)
--       if data == SUSPENSE_END_DATA)
--         if depth == 0)
--           return getNextHydratableSibling((node: any))
--         } else {
--           depth--
--         end
--       } else if
--         data == SUSPENSE_START_DATA or
--         data == SUSPENSE_FALLBACK_START_DATA or
--         data == SUSPENSE_PENDING_START_DATA
--       )
--         depth++
--       end
--     end
--     node = node.nextSibling
--   end
--   -- TODO: Warn, we didn't find the end comment boundary.
--   return nil
-- end

-- -- Returns the SuspenseInstance if this node is a direct child of a
-- -- SuspenseInstance. I.e. if its previous sibling is a Comment with
-- -- SUSPENSE_x_START_DATA. Otherwise, nil.
-- exports.getParentSuspenseInstance(
--   targetInstance: Node,
-- ): nil | SuspenseInstance {
--   local node = targetInstance.previousSibling
--   -- Skip past all nodes within this suspense boundary.
--   -- There might be nested nodes so we need to keep track of how
--   -- deep we are and only break out when we're back on top.
--   local depth = 0
--   while (node)
--     if node.nodeType == COMMENT_NODE)
--       local data = ((node: any).data: string)
--       if
--         data == SUSPENSE_START_DATA or
--         data == SUSPENSE_FALLBACK_START_DATA or
--         data == SUSPENSE_PENDING_START_DATA
--       )
--         if depth == 0)
--           return ((node: any): SuspenseInstance)
--         } else {
--           depth--
--         end
--       } else if data == SUSPENSE_END_DATA)
--         depth++
--       end
--     end
--     node = node.previousSibling
--   end
--   return nil
-- end

-- exports.commitHydratedContainer(container: Container): void {
--   -- Retry if any event replaying was blocked on this.
--   retryIfBlockedOn(container)
-- end

-- exports.commitHydratedSuspenseInstance(
--   suspenseInstance: SuspenseInstance,
-- ): void {
--   -- Retry if any event replaying was blocked on this.
--   retryIfBlockedOn(suspenseInstance)
-- end

-- exports.didNotMatchHydratedContainerTextInstance(
--   parentContainer: Container,
--   textInstance: TextInstance,
--   text: string,
-- )
--   if __DEV__)
--     warnForUnmatchedText(textInstance, text)
--   end
-- end

-- exports.didNotMatchHydratedTextInstance(
--   parentType: string,
--   parentProps: Props,
--   parentInstance: Instance,
--   textInstance: TextInstance,
--   text: string,
-- )
--   if __DEV__ and parentProps[SUPPRESS_HYDRATION_WARNING] ~= true)
--     warnForUnmatchedText(textInstance, text)
--   end
-- end

-- exports.didNotHydrateContainerInstance(
--   parentContainer: Container,
--   instance: HydratableInstance,
-- )
--   if __DEV__)
--     if instance.nodeType == ELEMENT_NODE)
--       warnForDeletedHydratableElement(parentContainer, (instance: any))
--     } else if instance.nodeType == COMMENT_NODE)
--       -- TODO: warnForDeletedHydratableSuspenseBoundary
--     } else {
--       warnForDeletedHydratableText(parentContainer, (instance: any))
--     end
--   end
-- end

-- exports.didNotHydrateInstance(
--   parentType: string,
--   parentProps: Props,
--   parentInstance: Instance,
--   instance: HydratableInstance,
-- )
--   if __DEV__ and parentProps[SUPPRESS_HYDRATION_WARNING] ~= true)
--     if instance.nodeType == ELEMENT_NODE)
--       warnForDeletedHydratableElement(parentInstance, (instance: any))
--     } else if instance.nodeType == COMMENT_NODE)
--       -- TODO: warnForDeletedHydratableSuspenseBoundary
--     } else {
--       warnForDeletedHydratableText(parentInstance, (instance: any))
--     end
--   end
-- end

-- exports.didNotFindHydratableContainerInstance(
--   parentContainer: Container,
--   type: string,
--   props: Props,
-- )
--   if __DEV__)
--     warnForInsertedHydratedElement(parentContainer, type, props)
--   end
-- end

-- exports.didNotFindHydratableContainerTextInstance(
--   parentContainer: Container,
--   text: string,
-- )
--   if __DEV__)
--     warnForInsertedHydratedText(parentContainer, text)
--   end
-- end

-- exports.didNotFindHydratableContainerSuspenseInstance(
--   parentContainer: Container,
-- )
--   if __DEV__)
--     -- TODO: warnForInsertedHydratedSuspense(parentContainer)
--   end
-- end

-- exports.didNotFindHydratableInstance(
--   parentType: string,
--   parentProps: Props,
--   parentInstance: Instance,
--   type: string,
--   props: Props,
-- )
--   if __DEV__ and parentProps[SUPPRESS_HYDRATION_WARNING] ~= true)
--     warnForInsertedHydratedElement(parentInstance, type, props)
--   end
-- end

-- exports.didNotFindHydratableTextInstance(
--   parentType: string,
--   parentProps: Props,
--   parentInstance: Instance,
--   text: string,
-- )
--   if __DEV__ and parentProps[SUPPRESS_HYDRATION_WARNING] ~= true)
--     warnForInsertedHydratedText(parentInstance, text)
--   end
-- end

-- exports.didNotFindHydratableSuspenseInstance(
--   parentType: string,
--   parentProps: Props,
--   parentInstance: Instance,
-- )
--   if __DEV__ and parentProps[SUPPRESS_HYDRATION_WARNING] ~= true)
--     -- TODO: warnForInsertedHydratedSuspense(parentInstance)
--   end
-- end

-- exports.getFundamentalComponentInstance(
--   fundamentalInstance: ReactDOMFundamentalComponentInstance,
-- ): Instance {
--   if enableFundamentalAPI)
--     local {currentFiber, impl, props, state} = fundamentalInstance
--     local instance = impl.getInstance(null, props, state)
--     precacheFiberNode(currentFiber, instance)
--     return instance
--   end
--   -- Because of the flag above, this gets around the Flow error
--   return (null: any)
-- end

-- exports.mountFundamentalComponent(
--   fundamentalInstance: ReactDOMFundamentalComponentInstance,
-- ): void {
--   if enableFundamentalAPI)
--     local {impl, instance, props, state} = fundamentalInstance
--     local onMount = impl.onMount
--     if onMount ~= undefined)
--       onMount(null, instance, props, state)
--     end
--   end
-- end

-- exports.shouldUpdateFundamentalComponent(
--   fundamentalInstance: ReactDOMFundamentalComponentInstance,
-- ): boolean {
--   if enableFundamentalAPI)
--     local {impl, prevProps, props, state} = fundamentalInstance
--     local shouldUpdate = impl.shouldUpdate
--     if shouldUpdate ~= undefined)
--       return shouldUpdate(null, prevProps, props, state)
--     end
--   end
--   return true
-- end

-- exports.updateFundamentalComponent(
--   fundamentalInstance: ReactDOMFundamentalComponentInstance,
-- ): void {
--   if enableFundamentalAPI)
--     local {impl, instance, prevProps, props, state} = fundamentalInstance
--     local onUpdate = impl.onUpdate
--     if onUpdate ~= undefined)
--       onUpdate(null, instance, prevProps, props, state)
--     end
--   end
-- end

-- exports.unmountFundamentalComponent(
--   fundamentalInstance: ReactDOMFundamentalComponentInstance,
-- ): void {
--   if enableFundamentalAPI)
--     local {impl, instance, props, state} = fundamentalInstance
--     local onUnmount = impl.onUnmount
--     if onUnmount ~= undefined)
--       onUnmount(null, instance, props, state)
--     end
--   end
-- end

-- exports.getInstanceFromNode(node: HTMLElement): nil | Object {
--   return getClosestInstanceFromNode(node) or nil
-- end

-- local clientId: number = 0
-- exports.makeClientId(): OpaqueIDType {
--   return 'r:' + (clientId++).toString(36)
-- end

-- exports.makeClientIdInDEV(warnOnAccessInDEV: () => void): OpaqueIDType {
--   local id = 'r:' + (clientId++).toString(36)
--   return {
--     toString()
--       warnOnAccessInDEV()
--       return id
--     },
--     valueOf()
--       warnOnAccessInDEV()
--       return id
--     },
--   end
-- end

-- exports.isOpaqueHydratingObject(value: mixed): boolean {
--   return (
--     value ~= nil and
--     typeof value == 'table’' and
--     value.$$typeof == REACT_OPAQUE_ID_TYPE
--   )
-- end

-- exports.makeOpaqueHydratingObject(
--   attemptToReadValue: () => void,
-- ): OpaqueIDType {
--   return {
--     $$typeof: REACT_OPAQUE_ID_TYPE,
--     toString: attemptToReadValue,
--     valueOf: attemptToReadValue,
--   end
-- end

exports.preparePortalMount = function(portalInstance: Instance): ()
	-- TODO: Revisit this logic and see if any of it applies
	-- if enableEagerRootListeners then
	--   listenToAllSupportedEvents(portalInstance)
	-- else
	--   listenToReactEvent('onMouseEnter', portalInstance)
	-- end
end

-- exports.prepareScopeUpdate(
--   scopeInstance: ReactScopeInstance,
--   internalInstanceHandle: Object,
-- ): void {
--   if enableScopeAPI)
--     precacheFiberNode(internalInstanceHandle, scopeInstance)
--   end
-- end

-- exports.getInstanceFromScope(
--   scopeInstance: ReactScopeInstance,
-- ): nil | Object {
--   if enableScopeAPI)
--     return getFiberFromScopeInstance(scopeInstance)
--   end
--   return nil
-- end

-- export local supportsTestSelectors = true

-- exports.findFiberRoot(node: Instance): nil | FiberRoot {
--   local stack = [node]
--   local index = 0
--   while (index < stack.length)
--     local current = stack[index++]
--     if isContainerMarkedAsRoot(current))
--       return ((getInstanceFromNodeDOMTree(current): any): FiberRoot)
--     end
--     stack.push(...current.children)
--   end
--   return nil
-- end

-- exports.getBoundingRect(node: Instance): BoundingRect {
--   local rect = node.getBoundingClientRect()
--   return {
--     x: rect.left,
--     y: rect.top,
--     width: rect.width,
--     height: rect.height,
--   end
-- end

-- exports.matchAccessibilityRole(node: Instance, role: string): boolean {
--   if hasRole(node, role))
--     return true
--   end

--   return false
-- end

-- exports.getTextContent(fiber: Fiber): string | nil {
--   switch (fiber.tag)
--     case HostComponent:
--       local textContent = ''
--       local childNodes = fiber.stateNode.childNodes
--       for (local i = 0; i < childNodes.length; i++)
--         local childNode = childNodes[i]
--         if childNode.nodeType == Node.TEXT_NODE)
--           textContent += childNode.textContent
--         end
--       end
--       return textContent
--     case HostText:
--       return fiber.stateNode.textContent
--   end

--   return nil
-- end

-- exports.isHiddenSubtree(fiber: Fiber): boolean {
--   return fiber.tag == HostComponent and fiber.memoizedProps.hidden == true
-- end

-- exports.setFocusIfFocusable(node: Instance): boolean {
--   -- The logic for determining if an element is focusable is kind of complex,
--   -- and since we want to actually change focus anyway- we can just skip it.
--   -- Instead we'll just listen for a "focus" event to verify that focus was set.
--   --
--   -- We could compare the node to document.activeElement after focus,
--   -- but this would not handle the case where application code managed focus to automatically blur.
--   local didFocus = false
--   local handleFocus = () => {
--     didFocus = true
--   end

--   local element = ((node: any): HTMLElement)
--   try {
--     element.addEventListener('focus', handleFocus)
--     (element.focus or HTMLElement.prototype.focus).call(element)
--   } finally {
--     element.removeEventListener('focus', handleFocus)
--   end

--   return didFocus
-- end

-- type RectRatio = {
--   ratio: number,
--   rect: BoundingRect,
-- end

-- exports.setupIntersectionObserver(
--   targets: Array<Instance>,
--   callback: ObserveVisibleRectsCallback,
--   options?: IntersectionObserverOptions,
-- ): {|
--   disconnect: () => void,
--   observe: (instance: Instance) => void,
--   unobserve: (instance: Instance) => void,
-- |} {
--   local rectRatioCache: Map<Instance, RectRatio> = new Map()
--   targets.forEach(target => {
--     rectRatioCache.set(target, {
--       rect: getBoundingRect(target),
--       ratio: 0,
--     })
--   })

--   local handleIntersection = (entries: Array<IntersectionObserverEntry>) => {
--     entries.forEach(entry => {
--       local {boundingClientRect, intersectionRatio, target} = entry
--       rectRatioCache.set(target, {
--         rect: {
--           x: boundingClientRect.left,
--           y: boundingClientRect.top,
--           width: boundingClientRect.width,
--           height: boundingClientRect.height,
--         },
--         ratio: intersectionRatio,
--       })
--     })

--     callback(Array.from(rectRatioCache.values()))
--   end

--   local observer = new IntersectionObserver(handleIntersection, options)
--   targets.forEach(target => {
--     observer.observe((target: any))
--   })

--   return {
--     disconnect: () => observer.disconnect(),
--     observe: target => {
--       rectRatioCache.set(target, {
--         rect: getBoundingRect(target),
--         ratio: 0,
--       })
--       observer.observe((target: any))
--     },
--     unobserve: target => {
--       rectRatioCache.delete(target)
--       observer.unobserve((target: any))
--     },
--   end
-- end

return exports
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="403">
                <Properties>
                  <string name="Name">ReactRobloxHostTypes.roblox</string>
                  <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/8e5adfbd7e605bda9c5e96c10e015b3dc0df688e/packages/react-dom/src/client/ReactDOMHostConfig.js
-- upstream: https://github.com/facebook/react/blob/efd8f6442d1aa7c4566fe812cba03e7e83aaccc3/packages/react-native-renderer/src/ReactNativeHostConfig.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]
local Packages = script.Parent.Parent.Parent

local ReactReconciler = require(Packages.ReactReconciler)
type FiberRoot = ReactReconciler.FiberRoot

local ReactTypes = require(Packages.Shared)
type MutableSource<T> = ReactTypes.MutableSource<T>
type ReactNodeList = ReactTypes.ReactNodeList

type Array<T> = { [number]: T }

-- deviation: Containers should also be instances; at some point, we may
-- restrict which _kinds_ of instances, but that's not necessary right now
export type Container = Instance
-- export type Container =
--   | (Element & {_reactRootContainer?: RootType, ...})
--   | (Document & {_reactRootContainer?: RootType, ...})

-- deviation: We can't export this as `Instance`; luau gets upset!
export type HostInstance = Instance

export type TextInstance = Instance

-- TODO: Revisit this type for suspense
-- export type SuspenseInstance = Comment & {_reactRetry?: () => void, ...}
export type SuspenseInstance = any

export type Type = string
export type Props = {
	autoFocus: boolean?,
	children: any,
	disabled: boolean?,
	hidden: boolean?,
	suppressHydrationWarning: boolean?,
	dangerouslySetInnerHTML: any,
	style: { display: string, [any]: any }?,
	bottom: number?,
	left: number?,
	right: number?,
	top: number?,
	-- ...
	[any]: any,
}

-- TODO: Revisit this type for hydration
-- export type HydratableInstance = Instance | TextInstance | SuspenseInstance
export type HydratableInstance = Instance | SuspenseInstance

-- TODO: Revisit this to make sure it makes sense
-- export type PublicInstance = Element | Text
export type PublicInstance = HostInstance

-- TODO: See if these actually make sense
type HostContextDev = {
	namespace: string,
	ancestorInfo: any,
	-- ...
	[any]: any,
}
type HostContextProd = string
export type HostContext = HostContextDev | HostContextProd

export type RootType = {
	render: (self: RootType, children: ReactNodeList) -> (),
	unmount: (self: RootType) -> (),
	_internalRoot: any,
	-- _internalRoot: FiberRoot,
	-- ...
	[any]: any,
}

export type RootOptions = {
	hydrate: boolean?,
	hydrationOptions: {
		onHydrated: (suspenseNode: any) -> ()?,
		onDeleted: (suspenseNode: any) -> ()?,
		mutableSources: Array<MutableSource<any>>?,
		-- ...
		[any]: any,
	}?,
	-- ...
	[any]: any,
}

return {}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="404">
                <Properties>
                  <string name="Name">ReactRobloxRoot</string>
                  <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/8e5adfbd7e605bda9c5e96c10e015b3dc0df688e/packages/react-dom/src/client/ReactDOMRoot.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]

local Packages = script.Parent.Parent.Parent

local ReactRobloxHostTypes = require(script.Parent["ReactRobloxHostTypes.roblox"])
type Container = ReactRobloxHostTypes.Container
type RootType = ReactRobloxHostTypes.RootType
type RootOptions = ReactRobloxHostTypes.RootOptions

local ReconcilerTypes = require(Packages.ReactReconciler)
type RootTag = ReconcilerTypes.RootTag
local ReactTypes = require(Packages.Shared)
type MutableSource<T> = ReactTypes.MutableSource<T>
type ReactNodeList = ReactTypes.ReactNodeList
local ReactInternalTypes = require(Packages.ReactReconciler)
type FiberRoot = ReactInternalTypes.FiberRoot

type Array<T> = { [number]: T }

local ReactRobloxComponentTree = require(script.Parent.ReactRobloxComponentTree)
-- local isContainerMarkedAsRoot = ReactRobloxComponentTree.isContainerMarkedAsRoot
local markContainerAsRoot = ReactRobloxComponentTree.markContainerAsRoot
local unmarkContainerAsRoot = ReactRobloxComponentTree.unmarkContainerAsRoot
-- local listenToAllSupportedEvents = require(script.Parent.Parent.events.DOMPluginEventSystem).listenToAllSupportedEvents
-- local eagerlyTrapReplayableEvents = require(script.Parent.Parent.events.ReactDOMEventReplaying).eagerlyTrapReplayableEvents
-- local HTMLNodeType = require(script.Parent.Parent.shared.HTMLNodeType)
-- local ELEMENT_NODE = HTMLNodeType.ELEMENT_NODE
-- local COMMENT_NODE = HTMLNodeType.COMMENT_NODE
-- local DOCUMENT_NODE = HTMLNodeType.DOCUMENT_NODE
-- local DOCUMENT_FRAGMENT_NODE = HTMLNodeType.DOCUMENT_FRAGMENT_NODE
-- local ensureListeningTo = require(Packages.ReactDOMComponent).ensureListeningTo

-- deviation: Use the config-injecting entry point for the reconciler
local ReactFiberReconciler = require(script.Parent.Parent["ReactReconciler.roblox"])
local createContainer = ReactFiberReconciler.createContainer
local updateContainer = ReactFiberReconciler.updateContainer
-- local findHostInstanceWithNoPortals = ReactFiberReconciler.findHostInstanceWithNoPortals
-- local registerMutableSourceForHydration = ReactFiberReconciler.registerMutableSourceForHydration
local invariant = require(Packages.Shared).invariant
local enableEagerRootListeners = require(Packages.Shared).ReactFeatureFlags.enableEagerRootListeners

local BlockingRoot = ReactFiberReconciler.ReactRootTags.BlockingRoot
local ConcurrentRoot = ReactFiberReconciler.ReactRootTags.ConcurrentRoot
local LegacyRoot = ReactFiberReconciler.ReactRootTags.LegacyRoot

local createRootImpl

local ReactRobloxRoot = {}
ReactRobloxRoot.__index = ReactRobloxRoot

function ReactRobloxRoot.new(container: Container, options: RootOptions?): RootType
	local root: RootType = (setmetatable({}, ReactRobloxRoot) :: any) :: RootType
	root._internalRoot = createRootImpl(container, ConcurrentRoot, options)

	return root
end

local function createBlockingRoot(container: Container, tag: RootTag, options: RootOptions?): RootType
	-- deviation: We can just share the logic here via metatables
	local root: RootType = (setmetatable({}, ReactRobloxRoot) :: any) :: RootType
	root._internalRoot = createRootImpl(container, tag, options)

	return root
end

function ReactRobloxRoot:render(children: ReactNodeList)
	local root = self._internalRoot
	-- if _G.__DEV__ then
	--   if typeof (arguments[1] == 'function')
	--     console.error(
	--       'render(...): does not support the second callback argument. ' +
	--         'To execute a side effect after rendering, declare it in a component body with useEffect().',
	--     )
	--   end
	--   local container = root.containerInfo

	--   if container.nodeType ~= COMMENT_NODE)
	--     local hostInstance = findHostInstanceWithNoPortals(root.current)
	--     if hostInstance)
	--       if hostInstance.parentNode ~= container)
	--         console.error(
	--           'render(...): It looks like the React-rendered content of the ' +
	--             'root container was removed without using React. This is not ' +
	--             'supported and will cause errors. Instead, call ' +
	--             "root.unmount() to empty a root's container.",
	--         )
	--       end
	--     end
	--   end
	-- end
	updateContainer(children, root, nil)
end

function ReactRobloxRoot:unmount()
	-- if _G.__DEV__ then
	--   if typeof arguments[0] == 'function')
	--     console.error(
	--       'unmount(...): does not support a callback argument. ' +
	--         'To execute a side effect after rendering, declare it in a component body with useEffect().',
	--     )
	--   end
	-- end
	local root = self._internalRoot
	local container = root.containerInfo
	updateContainer(nil, root, nil, function()
		unmarkContainerAsRoot(container)
	end)
end

-- TODO: add Options type
-- createRootImpl = function(
--   container: Container,
--   tag: RootTag,
--   options: RootOptions
-- )
createRootImpl = function(container: Container, tag: RootTag, options: any)
	-- Tag is either LegacyRoot or Concurrent Root
	local hydrate = options ~= nil and options.hydrate == true
	local hydrationCallbacks = if options ~= nil then options.hydrationOptions else nil
	local mutableSources = (
		options ~= nil
		and options.hydrationOptions ~= nil
		and options.hydrationOptions.mutableSources
	) or nil
	local root = createContainer(container, tag, hydrate, hydrationCallbacks)
	markContainerAsRoot(root.current, container)
	-- local containerNodeType = container.nodeType

	if enableEagerRootListeners then
		--   local rootContainerElement =
		--     container.nodeType == COMMENT_NODE and container.parentNode or container
		--   listenToAllSupportedEvents(rootContainerElement)
		-- } else {
		--   if hydrate and tag ~= LegacyRoot)
		--     local doc =
		--       containerNodeType == DOCUMENT_NODE
		--         ? container
		--         : container.ownerDocument
		--     -- We need to cast this because Flow doesn't work
		--     -- with the hoisted containerNodeType. If we inline
		--     -- it, then Flow doesn't complain. We intentionally
		--     -- hoist it to reduce code-size.
		--     eagerlyTrapReplayableEvents(container, ((doc: any): Document))
		--   } else if
		--     containerNodeType ~= DOCUMENT_FRAGMENT_NODE and
		--     containerNodeType ~= DOCUMENT_NODE
		--   )
		--     ensureListeningTo(container, 'onMouseEnter')
		--   end
	end

	if mutableSources then
		-- for (local i = 0; i < mutableSources.length; i++)
		--   local mutableSource = mutableSources[i]
		--   registerMutableSourceForHydration(root, mutableSource)
		-- end
	end

	return root
end

local exports = {}

local function isValidContainer(node: any): boolean
	-- TODO: This behavior will deviate, for now just check that it's an
	-- instance, which should be good enough
	return typeof(node) == "Instance"
	-- return not not (
	--   node and
	--   (node.nodeType == ELEMENT_NODE or
	--     node.nodeType == DOCUMENT_NODE or
	--     node.nodeType == DOCUMENT_FRAGMENT_NODE or
	--     (node.nodeType == COMMENT_NODE and
	--       node.nodeValue == ' react-mount-point-unstable '))
	-- )
end

exports.isValidContainer = isValidContainer

-- deviation: Create `Container` from instance
exports.createRoot = function(container: Container, options: RootOptions?): RootType
	invariant(
		isValidContainer(container),
		-- deviation: Use roblox engine terminology
		"createRoot(...): Target container is not a Roblox Instance."
	)
	warnIfReactDOMContainerInDEV(container)
	return ReactRobloxRoot.new(container, options)
end

exports.createBlockingRoot = function(container: Container, options: RootOptions?): RootType
	invariant(
		isValidContainer(container),
		-- deviation: Use roblox engine terminology
		"createRoot(...): Target container is not a Roblox Instance."
	)
	warnIfReactDOMContainerInDEV(container)
	return createBlockingRoot(container, BlockingRoot, options)
end

exports.createLegacyRoot = function(container: Container, options: RootOptions?): RootType
	return createBlockingRoot(container, LegacyRoot, options)
end

function warnIfReactDOMContainerInDEV(container)
	if _G.__DEV__ then
		-- TODO: This behavior will deviate; should we validate that the
		-- container is not a PlayerGui of any sort?

		-- if
		--   container.nodeType == ELEMENT_NODE and
		--   container.tagName and
		--   container.tagName.toUpperCase() == 'BODY'
		-- then
		--   console.error(
		--     'createRoot(): Creating roots directly with document.body is ' ..
		--       'discouraged, since its children are often manipulated by third-party ' ..
		--       'scripts and browser extensions. This may lead to subtle ' ..
		--       'reconciliation issues. Try using a container element created ' ..
		--       'for your app.'
		--   )
		-- end
		-- if isContainerMarkedAsRoot(container) then
		--   if container._reactRootContainer then
		--     console.error(
		--       'You are calling ReactDOM.createRoot() on a container that was previously ' ..
		--         'passed to ReactDOM.render(). This is not supported.'
		--     )
		--   else
		--     console.error(
		--       'You are calling ReactDOM.createRoot() on a container that ' ..
		--         'has already been passed to createRoot() before. Instead, call ' ..
		--         'root.render() on the existing root instead if you want to update it.'
		--     )
		--   end
		-- end
	end
end

return exports
]]></string>
                </Properties>
              </Item>
              <Item class="Folder" referent="405">
                <Properties>
                  <string name="Name">roblox</string>
                </Properties>
                <Item class="ModuleScript" referent="406">
                  <Properties>
                    <string name="Name">RobloxComponentProps</string>
                    <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local __DEV__ = _G.__DEV__ :: boolean
local CollectionService = game:GetService("CollectionService")
local Packages = script.Parent.Parent.Parent.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)
local Object = LuauPolyfill.Object
local Set = LuauPolyfill.Set
local String = LuauPolyfill.String
local inspect = LuauPolyfill.util.inspect

local console = require(Packages.Shared).console

local React = require(Packages.React)
local ReactSymbols = require(Packages.Shared).ReactSymbols
local SingleEventManager = require(script.Parent.SingleEventManager)
type EventManager = SingleEventManager.EventManager
local Type = require(Packages.Shared).Type
local getDefaultInstanceProperty = require(script.Parent.getDefaultInstanceProperty)
local ReactRobloxHostTypes = require(script.Parent.Parent["ReactRobloxHostTypes.roblox"])
type HostInstance = ReactRobloxHostTypes.HostInstance
local Tag = require(Packages.React).Tag

-- deviation: Essentially a placeholder for dom-specific logic, taking the place
-- of ReactDOMComponent. Most of the logic will differ pretty dramatically

type Array<T> = { [number]: T }
type Object = { [any]: any }

-- deviation: Can't assign attributes to Roblox instances, so we use maps to
-- store associated data for host instance features like binding and event
-- management
-- FIXME: Stronger typing for EventManager

local instanceToEventManager: { [HostInstance]: EventManager } = {}
local instanceToBindings: { [HostInstance]: { [string]: any } } = {}

local applyPropsError = [[
Error applying initial props to Roblox Instance '%s' (%s):
  %s
]]

local updatePropsError = [[
Error updating props on Roblox Instance '%s' (%s):
  %s
]]

local updateBindingError = [[
Error updating binding or ref assigned to key %s of '%s' (%s).

Updated value:
  %s

Error:
  %s

%s
]]

local function identity(...)
	return ...
end

local function setRobloxInstanceProperty(hostInstance, key, newValue): ()
	if newValue == nil then
		local hostClass = hostInstance.ClassName
		local _, defaultValue = getDefaultInstanceProperty(hostClass, key)
		newValue = defaultValue
	end

	-- Assign the new value to the object
	hostInstance[key] = newValue
end

local function removeBinding(hostInstance, key)
	local bindings = instanceToBindings[hostInstance]
	if bindings ~= nil then
		local disconnect = bindings[key]
		disconnect()
		bindings[key] = nil
	end
end

local function attachBinding(hostInstance, key, newBinding): ()
	local function updateBoundProperty(newValue)
		local success, errorMessage = xpcall(setRobloxInstanceProperty, identity, hostInstance, key, newValue)

		if not success then
			local source = newBinding._source or "<enable DEV mode for stack>"
			local fullMessage = string.format(
				updateBindingError,
				key,
				hostInstance.Name,
				hostInstance.ClassName,
				tostring(newValue),
				errorMessage,
				source
			)
			console.error(fullMessage)
			-- FIXME: Until console.error can be instrumented to send telemetry, we
			-- need to keep the hard error here
			error(fullMessage, 0)
		end
	end

	if instanceToBindings[hostInstance] == nil then
		instanceToBindings[hostInstance] = {}
	end

	instanceToBindings[hostInstance][key] = React.__subscribeToBinding(newBinding, updateBoundProperty)

	updateBoundProperty(newBinding:getValue())
end

local function applyTags(hostInstance: Instance, oldTags: string?, newTags: string?)
	if __DEV__ then
		if newTags ~= nil and typeof(newTags) ~= "string" then
			console.error(
				"Type provided for ReactRoblox.Tag is invalid - tags should be "
					.. "specified as a single string, with individual tags delimited "
					.. "by spaces. Instead received:\n%s",
				inspect(newTags)
			)
			return
		end
	end

	local oldTagSet = Set.new(String.split(oldTags or "", " "))
	local newTagSet = Set.new(String.split(newTags or "", " "))

	for _, tag in oldTagSet do
		if not newTagSet:has(tag) then
			CollectionService:RemoveTag(hostInstance, tag)
		end
	end
	for _, tag in newTagSet do
		if not oldTagSet:has(tag) then
			CollectionService:AddTag(hostInstance, tag)
		end
	end
end

local function removeAllTags(hostInstance: Instance)
	for _, tag in CollectionService:GetTags(hostInstance) do
		CollectionService:RemoveTag(hostInstance, tag)
	end
end

local function applyProp(hostInstance: Instance, key, newValue, oldValue): ()
	-- performance: gets checked in applyProps so we can assume the key is valid
	-- if key == "ref" or key == "children" then
	--   return
	-- end

	local internalKeyType = Type.of(key)

	if internalKeyType == Type.HostEvent or internalKeyType == Type.HostChangeEvent then
		local eventManager = instanceToEventManager[hostInstance]
		if eventManager == nil then
			eventManager = (SingleEventManager.new(hostInstance) :: any) :: EventManager
			instanceToEventManager[hostInstance] = eventManager
		end

		local eventName = key.name

		if internalKeyType == Type.HostChangeEvent then
			eventManager:connectPropertyChange(eventName, newValue)
		else
			eventManager:connectEvent(eventName, newValue)
		end

		return
	end

	-- Handle bindings
	local newIsBinding = typeof(newValue) == "table" and newValue["$$typeof"] == ReactSymbols.REACT_BINDING_TYPE
	local oldIsBinding = oldValue ~= nil
		and typeof(oldValue) == "table"
		and oldValue["$$typeof"] == ReactSymbols.REACT_BINDING_TYPE
	if oldIsBinding then
		removeBinding(hostInstance, key)
	end

	if newIsBinding then
		attachBinding(hostInstance, key, newValue)
	elseif key == Tag then
		applyTags(hostInstance, oldValue, newValue)
	else
		setRobloxInstanceProperty(hostInstance, key, newValue)
	end
end

local function applyProps(hostInstance: Instance, props: Object): ()
	for propKey, value in props do
		-- performance: avoid the function call by inlining check here
		if propKey == "ref" or propKey == "children" then
			continue
		end

		applyProp(hostInstance, propKey, value)
	end
end

local function setInitialProperties(
	domElement: HostInstance,
	_tag: string,
	rawProps: Object,
	_rootContainerElement: HostInstance
): ()
	-- deviation: Use Roact's prop application logic
	local success, errorMessage = xpcall(applyProps, identity, domElement, rawProps)
	-- deviation: Roblox renderer doesn't currently track where instances
	-- were created the way that legacy Roact did, but DEV mode should include
	-- component stack traces as a separate warning
	if not success then
		local fullMessage = string.format(applyPropsError, domElement.Name, domElement.ClassName, errorMessage)
		console.error(fullMessage)
		-- FIXME: Until console.error can be instrumented to send telemetry, we need
		-- to keep the hard error here
		error(fullMessage, 0)
	end

	if instanceToEventManager[domElement] ~= nil then
		instanceToEventManager[domElement]:resume()
	end
end

local function safelyApplyProperties(domElement: HostInstance, updatePayload: Array<any>, lastProps: Object): ()
	local updatePayloadCount = #updatePayload
	for i = 1, updatePayloadCount, 2 do
		local propKey = updatePayload[i]
		local value = updatePayload[i + 1]
		if value == Object.None then
			value = nil
		end
		-- performance: avoid the function call by inlining check here
		if propKey ~= "ref" and propKey ~= "children" then
			applyProp(domElement, propKey, value, lastProps[propKey])
		end
	end
end

local function updateProperties(domElement: HostInstance, updatePayload: Array<any>, lastProps: Object): ()
	-- deviation: Use Roact's prop application logic
	if instanceToEventManager[domElement] ~= nil then
		instanceToEventManager[domElement]:suspend()
	end

	local success, errorMessage = xpcall(safelyApplyProperties, identity, domElement, updatePayload, lastProps)

	if not success then
		-- deviation: Roblox renderer doesn't currently track where instances
		-- were created the way that legacy Roact did, but DEV mode should include
		-- component stack traces as a separate warning
		local fullMessage = string.format(updatePropsError, domElement.Name, domElement.ClassName, errorMessage)
		console.error(fullMessage)
		-- FIXME: Until console.error can be instrumented to send telemetry, we need
		-- to keep the hard error here
		error(fullMessage, 0)
	end

	if instanceToEventManager[domElement] ~= nil then
		instanceToEventManager[domElement]:resume()
	end
end

-- deviation: Clear out references to components when they unmount so we
-- avoid leaking memory when they're removed
local function cleanupHostComponent(domElement: HostInstance)
	if instanceToEventManager[domElement] ~= nil then
		instanceToEventManager[domElement] = nil
	end
	if instanceToBindings[domElement] ~= nil then
		instanceToBindings[domElement] = nil
	end

	-- ROBLOX https://jira.rbx.com/browse/LUAFDN-718: Tables are somehow ending up
	-- in this function that expects Instances. In that case, we won't be able to
	-- iterate through its descendants.
	if typeof(domElement :: any) ~= "Instance" then
		return
	end

	removeAllTags(domElement)
	for _, descElement in domElement:GetDescendants() do
		if instanceToEventManager[descElement] ~= nil then
			instanceToEventManager[descElement] = nil
		end
		if instanceToBindings[descElement] ~= nil then
			instanceToBindings[descElement] = nil
		end
		removeAllTags(domElement)
	end
end

return {
	setInitialProperties = setInitialProperties,
	updateProperties = updateProperties,
	cleanupHostComponent = cleanupHostComponent,

	-- deviation: expose maps to test for Instance cleanups
	_instanceToEventManager = instanceToEventManager,
	_instanceToBindings = instanceToBindings,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="407">
                  <Properties>
                    <string name="Name">SingleEventManager</string>
                    <string name="Source"><![CDATA[-- upstream: https://github.com/Roblox/roact/blob/b2ba9cf4c219c2654e6572219a68d0bf1b541418/src/SingleEventManager.lua
--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the Apache License, Version 2.0 (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]

--[[
	A manager for a single host virtual node's connected events.
]]

local Packages = script.Parent.Parent.Parent.Parent

local console = require(Packages.Shared).console
type Function = (...any) -> ...any

local CHANGE_PREFIX = "Change."

local EventStatus = {
	-- No events are processed at all; they're silently discarded
	Disabled = "Disabled",

	-- Events are stored in a queue; listeners are invoked when the manager is resumed
	Suspended = "Suspended",

	-- Event listeners are invoked as the events fire
	Enabled = "Enabled",
}

export type EventManager = {
	connectPropertyChange: (self: any, eventName: string, newValue: any) -> (),
	connectEvent: (self: any, eventName: string, newValue: any) -> (),
	resume: (self: any) -> (),
	suspend: (self: any) -> (),
}

local SingleEventManager = {}
SingleEventManager.__index = SingleEventManager

function SingleEventManager.new(instance: Instance): EventManager
	local self = setmetatable({
		-- The queue of suspended events
		_suspendedEventQueue = {},

		-- All the event connections being managed
		-- Events are indexed by a string key
		_connections = {},

		-- All the listeners being managed
		-- These are stored distinctly from the connections
		-- Connections can have their listeners replaced at runtime
		_listeners = {},

		-- The suspension status of the manager
		-- Managers start disabled and are "resumed" after the initial render
		_status = EventStatus.Disabled,

		-- If true, the manager is processing queued events right now.
		_isResuming = false,

		-- The Roblox instance the manager is managing
		_instance = instance,
	}, SingleEventManager)

	return (self :: any) :: EventManager
end

function SingleEventManager:connectEvent(key, listener)
	self:_connect(key, self._instance[key], listener)
end

function SingleEventManager:connectPropertyChange(key, listener)
	local success, event = pcall(self._instance.GetPropertyChangedSignal, self._instance, key)

	if not success then
		error(string.format("Cannot get changed signal on property %q: %s", tostring(key), event), 0)
	end

	self:_connect(CHANGE_PREFIX .. key, event, listener)
end

function SingleEventManager:_connect(eventKey, event, listener)
	-- If the listener doesn't exist we can just disconnect the existing connection
	if listener == nil then
		if self._connections[eventKey] ~= nil then
			self._connections[eventKey]:Disconnect()
			self._connections[eventKey] = nil
		end

		self._listeners[eventKey] = nil
	else
		if self._connections[eventKey] == nil then
			self._connections[eventKey] = event:Connect(function(...)
				if self._status == EventStatus.Enabled then
					self._listeners[eventKey](self._instance, ...)
				elseif self._status == EventStatus.Suspended then
					-- Store this event invocation to be fired when resume is
					-- called.

					local argumentCount = select("#", ...)
					table.insert(self._suspendedEventQueue, { eventKey, argumentCount, ... })
				end
			end)
		end

		self._listeners[eventKey] = listener
	end
end

function SingleEventManager:suspend()
	self._status = EventStatus.Suspended
end

function SingleEventManager:resume()
	-- If we're already resuming events for this instance, trying to resume
	-- again would cause a disaster.
	if self._isResuming then
		return
	end

	self._isResuming = true

	-- More events might be added to the queue when evaluating events, so we
	-- need to be careful in order to preserve correct evaluation order.
	for _, eventInvocation in self._suspendedEventQueue do
		local listener = self._listeners[eventInvocation[1]]
		local argumentCount = eventInvocation[2]

		-- The event might have been disconnected since suspension started; in
		-- this case, we drop the event.
		if listener ~= nil then
			-- Wrap the listener in a coroutine to catch errors and handle
			-- yielding correctly.
			local listenerCo = coroutine.create(listener)
			local success, result =
				coroutine.resume(listenerCo, self._instance, unpack(eventInvocation, 3, 2 + argumentCount))

			-- If the listener threw an error, we log it as a warning, since
			-- there's no way to write error text in Roblox Lua without killing
			-- our thread!
			if not success then
				console.warn("%s", result)
			end
		end
	end

	self._isResuming = false
	self._status = EventStatus.Enabled
	table.clear(self._suspendedEventQueue)
end

return SingleEventManager
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="408">
                  <Properties>
                    <string name="Name">getDefaultInstanceProperty</string>
                    <string name="Source"><![CDATA[-- upstream: https://github.com/Roblox/roact/blob/b2ba9cf4c219c2654e6572219a68d0bf1b541418/src/getDefaultInstanceProperty.lua
--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the Apache License, Version 2.0 (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]

--[[
	Attempts to get the default value of a given property on a Roblox instance.

	This is used by the reconciler in cases where a prop was previously set on a
	primitive component, but is no longer present in a component's new props.

	Eventually, Roblox might provide a nicer API to query the default property
	of an object without constructing an instance of it.
]]

local Packages = script.Parent.Parent.Parent.Parent
local Symbol = require(Packages.Shared).Symbol

local Nil = Symbol.named("Nil")
local _cachedPropertyValues = {}

local function tryPropertyName(instance, propertyName)
	return instance[propertyName]
end

local function getDefaultInstanceProperty(className, propertyName)
	local classCache = _cachedPropertyValues[className]

	if classCache then
		local propValue = classCache[propertyName]

		-- We have to use a marker here, because Lua doesn't distinguish
		-- between 'nil' and 'not in a table'
		if propValue == Nil then
			return true, nil
		end

		if propValue ~= nil then
			return true, propValue
		end
	else
		classCache = {}
		_cachedPropertyValues[className] = classCache
	end

	local created = Instance.new(className)
	local ok, defaultValue = pcall(tryPropertyName, created, propertyName)

	created:Destroy()

	if ok then
		if defaultValue == nil then
			classCache[propertyName] = Nil
		else
			classCache[propertyName] = defaultValue
		end
	end

	return ok, defaultValue
end

return getDefaultInstanceProperty
]]></string>
                  </Properties>
                </Item>
              </Item>
            </Item>
          </Item>
          <Item class="Folder" referent="409">
            <Properties>
              <string name="Name">reflex</string>
            </Properties>
            <Item class="ModuleScript" referent="410">
              <Properties>
                <string name="Name">src</string>
                <string name="Source"><![CDATA[local types = require(script.types)
local broadcast = require(script.broadcast)
local createProducer = require(script.createProducer)
local combineProducers = require(script.combineProducers)
local createSelector = require(script.createSelector)
local applyMiddleware = require(script.applyMiddleware)
local loggerMiddleware = require(script.middleware.loggerMiddleware)
local shallowEqual = require(script.utils.shallowEqual)

export type Broadcaster = types.Broadcaster
export type BroadcastAction = types.BroadcastAction
export type BroadcasterOptions = types.BroadcasterOptions

export type BroadcastReceiver = types.BroadcastReceiver
export type BroadcastReceiverOptions = types.BroadcastReceiverOptions

export type Producer<State = any, Dispatchers = { [string]: (...any) -> State }> = types.Producer<State, Dispatchers>
export type Middleware = types.Middleware

return {
	createProducer = createProducer,
	combineProducers = combineProducers,
	createSelector = createSelector,
	applyMiddleware = applyMiddleware,
	loggerMiddleware = loggerMiddleware,
	createBroadcaster = broadcast.createBroadcaster,
	createBroadcastReceiver = broadcast.createBroadcastReceiver,
	shallowEqual = shallowEqual,
}
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="411">
                <Properties>
                  <string name="Name">Promise</string>
                  <string name="Source"><![CDATA[local ReplicatedStorage = game:GetService("ReplicatedStorage")

local packages = script:FindFirstAncestor("rbxts_include")
	or script:FindFirstAncestor("include")
	or ReplicatedStorage:FindFirstChild("rbxts_include")
	or script.Parent.Parent

if packages and packages:FindFirstChild("Promise") then
	return require(packages.Promise)
else
	error(`Could not find Promise from {script:GetFullName()}`)
end
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="412">
                <Properties>
                  <string name="Name">applyMiddleware</string>
                  <string name="Source"><![CDATA[--!nolint ImportUnused
local types = require(script.Parent.types)

--[=[
	Creates a producer enhancer that applies the given middleware to the
	producer.

	Initially, a middleware is called once when it is applied to a producer.
	Next, the returned function is called on a dispatcher in the producer.
	The final function is called whenever the dispatcher is called.

	```lua
	local loggerMiddleware: Reflex.Middleware = function(producer)
		print("Initial state:", producer.getState())
		return function(dispatch, name)
			return function(...)
				print(`Dispatching {name}:`, ...args)
				return dispatch(...)
			end
		end
	end

	producer:enhance(applyMiddleware(loggerMiddleware))
	```

	@param middlewares A list of middleware to apply.
	@return A producer enhancer.
]=]
local function applyMiddleware(...: types.Middleware): <T>(producer: T) -> T
	local arguments = { ... }

	return function(producer)
		local middlewares = table.clone(arguments)
		local dispatchers = producer:getDispatchers()

		for index, middleware in middlewares do
			middlewares[index] = middleware(producer)
		end

		for name, dispatcher in dispatchers do
			for index = #middlewares, 1, -1 do
				dispatcher = middlewares[index](dispatcher, name)
			end

			dispatchers[name] = dispatcher
			producer[name] = dispatcher
		end

		return producer
	end
end

return applyMiddleware
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="413">
                <Properties>
                  <string name="Name">broadcast</string>
                  <string name="Source"><![CDATA[local createBroadcaster = require(script.createBroadcaster)
local createBroadcastReceiver = require(script.createBroadcastReceiver)

return {
	createBroadcaster = createBroadcaster,
	createBroadcastReceiver = createBroadcastReceiver,
}
]]></string>
                </Properties>
                <Item class="ModuleScript" referent="414">
                  <Properties>
                    <string name="Name">createBroadcastReceiver</string>
                    <string name="Source"><![CDATA[local types = require(script.Parent.Parent.types)
local hydrate = require(script.Parent.hydrate)

--[=[
	Creates a broadcast receiver object that can be used to dispatch actions
	broadcasted by the server.
	@param options The options for the broadcast receiver.
	@return The broadcast receiver.
]=]
local function createBroadcastReceiver(options: types.BroadcastReceiverOptions): types.BroadcastReceiver
	local receiver = {} :: types.BroadcastReceiver
	local producer: types.Producer?

	local function hydrateState(serverState: { [string]: any })
		assert(producer, "Cannot use broadcast receiver before the middleware is applied.")

		local nextState = table.clone(producer:getState())

		for key, value in serverState do
			nextState[key] = value
		end

		producer:setState(nextState)
	end

	function receiver:dispatch(actions: { types.BroadcastAction })
		assert(producer, "Cannot dispatch actions before the middleware is applied")

		local dispatchers = producer:getDispatchers()

		for _, action in actions do
			local dispatcher = dispatchers[action.name]

			if dispatcher then
				dispatcher(table.unpack(action.arguments))
			elseif hydrate.isHydrate(action) then
				hydrateState(action.arguments[1])
			end
		end
	end

	function receiver:hydrate(serverState: { [string]: any })
		hydrateState(serverState)
	end

	function receiver.middleware(currentProducer)
		producer = currentProducer

		options.start()

		return function(dispatch)
			return dispatch
		end
	end

	return receiver
end

return createBroadcastReceiver
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="415">
                  <Properties>
                    <string name="Name">createBroadcaster</string>
                    <string name="Source"><![CDATA[local Players = game:GetService("Players")

local types = require(script.Parent.Parent.types)
local setInterval = require(script.Parent.Parent.utils.setInterval)
local hydrate = require(script.Parent.hydrate)

--[=[
	Creates a broadcaster that can be used to share actions with the client.
	It will track all actions that are dispatched by the provided producers and
	will broadcast them to the client.
	@param options The options for the broadcaster.
	@return The broadcaster.
]=]
local function createBroadcaster(options: types.BroadcasterOptions): types.Broadcaster
	local broadcaster = {} :: types.Broadcaster
	local producer: types.Producer?

	local pendingDispatch = false
	local pendingActionsByPlayer: { [Player]: { types.BroadcastAction } } = {}
	local actionFilter: { [string]: boolean } = {}

	for _, slice in options.producers do
		for name in slice:getDispatchers() do
			actionFilter[name] = true
		end
	end

	local function getSharedState()
		assert(producer, "Cannot use broadcaster before the middleware is applied.")

		local sharedState = {}
		local serverState = producer.getState()

		for name in options.producers do
			sharedState[name] = serverState[name]
		end

		return sharedState
	end

	local function hydratePlayer(player: Player)
		local state = getSharedState()

		if options.beforeHydrate then
			state = options.beforeHydrate(player, state)
		end

		if options.hydrate then
			options.hydrate(player, state)
		else
			options.dispatch(player, { hydrate.createHydrateAction(state) })
		end
	end

	local hydrateInterval = setInterval(function()
		for player in pendingActionsByPlayer do
			hydratePlayer(player)
		end
	end, options.hydrateRate or 60)

	local dispatchInterval = setInterval(function()
		broadcaster:flush()
	end, options.dispatchRate or 0)

	local playerRemoving = Players.PlayerRemoving:Connect(function(player)
		pendingActionsByPlayer[player] = nil
	end)

	function broadcaster:destroy()
		hydrateInterval()
		dispatchInterval()
		playerRemoving:Disconnect()
	end

	function broadcaster:flush()
		if not pendingDispatch then
			return
		end

		pendingDispatch = false

		for player, pendingActions in pendingActionsByPlayer do
			options.dispatch(player, pendingActions)
			pendingActionsByPlayer[player] = {}
		end
	end

	function broadcaster:start(player)
		if not pendingActionsByPlayer[player] then
			pendingActionsByPlayer[player] = {}
			hydratePlayer(player)
		end
	end

	broadcaster.middleware = function(currentProducer)
		producer = currentProducer

		return function(dispatch, name)
			if not actionFilter[name] then
				return dispatch
			end

			return function(...)
				for player, pendingActions in pendingActionsByPlayer do
					local action: types.BroadcastAction? = {
						name = name,
						arguments = { ... },
					}

					if options.beforeDispatch then
						action = options.beforeDispatch(player, action :: types.BroadcastAction)
					end

					table.insert(pendingActions, action)
				end

				pendingDispatch = true

				return dispatch(...)
			end
		end
	end

	return broadcaster
end

return createBroadcaster
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="416">
                  <Properties>
                    <string name="Name">hydrate</string>
                    <string name="Source"><![CDATA[local types = require(script.Parent.Parent.types)

local HYDRATE = "__hydrate__"

local function createHydrateAction(state: any): types.BroadcastAction
	return {
		name = HYDRATE,
		arguments = { state },
	}
end

local function isHydrate(action: types.BroadcastAction): boolean
	return action.name == HYDRATE
end

return {
	createHydrateAction = createHydrateAction,
	isHydrate = isHydrate,
}
]]></string>
                  </Properties>
                </Item>
              </Item>
              <Item class="ModuleScript" referent="417">
                <Properties>
                  <string name="Name">combineProducers</string>
                  <string name="Source"><![CDATA[local types = require(script.Parent.types)
local createProducer = require(script.Parent.createProducer)

local function combineInitialState(producers: types.ProducerMap)
	local initialState = {}

	for name, producer in producers do
		initialState[name] = producer:getState()
	end

	return initialState
end

local function combineActions(producers: types.ProducerMap)
	local combinedActions = {}
	local actionsByName = {}
	local producerNamesByAction = {}

	for producerName, producer in producers do
		for actionName, action in producer:getActions() do
			if actionsByName[actionName] then
				table.insert(actionsByName[actionName], action)
			else
				actionsByName[actionName] = { action }
			end

			producerNamesByAction[action] = producerName
		end
	end

	for actionName, actions in actionsByName do
		combinedActions[actionName] = function(combinedState, ...)
			local nextState = table.clone(combinedState)

			for _, action in actions do
				local producerName = producerNamesByAction[action]
				local producerState = nextState[producerName]
				nextState[producerName] = action(producerState, ...)
			end

			return nextState
		end
	end

	return combinedActions
end

--[=[
	Combines multiple producers into a single producer. Any dispatchers called
	on the combined producer will call the dispatchers of the same name on each
	of the producers passed in.

	**Don't use the individual producers.** The combined producer is the only
	one that should be used to prevent unexpected behavior.

	@param producers A map of producers to combine.
	@return A combined producer.
]=]
local function combineProducers(producers: types.ProducerMap)
	return createProducer(combineInitialState(producers), combineActions(producers))
end

return combineProducers
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="418">
                <Properties>
                  <string name="Name">createProducer</string>
                  <string name="Source"><![CDATA[local RunService = game:GetService("RunService")

local Promise = require(script.Parent.Promise)
local types = require(script.Parent.types)
local applyMiddleware = require(script.Parent.applyMiddleware)
local createSelectArrayDiffs = require(script.Parent.utils.createSelectArrayDiffs)
local testSelector = require(script.Parent.utils.testSelector)

--[=[
	Creates a producer that can be used to manage state.

	A producer is a state container that exposes a set of dispatchers that can
	be used to modify the state. The state is immutable, so the dispatchers
	return a new state object.

	The dispatchers are also exposed as callbacks in the producer, and are based
	on the actions parameter, but with the first argument omitted.

	@param initialState The initial state of the producer.
	@param actions A set of actions that can be used to modify the state.
	@return A producer that can be used to manage state.
]=]
local function createProducer<State>(
	initialState: State,
	actions: { [string]: (state: State, ...any) -> any }
): types.Producer<State>
	local producer = {} :: types.Producer<State>

	local dispatchers = {}
	local currentListeners: {}? = {}
	local nextListeners = currentListeners :: {}
	local listenerIdCounter = 1

	local state = initialState
	local stateSinceLastFlush = initialState
	local pendingFlush: RBXScriptConnection?

	local function ensureCanMutateNextListeners()
		if nextListeners == currentListeners then
			nextListeners = table.clone(currentListeners :: {})
		end
	end

	local function scheduleFlush()
		if not pendingFlush then
			pendingFlush = RunService.Heartbeat:Once(function()
				pendingFlush = nil
				producer:flush()
			end)
		end
	end

	local function subscribe(listener: (state: State) -> ())
		local connected = true

		local id = listenerIdCounter
		listenerIdCounter += 1

		ensureCanMutateNextListeners()
		nextListeners[id] = listener

		return function()
			if connected then
				connected = false
				ensureCanMutateNextListeners()
				nextListeners[id] = nil
				currentListeners = nil
			end
		end
	end

	function producer:getState(selector)
		return if selector then selector(state) else state
	end

	function producer:setState(newState)
		state = newState
		scheduleFlush()
	end

	function producer:resetState()
		state = initialState
		scheduleFlush()
	end

	function producer:getDispatchers()
		return dispatchers
	end

	function producer:getActions()
		return actions
	end

	function producer:clone()
		return createProducer(state, actions)
	end

	function producer:flush()
		if pendingFlush then
			pendingFlush:Disconnect()
			pendingFlush = nil
		end

		if state == stateSinceLastFlush then
			return
		end

		stateSinceLastFlush = state
		currentListeners = nextListeners

		local currentState = state

		for _, listener in currentListeners :: {} do
			task.spawn(listener, currentState)
		end
	end

	function producer:subscribe(...)
		local arguments = select("#", ...)
		local selector, predicate, listener

		if arguments >= 3 then
			selector, predicate, listener = ...
		elseif arguments == 2 then
			selector, listener = ...
		else
			listener = ...
		end

		local selection = self:getState(selector)

		if selector then
			testSelector(selector, selection, state)
		end

		return subscribe(function(nextState)
			local nextSelection = if selector then selector(nextState) else nextState

			if selection == nextSelection then
				return
			end

			local prevSelection = selection
			selection = nextSelection

			if predicate and not predicate(nextSelection, prevSelection) then
				return
			end

			listener(nextSelection, prevSelection)
		end)
	end

	function producer:once(...)
		local arguments = select("#", ...)
		local selector, predicate, listener

		if arguments >= 3 then
			selector, predicate, listener = ...
		elseif arguments == 2 then
			selector, listener = ...
		else
			listener = ...
		end

		local unsubscribe
		unsubscribe = self:subscribe(selector, predicate, function(state, prevState)
			unsubscribe()
			listener(state, prevState)
		end)

		return unsubscribe
	end

	function producer:wait(selector, predicate)
		return Promise.new(function(resolve, _, onCancel)
			local unsubscribe = self:once(selector, predicate, function(state)
				resolve(state)
			end)

			onCancel(unsubscribe)
		end)
	end

	function producer:observe(...)
		local arguments = select("#", ...)
		local selector, discriminator, observer

		if arguments >= 3 then
			selector, discriminator, observer = ...
		else
			selector, observer = ...
		end

		local idToCleanup = {}
		local selectDiffs = createSelectArrayDiffs(selector, discriminator)
		local connected = true

		local function checkDiffs(diffs)
			if not connected then
				return
			end

			for _, item in diffs.deletions do
				local index = diffs.keys[item]
				local id = if discriminator then discriminator(item, index) else item
				local cleanup = idToCleanup[id]

				if cleanup then
					idToCleanup[id] = nil
					cleanup()
				end
			end

			for _, item in diffs.additions do
				local index = diffs.keys[item]
				local id = if discriminator then discriminator(item, index) else item

				if not idToCleanup[id] then
					idToCleanup[id] = observer(item, index)
				end
			end
		end

		local unsubscribe = self:subscribe(selectDiffs, checkDiffs)

		checkDiffs(self:getState(selectDiffs))

		return function()
			connected = false
			unsubscribe()

			for _, cleanup in idToCleanup do
				cleanup()
			end

			table.clear(idToCleanup)
		end
	end

	function producer:observeWhile(...)
		local arguments = select("#", ...)
		local selector, predicate, observer

		if arguments >= 3 then
			selector, predicate, observer = ...
		else
			selector, observer = ...
		end

		local initialSelection = self:getState(selector)
		local connected = true
		local cleanup

		local function updateObserver(selection, lastSelection)
			if not connected then
				return
			end

			local shouldObserve = if predicate then predicate(selection, lastSelection) else selection

			if shouldObserve and not cleanup then
				cleanup = observer(selection)
			elseif not shouldObserve and cleanup then
				task.spawn(cleanup)
				cleanup = nil
			end
		end

		local unsubscribe = self:subscribe(selector, updateObserver)

		updateObserver(initialSelection, initialSelection)

		return function()
			connected = false
			unsubscribe()

			if cleanup then
				cleanup()
			end
		end
	end

	function producer:destroy()
		if pendingFlush then
			pendingFlush:Disconnect()
			pendingFlush = nil
		end

		if currentListeners then
			table.clear(currentListeners)
		end

		table.clear(nextListeners)
	end

	function producer:enhance(enhancer)
		return enhancer(self)
	end

	function producer:applyMiddleware(...)
		return self:enhance(applyMiddleware(...))
	end

	-- Support for APIs that require signal-like objects

	function producer:Connect(listener)
		local unsubscribe = self:subscribe(listener)
		return {
			Connected = true,
			Disconnect = function(self)
				self.Connected = false
				unsubscribe()
			end,
		}
	end

	function producer:Once(listener)
		local unsubscribe = self:once(listener)
		return {
			Connected = true,
			Disconnect = function(self)
				self.Connected = false
				unsubscribe()
			end,
		}
	end

	function producer:Wait()
		return self:wait(function(state)
			return state
		end):expect()
	end

	for name, action in actions do
		local function dispatch(...)
			state = action(state, ...)
			scheduleFlush()
			return state
		end

		dispatchers[name] = dispatch

		if not producer[name] then
			producer[name] = dispatch
		else
			warn(`Producer already has a property named {name}`)
		end
	end

	return producer
end

return createProducer
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="419">
                <Properties>
                  <string name="Name">createSelector</string>
                  <string name="Source"><![CDATA[type CreateSelectorFunction =
	(<Result, Arguments...>(
		dependencies: { (Arguments...) -> any },
		combiner: (...any) -> Result,
		equalityOrOptions: (MemoizeOptions<Result> | EqualityCheck<Result>)?
	) -> (Arguments...) -> Result)
	& (<Result, A, Arguments...>(
		a: (Arguments...) -> A,
		combiner: (A) -> Result,
		options: MemoizeOptions<Result>?
	) -> (Arguments...) -> Result)
	& (<Result, A, B, Arguments...>(
		a: (Arguments...) -> A,
		b: (Arguments...) -> B,
		combiner: (A, B) -> Result,
		options: MemoizeOptions<Result>?
	) -> (Arguments...) -> Result)
	& (<Result, A, B, C, Arguments...>(
		a: (Arguments...) -> A,
		b: (Arguments...) -> B,
		c: (Arguments...) -> C,
		combiner: (A, B, C) -> Result,
		options: MemoizeOptions<Result>?
	) -> (Arguments...) -> Result)
	& (<Result, A, B, C, D, Arguments...>(
		a: (Arguments...) -> A,
		b: (Arguments...) -> B,
		c: (Arguments...) -> C,
		d: (Arguments...) -> D,
		combiner: (A, B, C, D) -> Result,
		options: MemoizeOptions<Result>?
	) -> (Arguments...) -> Result)
	& (<Result, A, B, C, D, E, Arguments...>(
		a: (Arguments...) -> A,
		b: (Arguments...) -> B,
		c: (Arguments...) -> C,
		d: (Arguments...) -> D,
		e: (Arguments...) -> E,
		combiner: (A, B, C, D, E) -> Result,
		options: MemoizeOptions<Result>?
	) -> (Arguments...) -> Result)
	& (<Result, A, B, C, D, E, F, Arguments...>(
		a: (Arguments...) -> A,
		b: (Arguments...) -> B,
		c: (Arguments...) -> C,
		d: (Arguments...) -> D,
		e: (Arguments...) -> E,
		f: (Arguments...) -> F,
		combiner: (A, B, C, D, E, F) -> Result,
		options: MemoizeOptions<Result>?
	) -> (Arguments...) -> Result)
	& (...(((...any) -> any) | MemoizeOptions<any>)) -> (...any) -> any

type EqualityCheck<T = any> = (current: T, previous: T) -> boolean

type MemoizeOptions<Result> = {
	--[=[
		The equality function used when comparing dependencies before calling
		the combiner. By default, a strict equality check is used.
	]=]
	equalityCheck: EqualityCheck?,

	--[=[
		The equality function used when comparing the result of the combiner
		to the previous value. If `true`, it will return the previous value
		of the combiner. By default, the latest result is always returned.
	]=]
	resultEqualityCheck: EqualityCheck<Result>?,
}

--[=[
	Memoizes a function by caching the result of the last call. Recomputes the
	result if any of the arguments have changed.
	@param callback The function to memoize.
	@param equalityCheck An optional equality function to use when
	comparing the arguments of the callback. By default, a strict equality
	check is used.
	@param resultEqualityCheck An optional equality function to use when comparing
	the result of the callback. By default, the latest result is always
	returned.
	@return A memoized function.
]=]
local function memoize(
	callback: (...any) -> any,
	equalityCheck: EqualityCheck?,
	resultEqualityCheck: EqualityCheck?
): (...any) -> any
	local lastArguments = {}
	local lastArgumentCount = -1
	local lastResult
	local firstRun = true

	return function(...)
		local argumentCount = select("#", ...)
		local result = lastResult

		if argumentCount ~= lastArgumentCount then
			result = callback(...)
			lastArgumentCount = argumentCount
			lastArguments = { ... }
		else
			for index = 1, argumentCount do
				local current = select(index, ...)
				local previous = lastArguments[index]

				if current ~= previous and (not equalityCheck or not equalityCheck(current, previous)) then
					result = callback(...)
					lastArguments = { ... }
					break
				end
			end
		end

		if not resultEqualityCheck then
			lastResult = result
			return result
		elseif firstRun or (lastResult ~= result and not resultEqualityCheck(result, lastResult)) then
			firstRun = false
			lastResult = result
		end

		return lastResult
	end
end

local function createSelectorImpl(...: ((...any) -> any) | MemoizeOptions<any>): (...any) -> any
	local arguments = table.pack(...)
	local dependencies, combiner, equalityOrOptions

	if type(...) == "table" then
		-- { ... }, combiner, equalityOrOptions
		dependencies, combiner, equalityOrOptions = ...
	elseif type(arguments[arguments.n]) == "table" then
		-- ..., combiner, options
		dependencies = table.create(arguments.n - 2)
		table.move(arguments, 1, arguments.n - 2, 1, dependencies)
		combiner, equalityOrOptions = arguments[arguments.n - 1], arguments[arguments.n]
	else
		-- ..., combiner
		dependencies = table.create(arguments.n - 1)
		table.move(arguments, 1, arguments.n - 1, 1, dependencies)
		combiner = arguments[arguments.n]
	end

	local options = if type(equalityOrOptions) == "function"
		then { equalityCheck = equalityOrOptions }
		else equalityOrOptions

	local resultEqualityCheck = options and options.resultEqualityCheck
	local equalityCheck = options and options.equalityCheck

	local dependencyCount = #dependencies
	local inputs = table.create(dependencyCount)
	local memoizedCombiner = memoize(combiner, equalityCheck, resultEqualityCheck)

	return memoize(function(...)
		for index = 1, dependencyCount do
			inputs[index] = dependencies[index](...)
		end

		return memoizedCombiner(table.unpack(inputs, 1, dependencyCount))
	end)
end

--[=[
	Creates a memoized selector function. The selector is only called if the
	outputs of the dependencies have changed.

	This function is only necessary if your selector is expensive to compute,
	or returns a new object (i.e. mapping an array). This is because selectors
	are called every state change, and if the selector returns a new object,
	the component will re-render even if the inputs haven't changed.

	@param dependencies A list of dependencies that the selector depends on.
	@param combiner A function that takes the dependencies as arguments and
	returns the result of the selector.
	@param options Options for memoizing the selector.
	@return A memoized selector function.
]=]
local createSelector: CreateSelectorFunction = createSelectorImpl :: any

return createSelector
]]></string>
                </Properties>
              </Item>
              <Item class="Folder" referent="420">
                <Properties>
                  <string name="Name">middleware</string>
                </Properties>
                <Item class="ModuleScript" referent="421">
                  <Properties>
                    <string name="Name">loggerMiddleware</string>
                    <string name="Source"><![CDATA[local types = require(script.Parent.Parent.types)

local function stringify(value: unknown, _depth: number?): string
	local depth = _depth or 0

	if type(value) == "string" then
		return string.format("%q", value)
	elseif type(value) == "table" and depth < 2 then
		local result = "{"

		for k, v in value :: {} do
			result ..= "[" .. stringify(k, depth + 1) .. "] = " .. stringify(v, depth + 1) .. ", "
		end

		return result .. "}"
	else
		return tostring(value)
	end
end

--[=[
	A middleware that logs every action that is dispatched, and the new state
	after the action is handled.
]=]
local loggerMiddleware: types.Middleware = function(producer)
	print("[Reflex]: Mounted with state", producer:getState())

	producer:subscribe(function(state)
		print("[Reflex]: State changed to", state)
	end)

	return function(dispatch, name)
		return function(...)
			local arguments = table.pack(...)

			for index = 1, arguments.n do
				arguments[index] = stringify(arguments[index])
			end

			print(`[Reflex]: Dispatching {name}({table.concat(arguments, ", ")})`)

			return dispatch(...)
		end
	end
end

return loggerMiddleware
]]></string>
                  </Properties>
                </Item>
              </Item>
              <Item class="ModuleScript" referent="422">
                <Properties>
                  <string name="Name">types</string>
                  <string name="Source"><![CDATA[--[=[
	A Producer is a state container that exposes a set of dispatchers that can
	be used to modify the state. The state is immmutable, so dispatchers return
	a new state object.
]=]
export type Producer<State = any, Dispatchers = { [string]: (...any) -> State }> = Dispatchers & {
	--[=[
		Returns the current state of the producer. Receives an optional selector
		function that can be used to select a subset of the state.
		@param selector An optional selector function that can be used to select
		a subset of the state.
		@return The current state of the producer.
	]=]
	getState: ((self: Producer<State, Dispatchers>) -> State)
		& (<Selection>(self: Producer<State, Dispatchers>, selector: (state: State) -> Selection) -> Selection),

	--[=[
		Sets the state of the producer to a shallow copy of the given state.
		Fires listeners on the next frame.
		@param state The new state of the producer.
	]=]
	setState: (self: Producer<State, Dispatchers>, state: State) -> (),

	--[=[
		Resets the state of the producer to the initial state. Fires listeners
		on the next frame if the state has changed.
	]=]
	resetState: (self: Producer<State, Dispatchers>) -> (),

	--[=[
		Returns the dispatchers for the actions passed to `createProducer`.
		@return A map of dispatchers.
	]=]
	getDispatchers: (self: Producer<State, Dispatchers>) -> Dispatchers,

	--[=[
		Returns the original action functions passed to `createProducer`.
		@return A map of action functions.
	]=]
	getActions: (self: Producer<State, Dispatchers>) -> {
		[string]: (state: State, ...any) -> any,
	},

	--[=[
		Returns a distinct copy of the producer. The new copy starts with the
		same state and actions, but functions independently.
	]=]
	clone: (self: Producer<State, Dispatchers>) -> Producer<State, Dispatchers>,

	--[=[
		Flushes any pending updates by calling listeners immediately.
	]=]
	flush: (self: Producer<State, Dispatchers>) -> (),

	--[=[
		Subscribes to changes in a specific part of the state. State updates
		are deferred until the next frame after all state updates have been
		processed.
		@param selector A selector function that can be used to select a subset
		of the state.
		@param predicate An optional predicate function that must return `true`
		for the listener to be called.
		@param listener A callback that is called when the selected part of the
		state changes.
		@return A function that can be used to unsubscribe from the listener.
	]=]
	subscribe: ((self: Producer<State, Dispatchers>, listener: (state: State, prevState: State) -> ()) -> () -> ())
		& (<Selection>(
			self: Producer<State, Dispatchers>,
			selector: (state: State) -> Selection,
			listener: (state: Selection, prevState: Selection) -> ()
		) -> () -> ())
		& <Selection>(
			self: Producer<State, Dispatchers>,
			selector: (state: State) -> Selection,
			predicate: (state: Selection, prevState: Selection) -> boolean,
			listener: (state: Selection, prevState: Selection) -> ()
		) -> () -> (),

	--[=[
		Similar to `subscribe`, but the listener is disconnect after the first
		time it is called.
		@param selector A selector function that can be used to select a subset
		of the state.
		@param predicate An optional predicate function that must return `true`
		for the listener to be called.
		@param listener A callback that is called when the selected part of the
		state changes.
		@return A function that can be used to unsubscribe from the listener.
	]=]
	once: (<Selection>(
		self: Producer<State, Dispatchers>,
		selector: (state: State) -> Selection,
		listener: (state: Selection, prevState: Selection) -> ()
	) -> () -> ()) & <Selection>(
		self: Producer<State, Dispatchers>,
		selector: (state: State) -> Selection,
		predicate: ((state: Selection, prevState: Selection) -> boolean)?,
		listener: (state: Selection, prevState: Selection) -> ()
	) -> () -> (),

	--[=[
		Returns a Promise that resolves once a specific part of the state changes.
		Unsubscribes the listener if the Promise is cancelled or resolved.

		Receives an optional `predicate` function that must return `true` for the
		Promise to resolve for a given state change.

		@param selector A selector function that can be used to select a subset
		of the state.
		@param predicate An optional predicate function that must return `true`
		for the Promise to resolve for a given state change.
		@return A Promise that resolves once the selected part of the state changes.
	]=]
	wait: <Selection>(
		self: Producer<State, Dispatchers>,
		selector: ((state: State) -> Selection)?,
		predicate: ((state: Selection, prevState: Selection) -> boolean)?
	) -> any,

	--[=[
		Tracks the addition and removal of items in an array. Calls the given
		observer for each added item and calls the cleanup function when the
		item is removed.

		If your array contains immutable objects, you can use the `discriminator`
		argument to return a unique identifier for each item. This allows the
		observer to avoid calling the observer for items that have already been
		added.

		@param selector The selector to track.
		@param discriminator Optional function that returns a unique identifier for
		each item. Useful when tracking immutable objects.
		@param observer The observer to call when an item is added. Returns a
		function that is called when the item is removed.
		@return An observer that calls the given observer for each added item and
		unsubscribes when the item is removed.
	]=]
	observe: (<K, V>(
		self: Producer<State, Dispatchers>,
		selector: (state: State) -> { [K]: V },
		discriminator: ((item: V, index: K) -> unknown)?,
		observer: (item: V, index: K) -> (() -> ())?
	) -> () -> ()) & (<K, V>(
		self: Producer<State, Dispatchers>,
		selector: (state: State) -> { [K]: V },
		observer: (item: V, index: K) -> (() -> ())?
	) -> () -> ()),

	--[=[
		Similar to `observe`, but it creates one observer while a selector or
		predicate is truthy, and destroys the observer when it's no longer truthy.
		@param selector The selector to track.
		@param predicate An optional predicate function that must return `true`
		for the observer to be created.
		@param observer The observer to call when the selector is truthy. Returns
		a function that is called when the selector is falsy.
		@return A cleanup function that removes all observers.
	]=]
	observeWhile: (<T>(
		self: Producer<State, Dispatchers>,
		selector: (state: State) -> T,
		predicate: (state: T, prevState: T) -> boolean,
		observer: (state: T) -> (() -> ())?
	) -> () -> ()) & (<T>(
		self: Producer<State, Dispatchers>,
		selector: (state: State) -> T?,
		observer: (state: T) -> (() -> ())?
	) -> () -> ()),

	--[=[
		Disconnects all listeners and cancels all pending flushes.
	]=]
	destroy: (self: Producer<State, Dispatchers>) -> (),

	--[=[
		Enhances the producer with new functionality. The enhancer function
		is passed to the producer as an argument and should mutate the producer
		in place.
		@deprecated Use `applyMiddleware` instead.
		@param enhancer A function that mutates the producer.
		@return The enhanced producer.
	]=]
	enhance: <Enhanced>(self: Producer<State, Dispatchers>, enhancer: (producer: any) -> Enhanced) -> Enhanced,

	--[=[
		Applies the given middlewares to the producer and its dispatchers. Returns
		the producer for chaining.

		Initially, a middleware is called once when it is applied to a producer.
		Next, the returned function is called on a dispatcher in the producer.
		The final function is called whenever the dispatcher is called.

		```lua
		local loggerMiddleware: Reflex.Middleware = function(producer)
			print("Initial state:", producer.getState())
			return function(dispatch, name)
				return function(...)
					print(`Dispatching {name}:`, ...args)
					return dispatch(...)
				end
			end
		end

		producer:applyMiddleware(loggerMiddleware)
		```

		@param middlewares A list of middleware to apply.
		@return The producer.
	]=]
	applyMiddleware: (
		self: Producer<State, Dispatchers>,
		...(producer: any) -> (dispatch: (...any) -> any, name: string) -> (...any) -> any
	) -> Producer<State, Dispatchers>,
}

--[=[
	A middleware is a function that is called before an action is dispatched.

	Initially, a middleware is called once when it is applied to a producer.
	Next, the returned function is called on a dispatcher in the producer.
	The final function is called whenever that dispatcher is called.
]=]
export type Middleware = (producer: Producer) -> (dispatch: (...any) -> any, name: string) -> (...any) -> any

export type ProducerMap = { [string]: Producer }

--[=[
	A container for storing a Reflex dispatcher's name and arguments.
]=]
export type BroadcastAction = {
	name: string,
	arguments: {},
}

--[=[
	Options for the broadcast middleware.
]=]
export type BroadcasterOptions = {
	--[=[
		The producers that will be tracked.
	]=]
	producers: ProducerMap,

	--[=[
		The rate in seconds at which the server should hydrate the
		clients with the latest state.
		@default 60
	]=]
	hydrateRate: number?,

	--[=[
		The rate in seconds at which the server should dispatch
		actions to the clients. If set to `0`, actions will be
		dispatched within the next frame.
		@default 0
	]=]
	dispatchRate: number?,

	--[=[
		Runs before actions are dispatched to a player. Can be used to
		filter actions or manipulate them before sending.

		Avoid directly mutating the action. Instead, return a new action
		if you need to change it. Return `nil` to not share the action
		with this player.
	]=]
	beforeDispatch: ((player: Player, action: BroadcastAction) -> BroadcastAction?)?,

	--[=[
		Runs before the client is hydrated with the latest state. Can be
		used to filter the state or hide certain values from the client.

		Do not mutate the state in this function! Treat it as a read-only
		object, and return a new object if you need to change it.
	]=]
	beforeHydrate: ((player: Player, state: { [string]: any }) -> { [string]: any })?,

	--[=[
		An optional custom hydration function. If provided, this function
		will be called instead of being implicitly handled in 'dispatch'.

		Useful for reducing load on a single remote if your state is large.
	]=]
	hydrate: ((player: Player, state: { [string]: any }) -> ())?,

	--[=[
		The function that will send the actions to the client.
	]=]
	dispatch: (player: Player, actions: { BroadcastAction }) -> (),
}

--[=[
	Options for the broadcast receiver.
]=]
export type BroadcastReceiverOptions = {
	--[=[
		A function that, when called, should fire a remote that calls
		`start(player)` on the server broadcaster.
	]=]
	start: () -> any,
}

--[=[
	A broadcaster that can be used to share actions with the client.
]=]
export type Broadcaster = {
	--[=[
		The middleware that will broadcast actions to the client.
	]=]
	middleware: Middleware,

	--[=[
		Starts broadcasting state and actions to the given player.
	]=]
	start: (self: Broadcaster, player: Player) -> (),

	--[=[
		Disconnects all listeners and cancels all pending dispatches.
	]=]
	destroy: (self: Broadcaster) -> (),
}

--[=[
	A receiver that can be used to dispatch actions broadcasted by the server.
]=]
export type BroadcastReceiver = {
	--[=[
		A middleware that should be applied to the root producer. This will
		merge the producer's state with the server's state on join.
	]=]
	middleware: Middleware,

	--[=[
		Dispatches actions broadcasted by the server.
	]=]
	dispatch: (self: BroadcastReceiver, actions: { BroadcastAction }) -> (),

	--[=[
		Hydrates the client with the latest state from the server.
		Normally, hydration is implicitly handled in 'dispatch' unless a
		custom hydration handler is provided in the broadcaster options.

		Useful for reducing load on a single remote if your state is large.
	]=]
	hydrate: (self: BroadcastReceiver, state: { [string]: any }) -> (),
}

return nil
]]></string>
                </Properties>
              </Item>
              <Item class="Folder" referent="423">
                <Properties>
                  <string name="Name">utils</string>
                </Properties>
                <Item class="ModuleScript" referent="424">
                  <Properties>
                    <string name="Name">createSelectArrayDiffs</string>
                    <string name="Source"><![CDATA[--!strict
local createSelector = require(script.Parent.Parent.createSelector)

type ArrayDiffs<K, V> = {
	additions: { V },
	deletions: { V },
	keys: { [V]: K },
}

type Entry<K, V> = {
	key: K,
	value: V,
}

--[=[
	Tracks the addition and removal of items in an array. Creates a selector that
	returns an object containing the additions and deletions since the last update.

	If your array contains immutable objects, you can use the `discriminator`
	argument to return a unique identifier for each item. This prevents excessive
	re-renders when an item is updated but not added or removed.

	@param selector The selector to track.
	@param discriminator A function that returns a unique identifier for each
	item. Useful when tracking immutable objects.
	@returns A selector that returns an object containing the additions and
	deletions since the last update.
]=]
local function createSelectArrayDiffs<State, K, V>(
	selector: (state: State) -> { [K]: V },
	discriminator: ((item: V, index: K) -> unknown)?
): (state: State) -> ArrayDiffs<K, V>
	local lastEntries: { [unknown]: Entry<K, V> } = {}

	return createSelector(selector, function(items)
		local additions: { V } = {}
		local deletions: { V } = {}
		local keys: { [V]: K } = {}
		local entries: { [unknown]: Entry<K, V> } = {}

		for key, item in items do
			local id = if discriminator then discriminator(item, key) else item

			assert(id ~= nil, "Discriminator returned a nil value")

			if not lastEntries[id] then
				keys[item] = key
				table.insert(additions, item)
			end

			entries[id] = { key = key, value = item }
		end

		for id, item in lastEntries do
			if not entries[id] then
				local entry = lastEntries[id]
				keys[entry.value] = entry.key
				table.insert(deletions, entry.value)
			end
		end

		lastEntries = entries

		return {
			additions = additions,
			deletions = deletions,
			keys = keys,
		}
	end)
end

return createSelectArrayDiffs
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="425">
                  <Properties>
                    <string name="Name">setInterval</string>
                    <string name="Source"><![CDATA[local RunService = game:GetService("RunService")

local function setInterval(callback: () -> (), interval: number): () -> ()
	if interval < 0 then
		return function() end
	end

	local timer = 0
	local connection

	connection = RunService.Heartbeat:Connect(function(dt)
		timer += dt

		if timer >= interval then
			timer -= interval
			callback()
		end
	end)

	return function()
		connection:Disconnect()
	end
end

return setInterval
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="426">
                  <Properties>
                    <string name="Name">shallowEqual</string>
                    <string name="Source"><![CDATA[--[=[
	Returns whether or not two tables are shallowly equal, or in other words,
	have the same set of key-value pairs.
	@param a The first table to compare.
	@param b The second table to compare.
	@returns Whether or not the tables are shallowly equal.
]=]
local function shallowEqual(a: any, b: any): boolean
	if a == b then
		return true
	end

	if type(a) ~= "table" or type(b) ~= "table" then
		return false
	end

	for key, value in a do
		if b[key] ~= value then
			return false
		end
	end

	for key, value in b do
		if a[key] ~= value then
			return false
		end
	end

	return true
end

return shallowEqual
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="427">
                  <Properties>
                    <string name="Name">testSelector</string>
                    <string name="Source"><![CDATA[local RunService = game:GetService("RunService")

local IS_STUDIO = RunService:IsStudio()
local TEST_WARNING = [[
Reflex detected a selector function that returns conflicting values for the same input!
This is likely caused by one of the following:

- The selector function is not memoized and should use 'createSelector'
- The selector function is memoized but is not idempotent

Learn more about writing selectors here:
https://littensy.github.io/reflex/docs/guides/using-selectors

%s]]

--[=[
	Tests a selector function's memoization. If the selector function is not
	memoized, it will output a warning in Roblox Studio.
	@param selector The selector function to test.
	@param expectedValue The expected value of the selector function.
	@param ... The arguments to pass to the selector function.
	@returns Whether the test passed.
]=]
local function testSelector<T, U...>(selector: (U...) -> T, expectedValue: T, ...: U...)
	if selector(...) == expectedValue then
		return true
	end

	if IS_STUDIO then
		local traceback = debug.traceback("Function traceback", 2)
		warn(string.format(TEST_WARNING, traceback))
	end

	return false
end

return testSelector
]]></string>
                  </Properties>
                </Item>
              </Item>
            </Item>
          </Item>
          <Item class="ModuleScript" referent="428">
            <Properties>
              <string name="Name">ripple</string>
              <string name="Source"><![CDATA[local types = require(script.types)

export type Motion<T = number> = types.Motion<T>

export type MotionState = types.MotionState

export type MotionSolver = types.MotionSolver

export type MotionGoal = types.MotionGoal

return {
	createMotion = require(script.createMotion),
	config = require(script.config),
	immediate = require(script.solvers.immediate),
	linear = require(script.solvers.linear),
	spring = require(script.solvers.spring),
	tween = require(script.solvers.tween),
}
]]></string>
            </Properties>
            <Item class="ModuleScript" referent="429">
              <Properties>
                <string name="Name">config</string>
                <string name="Source"><![CDATA[local config = {
	spring = {
		default = { tension = 170, friction = 26 },
		gentle = { tension = 120, friction = 14 },
		wobbly = { tension = 180, friction = 12 },
		stiff = { tension = 210, friction = 20 },
		slow = { tension = 280, friction = 60 },
		molasses = { tension = 280, friction = 120 },
	},

	linear = {
		default = { speed = 1 },
	},

	tween = {
		default = {
			time = 1,
			style = Enum.EasingStyle.Quad,
			direction = Enum.EasingDirection.Out,
			repeatCount = 0,
			reverses = false,
			delayTime = 0,
		},
	},
}

return config
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="430">
              <Properties>
                <string name="Name">createMotion</string>
                <string name="Source"><![CDATA[local RunService = game:GetService("RunService")

local types = require(script.Parent.types)
local linearSolver = require(script.Parent.solvers.linear)
local springSolver = require(script.Parent.solvers.spring)
local tweenSolver = require(script.Parent.solvers.tween)
local intermediate = require(script.Parent.utils.intermediate)
local assign = require(script.Parent.utils.assign)
local merge = require(script.Parent.utils.merge)

local defaults = {
	heartbeat = RunService.Heartbeat,
	start = false,
}

local function createMotion<T>(initialValue: T, options: types.MotionOptions?): types.Motion<T>
	local config = merge(defaults, options or {})
	local valueType = typeof(initialValue)

	local motionState: { [any]: types.MotionState } = {}
	local motionSolvers: { [any]: types.MotionSolver } = {}

	local onStepListeners: { (value: T, deltaTime: number) -> () } = {}
	local onCompleteListeners: { (value: T) -> () } = {}
	local nextListenerId = 1

	local connection: RBXScriptConnection?
	local wasComplete = false
	local lastCompleteValue

	for key, value in intermediate.to(initialValue) do
		motionState[key] = {
			value = value,
			complete = true,
		}
	end

	local function stop()
		if connection then
			connection:Disconnect()
			connection = nil
		end
	end

	local function start(self)
		if connection then
			return stop
		end

		connection = config.heartbeat:Connect(function(deltaTime)
			self:step(deltaTime)
		end)

		return stop
	end

	local function get()
		local intermediates = {}

		for key, state in motionState do
			intermediates[key] = state.value
		end

		return intermediate.from(intermediates, valueType)
	end

	local function getVelocity()
		local intermediates = {}

		for key, state in motionState do
			intermediates[key] = state.velocity or 0
		end

		return intermediate.from(intermediates, valueType)
	end

	local function set(_self, value)
		local intermediates = intermediate.to(value)

		for key, state in motionState do
			local newValue = intermediates[key]

			if newValue then
				state.value = newValue
				state.complete = false
			end
		end
	end

	local function patch(_self, source)
		for key, state in motionState do
			local stateSource = source[key]

			if stateSource then
				state.complete = false
				assign(state, stateSource)
			end
		end
	end

	local function impulse(_self, impulses)
		if type(impulses) == "number" then
			for _, state in motionState do
				if not state.velocity then
					continue
				end

				state.complete = false
				state.velocity = state.velocity :: number + impulses
			end

			return
		end

		local intermediateImpulses = intermediate.to(impulses)

		for key, amount in intermediateImpulses do
			local state = motionState[key]

			if not state or not state.velocity then
				continue
			end

			state.complete = false
			state.velocity = state.velocity :: number + amount
		end

		return
	end

	local function to(_self, solvers)
		if type(solvers) == "function" then
			for key, state in motionState do
				if state.destructor then
					state.destructor()
					state.destructor = nil
				end

				state.complete = false

				if solvers(key, state, 0) ~= false then
					-- only sets the solver if this key is part of the new goal
					motionSolvers[key] = solvers
				end
			end

			return
		end

		for key, solver in solvers do
			local state = motionState[key]

			if not state then
				continue
			end

			if state.destructor then
				state.destructor()
				state.destructor = nil
			end

			state.complete = false

			if solver(key, state, 0) ~= false then
				-- only sets the solver if this key is part of the new goal
				motionSolvers[key] = solver
			end
		end
	end

	local function linear(self, value, params)
		self:to(linearSolver(value :: any, params))
	end

	local function spring(self, value, params)
		self:to(springSolver(value :: any, params))
	end

	local function tween(self, value, params)
		self:to(tweenSolver(value :: any, params))
	end

	local function step(self, deltaTime)
		for key, handler in motionSolvers do
			local state = motionState[key]

			if state and not state.complete then
				handler(key, state, deltaTime)
			end
		end

		local value = self:get()
		local complete = self:isComplete()

		if not wasComplete or not complete then
			for _, listener in onStepListeners do
				task.spawn(listener, value, deltaTime)
			end
		end

		if complete and (not wasComplete or lastCompleteValue ~= value) then
			for _, listener in onCompleteListeners do
				task.spawn(listener, value)
			end
		end

		wasComplete = complete
		lastCompleteValue = value

		return value
	end

	local function isComplete()
		for _, state in motionState do
			if not state.complete then
				return false
			end
		end

		return true
	end

	local function onComplete(_self, callback)
		local listenerId = nextListenerId
		nextListenerId += 1
		onCompleteListeners[listenerId] = callback

		return function()
			onCompleteListeners[listenerId] = nil
		end
	end

	local function onStep(_self, callback)
		local listenerId = nextListenerId
		nextListenerId += 1
		onStepListeners[listenerId] = callback

		return function()
			onStepListeners[listenerId] = nil
		end
	end

	local function destroy()
		wasComplete = false
		nextListenerId = 1

		stop()

		table.clear(onStepListeners)
		table.clear(onCompleteListeners)
		table.clear(motionSolvers)

		for _, state in motionState do
			if state.destructor then
				state.destructor()
				state.destructor = nil
			end
		end
	end

	local motion: types.Motion<T> = {
		state = motionState,
		start = start,
		stop = stop,
		get = get,
		getVelocity = getVelocity,
		set = set,
		patch = patch,
		impulse = impulse,
		to = to,
		linear = linear,
		spring = spring,
		tween = tween,
		step = step,
		isComplete = isComplete,
		onComplete = onComplete,
		onStep = onStep,
		destroy = destroy,
	}

	if config.start then
		motion:start()
	end

	return motion
end

return createMotion
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="431">
              <Properties>
                <string name="Name">createMotion.spec</string>
                <string name="Source"><![CDATA[return function()
	local types = require(script.Parent.types)
	local createMotion = require(script.Parent.createMotion)
	local linear = require(script.Parent.solvers.linear)
	local spy = require(script.Parent.utils.spy)

	it("should return a Motion", function()
		local motion = createMotion(0)
		expect(motion).to.be.ok()
		expect(motion.state).to.be.a("table")
		expect(motion.start).to.be.a("function")
		expect(motion.stop).to.be.a("function")
		expect(motion.get).to.be.a("function")
		expect(motion.set).to.be.a("function")
		expect(motion.patch).to.be.a("function")
		expect(motion.impulse).to.be.a("function")
		expect(motion.to).to.be.a("function")
		expect(motion.step).to.be.a("function")
		expect(motion.isComplete).to.be.a("function")
		expect(motion.onComplete).to.be.a("function")
		expect(motion.onStep).to.be.a("function")
		expect(motion.destroy).to.be.a("function")
	end)

	it("should animate a number", function()
		local motion = createMotion(0)

		motion:to(linear(1, { speed = 1 }))
		motion:step(0.5)

		expect(motion:get()).to.equal(0.5)
		expect(motion:isComplete()).to.equal(false)

		motion:step(0.5)

		expect(motion:get()).to.equal(1)
		expect(motion:isComplete()).to.equal(true)
	end)

	it("should animate a vector", function()
		local motion = createMotion(Vector3.new())

		motion:to(linear(Vector3.new(0.5, 0.75, 1), { speed = 1 }))
		motion:step(0.5)

		expect(motion:get()).to.equal(Vector3.new(0.5, 0.5, 0.5))
		expect(motion:isComplete()).to.equal(false)

		motion:step(0.5)

		expect(motion:get()).to.equal(Vector3.new(0.5, 0.75, 1))
		expect(motion:isComplete()).to.equal(true)
	end)

	it("should animate an array", function()
		local motion = createMotion({ 0, 0, 0 })

		motion:to(linear({ 0.5, 0.75, 1 }, { speed = 1 }))
		motion:step(0.5)

		expect(motion:get()[1]).to.equal(0.5)
		expect(motion:get()[2]).to.equal(0.5)
		expect(motion:get()[3]).to.equal(0.5)

		motion:step(0.5)

		expect(motion:get()[1]).to.equal(0.5)
		expect(motion:get()[2]).to.equal(0.75)
		expect(motion:get()[3]).to.equal(1)
	end)

	describe("when calling 'step'", function()
		it("should call onStep", function()
			local motion = createMotion(0)
			local onStep = spy()

			motion:onStep(onStep.handle)
			motion:to(linear(1, { speed = 1 }))
			motion:step(0.5)

			expect(onStep.calls).to.equal(1)
			expect(onStep.arguments[1][1]).to.equal(0.5)
			expect(onStep.arguments[1][2]).to.equal(0.5)

			motion:step(0.5)

			expect(onStep.calls).to.equal(2)
			expect(onStep.arguments[2][1]).to.equal(1)
			expect(onStep.arguments[2][2]).to.equal(0.5)

			motion:step(0.5)

			expect(onStep.calls).to.equal(2)

			motion:to(linear(0, { speed = 1 }))
			motion:step(0.5)

			expect(onStep.calls).to.equal(3)
			expect(onStep.arguments[3][1]).to.equal(0.5)
			expect(onStep.arguments[3][2]).to.equal(0.5)
		end)

		it("should call onComplete", function()
			local motion = createMotion(0)
			local onComplete = spy()

			motion:onComplete(onComplete.handle)
			motion:to(linear(1, { speed = 1 }))
			motion:step(0.5)

			expect(onComplete.calls).to.equal(0)

			motion:step(0.5)

			expect(onComplete.calls).to.equal(1)
			expect(onComplete.arguments[1][1]).to.equal(1)

			motion:step(0.5)

			expect(onComplete.calls).to.equal(1)

			motion:to(linear(0, { speed = 1 }))
			motion:step(1)

			expect(onComplete.calls).to.equal(2)
			expect(onComplete.arguments[2][1]).to.equal(0)
		end)

		it("should not run completed solvers", function()
			local motion = createMotion({ a = 0, b = 0 })
			local dummySpy = spy()
			local immediateSpy = spy()

			motion:to({
				a = dummySpy.handle,
				b = function(key, state, deltaTime)
					immediateSpy.handle(key, state, deltaTime)
					state.value = 1
					state.complete = true
				end,
			})

			expect(motion.state.a.complete).to.equal(false)
			expect(motion.state.b.complete).to.equal(true)
			expect(dummySpy.calls).to.equal(1)
			expect(immediateSpy.calls).to.equal(1)

			motion:step(1)

			expect(motion.state.a.complete).to.equal(false)
			expect(motion.state.b.complete).to.equal(true)
			expect(dummySpy.calls).to.equal(2)
			expect(immediateSpy.calls).to.equal(1)
		end)
	end)

	describe("when calling 'to'", function()
		it("should destroy the old solver", function()
			local motion = createMotion(0)
			local destructor = spy()

			motion:to(function(_, state)
				state.destructor = destructor.handle
			end)

			motion:step(1)
			expect(destructor.calls).to.equal(0)

			motion:to(linear(1))
			expect(destructor.calls).to.equal(1)
		end)

		it("should accept solvers per key", function()
			local motion = createMotion({ a = 0, b = 0 })

			motion:to({
				a = linear(1, { speed = 1 }),
				b = linear(1, { speed = 0.5 }),
			})

			motion:step(0.5)

			expect(motion:get().a).to.equal(0.5)
			expect(motion:get().b).to.equal(0.25)
			expect(motion:isComplete()).to.equal(false)

			motion:step(0.5)

			expect(motion:get().a).to.equal(1)
			expect(motion:get().b).to.equal(0.5)
			expect(motion:isComplete()).to.equal(false)

			motion:step(1)

			expect(motion:get().a).to.equal(1)
			expect(motion:get().b).to.equal(1)
			expect(motion:isComplete()).to.equal(true)
		end)

		it("should mount the solver", function()
			local motion = createMotion(0)
			local step = spy()

			motion:to(step.handle)

			expect(step.calls).to.equal(1)
			expect(step.arguments[1][1]).to.equal(1) -- key
			expect(step.arguments[1][2]).to.be.a("table") -- state
			expect(step.arguments[1][3]).to.equal(0) -- deltaTime
		end)

		it("should accept complex solvers", function()
			local motion = createMotion({ a = 0, b = 0 })

			motion:to(linear({ a = 1 }, { speed = 1 }))
			motion:to(linear({ b = 1 }, { speed = 1 }))
			motion:step(0.5)

			expect(motion:get().a).to.equal(0.5)
			expect(motion:get().b).to.equal(0.5)
			expect(motion:isComplete()).to.equal(false)

			motion:step(0.5)

			expect(motion:get().a).to.equal(1)
			expect(motion:get().b).to.equal(1)
			expect(motion:isComplete()).to.equal(true)
		end)
	end)

	describe("when passing options", function()
		it("should accept heartbeat", function()
			local heartbeat: types.Heartbeat
			local listeners = {}

			local function connect(_self, callback)
				table.insert(listeners, callback)

				local function disconnect()
					table.remove(listeners, table.find(listeners, callback) or -1)
				end

				return { Disconnect = disconnect }
			end

			local function step(deltaTime: number)
				for _, listener in listeners do
					listener(deltaTime)
				end
			end

			heartbeat = {
				Connect = connect,
			}

			local motion = createMotion(0, {
				heartbeat = heartbeat,
				start = true,
			})

			motion:to(linear(1, { speed = 1 }))
			step(0.5)

			expect(motion:get()).to.equal(0.5)
			expect(motion:isComplete()).to.equal(false)

			step(0.5)

			expect(motion:get()).to.equal(1)
			expect(motion:isComplete()).to.equal(true)
		end)
	end)

	describe("patching state", function()
		it("should set a value", function()
			local motion = createMotion({ a = 0, b = 0 })

			motion:to({
				a = linear(1, { speed = 1 }),
				b = linear(1, { speed = 0.5 }),
			})

			motion:step(0.5)

			expect(motion:get().a).to.equal(0.5)
			expect(motion:get().b).to.equal(0.25)

			motion:set({ a = 2 })
			motion:step(0.5)

			expect(motion:get().a).to.equal(1.5)
			expect(motion:get().b).to.equal(0.5)
		end)

		it("should flag as incomplete", function()
			local motion = createMotion({ a = 0, b = 0 })

			motion:to({
				a = linear(1, { speed = 1 }),
				b = linear(1, { speed = 1 }),
			})

			motion:step(1)
			expect(motion:isComplete()).to.equal(true)

			motion:set({ a = 2 })
			expect(motion:isComplete()).to.equal(false)

			motion:step(1)
			expect(motion:isComplete()).to.equal(true)
		end)

		it("should patch the state", function()
			local motion = createMotion({ a = 0, b = 0 })

			motion:patch({
				a = { value = 1 },
			})

			expect(motion:get().a).to.equal(1)
			expect(motion:get().b).to.equal(0)
		end)
	end)
end
]]></string>
              </Properties>
            </Item>
            <Item class="Folder" referent="432">
              <Properties>
                <string name="Name">solvers</string>
              </Properties>
              <Item class="ModuleScript" referent="433">
                <Properties>
                  <string name="Name">immediate</string>
                  <string name="Source"><![CDATA[local types = require(script.Parent.Parent.types)
local intermediate = require(script.Parent.Parent.utils.intermediate)

local function immediate(motionGoal: types.MotionGoal): types.MotionSolver
	local goals = intermediate.to(motionGoal)

	return function(key, state)
		local goal = intermediate.index(goals, key)

		if not goal then
			return false
		end

		state.complete = true
		state.value = goal
	end
end

return immediate
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="434">
                <Properties>
                  <string name="Name">immediate.spec</string>
                  <string name="Source"><![CDATA[return function()
	local createMotion = require(script.Parent.Parent.createMotion)
	local immediate = require(script.Parent.immediate)

	it("should set a value", function()
		local motion = createMotion({ x = 0, y = 0 })

		motion:to(immediate({ x = 1, y = 1 }))
		motion:step(0)

		expect(motion:get()).to.be.ok()
		expect(motion:get().x).to.equal(1)
		expect(motion:get().y).to.equal(1)
		expect(motion:isComplete()).to.equal(true)
	end)

	it("should set multiple values", function()
		local motion = createMotion({ x = 0, y = 0 })

		motion:to({ x = immediate(1), y = immediate(1) })
		motion:step(0)

		expect(motion:get()).to.be.ok()
		expect(motion:get().x).to.equal(1)
		expect(motion:get().y).to.equal(1)
		expect(motion:isComplete()).to.equal(true)

		motion:to({ x = immediate(2), y = immediate(2) })
		motion:step(0)

		expect(motion:get()).to.be.ok()
		expect(motion:get().x).to.equal(2)
		expect(motion:get().y).to.equal(2)
		expect(motion:isComplete()).to.equal(true)
	end)
end
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="435">
                <Properties>
                  <string name="Name">linear</string>
                  <string name="Source"><![CDATA[local types = require(script.Parent.Parent.types)
local config = require(script.Parent.Parent.config)
local intermediate = require(script.Parent.Parent.utils.intermediate)

local function configure(options: types.LinearOptions)
	local speed = if type(options) == "table" then options.speed else options

	return {
		speed = speed or config.linear.default.speed,
	}
end

local function linear(motionGoal: types.MotionGoal, options: types.LinearOptions): types.MotionSolver
	local props = configure(options)
	local goals = intermediate.to(motionGoal)

	return function(key, state, deltaTime)
		local goal = intermediate.index(goals, key)

		if not goal then
			return false
		end

		local velocity = props.speed * deltaTime * math.sign(goal - state.value)

		if math.abs(velocity) >= math.abs(goal - state.value) then
			state.complete = true
			state.value = goal
			state.velocity = 0
		else
			state.value += velocity
			state.velocity = velocity
		end
	end
end

return linear
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="436">
                <Properties>
                  <string name="Name">linear.spec</string>
                  <string name="Source"><![CDATA[return function()
	local createMotion = require(script.Parent.Parent.createMotion)
	local linear = require(script.Parent.linear)

	it("should animate a value", function()
		local motion = createMotion(0)

		motion:to(linear(1, { speed = 1 }))
		motion:step(0.5)

		expect(motion:get()).to.equal(0.5)
		expect(motion:isComplete()).to.equal(false)

		motion:step(0.5)

		expect(motion:get()).to.equal(1)
		expect(motion:isComplete()).to.equal(true)
	end)

	it("should animate multiple values", function()
		local motion = createMotion({ x = 0, y = 0 })

		motion:to(linear({ x = 1, y = 1 }, { speed = 1 }))
		motion:step(0.5)

		expect(motion:get()).to.be.ok()
		expect(motion:get().x).to.equal(0.5)
		expect(motion:get().y).to.equal(0.5)
		expect(motion:isComplete()).to.equal(false)

		motion:step(0.5)

		expect(motion:get()).to.be.ok()
		expect(motion:get().x).to.equal(1)
		expect(motion:get().y).to.equal(1)
		expect(motion:isComplete()).to.equal(true)

		motion:to({
			x = linear(2, { speed = 1 }),
			y = linear(2, { speed = 0.5 }),
		})

		motion:step(0.5)

		expect(motion:get()).to.be.ok()
		expect(motion:get().x).to.equal(1.5)
		expect(motion:get().y).to.equal(1.25)
		expect(motion:isComplete()).to.equal(false)

		motion:step(0.5)

		expect(motion:get()).to.be.ok()
		expect(motion:get().x).to.equal(2)
		expect(motion:get().y).to.equal(1.5)
		expect(motion:isComplete()).to.equal(false)

		motion:step(1)

		expect(motion:get()).to.be.ok()
		expect(motion:get().x).to.equal(2)
		expect(motion:get().y).to.equal(2)
		expect(motion:isComplete()).to.equal(true)
	end)

	it("should complete if overshooting", function()
		local motion = createMotion(0)

		motion:to(linear(1, { speed = 1 }))
		motion:step(1000)

		expect(motion:get()).to.equal(1)
		expect(motion:isComplete()).to.equal(true)
	end)
end
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="437">
                <Properties>
                  <string name="Name">spring</string>
                  <string name="Source"><![CDATA[local types = require(script.Parent.Parent.types)
local config = require(script.Parent.Parent.config)
local intermediate = require(script.Parent.Parent.utils.intermediate)

local STEP = 1 -- milliseconds
local MAX_PASS = 100

local function configure(options: types.SpringOptions)
	local mass = options.mass or 1
	local tension = options.tension or config.spring.default.tension
	local friction = options.friction or config.spring.default.friction

	if options.frequency or options.damping then
		local frequency = options.frequency or 2
		local damping = options.damping or 1

		-- note: multiply frequency instead of dividing so that the
		-- spring's speed increases as frequency increases
		tension = ((2 * math.pi * frequency) ^ 2) * mass
		friction = (4 * math.pi * damping * mass) * frequency
	end

	return {
		mass = mass,
		tension = tension,
		friction = friction,
		position = options.position,
		velocity = options.velocity,
		impulse = options.impulse,
		restingVelocity = options.restingVelocity or 0.001,
		restingPosition = options.restingPosition or 0.0001,
	}
end

local function spring(motionGoal: types.MotionGoal, options: types.SpringOptions?): types.MotionSolver
	local props = configure(options or {})
	local goals = intermediate.to(motionGoal)
	local mounting = true

	return function(key, state, deltaTime)
		local goal = intermediate.index(goals, key)

		if not goal then
			return false
		end

		if mounting then
			mounting = false
			state.value = (props.position or state.value or 0)
			state.velocity = (props.velocity or state.velocity or 0) + (props.impulse or 0)
		end

		local position = state.value
		local velocity = state.velocity or 0
		local passes = math.min(math.ceil((deltaTime * 1000) / STEP), MAX_PASS)

		for _ = 1, passes do
			local springForce = -props.tension * 0.000001 * (position - goal)
			local dampingForce = -props.friction * 0.001 * velocity
			local acceleration = (springForce + dampingForce) / props.mass

			velocity += acceleration * STEP
			position += velocity * STEP
		end

		if math.abs(velocity) < props.restingVelocity and math.abs(position - goal) < props.restingPosition then
			state.complete = true
			state.value = goal
			state.velocity = 0
		else
			state.value = position
			state.velocity = velocity
		end
	end
end

return spring
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="438">
                <Properties>
                  <string name="Name">spring.spec</string>
                  <string name="Source"><![CDATA[return function()
	local createMotion = require(script.Parent.Parent.createMotion)
	local snapshot = require(script.Parent.Parent.utils.snapshot)
	local spring = require(script.Parent.spring)

	local snapshots = {
		default = "[0.37,0.73,0.9,0.96,0.98,0.99,0.99,1]",
		underdamped = "[0.41,0.84,1.01,1.03,1.02,1.01,1]",
		critical = "[0.36,0.71,0.89,0.95,0.98,0.99,0.99,1]",
		overdamped = "[0.31,0.6,0.78,0.87,0.93,0.96,0.97,0.98,0.99]",
		tension_200 = "[0.43,0.81,0.95,0.99,1]",
		tension_300 = "[0.61,0.98,1.03,1.01,1]",
		mass_0_5 = "[0.44,0.74,0.87,0.94,0.97,0.98,0.99,0.99,0.99,1]",
		mass_2 = "[0.27,0.67,0.92,1.03,1.05,1.03,1.02,1.01,0.99,0.99,0.99,1]",
		friction_20 = "[0.43,0.85,1.01,1.03,1.01,1.01,1]",
		friction_30 = "[0.35,0.67,0.84,0.92,0.96,0.98,0.99,0.99,0.99,1]",
	}

	it("should animate a value", function()
		local motion = snapshot.testSnapshot(spring(1), snapshots.default)
		expect(motion:get()).to.equal(1)
		expect(motion:isComplete()).to.equal(true)
	end)

	it("should accept damping ratio", function()
		local motion

		motion = snapshot.testSnapshot(spring(1, { damping = 0.75 }), snapshots.underdamped)
		expect(motion:isComplete()).to.equal(true)

		motion = snapshot.testSnapshot(spring(1, { damping = 1 }), snapshots.critical)
		expect(motion:isComplete()).to.equal(true)

		motion = snapshot.testSnapshot(spring(1, { damping = 1.3 }), snapshots.overdamped)
		expect(motion:isComplete()).to.equal(false) -- takes longer to settle
	end)

	it("should accept tension", function()
		local motion

		motion = snapshot.testSnapshot(spring(1, { tension = 200 }), snapshots.tension_200)
		expect(motion:isComplete()).to.equal(true)

		motion = snapshot.testSnapshot(spring(1, { tension = 300 }), snapshots.tension_300)
		expect(motion:isComplete()).to.equal(true)
	end)

	it("should accept mass", function()
		local motion

		motion = snapshot.testSnapshot(spring(1, { mass = 0.5 }), snapshots.mass_0_5)
		expect(motion:isComplete()).to.equal(true)

		motion = snapshot.testSnapshot(spring(1, { mass = 2 }), snapshots.mass_2)
		expect(motion:isComplete()).to.equal(true)
	end)

	it("should accept friction", function()
		local motion

		motion = snapshot.testSnapshot(spring(1, { friction = 20 }), snapshots.friction_20)
		expect(motion:isComplete()).to.equal(true)

		motion = snapshot.testSnapshot(spring(1, { friction = 30 }), snapshots.friction_30)
		expect(motion:isComplete()).to.equal(true)
	end)

	describe("when passed initial values", function()
		it("should accept position", function()
			local motion = createMotion(0)
			motion:to(spring(1, { position = 0.5 }))
			expect(motion:get()).to.equal(0.5)
		end)

		it("should accept velocity", function()
			local motion = createMotion(0)

			motion:to(spring(1, { velocity = 1000 }))
			expect(motion.state[1].velocity).to.equal(1000)

			motion:step(0.1)
			expect(motion:get() > 1).to.equal(true)
		end)

		it("should apply impulse", function()
			local motion = createMotion(0)
			motion:to(spring(1, { impulse = 1 }))
			motion:to(spring(1, { impulse = 1 }))
			expect(motion.state[1].velocity).to.equal(2)
		end)
	end)
end
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="439">
                <Properties>
                  <string name="Name">tween</string>
                  <string name="Source"><![CDATA[local TweenService = game:GetService("TweenService")

local types = require(script.Parent.Parent.types)
local config = require(script.Parent.Parent.config)
local intermediate = require(script.Parent.Parent.utils.intermediate)
local merge = require(script.Parent.Parent.utils.merge)

local function createTween(from: number, to: number, options: types.TweenOptions): (NumberValue, Tween)
	local tweenInfo = TweenInfo.new(
		options.time,
		options.style,
		options.direction,
		options.repeatCount,
		options.reverses,
		options.delayTime
	)

	local value = Instance.new("NumberValue")
	local tween = TweenService:Create(value, tweenInfo, { Value = to })

	value.Value = from

	return value, tween
end

local function tween(motionGoal: types.MotionGoal, options: types.TweenOptions?): types.MotionSolver
	local props = merge(config.tween.default, options or {})
	local goals = intermediate.to(motionGoal)

	local complete = false
	local value, tweenInstance

	return function(key, state)
		local goal = intermediate.index(goals, key)

		if not goal then
			return false
		end

		if not state.destructor then
			-- todo: this should update on step instead of running in the background
			value, tweenInstance = createTween(state.value, goal, props)

			tweenInstance.Completed:Connect(function()
				complete = true
				value:Destroy()
				tweenInstance:Destroy()
			end)

			tweenInstance:Play()

			function state.destructor()
				tweenInstance:Destroy()
				value:Destroy()
			end
		end

		if complete then
			state.complete = true
			state.value = goal
		else
			state.value = value.Value
		end
	end
end

return tween
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="440">
                <Properties>
                  <string name="Name">tween.spec</string>
                  <string name="Source"><![CDATA[return function()
	local createMotion = require(script.Parent.Parent.createMotion)
	local tween = require(script.Parent.tween)

	-- todo: do not yield in tests

	it("should animate a value", function()
		local motion = createMotion(0)

		motion:to(tween(1, { time = 0.01 }))
		motion:step(0)

		expect(motion:get()).to.equal(0)

		task.wait(0.05)
		motion:step(0)

		expect(motion:get()).to.equal(1)
	end)

	it("should animate multiple values", function()
		local motion = createMotion({ x = 0, y = 0 })

		motion:to(tween({ x = 1, y = 1 }, { time = 0.01 }))
		motion:step(0)

		expect(motion:get()).to.be.ok()
		expect(motion:get().x).to.equal(0)
		expect(motion:get().y).to.equal(0)

		task.wait(0.05)
		motion:step(0)

		expect(motion:get()).to.be.ok()
		expect(motion:get().x).to.equal(1)
		expect(motion:get().y).to.equal(1)

		motion:to({
			x = tween(2, { time = 0.01 }),
			y = tween(2, { time = 0.1 }),
		})

		motion:step(0)

		expect(motion:get()).to.be.ok()
		expect(motion:get().x).to.equal(1)
		expect(motion:get().y).to.equal(1)

		task.wait(0.05)
		motion:step(0)

		expect(motion:get()).to.be.ok()
		expect(motion:get().x).to.equal(2)
		expect(motion:get().y).to.never.equal(2)

		task.wait(0.05)
		motion:step(0)

		expect(motion:get()).to.be.ok()
		expect(motion:get().x).to.equal(2)
		expect(motion:get().y).to.equal(2)
	end)
end
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="441">
              <Properties>
                <string name="Name">types</string>
                <string name="Source"><![CDATA[type Cleanup = () -> ()

export type Heartbeat = {
	Connect: (self: Heartbeat, callback: (deltaTime: number) -> ()) -> Disconnectable,
}

export type Disconnectable = {
	Disconnect: (self: Disconnectable) -> (),
}

export type Partial<T> = { [any]: any } & T

export type SpringOptions = {
	damping: number?,
	frequency: number?,
	mass: number?,
	tension: number?,
	friction: number?,
	position: number?,
	velocity: number?,
	impulse: number?,
	restingVelocity: number?,
	restingPosition: number?,
}

export type LinearOptions = {
	speed: number?,
} | number?

export type TweenOptions = {
	time: number?,
	style: Enum.EasingStyle?,
	direction: Enum.EasingDirection?,
	repeatCount: number?,
	reverses: boolean?,
	delayTime: number?,
}

export type Motion<T = number> = {
	state: { [any]: MotionState },
	start: (self: Motion<T>) -> Cleanup,
	stop: (self: Motion<T>) -> (),
	get: (self: Motion<T>) -> T,
	getVelocity: (self: Motion<T>) -> T,
	set: (self: Motion<T>, value: T | { [any]: number }) -> (),
	patch: (self: Motion<T>, patch: { [any]: Partial<MotionState> }) -> (),
	impulse: (self: Motion<T>, impulse: T | { [any]: number }) -> (),
	to: (self: Motion<T>, goal: MotionSolver | { [any]: MotionSolver }) -> (),
	spring: (self: Motion<T>, goal: T, options: SpringOptions?) -> (),
	linear: (self: Motion<T>, goal: T, options: LinearOptions?) -> (),
	tween: (self: Motion<T>, goal: T, options: TweenOptions?) -> (),
	step: (self: Motion<T>, deltaTime: number) -> T,
	isComplete: (self: Motion<T>) -> boolean,
	onComplete: (self: Motion<T>, callback: (value: T) -> ()) -> Cleanup,
	onStep: (self: Motion<T>, callback: (value: T, deltaTime: number) -> ()) -> Cleanup,
	destroy: (self: Motion<T>) -> (),
}

export type MotionOptions = {
	heartbeat: Heartbeat?,
	start: boolean?,
}

export type MotionState = {
	value: number,
	complete: boolean,
	velocity: number?,
	destructor: (() -> ())?,
}

export type MotionSolver = (key: unknown, state: MotionState, deltaTime: number) -> ()

export type MotionGoal = { [any]: number } | number | UDim2 | UDim | Vector2 | Vector3 | Color3 | CFrame

return nil
]]></string>
              </Properties>
            </Item>
            <Item class="Folder" referent="442">
              <Properties>
                <string name="Name">utils</string>
              </Properties>
              <Item class="ModuleScript" referent="443">
                <Properties>
                  <string name="Name">assign</string>
                  <string name="Source"><![CDATA[local function assign<T>(object: T, ...: { [any]: any }): T
	assert(type(object) == "table", `Expected a table for first argument, got ${type(object)}`)

	for index = 1, select("#", ...) do
		local source = select(index, ...)

		for key, value in source do
			object[key] = value
		end
	end

	return object
end

return assign
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="444">
                <Properties>
                  <string name="Name">graph</string>
                  <string name="Source"><![CDATA[local types = require(script.Parent.Parent.types)

local STEP = 1 / 50
local DURATION = 0.3
local WIDTH = 30

local function graph(label: string, solver: types.MotionSolver)
	local state: types.MotionState = { value = 0, complete = false }
	local output = ""

	for _ = 0, DURATION, STEP do
		output ..= `\n{string.format("%.2f", state.value)}: {string.rep(" ", math.round(state.value * WIDTH))}*`
		solver("value", state, STEP)
	end

	print(`📈 {label}{output}`)
end

return graph
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="445">
                <Properties>
                  <string name="Name">intermediate</string>
                  <string name="Source"><![CDATA[type Intermediate = { [any]: number }

local intermediates = {
	number = {
		to = function(value: number): Intermediate
			return { value }
		end,
		from = function(value: Intermediate): number
			return value[1]
		end,
	},

	table = {
		to = function(value: Intermediate): Intermediate
			return value
		end,
		from = function(value: Intermediate): Intermediate
			return value
		end,
	},

	UDim2 = {
		to = function(value: UDim2): Intermediate
			return { value.X.Scale, value.X.Offset, value.Y.Scale, value.Y.Offset }
		end,
		from = function(value: Intermediate): UDim2
			return UDim2.new(value[1], math.round(value[2]), value[3], math.round(value[4]))
		end,
	},

	UDim = {
		to = function(value: UDim): Intermediate
			return { value.Scale, value.Offset }
		end,
		from = function(value: Intermediate)
			return UDim.new(value[1], math.round(value[2]))
		end,
	},

	Vector2 = {
		to = function(value: Vector2): Intermediate
			return { value.X, value.Y }
		end,
		from = function(value: Intermediate): Vector2
			return Vector2.new(table.unpack(value, 1, 2))
		end,
	},

	Vector3 = {
		to = function(value: Vector3): Intermediate
			return { value.X, value.Y, value.Z }
		end,
		from = function(value: Intermediate): Vector3
			return Vector3.new(table.unpack(value, 1, 3))
		end,
	},

	Color3 = {
		to = function(value: Color3): Intermediate
			return { value.R, value.G, value.B }
		end,
		from = function(value: Intermediate): Color3
			return Color3.new(math.clamp(value[1], 0, 1), math.clamp(value[2], 0, 1), math.clamp(value[3], 0, 1))
		end,
	},

	CFrame = {
		to = function(value: CFrame): Intermediate
			return { value:GetComponents() }
		end,
		from = function(value: Intermediate): CFrame
			return CFrame.new(table.unpack(value))
		end,
	},
}

local function to(value: unknown): Intermediate
	local type = typeof(value)

	if intermediates[type] then
		return intermediates[type].to(value)
	else
		error(`Ripple received an unsupported value '{value}' of type '{type}'`)
	end
end

local function from<T>(value: Intermediate, type: string): T
	if intermediates[type] then
		return intermediates[type].from(value)
	else
		error(`Ripple received an unsupported value '{value}' of type '{type}'`)
	end
end

local function index(value: Intermediate, key: unknown): number?
	return value[key] or value[1]
end

return {
	to = to,
	from = from,
	index = index,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="446">
                <Properties>
                  <string name="Name">merge</string>
                  <string name="Source"><![CDATA[local function merge<T, U>(a: T & { [any]: any }, b: U & { [any]: any }): T & U
	local copy = table.clone(a)

	for key, value in pairs(b) do
		copy[key] = value
	end

	return copy :: never
end

return merge
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="447">
                <Properties>
                  <string name="Name">snapshot</string>
                  <string name="Source"><![CDATA[local HttpService = game:GetService("HttpService")

local types = require(script.Parent.Parent.types)
local createMotion = require(script.Parent.Parent.createMotion)

local STEP = 0.1
local MAX_LENGTH = 20

local function createSnapshot(solver: types.MotionSolver, length: number?)
	local data: { number } = {}
	local motion = createMotion(0)

	motion:to(solver)

	for _ = 1, length or MAX_LENGTH do
		local value = motion:step(STEP)

		value = if value < 1
			then math.floor(value * 100) / 100
			elseif value > 1 then math.ceil(value * 100) / 100
			else value

		table.insert(data, value)

		if value == 1 then
			break
		end
	end

	return HttpService:JSONEncode(data), motion
end

local function testSnapshot(solver: types.MotionSolver, expected: string)
	local length = select(2, string.gsub(expected, ",", ",")) + 1
	local snapshot, motion = createSnapshot(solver, length)

	if snapshot ~= expected then
		error(`Snapshot does not match expected value.\n\nExpected:\n{expected}\n\nActual:\n{snapshot}`, 2)
	end

	return motion
end

return {
	createSnapshot = createSnapshot,
	testSnapshot = testSnapshot,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="448">
                <Properties>
                  <string name="Name">spy</string>
                  <string name="Source"><![CDATA[type Spy = {
	calls: number,
	arguments: { { unknown } },
	handle: (...any) -> (),
}

local function spy(): Spy
	local self: Spy

	local function handle(...)
		self.calls += 1
		self.arguments[self.calls] = { ... }
	end

	self = {
		calls = 0,
		arguments = {},
		handle = handle,
	}

	return self
end

return spy
]]></string>
                </Properties>
              </Item>
            </Item>
          </Item>
          <Item class="ModuleScript" referent="449">
            <Properties>
              <string name="Name">RoactTS</string>
              <string name="Source"><![CDATA[local Packages = script.Parent :: any

local React = require(Packages.React)
local RoactCompat = require(Packages.RoactCompat)

local exports = table.clone(React)

for key, value in RoactCompat do
	exports[key] = value
end

return exports
]]></string>
            </Properties>
            <Item class="Folder" referent="450">
              <Properties>
                <string name="Name">types</string>
              </Properties>
            </Item>
          </Item>
          <Item class="ModuleScript" referent="451">
            <Properties>
              <string name="Name">RoactCompat</string>
              <string name="Source"><![CDATA[--!strict
--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local Packages = script.Parent

local React = require(Packages.React)
local ReactRoblox = require(Packages.ReactRoblox)
local Shared = require(Packages.Shared)

local RoactTree = require(script.RoactTree)

return {
	-- Overlapping contents of public `React` interface
	Component = React.Component,
	PureComponent = React.PureComponent,
	createElement = React.createElement,
	createRef = React.createRef,
	forwardRef = React.forwardRef,
	createContext = React.createContext,
	-- This public interface is aligned but is a deviation in React. It's
	-- necessary to accommodate lua table semantics when merging state
	None = React.None,

	-- Compatibility layer for top-level interface, stands in for `createRoot`
	-- and similar APIs
	mount = RoactTree.mount,
	update = RoactTree.update,
	unmount = RoactTree.unmount,

	-- API compatibility layers to accommodate old interfaces
	createFragment = require(script.createFragment),
	oneChild = require(script.oneChild),
	setGlobalConfig = require(script.setGlobalConfig),
	Portal = require(script.Portal),

	-- Compatibility layer for special symbol keys which will be replaced with
	-- reserved prop names in Roact 17
	Ref = "ref",
	-- FIXME: React actually _does_ have a `.Children`, which has different
	-- behavior (none of which overlaps with Roact). Should we keep this as is
	-- and accept that React.Children and RoactCompat.Children will be totally
	-- different things?
	Children = "children",

	-- Event/Change keys for Roact-specific event subscription behavior
	Event = Shared.Event,
	Change = Shared.Change,

	-- Binding interface entry-point for Roact-specific 'bindings' feature
	createBinding = React.createBinding,
	joinBindings = React.joinBindings,

	act = ReactRoblox.act,
}
]]></string>
            </Properties>
            <Item class="ModuleScript" referent="452">
              <Properties>
                <string name="Name">Portal</string>
                <string name="Source"><![CDATA[--!strict
--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]

local Packages = script.Parent.Parent
local ReactRoblox = require(Packages.ReactRoblox)

local warnOnce = require(script.Parent.warnOnce)

local function PortalComponent(props)
	if _G.__DEV__ and _G.__COMPAT_WARNINGS__ then
		warnOnce("Roact.Portal", "Please use the createPortal API on ReactRoblox instead")
	end
	return ReactRoblox.createPortal(props.children, props.target)
end

return PortalComponent
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="453">
              <Properties>
                <string name="Name">RoactTree</string>
                <string name="Source"><![CDATA[--!strict
--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local Packages = script.Parent.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)
local inspect = LuauPolyfill.util.inspect
local ReactRoblox = require(Packages.ReactRoblox)
type RootType = ReactRoblox.RootType

local warnOnce = require(script.Parent.warnOnce)

type RoactHandle = {
	root: RootType,
	key: string | number,
	parent: any, -- TODO: Instance?
}

local function mount(element: any, parent: any, key: string?): RoactHandle
	if _G.__DEV__ and _G.__COMPAT_WARNINGS__ then
		warnOnce("mount", "Please use the createRoot API in ReactRoblox")
	end

	if parent ~= nil and typeof(parent) ~= "Instance" then
		error(
			string.format(
				"Cannot mount element (`%s`) into a parent that is not a Roblox Instance (got type `%s`) \n%s",
				(function()
					if element then
						return tostring(element.type)
					end
					return "<unknown>"
				end)(),
				typeof(parent),
				(function()
					if parent ~= nil then
						return inspect(parent)
					end
					return ""
				end)()
			)
		)
	end

	-- Since we use portals to actually parent to the provided parent argument,
	-- the container instance that we provide to createRoot is just a
	-- dummy instance.
	local root
	if _G.__ROACT_17_COMPAT_LEGACY_ROOT__ then
		root = ReactRoblox.createLegacyRoot(Instance.new("Folder"))
	else
		root = ReactRoblox.createRoot(Instance.new("Folder"))
	end
	if parent == nil then
		parent = Instance.new("Folder")
		parent.Name = "Target"
	end
	if key == nil then
		if _G.__ROACT_17_COMPAT_LEGACY_ROOT__ then
			key = "ReactLegacyRoot"
		else
			key = "ReactRoot"
		end
	end

	-- TODO: remove INLINE_ACT flag when all tests are updated to use
	-- `act` explicitly
	if _G.__ROACT_17_INLINE_ACT__ then
		ReactRoblox.act(function()
			root:render(ReactRoblox.createPortal({ [key] = element }, parent))
		end)
	else
		root:render(ReactRoblox.createPortal({ [key] = element }, parent))
	end

	return {
		root = root,
		-- To preserve the same key and portal to the same parent on update, we
		-- need to stash them in the opaque "tree" reference returned by `mount`
		parent = parent,
		key = key :: string,
	}
end

local function update(roactHandle: RoactHandle, element)
	if _G.__DEV__ and _G.__COMPAT_WARNINGS__ then
		warnOnce("update", "Please use the createRoot API in ReactRoblox")
	end

	local key = roactHandle.key
	local parent = roactHandle.parent
	-- TODO: remove INLINE_ACT flag when all tests are updated to use
	-- `act` explicitly
	if _G.__ROACT_17_INLINE_ACT__ then
		ReactRoblox.act(function()
			roactHandle.root:render(ReactRoblox.createPortal({ [key :: string] = element }, parent))
		end)
	else
		roactHandle.root:render(ReactRoblox.createPortal({ [key :: string] = element }, parent))
	end

	return roactHandle
end

local function unmount(roactHandle: RoactHandle)
	if _G.__DEV__ and _G.__COMPAT_WARNINGS__ then
		warnOnce("unmount", "Please use the createRoot API in ReactRoblox")
	end

	-- TODO: remove INLINE_ACT flag when all tests are updated to use
	-- `act` explicitly
	if _G.__ROACT_17_INLINE_ACT__ then
		ReactRoblox.act(function()
			roactHandle.root:unmount()
		end)
	else
		roactHandle.root:unmount()
	end
end

return {
	mount = mount,
	update = update,
	unmount = unmount,
}
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="454">
              <Properties>
                <string name="Name">createFragment</string>
                <string name="Source"><![CDATA[--!strict
--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local Packages = script.Parent.Parent
local React = require(Packages.React)

local warnOnce = require(script.Parent.warnOnce)

return function(elements)
	if _G.__DEV__ and _G.__COMPAT_WARNINGS__ then
		warnOnce("createFragment", "Please instead use:\n\tReact.createElement(React.Fragment, ...)")
	end
	return React.createElement(React.Fragment, nil, elements)
end
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="455">
              <Properties>
                <string name="Name">oneChild</string>
                <string name="Source"><![CDATA[-- upstream: https://github.com/Roblox/roact/blob/master/src/oneChild.lua
--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the Apache License, Version 2.0 (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
local Packages = script.Parent.Parent
local React = require(Packages.React)

local warnOnce = require(script.Parent.warnOnce)

local function oneChild(children)
	if _G.__DEV__ and _G.__COMPAT_WARNINGS__ then
		warnOnce(
			"oneChild",
			"You likely don't need this at all! If you were assigning children "
				.. "via `React.oneChild(someChildren)`, you can simply use "
				.. "`someChildren` directly."
		)
	end

	-- This behavior is a bit different from upstream, so we're adapting current
	-- Roact's logic (which will unwrap a table with a single member)
	if not children then
		return nil
	end

	local key, child = next(children)

	if not child then
		return nil
	end

	local after = next(children, key)

	if after then
		error("Expected at most one child, had more than one child.", 2)
	end

	return React.Children.only(child)
end

return oneChild
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="456">
              <Properties>
                <string name="Name">setGlobalConfig</string>
                <string name="Source"><![CDATA[--!strict
--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]

local warnOnce = require(script.Parent.warnOnce)

return function(_config)
	if _G.__DEV__ and _G.__COMPAT_WARNINGS__ then
		warnOnce(
			"setGlobalConfig",
			"Roact 17 uses a `_G.__DEV__` flag to enable development behavior. "
				.. "If you're seeing this warning, you already have it enabled. "
				.. "Please remove any redundant uses of `setGlobalConfig`."
		)
	end
	-- No equivalent behavior can be applied here
end
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="457">
              <Properties>
                <string name="Name">warnOnce</string>
                <string name="Source"><![CDATA[--!strict
--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]

local Packages = script.Parent.Parent
local console = require(Packages.Shared).console

local warnedAbout = {}

local function warnOnce(name: string, message: string)
	if not warnedAbout[name] then
		console.warn(
			"The legacy Roact API '%s' is deprecated, and will be removed " .. "in a future release.\n\n%s",
			name,
			message
		)
	end
	warnedAbout[name] = true
end

return warnOnce
]]></string>
              </Properties>
            </Item>
          </Item>
          <Item class="Folder" referent="458">
            <Properties>
              <string name="Name">roact-hooks</string>
            </Properties>
            <Item class="ModuleScript" referent="459">
              <Properties>
                <string name="Name">src</string>
                <string name="Source"><![CDATA[local createUseBinding = require(script.createUseBinding)
local createUseCallback = require(script.createUseCallback)
local createUseContext = require(script.createUseContext)
local createUseEffect = require(script.createUseEffect)
local createUseMemo = require(script.createUseMemo)
local createUseReducer = require(script.createUseReducer)
local createUseState = require(script.createUseState)
local createUseValue = require(script.createUseValue)

local Hooks = {}

local function createHooks(roact, component)
	local useEffect = createUseEffect(component)
	local useState = createUseState(component)
	local useValue = createUseValue(component)

	local useBinding = createUseBinding(roact, useValue)
	local useContext = createUseContext(component, useEffect, useState)
	local useMemo = createUseMemo(useValue)

	local useCallback = createUseCallback(useMemo)

	local useReducer = createUseReducer(useCallback, useState)

	return {
		useBinding = useBinding,
		useCallback = useCallback,
		useContext = useContext,
		useEffect = useEffect,
		useMemo = useMemo,
		useReducer = useReducer,
		useState = useState,
		useValue = useValue,
	}
end

function Hooks.new(roact)
	return function(render, options)
		assert(typeof(render) == "function", "Hooked components must be functions.")

		if options == nil then
			options = {}
		end

		local componentType = options.componentType
		local name = options.name or debug.info(render, "n")

		local classComponent

		if componentType == nil or componentType == "Component" then
			classComponent = roact.Component:extend(name)
		elseif componentType == "PureComponent" then
			classComponent = roact.PureComponent:extend(name)
		else
			error(string.format("'%s' is not a valid componentType. componentType must either be nil, 'Component', or 'PureComponent'",  tostring(componentType)))
		end

		classComponent.defaultProps = options.defaultProps
		classComponent.validateProps = options.validateProps

		function classComponent:init()
			self.defaultStateValues = {}
			self.effectDependencies = {}
			self.effects = {}
			self.unmountEffects = {}

			self.hooks = createHooks(roact, self)
		end

		function classComponent:runEffects()
			for index = 1, self.hookCounter do
				local effectData = self.effects[index]
				if effectData == nil then
					continue
				end

				local effect, dependsOn = unpack(effectData)

				if dependsOn ~= nil then
					local lastDependencies = self.effectDependencies[index]
					if lastDependencies ~= nil then
						local anythingChanged = false

						for dependencyIndex, dependency in pairs(dependsOn) do
							if lastDependencies[dependencyIndex] ~= dependency then
								anythingChanged = true
								break
							end
						end

						if not anythingChanged then
							continue
						end
					end

					self.effectDependencies[index] = dependsOn
				end

				local unmountEffect = self.unmountEffects[index]
				if unmountEffect ~= nil then
					unmountEffect()
				end

				self.unmountEffects[index] = effect()
			end
		end

		function classComponent:didMount()
			self:runEffects()
		end

		function classComponent:didUpdate()
			self:runEffects()
		end

		function classComponent:willUnmount()
			for index = 1, self.hookCounter do
				local unmountEffect = self.unmountEffects[index]

				if unmountEffect ~= nil then
					unmountEffect()
				end
			end
		end

		function classComponent:render()
			self.hookCounter = 0

			return render(self.props, self.hooks)
		end

		return classComponent
	end
end

return Hooks
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="460">
                <Properties>
                  <string name="Name">createUseBinding</string>
                  <string name="Source"><![CDATA[local function createUseBinding(roact, useValue)
	return function(defaultValue)
		return unpack(useValue({
			roact.createBinding(defaultValue)
		}).value)
	end
end

return createUseBinding
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="461">
                <Properties>
                  <string name="Name">createUseCallback</string>
                  <string name="Source"><![CDATA[local function createUseCallback(useMemo)
	return function(callback, dependencies)
		return useMemo(function()
			return callback
		end, dependencies)
	end
end

return createUseCallback
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="462">
                <Properties>
                  <string name="Name">createUseContext</string>
                  <string name="Source"><![CDATA[local function createUseContext(component, useEffect, useState)
	-- HACK: I'd like to just use the values from the consumers directly.
	-- However, we don't know what contexts to listen to until `useContext` is called.
	-- Thus, we do this insanely unstable method for doing it. :)
	local fakeConsumer = setmetatable({}, {
		__index = component,
	})

	return function(context)
		context.Consumer.init(fakeConsumer)

		local contextEntry = fakeConsumer.contextEntry
		local value, setValue = useState(contextEntry.value)

		useEffect(function()
			return contextEntry.onUpdate:subscribe(setValue)
		end, {})

		return value
	end
end

return createUseContext
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="463">
                <Properties>
                  <string name="Name">createUseEffect</string>
                  <string name="Source"><![CDATA[local function createUseEffect(component)
	return function(callback, dependsOn)
		assert(typeof(callback) == "function", "useEffect callback is not a function")

		component.hookCounter += 1
		local hookCount = component.hookCounter

		-- TODO: This mutates the component in the middle of render. That's bad, right?
		-- It's idempotent, so it shouldn't matter.
		-- Is there a way to do this that keeps `render` truly pure?
		component.effects[hookCount] = { callback, dependsOn }
	end
end

return createUseEffect
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="464">
                <Properties>
                  <string name="Name">createUseMemo</string>
                  <string name="Source"><![CDATA[local function createUseMemo(useValue)
	return function(createValue, dependencies)
		local currentValue = useValue(nil)

		local needToRecalculate = false

		if currentValue.value == nil then
			-- Defers calling of `createValue()` unless it is necessary.
			needToRecalculate = true
		else
			for index, dependency in pairs(dependencies) do
				if dependency ~= currentValue.value.dependencies[index] then
					needToRecalculate = true
					break
				end
			end
		end

		if needToRecalculate then
			currentValue.value = {
				dependencies = dependencies,
				memoizedValue = { createValue() },
			}
		end

		return unpack(currentValue.value.memoizedValue)
	end
end

return createUseMemo
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="465">
                <Properties>
                  <string name="Name">createUseReducer</string>
                  <string name="Source"><![CDATA[local function createUseReducer(useCallback, useState)
	return function(reducer, initialState)
		local state, setState = useState(initialState)
		local dispatch = useCallback(function(action)
			setState(reducer(state, action))
		end, { state })

		return state, dispatch
	end
end

return createUseReducer
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="466">
                <Properties>
                  <string name="Name">createUseState</string>
                  <string name="Source"><![CDATA[local NONE = {}

local function extractValue(valueOrCallback, currentValue)
	if type(valueOrCallback) == "function" then
		return valueOrCallback(currentValue)
	else
		return valueOrCallback
	end
end

local function createUseState(component)
	local setValues = {}

	return function(defaultValue)
		component.hookCounter += 1
		local hookCount = component.hookCounter
		local value = component.state[hookCount]

		if value == nil then
			local storedDefaultValue = component.defaultStateValues[hookCount]
			if storedDefaultValue == NONE then
				value = nil
			elseif storedDefaultValue ~= nil then
				value = storedDefaultValue
			elseif type(defaultValue) == "function" then
				value = defaultValue()

				if value == nil then
					component.defaultStateValues[hookCount] = NONE
				else
					component.defaultStateValues[hookCount] = value
				end
			else
				value = defaultValue
				component.defaultStateValues[hookCount] = value
			end
		elseif value == NONE then
			value = nil
		end

		local setValue = setValues[hookCount]
		if setValue == nil then
			setValue = function(newValue)
				local currentValue = component.state[hookCount]

				if currentValue == nil then
					currentValue = component.defaultStateValues[hookCount]
				end

				if currentValue == NONE then
					currentValue = nil
				end

				newValue = extractValue(newValue, currentValue)

				if newValue == nil then
					newValue = NONE
				end

				component:setState({
					[hookCount] = newValue,
				})
			end

			setValues[hookCount] = setValue
		end

		return value, setValue
	end
end

return createUseState
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="467">
                <Properties>
                  <string name="Name">createUseValue</string>
                  <string name="Source"><![CDATA[local function createUseValue(component)
	return function(defaultValue)
		component.hookCounter += 1
		local hookCount = component.hookCounter

		if component.values == nil then
			component.values = {}
		end

		if component.values[hookCount] == nil then
			component.values[hookCount] = { value = defaultValue }
		end

		return component.values[hookCount]
	end
end

return createUseValue
]]></string>
                </Properties>
              </Item>
            </Item>
          </Item>
          <Item class="Folder" referent="468">
            <Properties>
              <string name="Name">rodux</string>
            </Properties>
            <Item class="ModuleScript" referent="469">
              <Properties>
                <string name="Name">src</string>
                <string name="Source"><![CDATA[local Store = require(script.Store)
local createReducer = require(script.createReducer)
local combineReducers = require(script.combineReducers)
local makeActionCreator = require(script.makeActionCreator)
local loggerMiddleware = require(script.loggerMiddleware)
local thunkMiddleware = require(script.thunkMiddleware)

return {
	Store = Store,
	createReducer = createReducer,
	combineReducers = combineReducers,
	makeActionCreator = makeActionCreator,
	loggerMiddleware = loggerMiddleware.middleware,
	thunkMiddleware = thunkMiddleware,
}
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="470">
                <Properties>
                  <string name="Name">NoYield</string>
                  <string name="Source"><![CDATA[--!nocheck

--[[
	Calls a function and throws an error if it attempts to yield.

	Pass any number of arguments to the function after the callback.

	This function supports multiple return; all results returned from the
	given function will be returned.
]]

local function resultHandler(co, ok, ...)
	if not ok then
		local message = (...)
		error(debug.traceback(co, message), 2)
	end

	if coroutine.status(co) ~= "dead" then
		error(debug.traceback(co, "Attempted to yield inside changed event!"), 2)
	end

	return ...
end

local function NoYield(callback, ...)
	local co = coroutine.create(callback)

	return resultHandler(co, coroutine.resume(co, ...))
end

return NoYield
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="471">
                <Properties>
                  <string name="Name">Signal</string>
                  <string name="Source">--[[
	A limited, simple implementation of a Signal.

	Handlers are fired in order, and (dis)connections are properly handled when
	executing an event.
]]
local function immutableAppend(list, ...)
	local new = {}
	local len = #list

	for key = 1, len do
		new[key] = list[key]
	end

	for i = 1, select("#", ...) do
		new[len + i] = select(i, ...)
	end

	return new
end

local function immutableRemoveValue(list, removeValue)
	local new = {}

	for i = 1, #list do
		if list[i] ~= removeValue then
			table.insert(new, list[i])
		end
	end

	return new
end

local Signal = {}

Signal.__index = Signal

function Signal.new(store)
	local self = {
		_listeners = {},
		_store = store
	}

	setmetatable(self, Signal)

	return self
end

function Signal:connect(callback)
	if typeof(callback) ~= "function" then
		error("Expected the listener to be a function.")
	end

	if self._store and self._store._isDispatching then
		error(
			'You may not call store.changed:connect() while the reducer is executing. ' ..
				'If you would like to be notified after the store has been updated, subscribe from a ' ..
				'component and invoke store:getState() in the callback to access the latest state. '
		)
	end

	local listener = {
		callback = callback,
		disconnected = false,
		connectTraceback = debug.traceback(),
		disconnectTraceback = nil
	}

	self._listeners = immutableAppend(self._listeners, listener)

	local function disconnect()
		if listener.disconnected then
			error((
				"Listener connected at: \n%s\n" ..
				"was already disconnected at: \n%s\n"
			):format(
				tostring(listener.connectTraceback),
				tostring(listener.disconnectTraceback)
			))
		end

		if self._store and self._store._isDispatching then
			error("You may not unsubscribe from a store listener while the reducer is executing.")
		end

		listener.disconnected = true
		listener.disconnectTraceback = debug.traceback()
		self._listeners = immutableRemoveValue(self._listeners, listener)
	end

	return {
		disconnect = disconnect
	}
end

function Signal:fire(...)
	for _, listener in ipairs(self._listeners) do
		if not listener.disconnected then
			listener.callback(...)
		end
	end
end

return Signal</string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="472">
                <Properties>
                  <string name="Name">Store</string>
                  <string name="Source"><![CDATA[local RunService = game:GetService("RunService")

local Signal = require(script.Parent.Signal)
local NoYield = require(script.Parent.NoYield)

local ACTION_LOG_LENGTH = 3

local rethrowErrorReporter = {
	reportReducerError = function(prevState, action, errorResult)
		error(string.format("Received error: %s\n\n%s", errorResult.message, errorResult.thrownValue))
	end,
	reportUpdateError = function(prevState, currentState, lastActions, errorResult)
		error(string.format("Received error: %s\n\n%s", errorResult.message, errorResult.thrownValue))
	end,
}

local function tracebackReporter(message)
	return debug.traceback(tostring(message))
end

local Store = {}

-- This value is exposed as a private value so that the test code can stay in
-- sync with what event we listen to for dispatching the Changed event.
-- It may not be Heartbeat in the future.
Store._flushEvent = RunService.Heartbeat

Store.__index = Store

--[[
	Create a new Store whose state is transformed by the given reducer function.

	Each time an action is dispatched to the store, the new state of the store
	is given by:

		state = reducer(state, action)

	Reducers do not mutate the state object, so the original state is still
	valid.
]]
function Store.new(reducer, initialState, middlewares, errorReporter)
	assert(typeof(reducer) == "function", "Bad argument #1 to Store.new, expected function.")
	assert(middlewares == nil or typeof(middlewares) == "table", "Bad argument #3 to Store.new, expected nil or table.")
	if middlewares ~= nil then
		for i=1, #middlewares, 1 do
			assert(
				typeof(middlewares[i]) == "function",
				("Expected the middleware ('%s') at index %d to be a function."):format(tostring(middlewares[i]), i)
			)
		end
	end

	local self = {}

	self._errorReporter = errorReporter or rethrowErrorReporter
	self._isDispatching = false
	self._reducer = reducer
	local initAction = {
		type = "@@INIT",
	}
	self._actionLog = { initAction }
	local ok, result = xpcall(function()
		self._state = reducer(initialState, initAction)
	end, tracebackReporter)
	if not ok then
		self._errorReporter.reportReducerError(initialState, initAction, {
			message = "Caught error in reducer with init",
			thrownValue = result,
		})
		self._state = initialState
	end
	self._lastState = self._state

	self._mutatedSinceFlush = false
	self._connections = {}

	self.changed = Signal.new(self)

	setmetatable(self, Store)

	local connection = self._flushEvent:Connect(function()
		self:flush()
	end)
	table.insert(self._connections, connection)

	if middlewares then
		local unboundDispatch = self.dispatch
		local dispatch = function(...)
			return unboundDispatch(self, ...)
		end

		for i = #middlewares, 1, -1 do
			local middleware = middlewares[i]
			dispatch = middleware(dispatch, self)
		end

		self.dispatch = function(_self, ...)
			return dispatch(...)
		end
	end

	return self
end

--[[
	Get the current state of the Store. Do not mutate this!
]]
function Store:getState()
	if self._isDispatching then
		error(("You may not call store:getState() while the reducer is executing. " ..
			"The reducer (%s) has already received the state as an argument. " ..
			"Pass it down from the top reducer instead of reading it from the store."):format(tostring(self._reducer)))
	end

	return self._state
end

--[[
	Dispatch an action to the store. This allows the store's reducer to mutate
	the state of the application by creating a new copy of the state.

	Listeners on the changed event of the store are notified when the state
	changes, but not necessarily on every Dispatch.
]]
function Store:dispatch(action)
	if typeof(action) ~= "table" then
		error(("Actions must be tables. " ..
			"Use custom middleware for %q actions."):format(typeof(action)),
			2
		)
	end

	if action.type == nil then
		error("Actions may not have an undefined 'type' property. " ..
			"Have you misspelled a constant? \n" ..
			tostring(action), 2)
	end

	if self._isDispatching then
		error("Reducers may not dispatch actions.")
	end

	local ok, result = pcall(function()
		self._isDispatching = true
		self._state = self._reducer(self._state, action)
		self._mutatedSinceFlush = true
	end)

	self._isDispatching = false

	if not ok then
		self._errorReporter.reportReducerError(
			self._state,
			action,
			{
				message = "Caught error in reducer",
				thrownValue = result,
			}
		)
	end

	if #self._actionLog == ACTION_LOG_LENGTH then
		table.remove(self._actionLog, 1)
	end
	table.insert(self._actionLog, action)
end

--[[
	Marks the store as deleted, disconnecting any outstanding connections.
]]
function Store:destruct()
	for _, connection in ipairs(self._connections) do
		connection:Disconnect()
	end

	self._connections = nil
end

--[[
	Flush all pending actions since the last change event was dispatched.
]]
function Store:flush()
	if not self._mutatedSinceFlush then
		return
	end

	self._mutatedSinceFlush = false

	-- On self.changed:fire(), further actions may be immediately dispatched, in
	-- which case self._lastState will be set to the most recent self._state,
	-- unless we cache this value first
	local state = self._state

	local ok, errorResult = xpcall(function()
		-- If a changed listener yields, *very* surprising bugs can ensue.
		-- Because of that, changed listeners cannot yield.
		NoYield(function()
			self.changed:fire(state, self._lastState)
		end)
	end, tracebackReporter)

	if not ok then
		self._errorReporter.reportUpdateError(
			self._lastState,
			state,
			self._actionLog,
			{
				message = "Caught error flushing store updates",
				thrownValue = errorResult,
			}
		)
	end

	self._lastState = state
end

return Store
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="473">
                <Properties>
                  <string name="Name">combineReducers</string>
                  <string name="Source"><![CDATA[--[[
	Create a composite reducer from a map of keys and sub-reducers.
]]
local function combineReducers(map)
	return function(state, action)
		-- If state is nil, substitute it with a blank table.
		if state == nil then
			state = {}
		end

		local newState = {}

		for key, reducer in pairs(map) do
			-- Each reducer gets its own state, not the entire state table
			newState[key] = reducer(state[key], action)
		end

		return newState
	end
end

return combineReducers
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="474">
                <Properties>
                  <string name="Name">createReducer</string>
                  <string name="Source"><![CDATA[return function(initialState, handlers)
	return function(state, action)
		if state == nil then
			state = initialState
		end

		local handler = handlers[action.type]

		if handler then
			return handler(state, action)
		end

		return state
	end
end
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="475">
                <Properties>
                  <string name="Name">loggerMiddleware</string>
                  <string name="Source"><![CDATA[-- We want to be able to override outputFunction in tests, so the shape of this
-- module is kind of unconventional.
--
-- We fix it this weird shape in init.lua.
local prettyPrint = require(script.Parent.prettyPrint)
local loggerMiddleware = {
	outputFunction = print,
}

function loggerMiddleware.middleware(nextDispatch, store)
	return function(action)
		local result = nextDispatch(action)

		loggerMiddleware.outputFunction(("Action dispatched: %s\nState changed to: %s"):format(
			prettyPrint(action),
			prettyPrint(store:getState())
		))

		return result
	end
end

return loggerMiddleware
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="476">
                <Properties>
                  <string name="Name">makeActionCreator</string>
                  <string name="Source"><![CDATA[--[[
	A helper function to define a Rodux action creator with an associated name.
]]
local function makeActionCreator(name, fn)
	assert(type(name) == "string", "Bad argument #1: Expected a string name for the action creator")

	assert(type(fn) == "function", "Bad argument #2: Expected a function that creates action objects")

	return setmetatable({
		name = name,
	}, {
		__call = function(self, ...)
			local result = fn(...)

			assert(type(result) == "table", "Invalid action: An action creator must return a table")

			result.type = name

			return result
		end
	})
end

return makeActionCreator
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="477">
                <Properties>
                  <string name="Name">prettyPrint</string>
                  <string name="Source">local indent = "    "

local function prettyPrint(value, indentLevel)
	indentLevel = indentLevel or 0
	local output = {}

	if typeof(value) == "table" then
		table.insert(output, "{\n")

		for tableKey, tableValue in pairs(value) do
			table.insert(output, indent:rep(indentLevel + 1))
			table.insert(output, tostring(tableKey))
			table.insert(output, " = ")

			table.insert(output, prettyPrint(tableValue, indentLevel + 1))
			table.insert(output, "\n")
		end

		table.insert(output, indent:rep(indentLevel))
		table.insert(output, "}")
	elseif typeof(value) == "string" then
		table.insert(output, string.format("%q", value))
		table.insert(output, " (string)")
	else
		table.insert(output, tostring(value))
		table.insert(output, " (")
		table.insert(output, typeof(value))
		table.insert(output, ")")
	end

	return table.concat(output, "")
end

return prettyPrint</string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="478">
                <Properties>
                  <string name="Name">thunkMiddleware</string>
                  <string name="Source"><![CDATA[--[[
	A middleware that allows for functions to be dispatched.
	Functions will receive a single argument, the store itself.
	This middleware consumes the function; middleware further down the chain
	will not receive it.
]]
local function tracebackReporter(message)
	return debug.traceback(message)
end

local function thunkMiddleware(nextDispatch, store)
	return function(action)
		if typeof(action) == "function" then
			local ok, result = xpcall(function()
				return action(store)
			end, tracebackReporter)

			if not ok then
				-- report the error and move on so it's non-fatal app
				store._errorReporter.reportReducerError(store:getState(), action, {
					message = "Caught error in thunk",
					thrownValue = result,
				})
				return nil
			end

			return result
		end

		return nextDispatch(action)
	end
end

return thunkMiddleware
]]></string>
                </Properties>
              </Item>
            </Item>
          </Item>
          <Item class="Folder" referent="479">
            <Properties>
              <string name="Name">rust-classes</string>
            </Properties>
            <Item class="ModuleScript" referent="480">
              <Properties>
                <string name="Name">out</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.0.4
local TS = _G[script]
-- eslint-disable-next-line simple-import-sort/imports
local lazyRegister = TS.import(script, script, "util", "lazyLoad").lazyRegister
local _HashMap = TS.import(script, script, "classes", "HashMap")
local Entry = _HashMap.Entry
local HashMap = _HashMap.HashMap
lazyRegister("HashMap", HashMap)
local Iterator = TS.import(script, script, "classes", "Iterator").Iterator
lazyRegister("Iterator", Iterator)
local Option = TS.import(script, script, "classes", "Option").Option
lazyRegister("Option", Option)
local OptionMut = TS.import(script, script, "classes", "OptionMut").OptionMut
lazyRegister("OptionMut", OptionMut)
local Result = TS.import(script, script, "classes", "Result").Result
lazyRegister("Result", Result)
local Vec = TS.import(script, script, "classes", "Vec").Vec
lazyRegister("Vec", Vec)
local unit = TS.import(script, script, "util", "Unit").unit
return {
	Entry = Entry,
	HashMap = HashMap,
	Iterator = Iterator,
	Option = Option,
	OptionMut = OptionMut,
	Result = Result,
	unit = unit,
	Vec = Vec,
}
]]></string>
              </Properties>
              <Item class="Folder" referent="481">
                <Properties>
                  <string name="Name">classes</string>
                </Properties>
                <Item class="ModuleScript" referent="482">
                  <Properties>
                    <string name="Name">HashMap</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.0.4
local TS = _G[script]
local lazyGet = TS.import(script, script.Parent.Parent, "util", "lazyLoad").lazyGet
local _sizeHint = TS.import(script, script.Parent.Parent, "util", "sizeHint")
local fixedSizeHint = _sizeHint.fixedSizeHint
local upperSizeHint = _sizeHint.upperSizeHint
local Iterator
lazyGet("Iterator", function(c)
	Iterator = c
end)
local Option
lazyGet("Option", function(c)
	Option = c
end)
local Result
lazyGet("Result", function(c)
	Result = c
end)
local Vec
lazyGet("Vec", function(c)
	Vec = c
end)
local Entry
do
	Entry = setmetatable({}, {
		__tostring = function()
			return "Entry"
		end,
	})
	Entry.__index = Entry
	function Entry.new(...)
		local self = setmetatable({}, Entry)
		return self:constructor(...) or self
	end
	function Entry:constructor(map, index)
		self.map = map
		self.index = index
	end
	function Entry:construct(map, key)
		return Entry.new(map, key)
	end
	function Entry:orInsert(def)
		return self.map:get(self.index):unwrapOrElse(function()
			self.map:insert(self.index, def)
			return def
		end)
	end
	function Entry:orInsertWith(def)
		return self.map:get(self.index):unwrapOrElse(function()
			local val = def()
			self.map:insert(self.index, val)
			return val
		end)
	end
	function Entry:orInsertWithKey(def)
		return self.map:get(self.index):unwrapOrElse(function()
			local val = def(self.index)
			self.map:insert(self.index, val)
			return val
		end)
	end
	function Entry:key()
		return self.index
	end
	function Entry:andModify(f)
		local val = self.map:get(self.index)
		if val:isSome() then
			f(val:unwrap())
		end
		return self
	end
	function Entry:insert(value)
		self.map:insert(self.index, value)
		return self
	end
end
local HashMap
do
	HashMap = setmetatable({}, {
		__tostring = function()
			return "HashMap"
		end,
	})
	HashMap.__index = HashMap
	function HashMap.new(...)
		local self = setmetatable({}, HashMap)
		return self:constructor(...) or self
	end
	function HashMap:constructor(map)
		self.map = map
		-- ▼ ReadonlyMap.size ▼
		local _size = 0
		for _ in self.map do
			_size += 1
		end
		-- ▲ ReadonlyMap.size ▲
		self.length = _size
	end
	function HashMap:withCapacity(size)
		return HashMap.new(table.create(size))
	end
	function HashMap:empty()
		return HashMap.new({})
	end
	function HashMap:fromPtr(map)
		return HashMap.new(map)
	end
	function HashMap:toString()
		return "HashMap{" .. (string.sub(self:iter():fold("", function(acc, item)
			return acc .. ("(" .. (tostring(item[1]) .. (", " .. (tostring(item[2]) .. "), "))))
		end), 0, -3) .. "}")
	end
	function HashMap:i(i)
		local _map = self.map
		local _i = i
		local val = _map[_i]
		if val == nil then
			error("called `HashMap.i` with an out-of-range index: " .. tostring(i), 2)
		end
		return val
	end
	function HashMap:keys()
		local last
		return Iterator:fromRawParts(function()
			local key = (next(self.map, last))
			return Option:wrap(key):map(function()
				last = key
				return key
			end)
		end, fixedSizeHint(self.length))
	end
	function HashMap:values()
		local last
		return Iterator:fromRawParts(function()
			local key, value = next(self.map, last)
			return Option:wrap(value):map(function()
				last = key
				return value
			end)
		end, fixedSizeHint(self.length))
	end
	function HashMap:iter()
		local last
		return Iterator:fromRawParts(function()
			local key, value = next(self.map, last)
			return Option:wrap(value):map(function()
				last = key
				return { key, value }
			end)
		end, fixedSizeHint(self.length))
	end
	function HashMap:len()
		return self.length
	end
	function HashMap:isEmpty()
		return (next(self.map)) == nil
	end
	function HashMap:drain()
		local last
		return Iterator:fromRawParts(function()
			local key, value = next(self.map, last)
			return self:removeEntry(key):map(function()
				last = key
				return { key, value }
			end)
		end, fixedSizeHint(self.length))
	end
	function HashMap:drainFilter(filter)
		local last
		return Iterator:fromRawParts(function()
			while true do
				last = (next(self.map, last))
				if not (last ~= nil) then
					break
				end
				local element = self:removeEntry(last)
				if element:map(function(_param)
					local k = _param[1]
					local v = _param[2]
					return filter(k, v)
				end):contains(true) then
					return element
				end
			end
			return Option:none()
		end, upperSizeHint(self.length))
	end
	function HashMap:clear()
		table.clear(self.map)
		self.length = 0
		return self
	end
	function HashMap:entry(key)
		return Entry:construct(self, key)
	end
	function HashMap:get(key)
		local _fn = Option
		local _map = self.map
		local _key = key
		return _fn:wrap(_map[_key])
	end
	function HashMap:getKeyValue(key)
		local _fn = Option:some(key)
		local _fn_1 = Option
		local _map = self.map
		local _key = key
		return _fn:zip(_fn_1:wrap(_map[_key]))
	end
	function HashMap:containsKey(key)
		local _map = self.map
		local _key = key
		return _map[_key] ~= nil
	end
	function HashMap:insert(key, value)
		local _map = self.map
		local _key = key
		local old = _map[_key]
		if old == nil then
			self.length += 1
		end
		local _map_1 = self.map
		local _key_1 = key
		local _value = value
		_map_1[_key_1] = _value
		return Option:wrap(old)
	end
	function HashMap:tryInsert(key, value)
		local _map = self.map
		local _key = key
		local old = _map[_key]
		if old ~= 0 and (old == old and (old ~= "" and old)) then
			return Result:err({
				entry = Entry:construct(self, key),
				value = value,
			})
		end
		self.length += 1
		local _map_1 = self.map
		local _key_1 = key
		local _value = value
		_map_1[_key_1] = _value
		return Result:ok(value)
	end
	function HashMap:remove(key)
		local _map = self.map
		local _key = key
		local old = _map[_key]
		if old ~= nil then
			self.length -= 1
		end
		local _map_1 = self.map
		local _key_1 = key
		_map_1[_key_1] = nil
		return Option:wrap(old)
	end
	function HashMap:removeEntry(key)
		local _map = self.map
		local _key = key
		local old = _map[_key]
		if old ~= nil then
			self.length -= 1
		end
		local _map_1 = self.map
		local _key_1 = key
		_map_1[_key_1] = nil
		return Option:some(key):zip(Option:wrap(old))
	end
	function HashMap:retain(filter)
		self:iter():forEach(function(_param)
			local k = _param[1]
			local v = _param[2]
			if not filter(k, v) then
				self:remove(k)
			end
		end)
		return self
	end
	function HashMap:intoKeys()
		local last
		return Iterator:fromRawParts(function()
			local key = next(self.map, last)
			return Option:wrap(key):map(function()
				last = key
				return key
			end)
		end, fixedSizeHint(self.length))
	end
	function HashMap:intoValues()
		local last
		return Iterator:fromRawParts(function()
			local key, value = next(self.map, last)
			return Option:wrap(key):map(function()
				last = key
				return value
			end)
		end, fixedSizeHint(self.length))
	end
	function HashMap:__tostring()
		return self:toString()
	end
end
return {
	Entry = Entry,
	HashMap = HashMap,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="483">
                  <Properties>
                    <string name="Name">Iterator</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.0.4
local TS = _G[script]
local lazyGet = TS.import(script, script.Parent.Parent, "util", "lazyLoad").lazyGet
local _sizeHint = TS.import(script, script.Parent.Parent, "util", "sizeHint")
local fixedSizeHint = _sizeHint.fixedSizeHint
local lowerSizeHint = _sizeHint.lowerSizeHint
local unit = TS.import(script, script.Parent.Parent, "util", "Unit").unit
local Option
lazyGet("Option", function(c)
	Option = c
end)
local Result
lazyGet("Result", function(c)
	Result = c
end)
local Vec
lazyGet("Vec", function(c)
	Vec = c
end)
local Iterator
do
	Iterator = setmetatable({}, {
		__tostring = function()
			return "Iterator"
		end,
	})
	Iterator.__index = Iterator
	function Iterator.new(...)
		local self = setmetatable({}, Iterator)
		return self:constructor(...) or self
	end
	function Iterator:constructor(nextItem, sizeHint)
		self.nextItem = nextItem
		self.consumed = false
		self.sizeHint = sizeHint or lowerSizeHint(0)
	end
	function Iterator:fromRawParts(nextItem, sizeHint)
		return Iterator.new(nextItem, sizeHint)
	end
	function Iterator:fromItems(...)
		local items = { ... }
		local i = 0
		return Iterator.new(function()
			local _fn = Option
			local _exp = items
			local _original = i
			i += 1
			return _fn:wrap(_exp[_original + 1])
		end, fixedSizeHint(#items))
	end
	function Iterator:consume()
		if self.consumed then
			error("Attempt to consume Iterator twice", 3)
		end
		self.consumed = true
	end
	function Iterator:count()
		self:consume()
		local i = 0
		while self.nextItem():isSome() do
			i += 1
		end
		return i
	end
	function Iterator:last()
		self:consume()
		local last = Option:none()
		while true do
			local curr = self.nextItem()
			if curr:isNone() then
				break
			end
			last = curr
		end
		return last
	end
	function Iterator:advanceBy(n)
		do
			local i = 0
			local _shouldIncrement = false
			while true do
				if _shouldIncrement then
					i += 1
				else
					_shouldIncrement = true
				end
				if not (i < n) then
					break
				end
				if self.nextItem():isNone() then
					return Result:err(i - 1)
				end
			end
		end
		return Result:ok(unit())
	end
	function Iterator:nth(n)
		return self:advanceBy(n):okOption():andWith(function()
			return self.nextItem()
		end)
	end
	function Iterator:stepBy(step)
		self:consume()
		if step == 0 then
			error("called Iterator.stepBy with a step of 0", 2)
		end
		local takeFirst = true
		return Iterator.new(function()
			if takeFirst then
				takeFirst = false
				return self.nextItem()
			else
				return self:nth(step - 1)
			end
		end, function()
			local low, high = self.sizeHint()
			local firstSize = function(step)
				return function(n)
					return if n == 0 then 0 else 1 + (n - 1) / step
				end
			end
			local otherSize = function(step)
				return function(n)
					return n / step
				end
			end
			local f = (if takeFirst then firstSize else otherSize)(step)
			return f(low), high:map(f)
		end)
	end
	function Iterator:chain(other)
		self:consume()
		other:consume()
		local firstDone = false
		return Iterator.new(function()
			if firstDone then
				return other.nextItem()
			else
				local result = self.nextItem()
				if result:isNone() then
					firstDone = true
					return other.nextItem()
				else
					return result
				end
			end
		end, function()
			local firstLow, firstHigh = self.sizeHint()
			local lastLow, lastHigh = other.sizeHint()
			return firstLow + lastLow, firstHigh:andWith(function(firstSize)
				return lastHigh:map(function(lastSize)
					return firstSize + lastSize
				end)
			end)
		end)
	end
	function Iterator:zip(other)
		self:consume()
		other:consume()
		return Iterator.new(function()
			local first = self.nextItem()
			if first:isSome() then
				return first:zip(other.nextItem())
			else
				return Option:none()
			end
		end, function()
			local firstLow, firstHigh = self.sizeHint()
			local lastLow, lastHigh = other.sizeHint()
			local _exp = math.min(firstLow, lastLow)
			local _fn = firstHigh:map(function(firstSize)
				return lastHigh:map(function(lastSize)
					return math.min(firstSize, lastSize)
				end):unwrapOr(firstSize)
			end)
			return _exp, _fn["or"](_fn, lastHigh)
		end)
	end
	function Iterator:intersperse(other)
		return self:intersperseWith(function()
			return other
		end)
	end
	function Iterator:intersperseWith(other)
		self:consume()
		local doIntermediate = true
		return Iterator.new(function()
			doIntermediate = not doIntermediate
			if doIntermediate then
				return Option:some(other())
			else
				return self.nextItem()
			end
		end, function()
			local low, high = self.sizeHint()
			local f = function(n)
				if n < 2 then
					return n
				else
					return n * 2 - 1
				end
			end
			return f(low), high:map(f)
		end)
	end
	function Iterator:map(f)
		self:consume()
		return Iterator.new(function()
			return self.nextItem():map(f)
		end, function()
			return self.sizeHint()
		end)
	end
	function Iterator:forEach(f)
		self:consume()
		local result
		while true do
			result = self.nextItem()
			if result:isNone() then
				break
			end
			f(result:unwrap())
		end
	end
	function Iterator:filter(f)
		self:consume()
		return Iterator.new(function()
			while true do
				local item = self.nextItem()
				if item:isNone() or item:map(f):contains(true) then
					return item
				end
			end
		end, function()
			return 0, (select(2, self.sizeHint()))
		end)
	end
	function Iterator:filterMap(f)
		self:consume()
		return Iterator.new(function()
			while true do
				local item = self.nextItem()
				local mapped = item:andWith(f)
				if item:isNone() or mapped:isSome() then
					return mapped
				end
			end
		end, function()
			return 0, (select(2, self.sizeHint()))
		end)
	end
	function Iterator:enumerate()
		self:consume()
		local i = 0
		return Iterator.new(function()
			return Option:some(i):zip(self.nextItem()):map(function(item)
				i += 1
				return item
			end)
		end, function()
			return self.sizeHint()
		end)
	end
	function Iterator:skipWhile(f)
		self:consume()
		while true do
			local item = self.nextItem()
			local mapped = item:map(f)
			if not mapped:contains(true) then
				break
			end
		end
		return Iterator.new(function()
			return self.nextItem()
		end, function()
			return 0, (select(2, self.sizeHint()))
		end)
	end
	function Iterator:takeWhile(f)
		self:consume()
		local done = false
		return Iterator.new(function()
			if done then
				return Option:none()
			else
				local item = self.nextItem()
				local mapped = item:map(f)
				if not mapped:contains(true) then
					return item
				else
					if item:isSome() then
						done = true
					end
					return Option:none()
				end
			end
		end, function()
			if done then
				return 0, Option:some(0)
			else
				return 0, (select(2, self.sizeHint()))
			end
		end)
	end
	function Iterator:mapWhile(f)
		self:consume()
		return Iterator.new(function()
			return self.nextItem():andWith(f)
		end, function()
			return 0, (select(2, self.sizeHint()))
		end)
	end
	function Iterator:skip(n)
		self:consume()
		local skipped = false
		return Iterator.new(function()
			if not skipped then
				skipped = true
				return self:nth(n)
			else
				return self.nextItem()
			end
		end, function()
			local low, high = self.sizeHint()
			return math.max(0, low - n), high:map(function(size)
				return math.max(0, size - n)
			end)
		end)
	end
	function Iterator:take(n)
		self:consume()
		local toGo = n
		return Iterator.new(function()
			if toGo > 0 then
				toGo -= 1
				return self.nextItem()
			else
				return Option:none()
			end
		end, function()
			local low, high = self.sizeHint()
			local _exp = math.min(low, n)
			local _fn = high:andWith(function(size)
				return if size < n then Option:some(size) else Option:none()
			end)
			return _exp, _fn["or"](_fn, Option:some(n))
		end)
	end
	function Iterator:scan(state, f)
		self:consume()
		return Iterator.new(function()
			return self.nextItem():andWith(function(item)
				return f(state, item)
			end)
		end, function()
			return 0, (select(2, self.sizeHint()))
		end)
	end
	function Iterator:flatMap(f)
		self:consume()
		local curr
		return Iterator.new(function()
			local item = curr.nextItem()
			if item:isNone() then
				local nextIter = self.nextItem()
				return nextIter:match(function(iter)
					curr = f(iter)
					return curr.nextItem()
				end, function()
					return Option:none()
				end)
			else
				return item
			end
		end, function()
			if (select(2, self.sizeHint())):contains(0) then
				return curr.sizeHint()
			else
				return (curr.sizeHint()), Option:none()
			end
		end)
	end
	function Iterator:flatten()
		return self:flatMap(function(i)
			return i
		end)
	end
	function Iterator:fuse()
		self:consume()
		local done = false
		return Iterator.new(function()
			if done then
				return Option:none()
			else
				local item = self.nextItem()
				if item:isNone() then
					done = true
				end
				return item
			end
		end, function()
			if done then
				return 0, Option:some(0)
			else
				return 0, (select(2, self.sizeHint()))
			end
		end)
	end
	function Iterator:inspect(f)
		self:consume()
		return Iterator.new(function()
			local item = self.nextItem()
			if item:isSome() then
				f(item:unwrap())
			end
			return item
		end, function()
			return self.sizeHint()
		end)
	end
	function Iterator:byRef()
		return Iterator.new(function()
			return self.nextItem()
		end, function()
			return self.sizeHint()
		end)
	end
	function Iterator:collect()
		self:consume()
		local size = { self.sizeHint() }
		local vec = Vec:withCapacity(size[2]:unwrapOr(size[1]))
		local item = self.nextItem()
		while item:isSome() do
			vec:push(item:unwrap())
			item = self.nextItem()
		end
		return vec
	end
	function Iterator:partition(f)
		local trueVec = Vec:vec()
		local falseVec = Vec:vec()
		self:forEach(function(item)
			if f(item) then
				trueVec:push(item)
			else
				falseVec:push(item)
			end
		end)
		return trueVec, falseVec
	end
	function Iterator:tryFold(init, f)
		local acc = Result:ok(init)
		local item = self.nextItem()
		while item:isSome() do
			acc = f(acc:asPtr(), item:unwrap())
			if acc:isErr() then
				break
			end
			item = self.nextItem()
		end
		return acc
	end
	function Iterator:tryForEach(f)
		return self:tryFold(unit(), function(_, item)
			return f(item)
		end)
	end
	function Iterator:fold(init, f)
		self:consume()
		local acc = init
		local item = self.nextItem()
		while item:isSome() do
			acc = f(acc, item:unwrap())
			item = self.nextItem()
		end
		return acc
	end
	function Iterator:reduce(f)
		return self.nextItem():match(function(item)
			return Option:some(self:fold(item, f))
		end, function()
			self:consume()
			return Option:none()
		end)
	end
	function Iterator:all(f)
		local item = self.nextItem()
		while item:isSome() do
			if not f(item:unwrap()) then
				return false
			end
			item = self.nextItem()
		end
		return true
	end
	function Iterator:any(f)
		local item = self.nextItem()
		while item:isSome() do
			if f(item:unwrap()) then
				return true
			end
			item = self.nextItem()
		end
		return false
	end
	function Iterator:find(f)
		local item = self.nextItem()
		while item:isSome() do
			if f(item:unwrap()) then
				return item
			end
			item = self.nextItem()
		end
		return Option:none()
	end
	function Iterator:findMap(f)
		local item = self.nextItem()
		while item:isSome() do
			local result = f(item:unwrap())
			if result:isSome() then
				return result
			end
			item = self.nextItem()
		end
		return Option:none()
	end
	function Iterator:tryFind(f)
		local item = self.nextItem()
		while item:isSome() do
			local result = f(item:unwrap())
			if result:contains(true) then
				return Result:ok(item)
			elseif result:isErr() then
				-- Result<boolean, R> => Result<Option<T>, R>
				-- Is safe because Err variants are both R
				return result
			end
			item = self.nextItem()
		end
		return Result:ok(Option:none())
	end
	function Iterator:position(f)
		local item = self.nextItem()
		local i = 0
		while item:isSome() do
			if f(item:unwrap()) then
				return Option:some(i)
			end
			item = self.nextItem()
			i += 1
		end
		return Option:none()
	end
	function Iterator:max()
		return self:reduce(function(a, b)
			return if b >= a then b else a
		end)
	end
	function Iterator:min()
		return self:reduce(function(a, b)
			return if b < a then b else a
		end)
	end
	function Iterator:maxByKey(f)
		return self:reduce(function(a, b)
			return if f(b) >= f(a) then b else a
		end)
	end
	function Iterator:minByKey(f)
		return self:reduce(function(a, b)
			return if f(b) < f(a) then b else a
		end)
	end
	function Iterator:maxBy(f)
		return self:reduce(function(a, b)
			return if f(a, b) > 0 then a else b
		end)
	end
	function Iterator:unzip()
		self:consume()
		local size = { self.sizeHint() }
		local leftVec = Vec:withCapacity(size[2]:unwrapOr(size[1]))
		local rightVec = Vec:withCapacity(size[2]:unwrapOr(size[1]))
		local item = self.nextItem()
		while item:isSome() do
			local _binding = item:unwrap()
			local a = _binding[1]
			local b = _binding[2]
			leftVec:push(a)
			rightVec:push(b)
			item = self.nextItem()
		end
		return leftVec, rightVec
	end
	function Iterator:sum()
		return self:reduce(function(acc, item)
			return acc + item
		end):unwrapOr(0)
	end
	function Iterator:product()
		return self:reduce(function(acc, item)
			return acc * item
		end):unwrapOr(1)
	end
	function Iterator:eq(other)
		return self:eqBy(other, function(a, b)
			return a == b
		end)
	end
	function Iterator:eqBy(other, eq)
		self:consume()
		while true do
			local item = self.nextItem()
			if item:isNone() then
				return other.nextItem():isNone()
			end
			local a = item:unwrap()
			local otherItem = other.nextItem()
			if otherItem:isNone() then
				return false
			end
			local b = otherItem:unwrap()
			if not eq(a, b) then
				return false
			end
		end
	end
	function Iterator:ne(other)
		return not self:eq(other)
	end
	function Iterator:isSorted()
		return self:isSortedBy(function(a, b)
			return Option:some(a - b)
		end)
	end
	function Iterator:isSortedBy(f)
		self:consume()
		local firstOpt = self.nextItem()
		return firstOpt:match(function(first)
			local lastSeen = first
			return self:all(function(item)
				local result = f(lastSeen, item)
				if not result:map(function(ord)
					return ord > 0
				end):contains(false) then
					return false
				end
				lastSeen = item
				return true
			end)
		end, function()
			return true
		end)
	end
	function Iterator:isSortedByKey(f)
		return self:map(f):isSorted()
	end
	function Iterator:generator()
		return TS.generator(function()
			local item = self.nextItem()
			while item:isSome() do
				coroutine.yield(item:unwrap())
				item = self.nextItem()
			end
		end)
	end
end
return {
	Iterator = Iterator,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="484">
                  <Properties>
                    <string name="Name">Option</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.0.4
local TS = _G[script]
local lazyGet = TS.import(script, script.Parent.Parent, "util", "lazyLoad").lazyGet
local Iterator
lazyGet("Iterator", function(c)
	Iterator = c
end)
local Result
lazyGet("Result", function(c)
	Result = c
end)
local Vec
lazyGet("Vec", function(c)
	Vec = c
end)
local Option
do
	Option = setmetatable({}, {
		__tostring = function()
			return "Option"
		end,
	})
	Option.__index = Option
	function Option.new(...)
		local self = setmetatable({}, Option)
		return self:constructor(...) or self
	end
	function Option:constructor(value)
		self.value = value
	end
	function Option:none()
		return Option.new(nil)
	end
	function Option:some(val)
		return Option.new(val)
	end
	function Option:wrap(val)
		return Option.new(val)
	end
	function Option:toString()
		return self:match(function(val)
			return "Option.some(" .. (tostring(val) .. ")")
		end, function()
			return "Option.none"
		end)
	end
	function Option:isSome()
		return self.value ~= nil
	end
	function Option:isNone()
		return not self:isSome()
	end
	function Option:contains(x)
		return self.value == x
	end
	function Option:expect(msg)
		if self:isSome() then
			return self.value
		else
			error(msg)
		end
	end
	function Option:unwrap()
		return self:expect("called `Option.unwrap()` on a `None` value")
	end
	function Option:unwrapOr(def)
		return if self:isSome() then (self.value) else def
	end
	function Option:unwrapOrElse(gen)
		return if self:isSome() then (self.value) else gen()
	end
	function Option:map(func)
		return if self:isSome() then Option:some(func(self.value)) else Option:none()
	end
	function Option:mapOr(def, func)
		return if self:isSome() then func(self.value) else def
	end
	function Option:mapOrElse(def, func)
		return if self:isSome() then func(self.value) else def()
	end
	function Option:okOr(err)
		return if self:isSome() then Result:ok(self.value) else Result:err(err)
	end
	function Option:okOrElse(err)
		return if self:isSome() then Result:ok(self.value) else Result:err(err())
	end
	Option["and"] = function(self, other)
		return if self:isNone() then Option:none() else other
	end
	function Option:andWith(other)
		return if self:isSome() then other(self.value) else Option:none()
	end
	function Option:filter(func)
		return if self:isSome() then (if func(self.value) then Option:some(self.value) else Option:none()) else Option:none()
	end
	Option["or"] = function(self, other)
		return if self:isSome() then Option:some(self.value) else other
	end
	function Option:orElse(other)
		return if self:isSome() then Option:some(self.value) else other()
	end
	function Option:xor(other)
		return if self:isSome() then if other:isSome() then Option:none() else Option:some(self.value) elseif other:isSome() then Option:some(other.value) else Option:none()
	end
	function Option:zip(other)
		if self:isSome() and other:isSome() then
			return Option:some({ self.value, other.value })
		end
		return Option:none()
	end
	function Option:zipWith(other, func)
		if self:isSome() and other:isSome() then
			return Option:some(func(self.value, other.value))
		end
		return Option:none()
	end
	function Option:copied()
		return Option:wrap(self.value)
	end
	function Option:cloned()
		return self:map(function(i)
			return i.cloned()
		end)
	end
	function Option:transpose()
		return if self:isSome() then if self.value:isOk() then Result:ok(Option:some(self.value:asPtr())) else Result:err(self.value:asPtr()) else Result:ok(Option:none())
	end
	function Option:flatten()
		return if self:isSome() then Option:wrap(self.value.value) else Option:none()
	end
	function Option:match(ifSome, ifNone)
		return if self:isSome() then ifSome(self.value) else ifNone()
	end
	function Option:asPtr()
		return self.value
	end
	function Option:__tostring()
		return self:toString()
	end
end
local optionMeta = Option
optionMeta.__unm = function(option)
	return option:map(function(item)
		return -item
	end)
end
optionMeta.__add = function(option, other)
	return option:andWith(function(item)
		return other:map(function(otherItem)
			return item + otherItem
		end)
	end)
end
optionMeta.__sub = function(option, other)
	return option:andWith(function(item)
		return other:map(function(otherItem)
			return item - otherItem
		end)
	end)
end
optionMeta.__mul = function(option, other)
	return option:andWith(function(item)
		return other:map(function(otherItem)
			return item * otherItem
		end)
	end)
end
optionMeta.__div = function(option, other)
	return option:andWith(function(item)
		return other:map(function(otherItem)
			return item / otherItem
		end)
	end)
end
optionMeta.__mod = function(option, other)
	return option:andWith(function(item)
		return other:map(function(otherItem)
			return item % otherItem
		end)
	end)
end
optionMeta.__pow = function(option, other)
	return option:andWith(function(item)
		return other:map(function(otherItem)
			return bit32.bxor(item, otherItem)
		end)
	end)
end
optionMeta.__eq = function(a, b)
	return a:asPtr() == b:asPtr()
end
optionMeta.__len = function(option)
	return option:map(function(item)
		return #item
	end):unwrapOr(0)
end
return {
	Option = Option,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="485">
                  <Properties>
                    <string name="Name">OptionMut</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.0.4
local TS = _G[script]
local lazyGet = TS.import(script, script.Parent.Parent, "util", "lazyLoad").lazyGet
local fixedSizeHint = TS.import(script, script.Parent.Parent, "util", "sizeHint").fixedSizeHint
local Iterator
lazyGet("Iterator", function(c)
	Iterator = c
end)
local Option
lazyGet("Option", function(c)
	Option = c
end)
local Result
lazyGet("Result", function(c)
	Result = c
end)
local Vec
lazyGet("Vec", function(c)
	Vec = c
end)
local OptionMut
do
	local super = Option
	OptionMut = setmetatable({}, {
		__tostring = function()
			return "OptionMut"
		end,
		__index = super,
	})
	OptionMut.__index = OptionMut
	function OptionMut.new(...)
		local self = setmetatable({}, OptionMut)
		return self:constructor(...) or self
	end
	function OptionMut:constructor(...)
		super.constructor(self, ...)
	end
	function OptionMut:none()
		return OptionMut.new(nil)
	end
	function OptionMut:some(val)
		return OptionMut.new(val)
	end
	function OptionMut:wrap(val)
		return OptionMut.new(val)
	end
	function OptionMut:toString()
		return self:match(function(val)
			return "OptionMut.some(" .. (tostring(val) .. ")")
		end, function()
			return "OptionMut.none"
		end)
	end
	function OptionMut:insert(val)
		self.value = val
		return self.value
	end
	function OptionMut:getOrInsert(val)
		if not self:isSome() then
			self.value = val
			return self.value
		else
			return self.value
		end
	end
	function OptionMut:getOrInsertWith(val)
		if not self:isSome() then
			self.value = val()
			return self.value
		else
			return self.value
		end
	end
	function OptionMut:take()
		local val = self.value
		self.value = nil
		return Option:wrap(val)
	end
	function OptionMut:replace(val)
		local oldVal = self.value
		self.value = val
		return Option:wrap(oldVal)
	end
	function OptionMut:iter()
		return Iterator:fromRawParts(function()
			return self:take()
		end, if self:isSome() then fixedSizeHint(1) else fixedSizeHint(0))
	end
	function OptionMut:__tostring()
		return self:toString()
	end
end
local optionMutMeta = OptionMut
optionMutMeta.__unm = function(option)
	return option:map(function(item)
		return -item
	end)
end
optionMutMeta.__add = function(option, other)
	return option:andWith(function(item)
		return other:map(function(otherItem)
			return item + otherItem
		end)
	end)
end
optionMutMeta.__sub = function(option, other)
	return option:andWith(function(item)
		return other:map(function(otherItem)
			return item - otherItem
		end)
	end)
end
optionMutMeta.__mul = function(option, other)
	return option:andWith(function(item)
		return other:map(function(otherItem)
			return item * otherItem
		end)
	end)
end
optionMutMeta.__div = function(option, other)
	return option:andWith(function(item)
		return other:map(function(otherItem)
			return item / otherItem
		end)
	end)
end
optionMutMeta.__mod = function(option, other)
	return option:andWith(function(item)
		return other:map(function(otherItem)
			return item % otherItem
		end)
	end)
end
optionMutMeta.__pow = function(option, other)
	return option:andWith(function(item)
		return other:map(function(otherItem)
			return bit32.bxor(item, otherItem)
		end)
	end)
end
optionMutMeta.__eq = function(a, b)
	return a:asPtr() == b:asPtr()
end
optionMutMeta.__len = function(option)
	return option:map(function(item)
		return #item
	end):unwrapOr(0)
end
return {
	OptionMut = OptionMut,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="486">
                  <Properties>
                    <string name="Name">Result</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.0.4
local TS = _G[script]
local lazyGet = TS.import(script, script.Parent.Parent, "util", "lazyLoad").lazyGet
local unit = TS.import(script, script.Parent.Parent, "util", "Unit").unit
local Iterator
lazyGet("Iterator", function(c)
	Iterator = c
end)
local Option
lazyGet("Option", function(c)
	Option = c
end)
local Vec
lazyGet("Vec", function(c)
	Vec = c
end)
local Result
do
	Result = setmetatable({}, {
		__tostring = function()
			return "Result"
		end,
	})
	Result.__index = Result
	function Result.new(...)
		local self = setmetatable({}, Result)
		return self:constructor(...) or self
	end
	function Result:constructor(okValue, errValue)
		self.okValue = okValue
		self.errValue = errValue
	end
	function Result:ok(val)
		return Result.new(val, nil)
	end
	function Result:err(val)
		return Result.new(nil, val)
	end
	function Result:fromCallback(c)
		local success, result = pcall(c)
		return if success then Result:ok(result) else Result:err(Option:wrap(result))
	end
	function Result:fromVoidCallback(c)
		local success, result = pcall(c)
		return if success then Result:ok(unit()) else Result:err(Option:wrap(result))
	end
	function Result:fromPromise(p)
		local _p = p
		local _arg0 = function(v)
			return Result:ok(v)
		end
		local _arg1 = function(e)
			return Result:err(Option:wrap(e))
		end
		return _p:andThen(_arg0, _arg1)
	end
	function Result:fromVoidPromise(p)
		local _p = p
		local _arg0 = function()
			return Result:ok(unit())
		end
		local _arg1 = function(e)
			return Result:err(Option:wrap(e))
		end
		return _p:andThen(_arg0, _arg1)
	end
	function Result:toString()
		return self:match(function(ok)
			return "Result.ok(" .. (tostring(ok) .. ")")
		end, function(err)
			return "Result.err(" .. (tostring(err) .. ")")
		end)
	end
	function Result:isOk()
		return self.okValue ~= nil
	end
	function Result:isErr()
		return self.errValue ~= nil
	end
	function Result:contains(x)
		return self.okValue == x
	end
	function Result:containsErr(x)
		return self.errValue == x
	end
	function Result:okOption()
		return Option:wrap(self.okValue)
	end
	function Result:errOption()
		return Option:wrap(self.errValue)
	end
	function Result:map(func)
		return if self:isOk() then Result:ok(func(self.okValue)) else Result:err(self.errValue)
	end
	function Result:mapOr(def, func)
		return if self:isOk() then func(self.okValue) else def
	end
	function Result:mapOrElse(def, func)
		return if self:isOk() then func(self.okValue) else def(self.errValue)
	end
	function Result:mapErr(func)
		return if self:isErr() then Result:err(func(self.errValue)) else Result:ok(self.okValue)
	end
	Result["and"] = function(self, other)
		return if self:isErr() then Result:err(self.errValue) else other
	end
	function Result:andWith(func)
		return if self:isErr() then Result:err(self.errValue) else func(self.okValue)
	end
	Result["or"] = function(self, other)
		return if self:isOk() then Result:ok(self.okValue) else other
	end
	function Result:orElse(other)
		return if self:isOk() then Result:ok(self.okValue) else other(self.errValue)
	end
	function Result:expect(msg)
		if self:isOk() then
			return self.okValue
		else
			error(msg)
		end
	end
	function Result:unwrap()
		return self:expect("called \`Result.unwrap()\` on an \`Err\` value: " .. tostring(self.errValue))
	end
	function Result:unwrapOr(def)
		return if self:isOk() then (self.okValue) else def
	end
	function Result:unwrapOrElse(gen)
		return if self:isOk() then (self.okValue) else gen(self.errValue)
	end
	function Result:expectErr(msg)
		if self:isErr() then
			return self.errValue
		else
			error(msg)
		end
	end
	function Result:unwrapErr()
		return self:expectErr("called \`Result.unwrapErr()\` on an \`Ok\` value: " .. tostring(self.okValue))
	end
	function Result:transpose()
		return if self:isOk() then self.okValue:map(function(some)
			return Result:ok(some)
		end) else Option:some(Result:err(self.errValue))
	end
	function Result:flatten()
		return if self:isOk() then Result.new(self.okValue.okValue, self.okValue.errValue) else Result:err(self.errValue)
	end
	function Result:match(ifOk, ifErr)
		return if self:isOk() then ifOk(self.okValue) else ifErr(self.errValue)
	end
	function Result:asPtr()
		local _condition = (self.okValue)
		if _condition == nil then
			_condition = (self.errValue)
		end
		return _condition
	end
	function Result:__tostring()
		return self:toString()
	end
end
local resultMeta = Result
resultMeta.__eq = function(a, b)
	return b:match(function(ok)
		return a:contains(ok)
	end, function(err)
		return a:containsErr(err)
	end)
end
return {
	Result = Result,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="487">
                  <Properties>
                    <string name="Name">Vec</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.0.4
local TS = _G[script]
local lazyGet = TS.import(script, script.Parent.Parent, "util", "lazyLoad").lazyGet
local resolveRange = TS.import(script, script.Parent.Parent, "util", "Range").resolveRange
local _sizeHint = TS.import(script, script.Parent.Parent, "util", "sizeHint")
local fixedSizeHint = _sizeHint.fixedSizeHint
local upperSizeHint = _sizeHint.upperSizeHint
local Iterator
lazyGet("Iterator", function(c)
	Iterator = c
end)
local Option
lazyGet("Option", function(c)
	Option = c
end)
local Result
lazyGet("Result", function(c)
	Result = c
end)
local Vec
do
	Vec = setmetatable({}, {
		__tostring = function()
			return "Vec"
		end,
	})
	Vec.__index = Vec
	function Vec.new(...)
		local self = setmetatable({}, Vec)
		return self:constructor(...) or self
	end
	function Vec:constructor(array)
		self.array = array
		self.length = #self.array
	end
	function Vec:withCapacity(size)
		return Vec.new(table.create(size))
	end
	function Vec:vec(...)
		local values = { ... }
		return Vec.new(values)
	end
	function Vec:fromPtr(array)
		return Vec.new(array)
	end
	function Vec:toString()
		return "Vec[" .. (string.sub(self:iter():fold("", function(acc, item)
			return acc .. (tostring(item) .. ", ")
		end), 0, -3) .. "]")
	end
	function Vec:i(i)
		local val = self.array[i + 1]
		if val == nil then
			error("called `Vec.i` with an out-of-range index: " .. tostring(i), 2)
		end
		return val
	end
	function Vec:truncate(len)
		if len < 0 then
			error("called `Vec.truncate` with an out-of-range length: " .. tostring(len), 2)
		end
		if len >= self.length then
			return self
		end
		do
			local i = self.length - 1
			local _shouldIncrement = false
			while true do
				if _shouldIncrement then
					i -= 1
				else
					_shouldIncrement = true
				end
				if not (i >= len) then
					break
				end
				self.array[i + 1] = nil
			end
		end
		self.length = len
		return self
	end
	function Vec:asPtr()
		return self.array
	end
	function Vec:setLen(len)
		self.length = len
		return self
	end
	function Vec:swapRemove(i)
		if i < 0 or i >= self.length then
			error("called `Vec.swapRemove` with an out-of-range index: " .. tostring(i), 2)
		end
		self.length -= 1
		local _array = self.array
		local _i = i
		-- ▼ Array.unorderedRemove ▼
		local _index = _i + 1
		local _length = #_array
		local _value = _array[_index]
		if _value ~= nil then
			_array[_index] = _array[_length]
			_array[_length] = nil
		end
		-- ▲ Array.unorderedRemove ▲
		return _value
	end
	function Vec:insert(i, element)
		if i < 0 or i > self.length then
			error("called `Vec.insert` with an out-of-range index: " .. tostring(i), 2)
		end
		self.length += 1
		local _array = self.array
		local _i = i
		local _element = element
		table.insert(_array, _i + 1, _element)
		return self
	end
	function Vec:remove(i)
		if i < 0 or i >= self.length then
			error("called `Vec.remove` with an out-of-range index: " .. tostring(i), 2)
		end
		self.length -= 1
		local _array = self.array
		local _i = i
		return table.remove(_array, _i + 1)
	end
	function Vec:retain(func)
		local length = self.length
		local deleted = 0
		do
			local i = 0
			local _shouldIncrement = false
			while true do
				if _shouldIncrement then
					i += 1
				else
					_shouldIncrement = true
				end
				if not (i < length) then
					break
				end
				if not func(self.array[i + 1]) then
					deleted += 1
				elseif deleted > 0 then
					self:swap(i - deleted, i)
				end
			end
		end
		if deleted > 0 then
			self:truncate(length - deleted)
		end
		return self
	end
	function Vec:dedupByKey(func)
		return self:dedupBy(function(a, b)
			return func(a) == func(b)
		end)
	end
	function Vec:dedupBy(isDup)
		if self.length > 1 then
			local nextRead = 1
			local nextWrite = 1
			while nextRead < self.length do
				if not isDup(self.array[nextRead + 1], self.array[nextWrite - 1 + 1]) then
					self:swap(nextRead, nextWrite)
					nextWrite += 1
				end
				nextRead += 1
			end
			self:truncate(nextWrite)
		end
		return self
	end
	function Vec:dedup()
		return self:dedupBy(function(a, b)
			return a == b
		end)
	end
	function Vec:push(element)
		self.length += 1
		local _array = self.array
		local _element = element
		table.insert(_array, _element)
		return self
	end
	function Vec:pop()
		local _fn = Option
		local _exp = self.array
		-- ▼ Array.pop ▼
		local _length = #_exp
		local _result = _exp[_length]
		_exp[_length] = nil
		-- ▲ Array.pop ▲
		return _fn:wrap(_result):map(function(e)
			self.length -= 1
			return e
		end)
	end
	function Vec:append(other)
		for _, element in other.array do
			table.insert(self.array, element)
		end
		self.length += other:len()
		other:clear()
		return self
	end
	function Vec:drain(r)
		local range = resolveRange(r, self.length)
		if range[1] < 0 or (range[1] > range[2] or range[2] > self.length) then
			error("called \`Vec.drain\` with an invalid \`Range\`: [" .. (tostring(r[1]) .. (", " .. (tostring(r[2]) .. "]"))), 2)
		end
		local size = range[2] - range[1]
		local i = range[1]
		return Iterator:fromRawParts(function()
			local _result
			if i < range[2] then
				local _fn = self
				local _original = i
				i += 1
				_result = _fn:get(_original)
			else
				_result = Option:none()
			end
			return _result
		end, fixedSizeHint(size))
	end
	function Vec:drainFilter(r, filter)
		local range = resolveRange(r, self.length)
		if range[1] < 0 or (range[1] > range[2] or range[2] > self.length) then
			error("called \`Vec.drainFilter\` with an invalid \`Range\`: [" .. (tostring(r[1]) .. (", " .. (tostring(r[2]) .. "]"))), 2)
		end
		local size = range[2] - range[1]
		local i = range[1]
		return Iterator:fromRawParts(function()
			while i < range[2] do
				local _fn = self
				local _original = i
				i += 1
				local element = _fn:get(_original)
				if element:map(filter):contains(true) then
					self:remove(i - 1)
					return element
				end
			end
			return Option:none()
		end, upperSizeHint(size))
	end
	function Vec:clear()
		self.length = 0
		table.clear(self.array)
		return self
	end
	function Vec:len()
		return self.length
	end
	function Vec:isEmpty()
		return (next(self.array)) == nil
	end
	function Vec:splitOff(from)
		if from < 0 or from >= self.length then
			error("called `Vec.splitOff` with an out-of-range index: " .. tostring(from), 2)
		end
		local other
		if from == 0 then
			local _array = {}
			local _length = #_array
			local _array_1 = self.array
			table.move(_array_1, 1, #_array_1, _length + 1, _array)
			other = Vec.new(_array)
			self:clear()
		else
			other = Vec:withCapacity(self.length - from)
			do
				local i = from
				local _shouldIncrement = false
				while true do
					if _shouldIncrement then
						i += 1
					else
						_shouldIncrement = true
					end
					if not (i < self.length) then
						break
					end
					other:push(self.array[i + 1])
				end
			end
			self:truncate(from)
		end
		return other
	end
	function Vec:resizeWith(newLen, func)
		if newLen < self.length then
			self:truncate(newLen)
		elseif newLen > self.length then
			do
				local i = self.length
				local _shouldIncrement = false
				while true do
					if _shouldIncrement then
						i += 1
					else
						_shouldIncrement = true
					end
					if not (i < newLen) then
						break
					end
					self:push(func())
				end
			end
		end
		return self
	end
	function Vec:resize(newLen, val)
		if newLen < self.length then
			self:truncate(newLen)
		elseif newLen > self.length then
			do
				local i = self.length
				local _shouldIncrement = false
				while true do
					if _shouldIncrement then
						i += 1
					else
						_shouldIncrement = true
					end
					if not (i < newLen) then
						break
					end
					self:push(val)
				end
			end
		end
		return self
	end
	function Vec:splice(r, iter)
		return TS.generator(function()
			local range = resolveRange(r, self.length)
			if range[1] < 0 or (range[1] > range[2] or range[2] > self.length) then
				error("called \`Vec.splice\` with an invalid \`Range\`: " .. (tostring(r[1]) .. (".." .. tostring(r[2]))), 2)
			end
			local i = range[1]
			for _result in iter.next do
				if _result.done then
					break
				end
				local item = _result.value
				if i >= range[2] then
					break
				end
				local temp = self.array[i + 1]
				local _exp = self.array
				local _original = i
				i += 1
				_exp[_original + 1] = item
				coroutine.yield(temp)
			end
			while i < range[2] do
				self:remove(i)
				range[2] -= 1
			end
		end)
	end
	function Vec:first()
		return Option:wrap(self.array[1])
	end
	function Vec:last()
		return Option:wrap(self.array[self.length - 1 + 1])
	end
	function Vec:get(i)
		return Option:wrap(self.array[i + 1])
	end
	function Vec:swap(a, b)
		if a < 0 or a >= self.length then
			error("called `Vec.swap` with an out-of-range a: " .. tostring(a), 2)
		end
		if b < 0 or b >= self.length then
			error("called `Vec.swap` with an out-of-range b: " .. tostring(b), 2)
		end
		local temp = self.array[a + 1]
		self.array[a + 1] = self.array[b + 1]
		self.array[b + 1] = temp
		return self
	end
	function Vec:reverse()
		local tries = self.length - 1
		do
			local i = 0
			local _shouldIncrement = false
			while true do
				if _shouldIncrement then
					i += 1
				else
					_shouldIncrement = true
				end
				if not (i < tries / 2) then
					break
				end
				self:swap(i, tries - i)
			end
		end
		return self
	end
	function Vec:generator()
		return TS.generator(function()
			local i = 0
			while i < self.length do
				local _exp = self.array
				local _original = i
				i += 1
				coroutine.yield(_exp[_original + 1])
			end
		end)
	end
	function Vec:iter()
		local i = 0
		return Iterator:fromRawParts(function()
			return self:get(i):map(function(item)
				i += 1
				return item
			end)
		end, fixedSizeHint(self.length))
	end
	function Vec:__tostring()
		return self:toString()
	end
end
return {
	Vec = Vec,
}
]]></string>
                  </Properties>
                </Item>
              </Item>
              <Item class="Folder" referent="488">
                <Properties>
                  <string name="Name">util</string>
                </Properties>
                <Item class="ModuleScript" referent="489">
                  <Properties>
                    <string name="Name">Range</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.0.4
local function resolveRange(r, max)
	local _condition = r[1]
	if _condition == nil then
		_condition = 0
	end
	local _condition_1 = r[2]
	if _condition_1 == nil then
		_condition_1 = max
	end
	return { _condition, _condition_1 }
end
return {
	resolveRange = resolveRange,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="490">
                  <Properties>
                    <string name="Name">Unit</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.0.4
-- eslint-disable-next-line @typescript-eslint/no-empty-interface
local unitMeta = {}
unitMeta.__eq = function()
	return true
end
unitMeta.__tostring = function()
	return "()"
end
unitMeta.__index = function()
	return error("Attempt to index Unit", 2)
end
local function unit()
	return setmetatable({}, unitMeta)
end
return {
	unit = unit,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="491">
                  <Properties>
                    <string name="Name">imports</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.0.4
local TS = _G[script]
local lazyGet = TS.import(script, script.Parent, "lazyLoad").lazyGet
local HashMap
lazyGet("HashMap", function(c)
	HashMap = c
end)
local Iterator
lazyGet("Iterator", function(c)
	Iterator = c
end)
local Option
lazyGet("Option", function(c)
	Option = c
end)
local Result
lazyGet("Result", function(c)
	Result = c
end)
local Vec
lazyGet("Vec", function(c)
	Vec = c
end)
return nil
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="492">
                  <Properties>
                    <string name="Name">lazyLoad</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.0.4
local TS = _G[script]
local classes = {}
local waiting = {}
local function lazyGet(name, callback)
	local c = classes[name]
	if c then
		callback(c)
	else
		local waiter = waiting[name]
		if waiter then
			local _exp = waiter[1]
			local _arg0 = function(c)
				return callback(c)
			end
			_exp:andThen(_arg0)
		else
			local prom
			prom = TS.Promise.new(function(resolve)
				waiting[name] = { prom, resolve }
			end)
			local waiter = waiting[name]
			waiter[1] = prom
			local _arg0 = function(c)
				return callback(c)
			end
			prom:andThen(_arg0)
		end
	end
end
local function lazyRegister(name, c)
	classes[name] = c
	local waiter = waiting[name]
	if waiter then
		waiter[2](c)
	end
end
return {
	lazyGet = lazyGet,
	lazyRegister = lazyRegister,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="493">
                  <Properties>
                    <string name="Name">sizeHint</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.0.4
local TS = _G[script]
local lazyGet = TS.import(script, script.Parent, "lazyLoad").lazyGet
local HashMap
lazyGet("HashMap", function(c)
	HashMap = c
end)
local Iterator
lazyGet("Iterator", function(c)
	Iterator = c
end)
local Option
lazyGet("Option", function(c)
	Option = c
end)
local Result
lazyGet("Result", function(c)
	Result = c
end)
local Vec
lazyGet("Vec", function(c)
	Vec = c
end)
local function fixedSizeHint(fixed)
	return function()
		return fixed, Option:some(fixed)
	end
end
local function upperSizeHint(upper)
	return function()
		return 0, Option:some(upper)
	end
end
local function lowerSizeHint(lower)
	return function()
		return lower, Option:none()
	end
end
return {
	fixedSizeHint = fixedSizeHint,
	upperSizeHint = upperSizeHint,
	lowerSizeHint = lowerSizeHint,
}
]]></string>
                  </Properties>
                </Item>
              </Item>
            </Item>
          </Item>
          <Item class="ModuleScript" referent="494">
            <Properties>
              <string name="Name">Scheduler</string>
              <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/efd8f6442d1aa7c4566fe812cba03e7e83aaccc3/packages/scheduler/index.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]

local initializeScheduler = require(script.Scheduler)

local function onlyInTestError(functionName: string)
	return function()
		error(functionName .. " is only available in tests, not in production")
	end
end

local Scheduler = initializeScheduler(nil --[[ no host config, use default ]])
local Tracing = require(script.Tracing)
local TracingSubscriptions = require(script.TracingSubscriptions)
-- deviation export Tracing type from the package exports to avoid direct file access
export type Interaction = Tracing.Interaction

-- Enables `act` to use mock scheduling logic when running tests. Since there
-- are numerous testing scenarios in which we call `require` on the Roact
-- library _before_ we bootstrap tests, we expose an additional global to toggle
-- this explicilty
if _G.__ROACT_17_MOCK_SCHEDULER__ then
	return require(script.unstable_mock)
end

local exports = {
	unstable_ImmediatePriority = Scheduler.unstable_ImmediatePriority,
	unstable_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
	unstable_NormalPriority = Scheduler.unstable_NormalPriority,
	unstable_IdlePriority = Scheduler.unstable_IdlePriority,
	unstable_LowPriority = Scheduler.unstable_LowPriority,
	unstable_runWithPriority = Scheduler.unstable_runWithPriority,
	unstable_next = Scheduler.unstable_next,
	unstable_scheduleCallback = Scheduler.unstable_scheduleCallback,
	unstable_cancelCallback = Scheduler.unstable_cancelCallback,
	unstable_wrapCallback = Scheduler.unstable_wrapCallback,
	unstable_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel,
	unstable_shouldYield = Scheduler.unstable_shouldYield,
	unstable_requestPaint = Scheduler.unstable_requestPaint,
	unstable_continueExecution = Scheduler.unstable_continueExecution,
	unstable_pauseExecution = Scheduler.unstable_pauseExecution,
	unstable_getFirstCallbackNode = Scheduler.unstable_getFirstCallbackNode,
	unstable_now = Scheduler.unstable_now,
	unstable_forceFrameRate = Scheduler.unstable_forceFrameRate,
	unstable_flushAllWithoutAsserting = onlyInTestError("unstable_flushAllWithoutAsserting") :: any,
	unstable_flushAll = onlyInTestError("unstable_flushAll"),
	unstable_flushNumberOfYields = onlyInTestError("unstable_flushNumberOfYields"),
	unstable_clearYields = onlyInTestError("unstable_clearYields") :: any,
	unstable_flushUntilNextPaint = onlyInTestError("unstable_clearYields"),
	unstable_advanceTime = onlyInTestError("unstable_advanceTime"),
	unstable_flushExpired = onlyInTestError("unstable_flushExpired"),
	unstable_yieldValue = onlyInTestError("unstable_yieldValue"),

	tracing = {
		unstable_wrap = onlyInTestError("unstable_wrap"),
		__interactionsRef = {},
		__subscriberRef = {},
	},
}

-- FIXME Luau: need to fix CLI-56768 to remove any cast
for k, v in Tracing :: any do
	exports.tracing[k] = v
end
for k, v in TracingSubscriptions :: any do
	exports.tracing[k] = v
end

return exports
]]></string>
            </Properties>
            <Item class="ModuleScript" referent="495">
              <Properties>
                <string name="Name">Scheduler</string>
                <string name="Source"><![CDATA[-- upstream: https://github.com/facebook/react/blob/9abc2785cb070148d64fae81e523246b90b92016/packages/scheduler/src/Scheduler.js
--[[*
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*
]]

-- deviation: return an initializer function instead of the module itself
-- for easier dependency injection with unstable_mock
return function(hostConfig)
	local Packages = script.Parent.Parent
	local describeError = require(Packages.Shared).describeError

	local SchedulerFeatureFlags = require(script.Parent.SchedulerFeatureFlags)
	local enableSchedulerDebugging = SchedulerFeatureFlags.enableSchedulerDebugging
	local enableProfiling = SchedulerFeatureFlags.enableProfiling

	local SchedulerHostConfig = hostConfig or require(script.Parent.SchedulerHostConfig)
	local requestHostCallback = SchedulerHostConfig.requestHostCallback
	local requestHostTimeout = SchedulerHostConfig.requestHostTimeout
	local cancelHostTimeout = SchedulerHostConfig.cancelHostTimeout
	local shouldYieldToHost = SchedulerHostConfig.shouldYieldToHost
	local getCurrentTime = SchedulerHostConfig.getCurrentTime
	local forceFrameRate = SchedulerHostConfig.forceFrameRate
	local requestPaint = SchedulerHostConfig.requestPaint

	-- deviation? inline the MinHeap to see if the module-level visibility lets Luau optimize better
	-- local SchedulerMinHeap = require(script.Parent.SchedulerMinHeap)
	-- local push = SchedulerMinHeap.push
	-- local peek = SchedulerMinHeap.peek
	-- local pop = SchedulerMinHeap.pop
	type Heap = { [number]: Node? }
	type Node = {
		id: number,
		sortIndex: number,
	}

	-- deviation: This file contains several workarounds for Luau analysis issues by using the `::` operator
	local compare, siftUp, siftDown

	local push = function(heap: Heap, node: Node): ()
		local index = #heap + 1
		heap[index] = node

		siftUp(heap, node, index)
	end

	local peek = function(heap: Heap): Node?
		return heap[1]
	end

	local pop = function(heap: Heap): Node?
		local first = heap[1]
		if first ~= nil then
			local last = heap[#heap]
			heap[#heap] = nil

			if last :: Node ~= first :: Node then
				heap[1] = last
				siftDown(heap, last :: Node, 1)
			end
			return first
		else
			return nil
		end
	end

	siftUp = function(heap: Heap, node: Node, index: number): ()
		while true do
			local parentIndex = math.floor(index / 2)
			local parent = heap[parentIndex]
			if parent ~= nil and compare(parent :: Node, node :: Node) > 0 then
				-- The parent is larger. Swap positions.
				heap[parentIndex] = node
				heap[index] = parent
				index = parentIndex
			else
				-- The parent is smaller. Exit.
				return
			end
		end
	end

	siftDown = function(heap: Heap, node: Node, index: number): ()
		local length = #heap
		while index < length do
			local leftIndex = index * 2
			local left = heap[leftIndex]
			local rightIndex = leftIndex + 1
			local right = heap[rightIndex]

			-- If the left or right node is smaller, swap with the smaller of those.
			if left ~= nil and compare(left :: Node, node) < 0 then
				if right ~= nil and compare(right :: Node, left :: Node) < 0 then
					heap[index] = right
					heap[rightIndex] = node
					index = rightIndex
				else
					heap[index] = left
					heap[leftIndex] = node
					index = leftIndex
				end
			elseif right ~= nil and compare(right :: Node, node :: Node) < 0 then
				heap[index] = right
				heap[rightIndex] = node
				index = rightIndex
			else
				-- Neither child is smaller. Exit.
				return
			end
		end
	end

	compare = function(a: Node, b: Node): number
		-- Compare sort index first, then task id.
		local diff = a.sortIndex - b.sortIndex

		if diff == 0 then
			return a.id - b.id
		end

		return diff
	end

	-- TODO: Use symbols?
	local SchedulerPriorities = require(script.Parent.SchedulerPriorities)
	local ImmediatePriority = SchedulerPriorities.ImmediatePriority
	local UserBlockingPriority = SchedulerPriorities.UserBlockingPriority
	local NormalPriority = SchedulerPriorities.NormalPriority
	local LowPriority = SchedulerPriorities.LowPriority
	local IdlePriority = SchedulerPriorities.IdlePriority

	local SchedulerProfiling = require(script.Parent.SchedulerProfiling)
	local markTaskRun = SchedulerProfiling.markTaskRun
	local markTaskYield = SchedulerProfiling.markTaskYield
	local markTaskCompleted = SchedulerProfiling.markTaskCompleted
	local markTaskCanceled = SchedulerProfiling.markTaskCanceled
	local markTaskErrored = SchedulerProfiling.markTaskErrored
	local markSchedulerSuspended = SchedulerProfiling.markSchedulerSuspended
	local markSchedulerUnsuspended = SchedulerProfiling.markSchedulerUnsuspended
	local markTaskStart = SchedulerProfiling.markTaskStart
	local stopLoggingProfilingEvents = SchedulerProfiling.stopLoggingProfilingEvents
	local startLoggingProfilingEvents = SchedulerProfiling.startLoggingProfilingEvents

	-- Max 31 bit integer. The max integer size in V8 for 32-bit systems.
	-- Math.pow(2, 30) - 1
	-- 0b111111111111111111111111111111
	local maxSigned31BitInt = 1073741823

	-- Times out immediately
	local IMMEDIATE_PRIORITY_TIMEOUT = -1
	-- Eventually times out
	local USER_BLOCKING_PRIORITY_TIMEOUT = 250
	local NORMAL_PRIORITY_TIMEOUT = 5000
	local LOW_PRIORITY_TIMEOUT = 10000
	-- Never times out
	local IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt

	-- Tasks are stored on a min heap
	local taskQueue = {}
	local timerQueue = {}

	-- Incrementing id counter. Used to maintain insertion order.
	local taskIdCounter = 1

	-- Pausing the scheduler is useful for debugging.
	local isSchedulerPaused = false

	local currentTask = nil
	local currentPriorityLevel = NormalPriority

	-- This is set while performing work, to prevent re-entrancy.
	local isPerformingWork = false

	local isHostCallbackScheduled = false
	local isHostTimeoutScheduled = false

	-- deviation: Preemptively declare these functions so that Lua understands them
	local handleTimeout, flushWork, workLoop

	local function advanceTimers(currentTime)
		-- Check for tasks that are no longer delayed and add them to the queue.
		local timer = peek(timerQueue)

		while timer ~= nil do
			if timer.callback == nil then
				-- Timer was cancelled, remove from queue
				pop(timerQueue)
			elseif timer.startTime <= currentTime then
				-- Timer fired. Transfer to the task queue.
				pop(timerQueue)
				timer.sortIndex = timer.expirationTime
				push(taskQueue, timer)
				if enableProfiling then
					markTaskStart(timer, currentTime)
					timer.isQueued = true
				end
			else
				-- Remaining timers are pending.
				return
			end

			timer = peek(timerQueue)
		end
	end

	handleTimeout = function(currentTime)
		isHostTimeoutScheduled = false
		advanceTimers(currentTime)

		if not isHostCallbackScheduled then
			if peek(taskQueue) ~= nil then
				isHostCallbackScheduled = true
				requestHostCallback(flushWork)
			else
				local firstTimer = peek(timerQueue)
				if firstTimer ~= nil then
					requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime)
				end
			end
		end
	end

	flushWork = function(hasTimeRemaining, initialTime)
		if enableProfiling then
			markSchedulerUnsuspended(initialTime)
		end

		-- We'll need a host callback the next time work is scheduled.
		isHostCallbackScheduled = false
		if isHostTimeoutScheduled then
			-- We scheduled a timeout but it's no longer needed. Cancel it.
			isHostTimeoutScheduled = false
			cancelHostTimeout()
		end

		isPerformingWork = true
		local previousPriorityLevel = currentPriorityLevel

		-- deviation: YOLO flag for disabling pcall
		local ok, result
		if not _G.__YOLO__ then
			-- performance: don't nest try/catch here, Lua can do better, and it eliminated an anon function creation
			if enableProfiling then
				ok, result = xpcall(workLoop, describeError, hasTimeRemaining, initialTime)

				if not ok then
					if currentTask ~= nil then
						local currentTime = getCurrentTime()
						markTaskErrored(currentTask, currentTime)
						currentTask.isQueued = false
					end
				end
			else
				-- No catch in prod code path.
				ok = true
				result = workLoop(hasTimeRemaining, initialTime)
			end
		else
			ok = true
			result = workLoop(hasTimeRemaining, initialTime)
		end

		-- NOTE: finally
		currentTask = nil
		currentPriorityLevel = previousPriorityLevel
		isPerformingWork = false
		if enableProfiling then
			local currentTime = getCurrentTime()
			markSchedulerSuspended(currentTime)
		end

		if not ok then
			error(result)
		end

		return result
	end

	workLoop = function(hasTimeRemaining, initialTime)
		local currentTime = initialTime
		advanceTimers(currentTime)
		currentTask = peek(taskQueue)
		while currentTask ~= nil and not (enableSchedulerDebugging and isSchedulerPaused) do
			if currentTask.expirationTime > currentTime and (not hasTimeRemaining or shouldYieldToHost()) then
				-- This currentTask hasn't expired, and we've reached the deadline.
				break
			end

			local callback = currentTask.callback
			if typeof(callback) == "function" then
				currentTask.callback = nil
				currentPriorityLevel = currentTask.priorityLevel
				local didUserCallbackTimeout = currentTask.expirationTime <= currentTime
				markTaskRun(currentTask, currentTime)
				local continuationCallback = callback(didUserCallbackTimeout)
				currentTime = getCurrentTime()
				if typeof(continuationCallback) == "function" then
					currentTask.callback = continuationCallback
					markTaskYield(currentTask, currentTime)
				else
					if enableProfiling then
						markTaskCompleted(currentTask, currentTime)
						currentTask.isQueued = false
					end

					if currentTask == peek(taskQueue) then
						pop(taskQueue)
					end
				end
				advanceTimers(currentTime)
			else
				pop(taskQueue)
			end

			currentTask = peek(taskQueue)
		end

		-- Return whether there's additional work
		if currentTask ~= nil then
			return true
		else
			local firstTimer = peek(timerQueue)
			if firstTimer ~= nil then
				requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime)
			end

			return false
		end
	end

	local function unstable_runWithPriority(priorityLevel, eventHandler)
		if
			priorityLevel == ImmediatePriority
			or priorityLevel == UserBlockingPriority
			or priorityLevel == NormalPriority
			or priorityLevel == LowPriority
			or priorityLevel == IdlePriority
		then
			-- Leave priority alone if assigned
		else
			priorityLevel = NormalPriority
		end

		local previousPriorityLevel = currentPriorityLevel
		currentPriorityLevel = priorityLevel

		-- deviation: YOLO flag for disabling pcall
		local ok, result
		if not _G.__YOLO__ then
			ok, result = xpcall(eventHandler, describeError)
		else
			ok = true
			result = eventHandler()
		end

		-- NOTE: finally
		currentPriorityLevel = previousPriorityLevel

		if not ok then
			error(result)
		end

		return result
	end

	local function unstable_next(eventHandler)
		local priorityLevel
		if
			currentPriorityLevel == ImmediatePriority
			or currentPriorityLevel == UserBlockingPriority
			or currentPriorityLevel == NormalPriority
		then
			-- Shift down to normal priority
			priorityLevel = NormalPriority
		else
			-- Anything lower than normal priority should remain at the current level.
			priorityLevel = currentPriorityLevel
		end

		local previousPriorityLevel = currentPriorityLevel
		currentPriorityLevel = priorityLevel

		-- deviation: YOLO flag for disabling pcall
		local ok, result
		if not _G.__YOLO__ then
			ok, result = xpcall(eventHandler, describeError)
		else
			ok = true
			result = eventHandler()
		end

		-- NOTE: finally
		currentPriorityLevel = previousPriorityLevel

		if not ok then
			error(result)
		end

		return result
	end

	local function unstable_wrapCallback(callback)
		local parentPriorityLevel = currentPriorityLevel

		return function(...)
			-- This is a fork of runWithPriority, inlined for performance.
			local previousPriorityLevel = currentPriorityLevel
			currentPriorityLevel = parentPriorityLevel

			-- deviation: YOLO flag for disabling pcall
			local ok, result
			if not _G.__YOLO__ then
				ok, result = xpcall(callback, describeError, ...)
			else
				ok = true
				result = callback(...)
			end

			-- NOTE: finally
			currentPriorityLevel = previousPriorityLevel

			if not ok then
				error(result)
			end

			return result
		end
	end

	local function unstable_scheduleCallback(priorityLevel, callback, options)
		local currentTime = getCurrentTime()

		local startTime

		if typeof(options) == "table" then
			local delay_ = options.delay
			if typeof(delay_) == "number" and delay_ > 0 then
				startTime = currentTime + delay_
			else
				startTime = currentTime
			end
		else
			startTime = currentTime
		end

		local timeout
		if priorityLevel == ImmediatePriority then
			timeout = IMMEDIATE_PRIORITY_TIMEOUT
		elseif priorityLevel == UserBlockingPriority then
			timeout = USER_BLOCKING_PRIORITY_TIMEOUT
		elseif priorityLevel == IdlePriority then
			timeout = IDLE_PRIORITY_TIMEOUT
		elseif priorityLevel == LowPriority then
			timeout = LOW_PRIORITY_TIMEOUT
		else
			timeout = NORMAL_PRIORITY_TIMEOUT
		end

		local expirationTime = startTime + timeout

		local newTask = {
			id = taskIdCounter,
			callback = callback,
			priorityLevel = priorityLevel,
			startTime = startTime,
			expirationTime = expirationTime,
			sortIndex = -1,
		}
		taskIdCounter += 1

		if enableProfiling then
			newTask.isQueued = false
		end

		if startTime > currentTime then
			-- This is a delayed task.
			newTask.sortIndex = startTime
			push(timerQueue, newTask)
			-- TODO(align): VALIDATE conversion from `peek(taskQueue) === null && newTask === peek(timerQueue)`
			if #taskQueue == 0 and newTask == peek(timerQueue) then
				-- All tasks are delayed, and this is the task with the earliest delay.
				if isHostTimeoutScheduled then
					-- Cancel an existing timeout.
					cancelHostTimeout()
				else
					isHostTimeoutScheduled = true
				end
				-- Schedule a timeout.
				requestHostTimeout(handleTimeout, startTime - currentTime)
			end
		else
			newTask.sortIndex = expirationTime
			push(taskQueue, newTask)
			if enableProfiling then
				markTaskStart(newTask, currentTime)
				newTask.isQueued = true
			end

			-- Schedule a host callback, if needed. If we're already performing work,
			-- wait until the next time we yield.
			if not isHostCallbackScheduled and not isPerformingWork then
				isHostCallbackScheduled = true
				requestHostCallback(flushWork)
			end
		end

		return newTask
	end

	local function unstable_pauseExecution()
		isSchedulerPaused = true
	end

	local function unstable_continueExecution()
		isSchedulerPaused = false
		if not isHostCallbackScheduled and not isPerformingWork then
			isHostCallbackScheduled = true
			requestHostCallback(flushWork)
		end
	end

	local function unstable_getFirstCallbackNode()
		return peek(taskQueue)
	end

	local function unstable_cancelCallback(task)
		if enableProfiling then
			if task.isQueued then
				local currentTime = getCurrentTime()
				markTaskCanceled(task, currentTime)
				task.isQueued = false
			end
		end

		-- Null out the callback to indicate the task has been canceled. (Can't
		-- remove from the queue because you can't remove arbitrary nodes from an
		-- array based heap, only the first one.)
		task.callback = nil
	end

	local function unstable_getCurrentPriorityLevel()
		return currentPriorityLevel
	end

	local unstable_requestPaint = requestPaint

	return {
		unstable_ImmediatePriority = ImmediatePriority,
		unstable_UserBlockingPriority = UserBlockingPriority,
		unstable_NormalPriority = NormalPriority,
		unstable_IdlePriority = IdlePriority,
		unstable_LowPriority = LowPriority,
		unstable_runWithPriority = unstable_runWithPriority,
		unstable_next = unstable_next,
		unstable_scheduleCallback = unstable_scheduleCallback,
		unstable_cancelCallback = unstable_cancelCallback,
		unstable_wrapCallback = unstable_wrapCallback,
		unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel,
		unstable_shouldYield = shouldYieldToHost,
		unstable_requestPaint = unstable_requestPaint,
		unstable_continueExecution = unstable_continueExecution,
		unstable_pauseExecution = unstable_pauseExecution,
		unstable_getFirstCallbackNode = unstable_getFirstCallbackNode,
		unstable_now = getCurrentTime,
		unstable_forceFrameRate = forceFrameRate,
		-- TODO: use if-expressions when all clients are on 503+
		unstable_Profiling = (function()
			if enableProfiling then
				return {
					startLoggingProfilingEvents = startLoggingProfilingEvents,
					stopLoggingProfilingEvents = stopLoggingProfilingEvents,
				}
			end
			return nil
		end)(),
	}
end
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="496">
              <Properties>
                <string name="Name">SchedulerFeatureFlags</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/9abc2785cb070148d64fae81e523246b90b92016/packages/scheduler/src/SchedulerFeatureFlags.js
--[[*
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*
]]

return {
	enableSchedulerDebugging = false,
	enableIsInputPending = false,
	enableProfiling = _G.__PROFILE__,
}
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="497">
              <Properties>
                <string name="Name">SchedulerHostConfig</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/00748c53e183952696157088a858352cc77b0010/packages/scheduler/src/SchedulerHostConfig.js
--[[*
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*
* @flow
]]

-- deviation: In React, this module throws an error and is expected to be
-- replaced via a bundler. In our case, we mock it explicitly when we need to
-- mock it, and return the "default" here
return require(script.Parent.forks["SchedulerHostConfig.default"])
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="498">
              <Properties>
                <string name="Name">SchedulerMinHeap</string>
                <string name="Source"><![CDATA[-- upstream: https://github.com/facebook/react/blob/e706721490e50d0bd6af2cd933dbf857fd8b61ed/packages/scheduler/src/SchedulerMinHeap.js
--!strict
--[[*
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*
* @flow
]]

type Heap = { [number]: Node? }
type Node = {
	id: number,
	sortIndex: number,
}

local exports = {}
-- deviation: This file contains several workarounds for Luau analysis issues by using the `::` operator
local compare, siftUp, siftDown

exports.push = function(heap: Heap, node: Node): ()
	local index = #heap + 1
	heap[index] = node

	siftUp(heap, node, index)
end

exports.peek = function(heap: Heap): Node?
	return heap[1]
end

exports.pop = function(heap: Heap): Node?
	local first = heap[1]
	if first ~= nil then
		local last = heap[#heap]
		heap[#heap] = nil

		if last :: Node ~= first :: Node then
			heap[1] = last
			siftDown(heap, last :: Node, 1)
		end
		return first
	else
		return nil
	end
end

siftUp = function(heap: Heap, node: Node, index: number): ()
	while true do
		local parentIndex = math.floor(index / 2)
		local parent = heap[parentIndex]
		if parent ~= nil and compare(parent :: Node, node :: Node) > 0 then
			-- The parent is larger. Swap positions.
			heap[parentIndex] = node
			heap[index] = parent
			index = parentIndex
		else
			-- The parent is smaller. Exit.
			return
		end
	end
end

siftDown = function(heap: Heap, node: Node, index: number): ()
	local length = #heap
	while index < length do
		local leftIndex = index * 2
		local left = heap[leftIndex]
		local rightIndex = leftIndex + 1
		local right = heap[rightIndex]

		-- If the left or right node is smaller, swap with the smaller of those.
		if left ~= nil and compare(left :: Node, node) < 0 then
			if right ~= nil and compare(right :: Node, left :: Node) < 0 then
				heap[index] = right
				heap[rightIndex] = node
				index = rightIndex
			else
				heap[index] = left
				heap[leftIndex] = node
				index = leftIndex
			end
		elseif right ~= nil and compare(right :: Node, node :: Node) < 0 then
			heap[index] = right
			heap[rightIndex] = node
			index = rightIndex
		else
			-- Neither child is smaller. Exit.
			return
		end
	end
end

compare = function(a: Node, b: Node): number
	-- Compare sort index first, then task id.
	local diff = a.sortIndex - b.sortIndex

	if diff == 0 then
		return a.id - b.id
	end

	return diff
end

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="499">
              <Properties>
                <string name="Name">SchedulerPriorities</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/00748c53e183952696157088a858352cc77b0010/packages/scheduler/src/SchedulerHostConfig.js
--[[*
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*
* @flow
]]

export type PriorityLevel = number

-- TODO: Use symbols?
return {
	NoPriority = 0,
	ImmediatePriority = 1,
	UserBlockingPriority = 2,
	NormalPriority = 3,
	LowPriority = 4,
	IdlePriority = 5,
}
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="500">
              <Properties>
                <string name="Name">SchedulerProfiling</string>
                <string name="Source"><![CDATA[--!strict
-- upstream https://github.com/facebook/react/blob/8af27aeedbc6b00bc2ef49729fc84f116c70a27c/packages/scheduler/src/SchedulerProfiling.js
--[[*
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*
]]
-- NOTE: this file is synced against a post-17.0.1 version that doesn't use SharedArrayBuffer
local Packages = script.Parent.Parent
-- NOTE: use patched console from shared
local console = require(Packages.Shared).console
local exports = {}

local SchedulerPriorities = require(script.Parent.SchedulerPriorities)
type PriorityLevel = SchedulerPriorities.PriorityLevel

local ScheduleFeatureFlags = require(script.Parent.SchedulerFeatureFlags)
local enableProfiling = ScheduleFeatureFlags.enableProfiling

local runIdCounter: number = 0
local mainThreadIdCounter: number = 0

-- Bytes per element is 4
local INITIAL_EVENT_LOG_SIZE = 131072
local MAX_EVENT_LOG_SIZE = 524288 -- Equivalent to 2 megabytes

local eventLogSize = 0
local eventLogBuffer = nil
local eventLog = nil
local eventLogIndex = 1

local TaskStartEvent = 1
local TaskCompleteEvent = 2
local TaskErrorEvent = 3
local TaskCancelEvent = 4
local TaskRunEvent = 5
local TaskYieldEvent = 6
local SchedulerSuspendEvent = 7
local SchedulerResumeEvent = 8

local function logEvent(entries)
	if eventLog ~= nil then
		-- deviation: upstream uses a packed array for performance. we do something simpler for now
		eventLogIndex += #entries
		if eventLogIndex + 1 > eventLogSize then
			eventLogSize *= 2
			if eventLogSize > MAX_EVENT_LOG_SIZE then
				-- Using console['error'] to evade Babel and ESLint
				console["error"](
					"Scheduler Profiling: Event log exceeded maximum size. Don't "
						.. "forget to call `stopLoggingProfilingEvents()`."
				)
				exports.stopLoggingProfilingEvents()
				return
			end
			local newEventLog = {}
			table.insert(newEventLog, eventLog)
			eventLogBuffer = newEventLog
			eventLog = newEventLog
		end
		table.insert(eventLog, entries)
	end
end

exports.startLoggingProfilingEvents = function()
	eventLogSize = INITIAL_EVENT_LOG_SIZE
	eventLogBuffer = {}
	eventLog = eventLogBuffer
	eventLogIndex = 1
end

exports.stopLoggingProfilingEvents = function()
	local buffer = eventLogBuffer
	eventLogSize = 0
	-- FIXME Luau: needs local inference? Type 'nil' could not be converted into '{|  |}'
	eventLogBuffer = nil :: any
	eventLog = nil :: any
	eventLogIndex = 1
	return buffer
end

exports.markTaskStart = function(task, ms: number)
	if enableProfiling then
		if eventLog ~= nil then
			-- performance.now returns a float, representing milliseconds. When the
			-- event is logged, it's coerced to an int. Convert to microseconds to
			-- maintain extra degrees of precision.
			logEvent({ TaskStartEvent, ms * 1000, task.id, task.priorityLevel })
		end
	end
end

exports.markTaskCompleted = function(task, ms: number)
	if enableProfiling then
		if eventLog ~= nil then
			-- performance.now returns a float, representing milliseconds. When the
			-- event is logged, it's coerced to an int. Convert to microseconds to
			-- maintain extra degrees of precision.
			logEvent({ TaskCompleteEvent, ms * 1000, task.id })
		end
	end
end

exports.markTaskCanceled = function(task, ms: number)
	if enableProfiling then
		if eventLog ~= nil then
			logEvent({ TaskCancelEvent, ms * 1000, task.id })
		end
	end
end

exports.markTaskErrored = function(task, ms: number)
	if enableProfiling then
		if eventLog ~= nil then
			logEvent({ TaskErrorEvent, ms * 1000, task.id })
		end
	end
end

exports.markTaskRun = function(task, ms: number)
	if enableProfiling then
		runIdCounter += 1

		if eventLog ~= nil then
			logEvent({ TaskRunEvent, ms * 1000, task.id, runIdCounter })
		end
	end
end

exports.markTaskYield = function(task, ms: number)
	if enableProfiling then
		if eventLog ~= nil then
			logEvent({ TaskYieldEvent, ms * 1000, task.id, runIdCounter })
		end
	end
end

exports.markSchedulerSuspended = function(ms: number)
	if enableProfiling then
		mainThreadIdCounter += 1

		if eventLog ~= nil then
			logEvent({ SchedulerSuspendEvent, ms * 1000, mainThreadIdCounter })
		end
	end
end

exports.markSchedulerUnsuspended = function(ms: number)
	if enableProfiling then
		if eventLog ~= nil then
			logEvent({ SchedulerResumeEvent, ms * 1000, mainThreadIdCounter })
		end
	end
end

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="501">
              <Properties>
                <string name="Name">Tracing</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/9abc2785cb070148d64fae81e523246b90b92016/packages/scheduler/src/Tracing.js
-- /**
--  * Copyright (c) Facebook, Inc. and its affiliates.
--  *
--  * This source code is licensed under the MIT license found in the
--  * LICENSE file in the root directory of this source tree.
--  *
--  * @flow
--  */

type Function = (any) -> any
local Packages = script.Parent.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)
type Set<T> = LuauPolyfill.Set<T>
local Set = LuauPolyfill.Set
local exports = {}

local ReactFeatureFlags = require(Packages.Shared).ReactFeatureFlags
local enableSchedulerTracing = ReactFeatureFlags.enableSchedulerTracing

export type Interaction = {
	__count: number,
	id: number,
	name: string,
	timestamp: number,
}

export type Subscriber = {
	-- A new interaction has been created via the trace() method.
	onInteractionTraced: (Interaction) -> (),

	-- All scheduled async work for an interaction has finished.
	onInteractionScheduledWorkCompleted: (Interaction) -> (),

	-- New async work has been scheduled for a set of interactions.
	-- When this work is later run, onWorkStarted/onWorkStopped will be called.
	-- A batch of async/yieldy work may be scheduled multiple times before completing.
	-- In that case, onWorkScheduled may be called more than once before onWorkStopped.
	-- Work is scheduled by a "thread" which is identified by a unique ID.
	onWorkScheduled: (Set<Interaction>, number) -> (),

	-- A batch of scheduled work has been canceled.
	-- Work is done by a "thread" which is identified by a unique ID.
	onWorkCanceled: (Set<Interaction>, number) -> (),

	-- A batch of work has started for a set of interactions.
	-- When this work is complete, onWorkStopped will be called.
	-- Work is not always completed synchronously yielding may occur in between.
	-- A batch of async/yieldy work may also be re-started before completing.
	-- In that case, onWorkStarted may be called more than once before onWorkStopped.
	-- Work is done by a "thread" which is identified by a unique ID.
	onWorkStarted: (Set<Interaction>, number) -> (),

	-- A batch of work has completed for a set of interactions.
	-- Work is done by a "thread" which is identified by a unique ID.
	onWorkStopped: (Set<Interaction>, number) -> (),
	-- ...
}

export type InteractionsRef = { current: Set<Interaction> }

export type SubscriberRef = { current: Subscriber | nil }

local DEFAULT_THREAD_ID = 0

-- Counters used to generate unique IDs.
local interactionIDCounter: number = 0
local threadIDCounter: number = 0

-- Set of currently traced interactions.
-- Interactions "stack"–
-- Meaning that newly traced interactions are appended to the previously active set.
-- When an interaction goes out of scope, the previous set (if any) is restored.
local interactionsRef: InteractionsRef

-- Listener(s) to notify when interactions begin and end.
local subscriberRef: SubscriberRef

if enableSchedulerTracing then
	interactionsRef = {
		current = Set.new(),
	}
	subscriberRef = {
		current = nil,
	}
end

exports.__interactionsRef = interactionsRef
exports.__subscriberRef = subscriberRef

exports.unstable_clear = function(callback: Function)
	if not enableSchedulerTracing then
		return callback()
	end

	local prevInteractions = interactionsRef.current
	interactionsRef.current = Set.new()

	-- try
	local ok, result = pcall(callback)
	-- finally
	interactionsRef.current = prevInteractions

	if not ok then
		error(result)
	end

	return result
end

exports.unstable_getCurrent = function(): Set<Interaction> | nil
	if not enableSchedulerTracing then
		return nil
	else
		return interactionsRef.current
	end
end

exports.unstable_getThreadID = function(): number
	threadIDCounter += 1
	return threadIDCounter
end

exports.unstable_trace = function(name: string, timestamp: number, callback: Function, threadID_: number?): any
	-- NOTE: default argument value
	local threadID = if threadID_ ~= nil then threadID_ else DEFAULT_THREAD_ID

	if not enableSchedulerTracing then
		return callback()
	end

	local interaction: Interaction = {
		__count = 1,
		id = interactionIDCounter,
		name = name,
		timestamp = timestamp,
	}
	interactionIDCounter += 1

	local prevInteractions = interactionsRef.current

	-- Traced interactions should stack/accumulate.
	-- To do that, clone the current interactions.
	-- The previous set will be restored upon completion.
	local interactions = Set.new(prevInteractions)
	interactions:add(interaction)
	interactionsRef.current = interactions

	local subscriber = subscriberRef.current
	local returnValue

	-- try
	local ok, result = pcall(function()
		if subscriber ~= nil then
			subscriber.onInteractionTraced(interaction)
		end
	end)
	-- finally
	-- try 2
	local ok2, result2 = pcall(function()
		if subscriber ~= nil then
			subscriber.onWorkStarted(interactions, threadID)
		end
	end)

	-- finally 2
	-- try 3
	local ok3, result3 = pcall(function()
		returnValue = callback()
	end)
	-- finally 3
	interactionsRef.current = prevInteractions
	-- try 4
	local ok4, result4 = pcall(function()
		if subscriber ~= nil then
			subscriber.onWorkStopped(interactions, threadID)
		end
	end)
	-- finally 4
	interaction.__count -= 1

	-- If no async work was scheduled for this interaction,
	-- Notify subscribers that it's completed.
	if subscriber ~= nil and interaction.__count == 0 then
		subscriber.onInteractionScheduledWorkCompleted(interaction)
	end

	if not ok4 then
		error(result4)
	end

	if not ok3 then
		error(result3)
	end

	if not ok2 then
		error(result2)
	end

	if not ok then
		error(result)
	end

	return returnValue
end

exports.unstable_wrap = function(
	callback: Function,
	threadID: number
): any -- ROLBOX deviation: any, since __call doesn't map to Function
	-- NOTE: default argument value
	if threadID == nil then
		threadID = DEFAULT_THREAD_ID
	end

	if not enableSchedulerTracing then
		return callback
	end

	local wrappedInteractions = interactionsRef.current

	local subscriber = subscriberRef.current
	if subscriber ~= nil then
		subscriber.onWorkScheduled(wrappedInteractions, threadID)
	end

	-- Update the pending async work count for the current interactions.
	-- Update after calling subscribers in case of error.
	for _, interaction in wrappedInteractions do
		interaction.__count += 1
	end

	local hasRun = false

	local function _wrapped(self, ...)
		local prevInteractions = interactionsRef.current
		interactionsRef.current = wrappedInteractions

		subscriber = subscriberRef.current

		-- try
		local ok, result = pcall(function(...)
			local returnValue

			-- try 2
			local ok2, result2 = pcall(function()
				if subscriber ~= nil then
					subscriber.onWorkStarted(wrappedInteractions, threadID)
				end
			end)
			-- finally 2
			-- try 3
			local ok3, result3 = pcall(function(...)
				returnValue = callback(...)
			end, ...)
			-- finally 3
			interactionsRef.current = prevInteractions

			if subscriber ~= nil then
				subscriber.onWorkStopped(wrappedInteractions, threadID)
			end

			if not ok3 then
				error(result3)
			end

			if not ok2 then
				error(result2)
			end

			return returnValue
		end, ...)

		-- finally {
		if not hasRun then
			-- We only expect a wrapped function to be executed once,
			-- But in the event that it's executed more than once–
			-- Only decrement the outstanding interaction counts once.
			hasRun = true

			-- Update pending async counts for all wrapped interactions.
			-- If this was the last scheduled async work for any of them,
			-- Mark them as completed.
			for _, interaction in wrappedInteractions do
				interaction.__count -= 1

				if subscriber ~= nil and interaction.__count == 0 then
					subscriber.onInteractionScheduledWorkCompleted(interaction)
				end
			end
		end

		if not ok then
			error(result)
		end

		return result
	end

	local _cancel = function()
		subscriber = subscriberRef.current

		local ok, result = pcall(function()
			if subscriber ~= nil then
				subscriber.onWorkCanceled(wrappedInteractions, threadID)
			end
		end)
		-- finally
		-- Update pending async counts for all wrapped interactions.
		-- If this was the last scheduled async work for any of them,
		-- Mark them as completed.
		for _, interaction in wrappedInteractions do
			interaction.__count -= 1

			if subscriber ~= nil and interaction.__count == 0 then
				subscriber.onInteractionScheduledWorkCompleted(interaction)
			end
		end

		if not ok then
			error(result)
		end
	end

	local wrapped = {}
	setmetatable(wrapped, {
		__call = _wrapped,
	})
	wrapped.cancel = _cancel

	return wrapped
end

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="502">
              <Properties>
                <string name="Name">TracingSubscriptions</string>
                <string name="Source"><![CDATA[-- upstream: https://github.com/facebook/react/blob/9abc2785cb070148d64fae81e523246b90b92016/packages/scheduler/src/TracingSubscriptions.js
-- /**
--  * Copyright (c) Facebook, Inc. and its affiliates.
--  *
--  * This source code is licensed under the MIT license found in the
--  * LICENSE file in the root directory of this source tree.
--  *
--  * @flow
--  */
type Set<T> = { [T]: boolean? }
type Array<T> = { [number]: T }
local exports = {}
local Packages = script.Parent.Parent
local Object = require(Packages.LuauPolyfill).Object

local Tracing = require(script.Parent.Tracing)
type Interaction = Tracing.Interaction
type Subscriber = Tracing.Subscriber

local ReactFeatureFlags = require(Packages.Shared).ReactFeatureFlags

local enableSchedulerTracing = ReactFeatureFlags.enableSchedulerTracing
local __subscriberRef = Tracing.__subscriberRef

local subscribers: Set<Subscriber> = {}
if enableSchedulerTracing then
	subscribers = {}
end

exports.unstable_subscribe = function(subscriber: Subscriber): ()
	if enableSchedulerTracing then
		subscribers[subscriber] = true

		if #Object.keys(subscribers) == 1 then
			__subscriberRef.current = {
				onInteractionScheduledWorkCompleted = onInteractionScheduledWorkCompleted,
				onInteractionTraced = onInteractionTraced,
				onWorkCanceled = onWorkCanceled,
				onWorkScheduled = onWorkScheduled,
				onWorkStarted = onWorkStarted,
				onWorkStopped = onWorkStopped,
			}
		end
	end
end

exports.unstable_unsubscribe = function(subscriber: Subscriber): ()
	if enableSchedulerTracing then
		subscribers[subscriber] = nil

		if #Object.keys(subscribers) == 0 then
			__subscriberRef.current = nil
		end
	end
end

function onInteractionTraced(interaction: Interaction): ()
	local didCatchError = false
	local caughtError = nil

	for subscriber, _ in subscribers do
		-- try
		local ok, result = pcall(subscriber.onInteractionTraced, interaction)
		-- catch
		if not ok then
			local error_ = result
			if not didCatchError then
				didCatchError = true
				caughtError = error_
			end
		end
	end

	if didCatchError then
		error(caughtError)
	end
end

function onInteractionScheduledWorkCompleted(interaction: Interaction): ()
	local didCatchError = false
	local caughtError = nil

	for subscriber, _ in subscribers do
		-- try
		local ok, result = pcall(subscriber.onInteractionScheduledWorkCompleted, interaction)
		-- catch
		if not ok then
			local error_ = result
			if not didCatchError then
				didCatchError = true
				caughtError = error_
			end
		end
	end

	if didCatchError then
		error(caughtError)
	end
end

function onWorkScheduled(interactions: Set<Interaction>, threadID: number): ()
	local didCatchError = false
	local caughtError = nil

	for subscriber, _ in subscribers do
		-- try
		local ok, result = pcall(subscriber.onWorkScheduled, interactions, threadID)
		-- catch
		if not ok then
			local error_ = result
			if not didCatchError then
				didCatchError = true
				caughtError = error_
			end
		end
	end

	if didCatchError then
		error(caughtError)
	end
end

function onWorkStarted(interactions: Set<Interaction>, threadID: number): ()
	local didCatchError = false
	local caughtError = nil

	for subscriber, _ in subscribers do
		-- try
		local ok, result = pcall(subscriber.onWorkStarted, interactions, threadID)
		-- catch
		if not ok then
			local error_ = result
			if not didCatchError then
				didCatchError = true
				caughtError = error_
			end
		end
	end

	if didCatchError then
		error(caughtError)
	end
end

function onWorkStopped(interactions: Set<Interaction>, threadID: number): ()
	local didCatchError = false
	local caughtError = nil

	for subscriber, _ in subscribers do
		-- try
		local ok, result = pcall(subscriber.onWorkStopped, interactions, threadID)
		-- catch
		if not ok then
			local error_ = result
			if not didCatchError then
				didCatchError = true
				caughtError = error_
			end
		end
	end

	if didCatchError then
		error(caughtError)
	end
end

function onWorkCanceled(interactions: Set<Interaction>, threadID: number): ()
	local didCatchError = false
	local caughtError = nil

	for subscriber, _ in subscribers do
		-- try
		local ok, result = pcall(subscriber.onWorkCanceled, interactions, threadID)
		-- catch
		if not ok then
			local error_ = result
			if not didCatchError then
				didCatchError = true
				caughtError = error_
			end
		end
	end

	if didCatchError then
		error(caughtError)
	end
end

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="Folder" referent="503">
              <Properties>
                <string name="Name">forks</string>
              </Properties>
              <Item class="ModuleScript" referent="504">
                <Properties>
                  <string name="Name">SchedulerHostConfig.default</string>
                  <string name="Source"><![CDATA[-- upstream: https://github.com/facebook/react/blob/5474a83e258b497584bed9df95de1d554bc53f89/packages/scheduler/src/forks/SchedulerHostConfig.default.js
--!strict
--[[*
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
]]

local Packages = script.Parent.Parent.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)
type Error = LuauPolyfill.Error
local Object = LuauPolyfill.Object
local Shared = require(Packages.Shared)
local console = Shared.console
local errorToString = Shared.errorToString
local describeError = Shared.describeError

-- deviation: getCurrentTime will always map to `tick` in Luau
local getCurrentTime = function()
	-- Return a result in milliseconds
	return os.clock() * 1000
end

-- deviation: This module in React exports a different implementation if
-- it detects certain APIs from the DOM interface. We instead attempt to
-- approximate that behavior so that we can access features like dividing work
-- according to frame time

-- Capture local references to native APIs, in case a polyfill overrides them.
local setTimeout = LuauPolyfill.setTimeout
local clearTimeout = LuauPolyfill.clearTimeout

local isMessageLoopRunning = false
local scheduledHostCallback: ((boolean, number) -> boolean) | nil = nil
local taskTimeoutID = Object.None

-- Scheduler periodically yields in case there is other work on the main
-- thread, like user events. By default, it yields multiple times per frame.
-- It does not attempt to align with frame boundaries, since most tasks don't
-- need to be frame aligned; for those that do, use requestAnimationFrame.
local yieldInterval = 15
local deadline = 0

-- deviation: Removed some logic around browser functionality that's not
-- present in the roblox engine
local function shouldYieldToHost()
	return getCurrentTime() >= deadline
end

-- Since we yield every frame regardless, `requestPaint` has no effect.
local function requestPaint() end

local function forceFrameRate(fps)
	if fps < 0 or fps > 125 then
		console.warn(
			"forceFrameRate takes a positive int between 0 and 125, "
				.. "forcing frame rates higher than 125 fps is not supported"
		)
		return
	end
	if fps > 0 then
		yieldInterval = math.floor(1000 / fps)
	else
		-- reset the framerate
		yieldInterval = 5
	end
end

local function performWorkUntilDeadline()
	if scheduledHostCallback ~= nil then
		local currentTime = getCurrentTime()
		-- Yield after `yieldInterval` ms, regardless of where we are in the vsync
		-- cycle. This means there's always time remaining at the beginning of
		-- the message event.
		deadline = currentTime + yieldInterval
		local hasTimeRemaining = true

		local ok, result
		local function doWork()
			local hasMoreWork = (scheduledHostCallback :: any)(hasTimeRemaining, currentTime)
			if not hasMoreWork then
				isMessageLoopRunning = false
				scheduledHostCallback = nil
			else
				-- If there's more work, schedule the next message event at the end
				-- of the preceding one.

				-- deviation: Use task api instead of message channel;
				-- depending on whether or not we still have time to perform
				-- more work, either yield and defer till later this frame, or
				-- delay work till next frame

				-- FIXME: What's the proper combination of task.defer and
				-- task.delay that makes this optimal?
				task.delay(0, performWorkUntilDeadline)
			end
			return nil
		end
		if not _G.__YOLO__ then
			ok, result = xpcall(doWork, describeError)
		else
			result = doWork()
			ok = true
		end

		if not ok then
			-- If a scheduler task throws, exit the current coroutine so the
			-- error can be observed.
			task.delay(0, performWorkUntilDeadline)

			-- FIXME: the top-level Luau VM handler doesn't deal with
			-- non-string errors, so massage it until VM support lands
			error(errorToString(result :: any))
		end
	else
		isMessageLoopRunning = false
	end
end

local function requestHostCallback(callback)
	scheduledHostCallback = callback
	if not isMessageLoopRunning then
		isMessageLoopRunning = true

		task.delay(0, performWorkUntilDeadline)
	end
end

local function cancelHostCallback()
	scheduledHostCallback = nil
end

local function requestHostTimeout(callback, ms)
	taskTimeoutID = setTimeout(function()
		callback(getCurrentTime())
	end, ms)
end

local function cancelHostTimeout()
	clearTimeout(taskTimeoutID)
	taskTimeoutID = Object.None
end

return {
	requestHostCallback = requestHostCallback,
	cancelHostCallback = cancelHostCallback,
	requestHostTimeout = requestHostTimeout,
	cancelHostTimeout = cancelHostTimeout,
	shouldYieldToHost = shouldYieldToHost,
	requestPaint = requestPaint,
	getCurrentTime = getCurrentTime,
	forceFrameRate = forceFrameRate,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="505">
                <Properties>
                  <string name="Name">SchedulerHostConfig.mock</string>
                  <string name="Source"><![CDATA[-- upstream: https://github.com/facebook/react/blob/5474a83e258b497584bed9df95de1d554bc53f89/packages/scheduler/src/forks/SchedulerHostConfig.mock.js
--[[*
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*
* @flow
]]

local exports = {}

local currentTime: number = 0
local scheduledCallback: ((boolean, number) -> ()) | nil = nil
local scheduledTimeout: ((number) -> ()) | nil = nil
local timeoutTime: number = -1
local yieldedValues: { [number]: any } | nil = nil
local expectedNumberOfYields: number = -1
local didStop: boolean = false
local isFlushing: boolean = false
local needsPaint: boolean = false
local shouldYieldForPaint: boolean = false
local Packages = script.Parent.Parent.Parent
local console = require(Packages.Shared).console
local ConsolePatchingDev = require(Packages.Shared).ConsolePatchingDev
local disabledLog = ConsolePatchingDev.disabledLog

exports.requestHostCallback = function(callback: (boolean) -> ())
	scheduledCallback = callback
end

exports.cancelHostCallback = function()
	scheduledCallback = nil
end

exports.requestHostTimeout = function(callback: (number) -> (), ms: number)
	scheduledTimeout = callback
	timeoutTime = currentTime + ms
end

exports.cancelHostTimeout = function()
	scheduledTimeout = nil
	timeoutTime = -1
end

exports.shouldYieldToHost = function(): boolean
	-- deviation: widening type to workaround Luau shortcomings
	-- https://jira.rbx.com/browse/CLI-35978
	local values: any = yieldedValues
	if
		(expectedNumberOfYields ~= -1 and values ~= nil and #values >= expectedNumberOfYields)
		or (shouldYieldForPaint and needsPaint)
	then
		-- We yielded at least as many values as expected. Stop flushing.
		didStop = true
		return true
	end

	return false
end

exports.getCurrentTime = function(): number
	return currentTime
end

exports.forceFrameRate = function()
	-- No-op
end

exports.reset = function()
	if isFlushing then
		error("Cannot reset while already flushing work.")
	end

	currentTime = 0
	scheduledCallback = nil
	scheduledTimeout = nil
	timeoutTime = -1
	yieldedValues = nil
	expectedNumberOfYields = -1
	didStop = false
	isFlushing = false
	needsPaint = false
end

-- Should only be used via an assertion helper that inspects the yielded values.
exports.unstable_flushNumberOfYields = function(count: number)
	if isFlushing then
		error("Already flushing work.")
	end

	if scheduledCallback ~= nil then
		local cb = scheduledCallback
		expectedNumberOfYields = count
		isFlushing = true

		local ok, result = pcall(function()
			local hasMoreWork = true
			repeat
				hasMoreWork = cb(true, currentTime)
			until not hasMoreWork or didStop

			if not hasMoreWork then
				scheduledCallback = nil
			end
		end)

		expectedNumberOfYields = -1
		didStop = false
		isFlushing = false

		if not ok then
			error(result)
		end
	end
end

exports.unstable_flushUntilNextPaint = function()
	if isFlushing then
		error("Already flushing work.")
	end

	if scheduledCallback ~= nil then
		local cb = scheduledCallback
		shouldYieldForPaint = true
		needsPaint = false
		isFlushing = true
		-- try
		local ok, result = pcall(function()
			local hasMoreWork = true
			repeat
				hasMoreWork = cb(true, currentTime)
			until not hasMoreWork or didStop

			if not hasMoreWork then
				scheduledCallback = nil
			end
		end)

		-- finally
		shouldYieldForPaint = false
		didStop = false
		isFlushing = false

		if not ok then
			error(result)
		end
	end
end

exports.unstable_flushExpired = function()
	if isFlushing then
		error("Already flushing work.")
	end
	if scheduledCallback ~= nil then
		isFlushing = true
		local ok, result = pcall(function()
			-- deviation: widening type to workaround Luau shortcomings
			-- https://jira.rbx.com/browse/CLI-35978
			local callback: any = scheduledCallback
			local hasMoreWork = callback(false, currentTime)
			if not hasMoreWork then
				scheduledCallback = nil
			end
		end)

		isFlushing = false

		if not ok then
			error(result)
		end
	end
end

exports.unstable_flushAllWithoutAsserting = function(): boolean
	-- Returns false if no work was flushed.
	if isFlushing then
		error("Already flushing work.")
	end
	if scheduledCallback ~= nil then
		local cb = scheduledCallback
		isFlushing = true
		local ok, result = pcall(function()
			local hasMoreWork = true
			repeat
				hasMoreWork = cb(true, currentTime)
			until not hasMoreWork

			if not hasMoreWork then
				scheduledCallback = nil
			end
		end)

		isFlushing = false

		if not ok then
			error(result)
		end

		return true
	else
		return false
	end
end

exports.unstable_clearYields = function(): { [number]: any }
	if yieldedValues == nil then
		return {}
	end
	local values = yieldedValues
	yieldedValues = nil
	return values
end

exports.unstable_flushAll = function()
	if yieldedValues ~= nil then
		error("Log is not empty. Assert on the log of yielded values before " .. "flushing additional work.")
	end
	exports.unstable_flushAllWithoutAsserting()
	if yieldedValues ~= nil then
		error(
			"While flushing work, something yielded a value. Use an "
				.. "assertion helper to assert on the log of yielded values, e.g. "
				.. "expect(Scheduler).toFlushAndYield([...])"
		)
	end
end

exports.unstable_yieldValue = function(value: any)
	-- eslint-disable-next-line react-internal/no-production-logging
	if console.log == disabledLog then
		-- If console.log has been patched, we assume we're in render
		-- replaying and we ignore any values yielding in the second pass.
		return
	end
	if yieldedValues == nil then
		yieldedValues = { value }
	else
		-- deviation: widening type to workaround Luau shortcomings
		-- https://jira.rbx.com/browse/CLI-35978
		local values: any = yieldedValues
		table.insert(values, value)
	end
end

exports.unstable_advanceTime = function(ms: number)
	-- eslint-disable-next-line react-internal/no-production-logging
	if console.log == disabledLog then
		-- If console.log has been patched, we assume we're in render
		-- replaying and we ignore any time advancing in the second pass.
		return
	end
	currentTime += ms

	if scheduledTimeout ~= nil and timeoutTime <= currentTime then
		-- deviation: widening type to workaround Luau shortcomings
		-- https://jira.rbx.com/browse/CLI-35978
		local timeout: any = scheduledTimeout
		timeout(currentTime)
		timeoutTime = -1
		scheduledTimeout = nil
	end
end

exports.requestPaint = function()
	needsPaint = true
end

return exports
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="506">
              <Properties>
                <string name="Name">unstable_mock</string>
                <string name="Source"><![CDATA[--!strict
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
*]]
local Tracing = require(script.Parent.Tracing)
local TracingSubscriptions = require(script.Parent.TracingSubscriptions)
-- deviation: export Tracing type from the package exports to avoid direct file access
export type Interaction = Tracing.Interaction

local initializeScheduler = require(script.Parent.Scheduler)
local HostConfig = require(script.Parent.forks["SchedulerHostConfig.mock"])

local Scheduler = initializeScheduler(HostConfig)

local exports = {}
exports.tracing = {}
-- FIXME Luau: need to fix CLI-56768 to remove any casts
for key, value in Scheduler :: any do
	exports[key] = value
end
for key, value in Tracing :: any do
	exports.tracing[key] = value
end
for key, value in TracingSubscriptions :: any do
	exports.tracing[key] = value
end

exports.unstable_flushAllWithoutAsserting = HostConfig.unstable_flushAllWithoutAsserting
exports.unstable_flushNumberOfYields = HostConfig.unstable_flushNumberOfYields
exports.unstable_flushExpired = HostConfig.unstable_flushExpired
exports.unstable_clearYields = HostConfig.unstable_clearYields
exports.unstable_flushUntilNextPaint = HostConfig.unstable_flushUntilNextPaint
exports.unstable_flushAll = HostConfig.unstable_flushAll
exports.unstable_yieldValue = HostConfig.unstable_yieldValue
exports.unstable_advanceTime = HostConfig.unstable_advanceTime
exports.unstable_Profiling = Scheduler.unstable_Profiling

return exports
]]></string>
              </Properties>
            </Item>
          </Item>
          <Item class="ModuleScript" referent="507">
            <Properties>
              <string name="Name">services</string>
              <string name="Source"><![CDATA[return setmetatable({}, {
	__index = function(self, serviceName)
		local service = game:GetService(serviceName)
		self[serviceName] = service
		return service
	end,
})
]]></string>
            </Properties>
          </Item>
          <Item class="Folder" referent="508">
            <Properties>
              <string name="Name">set-timeout</string>
            </Properties>
            <Item class="ModuleScript" referent="509">
              <Properties>
                <string name="Name">out</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.0
local TS = _G[script]
local exports = {}
for _k, _v in TS.import(script, script, "set-countdown") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "set-interval") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "set-timeout") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "throttle") or {} do
	exports[_k] = _v
end
for _k, _v in TS.import(script, script, "debounce") or {} do
	exports[_k] = _v
end
return exports
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="510">
                <Properties>
                  <string name="Name">debounce</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.0
local TS = _G[script]
local setTimeout = TS.import(script, script.Parent, "set-timeout").setTimeout
--[[
	*
	* Creates a debounced function that delays invoking `callback` until after `wait`
	* seconds have elapsed since the last time the debounced function was invoked.
	* The debounced function comes with a `cancel` method to cancel delayed
	* `callback` invocations and a `flush` method to immediately invoke them.
	*
	* Provide `options` to indicate whether `callback` should be invoked on the
	* leading and/or trailing edge of the `wait` timeout. The `callback` is invoked
	* with the last arguments provided to the debounced function. Subsequent calls
	* to the debounced function return the result of the last `callback` invocation.
	*
	* **Note:** If `leading` and `trailing` options are `true`, `callback` is
	* invoked on the trailing edge of the timeout only if the debounced function
	* is invoked more than once during the `wait` timeout.
	*
	* If `wait` is `0` and `leading` is `false`, `callback` invocation is deferred
	* until the next tick, similar to `setTimeout` with a timeout of `0`.
	*
	* See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	* for details over the differences between `debounce` and `throttle`.
	*
	* @param callback The function to debounce.
	* @param wait The number of seconds to delay. Defaults to `0`.
	* @param options The options object.
	* @returns The new debounced function.
	* @see https://github.com/lodash/lodash/blob/master/debounce.js/
	* @see https://css-tricks.com/debouncing-throttling-explained-examples/
]]
local function debounce(callback, wait, options)
	if wait == nil then
		wait = 0
	end
	if options == nil then
		options = {}
	end
	local _binding = options
	local leading = _binding.leading
	if leading == nil then
		leading = false
	end
	local trailing = _binding.trailing
	if trailing == nil then
		trailing = true
	end
	local maxWait = _binding.maxWait
	local maxing = maxWait ~= nil
	local lastCallTime = 0
	local lastInvokeTime = 0
	local lastArgs
	local result
	local cancelTimeout
	local invoke = function(time)
		local args = lastArgs
		lastArgs = nil
		lastInvokeTime = time
		result = callback(unpack(args))
		return result
	end
	local timerExpired
	local leadingEdge = function(time)
		-- Reset any `maxWait` timer.
		lastInvokeTime = time
		-- Start the timer for the trailing edge.
		cancelTimeout = setTimeout(timerExpired, wait)
		-- Invoke the leading edge.
		return if leading then invoke(time) else result
	end
	local remainingWait = function(time)
		local timeSinceLastCall = time - lastCallTime
		local timeSinceLastInvoke = time - lastInvokeTime
		local timeWaiting = wait - timeSinceLastCall
		return if maxing then math.min(timeWaiting, maxWait - timeSinceLastInvoke) else timeWaiting
	end
	local shouldInvoke = function(time)
		local timeSinceLastCall = time - lastCallTime
		local timeSinceLastInvoke = time - lastInvokeTime
		-- Either this is the first call, activity has stopped and we're at the
		-- trailing edge, the system time has gone backwards and we're treating
		-- it as the trailing edge, or we've hit the `maxWait` limit.
		return lastCallTime == nil or (timeSinceLastCall >= wait or (timeSinceLastCall < 0 or (maxing and timeSinceLastInvoke >= maxWait)))
	end
	local trailingEdge
	timerExpired = function()
		local time = os.clock()
		if shouldInvoke(time) then
			return trailingEdge(time)
		end
		-- Restart the timer.
		cancelTimeout = setTimeout(timerExpired, remainingWait(time))
	end
	trailingEdge = function(time)
		cancelTimeout = nil
		-- Only invoke if we have `lastArgs` which means `invoke` was
		-- debounced at least once.
		if trailing and lastArgs then
			return invoke(time)
		end
		lastArgs = nil
		return result
	end
	local cancel = function()
		local _result = cancelTimeout
		if _result ~= nil then
			_result()
		end
		cancelTimeout = nil
		lastInvokeTime = 0
		lastArgs = nil
		lastCallTime = 0
	end
	local flush = function()
		return if cancelTimeout == nil then result else trailingEdge(os.clock())
	end
	local pending = function()
		return cancelTimeout ~= nil
	end
	local debounced = function(...)
		local args = { ... }
		local time = os.clock()
		local isInvoking = shouldInvoke(time)
		lastArgs = args
		lastCallTime = time
		if isInvoking then
			if cancelTimeout == nil then
				return leadingEdge(lastCallTime)
			end
			if maxing then
				-- Handle invocations in a tight loop.
				cancelTimeout = setTimeout(timerExpired, wait)
				return invoke(lastCallTime)
			end
		end
		if cancelTimeout == nil then
			cancelTimeout = setTimeout(timerExpired, wait)
		end
		return result
	end
	return setmetatable({
		cancel = cancel,
		flush = flush,
		pending = pending,
	}, {
		__call = function(_, ...)
			local args = { ... }
			return debounced(unpack(args))
		end,
	})
end
return {
	debounce = debounce,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="511">
                <Properties>
                  <string name="Name">debounce.spec</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.0
local TS = _G[script]
-- / <reference types="@rbxts/testez/globals" />
local debounce = TS.import(script, script.Parent, "debounce").debounce
return function()
	it("should debounce a function", function()
		local callCount = 0
		local debounced = debounce(function(value)
			callCount += 1
			return value
		end, 0.03)
		local resultsA = { debounced("a"), debounced("b"), debounced("c") }
		expect(resultsA[1]).to.equal(nil)
		expect(resultsA[2]).to.equal(nil)
		expect(resultsA[3]).to.equal(nil)
		expect(callCount).to.equal(0)
		task.wait(0.05)
		expect(callCount).to.equal(1)
		local resultsB = { debounced("d"), debounced("e"), debounced("f") }
		expect(resultsB[1]).to.equal("c")
		expect(resultsB[2]).to.equal("c")
		expect(resultsB[3]).to.equal("c")
		expect(callCount).to.equal(1)
		task.wait(0.05)
		expect(callCount).to.equal(2)
	end)
	it("subsequent debounced calls return the last `func` result", function()
		local debounced = debounce(function(x)
			return x
		end, 0.03)
		debounced(1)
		task.wait(0.05)
		expect(debounced(2)).to.equal(1)
		task.wait(0.05)
		expect(debounced(3)).to.equal(2)
	end)
	it("should not immediately call `func` when `wait` is `0`", function()
		local callCount = 0
		local debounced = debounce(function()
			local _original = callCount
			callCount += 1
			return _original
		end, 0)
		debounced()
		debounced()
		debounced()
		expect(callCount).to.equal(0)
		task.wait()
		expect(callCount).to.equal(1)
	end)
	it("should apply default options", function()
		local callCount = 0
		local debounced = debounce(function()
			local _original = callCount
			callCount += 1
			return _original
		end, 0.03, {})
		debounced()
		expect(callCount).to.equal(0)
		task.wait(0.05)
		expect(callCount).to.equal(1)
	end)
	it("should support a `leading` option", function()
		local callCounts = { 0, 0 }
		local withLeading = debounce(function()
			local _original = callCounts[1]
			callCounts[1] += 1
			return _original
		end, 0.03, {
			leading = true,
			trailing = false,
		})
		local withLeadingAndTrailing = debounce(function()
			local _original = callCounts[2]
			callCounts[2] += 1
			return _original
		end, 0.03, {
			leading = true,
		})
		withLeading()
		expect(callCounts[1]).to.equal(1)
		withLeadingAndTrailing()
		withLeadingAndTrailing()
		expect(callCounts[2]).to.equal(1)
		task.wait(0.05)
		expect(callCounts[1]).to.equal(1)
		expect(callCounts[2]).to.equal(2)
		withLeading()
		expect(callCounts[1]).to.equal(2)
	end)
	it("subsequent leading debounced calls return the last `func` result", function()
		local debounced = debounce(function(x)
			return x
		end, 0.03, {
			leading = true,
			trailing = false,
		})
		local resultsA = { debounced(1), debounced(2) }
		expect(resultsA[1]).to.equal(1)
		expect(resultsA[2]).to.equal(1)
		task.wait(0.05)
		local resultsB = { debounced(3), debounced(4) }
		expect(resultsB[1]).to.equal(3)
		expect(resultsB[2]).to.equal(3)
	end)
	it("should support a `trailing` option", function()
		local withCount = 0
		local withoutCount = 0
		local withTrailing = debounce(function()
			local _original = withCount
			withCount += 1
			return _original
		end, 0.03, {
			trailing = true,
		})
		local withoutTrailing = debounce(function()
			local _original = withoutCount
			withoutCount += 1
			return _original
		end, 0.03, {
			trailing = false,
		})
		withTrailing()
		expect(withCount).to.equal(0)
		withoutTrailing()
		expect(withoutCount).to.equal(0)
		task.wait(0.05)
		expect(withCount).to.equal(1)
		expect(withoutCount).to.equal(0)
	end)
	it("should support a `maxWait` option", function()
		local callCount = 0
		local debounced = debounce(function()
			local _original = callCount
			callCount += 1
			return _original
		end, 0.03, {
			maxWait = 0.06,
		})
		debounced()
		debounced()
		expect(callCount).to.equal(0)
		task.wait(0.14)
		expect(callCount).to.equal(1)
		debounced()
		debounced()
		expect(callCount).to.equal(1)
		task.wait(0.14)
		expect(callCount).to.equal(2)
	end)
	it("should support `maxWait` in a tight loop", function()
		local limit = 0.2
		local withCount = 0
		local withoutCount = 0
		local withMaxWait = debounce(function()
			local _original = withCount
			withCount += 1
			return _original
		end, 0.03, {
			maxWait = 0.06,
		})
		local withoutMaxWait = debounce(function()
			local _original = withoutCount
			withoutCount += 1
			return _original
		end, 0.03)
		local start = os.clock()
		while os.clock() - start < limit do
			withMaxWait()
			withoutMaxWait()
			task.wait()
		end
		expect(withoutCount).to.equal(0)
		expect(withCount > 1).to.equal(true)
	end)
	it("should queue a trailing call for subsequent debounced calls after `maxWait`", function()
		local callCount = 0
		local debounced = debounce(function()
			local _original = callCount
			callCount += 1
			return _original
		end, 0.03, {
			maxWait = 0.03,
		})
		debounced()
		task.wait(0.03 - 0.01)
		debounced()
		task.wait(0.01)
		debounced()
		task.wait(0.01)
		debounced()
		task.wait(0.05)
		expect(callCount).to.equal(2)
	end)
	it("should cancel `maxDelayed` when `delayed` is invoked", function()
		local callCount = 0
		local debounced = debounce(function()
			local _original = callCount
			callCount += 1
			return _original
		end, 0.03, {
			maxWait = 0.06,
		})
		debounced()
		task.wait(0.13)
		debounced()
		expect(callCount).to.equal(1)
		task.wait(0.05)
		expect(callCount).to.equal(2)
	end)
end
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="512">
                <Properties>
                  <string name="Name">set-countdown</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.0
local TS = _G[script]
--[[
	*
	* Calls a function every `interval` seconds until the countdown reaches 0.
	* Returns a promise that resolves when the countdown is over. Canceling the
	* promise will stop the countdown.
	* @param callback The callback to call every second.
	* @param countdown The countdown in seconds.
	* @param interval The interval in seconds.
	* @returns A promise that resolves when the countdown reaches 0.
]]
local function setCountdown(callback, countdown, interval)
	if interval == nil then
		interval = 1
	end
	-- Note that 'index' here is 1-based
	return TS.Promise.each(table.create(countdown, 0), function(_, index)
		callback(countdown - (index - 1))
		return TS.Promise.delay(interval)
	end)
end
return {
	setCountdown = setCountdown,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="513">
                <Properties>
                  <string name="Name">set-countdown.spec</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.0
local TS = _G[script]
-- / <reference types="@rbxts/testez/globals" />
local setCountdown = TS.import(script, script.Parent, "set-countdown").setCountdown
return function()
	it("should call the callback every second", function()
		local count = 3
		local promise = setCountdown(function(countdown)
			count -= 1
			expect(countdown).to.equal(count)
		end, 2, 0.1)
		promise:expect()
		expect(promise:getStatus()).to.equal(TS.Promise.Status.Resolved)
		expect(count).to.equal(1)
	end)
	it("should stop the countdown when the promise is cancelled", function()
		local count = -1
		local promise = setCountdown(function(countdown)
			count = countdown
			return count
		end, 2, 0.1)
		task.wait(0.15)
		promise:cancel()
		expect(promise:getStatus()).to.equal(TS.Promise.Status.Cancelled)
		task.wait(0.15)
		expect(count).to.equal(1)
	end)
end
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="514">
                <Properties>
                  <string name="Name">set-interval</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.0
local TS = _G[script]
local RunService = TS.import(script, TS.getModule(script, "@rbxts", "services")).RunService
--[[
	*
	* Schedule a callback to be called every `interval` seconds. Returns a
	* function that can be called to stop the timer.
	* @param callback The callback to call every `interval` seconds.
	* @param interval The interval in seconds.
	* @returns A cleanup function.
]]
local function setInterval(callback, interval)
	local timer = 0
	local connection = RunService.Heartbeat:Connect(function(delta)
		timer += delta
		if timer >= interval then
			timer = 0
			callback()
		end
	end)
	return function()
		return connection:Disconnect()
	end
end
return {
	setInterval = setInterval,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="515">
                <Properties>
                  <string name="Name">set-interval.spec</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.0
local TS = _G[script]
-- / <reference types="@rbxts/testez/globals" />
local setInterval = TS.import(script, script.Parent, "set-interval").setInterval
return function()
	it("should call the callback every interval", function()
		local count = 0
		setInterval(function()
			count += 1
		end, 0.03)
		expect(count).to.equal(0)
		task.wait(0.03 * 3 + 0.01)
		expect(count).to.equal(3)
	end)
	it("should not call the callback if the timer is stopped", function()
		local count = 0
		local stop = setInterval(function()
			count += 1
		end, 0.03)
		expect(count).to.equal(0)
		stop()
		task.wait(0.03 * 3 + 0.01)
		expect(count).to.equal(0)
	end)
end
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="516">
                <Properties>
                  <string name="Name">set-timeout</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.0
local TS = _G[script]
local RunService = TS.import(script, TS.getModule(script, "@rbxts", "services")).RunService
--[[
	*
	* Schedule a callback to be called once after `timeout` seconds. Returns a
	* function that can be called to stop the timer.
	* @param callback The callback to call after `timeout` seconds.
	* @param timeout The timeout in seconds.
	* @returns A cleanup function.
]]
local function setTimeout(callback, timeout)
	local timer = 0
	local connection
	connection = RunService.Heartbeat:Connect(function(delta)
		timer += delta
		if timer >= timeout then
			connection:Disconnect()
			callback()
		end
	end)
	return function()
		return connection:Disconnect()
	end
end
return {
	setTimeout = setTimeout,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="517">
                <Properties>
                  <string name="Name">set-timeout.spec</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.0
local TS = _G[script]
-- / <reference types="@rbxts/testez/globals" />
local setTimeout = TS.import(script, script.Parent, "set-timeout").setTimeout
return function()
	it("should call the callback after the timeout", function()
		local count = 0
		setTimeout(function()
			count += 1
		end, 0.03)
		expect(count).to.equal(0)
		task.wait(0.04)
		expect(count).to.equal(1)
	end)
	it("should not call the callback if the timer is stopped", function()
		local count = 0
		local stop = setTimeout(function()
			count += 1
		end, 0.03)
		expect(count).to.equal(0)
		stop()
		task.wait(0.09)
		expect(count).to.equal(0)
	end)
end
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="518">
                <Properties>
                  <string name="Name">throttle</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.0
local TS = _G[script]
local debounce = TS.import(script, script.Parent, "debounce").debounce
--[[
	*
	* Creates a throttled function that only invokes `callback` at most once per
	* every `wait` seconds. The throttled function comes with a `cancel` method to
	* cancel delayed `callback` invocations and a `flush` method to immediately
	* invoke them.
	*
	* Provide `options` to indicate whether `callback` should be invoked on the
	* leading and/or trailing edge of the `wait` timeout. The `callback` is invoked
	* with the most recent arguments provided to the throttled function. Subsequent
	* calls to the throttled function return the result of the last `callback`
	* invocation.
	*
	* **Note:** If `leading` and `trailing` options are `true`, `callback` is
	* invoked on the trailing edge of the timeout only if the throttled function
	* is invoked more than once during the `wait` timeout.
	*
	* If `wait` is `0` and `leading` is `false`, `callback` invocation is deferred
	* until the next tick, similar to `setTimeout` with a timeout of `0`.
	*
	* See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	* for details over the differences between `throttle` and `debounce`.
	*
	* @param callback The function to throttle.
	* @param wait The number of seconds to throttle invocations to. Defaults to `0`.
	* @param options The options object.
	* @returns The new throttled function.
	* @see https://github.com/lodash/lodash/blob/master/throttle.js/
	* @see https://css-tricks.com/debouncing-throttling-explained-examples/
]]
local function throttle(callback, wait, options)
	if wait == nil then
		wait = 0
	end
	if options == nil then
		options = {}
	end
	local _binding = options
	local leading = _binding.leading
	if leading == nil then
		leading = true
	end
	local trailing = _binding.trailing
	if trailing == nil then
		trailing = true
	end
	return debounce(callback, wait, {
		leading = leading,
		trailing = trailing,
		maxWait = wait,
	})
end
return {
	throttle = throttle,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="519">
                <Properties>
                  <string name="Name">throttle.spec</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.1.0
local TS = _G[script]
-- / <reference types="@rbxts/testez/globals" />
local throttle = TS.import(script, script.Parent, "throttle").throttle
return function()
	it("should throttle a function", function()
		local callCount = 0
		local throttled = throttle(function()
			local _original = callCount
			callCount += 1
			return _original
		end, 0.03)
		throttled()
		throttled()
		throttled()
		local lastCount = callCount
		expect(callCount).to.equal(1)
		task.wait(0.04)
		expect(callCount > lastCount).to.equal(true)
	end)
	it("subsequent calls should return the result of the first call", function()
		local throttled = throttle(function(x)
			return x
		end, 0.03)
		local results = { throttled("a"), throttled("b") }
		expect(results[1]).to.equal("a")
		expect(results[2]).to.equal("a")
		task.wait(0.04)
		local results2 = { throttled("c"), throttled("d") }
		expect(results2[1]).to.equal("c")
		expect(results2[2]).to.equal("c")
	end)
	it("should not trigger a trailing call when invoked once", function()
		local callCount = 0
		local throttled = throttle(function()
			local _original = callCount
			callCount += 1
			return _original
		end, 0.03)
		throttled()
		expect(callCount).to.equal(1)
		task.wait(0.04)
		expect(callCount).to.equal(1)
	end)
	for index = 0, 1 do
		it("should trigger a call when invoked repeatedly" .. (if index == 1 then " and `leading` is `false`" else ""), function()
			local callCount = 0
			local limit = 0.1
			local options = if index == 1 then {
				leading = false,
			} else {}
			local throttled = throttle(function()
				local _original = callCount
				callCount += 1
				return _original
			end, 0.03, options)
			local start = os.clock()
			while os.clock() - start < limit do
				throttled()
				task.wait()
			end
			expect(callCount > 1).to.equal(true)
		end)
	end
	it("should trigger a second throttled call as soon as possible", function()
		local callCount = 0
		local throttled = throttle(function()
			local _original = callCount
			callCount += 1
			return _original
		end, 0.05, {
			leading = false,
		})
		throttled()
		task.wait(0.07)
		expect(callCount).to.equal(1)
		throttled()
		task.wait(0.03)
		expect(callCount).to.equal(1)
		task.wait(0.05)
		expect(callCount).to.equal(2)
	end)
	it("should apply default options", function()
		local callCount = 0
		local throttled = throttle(function()
			local _original = callCount
			callCount += 1
			return _original
		end, 0.03, {})
		throttled()
		throttled()
		expect(callCount).to.equal(1)
		task.wait(0.04)
		expect(callCount).to.equal(2)
	end)
	it("should support a `leading` option", function()
		local withLeading = throttle(function(x)
			return x
		end, 0.03, {
			leading = true,
		})
		expect(withLeading("a")).to.equal("a")
		local withoutLeading = throttle(function(x)
			return x
		end, 0.03, {
			leading = false,
		})
		expect(withoutLeading("a")).to.equal(nil)
	end)
	it("should support a `trailing` option", function()
		local withCount = 0
		local withoutCount = 0
		local withTrailing = throttle(function(value)
			withCount += 1
			return value
		end, 0.03, {
			trailing = true,
		})
		local withoutTrailing = throttle(function(value)
			withoutCount += 1
			return value
		end, 0.03, {
			trailing = false,
		})
		expect(withTrailing("a")).to.equal("a")
		expect(withTrailing("b")).to.equal("a")
		expect(withoutTrailing("a")).to.equal("a")
		expect(withoutTrailing("b")).to.equal("a")
		task.wait(0.04)
		expect(withCount).to.equal(2)
		expect(withoutCount).to.equal(1)
	end)
	it("should not update `lastCalled`, at the end of the timeout, when `trailing` is `false`", function()
		local callCount = 0
		local throttled = throttle(function()
			local _original = callCount
			callCount += 1
			return _original
		end, 0.03, {
			trailing = false,
		})
		throttled()
		throttled()
		task.wait(0.05)
		throttled()
		throttled()
		task.wait(0.1)
		expect(callCount > 1).to.equal(true)
	end)
end
]]></string>
                </Properties>
              </Item>
            </Item>
          </Item>
          <Item class="ModuleScript" referent="520">
            <Properties>
              <string name="Name">Shared</string>
              <string name="Source"><![CDATA[--!strict
--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]

-- deviation: Promote `shared` to an actual unpublished package with a
-- real interface instead of just a bag of loose source code
local Packages = script.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)
type Object = LuauPolyfill.Object

local ReactTypes = require(script.ReactTypes)
local flowtypes = require(script["flowtypes.roblox"])
local ReactElementType = require(script.ReactElementType)
local ReactFiberHostConfig = require(script.ReactFiberHostConfig)
local ReactSharedInternals = require(script.ReactSharedInternals)
local ErrorHandling = require(script["ErrorHandling.roblox"])

-- Re-export all top-level public types
export type ReactEmpty = ReactTypes.ReactEmpty
export type ReactFragment = ReactTypes.ReactFragment
export type ReactNodeList = ReactTypes.ReactNodeList
export type ReactProviderType<T> = ReactTypes.ReactProviderType<T>
export type ReactConsumer<T> = ReactTypes.ReactConsumer<T>
export type ReactProvider<T> = ReactTypes.ReactProvider<T>
export type ReactContext<T> = ReactTypes.ReactContext<T>
export type ReactPortal = ReactTypes.ReactPortal
export type RefObject = ReactTypes.RefObject
export type EventPriority = ReactTypes.EventPriority
export type ReactFundamentalComponentInstance<C, H> = ReactTypes.ReactFundamentalComponentInstance<C, H>
export type ReactFundamentalImpl<C, H> = ReactTypes.ReactFundamentalImpl<C, H>
export type ReactFundamentalComponent<C, H> = ReactTypes.ReactFundamentalComponent<C, H>
export type ReactScope = ReactTypes.ReactScope
export type ReactScopeQuery = ReactTypes.ReactScopeQuery
export type ReactScopeInstance = ReactTypes.ReactScopeInstance
-- deviation START: Re-export bindings types
export type ReactBinding<T> = ReactTypes.ReactBinding<T>
export type ReactBindingUpdater<T> = ReactTypes.ReactBindingUpdater<T>
-- deviation END
export type MutableSourceVersion = ReactTypes.MutableSourceVersion
export type MutableSourceGetSnapshotFn<Source, Snapshot> = ReactTypes.MutableSourceGetSnapshotFn<Source, Snapshot>
export type MutableSourceSubscribeFn<Source, Snapshot> = ReactTypes.MutableSourceSubscribeFn<Source, Snapshot>
export type MutableSourceGetVersionFn = ReactTypes.MutableSourceGetVersionFn
export type MutableSource<Source> = ReactTypes.MutableSource<Source>
export type Wakeable = ReactTypes.Wakeable
export type Thenable<R> = ReactTypes.Thenable<R>
export type Source = ReactElementType.Source
export type ReactElement<P = Object, T = any> = ReactElementType.ReactElement<P, T>
export type OpaqueIDType = ReactFiberHostConfig.OpaqueIDType
export type Dispatcher = ReactSharedInternals.Dispatcher

-- re-export flowtypes from here. I wonder if this should be a separate 'package'?
export type React_Ref<ElementType> = flowtypes.React_Ref<ElementType>
export type React_Context<T> = flowtypes.React_Context<T>
export type React_AbstractComponent<Config, Instance> = flowtypes.React_AbstractComponent<Config, Instance>
export type React_ComponentType<Config> = flowtypes.React_ComponentType<Config>
export type React_PureComponent<Props, State = nil> = flowtypes.React_PureComponent<Props, State>
export type React_Component<Props, State> = flowtypes.React_Component<Props, State>
export type React_ElementProps<ElementType> = flowtypes.React_ElementProps<ElementType>
export type React_StatelessFunctionalComponent<Props> = flowtypes.React_StatelessFunctionalComponent<Props>
export type React_Node = flowtypes.React_Node
export type React_Element<ElementType> = flowtypes.React_Element<ElementType>
export type React_ElementType = flowtypes.React_ElementType
export type React_ElementConfig<C> = flowtypes.React_ElementConfig<C>
export type React_ElementRef<C> = flowtypes.React_ElementRef<C>
export type React_Portal = flowtypes.React_Portal
export type React_Key = flowtypes.React_Key

return {
	checkPropTypes = require(script.checkPropTypes),
	console = require(script.console),
	ConsolePatchingDev = require(script["ConsolePatchingDev.roblox"]),
	consoleWithStackDev = require(script.consoleWithStackDev),
	enqueueTask = require(script["enqueueTask.roblox"]),
	ExecutionEnvironment = require(script.ExecutionEnvironment),
	formatProdErrorMessage = require(script.formatProdErrorMessage),
	getComponentName = require(script.getComponentName),
	invariant = require(script.invariant),
	invokeGuardedCallbackImpl = require(script.invokeGuardedCallbackImpl),
	isValidElementType = require(script.isValidElementType),
	objectIs = require(script.objectIs),
	ReactComponentStackFrame = require(script.ReactComponentStackFrame),
	ReactElementType = require(script.ReactElementType),
	ReactErrorUtils = require(script.ReactErrorUtils),
	ReactFeatureFlags = require(script.ReactFeatureFlags),
	ReactInstanceMap = require(script.ReactInstanceMap),
	-- deviation: Instead of re-exporting from here, Shared actually owns
	-- these files itself
	ReactSharedInternals = ReactSharedInternals,
	-- deviation: Instead of extracting these out of the reconciler and
	-- then re-injecting the host config _into_ the reconciler, export these
	-- from shared for easier reuse
	ReactFiberHostConfig = ReactFiberHostConfig,

	ReactSymbols = require(script.ReactSymbols),
	ReactVersion = require(script.ReactVersion),
	shallowEqual = require(script.shallowEqual),
	UninitializedState = require(script["UninitializedState.roblox"]),
	ReactTypes = ReactTypes,

	-- deviation: export error-stack-preserving utilities for use in
	-- scheduler and reconciler, and parsing function for use in public API
	describeError = ErrorHandling.describeError,
	errorToString = ErrorHandling.errorToString,
	parseReactError = ErrorHandling.parseReactError,

	-- deviation: export Symbol and Type from Shared
	Symbol = require(script["Symbol.roblox"]),
	Type = require(script["Type.roblox"]),

	-- deviation: export propmarkers from Shared
	Change = require(script.PropMarkers.Change),
	Event = require(script.PropMarkers.Event),
	Tag = require(script.PropMarkers.Tag),
}
]]></string>
            </Properties>
            <Item class="ModuleScript" referent="521">
              <Properties>
                <string name="Name">ConsolePatchingDev.roblox</string>
                <string name="Source"><![CDATA[-- upstream: https://github.com/facebook/react/blob/55cb0b7eeb0e539d89858b8ed69beabf7fe2fb46/packages/shared/checkPropTypes.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
 ]]

-- deviation: Lua objects don't have any special properties the way that JS
-- Objects do; this has been modified from the JS, which uses
-- `Object.defineProperties` to ensure that properties are modifiable. In Lua,
-- these operations are as simple as assigning to functions.
-- NOTE: use patched console from shared
local console = require(script.Parent.console)

-- Helpers to patch console.logs to avoid logging during side-effect free
-- replaying on render function. This currently only patches the object
-- lazily which won't cover if the log function was extracted eagerly.
-- We could also eagerly patch the method.
local disabledDepth = 0
local prevLog
local prevInfo
local prevWarn
local prevError
local prevGroup
local prevGroupCollapsed
local prevGroupEnd

local disabledLog = function() end

local exports = {}

-- deviation: console.log's name property is checked in SchedulerHostConfig.
-- But since Lua functions don't carry properties, we export this and import it there
-- for a reference equality.
exports.disabledLog = disabledLog

exports.disableLogs = function()
	if _G.__DEV__ then
		if disabledDepth == 0 then
			prevLog = console.log
			prevInfo = console.info
			prevWarn = console.warn
			prevError = console.error
			prevGroup = console.group
			prevGroupCollapsed = console.groupCollapsed
			prevGroupEnd = console.groupEnd

			console.info = disabledLog
			console.log = disabledLog
			console.warn = disabledLog
			console.error = disabledLog
			console.group = disabledLog
			console.groupCollapsed = disabledLog
			console.groupEnd = disabledLog
		end

		disabledDepth = disabledDepth + 1
	end
end

exports.reenableLogs = function()
	if _G.__DEV__ then
		disabledDepth = disabledDepth - 1

		if disabledDepth == 0 then
			console.log = prevLog
			console.info = prevInfo
			console.warn = prevWarn
			console.error = prevError
			console.group = prevGroup
			console.groupCollapsed = prevGroupCollapsed
			console.groupEnd = prevGroupEnd
		end

		if disabledDepth < 0 then
			console.error("disabledDepth fell below zero. " .. "This is a bug in React. Please file an issue.")
		end
	end
end

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="522">
              <Properties>
                <string name="Name">ErrorHandling.roblox</string>
                <string name="Source"><![CDATA[--!strict
--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]

local Packages = script.Parent.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)
type Error = LuauPolyfill.Error
type Object = LuauPolyfill.Object
type Array<T> = LuauPolyfill.Array<T>
local Error = LuauPolyfill.Error
local inspect = LuauPolyfill.util.inspect

local DIVIDER = "\n------ Error caught by React ------\n"

--[[
	React does a lot of catching, retrying, and rethrowing errors that would
	typically result in loss of meaningful stack information.

	We use xpcall combined with this error function to capture and rethrow in a
	way that retains some stack information.
]]
local function describeError(e: string | Error): Error
	if typeof(e) == "string" then
		local _, endOfStackFrame = string.find(e, ":[%d]+: ")
		local message = if endOfStackFrame then string.sub(e, endOfStackFrame + 1) else e

		local err = LuauPolyfill.Error.new(message)
		err.stack = debug.traceback(nil, 2)
		return err
	end
	return e :: Error
end

--[[
	Even though Luau can catch and rethrow arbitrary objects, only string errors
	are supported by the ScriptContext.ErrorDetailed signal (the mechanism used
	to catch unhandled errors at the top level).

	This function turns an arbitrary error object into a detailed string message
	to avoid any loss of information.
]]
local function errorToString(error_: Error | Object | string | Array<any>): string
	local errorString
	if typeof(error_) == "table" then
		if (error_ :: Error).message and (error_ :: Error).stack then
			-- Adding these clear dividers helps us split this error back up
			-- into pieces later. We include one at the beginning so that the
			-- final stack frame added by rethrowing can be carved off
			errorString = DIVIDER .. (error_ :: Error).message .. DIVIDER .. tostring((error_ :: Error).stack)
		else
			errorString = inspect(error_)
		end
	else
		errorString = inspect(error_)
	end

	return errorString
end

--[[
	If an error string was generated from an Error object via the errorToString
	function above, it can be easily split back out into an informative error
	object.
]]
local function parseReactError(error_: string): (Error, string)
	local split = string.split(error_, DIVIDER)

	if #split == 3 then
		local rethrow, message, stack = table.unpack(split)

		local newError = Error.new(message)
		newError.stack = stack

		return newError, rethrow
	else
		-- This error was not in the expected format, so we use the whole string
		-- as the 'message' value and nil out the stack (it would be misleading
		-- if we included the one generated here)
		local newError = Error.new(error_)
		newError.stack = nil

		return newError, ""
	end
end

return {
	describeError = describeError,
	errorToString = errorToString,
	parseReactError = parseReactError,
	-- Used only by tests
	__ERROR_DIVIDER = DIVIDER,
}
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="523">
              <Properties>
                <string name="Name">ExecutionEnvironment</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/55cb0b7eeb0e539d89858b8ed69beabf7fe2fb46/packages/shared/ExecutionEnvironment.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
 ]]
local exports = {}

exports.canUseDOM = function()
	-- deviation START
	return false
	-- deviation END
end

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="Folder" referent="524">
              <Properties>
                <string name="Name">PropMarkers</string>
              </Properties>
              <Item class="ModuleScript" referent="525">
                <Properties>
                  <string name="Name">Change</string>
                  <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
--[[
	Change is used to generate special prop keys that can be used to connect to
	GetPropertyChangedSignal.

	Generally, Change is indexed by a Roblox property name:

		Roact.createElement("TextBox", {
			[Roact.Change.Text] = function(rbx)
				print("The TextBox", rbx, "changed text to", rbx.Text)
			end,
		})
]]

local Type = require(script.Parent.Parent["Type.roblox"])

local Change = {}

local changeMetatable = {
	__tostring = function(self)
		return string.format("RoactHostChangeEvent(%s)", self.name)
	end,
}

setmetatable(Change, {
	__index = function(self, propertyName)
		local changeListener = {
			[Type] = Type.HostChangeEvent,
			name = propertyName,
		}

		setmetatable(changeListener, changeMetatable)
		Change[propertyName] = changeListener

		return changeListener
	end,
})

return Change
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="526">
                <Properties>
                  <string name="Name">Event</string>
                  <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
--[[
	Index into `Event` to get a prop key for attaching to an event on a Roblox
	Instance.

	Example:

		Roact.createElement("TextButton", {
			Text = "Hello, world!",

			[Roact.Event.MouseButton1Click] = function(rbx)
				print("Clicked", rbx)
			end
		})
]]

local Type = require(script.Parent.Parent["Type.roblox"])

local Event = {}

local eventMetatable = {
	__tostring = function(self)
		return string.format("RoactHostEvent(%s)", self.name)
	end,
}

setmetatable(Event, {
	__index = function(self, eventName)
		local event = {
			[Type] = Type.HostEvent,
			name = eventName,
		}

		setmetatable(event, eventMetatable)

		Event[eventName] = event

		return event
	end,
})

return Event
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="527">
                <Properties>
                  <string name="Name">Tag</string>
                  <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
--[[
	Special value for assigning tags to roblox instances via Roact
]]
local Symbol = require(script.Parent.Parent["Symbol.roblox"])

local Tag = Symbol.named("RobloxTag")

return Tag
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="528">
              <Properties>
                <string name="Name">ReactComponentStackFrame</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/56e9feead0f91075ba0a4f725c9e4e343bca1c67/packages/shared/ReactComponentStackFrame.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]

type Object = { [string]: any }
type Function = (...any) -> ...any

local ReactElementType = require(script.Parent.ReactElementType)
type Source = ReactElementType.Source

-- deviation: Needed to properly type class components
local flowtypes = require(script.Parent["flowtypes.roblox"])
type React_StatelessFunctionalComponent<P> = flowtypes.React_StatelessFunctionalComponent<P>
type React_ComponentType<P> = flowtypes.React_ComponentType<P>
type ReactComponent<P> = React_StatelessFunctionalComponent<P> | React_ComponentType<P>

-- deviation: Ignore enableComponentStackLocations
-- local ReactFeatureFlags = require(script.Parent.ReactFeatureFlags)
-- local enableComponentStackLocations = ReactFeatureFlags.enableComponentStackLocations

local ReactSymbols = require(script.Parent.ReactSymbols)
local REACT_SUSPENSE_TYPE = ReactSymbols.REACT_SUSPENSE_TYPE
local REACT_SUSPENSE_LIST_TYPE = ReactSymbols.REACT_SUSPENSE_LIST_TYPE
local REACT_FORWARD_REF_TYPE = ReactSymbols.REACT_FORWARD_REF_TYPE
local REACT_MEMO_TYPE = ReactSymbols.REACT_MEMO_TYPE
local REACT_BLOCK_TYPE = ReactSymbols.REACT_BLOCK_TYPE
local REACT_LAZY_TYPE = ReactSymbols.REACT_LAZY_TYPE

local ConsolePatchingDev = require(script.Parent["ConsolePatchingDev.roblox"])
local disableLogs = ConsolePatchingDev.disableLogs
local reenableLogs = ConsolePatchingDev.reenableLogs

local ReactSharedInternals = require(script.Parent.ReactSharedInternals)
local ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher

-- deviation: the prefix is constant because the console prints the stack
-- frames the same way on every platform.
local prefix = "    in "

-- deviation: declare these now because of scoping differences between in
-- Lua and JS
local describeComponentFrame
local describeFunctionComponentFrame

-- deviation: since owner could be a function or a class component, we
-- need to do additional handling to get its name. It's easier to make this a
-- reusable function
local function describeOwner(owner: nil | ReactComponent<any>): string?
	if type(owner) == "function" then
		return debug.info(owner :: (any) -> any, "n")
	elseif type(owner) == "table" then
		return tostring(owner)
	end
	return nil
end

local function describeBuiltInComponentFrame(
	name: string,
	source: Source | nil,
	-- deviation: owner could be a class component
	owner: nil | ReactComponent<any>
): string
	-- deviation START: for built-in components, we can provide the full
	-- description regardless of `enableStackLocations` since we don't actually
	-- need to do any callstack trickery to get it

	-- if enableComponentStackLocations then
	-- 	if prefix == nil then
	-- 		-- Extract the VM specific prefix used by each line.
	-- 		local _, x = pcall(error, debug.traceback())

	-- 		local match = x.stack.trim().match("\n00:00:00.000 - ")
	-- 		if match then
	-- 			prefix = match[1]
	-- 		else
	-- 			prefix = ''
	-- 		end
	-- 	end
	-- 	-- We use the prefix to ensure our stacks line up with native stack frames.
	-- 	return "\n" .. prefix .. name
	-- else
	-- 	local ownerName = nil
	-- 	if _G.__DEV__ and owner then
	-- 		ownerName = describeOwner(owner)
	-- 	end

	-- 	return describeComponentFrame(name, source, ownerName)
	-- end
	local ownerName = nil
	if _G.__DEV__ and owner then
		ownerName = describeOwner(owner)
	end

	return describeComponentFrame(name, source, ownerName)
	-- deviation END
end

local reentry = false
local componentFrameCache = nil
if _G.__DEV__ then
	componentFrameCache = setmetatable({}, { __mode = "k" })
end

local function describeNativeComponentFrame(
	fn: nil | ReactComponent<any>, -- TODO: only accept tables with __tostring metamethod overridden
	construct: boolean
): string
	-- // If something asked for a stack inside a fake render, it should get ignored.
	if not fn or reentry then
		return ""
	end

	if _G.__DEV__ then
		local frame = componentFrameCache[fn]

		if frame ~= nil then
			return frame
		end
	end

	local control
	reentry = true

	-- deviation: Error.prepareStackTrace is not implemented
	-- local previousPrepareStackTrace = Error.prepareStackTrace
	-- Error.prepareStackTrace = undefined
	local previousDispatcher

	if _G.__DEV__ then
		previousDispatcher = ReactCurrentDispatcher.current
		-- Set the dispatcher in DEV because this might be call in the render
		-- function for warnings.
		ReactCurrentDispatcher.current = nil
		disableLogs()
	end

	-- // This should throw.
	-- deviation: Lua does not have stack traces with errors, so we
	-- use xpcall to convert the error and append a stack trace.
	-- This will change the theorical stack trace we want, because of
	-- the function where we call 'debug.traceback()', but the control
	-- stack will have the same added frame.
	local traceback
	local _, sample = xpcall(function()
		if construct then
			-- deviation: since we can't have a meaningful stack trace when
			-- constructing from a component class (because it does not locate
			-- component definition), we skip this case.
		else
			local _, x = pcall(function()
				traceback = debug.traceback()
				error({
					stack = traceback,
				})
			end)
			control = x;
			-- FIXME: Luau flow analysis bug workaround
			(fn :: (...any) -> ...any)()
		end
	end, function(message)
		return {
			message = message,
			stack = traceback,
		}
	end)

	-- deviation: Lua does not have a structure that works like a try-catch-finally
	-- so we a variable to know if the catch block returns a value. If it returns,
	-- 'earlyOutValue' will be set and we can return its value after running the
	-- instructions in the finally block.
	local earlyOutValue = nil

	if sample and control and type(sample.stack) == "string" then
		-- // This extracts the first frame from the sample that isn't also in the control.
		-- // Skipping one frame that we assume is the frame that calls the two.
		local sampleLines = string.split(sample.stack, "\n")
		local controlLines = string.split(control.stack, "\n")
		-- deviation: remove one because our array of lines contains an empty string
		-- at the end
		local sampleIndex = #sampleLines - 1
		local controlIndex = #controlLines - 1

		while sampleIndex >= 2 and controlIndex >= 0 and sampleLines[sampleIndex] ~= controlLines[controlIndex] do
			-- // We expect at least one stack frame to be shared.
			-- // Typically this will be the root most one. However, stack frames may be
			-- // cut off due to maximum stack limits. In this case, one maybe cut off
			-- // earlier than the other. We assume that the sample is longer or the same
			-- // and there for cut off earlier. So we should find the root most frame in
			-- // the sample somewhere in the control.
			controlIndex = controlIndex - 1
		end

		while sampleIndex >= 3 and controlIndex >= 1 do
			sampleIndex = sampleIndex - 1
			controlIndex = controlIndex - 1
			-- // Next we find the first one that isn't the same which should be the
			-- // frame that called our sample function and the control.
			if sampleLines[sampleIndex] ~= controlLines[controlIndex] then
				-- // In V8, the first line is describing the message but other VMs don't.
				-- // If we're about to return the first line, and the control is also on the same
				-- // line, that'sampleIndex a pretty good indicator that our sample threw at same line as
				-- // the control. I.e. before we entered the sample frame. So we ignore this result.
				-- // This can happen if you passed a class to function component, or non-function.
				if sampleIndex ~= 1 or controlIndex ~= 1 then
					repeat
						sampleIndex = sampleIndex - 1
						controlIndex = controlIndex - 1
						-- // We may still have similar intermediate frames from the construct call.
						-- // The next one that isn't the same should be our match though.
						if controlIndex < 0 or sampleLines[sampleIndex] ~= controlLines[controlIndex] then
							-- deviation: add the '    in ' prefix to format the component stack
							-- similar to React
							local frame = "\n" .. prefix .. sampleLines[sampleIndex]

							if _G.__DEV__ then
								componentFrameCache[fn] = frame
							end
							-- // Return the line we found.
							-- deviation: to mimic the behavior of the try-catch-finally
							-- we cannot return the value here.
							earlyOutValue = frame
						end
					until not (sampleIndex >= 3 and controlIndex >= 1)
				end

				break
			end
		end
	end

	reentry = false
	if _G.__DEV__ then
		ReactCurrentDispatcher.current = previousDispatcher
		reenableLogs()
	end

	-- deviation: Error.prepareStackTrace is not implemented
	-- Error.prepareStackTrace = previousPrepareStackTrace

	-- deviation: return here to micmic the end of the finally block
	if earlyOutValue ~= nil then
		return earlyOutValue
	end

	-- Fallback to just using the name if we couldn't make it throw.
	-- deviation START: Can't get displayName for functions, since fn can be a class, we can get the class name here
	local name = if type(fn) == "function"
		then debug.info(fn :: Function, "n")
		-- deviation :
		else if type(fn) == "table" then tostring(fn) else ""

	local syntheticFrame = ""
	if name ~= nil and name ~= "" then
		syntheticFrame = describeBuiltInComponentFrame(name)
	end

	if _G.__DEV__ then
		componentFrameCache[fn] = syntheticFrame
	end

	return syntheticFrame
end

-- deviation: Lua's patterns work slightly differently than regexes
local BEFORE_SLASH_PATTERN = "^(.*)[\\/]"

function describeComponentFrame(name: string | nil, source: Source | nil, ownerName: string | nil): string
	local sourceInfo = ""

	if _G.__DEV__ and source then
		local path = source.fileName
		local fileName = string.gsub(path, BEFORE_SLASH_PATTERN, "")

		-- // In DEV, include code for a common special case:
		-- // prefer "folder/index.js" instead of just "index.js".
		-- deviation: instead of having a special case for 'index.',
		-- we use 'init.'
		if string.match(fileName, "^init%.") then
			-- deviation: finding matching strings works differently in Lua
			local pathBeforeSlash = string.match(path, BEFORE_SLASH_PATTERN)

			if pathBeforeSlash and #pathBeforeSlash ~= 0 then
				local folderName = string.gsub(pathBeforeSlash, BEFORE_SLASH_PATTERN, "")
				fileName = folderName .. "/" .. fileName
			end
		end

		sourceInfo = " (at " .. fileName .. ":" .. source.lineNumber .. ")"
	elseif ownerName then
		sourceInfo = " (created by " .. ownerName .. ")"
	end

	return "\n    in " .. (name or "Unknown") .. sourceInfo
end

local function describeClassComponentFrame(
	-- deviation: React.Component<any>
	ctor: any,
	source: nil | Source,
	-- deviation: this could be a class component OR a function component
	owner: nil | ReactComponent<any>
): string
	-- deviation START: In Roact, class components are tables, so we
	-- jump directly to using the basic component description.

	-- if enableComponentStackLocations then
	-- 	return describeNativeComponentFrame(componentClass, true)
	-- else
	-- 	return describeFunctionComponentFrame(ctor, source, ownerFn);
	-- end
	local name = tostring(ctor)
	local ownerName = nil
	if _G.__DEV__ and owner then
		ownerName = describeOwner(owner)
	end
	return describeComponentFrame(name, source, ownerName)
	-- deviation END
end

function describeFunctionComponentFrame(
	-- TODO: this annotation is incorrect upstream, we fix it here
	fn: nil | Function,
	source: nil | Source,
	-- deviation: this could be a class component OR a function component
	ownerFn: nil | ReactComponent<any>
): string
	-- deviation Jump directly to using basic component description:
	-- if enableComponentStackLocations then
	-- 	return describeNativeComponentFrame(fn, false)
	-- else
	-- 	if not fn then
	-- 		return ""
	-- 	end
	-- 	-- deviation: use debug.info to discover function names
	-- 	local name = debug.info(fn :: Function, "n")
	-- 	local ownerName = nil
	-- 	if _G.__DEV__ and ownerFn then
	-- 		-- deviation: owner may be a function or a table
	-- 		ownerName = describeOwner(ownerFn)
	-- 	end
	-- 	return describeComponentFrame(name, source, ownerName)
	-- end
	if not fn then
		return ""
	end
	-- deviation: use debug.info to discover function names
	-- FIXME: find out how non-functions are getting into here, they pollute test output
	local name = if type(fn) == "function" then debug.info(fn :: Function, "n") else tostring(fn)
	local ownerName = nil
	if _G.__DEV__ and ownerFn then
		-- deviation: owner may be a function or a table
		ownerName = describeOwner(ownerFn)
	end
	return describeComponentFrame(name, source, ownerName)
end

-- deviation: because of deviations in other functions, this function is
-- not needed. If we need to bring it, it should return true if Component is a
-- class component, and false if a function component
-- local function shouldConstruct(Component)
-- 	local prototype = Component.prototype
-- 	return not not (prototype and prototype.isReactComponent)
-- end

local function describeUnknownElementTypeFrameInDEV(
	type_: any,
	source: nil | Source,
	-- deviation: owner could be a class component
	ownerFn: nil | ReactComponent<any>
): string
	if not _G.__DEV__ then
		return ""
	end
	if type_ == nil then
		return ""
	end

	-- deviation: in JavaScript, if `type` contains a class, typeof will
	-- return "function". We need to specifically check for the class.
	if type(type_) == "table" and type(type_.__ctor) == "function" then
		-- deviation: since Roact class components are tables, we can't
		-- count on describeClassComponent being a thin wrapper for
		-- describeFunctionComponent like upstream does implicitly
		return describeClassComponentFrame(type_, source, ownerFn)
	end

	if type(type_) == "function" then
		-- deviation: ignore enableComponentStackLocations
		-- if enableComponentStackLocations then
		-- 	-- deviation: since functions and classes have different
		-- 	-- types in Lua, we already know that shouldConstruct would return
		-- 	-- false
		-- 	return describeNativeComponentFrame(type, false)
		-- else
		-- 	return describeFunctionComponentFrame(type, source, ownerFn)
		-- end
		return describeFunctionComponentFrame(type_, source, ownerFn)
	end

	if type(type_) == "string" then
		return describeBuiltInComponentFrame(type_, source, ownerFn)
	end

	if type_ == REACT_SUSPENSE_TYPE then
		return describeBuiltInComponentFrame("Suspense", source, ownerFn)
	elseif type_ == REACT_SUSPENSE_LIST_TYPE then
		return describeBuiltInComponentFrame("SuspenseList", source, ownerFn)
	end

	if type(type_) == "table" then
		local typeProp = type_["$$typeof"]
		if typeProp == REACT_FORWARD_REF_TYPE then
			return describeFunctionComponentFrame(type_.render, source, ownerFn)
		elseif typeProp == REACT_MEMO_TYPE then
			-- // Memo may contain any component type so we recursively resolve it.
			return describeUnknownElementTypeFrameInDEV(type_.type, source, ownerFn)
		elseif typeProp == REACT_BLOCK_TYPE then
			return describeFunctionComponentFrame(type_._render, source, ownerFn)
		elseif typeProp == REACT_LAZY_TYPE then
			local lazyComponent = type_
			local payload = lazyComponent._payload
			local init = lazyComponent._init

			local ok, result = pcall(function()
				describeUnknownElementTypeFrameInDEV(
					-- // Lazy may contain any component type so we recursively resolve it.
					init(payload),
					source,
					ownerFn
				)
			end)

			if ok then
				return result
			end
		end
	end

	return ""
end

return {
	-- deviation: ReactShallowRenderer depends on this, but the upstream `react`
	-- repo doesn't expose it; instead, the shallow-renderer's copies of shared
	-- modules do so. Since we opted to reuse the shared modules in this repo
	-- instead of duplicating, we need to have them include this field
	describeComponentFrame = describeComponentFrame,

	describeBuiltInComponentFrame = describeBuiltInComponentFrame,
	describeNativeComponentFrame = describeNativeComponentFrame,
	describeClassComponentFrame = describeClassComponentFrame,
	describeFunctionComponentFrame = describeFunctionComponentFrame,
	describeUnknownElementTypeFrameInDEV = describeUnknownElementTypeFrameInDEV,
}
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="529">
              <Properties>
                <string name="Name">ReactElementType</string>
                <string name="Source"><![CDATA[--!strict
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]
local Packages = script.Parent.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)
type Object = LuauPolyfill.Object

local flowtypes = require(script.Parent["flowtypes.roblox"])
type React_Element<ElementType> = flowtypes.React_Element<ElementType>
type React_StatelessFunctionalComponent<P> = flowtypes.React_StatelessFunctionalComponent<P>
type React_ComponentType<P> = flowtypes.React_ComponentType<P>

export type Source = {
	fileName: string,
	lineNumber: number,
}
type Key = string | number
-- deviation: we're using the TypeScript definition here, which is more strict
export type ReactElement<P = Object, T = any> = {
	["$$typeof"]: number,

	-- FIXME Luau: Luau has some trouble and inlining the type param from createElement doesn't help
	type: React_StatelessFunctionalComponent<P> | React_ComponentType<P> | string,
	-- type: T,
	key: Key | nil,
	ref: any,
	props: P,

	-- deviation: upstream has this as interface, which is extensible, Luau types are closed by default
	-- ReactFiber
	_owner: any,

	-- __DEV__
	_store: any?,
	_self: React_Element<any>?,
	_shadowChildren: any?,
	_source: Source?,
}

-- deviation: Return something so that the module system is happy
return {}
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="530">
              <Properties>
                <string name="Name">ReactErrorUtils</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/shared/ReactErrorUtils.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]
local invariant = require(script.Parent.invariant)
local invokeGuardedCallbackImpl = require(script.Parent.invokeGuardedCallbackImpl)

-- deviation: preemptively declare function
local clearCaughtError

-- Used by Fiber to simulate a try-catch.
local hasError = false
local caughtError = nil

-- Used by event system to capture/rethrow the first error.
local hasRethrowError = false
local rethrowError = nil
local reporter = {
	onError = function(err)
		hasError = true
		caughtError = err
	end,
}
local exports = {}

--[[*
* Call a function while guarding against errors that happens within it.
* Returns an error if it throws, otherwise nil.
*
* In production, this is implemented using a try-catch. The reason we don't
* use a try-catch directly is so that we can swap out a different
* implementation in DEV mode.
*
* @param {String} name of the guard to use for logging or debugging
* @param {Function} func The function to invoke
* @param {*} context The context to use when calling the function
* @param {...*} args Arguments for function
]]
exports.invokeGuardedCallback = function(...)
	hasError = false
	caughtError = nil
	-- deviation: passing in reporter directly
	invokeGuardedCallbackImpl(reporter, ...)
end

--[[*
* Same as invokeGuardedCallback, but instead of returning an error, it stores
* it in a global so it can be rethrown by `rethrowCaughtError` later.
* TODO: See if caughtError and rethrowError can be unified.
*
* @param {String} name of the guard to use for logging or debugging
* @param {Function} func The function to invoke
* @param {*} context The context to use when calling the function
* @param {...*} args Arguments for function
]]
exports.invokeGuardedCallbackAndCatchFirstError = function(...)
	-- deviation: instead of the weird `this` indirection, pass varargs through
	exports.invokeGuardedCallback(...)

	if hasError then
		local err = clearCaughtError()

		if not hasRethrowError then
			hasRethrowError = true
			rethrowError = err
		end
	end
end

--[[*
* During execution of guarded functions we will capture the first error which
* we will rethrow to be handled by the top level error handler.
]]
exports.rethrowCaughtError = function()
	if hasRethrowError then
		local err = rethrowError
		hasRethrowError = false
		rethrowError = nil
		error(err)
	end
end

exports.hasCaughtError = function()
	return hasError
end

clearCaughtError = function()
	if hasError then
		local err = caughtError
		hasError = false
		caughtError = nil
		return err
	else
		invariant(
			false,
			"clearCaughtError was called but no error was captured. This error "
				.. "is likely caused by a bug in React. Please file an issue."
		)
		-- deviation: luau doesn't know that invariant throws, so we return nil
		return nil
	end
end
exports.clearCaughtError = clearCaughtError

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="531">
              <Properties>
                <string name="Name">ReactFeatureFlags</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/ba82eea3837e4aaeb5a30b7827b664a8c2128d2e/packages/shared/ReactFeatureFlags.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
 ]]
-- Unknown globals fail type checking (see "Unknown symbols" section of
-- https://roblox.github.io/luau/typecheck.html)
local exports = {}

-- Filter certain DOM attributes (e.g. src, href) if their values are empty strings.
-- This prevents e.g. <img src=""> from making an unnecessary HTTP request for certain browsers.
exports.enableFilterEmptyStringAttributesDOM = true

-- Adds verbose console logging for e.g. state updates, suspense, and work loop stuff.
-- Intended to enable React core members to more easily debug scheduling issues in DEV builds.
exports.enableDebugTracing = false

-- Adds user timing marks for e.g. state updates, suspense, and work loop stuff,
-- for an experimental scheduling profiler tool.
exports.enableSchedulingProfiler = _G.__PROFILE__ and _G.__EXPERIMENTAL__

-- Helps identify side effects in render-phase lifecycle hooks and setState
-- reducers by double invoking them in Strict Mode.
-- TODO: we'll want to enable this for DEV app bundles
exports.debugRenderPhaseSideEffectsForStrictMode = _G.__DEV__

-- To preserve the "Pause on caught exceptions" behavior of the debugger, we
-- replay the begin phase of a failed component inside invokeGuardedCallback.
exports.replayFailedUnitOfWorkWithInvokeGuardedCallback = _G.__DEV__

-- Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:
exports.warnAboutDeprecatedLifecycles = true

-- Gather advanced timing metrics for Profiler subtrees.
exports.enableProfilerTimer = _G.__PROFILE__

-- Record durations for commit and passive effects phases.
exports.enableProfilerCommitHooks = false

-- Trace which interactions trigger each commit.
exports.enableSchedulerTracing = _G.__PROFILE__

-- SSR experiments
exports.enableSuspenseServerRenderer = _G.__EXPERIMENTAL__
exports.enableSelectiveHydration = _G.__EXPERIMENTAL__

-- Flight experiments
exports.enableBlocksAPI = _G.__EXPERIMENTAL__
exports.enableLazyElements = _G.__EXPERIMENTAL__

-- Only used in www builds.
exports.enableSchedulerDebugging = false

-- Disable javascript: URL strings in href for XSS protection.
exports.disableJavaScriptURLs = false

-- Experimental Host Component support.
exports.enableFundamentalAPI = false

-- Experimental Scope support.
exports.enableScopeAPI = false

-- Experimental Create Event Handle API.
exports.enableCreateEventHandleAPI = false

-- New API for JSX transforms to target - https://github.com/reactjs/rfcs/pull/107

-- We will enforce mocking scheduler with scheduler/unstable_mock at some point. (v18?)
-- Till then, we warn about the missing mock, but still fallback to a legacy mode compatible version
exports.warnAboutUnmockedScheduler = false

-- Add a callback property to suspense to notify which promises are currently
-- in the update queue. This allows reporting and tracing of what is causing
-- the user to see a loading state.
-- Also allows hydration callbacks to fire when a dehydrated boundary gets
-- hydrated or deleted.
exports.enableSuspenseCallback = false

-- Part of the simplification of React.createElement so we can eventually move
-- from React.createElement to React.jsx
-- https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md
exports.warnAboutDefaultPropsOnFunctionComponents = false

exports.disableSchedulerTimeoutBasedOnReactExpirationTime = false

exports.enableTrustedTypesIntegration = false

-- Enables a warning when trying to spread a 'key' to an element
-- a deprecated pattern we want to get rid of in the future
exports.warnAboutSpreadingKeyToJSX = true

exports.enableComponentStackLocations = true

exports.enableNewReconciler = true

-- Errors that are thrown while unmounting (or after in the case of passive effects)
-- should bypass any error boundaries that are also unmounting (or have unmounted)
-- and be handled by the nearest still-mounted boundary.
-- If there are no still-mounted boundaries, the errors should be rethrown.
exports.skipUnmountedBoundaries = true

-- --------------------------
-- Future APIs to be deprecated
-- --------------------------

-- Prevent the value and checked attributes from syncing
-- with their related DOM properties
exports.disableInputAttributeSyncing = true

exports.warnAboutStringRefs = false

exports.disableLegacyContext = false

-- Disables children for <textarea> elements
exports.disableTextareaChildren = false

exports.disableModulePatternComponents = false

-- We should remove this flag once the above flag becomes enabled
exports.warnUnstableRenderSubtreeIntoContainer = false

-- Support legacy Primer support on internal FB www
exports.enableLegacyFBSupport = true

-- Updates that occur in the render phase are not officially supported. But when
-- they do occur, we defer them to a subsequent render by picking a lane that's
-- not currently rendering. We treat them the same as if they came from an
-- interleaved event. Remove this flag once we have migrated to the
-- new behavior.
exports.deferRenderPhaseUpdateToNextBatch = false

-- Replacement for runWithPriority in React internals.
exports.decoupleUpdatePriorityFromScheduler = true

exports.enableDiscreteEventFlushingChange = false

exports.enableEagerRootListeners = false

exports.enableDoubleInvokingEffects = false
return exports
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="532">
              <Properties>
                <string name="Name">ReactFiberHostConfig</string>
                <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
--[[
	ROBLOX deviation: ReactFiberHostConfig captures singleton state across the
	whole workspace. This file and the modules it requires were moved from React
	to untangle a cyclic workspace member dependency.

	Before:
	* ReactFiberHostConfig (and the 5 associated modules) lived in React
	* React had a dependency on Shared
	* Shared reached into React source to re-export ReactFiberHostConfig (cycle)

	After:
	* ReactFiberHostConfig (and the 5 associated modules) live in Shared
	* React depends on Shared
	* Shared has no intra-workspace dependencies (no cycles)
]]

-- types that are common across ReactFiberHostConfig files, moved here to avoid circular deps
type Object = { [string]: any }
export type OpaqueIDType = string | Object

return {
	WithNoHydration = require(script.WithNoHydration),
	WithNoPersistence = require(script.WithNoPersistence),
	WithNoTestSelectors = require(script.WithNoTestSelectors),
}
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="533">
                <Properties>
                  <string name="Name">WithNoHydration</string>
                  <string name="Source"><![CDATA[-- upstream: https://github.com/facebook/react/blob/c5d2fc7127654e43de59fff865b74765a103c4a5/packages/react-reconciler/src/ReactFiberHostConfigWithNoHydration.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]

local invariant = require(script.Parent.Parent.invariant)

-- Renderers that don't support hydration
-- can re-export everything from this module.

function shim(...)
	invariant(
		false,
		"The current renderer does not support hydration. "
			.. "This error is likely caused by a bug in React. "
			.. "Please file an issue."
	)
end

-- Hydration (when unsupported)
export type SuspenseInstance = any
return {
	supportsHydration = false,
	canHydrateInstance = shim,
	canHydrateTextInstance = shim,
	canHydrateSuspenseInstance = shim,
	isSuspenseInstancePending = shim,
	isSuspenseInstanceFallback = shim,
	registerSuspenseInstanceRetry = shim,
	getNextHydratableSibling = shim,
	getFirstHydratableChild = shim,
	hydrateInstance = shim,
	hydrateTextInstance = shim,
	hydrateSuspenseInstance = shim,
	getNextHydratableInstanceAfterSuspenseInstance = shim,
	commitHydratedContainer = shim,
	commitHydratedSuspenseInstance = shim,
	clearSuspenseBoundary = shim,
	clearSuspenseBoundaryFromContainer = shim,
	didNotMatchHydratedContainerTextInstance = shim,
	didNotMatchHydratedTextInstance = shim,
	didNotHydrateContainerInstance = shim,
	didNotHydrateInstance = shim,
	didNotFindHydratableContainerInstance = shim,
	didNotFindHydratableContainerTextInstance = shim,
	didNotFindHydratableContainerSuspenseInstance = shim,
	didNotFindHydratableInstance = shim,
	didNotFindHydratableTextInstance = shim,
	didNotFindHydratableSuspenseInstance = shim,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="534">
                <Properties>
                  <string name="Name">WithNoPersistence</string>
                  <string name="Source"><![CDATA[-- upstream: https://github.com/facebook/react/blob/c5d2fc7127654e43de59fff865b74765a103c4a5/packages/react-reconciler/src/ReactFiberHostConfigWithNoPersistence.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]

local invariant = require(script.Parent.Parent.invariant)

-- Renderers that don't support persistence
-- can re-export everything from this module.

local function shim(...)
	invariant(
		false,
		"The current renderer does not support persistence. "
			.. "This error is likely caused by a bug in React. "
			.. "Please file an issue."
	)
end

-- Persistence (when unsupported)
return {
	supportsPersistence = false,
	cloneInstance = shim,
	cloneFundamentalInstance = shim,
	createContainerChildSet = shim,
	appendChildToContainerChildSet = shim,
	finalizeContainerChildren = shim,
	replaceContainerChildren = shim,
	cloneHiddenInstance = shim,
	cloneHiddenTextInstance = shim,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="535">
                <Properties>
                  <string name="Name">WithNoTestSelectors</string>
                  <string name="Source"><![CDATA[-- upstream: https://github.com/facebook/react/blob/3cde22a84e246fc5361f038bf0c23405b2572c22/packages/react-reconciler/src/ReactFiberHostConfigWithNoTestSelectors.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]

local invariant = require(script.Parent.Parent.invariant)

-- Renderers that don't support test selectors
-- can re-export everything from this module.

local function shim(...)
	invariant(
		false,
		"The current renderer does not support test selectors. "
			.. "This error is likely caused by a bug in React. "
			.. "Please file an issue."
	)
end

-- Test selectors (when unsupported)
return {
	supportsTestSelectors = false,
	findFiberRoot = shim,
	getBoundingRect = shim,
	getTextContent = shim,
	isHiddenSubtree = shim,
	matchAccessibilityRole = shim,
	setFocusIfFocusable = shim,
	setupIntersectionObserver = shim,
}
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="536">
              <Properties>
                <string name="Name">ReactInstanceMap</string>
                <string name="Source"><![CDATA[-- upstream: https://github.com/facebook/react/blob/2ba43edc2675380a0f2222f351475bf9d750c6a9/packages/shared/ReactInstanceMap.js
--!strict
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 ]]

--[[*
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 ]]

--[[*
 * This API should be called `delete` but we'd have to make sure to always
 * transform these to strings for IE support. When this transform is fully
 * supported we can rename it.
 ]]

local Shared = script.Parent
local Packages = Shared.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)
local Error = LuauPolyfill.Error
local inspect = LuauPolyfill.util.inspect
local getComponentName = require(script.Parent.getComponentName)

local exports = {}

local function isValidFiber(fiber): boolean
	return fiber.tag ~= nil and fiber.subtreeFlags ~= nil and fiber.lanes ~= nil and fiber.childLanes ~= nil
end

exports.remove = function(key)
	key._reactInternals = nil
end

exports.get = function(key)
	local value = key._reactInternals

	-- deviation: we have a crash in production this will help catch
	-- TODO: wrap this in __DEV__
	if not isValidFiber(value) then
		error(
			Error.new(
				"invalid fiber in "
					.. (getComponentName(key) or "UNNAMED Component")
					.. " during get from ReactInstanceMap! "
					.. inspect(value)
			)
		)
	elseif value.alternate ~= nil and not isValidFiber(value.alternate) then
		error(
			Error.new(
				"invalid alternate fiber ("
					.. (getComponentName(key) or "UNNAMED alternate")
					.. ") in "
					.. (getComponentName(key) or "UNNAMED Component")
					.. " during get from ReactInstanceMap! "
					.. inspect(value.alternate)
			)
		)
	end

	return value
end

exports.has = function(key)
	return key._reactInternals ~= nil
end

exports.set = function(key, value)
	-- deviation: we have a crash in production this will help catch
	-- TODO: wrap this in __DEV__
	local parent = value
	local message
	while parent ~= nil do
		if not isValidFiber(parent) then
			message = "invalid fiber in "
				.. (getComponentName(key) or "UNNAMED Component")
				.. " being set in ReactInstanceMap! "
				.. inspect(parent)
				.. "\n"

			if value ~= parent then
				message ..= " (from original fiber " .. (getComponentName(key) or "UNNAMED Component") .. ")"
			end
			error(Error.new(message))
		elseif (parent :: any).alternate ~= nil and not isValidFiber((parent :: any).alternate) then
			message = "invalid alternate fiber ("
				.. (getComponentName(key) or "UNNAMED alternate")
				.. ") in "
				.. (getComponentName(key) or "UNNAMED Component")
				.. " being set in ReactInstanceMap! "
				.. inspect((parent :: any).alternate)
				.. "\n"

			if value ~= parent then
				message ..= " (from original fiber " .. (getComponentName(key) or "UNNAMED Component") .. ")"
			end
			error(Error.new(message))
		end
		parent = (parent :: any).return_
	end

	(key :: any)._reactInternals = value
end

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="537">
              <Properties>
                <string name="Name">ReactSharedInternals</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/607148673b3156d051d1fed17cd49e83698dce54/packages/react/src/ReactSharedInternals.js
--[[*
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
]]

--[[
	ROBLOX deviation: ReactSharedInternals captures singleton state across the
	whole workspace. This file and the modules it requires were moved from React
	to untangle a cyclic workspace member dependency.

	Before:
	* ReactSharedInternals (and the 5 associated modules) lived in React
	* React had a dependency on Shared
	* Shared reached into React source to re-export ReactSharedInternals (cycle)

	After:
	* ReactSharedInternals (and the 5 associated modules) live in Shared
	* React depends on Shared
	* Shared has no intra-workspace dependencies (no cycles)
]]
local Packages = script.Parent.Parent
local console = require(Packages.LuauPolyfill).console
local function onlyInTestError(functionName: string)
	return function()
		console.error(functionName .. " is only available in tests, not in production")
	end
end

-- import assign from 'object-assign';
local ReactCurrentDispatcher = require(script.ReactCurrentDispatcher)
export type Dispatcher = ReactCurrentDispatcher.Dispatcher
local ReactCurrentBatchConfig = require(script.ReactCurrentBatchConfig)
local ReactCurrentOwner = require(script.ReactCurrentOwner)
local ReactDebugCurrentFrame = require(script.ReactDebugCurrentFrame)
local IsSomeRendererActing = require(script.IsSomeRendererActing)

local ReactSharedInternals = {
	ReactCurrentDispatcher = ReactCurrentDispatcher,
	ReactCurrentBatchConfig = ReactCurrentBatchConfig,
	ReactCurrentOwner = ReactCurrentOwner,
	IsSomeRendererActing = IsSomeRendererActing,
	-- deviation: Luau type checking requires us to have a consistent export shape regardless of __DEV__
	-- TODO: use if-expressions when all clients are on 503+
	ReactDebugCurrentFrame = if _G.__DEV__
		then ReactDebugCurrentFrame
		else {
			setExtraStackFrame = function(_: string?): ()
				onlyInTestError("setExtraStackFrame")
			end,
		},
	-- deviation: We shouldn't have to worry about duplicate bundling here
	-- Used by renderers to avoid bundling object-assign twice in UMD bundles:
	-- assign,
}

return ReactSharedInternals
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="538">
                <Properties>
                  <string name="Name">IsSomeRendererActing</string>
                  <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/a457e02ae3a2d3903fcf8748380b1cc293a2445e/packages/react/src/IsSomeRendererActing.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]

--[[*
 * Used by act() to track whether you're inside an act() scope.
 ]]

local IsSomeRendererActing = {
	current = false,
}
return IsSomeRendererActing
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="539">
                <Properties>
                  <string name="Name">ReactCurrentBatchConfig</string>
                  <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/92fcd46cc79bbf45df4ce86b0678dcef3b91078d/packages/react/src/ReactCurrentBatchConfig.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]

--[[*
 * Keeps track of the current batch's configuration such as how long an update
 * should suspend for if it needs to.
]]
local ReactCurrentBatchConfig = {
	transition = 0,
}

return ReactCurrentBatchConfig
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="540">
                <Properties>
                  <string name="Name">ReactCurrentDispatcher</string>
                  <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/376d5c1b5aa17724c5fea9412f8fcde14a7b23f1/packages/react/src/ReactCurrentDispatcher.js
--[[*
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*
* @flow
]]

--[[*
 * Keeps track of the current dispatcher.
]]
local Packages = script.Parent.Parent.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)
type Array<T> = LuauPolyfill.Array<T>

-- deviation: we duplicate the Dispatcher type here because upstream has a circular dependency between Shared and Reconciler
local ReactElementType = require(script.Parent.Parent.ReactElementType)
type Source = ReactElementType.Source
local ReactTypes = require(script.Parent.Parent.ReactTypes)
type RefObject = ReactTypes.RefObject
type ReactContext<T> = ReactTypes.ReactContext<T>
-- deviation START: binding support
type ReactBinding<T> = ReactTypes.ReactBinding<T>
type ReactBindingUpdater<T> = ReactTypes.ReactBindingUpdater<T>
-- deviation END: binding support
type MutableSourceVersion = ReactTypes.MutableSourceVersion
type MutableSource<Source> = ReactTypes.MutableSource<Source>
type MutableSourceSubscribeFn<Source, Snapshot> = ReactTypes.MutableSourceSubscribeFn<Source, Snapshot>
type MutableSourceGetSnapshotFn<Source, Snapshot> = ReactTypes.MutableSourceGetSnapshotFn<Source, Snapshot>

type BasicStateAction<S> = ((S) -> S) | S
type Dispatch<A> = (A) -> ()

export type Dispatcher = {
	readContext: <T>(context: ReactContext<T>, observedBits: nil | number | boolean) -> T,
	useState: <S>(initialState: (() -> S) | S) -> (S, Dispatch<BasicStateAction<S>>),
	useReducer: <S, I, A>(reducer: (S, A) -> S, initialArg: I, init: ((I) -> S)?) -> (S, Dispatch<A>),
	useContext: <T>(context: ReactContext<T>, observedBits: nil | number | boolean) -> T,
	-- deviation START: TS models this slightly differently, which is needed to have an initially empty ref and clear the ref, and still typecheck
	useRef: <T>(initialValue: T) -> { current: T | nil },
	-- deviation END
	-- deviation START: Bindings are a feature unique to Roact
	useBinding: <T>(initialValue: T) -> (ReactBinding<T>, ReactBindingUpdater<T>),
	-- deviation END
	useEffect: (
		-- TODO: Luau needs union type packs for this type to translate idiomatically
		create: (() -> ()) | (() -> (() -> ())),
		deps: Array<any> | nil
	) -> (),
	useLayoutEffect: (
		-- TODO: Luau needs union type packs for this type to translate idiomatically
		create: (() -> ()) | (() -> (() -> ())),
		deps: Array<any> | nil
	) -> (),
	useCallback: <T>(callback: T, deps: Array<any> | nil) -> T,
	useMemo: <T...>(nextCreate: () -> T..., deps: Array<any> | nil) -> T...,
	useImperativeHandle: <T>(
		ref: { current: T | nil } | ((inst: T | nil) -> any) | nil,
		create: () -> T,
		deps: Array<any> | nil
	) -> (),
	useDebugValue: <T>(value: T, formatterFn: ((value: T) -> any)?) -> (),
	-- TODO: make these non-optional and implement them in the dispatchers
	useDeferredValue: (<T>(value: T) -> T)?,
	useTransition: (() -> ((() -> ()) -> (), boolean))?, -- deviation: Luau doesn't support jagged array types [(() -> ()) -> (), boolean],
	useMutableSource: <Source, Snapshot>(
		source: MutableSource<Source>,
		getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,
		subscribe: MutableSourceSubscribeFn<Source, Snapshot>
	) -> Snapshot,
	useOpaqueIdentifier: () -> any,

	unstable_isNewReconciler: boolean?,
	-- [string]: any,
}

local ReactCurrentDispatcher: { current: nil | Dispatcher } = {
	--[[
		* @internal
		* @type {ReactComponent}
		*/
	]]
	current = nil,
}

return ReactCurrentDispatcher
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="541">
                <Properties>
                  <string name="Name">ReactCurrentOwner</string>
                  <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/376d5c1b5aa17724c5fea9412f8fcde14a7b23f1/packages/react/src/ReactCurrentOwner.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]

--[[*
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
]]
local ReactCurrentOwner = {
	--[[*
   * @internal
   * @type {ReactComponent}
   ]]
	-- deviation START: upstream types this as Fiber, but that would incur a circular dependency between reconciler and shared
	current = nil :: any,
	-- deviation END
}

return ReactCurrentOwner
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="542">
                <Properties>
                  <string name="Name">ReactDebugCurrentFrame</string>
                  <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/98d410f5005988644d01c9ec79b7181c3dd6c847/packages/react/src/ReactDebugCurrentFrame.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
 ]]

local ReactDebugCurrentFrame = {}

local currentExtraStackFrame = nil :: nil | string

function ReactDebugCurrentFrame.setExtraStackFrame(stack: string?): ()
	if _G.__DEV__ then
		currentExtraStackFrame = stack
	end
end

if _G.__DEV__ then
	-- deviation: in Lua, the implementation is duplicated
	-- function ReactDebugCurrentFrame.setExtraStackFrame(stack: string?)
	-- 	if _G.__DEV__ then
	-- 		currentExtraStackFrame = stack
	-- 	end
	-- end

	-- Stack implementation injected by the current renderer.
	ReactDebugCurrentFrame.getCurrentStack = nil :: nil | (() -> string)

	function ReactDebugCurrentFrame.getStackAddendum(): string
		local stack = ""

		-- Add an extra top frame while an element is being validated
		if currentExtraStackFrame then
			stack = stack .. currentExtraStackFrame
		end

		-- Delegate to the injected renderer-specific implementation
		local impl = ReactDebugCurrentFrame.getCurrentStack
		if impl then
			stack = stack .. (impl() or "")
		end

		return stack
	end
end

return ReactDebugCurrentFrame
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="543">
              <Properties>
                <string name="Name">ReactSymbols</string>
                <string name="Source"><![CDATA[-- upstream: https://github.com/facebook/react/blob/b61174fb7b09580c1ec2a8f55e73204b706d2935/packages/shared/ReactSymbols.js
--!strict
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
 ]]

-- ATTENTION
-- When adding new symbols to this file,
-- Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'

-- local Packages = script.Parent.Parent
-- local LuauPolyfill = require(Packages.LuauPolyfill)
-- local Symbol = LuauPolyfill.Symbol

local exports: { [string]: any } = {}

-- The Symbol used to tag the ReactElement-like types. If there is no native Symbol
-- nor polyfill, then a plain number is used for performance.
exports.REACT_ELEMENT_TYPE = 0xeac7
exports.REACT_PORTAL_TYPE = 0xeaca
exports.REACT_FRAGMENT_TYPE = 0xeacb
exports.REACT_STRICT_MODE_TYPE = 0xeacc
exports.REACT_PROFILER_TYPE = 0xead2
exports.REACT_PROVIDER_TYPE = 0xeacd
exports.REACT_CONTEXT_TYPE = 0xeace
exports.REACT_FORWARD_REF_TYPE = 0xead0
exports.REACT_SUSPENSE_TYPE = 0xead1
exports.REACT_SUSPENSE_LIST_TYPE = 0xead8
exports.REACT_MEMO_TYPE = 0xead3
exports.REACT_LAZY_TYPE = 0xead4
exports.REACT_BLOCK_TYPE = 0xead9
exports.REACT_SERVER_BLOCK_TYPE = 0xeada
exports.REACT_FUNDAMENTAL_TYPE = 0xead5
exports.REACT_SCOPE_TYPE = 0xead7
exports.REACT_OPAQUE_ID_TYPE = 0xeae0
exports.REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1
exports.REACT_OFFSCREEN_TYPE = 0xeae2
exports.REACT_LEGACY_HIDDEN_TYPE = 0xeae3
exports.REACT_BINDING_TYPE = 0xeae4

-- TODO: Use Symbol again once jest-mock knows to exclude the LuauPolyfill module from being reset
-- deviation: In Lua, Symbol will be a callable table, not a function
-- if typeof(Symbol) == "table" and Symbol.for_ ~= nil then
--   local symbolFor = Symbol.for_
--   exports.REACT_ELEMENT_TYPE = symbolFor('react.element')
--   exports.REACT_PORTAL_TYPE = symbolFor('react.portal')
--   exports.REACT_FRAGMENT_TYPE = symbolFor('react.fragment')
--   exports.REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode')
--   exports.REACT_PROFILER_TYPE = symbolFor('react.profiler')
--   exports.REACT_PROVIDER_TYPE = symbolFor('react.provider')
--   exports.REACT_CONTEXT_TYPE = symbolFor('react.context')
--   exports.REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref')
--   exports.REACT_SUSPENSE_TYPE = symbolFor('react.suspense')
--   exports.REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list')
--   exports.REACT_MEMO_TYPE = symbolFor('react.memo')
--   exports.REACT_LAZY_TYPE = symbolFor('react.lazy')
--   exports.REACT_BLOCK_TYPE = symbolFor('react.block')
--   exports.REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block')
--   exports.REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental')
--   exports.REACT_SCOPE_TYPE = symbolFor('react.scope')
--   exports.REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id')
--   exports.REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode')
--   exports.REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen')
--   exports.REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden')
-- end

-- deviation: short circuit for now
--local MAYBE_ITERATOR_SYMBOL = false -- deviation: typeof(Symbol) == 'function' and Symbol.iterator
--local FAUX_ITERATOR_SYMBOL = '@@iterator'

type Iterator<T> = {
	next: () -> {
		value: T,
		key: any,
		done: boolean,
	},
}
-- deviation: upstream type is incorrect, as returned function takes a parameter in reconcileChildrenIterator()
exports.getIteratorFn = function(maybeIterable): nil | (...any) -> Iterator<any>
	if typeof(maybeIterable) == "table" then
		-- deviation: Upstream understands that portal objects are not
		-- iterable; we need to check explicitly
		if maybeIterable["$$typeof"] == exports.REACT_PORTAL_TYPE then
			return nil
		end
		return function()
			local currentKey: any, currentValue: any
			return {
				next = function()
					currentKey, currentValue = next(maybeIterable, currentKey)
					return {
						done = currentValue == nil,
						-- deviation: To support Roact's table-keys-as-stable-keys feature,
						-- we need the iterator to return the key as well
						key = currentKey,
						value = currentValue,
					}
				end,
			}
		end
	end

	return nil
end

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="544">
              <Properties>
                <string name="Name">ReactTypes</string>
                <string name="Source"><![CDATA[--!strict
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
]]

local Packages = script.Parent.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)
type Array<T> = LuauPolyfill.Array<T>
type Object = LuauPolyfill.Object
type void = nil
type NonMaybeType<T> = T

local flowtypes = require(script.Parent["flowtypes.roblox"])
type React_Element<T> = flowtypes.React_Element<T>
type React_Node = flowtypes.React_Node
type SimpleMap<K, V> = { [K]: V }
type Iterable<T> = SimpleMap<string | number, T> | Array<T>

export type ReactNode<T = any> =
	React_Element<T>
	| ReactPortal
	-- | ReactText
	| ReactFragment
	| ReactProvider<T>
	| ReactConsumer<T>

export type ReactEmpty = nil | void | boolean

export type ReactFragment = ReactEmpty | Iterable<React_Node>

export type ReactNodeList = ReactEmpty | React_Node

-- deviation START: Roblox renderer doesn't support TextNode, only use of this type is in this file
-- export type ReactText = string | number;
-- deviation END
export type ReactProvider<T> = {
	["$$typeof"]: number,
	type: ReactProviderType<T>,
	key: nil | string,
	ref: nil,
	props: {
		value: T,
		children: ReactNodeList?,
		-- deviation START: only make this open to extension if absolutely necessary
		-- ...
		-- deviation END
	},
	-- deviation START: only make this open to extension if absolutely necessary
	-- ...
	-- deviation END
}

export type ReactProviderType<T> = {
	["$$typeof"]: number,
	_context: ReactContext<T>,
	-- deviation START: only make this open to extension if absolutely necessary
	-- ...
	-- deviation END
}

export type ReactConsumer<T> = {
	["$$typeof"]: number,
	type: ReactContext<T>, -- FIXME: Luau can't do <T> because:  Recursive type being used with different parameters
	key: nil | string,
	ref: nil,
	props: {
		children: (value: T) -> ReactNodeList,
		unstable_observedBits: number?,
		-- deviation START: only make this open to extension if absolutely necessary
		-- ...
		-- deviation END
	},
	-- deviation START: only make this open to extension if absolutely necessary
	-- ...
	-- deviation END
}

export type ReactContext<T> = {
	["$$typeof"]: number,
	Consumer: ReactContext<T>,
	Provider: ReactProviderType<T>,
	_calculateChangedBits: ((T, T) -> number)?,
	_currentValue: T,
	_currentValue2: T,
	_threadCount: number,
	-- DEV only
	_currentRenderer: Object | nil,
	_currentRenderer2: Object | nil,
	-- This value may be added by application code
	-- to improve DEV tooling display names
	displayName: string?,
	-- deviation START: only make this open to extension if absolutely necessary
	-- ...
	-- deviation END
}

export type ReactPortal = {
	["$$typeof"]: number,
	key: nil | string,
	containerInfo: any,
	children: ReactNodeList,
	-- TODO: figure out the API for cross-renderer implementation.
	implementation: any,
	-- deviation START: only make this open to extension if absolutely necessary
	-- ...
	-- deviation END
}

export type RefObject = { current: any }

-- deviation START: No Luau support for numeric literal types
-- export type EventPriority = 0 | 1 | 2;
export type EventPriority = number
-- deviation END

local exports = {}
exports.DiscreteEvent = 0
exports.UserBlockingEvent = 1
exports.ContinuousEvent = 2

export type ReactFundamentalComponentInstance<C, H> = {
	currentFiber: Object,
	instance: any,
	prevProps: Object?,
	props: Object,
	impl: ReactFundamentalImpl<C, H>,
	state: Object,
}

export type ReactFundamentalImpl<C, H> = {
	displayName: string,
	reconcileChildren: boolean,
	getInitialState: nil | (Object) -> Object,
	getInstance: (C, Object, Object) -> H,
	getServerSideString: nil | (C, Object) -> string,
	getServerSideStringClose: nil | (C, Object) -> string,
	onMount: (C, any, Object, Object) -> (),
	shouldUpdate: nil | (C, Object?, Object, Object) -> boolean,
	onUpdate: nil | (C, any, Object?, Object, Object) -> (),
	onUnmount: nil | (C, any, Object, Object) -> (),
	onHydrate: nil | (C, Object, Object) -> boolean,
	onFocus: nil | (C, Object, Object) -> boolean,
}
export type ReactFundamentalComponent<C, H> = {
	["$$typeof"]: number,
	impl: ReactFundamentalImpl<C, H>,
}

export type ReactScope = {
	["$$typeof"]: number,
}

export type ReactScopeQuery = (
	type: string,
	-- deviation START: leave closed to extension unless necessary
	props: { [string]: any? },
	-- deviation END
	instance: any
) -> boolean

export type ReactScopeInstance = {
	DO_NOT_USE_queryAllNodes: (ReactScopeQuery) -> nil | Array<Object>,
	DO_NOT_USE_queryFirstNode: (ReactScopeQuery) -> nil | Object,
	containsNode: (Object) -> boolean,
	getChildContextValues: <T>(context: ReactContext<T>) -> Array<T>,
}

-- deviation START: Bindings are unique to Roact
-- FIXME Luau: can't create recursive type with different parameters, so we
-- need to split the generic `map` method into a different type and then
-- re-combine those types together
type CoreReactBinding<T> = {
	getValue: (self: CoreReactBinding<T>) -> T,
	_source: string?,
}
type ReactBindingMap = {
	map: <T, U>(self: CoreReactBinding<T> & ReactBindingMap, (T) -> U) -> ReactBindingMap & CoreReactBinding<U>,
}

export type ReactBinding<T> = CoreReactBinding<T> & ReactBindingMap
export type ReactBindingUpdater<T> = (T) -> ()
-- deviation END

-- Mutable source version can be anything (e.g. number, string, immutable data structure)
-- so long as it changes every time any part of the source changes.
export type MutableSourceVersion = NonMaybeType<any>

export type MutableSourceGetSnapshotFn<Source, Snapshot> = (source: Source) -> Snapshot

export type MutableSourceSubscribeFn<Source, Snapshot> = (
	source: Source,
	callback: (snapshot: Snapshot) -> ()
) -> (() -> ())

export type MutableSourceGetVersionFn = (_source: NonMaybeType<any>) -> MutableSourceVersion

export type MutableSource<Source> = {
	_source: Source,

	_getVersion: MutableSourceGetVersionFn,

	-- Tracks the version of this source at the time it was most recently read.
	-- Used to determine if a source is safe to read from before it has been subscribed to.
	-- Version number is only used during mount,
	-- since the mechanism for determining safety after subscription is expiration time.
	--
	-- As a workaround to support multiple concurrent renderers,
	-- we categorize some renderers as primary and others as secondary.
	-- We only expect there to be two concurrent renderers at most:
	-- React Native (primary) and Fabric (secondary);
	-- React DOM (primary) and React ART (secondary).
	-- Secondary renderers store their context values on separate fields.
	-- We use the same approach for Context.
	_workInProgressVersionPrimary: nil | MutableSourceVersion,
	_workInProgressVersionSecondary: nil | MutableSourceVersion,

	-- DEV only
	-- Used to detect multiple renderers using the same mutable source.
	_currentPrimaryRenderer: Object | nil,
	_currentSecondaryRenderer: Object | nil,
}

-- The subset of a Thenable required by things thrown by Suspense.
-- This doesn't require a value to be passed to either handler.
export type Wakeable = {
	andThen: (
		self: Wakeable,
		onFulfill: () -> ...any,
		onReject: () -> ...any
		-- FIXME Luau: needs union type packs to parse () | Wakeable
	) -> nil | Wakeable,
	-- Special flag to opt out of tracing interactions across a Suspense boundary.
	__reactDoNotTraceInteractions: boolean?,
}

-- The subset of a Promise that React APIs rely on. This resolves a value.
-- This doesn't require a return value neither from the handler nor the
-- then function.
-- FIXME: workaround for Luau recursive type used with different parameters. delete this copy once that issue is resolved.
export type _Thenable<R> = {
	andThen: <U>(self: _Thenable<R>, onFulfill: (R) -> ...U, onReject: (error: any) -> ...U) -> (),
}

export type Thenable<R> = {
	andThen: <U>(
		self: Thenable<R>,
		onFulfill: (R) -> ...(_Thenable<U> | U),
		onReject: (error: any) -> ...(_Thenable<U> | U)
		-- FIXME Luau: need union type packs to parse () | Thenable<U>: CLI-49836
	) -> nil | _Thenable<U>,
}

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="545">
              <Properties>
                <string name="Name">ReactVersion</string>
                <string name="Source"><![CDATA[-- upstream: https://github.com/facebook/react/blob/a89854bc936668d325cac9a22e2ebfa128c7addf/packages/shared/ReactVersion.js
--!strict
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 ]]

-- TODO: this is special because it gets imported during build.
return "17.0.1"
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="546">
              <Properties>
                <string name="Name">Symbol.roblox</string>
                <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
--[[
	A 'Symbol' is an opaque marker type.

	Symbols have the type 'userdata', but when printed to the console, the name
	of the symbol is shown.
]]

local Symbol = {}

--[[
	Creates a Symbol with the given name.

	When printed or coerced to a string, the symbol will turn into the string
	given as its name.
]]
function Symbol.named(name)
	assert(type(name) == "string", "Symbols must be created using a string name!")

	local self = newproxy(true)

	local wrappedName = string.format("Symbol(%s)", name)

	getmetatable(self).__tostring = function()
		return wrappedName
	end

	return self
end

return Symbol
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="547">
              <Properties>
                <string name="Name">Type.roblox</string>
                <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
--[[
	Contains markers for annotating objects with types.

	To set the type of an object, use `Type` as a key and the actual marker as
	the value:

		local foo = {
			[Type] = Type.Foo,
		}
]]

local Symbol = require(script.Parent["Symbol.roblox"])

local Type = newproxy(true)

local TypeInternal = {}

local function addType(name)
	TypeInternal[name] = Symbol.named("Roact" .. name)
end

addType("HostChangeEvent")
addType("HostEvent")

function TypeInternal.of(value)
	if typeof(value) ~= "table" then
		return nil
	end

	return value[Type]
end

getmetatable(Type).__index = TypeInternal

getmetatable(Type).__tostring = function()
	return "RoactType"
end

return Type
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="548">
              <Properties>
                <string name="Name">UninitializedState.roblox</string>
                <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
--!strict
local console = require(script.Parent.console)

-- deviation: Initialize state to a singleton that warns on access and errors on assignment
-- initial state singleton
local UninitializedState = {}

setmetatable(UninitializedState, {
	__index = function(table, key)
		if _G.__DEV__ then
			console.warn("Attempted to access uninitialized state. Use setState to initialize state")
		end
		return nil
	end,
	__newindex = function(table, key)
		if _G.__DEV__ then
			console.error("Attempted to directly mutate state. Use setState to assign new values to state.")
		end
		return nil
	end,
	__tostring = function(self)
		return "<uninitialized component state>"
	end,
	__metatable = "UninitializedState",
})

return UninitializedState
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="549">
              <Properties>
                <string name="Name">checkPropTypes</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/55cb0b7eeb0e539d89858b8ed69beabf7fe2fb46/packages/shared/checkPropTypes.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
 ]]
local Packages = script.Parent.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)
local Error = LuauPolyfill.Error
type Object = LuauPolyfill.Object
type Function = (...any) -> ...any

-- NOTE: use patched console from shared
local console = require(script.Parent.console)

local loggedTypeFailures = {}

local ReactComponentStackFrame = require(script.Parent.ReactComponentStackFrame)
local describeUnknownElementTypeFrameInDEV = ReactComponentStackFrame.describeUnknownElementTypeFrameInDEV

local ReactSharedInternals = require(script.Parent.ReactSharedInternals)

local describeError = require(script.Parent["ErrorHandling.roblox"]).describeError

local ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame

-- FIXME Luau: doesn't see `if element` as nilable table, so we get TypeError: Type 'any?' could not be converted into '{| _owner: {| type: nil |}, _source: Source?, type: any |}'
local function setCurrentlyValidatingElement(element: any?)
	if _G.__DEV__ then
		if element then
			local owner = element._owner
			local stack = describeUnknownElementTypeFrameInDEV(
				element.type,
				element._source,
				if owner ~= nil then owner.type else nil
			);
			-- FIXME Luau: Cannot call non-function ((string?) -> ()) | ((string?) -> ())
			(ReactDebugCurrentFrame.setExtraStackFrame :: any)(stack)
		else
			(ReactDebugCurrentFrame.setExtraStackFrame :: any)(nil)
		end
	end
end

local function checkPropTypes<P>(
	-- deviation START: also checks validateProps if present
	propTypes: Object?,
	validateProps: (P) -> (boolean, string?)?,
	props: P,
	-- deviation END
	location: string,
	componentName: string?,
	element: any?
): ()
	if _G.__DEV__ or _G.__DISABLE_ALL_WARNINGS_EXCEPT_PROP_VALIDATION__ then
		-- deviation: hasOwnProperty shouldn't be relevant to lua objects
		-- $FlowFixMe This is okay but Flow doesn't know it.
		-- local has = Function.call.bind(Object.prototype.hasOwnProperty)

		-- deviation: warns if both propType and validateProps defined.
		if propTypes and validateProps then
			console.warn("You've defined both propTypes and validateProps on " .. (componentName or "a component"))
		end

		-- deviation: also checks validateProps if present
		if validateProps then
			if typeof(validateProps) ~= "function" then
				console.error(
					("validateProps must be a function, but it is a %s.\nCheck the definition of the component %q."):format(
						typeof(validateProps),
						componentName or ""
					)
				)
			else
				local success, failureReason = validateProps(props)

				if not success then
					failureReason = failureReason or "<Validator function did not supply a message>"
					local message = string.format(
						"validateProps failed on a %s type in %s: %s",
						location,
						componentName or "<UNKNOWN Component>",
						tostring(failureReason)
					)
					-- deviation: In legacy Roact, prop validation
					-- failures throw. We replicate that behavior, even though
					-- it differs from propTypes (which only warns)
					-- FIXME: align with upstream behavior during React 18 Lua transition
					error(message)
				end
			end
		end

		if propTypes then
			-- deviation: since we can't constrain the generic, we assert so Luau knows propTypes is a table
			assert(typeof(propTypes) == "table", "propTypes needs to be a table")
			for typeSpecName, _ in propTypes do
				-- deviation: since our loop won't hit metatable members, we don't
				-- need to worry about encountering inherited properties here
				-- if has(propTypes, typeSpecName) then

				-- Prop type validation may throw. In case they do, we don't want to
				-- fail the render phase where it didn't fail before. So we log it.
				-- After these have been cleaned up, we'll local them throw.
				local _, result = xpcall(function()
					-- This is intentionally an invariant that gets caught. It's the same
					-- behavior as without this statement except with a better message.
					if typeof(propTypes[typeSpecName]) ~= "function" then
						local err = Error.new(
							(componentName or "React class")
								.. ": "
								.. location
								.. " type `"
								.. typeSpecName
								.. "` is invalid; "
								.. "it must be a function, usually from the `prop-types` package, but received `"
								.. typeof(propTypes[typeSpecName])
								.. "`."
								.. "This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
						)
						err.name = "Invariant Violation"
						error(err)
					end

					return (propTypes[typeSpecName] :: Function)(
						props,
						typeSpecName,
						componentName,
						location,
						nil,
						"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"
					)
				end, describeError)

				-- deviation: FIXME: Can we expose something from JSPolyfill that
				-- will let us verify that this is specifically the Error object
				-- defined there? if we check for result.message ~= nil, ReactNewContext.spec:1368 fails
				local isErrorObject = typeof(result) == "table"
				if result ~= nil and not isErrorObject then
					setCurrentlyValidatingElement(element)
					console.error(string.format(
						-- deviation: s/null/nil
						"%s: type specification of %s"
							.. " `%s` is invalid; the type checker "
							.. "function must return `nil` or an `Error` but returned a %s. "
							.. "You may have forgotten to pass an argument to the type checker "
							.. "creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and "
							.. "shape all require an argument).",
						componentName or "React class",
						location,
						typeSpecName,
						typeof(result)
					))
					setCurrentlyValidatingElement(nil)
				end

				-- FIXME: Luau analyze doesn't understand isErrorObject's effect as a predicate meaning result ~= nil
				if isErrorObject and loggedTypeFailures[(result :: any).message] == nil then
					-- Only monitor this failure once because there tends to be a lot of the
					-- same error.
					loggedTypeFailures[tostring((result :: any).message)] = true
					setCurrentlyValidatingElement(element)
					console.warn(string.format("Failed %s type: %s", location, tostring((result :: any).message)))
					setCurrentlyValidatingElement(nil)
				end
			end
		end
	end
end

return checkPropTypes
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="550">
              <Properties>
                <string name="Name">console</string>
                <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]

-- deviation: this lets us have the same functionality as in React, without
-- having something like Babel to inject a different implementation of
-- console.warn and console.error into the code
-- Instead of using `LuauPolyfill.console`, React internals should use this
-- wrapper to be able to use consoleWithStackDev in dev mode
local Shared = script.Parent
local Packages = Shared.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)
local console = LuauPolyfill.console
local consoleWithStackDev = require(Shared.consoleWithStackDev)

if _G.__DEV__ then
	local newConsole = setmetatable({
		warn = consoleWithStackDev.warn,
		error = consoleWithStackDev.error,
	}, {
		__index = console,
	})
	return newConsole
end

return console
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="551">
              <Properties>
                <string name="Name">consoleWithStackDev</string>
                <string name="Source"><![CDATA[-- upstream: https://github.com/facebook/react/blob/cb141681750c8221ac799074df09df2bb448c7a4/packages/shared/consoleWithStackDev.js
--[[*
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
]]
local Packages = script.Parent.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)
local console = LuauPolyfill.console
local Array = LuauPolyfill.Array

local ReactSharedInternals = require(script.Parent.ReactSharedInternals)
-- In DEV, calls to console.warn and console.error get replaced
-- by calls to these methods by a Babel plugin.
--
-- In PROD (or in packages without access to React internals),
-- they are left as they are instead.

-- deviation: declare this ahead of time so that `warn` and `error` are able to
-- reference it
local printWarning

local exports = {}
exports.warn = function(format, ...)
	if _G.__DEV__ then
		printWarning("warn", format, { ... })
	end
end
exports.error = function(format, ...)
	if _G.__DEV__ then
		printWarning("error", format, { ... })
	end
end

function printWarning(level, format, args)
	-- When changing this logic, you might want to also
	-- update consoleWithStackDev.www.js as well.
	if _G.__DEV__ then
		local ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame
		local stack = ReactDebugCurrentFrame.getStackAddendum()

		if stack ~= "" then
			format ..= "%s"
			-- deviation: no array `concat` function in lua
			args = Array.slice(args, 1)
			table.insert(args, stack)
		end

		local argsWithFormat = Array.map(args, tostring)
		-- Careful: RN currently depends on this prefix
		table.insert(argsWithFormat, 1, "Warning: " .. format)
		-- We intentionally don't use spread (or .apply) directly because it
		-- breaks IE9: https://github.com/facebook/react/issues/13610
		-- eslint-disable-next-line react-internal/no-production-logging
		console[level](unpack(argsWithFormat))
	end
end

return exports
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="552">
              <Properties>
                <string name="Name">enqueueTask.roblox</string>
                <string name="Source"><![CDATA[--!strict
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 ]]
local Packages = script.Parent.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)
local setTimeout = LuauPolyfill.setTimeout

return function(task)
	-- deviation: Replace with setImmediate once we create an equivalent polyfill
	return setTimeout(task, 0)
end
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="553">
              <Properties>
                <string name="Name">flowtypes.roblox</string>
                <string name="Source"><![CDATA[--[[
	* Copyright (c) Roblox Corporation. All rights reserved.
	* Licensed under the MIT License (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*     https://opensource.org/licenses/MIT
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
]]
-- built-in flowtypes reverse engineered based on usage and enabling strict type checking on test suites
--!strict
local Packages = script.Parent.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)
type Error = LuauPolyfill.Error
type Array<T> = LuauPolyfill.Array<T>
type Object = { [string]: any }
-- duplicated from ReactElementType to avoid circular dep
type Source = {
	fileName: string,
	lineNumber: number,
}

-- deviation: alias for internal React$ flow types
export type React_Node =
	nil
	| boolean
	| number
	| string
	| React_Element<any>
	-- TODO: only include this once it's more specific than `any`
	-- | React_Portal
	| Array<React_Node?>
	-- TODO Luau: this more closely matches the upstream Iterable<>, hypothetically the UNIQUE_TAG field makes it so we don't unify with other tables and squad field resolution
	| { [string]: React_Node?, UNIQUE_TAG: any? }

export type React_Element<ElementType> = {
	type: ElementType,
	props: React_ElementProps<ElementType>?,
	key: React_Key | nil,
	ref: any,
}

export type React_PureComponent<Props, State = nil> = React_Component<Props, State>

-- NOTE: this flowtype built-in is derived from the object shape returned by forwardRef
export type React_AbstractComponent<Config, Instance> = {
	["$$typeof"]: number,
	render: ((props: Config, ref: React_Ref<Instance>) -> React_Node)?,
	displayName: string?,
	defaultProps: Config?,
	-- not in React flowtype, but is in definitelytyped and is used in ReactElement
	name: string?,
	-- allows methods to be hung on a component, used in forwardRef.spec regression test we added
	[string]: any,
}

-- TODO: ElementConfig: something like export type React_ElementConfig<React_Component<P>> = P
export type React_ElementConfig<C> = Object

-- deviation: this is a class export upstream, so optional overrides are nil-able, and it's extensible by default
export type React_Component<Props, State = nil> = {
	-- fields
	props: Props,
	state: State,

	-- action methods

	setState: (
		self: React_Component<Props, State>,
		partialState: State | ((State, Props) -> State?),
		callback: (() -> ())?
	) -> (),

	forceUpdate: (self: React_Component<Props, State>, callback: (() -> ())?) -> (),

	-- lifecycle methods

	init: ((self: React_Component<Props, State>, props: Props, context: any?) -> ())?,
	render: (self: React_Component<Props, State>) -> React_Node,
	componentWillMount: ((self: React_Component<Props, State>) -> ())?,
	UNSAFE_componentWillMount: ((self: React_Component<Props, State>) -> ())?,
	componentDidMount: ((self: React_Component<Props, State>) -> ())?,
	componentWillReceiveProps: ((self: React_Component<Props, State>, nextProps: Props, nextContext: any) -> ())?,
	UNSAFE_componentWillReceiveProps: ((
		self: React_Component<Props, State>,
		nextProps: Props,
		nextContext: any
	) -> ())?,
	shouldComponentUpdate: ((
		self: React_Component<Props, State>,
		nextProps: Props,
		nextState: State,
		nextContext: any
	) -> boolean)?,
	componentWillUpdate: ((
		self: React_Component<Props, State>,
		nextProps: Props,
		nextState: State,
		nextContext: any
	) -> ())?,
	UNSAFE_componentWillUpdate: ((
		self: React_Component<Props, State>,
		nextProps: Props,
		nextState: State,
		nextContext: any
	) -> ())?,
	componentDidUpdate: ((
		self: React_Component<Props, State>,
		prevProps: Props,
		prevState: State,
		prevContext: any
	) -> ())?,
	componentWillUnmount: ((self: React_Component<Props, State>) -> ())?,
	componentDidCatch: ((
		self: React_Component<Props, State>,
		error: Error,
		info: {
			componentStack: string,
		}
	) -> ())?,
	getDerivedStateFromProps: ((props: Props, state: State) -> State?)?,
	getDerivedStateFromError: ((error: Error) -> State?)?,
	getSnapshotBeforeUpdate: ((props: Props, state: State) -> any)?,

	-- long tail of other stuff not modeled very well

	-- deviation START: these fields are mostly used internally including in ReactBaseClasses
	__refs: Object,
	__updater: any,
	-- deviation END

	-- deviation: this field is only used in relation to string refs, which we do not support
	-- refs: any,
	context: any,
	getChildContext: (self: React_Component<Props, State>) -> any,
	-- statics
	__componentName: string,
	displayName: string?,
	-- deviation: not in React flowtype, but is in definitelytyped and is used in ReactElement
	name: string?,
	childContextTypes: any?,
	contextTypes: any?,
	propTypes: any?,

	-- FIXME: this is a legacy Roact field and should be removed in React 18 Lua
	validateProps: ((Props) -> (boolean, string?))?,

	-- We don't add a type for `defaultProps` so that its type may be entirely
	-- inferred when we diff the type for `defaultProps` with `Props`. Otherwise
	-- the user would need to define a type (which would be redundant) to override
	-- the type we provide here in the base class.
	-- deviation: Luau doesn't do the inference above
	defaultProps: Props?,
	-- deviation: class export allows assigning additional custom instance fields
	[string]: any,
}

-- deviation: Lua doesn't allow fields on functions, and we haven't implemented callable tables as "function" components
export type React_StatelessFunctionalComponent<Props> = (props: Props, context: any) -> React_Node
export type React_ComponentType<Config> = React_Component<Config, any>

export type React_ElementType = string | React_Component<any, any>

-- This was reverse engineered from usage, no specific flowtype or TS artifact
export type React_ElementProps<ElementType> = {
	ref: React_Ref<ElementType>?,
	key: React_Key?,
	__source: Source?,
	children: any?,
}

-- deviation: this is a built-in flow type, and very complex. we fudge this with `any`
-- type ElementRef<
--   C extends keyof JSX.IntrinsicElements
--   | React.ForwardRefExoticComponent<any>
--   | (new (props: any) -> React.Component<any, {}, any>)
--   | ((props: any, context?: any) -> ReactElement | null)
--   > = "ref" extends keyof ComponentPropsWithRef<C>
--     ? NonNullable<ComponentPropsWithRef<C>["ref"]> extends Ref<infer Instance>
--       ? Instance
--       : never
--     : never

-- TODO: Not sure how to model this, upstream: https://github.com/facebook/flow/blob/main/tests/react_instance/class.js#L10
-- FIXME Luau: if I make this Object, we run into normalization issues: '{| current: React_ElementRef<any>? |}' could not be converted into '(((?) -> any) | {| current: ? |})?
export type React_ElementRef<C> = C

export type React_Ref<ElementType> =
	{ current: React_ElementRef<ElementType> | nil }
	| ((React_ElementRef<ElementType> | nil) -> ())
-- deviation: we don't support string refs, and this is unsound flowtype when used with ref param of useImperativeHandle
-- | string

export type React_Context<T> = {
	Provider: React_ComponentType<{ value: T, children: React_Node? }>,
	Consumer: React_ComponentType<{ children: (value: T) -> React_Node? }>,
}

-- TODO: declared as an opaque type in flowtype: https://github.com/facebook/flow/blob/422821fd42c09c3ef609c60516fe754b601ea205/lib/react.js#L182
export type React_Portal = any
export type React_Key = string | number

return {}
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="554">
              <Properties>
                <string name="Name">formatProdErrorMessage</string>
                <string name="Source"><![CDATA[-- upstream: https://github.com/facebook/react/blob/75955bf1d7ff6c2c1f4052f4a84dd2ce6944c62e/packages/shared/formatProdErrorMessage.js
--!strict
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 ]]

-- Do not require this module directly! Use normal `invariant` calls with
-- template literal strings. The messages will be replaced with error codes
-- during build.

local HttpService = game:GetService("HttpService")

local function formatProdErrorMessage(code, ...)
	local url = "https://reactjs.org/docs/error-decoder.html?invariant=" .. tostring(code)
	local argsLength = select("#", ...)
	for i = 1, argsLength, 1 do
		-- deviation: UrlEncode should be equivalent to encodeURIComponent
		url = url .. "&args[]=" .. HttpService:UrlEncode(select(i, ...))
	end
	return string.format(
		"Minified React error #%d; visit %s for the full message or "
			.. "use the non-minified dev environment for full errors and additional "
			.. "helpful warnings.",
		code,
		url
	)
end

return formatProdErrorMessage
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="555">
              <Properties>
                <string name="Name">getComponentName</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/a774502e0ff2a82e3c0a3102534dbc3f1406e5ea/packages/shared/getComponentName.js
--[[*
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*
* @flow
]]
type Function = (...any) -> ...any
local console = require(script.Parent.console)

-- deviation: inline this typedef to avoid upstream's circular dependency
type LazyComponent<T, P> = {
	["$$typeof"]: number,
	_payload: P,
	_init: (payload: P) -> T,
}

local ReactSymbols = require(script.Parent.ReactSymbols)
local REACT_CONTEXT_TYPE = ReactSymbols.REACT_CONTEXT_TYPE
local REACT_FORWARD_REF_TYPE = ReactSymbols.REACT_FORWARD_REF_TYPE
local REACT_FRAGMENT_TYPE = ReactSymbols.REACT_FRAGMENT_TYPE
local REACT_PORTAL_TYPE = ReactSymbols.REACT_PORTAL_TYPE
local REACT_MEMO_TYPE = ReactSymbols.REACT_MEMO_TYPE
local REACT_PROFILER_TYPE = ReactSymbols.REACT_PROFILER_TYPE
local REACT_PROVIDER_TYPE = ReactSymbols.REACT_PROVIDER_TYPE
local REACT_STRICT_MODE_TYPE = ReactSymbols.REACT_STRICT_MODE_TYPE
local REACT_SUSPENSE_TYPE = ReactSymbols.REACT_SUSPENSE_TYPE
local REACT_SUSPENSE_LIST_TYPE = ReactSymbols.REACT_SUSPENSE_LIST_TYPE
local REACT_LAZY_TYPE = ReactSymbols.REACT_LAZY_TYPE
local REACT_BLOCK_TYPE = ReactSymbols.REACT_BLOCK_TYPE
local ReactTypes = require(script.Parent.ReactTypes)
type ReactContext<T> = ReactTypes.ReactContext<T>
type ReactProviderType<T> = ReactTypes.ReactProviderType<T>

local describeError = require(script.Parent["ErrorHandling.roblox"]).describeError

local function getWrappedName(outerType: any, innerType: any, wrapperName: string): string
	-- deviation: Account for indexing into function
	local functionName = "<function>"
	if typeof(innerType) == "table" then
		functionName = innerType.displayName or innerType.name or ""
	end
	return outerType.displayName
		or (functionName ~= "" and string.format("%s(%s)", wrapperName, functionName) or wrapperName)
end

local function getContextName(type: ReactContext<any>): string
	return type.displayName or "Context"
end

local function getComponentName(type: any): string | nil
	if type == nil then
		-- Host root, text node or just invalid type.
		return nil
	end
	local typeofType = typeof(type)

	if _G.__DEV__ then
		if typeofType == "table" and typeof(type.tag) == "number" then
			console.warn(
				"Received an unexpected object in getComponentName(). "
					.. "This is likely a bug in React. Please file an issue."
			)
		end
	end

	if typeofType == "function" then
		-- deviation: we can't deref functions in Lua, so get the name of the function and move logic to table section
		-- FIXME Luau: this line gets a bunch of bizarre errors in strict mode
		local name = debug.info((type :: any) :: Function, "n")
		-- deviation:when name = (null) we want it to be treated as nil, not as an empty (truthy) string
		if name and string.len(name) > 0 then
			return name
		else
			return nil
		end
	end

	if typeofType == "string" then
		return (type :: any) :: string
	end

	if type == REACT_FRAGMENT_TYPE then
		return "Fragment"
	elseif type == REACT_PORTAL_TYPE then
		return "Portal"
	elseif type == REACT_PROFILER_TYPE then
		return "Profiler"
	elseif type == REACT_STRICT_MODE_TYPE then
		return "StrictMode"
	elseif type == REACT_SUSPENSE_TYPE then
		return "Suspense"
	elseif type == REACT_SUSPENSE_LIST_TYPE then
		return "SuspenseList"
	end

	if typeofType == "table" then
		local typeProp = type["$$typeof"]
		if typeProp == REACT_CONTEXT_TYPE then
			local context: ReactContext<any> = type :: any
			return getContextName(context) .. ".Consumer"
		elseif typeProp == REACT_PROVIDER_TYPE then
			local provider: ReactProviderType<any> = type :: any
			return getContextName(provider._context) .. ".Provider"
		elseif typeProp == REACT_FORWARD_REF_TYPE then
			return getWrappedName(type, type.render, "ForwardRef")
		elseif typeProp == REACT_MEMO_TYPE then
			return getComponentName(type.type)
		elseif typeProp == REACT_BLOCK_TYPE then
			return getComponentName(type._render)
		elseif typeProp == REACT_LAZY_TYPE then
			local lazyComponent: LazyComponent<any, any> = type :: any
			local payload = lazyComponent._payload
			local init = lazyComponent._init

			-- performance: getComponentName won't throw, but init() might, extract it out to eliminate an anon function
			local ok, result = xpcall(init, describeError, payload)
			if ok then
				return getComponentName(result)
			else
				return nil
			end
		else
			-- deviation: Normally, the `typeofType == "function"` check would
			-- cover this case, but in Lua, class components are tables. We need
			-- to check for that here and use the name the component was
			-- assigned.
			if type.displayName then
				return type.displayName
			end
			if type.name then
				return type.name
			end
			-- NOTE: only use tostring() if its overridden to avoid "table: 0xabcd9012"
			local mt = getmetatable(type)
			if mt and rawget(mt, "__tostring") then
				return tostring(type)
			end
		end
	end

	return nil
end

return getComponentName
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="556">
              <Properties>
                <string name="Name">invariant</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/42c3c967d1e4ca4731b47866f2090bc34caa086c/packages/shared/invariant.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
]]

--[[*
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
]]
local Packages = script.Parent.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)
local Error = LuauPolyfill.Error

local function invariant(condition, format, ...)
	-- TODO: we should encapsulate all formatting compatibility here,
	-- rather than spreading workarounds throughout the codebase, eg this
	-- should print an array without the need for a table.concat on the consumer side
	if not condition then
		error(Error(string.format(format, ...)))
	end
end

return invariant
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="557">
              <Properties>
                <string name="Name">invokeGuardedCallbackImpl</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/702fad4b1b48ac8f626ed3f35e8f86f5ea728084/packages/shared/invokeGuardedCallbackImpl.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
 ]]
-- local invariant = require(script.Parent.invariant)
local describeError = require(script.Parent["ErrorHandling.roblox"]).describeError

-- deviation: with flow types stripped, it's easier to use varargs directly
local function invokeGuardedCallbackProd(reporter, name, func, context, ...)
	-- local funcArgs = Array.prototype.slice.call(arguments, 3)

	-- deviation: YOLO flag for disabling pcall
	local ok, result
	if not _G.__YOLO__ then
		-- deviation: Since functions in lua _explicitly_ accept 'self' as a
		-- first argument when they use it, it becomes incorrect for us to call
		-- a function with a nil "context", where context in this case is
		-- analogous to the implicit `self` that we get with a `:` call
		if context == nil then
			ok, result = xpcall(func, describeError, ...)
		else
			ok, result = xpcall(func, describeError, context, ...)
		end
	else
		ok = true
		if context == nil then
			func(...)
		else
			func(context, ...)
		end
	end

	if not ok then
		-- deviation: functions have no notion of "this"/"self", so we expect
		-- the first argument to be the reporter itself, in conjunction with
		-- deviations in `ReactErrorUtils`
		reporter.onError(result)
	end
end

local invokeGuardedCallbackImpl = invokeGuardedCallbackProd

if _G.__DEV__ then
	-- In DEV mode, we swap out invokeGuardedCallback for a special version
	-- that plays more nicely with the browser's DevTools. The idea is to preserve
	-- "Pause on exceptions" behavior. Because React wraps all user-provided
	-- functions in invokeGuardedCallback, and the production version of
	-- invokeGuardedCallback uses a try-catch, all user exceptions are treated
	-- like caught exceptions, and the DevTools won't pause unless the developer
	-- takes the extra step of enabling pause on caught exceptions. This is
	-- unintuitive, though, because even though React has caught the error, from
	-- the developer's perspective, the error is uncaught.
	--
	-- To preserve the expected "Pause on exceptions" behavior, we don't use a
	-- try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
	-- DOM node, and call the user-provided callback from inside an event handler
	-- for that fake event. If the callback throws, the error is "captured" using
	-- a global event handler. But because the error happens in a different
	-- event loop context, it does not interrupt the normal program flow.
	-- Effectively, this gives us try-catch behavior without actually using
	-- try-catch. Neat!
	-- Check that the browser supports the APIs we need to implement our special
	-- DEV version of invokeGuardedCallback

	-- deviation: `window` is not defined in our environment
	-- deviation: FIXME: should we define our own impl for invokeGuardedCallbackDev?
	--[[
	if typeof window ~= 'undefined' and typeof window.dispatchEvent == 'function' and typeof document ~= 'undefined' and typeof document.createEvent == 'function' then
		local fakeNode = document.createElement('react')

		invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
			-- If document doesn't exist we know for sure we will crash in this method
			-- when we call document.createEvent(). However this can cause confusing
			-- errors: https://github.com/facebookincubator/create-react-app/issues/3482
			-- So we preemptively throw with a better message instead.
			invariant(typeof document ~= 'undefined', 'The `document` global was defined when React was initialized, but is not ' + 'defined anymore. This can happen in a test environment if a component ' + 'schedules an update from an asynchronous callback, but the test has already ' + 'finished running. To solve this, you can either unmount the component at ' + 'the end of your test (and ensure that any asynchronous operations get ' + 'canceled in `componentWillUnmount`), or you can change the test itself ' + 'to be asynchronous.')
			local evt = document.createEvent('Event')
			local didCall = false; -- Keeps track of whether the user-provided callback threw an error. We
			-- set this to true at the beginning, then set it to false right after
			-- calling the function. If the function errors, `didError` will never be
			-- set to false. This strategy works even if the browser is flaky and
			-- fails to call our global error handler, because it doesn't rely on
			-- the error event at all.

			local didError = true; -- Keeps track of the value of window.event so that we can reset it
			-- during the callback to local user code access window.event in the
			-- browsers that support it.

			local windowEvent = window.event; -- Keeps track of the descriptor of window.event to restore it after event
			-- dispatching: https://github.com/facebook/react/issues/13688

			local windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event')

			function restoreAfterDispatch() {
				-- We immediately remove the callback from event listeners so that
				-- nested `invokeGuardedCallback` calls do not clash. Otherwise, a
				-- nested call would trigger the fake event handlers of any call higher
				-- in the stack.
				fakeNode.removeEventListener(evtType, callCallback, false); -- We check for window.hasOwnProperty('event') to prevent the
				-- window.event assignment in both IE <= 10 as they throw an error
				-- "Member not found" in strict mode, and in Firefox which does not
				-- support window.event.

				if typeof window.event ~= 'undefined' and window.hasOwnProperty('event') then
					window.event = windowEvent
				}
			} -- Create an event handler for our fake event. We will synchronously
			-- dispatch our fake event using `dispatchEvent`. Inside the handler, we
			-- call the user-provided callback.


			local funcArgs = Array.prototype.slice.call(arguments, 3)

			function callCallback() {
				didCall = true
				restoreAfterDispatch()
				func.apply(context, funcArgs)
				didError = false
			} -- Create a global error event handler. We use this to capture the value
			-- that was thrown. It's possible that this error handler will fire more
			-- than once; for example, if non-React code also calls `dispatchEvent`
			-- and a handler for that event throws. We should be resilient to most of
			-- those cases. Even if our error event handler fires more than once, the
			-- last error event is always used. If the callback actually does error,
			-- we know that the last error event is the correct one, because it's not
			-- possible for anything else to have happened in between our callback
			-- erroring and the code that follows the `dispatchEvent` call below. If
			-- the callback doesn't error, but the error event was fired, we know to
			-- ignore it because `didError` will be false, as described above.


			local error; -- Use this to track whether the error event is ever called.

			local didSetError = false
			local isCrossOriginError = false

			function handleWindowError(event) {
				error = event.error
				didSetError = true

				if error == nil and event.colno == 0 and event.lineno == 0 then
					isCrossOriginError = true
				}

				if event.defaultPrevented then
					-- Some other error handler has prevented default.
					-- Browsers silence the error report if this happens.
					-- We'll remember this to later decide whether to log it or not.
					if error ~= nil and typeof error == 'object' then
						try {
							error._suppressLogging = true
						} catch (inner) {-- Ignore.
						}
					}
				}
			} -- Create a fake event type.


			local evtType = `react-${function () {
				if name then
					return name
				}

				return 'invokeguardedcallback'
			}()}`; -- Attach our event handlers

			window.addEventListener('error', handleWindowError)
			fakeNode.addEventListener(evtType, callCallback, false); -- Synchronously dispatch our fake event. If the user-provided function
			-- errors, it will trigger our global error handler.

			evt.initEvent(evtType, false, false)
			fakeNode.dispatchEvent(evt)

			if windowEventDescriptor then
				Object.defineProperty(window, 'event', windowEventDescriptor)
			}

			if didCall and didError then
				if !didSetError then
					-- The callback errored, but the error event never fired.
					error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.')
				} else if isCrossOriginError then
					error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.')
				}

				this.onError(error)
			} -- Remove our event listeners


			window.removeEventListener('error', handleWindowError)

			if !didCall then
				-- Something went really wrong, and our event was not dispatched.
				-- https://github.com/facebook/react/issues/16734
				-- https://github.com/facebook/react/issues/16585
				-- Fall back to the production implementation.
				restoreAfterDispatch()
				return invokeGuardedCallbackProd.apply(this, arguments)
			}
		}
	}
]]
end

return invokeGuardedCallbackImpl
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="558">
              <Properties>
                <string name="Name">isValidElementType</string>
                <string name="Source"><![CDATA[-- upstream: https://github.com/facebook/react/blob/b61174fb7b09580c1ec2a8f55e73204b706d2935/packages/shared/isValidElementType.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 ]]
local ReactSymbols = require(script.Parent.ReactSymbols)
local REACT_CONTEXT_TYPE = ReactSymbols.REACT_CONTEXT_TYPE
local REACT_FORWARD_REF_TYPE = ReactSymbols.REACT_FORWARD_REF_TYPE
local REACT_FRAGMENT_TYPE = ReactSymbols.REACT_FRAGMENT_TYPE
local REACT_PROFILER_TYPE = ReactSymbols.REACT_PROFILER_TYPE
local REACT_PROVIDER_TYPE = ReactSymbols.REACT_PROVIDER_TYPE
local REACT_DEBUG_TRACING_MODE_TYPE = ReactSymbols.REACT_DEBUG_TRACING_MODE_TYPE
local REACT_STRICT_MODE_TYPE = ReactSymbols.REACT_STRICT_MODE_TYPE
local REACT_SUSPENSE_TYPE = ReactSymbols.REACT_SUSPENSE_TYPE
-- local REACT_SUSPENSE_LIST_TYPE = ReactSymbols.REACT_SUSPENSE_LIST_TYPE
local REACT_MEMO_TYPE = ReactSymbols.REACT_MEMO_TYPE
local REACT_LAZY_TYPE = ReactSymbols.REACT_LAZY_TYPE
local REACT_FUNDAMENTAL_TYPE = ReactSymbols.REACT_FUNDAMENTAL_TYPE
-- local REACT_SCOPE_TYPE = ReactSymbols.REACT_SCOPE_TYPE
local REACT_BLOCK_TYPE = ReactSymbols.REACT_BLOCK_TYPE
local REACT_SERVER_BLOCK_TYPE = ReactSymbols.REACT_SERVER_BLOCK_TYPE
local REACT_LEGACY_HIDDEN_TYPE = ReactSymbols.REACT_LEGACY_HIDDEN_TYPE

-- local ReactFeatureFlags = require(script.Parent.ReactFeatureFlags)
-- local enableScopeAPI = ReactFeatureFlags.enableScopeAPI

return function(type)
	local typeofType = typeof(type)
	if typeofType == "string" or typeofType == "function" then
		return true
	end

	-- NOTE: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).
	if
		type == REACT_FRAGMENT_TYPE
		or type == REACT_PROFILER_TYPE
		or type == REACT_DEBUG_TRACING_MODE_TYPE
		or type == REACT_STRICT_MODE_TYPE
		or type == REACT_SUSPENSE_TYPE
		or type == REACT_LEGACY_HIDDEN_TYPE
		-- performance: eliminate compares that will only be true in React 18
		-- or type == REACT_SUSPENSE_LIST_TYPE
		-- or (enableScopeAPI and type == REACT_SCOPE_TYPE)
	then
		return true
	end

	if typeofType == "table" then
		-- deviation: In React, component classes are of type 'function'; for
		-- us, they're tables with a special value on their metatable
		if type.isReactComponent then
			return true
		end

		if
			type["$$typeof"] == REACT_LAZY_TYPE
			or type["$$typeof"] == REACT_MEMO_TYPE
			or type["$$typeof"] == REACT_PROVIDER_TYPE
			or type["$$typeof"] == REACT_CONTEXT_TYPE
			or type["$$typeof"] == REACT_FORWARD_REF_TYPE
			or type["$$typeof"] == REACT_FUNDAMENTAL_TYPE
			or type["$$typeof"] == REACT_BLOCK_TYPE
			or type[1] == REACT_SERVER_BLOCK_TYPE
		then
			return true
		end
	end

	return false
end
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="559">
              <Properties>
                <string name="Name">objectIs</string>
                <string name="Source"><![CDATA[--!strict
-- upstream: https://github.com/facebook/react/blob/6faf6f5eb1705eef39a1d762d6ee381930f36775/packages/shared/objectIs.js
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
 ]]

--[[*
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 ]]
local function is(x: any, y: any): boolean
	return x == y and (x ~= 0 or 1 / x == 1 / y) or x ~= x and y ~= y -- eslint-disable-line no-self-compare
end

-- deviation: Object isn't a global in lua, so `Object.is` will never exist
local objectIs = is

return objectIs
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="560">
              <Properties>
                <string name="Name">shallowEqual</string>
                <string name="Source"><![CDATA[-- upstream: https://github.com/facebook/react/blob/a9b035b0c2b8235405835beca0c4db2cc37f18d0/packages/shared/shallowEqual.js
--!strict
--[[*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
]]
local is = require(script.Parent.objectIs)

--[[*
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
]]
local function shallowEqual(objA, objB)
	if is(objA, objB) then
		return true
	end

	if typeof(objA) ~= "table" or objA == nil or typeof(objB) ~= "table" or objB == nil then
		return false
	end

	-- deviation: `Object.keys` does not have an equivalent in Lua, so we
	-- iterate through each table instead
	for key, value in objA do
		if not is(objB[key], value) then
			return false
		end
	end

	for key, value in objB do
		if not is(objA[key], value) then
			return false
		end
	end

	return true
end

return shallowEqual
]]></string>
              </Properties>
            </Item>
          </Item>
          <Item class="ModuleScript" referent="561">
            <Properties>
              <string name="Name">signal</string>
              <string name="Source"><![CDATA[local Signal = {}
Signal.__index = Signal

function Signal.new()
	return setmetatable({
		Bindable = Instance.new("BindableEvent");
	}, Signal)
end

function Signal:Connect(Callback)
	return self.Bindable.Event:Connect(function(GetArguments)
		Callback(GetArguments())
	end)
end

function Signal:Fire(...)
	local Arguments = { ... }
	local n = select("#", ...)

	self.Bindable:Fire(function()
		return table.unpack(Arguments, 1, n)
	end)
end

function Signal:Wait()
	return self.Bindable.Event:Wait()()
end

function Signal:Destroy()
	self.Bindable:Destroy()
end

return Signal
]]></string>
            </Properties>
          </Item>
          <Item class="Folder" referent="562">
            <Properties>
              <string name="Name">snapdragon</string>
            </Properties>
            <Item class="ModuleScript" referent="563">
              <Properties>
                <string name="Name">src</string>
                <string name="Source">local SnapdragonController = require(script.SnapdragonController)
local SnapdragonRef = require(script.SnapdragonRef)

local function createDragController(...)
	return SnapdragonController.new(...)
end

local function createRef(gui)
	return SnapdragonRef.new(gui)
end

local export
export = {
	createDragController = createDragController, 
	SnapdragonController = SnapdragonController,
	createRef = createRef
}
-- roblox-ts `default` support
export.default = export
return export</string>
              </Properties>
              <Item class="ModuleScript" referent="564">
                <Properties>
                  <string name="Name">Maid</string>
                  <string name="Source">-- Manages the cleaning of events and other things.
-- Useful for encapsulating state and make deconstructors easy
-- @classmod Maid
-- @see Signal

local Maid = {}
Maid.ClassName = "Maid"

--- Returns a new Maid object
-- @constructor Maid.new()
-- @treturn Maid
function Maid.new()
	local self = {}

	self._tasks = {}

	return setmetatable(self, Maid)
end

--- Returns Maid[key] if not part of Maid metatable
-- @return Maid[key] value
function Maid:__index(index)
	if Maid[index] then
		return Maid[index]
	else
		return self._tasks[index]
	end
end

--- Add a task to clean up
-- @usage
-- Maid[key] = (function)         Adds a task to perform
-- Maid[key] = (event connection) Manages an event connection
-- Maid[key] = (Maid)             Maids can act as an event connection, allowing a Maid to have other maids to clean up.
-- Maid[key] = (Object)           Maids can cleanup objects with a `Destroy` method
-- Maid[key] = nil                Removes a named task. If the task is an event, it is disconnected. If it is an object,
--                                it is destroyed.
function Maid:__newindex(index, newTask)
	if Maid[index] ~= nil then
		error(("'%s' is reserved"):format(tostring(index)), 2)
	end

	local tasks = self._tasks
	local oldTask = tasks[index]
	tasks[index] = newTask

	if oldTask then
		if type(oldTask) == "function" then
			oldTask()
		elseif typeof(oldTask) == "RBXScriptConnection" then
			oldTask:Disconnect()
		elseif oldTask.Destroy then
			oldTask:Destroy()
		end
	end
end

--- Same as indexing, but uses an incremented number as a key.
-- @param task An item to clean
-- @treturn number taskId
function Maid:GiveTask(task)
	assert(task, "Task cannot be false or nil")

	local taskId = #self._tasks+1
	self[taskId] = task

	if type(task) == "table" and (not task.Destroy) then
		warn("[Maid.GiveTask] - Gave table task without .Destroy\n\n" .. debug.traceback())
	end

	return taskId
end

function Maid:GivePromise(promise)
	if not promise:IsPending() then
		return promise
	end

	local newPromise = promise.resolved(promise)
	local id = self:GiveTask(newPromise)

	-- Ensure GC
	newPromise:Finally(function()
		self[id] = nil
	end)

	return newPromise
end

--- Cleans up all tasks.
-- @alias Destroy
function Maid:DoCleaning()
	local tasks = self._tasks

	-- Disconnect all events first as we know this is safe
	for index, task in pairs(tasks) do
		if typeof(task) == "RBXScriptConnection" then
			tasks[index] = nil
			task:Disconnect()
		end
	end

	-- Clear out tasks table completely, even if clean up tasks add more tasks to the maid
	local index, task = next(tasks)
	while task ~= nil do
		tasks[index] = nil
		if type(task) == "function" then
			task()
		elseif typeof(task) == "RBXScriptConnection" then
			task:Disconnect()
		elseif task.Destroy then
			task:Destroy()
		end
		index, task = next(tasks)
	end
end

--- Alias for DoCleaning()
-- @function Destroy
Maid.Destroy = Maid.DoCleaning

return Maid</string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="565">
                <Properties>
                  <string name="Name">Signal</string>
                  <string name="Source"><![CDATA[local Signal = {}
Signal.__index = Signal

function Signal.new()
	return setmetatable({
		Bindable = Instance.new("BindableEvent");
	}, Signal)
end

function Signal:Connect(Callback)
	return self.Bindable.Event:Connect(function(GetArgumentStack)
		Callback(GetArgumentStack())
	end)
end

function Signal:Fire(...)
	local Arguments = { ... }
	local n = select("#", ...)

	self.Bindable:Fire(function()
		return unpack(Arguments, 1, n)
	end)
end

function Signal:Wait()
	return self.Bindable.Event:Wait()()
end

function Signal:Destroy()
	self.Bindable:Destroy()
end

return Signal
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="566">
                <Properties>
                  <string name="Name">SnapdragonController</string>
                  <string name="Source">local UserInputService = game:GetService("UserInputService")

local objectAssign = require(script.Parent.objectAssign)
local Signal = require(script.Parent.Signal)
local SnapdragonRef = require(script.Parent.SnapdragonRef)
local t = require(script.Parent.t)
local Maid = require(script.Parent.Maid)

local MarginTypeCheck = t.interface({
	Vertical = t.optional(t.Vector2),
	Horizontal = t.optional(t.Vector2),
})

local AxisEnumCheck = t.literal("XY", "X", "Y")
local DragRelativeToEnumCheck = t.literal("LayerCollector", "Parent")
local DragPositionModeEnumCheck = t.literal("Offset", "Scale")

local OptionsInterfaceCheck = t.interface({
	DragGui = t.union(t.instanceIsA("GuiObject"), SnapdragonRef.is),
	DragThreshold = t.number,
	DragGridSize = t.number,
	SnapMargin = MarginTypeCheck,
	SnapMarginThreshold = MarginTypeCheck,
	SnapAxis = AxisEnumCheck,
	DragAxis = AxisEnumCheck,
	DragRelativeTo = DragRelativeToEnumCheck,
	SnapEnabled = t.boolean,
	Debugging = t.boolean,
	DragPositionMode = DragPositionModeEnumCheck,
})

local SnapdragonController = {}
SnapdragonController.__index = SnapdragonController

local controllers = setmetatable({}, {__mode = "k"})

function SnapdragonController.new(gui, options)
	options = objectAssign({
		DragGui = gui,
		DragThreshold = 0,
		DragGridSize = 0,
		SnapMargin = {},
		SnapMarginThreshold = {},
		SnapEnabled = true,
		DragEndedResetsPosition = false,
		SnapAxis = "XY",
		DragAxis = "XY",
		Debugging = false,
		DragRelativeTo = "LayerCollector",
		DragPositionMode = "Scale",
	}, options)

	assert(OptionsInterfaceCheck(options))

	local self = setmetatable({}, SnapdragonController)
	-- Basic immutable values
	local dragGui = options.DragGui
	self.dragGui = dragGui
	self.gui = gui
	self.debug = options.Debugging
	self.originPosition = dragGui.Position
	self.canDrag = options.CanDrag
	self.dragEndedResetsPosition = options.DragEndedResetsPosition

	self.snapEnabled = options.SnapEnabled
	self.snapAxis = options.SnapAxis

	self.dragAxis = options.DragAxis
	self.dragThreshold = options.DragThreshold
	self.dragRelativeTo = options.DragRelativeTo
	self.dragGridSize = options.DragGridSize
	self.dragPositionMode = options.DragPositionMode

	-- Internal stuff
	self._useAbsoluteCoordinates = false

	-- Events
	local DragEnded = Signal.new()
	local DragChanged = Signal.new()
	local DragBegan = Signal.new()
	self.DragEnded = DragEnded
	self.DragBegan = DragBegan
	self.DragChanged = DragChanged

	-- Advanced stuff
	self.maid = Maid.new()
	self:SetSnapEnabled(options.SnapEnabled)
	self:SetSnapMargin(options.SnapMargin)
	self:SetSnapThreshold(options.SnapMarginThreshold)

	return self
end

function SnapdragonController:SetSnapEnabled(snapEnabled)
	assert(t.boolean(snapEnabled))
	self.snapEnabled = snapEnabled
end

function SnapdragonController:SetSnapMargin(snapMargin)
	assert(MarginTypeCheck(snapMargin))
	local snapVerticalMargin = snapMargin.Vertical or Vector2.new()
	local snapHorizontalMargin = snapMargin.Horizontal or Vector2.new()
	self.snapVerticalMargin = snapVerticalMargin
	self.snapHorizontalMargin = snapHorizontalMargin
end

function SnapdragonController:SetSnapThreshold(snapThreshold)
	assert(MarginTypeCheck(snapThreshold))
	local snapThresholdVertical = snapThreshold.Vertical or Vector2.new()
	local snapThresholdHorizontal = snapThreshold.Horizontal or Vector2.new()
	self.snapThresholdVertical = snapThresholdVertical
	self.snapThresholdHorizontal = snapThresholdHorizontal
end

function SnapdragonController:GetDragGui()
	local gui = self.dragGui
	if SnapdragonRef.is(gui) then
		return gui:Get(), gui
	else
		return gui, gui
	end
end

function SnapdragonController:GetGui()
	local gui = self.gui
	if SnapdragonRef.is(gui) then
		return gui:Get()
	else
		return gui
	end
end

function SnapdragonController:ResetPosition()
	self.dragGui.Position = self.originPosition
end

function SnapdragonController:__bindControllerBehaviour()
	local maid = self.maid
	local debug = self.debug

	local gui = self:GetGui()
	local dragGui = self:GetDragGui()
	local snap = self.snapEnabled
	local DragEnded = self.DragEnded
	local DragBegan = self.DragBegan
	local DragChanged = self.DragChanged
	local snapAxis = self.snapAxis
	local dragAxis = self.dragAxis
	local dragRelativeTo = self.dragRelativeTo
	local dragGridSize = self.dragGridSize
	local dragPositionMode = self.dragPositionMode

	local useAbsoluteCoordinates = self._useAbsoluteCoordinates;

	local reachedExtents

	local dragging
	local dragInput
	local dragStart
	local startPos
	local guiStartPos


	local function update(input)
		local snapHorizontalMargin = self.snapHorizontalMargin
		local snapVerticalMargin = self.snapVerticalMargin
		local snapThresholdVertical = self.snapThresholdVertical
		local snapThresholdHorizontal = self.snapThresholdHorizontal

		local screenSize = workspace.CurrentCamera.ViewportSize
		local delta = input.Position - dragStart

		if dragAxis == "X" then
			delta = Vector3.new(delta.X, 0, 0)
		elseif dragAxis == "Y" then
			delta = Vector3.new(0, delta.Y, 0)
		end

		gui = dragGui or gui
		reachedExtents = {
			X = "Float",
			Y = "Float"
		}

		local host = gui:FindFirstAncestorOfClass("ScreenGui") or gui:FindFirstAncestorOfClass("PluginGui")
		local topLeft = Vector2.new()
		if host and dragRelativeTo == "LayerCollector" then
			screenSize = host.AbsoluteSize
		elseif dragRelativeTo == "Parent" then
			assert(gui.Parent:IsA("GuiObject"), "DragRelativeTo is set to Parent, but the parent is not a GuiObject!")
			screenSize = gui.Parent.AbsoluteSize
		end

		if snap then
			local scaleOffsetX = screenSize.X * startPos.X.Scale
			local scaleOffsetY = screenSize.Y * startPos.Y.Scale
			local resultingOffsetX = startPos.X.Offset + delta.X
			local resultingOffsetY = startPos.Y.Offset + delta.Y
			local absSize = gui.AbsoluteSize + Vector2.new(snapHorizontalMargin.Y, snapVerticalMargin.Y + topLeft.Y)

			local anchorOffset = Vector2.new(
				gui.AbsoluteSize.X * gui.AnchorPoint.X,
				gui.AbsoluteSize.Y * gui.AnchorPoint.Y
			)

			if snapAxis == "XY" or snapAxis == "X" then
				local computedMinX = snapHorizontalMargin.X + anchorOffset.X
				local computedMaxX = screenSize.X - absSize.X + anchorOffset.X

				if (resultingOffsetX + scaleOffsetX) > computedMaxX - snapThresholdHorizontal.Y then
					resultingOffsetX = computedMaxX - scaleOffsetX
					reachedExtents.X = "Max"
				elseif (resultingOffsetX + scaleOffsetX) &lt; computedMinX + snapThresholdHorizontal.X then
					resultingOffsetX = -scaleOffsetX + computedMinX
					reachedExtents.X =  "Min"
				end
			end

			if snapAxis == "XY" or snapAxis == "Y" then
				local computedMinY = snapVerticalMargin.X + anchorOffset.Y
				local computedMaxY = screenSize.Y - absSize.Y + anchorOffset.Y

				if (resultingOffsetY + scaleOffsetY) > computedMaxY - snapThresholdVertical.Y then
					resultingOffsetY = computedMaxY - scaleOffsetY
					reachedExtents.Y = "Max"
				elseif (resultingOffsetY + scaleOffsetY) &lt; computedMinY + snapThresholdVertical.X then
					resultingOffsetY = -scaleOffsetY + computedMinY
					reachedExtents.Y = "Min"
				end
			end

			if dragGridSize > 0 then
				resultingOffsetX = math.floor(resultingOffsetX / dragGridSize) * dragGridSize
				resultingOffsetY = math.floor(resultingOffsetY / dragGridSize) * dragGridSize
			end

			if dragPositionMode == "Offset" then
				local newPosition = UDim2.new(
					startPos.X.Scale, resultingOffsetX,
					startPos.Y.Scale, resultingOffsetY
				)

				gui.Position = newPosition

				DragChanged:Fire({
					GuiPosition = newPosition
				})
			else
				local newPosition = UDim2.new(
					startPos.X.Scale + (resultingOffsetX / screenSize.X),
					0,
					startPos.Y.Scale + (resultingOffsetY / screenSize.Y),
					0
				)

				gui.Position = newPosition

				DragChanged:Fire({
					SnapAxis = snapAxis,
					GuiPosition = newPosition,
					DragPositionMode = dragPositionMode,
				})
			end
		else
			if dragGridSize > 0 then
				delta = Vector2.new(
					math.floor(delta.X / dragGridSize) * dragGridSize,
					math.floor(delta.Y / dragGridSize) * dragGridSize
				)
			end

			local newPosition = UDim2.new(
				startPos.X.Scale,
				startPos.X.Offset + delta.X,
				startPos.Y.Scale,
				startPos.Y.Offset + delta.Y
			)
			gui.Position = newPosition
			DragChanged:Fire({
				GuiPosition = newPosition
			})
		end
	end

	maid.guiInputBegan = gui.InputBegan:Connect(
		function(input)
			local canDrag = true
			if type(self.canDrag) == "function" then
				canDrag = self.canDrag()
			end

			if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and canDrag then
				dragging = true
				dragStart = input.Position
				local draggingGui = (dragGui or gui)
				startPos = useAbsoluteCoordinates
					and UDim2.new(0, draggingGui.AbsolutePosition.X, 0, draggingGui.AbsolutePosition.Y)
					or draggingGui.Position
				guiStartPos = draggingGui.Position
				DragBegan:Fire({
					AbsolutePosition = (dragGui or gui).AbsolutePosition,
					InputPosition = dragStart,
					GuiPosition = startPos
				})
				if debug then
					print("[snapdragon]", "Drag began", input.Position)
				end
			end
		end
	)

	maid.guiInputEnded = gui.InputEnded:Connect(function(input)
		if dragging and input.UserInputState == Enum.UserInputState.End and (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then
			dragging = false

			local draggingGui = (dragGui or gui)
			local endPos = draggingGui.Position --useAbsoluteCoordinates
				--and UDim2.new(0, draggingGui.AbsolutePosition.X, 0, draggingGui.AbsolutePosition.Y)
				--or draggingGui.Position

			DragEnded:Fire({
				InputPosition = input.Position,
				GuiPosition = endPos,
				ReachedExtents = reachedExtents,
				DraggedGui = dragGui or gui,
			})
			if debug then
				print("[snapdragon]", "Drag ended", input.Position)
			end

			-- Enable the ability to "reset" the position automatically.
			-- This will be used for stuff like roact-dnd
			local dragEndedResetsPosition = self.dragEndedResetsPosition
			if dragEndedResetsPosition then
				draggingGui.Position = guiStartPos
			end
		end
	end)

	maid.guiInputChanged = gui.InputChanged:Connect(
		function(input)
			if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
				dragInput = input
			end
		end
	)

	maid.uisInputChanged = UserInputService.InputChanged:Connect(
		function(input)
			if input == dragInput and dragging then
				update(input)
			end
		end
	)
end

function SnapdragonController:Connect()
	if self.locked then
		error("[SnapdragonController] Cannot connect locked controller!", 2)
	end

	local _, ref = self:GetDragGui()

	if not controllers[ref] or controllers[ref] == self then
		controllers[ref] = self
		self:__bindControllerBehaviour()
	else
		error("[SnapdragonController] This object is already bound to a controller")
	end
	return self
end

function SnapdragonController:Disconnect()
	if self.locked then
		error("[SnapdragonController] Cannot disconnect locked controller!", 2)
	end

	local _, ref = self:GetDragGui()

	local controller = controllers[ref]
	if controller then
		self.maid:DoCleaning()
		controllers[ref] = nil
	end
end

function SnapdragonController:Destroy()
	self:Disconnect()
	self.DragEnded:Destroy()
	self.DragBegan:Destroy()
	self.DragEnded = nil
	self.DragBegan = nil
	self.locked = true
end

return SnapdragonController</string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="567">
                <Properties>
                  <string name="Name">SnapdragonRef</string>
                  <string name="Source">local refs = setmetatable({}, {__mode = "k"})

local SnapdragonRef = {}
SnapdragonRef.__index = SnapdragonRef

function SnapdragonRef.new(current)
	local ref = setmetatable({
		current = current
	}, SnapdragonRef)
	refs[ref] = ref
	return ref
end

function SnapdragonRef:Update(current)
	self.current = current
end

function SnapdragonRef:Get()
	return self.current
end

function SnapdragonRef.is(ref)
	return refs[ref] ~= nil
end

return SnapdragonRef</string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="568">
                <Properties>
                  <string name="Name">Symbol</string>
                  <string name="Source">--[[
	A 'Symbol' is an opaque marker type.

	Symbols have the type 'userdata', but when printed to the console, the name
	of the symbol is shown.
]]

local Symbol = {}

--[[
	Creates a Symbol with the given name.

	When printed or coerced to a string, the symbol will turn into the string
	given as its name.
]]
function Symbol.named(name)
	assert(type(name) == "string", "Symbols must be created using a string name!")

	local self = newproxy(true)

	local wrappedName = ("Symbol(%s)"):format(name)

	getmetatable(self).__tostring = function()
		return wrappedName
	end

	return self
end

return Symbol</string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="569">
                <Properties>
                  <string name="Name">objectAssign</string>
                  <string name="Source">local function objectAssign(target, ...)
	local targets = {...}
	for _, t in pairs(targets) do
		for k ,v in pairs(t) do
			target[k] = v;
		end
	end
	return target
end

return objectAssign</string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="570">
                <Properties>
                  <string name="Name">t</string>
                  <string name="Source"><![CDATA[-- t: a runtime typechecker for Roblox

-- regular lua compatibility
local typeof = typeof or type

local function primitive(typeName)
	return function(value)
		local valueType = typeof(value)
		if valueType == typeName then
			return true
		else
			return false, string.format("%s expected, got %s", typeName, valueType)
		end
	end
end

local t = {}

--[[**
	matches any type except nil

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
function t.any(value)
	if value ~= nil then
		return true
	else
		return false, "any expected, got nil"
	end
end

--Lua primitives

--[[**
	ensures Lua primitive boolean type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.boolean = primitive("boolean")

--[[**
	ensures Lua primitive thread type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.thread = primitive("thread")

--[[**
	ensures Lua primitive callback type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.callback = primitive("function")

--[[**
	ensures Lua primitive none type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.none = primitive("nil")

--[[**
	ensures Lua primitive string type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.string = primitive("string")

--[[**
	ensures Lua primitive table type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.table = primitive("table")

--[[**
	ensures Lua primitive userdata type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.userdata = primitive("userdata")

--[[**
	ensures value is a number and non-NaN

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
function t.number(value)
	local valueType = typeof(value)
	if valueType == "number" then
		if value == value then
			return true
		else
			return false, "unexpected NaN value"
		end
	else
		return false, string.format("number expected, got %s", valueType)
	end
end

--[[**
	ensures value is NaN

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
function t.nan(value)
	if value ~= value then
		return true
	else
		return false, "unexpected non-NaN value"
	end
end

-- roblox types

--[[**
	ensures Roblox Axes type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Axes = primitive("Axes")

--[[**
	ensures Roblox BrickColor type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.BrickColor = primitive("BrickColor")

--[[**
	ensures Roblox CFrame type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.CFrame = primitive("CFrame")

--[[**
	ensures Roblox Color3 type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Color3 = primitive("Color3")

--[[**
	ensures Roblox ColorSequence type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.ColorSequence = primitive("ColorSequence")

--[[**
	ensures Roblox ColorSequenceKeypoint type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.ColorSequenceKeypoint = primitive("ColorSequenceKeypoint")

--[[**
	ensures Roblox DockWidgetPluginGuiInfo type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.DockWidgetPluginGuiInfo = primitive("DockWidgetPluginGuiInfo")

--[[**
	ensures Roblox Faces type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Faces = primitive("Faces")

--[[**
	ensures Roblox Instance type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Instance = primitive("Instance")

--[[**
	ensures Roblox NumberRange type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.NumberRange = primitive("NumberRange")

--[[**
	ensures Roblox NumberSequence type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.NumberSequence = primitive("NumberSequence")

--[[**
	ensures Roblox NumberSequenceKeypoint type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.NumberSequenceKeypoint = primitive("NumberSequenceKeypoint")

--[[**
	ensures Roblox PathWaypoint type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.PathWaypoint = primitive("PathWaypoint")

--[[**
	ensures Roblox PhysicalProperties type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.PhysicalProperties = primitive("PhysicalProperties")

--[[**
	ensures Roblox Random type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Random = primitive("Random")

--[[**
	ensures Roblox Ray type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Ray = primitive("Ray")

--[[**
	ensures Roblox Rect type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Rect = primitive("Rect")

--[[**
	ensures Roblox Region3 type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Region3 = primitive("Region3")

--[[**
	ensures Roblox Region3int16 type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Region3int16 = primitive("Region3int16")

--[[**
	ensures Roblox TweenInfo type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.TweenInfo = primitive("TweenInfo")

--[[**
	ensures Roblox UDim type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.UDim = primitive("UDim")

--[[**
	ensures Roblox UDim2 type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.UDim2 = primitive("UDim2")

--[[**
	ensures Roblox Vector2 type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Vector2 = primitive("Vector2")

--[[**
	ensures Roblox Vector3 type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Vector3 = primitive("Vector3")

--[[**
	ensures Roblox Vector3int16 type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Vector3int16 = primitive("Vector3int16")

-- roblox enum types

--[[**
	ensures Roblox Enum type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Enum = primitive("Enum")

--[[**
	ensures Roblox EnumItem type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.EnumItem = primitive("EnumItem")

--[[**
	ensures Roblox RBXScriptSignal type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.RBXScriptSignal = primitive("RBXScriptSignal")

--[[**
	ensures Roblox RBXScriptConnection type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.RBXScriptConnection = primitive("RBXScriptConnection")

--[[**
	ensures value is a given literal value

	@param literal The literal to use

	@returns A function that will return true iff the condition is passed
**--]]
function t.literal(...)
	local size = select("#", ...)
	if size == 1 then
		local literal = ...
		return function(value)
			if value ~= literal then
				return false, string.format("expected %s, got %s", tostring(literal), tostring(value))
			end

			return true
		end
	else
		local literals = {}
		for i = 1, size do
			local value = select(i, ...)
			literals[i] = t.literal(value)
		end

		return t.union(table.unpack(literals, 1, size))
	end
end

--[[**
	DEPRECATED
	Please use t.literal
**--]]
t.exactly = t.literal

--[[**
	Returns a t.union of each key in the table as a t.literal

	@param keyTable The table to get keys from

	@returns True iff the condition is satisfied, false otherwise
**--]]
function t.keyOf(keyTable)
	local keys = {}
	local length = 0
	for key in pairs(keyTable) do
		length = length + 1
		keys[length] = key
	end

	return t.literal(table.unpack(keys, 1, length))
end

--[[**
	Returns a t.union of each value in the table as a t.literal

	@param valueTable The table to get values from

	@returns True iff the condition is satisfied, false otherwise
**--]]
function t.valueOf(valueTable)
	local values = {}
	local length = 0
	for _, value in pairs(valueTable) do
		length = length + 1
		values[length] = value
	end

	return t.literal(table.unpack(values, 1, length))
end

--[[**
	ensures value is an integer

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
function t.integer(value)
	local success, errMsg = t.number(value)
	if not success then
		return false, errMsg or ""
	end

	if value % 1 == 0 then
		return true
	else
		return false, string.format("integer expected, got %s", value)
	end
end

--[[**
	ensures value is a number where min <= value

	@param min The minimum to use

	@returns A function that will return true iff the condition is passed
**--]]
function t.numberMin(min)
	return function(value)
		local success, errMsg = t.number(value)
		if not success then
			return false, errMsg or ""
		end

		if value >= min then
			return true
		else
			return false, string.format("number >= %s expected, got %s", min, value)
		end
	end
end

--[[**
	ensures value is a number where value <= max

	@param max The maximum to use

	@returns A function that will return true iff the condition is passed
**--]]
function t.numberMax(max)
	return function(value)
		local success, errMsg = t.number(value)
		if not success then
			return false, errMsg
		end

		if value <= max then
			return true
		else
			return false, string.format("number <= %s expected, got %s", max, value)
		end
	end
end

--[[**
	ensures value is a number where min < value

	@param min The minimum to use

	@returns A function that will return true iff the condition is passed
**--]]
function t.numberMinExclusive(min)
	return function(value)
		local success, errMsg = t.number(value)
		if not success then
			return false, errMsg or ""
		end

		if min < value then
			return true
		else
			return false, string.format("number > %s expected, got %s", min, value)
		end
	end
end

--[[**
	ensures value is a number where value < max

	@param max The maximum to use

	@returns A function that will return true iff the condition is passed
**--]]
function t.numberMaxExclusive(max)
	return function(value)
		local success, errMsg = t.number(value)
		if not success then
			return false, errMsg or ""
		end

		if value < max then
			return true
		else
			return false, string.format("number < %s expected, got %s", max, value)
		end
	end
end

--[[**
	ensures value is a number where value > 0

	@returns A function that will return true iff the condition is passed
**--]]
t.numberPositive = t.numberMinExclusive(0)

--[[**
	ensures value is a number where value < 0

	@returns A function that will return true iff the condition is passed
**--]]
t.numberNegative = t.numberMaxExclusive(0)

--[[**
	ensures value is a number where min <= value <= max

	@param min The minimum to use
	@param max The maximum to use

	@returns A function that will return true iff the condition is passed
**--]]
function t.numberConstrained(min, max)
	assert(t.number(min) and t.number(max))
	local minCheck = t.numberMin(min)
	local maxCheck = t.numberMax(max)

	return function(value)
		local minSuccess, minErrMsg = minCheck(value)
		if not minSuccess then
			return false, minErrMsg or ""
		end

		local maxSuccess, maxErrMsg = maxCheck(value)
		if not maxSuccess then
			return false, maxErrMsg or ""
		end

		return true
	end
end

--[[**
	ensures value is a number where min < value < max

	@param min The minimum to use
	@param max The maximum to use

	@returns A function that will return true iff the condition is passed
**--]]
function t.numberConstrainedExclusive(min, max)
	assert(t.number(min) and t.number(max))
	local minCheck = t.numberMinExclusive(min)
	local maxCheck = t.numberMaxExclusive(max)

	return function(value)
		local minSuccess, minErrMsg = minCheck(value)
		if not minSuccess then
			return false, minErrMsg or ""
		end

		local maxSuccess, maxErrMsg = maxCheck(value)
		if not maxSuccess then
			return false, maxErrMsg or ""
		end

		return true
	end
end

--[[**
	ensures value matches string pattern

	@param string pattern to check against

	@returns A function that will return true iff the condition is passed
**--]]
function t.match(pattern)
	assert(t.string(pattern))
	return function(value)
		local stringSuccess, stringErrMsg = t.string(value)
		if not stringSuccess then
			return false, stringErrMsg
		end

		if string.match(value, pattern) == nil then
			return false, string.format("%q failed to match pattern %q", value, pattern)
		end

		return true
	end
end

--[[**
	ensures value is either nil or passes check

	@param check The check to use

	@returns A function that will return true iff the condition is passed
**--]]
function t.optional(check)
	assert(t.callback(check))
	return function(value)
		if value == nil then
			return true
		end

		local success, errMsg = check(value)
		if success then
			return true
		else
			return false, string.format("(optional) %s", errMsg or "")
		end
	end
end

--[[**
	matches given tuple against tuple type definition

	@param ... The type definition for the tuples

	@returns A function that will return true iff the condition is passed
**--]]
function t.tuple(...)
	local checks = {...}
	return function(...)
		local args = {...}
		for i, check in ipairs(checks) do
			local success, errMsg = check(args[i])
			if success == false then
				return false, string.format("Bad tuple index #%s:\n\t%s", i, errMsg or "")
			end
		end

		return true
	end
end

--[[**
	ensures all keys in given table pass check

	@param check The function to use to check the keys

	@returns A function that will return true iff the condition is passed
**--]]
function t.keys(check)
	assert(t.callback(check))
	return function(value)
		local tableSuccess, tableErrMsg = t.table(value)
		if tableSuccess == false then
			return false, tableErrMsg or ""
		end

		for key in pairs(value) do
			local success, errMsg = check(key)
			if success == false then
				return false, string.format("bad key %s:\n\t%s", tostring(key), errMsg or "")
			end
		end

		return true
	end
end

--[[**
	ensures all values in given table pass check

	@param check The function to use to check the values

	@returns A function that will return true iff the condition is passed
**--]]
function t.values(check)
	assert(t.callback(check))
	return function(value)
		local tableSuccess, tableErrMsg = t.table(value)
		if tableSuccess == false then
			return false, tableErrMsg or ""
		end

		for key, val in pairs(value) do
			local success, errMsg = check(val)
			if success == false then
				return false, string.format("bad value for key %s:\n\t%s", tostring(key), errMsg or "")
			end
		end

		return true
	end
end

--[[**
	ensures value is a table and all keys pass keyCheck and all values pass valueCheck

	@param keyCheck The function to use to check the keys
	@param valueCheck The function to use to check the values

	@returns A function that will return true iff the condition is passed
**--]]
function t.map(keyCheck, valueCheck)
	assert(t.callback(keyCheck), t.callback(valueCheck))
	local keyChecker = t.keys(keyCheck)
	local valueChecker = t.values(valueCheck)

	return function(value)
		local keySuccess, keyErr = keyChecker(value)
		if not keySuccess then
			return false, keyErr or ""
		end

		local valueSuccess, valueErr = valueChecker(value)
		if not valueSuccess then
			return false, valueErr or ""
		end

		return true
	end
end

--[[**
	ensures value is a table and all keys pass valueCheck and all values are true

	@param valueCheck The function to use to check the values

	@returns A function that will return true iff the condition is passed
**--]]
function t.set(valueCheck)
	return t.map(valueCheck, t.literal(true))
end

do
	local arrayKeysCheck = t.keys(t.integer)
	--[[**
		ensures value is an array and all values of the array match check

		@param check The check to compare all values with

		@returns A function that will return true iff the condition is passed
	**--]]
	function t.array(check)
		assert(t.callback(check))
		local valuesCheck = t.values(check)

		return function(value)
			local keySuccess, keyErrMsg = arrayKeysCheck(value)
			if keySuccess == false then
				return false, string.format("[array] %s", keyErrMsg or "")
			end

			-- # is unreliable for sparse arrays
			-- Count upwards using ipairs to avoid false positives from the behavior of #
			local arraySize = 0

			for _ in ipairs(value) do
				arraySize = arraySize + 1
			end

			for key in pairs(value) do
				if key < 1 or key > arraySize then
					return false, string.format("[array] key %s must be sequential", tostring(key))
				end
			end

			local valueSuccess, valueErrMsg = valuesCheck(value)
			if not valueSuccess then
				return false, string.format("[array] %s", valueErrMsg or "")
			end

			return true
		end
	end

	--[[**
		ensures value is an array of a strict makeup and size

		@param check The check to compare all values with

		@returns A function that will return true iff the condition is passed
	**--]]
	function t.strictArray(...)
		local valueTypes = { ... }
		assert(t.array(t.callback)(valueTypes))

		return function(value)
			local keySuccess, keyErrMsg = arrayKeysCheck(value)
			if keySuccess == false then
				return false, string.format("[strictArray] %s", keyErrMsg or "")
			end

			-- If there's more than the set array size, disallow
			if #valueTypes < #value then
				return false, string.format("[strictArray] Array size exceeds limit of %d", #valueTypes)
			end

			for idx, typeFn in pairs(valueTypes) do
				local typeSuccess, typeErrMsg = typeFn(value[idx])
				if not typeSuccess then
					return false, string.format("[strictArray] Array index #%d - %s", idx, typeErrMsg)
				end
			end

			return true
		end
	end
end

do
	local callbackArray = t.array(t.callback)
	--[[**
		creates a union type

		@param ... The checks to union

		@returns A function that will return true iff the condition is passed
	**--]]
	function t.union(...)
		local checks = {...}
		assert(callbackArray(checks))

		return function(value)
			for _, check in ipairs(checks) do
				if check(value) then
					return true
				end
			end

			return false, "bad type for union"
		end
	end

	--[[**
		Alias for t.union
	**--]]
	t.some = t.union

	--[[**
		creates an intersection type

		@param ... The checks to intersect

		@returns A function that will return true iff the condition is passed
	**--]]
	function t.intersection(...)
		local checks = {...}
		assert(callbackArray(checks))

		return function(value)
			for _, check in ipairs(checks) do
				local success, errMsg = check(value)
				if not success then
					return false, errMsg or ""
				end
			end

			return true
		end
	end

	--[[**
		Alias for t.intersection
	**--]]
	t.every = t.intersection
end

do
	local checkInterface = t.map(t.any, t.callback)
	--[[**
		ensures value matches given interface definition

		@param checkTable The interface definition

		@returns A function that will return true iff the condition is passed
	**--]]
	function t.interface(checkTable)
		assert(checkInterface(checkTable))
		return function(value)
			local tableSuccess, tableErrMsg = t.table(value)
			if tableSuccess == false then
				return false, tableErrMsg or ""
			end

			for key, check in pairs(checkTable) do
				local success, errMsg = check(value[key])
				if success == false then
					return false, string.format("[interface] bad value for %s:\n\t%s", tostring(key), errMsg or "")
				end
			end

			return true
		end
	end

	--[[**
		ensures value matches given interface definition strictly

		@param checkTable The interface definition

		@returns A function that will return true iff the condition is passed
	**--]]
	function t.strictInterface(checkTable)
		assert(checkInterface(checkTable))
		return function(value)
			local tableSuccess, tableErrMsg = t.table(value)
			if tableSuccess == false then
				return false, tableErrMsg or ""
			end

			for key, check in pairs(checkTable) do
				local success, errMsg = check(value[key])
				if success == false then
					return false, string.format("[interface] bad value for %s:\n\t%s", tostring(key), errMsg or "")
				end
			end

			for key in pairs(value) do
				if not checkTable[key] then
					return false, string.format("[interface] unexpected field %q", tostring(key))
				end
			end

			return true
		end
	end
end

--[[**
	ensure value is an Instance and it's ClassName matches the given ClassName

	@param className The class name to check for

	@returns A function that will return true iff the condition is passed
**--]]
function t.instanceOf(className, childTable)
	assert(t.string(className))

	local childrenCheck
	if childTable ~= nil then
		childrenCheck = t.children(childTable)
	end

	return function(value)
		local instanceSuccess, instanceErrMsg = t.Instance(value)
		if not instanceSuccess then
			return false, instanceErrMsg or ""
		end

		if value.ClassName ~= className then
			return false, string.format("%s expected, got %s", className, value.ClassName)
		end

		if childrenCheck then
			local childrenSuccess, childrenErrMsg = childrenCheck(value)
			if not childrenSuccess then
				return false, childrenErrMsg
			end
		end

		return true
	end
end

t.instance = t.instanceOf

--[[**
	ensure value is an Instance and it's ClassName matches the given ClassName by an IsA comparison

	@param className The class name to check for

	@returns A function that will return true iff the condition is passed
**--]]
function t.instanceIsA(className, childTable)
	assert(t.string(className))

	local childrenCheck
	if childTable ~= nil then
		childrenCheck = t.children(childTable)
	end

	return function(value)
		local instanceSuccess, instanceErrMsg = t.Instance(value)
		if not instanceSuccess then
			return false, instanceErrMsg or ""
		end

		if not value:IsA(className) then
			return false, string.format("%s expected, got %s", className, value.ClassName)
		end

		if childrenCheck then
			local childrenSuccess, childrenErrMsg = childrenCheck(value)
			if not childrenSuccess then
				return false, childrenErrMsg
			end
		end

		return true
	end
end

--[[**
	ensures value is an enum of the correct type

	@param enum The enum to check

	@returns A function that will return true iff the condition is passed
**--]]
function t.enum(enum)
	assert(t.Enum(enum))
	return function(value)
		local enumItemSuccess, enumItemErrMsg = t.EnumItem(value)
		if not enumItemSuccess then
			return false, enumItemErrMsg
		end

		if value.EnumType == enum then
			return true
		else
			return false, string.format("enum of %s expected, got enum of %s", tostring(enum), tostring(value.EnumType))
		end
	end
end

do
	local checkWrap = t.tuple(t.callback, t.callback)

	--[[**
		wraps a callback in an assert with checkArgs

		@param callback The function to wrap
		@param checkArgs The functon to use to check arguments in the assert

		@returns A function that first asserts using checkArgs and then calls callback
	**--]]
	function t.wrap(callback, checkArgs)
		assert(checkWrap(callback, checkArgs))
		return function(...)
			assert(checkArgs(...))
			return callback(...)
		end
	end
end

--[[**
	asserts a given check

	@param check The function to wrap with an assert

	@returns A function that simply wraps the given check in an assert
**--]]
function t.strict(check)
	return function(...)
		assert(check(...))
	end
end

do
	local checkChildren = t.map(t.string, t.callback)

	--[[**
		Takes a table where keys are child names and values are functions to check the children against.
		Pass an instance tree into the function.
		If at least one child passes each check, the overall check passes.

		Warning! If you pass in a tree with more than one child of the same name, this function will always return false

		@param checkTable The table to check against

		@returns A function that checks an instance tree
	**--]]
	function t.children(checkTable)
		assert(checkChildren(checkTable))

		return function(value)
			local instanceSuccess, instanceErrMsg = t.Instance(value)
			if not instanceSuccess then
				return false, instanceErrMsg or ""
			end

			local childrenByName = {}
			for _, child in ipairs(value:GetChildren()) do
				local name = child.Name
				if checkTable[name] then
					if childrenByName[name] then
						return false, string.format("Cannot process multiple children with the same name %q", name)
					end

					childrenByName[name] = child
				end
			end

			for name, check in pairs(checkTable) do
				local success, errMsg = check(childrenByName[name])
				if not success then
					return false, string.format("[%s.%s] %s", value:GetFullName(), name, errMsg or "")
				end
			end

			return true
		end
	end
end

return t
]]></string>
                </Properties>
              </Item>
            </Item>
          </Item>
          <Item class="ModuleScript" referent="571">
            <Properties>
              <string name="Name">string-utils</string>
              <string name="Source"><![CDATA[local StringUtils = {}

function StringUtils.trim(str)
	local from = string.match(str, "^%s*()")
	return from > #str and "" or string.match(str, ".*%S", from)  -- there is no escaping 2n complexity, but we can prevent n^2
end

function StringUtils.trimStart(str)
	local from = string.match(str, "^%s*()")
	return from > #str and "" or string.sub(str, from)
end

function StringUtils.trimEnd(str)
	local _, from = string.find(str, "^%s*") -- checking this prevents quadratic backtracking
	return from == #str and "" or string.match(str, ".*%S") -- there is no escaping 2n/3n complexity, but we can prevent n^2
end

-- https://github.com/tc39/proposal-string-pad-start-end/blob/master/polyfill.js
local function getPadding(str, maxLength, fillString)
	local stringLength = #str
	if maxLength <= stringLength then return str end
	local filler = fillString == nil and " " or fillString
	if filler == "" then return str end
	local fillLen = maxLength - stringLength
	while #filler < fillLen do
		local fLen = #filler
		local remainingCodeUnits = fillLen - fLen
		if fLen > remainingCodeUnits then
			filler = filler .. string.sub(filler, 1, remainingCodeUnits)
		else
			filler = filler .. filler
		end
	end
	return string.sub(filler, 1, fillLen)
end

function StringUtils.padStart(str, maxLength, fillString)
	return getPadding(str, maxLength, fillString) .. str
end

function StringUtils.padEnd(str, maxLength, fillString)
	return str .. getPadding(str, maxLength, fillString)
end

function StringUtils.slice(str, i, j)
	if j ~= nil and j < 0 then j = j - 1 end
	return string.sub(str, i + 1, j)
end

function StringUtils.indexOf(str, searchElement, fromIndex)
	return (string.find(str, searchElement, (fromIndex or 0) + 1, true) or 0) - 1
end

function StringUtils.includes(str, searchElement, fromIndex)
	return string.find(str, searchElement, (fromIndex or 0) + 1, true) ~= nil
end

function StringUtils.startsWith(str1, str2, pos)
	local n1 = #str1
	local n2 = #str2

	if pos == nil or pos ~= pos then
		pos = 0
	else
		pos = math.clamp(pos, 0, n1)
	end

	local last = pos + n2
	return last <= n1 and string.sub(str1, pos + 1, last) == str2
end

function StringUtils.endsWith(str1, str2, pos)
	local n1 = #str1
	local n2 = #str2

	if pos == nil then
		pos = n1
	elseif pos ~= pos then
		pos = 0
	else
		pos = math.clamp(pos, 0, n1)
	end

	local start = pos - n2 + 1
	return start > 0 and string.sub(str1, start, pos) == str2
end

return StringUtils
]]></string>
            </Properties>
          </Item>
          <Item class="Folder" referent="572">
            <Properties>
              <string name="Name">t</string>
            </Properties>
            <Item class="Folder" referent="573">
              <Properties>
                <string name="Name">lib</string>
              </Properties>
              <Item class="ModuleScript" referent="574">
                <Properties>
                  <string name="Name">ts</string>
                  <string name="Source"><![CDATA[-- t: a runtime typechecker for Roblox

-- regular lua compatibility
local typeof = typeof or type

local function primitive(typeName)
	return function(value)
		local valueType = typeof(value)
		if valueType == typeName then
			return true
		else
			return false
		end
	end
end

local t = {}

--[[**
	matches any type except nil

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
function t.any(value)
	if value ~= nil then
		return true
	else
		return false
	end
end

--Lua primitives

--[[**
	ensures Lua primitive boolean type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.boolean = primitive("boolean")

--[[**
	ensures Lua primitive thread type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.thread = primitive("thread")

--[[**
	ensures Lua primitive callback type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.callback = primitive("function")
t["function"] = t.callback

--[[**
	ensures Lua primitive none type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.none = primitive("nil")
t["nil"] = t.none

--[[**
	ensures Lua primitive string type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.string = primitive("string")

--[[**
	ensures Lua primitive table type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.table = primitive("table")

--[[**
	ensures Lua primitive userdata type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.userdata = primitive("userdata")

--[[**
	ensures value is a number and non-NaN

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
function t.number(value)
	local valueType = typeof(value)
	if valueType == "number" then
		if value == value then
			return true
		else
			return false
		end
	else
		return false
	end
end

--[[**
	ensures value is NaN

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
function t.nan(value)
	if value ~= value then
		return true
	else
		return false
	end
end

-- roblox types

--[[**
	ensures Roblox Axes type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Axes = primitive("Axes")

--[[**
	ensures Roblox BrickColor type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.BrickColor = primitive("BrickColor")

--[[**
	ensures Roblox CFrame type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.CFrame = primitive("CFrame")

--[[**
	ensures Roblox Color3 type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Color3 = primitive("Color3")

--[[**
	ensures Roblox ColorSequence type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.ColorSequence = primitive("ColorSequence")

--[[**
	ensures Roblox ColorSequenceKeypoint type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.ColorSequenceKeypoint = primitive("ColorSequenceKeypoint")

--[[**
	ensures Roblox DockWidgetPluginGuiInfo type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.DockWidgetPluginGuiInfo = primitive("DockWidgetPluginGuiInfo")

--[[**
	ensures Roblox Faces type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Faces = primitive("Faces")

--[[**
	ensures Roblox Instance type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Instance = primitive("Instance")

--[[**
	ensures Roblox NumberRange type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.NumberRange = primitive("NumberRange")

--[[**
	ensures Roblox NumberSequence type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.NumberSequence = primitive("NumberSequence")

--[[**
	ensures Roblox NumberSequenceKeypoint type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.NumberSequenceKeypoint = primitive("NumberSequenceKeypoint")

--[[**
	ensures Roblox PathWaypoint type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.PathWaypoint = primitive("PathWaypoint")

--[[**
	ensures Roblox PhysicalProperties type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.PhysicalProperties = primitive("PhysicalProperties")

--[[**
	ensures Roblox Random type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Random = primitive("Random")

--[[**
	ensures Roblox Ray type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Ray = primitive("Ray")

--[[**
	ensures Roblox Rect type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Rect = primitive("Rect")

--[[**
	ensures Roblox Region3 type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Region3 = primitive("Region3")

--[[**
	ensures Roblox Region3int16 type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Region3int16 = primitive("Region3int16")

--[[**
	ensures Roblox TweenInfo type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.TweenInfo = primitive("TweenInfo")

--[[**
	ensures Roblox UDim type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.UDim = primitive("UDim")

--[[**
	ensures Roblox UDim2 type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.UDim2 = primitive("UDim2")

--[[**
	ensures Roblox Vector2 type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Vector2 = primitive("Vector2")

--[[**
	ensures Roblox Vector3 type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Vector3 = primitive("Vector3")

--[[**
	ensures Roblox Vector3int16 type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Vector3int16 = primitive("Vector3int16")

-- roblox enum types

--[[**
	ensures Roblox Enum type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Enum = primitive("Enum")

--[[**
	ensures Roblox EnumItem type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.EnumItem = primitive("EnumItem")

--[[**
	ensures Roblox RBXScriptSignal type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.RBXScriptSignal = primitive("RBXScriptSignal")

--[[**
	ensures Roblox RBXScriptConnection type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.RBXScriptConnection = primitive("RBXScriptConnection")

--[[**
	ensures value is a given literal value

	@param literal The literal to use

	@returns A function that will return true iff the condition is passed
**--]]
function t.literal(...)
	local size = select("#", ...)
	if size == 1 then
		local literal = ...
		return function(value)
			if value ~= literal then
				return false
			end

			return true
		end
	else
		local literals = {}
		for i = 1, size do
			local value = select(i, ...)
			literals[i] = t.literal(value)
		end

		return t.union(table.unpack(literals, 1, size))
	end
end

--[[**
	DEPRECATED
	Please use t.literal
**--]]
t.exactly = t.literal

--[[**
	Returns a t.union of each key in the table as a t.literal

	@param keyTable The table to get keys from

	@returns True iff the condition is satisfied, false otherwise
**--]]
function t.keyOf(keyTable)
	local keys = {}
	local length = 0
	for key in pairs(keyTable) do
		length = length + 1
		keys[length] = key
	end

	return t.literal(table.unpack(keys, 1, length))
end

--[[**
	Returns a t.union of each value in the table as a t.literal

	@param valueTable The table to get values from

	@returns True iff the condition is satisfied, false otherwise
**--]]
function t.valueOf(valueTable)
	local values = {}
	local length = 0
	for _, value in pairs(valueTable) do
		length = length + 1
		values[length] = value
	end

	return t.literal(table.unpack(values, 1, length))
end

--[[**
	ensures value is an integer

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
function t.integer(value)
	local success = t.number(value)
	if not success then
		return false
	end

	if value % 1 == 0 then
		return true
	else
		return false
	end
end

--[[**
	ensures value is a number where min <= value

	@param min The minimum to use

	@returns A function that will return true iff the condition is passed
**--]]
function t.numberMin(min)
	return function(value)
		local success = t.number(value)
		if not success then
			return false
		end

		if value >= min then
			return true
		else
			return false
		end
	end
end

--[[**
	ensures value is a number where value <= max

	@param max The maximum to use

	@returns A function that will return true iff the condition is passed
**--]]
function t.numberMax(max)
	return function(value)
		local success = t.number(value)
		if not success then
			return false
		end

		if value <= max then
			return true
		else
			return false
		end
	end
end

--[[**
	ensures value is a number where min < value

	@param min The minimum to use

	@returns A function that will return true iff the condition is passed
**--]]
function t.numberMinExclusive(min)
	return function(value)
		local success = t.number(value)
		if not success then
			return false
		end

		if min < value then
			return true
		else
			return false
		end
	end
end

--[[**
	ensures value is a number where value < max

	@param max The maximum to use

	@returns A function that will return true iff the condition is passed
**--]]
function t.numberMaxExclusive(max)
	return function(value)
		local success = t.number(value)
		if not success then
			return false
		end

		if value < max then
			return true
		else
			return false
		end
	end
end

--[[**
	ensures value is a number where value > 0

	@returns A function that will return true iff the condition is passed
**--]]
t.numberPositive = t.numberMinExclusive(0)

--[[**
	ensures value is a number where value < 0

	@returns A function that will return true iff the condition is passed
**--]]
t.numberNegative = t.numberMaxExclusive(0)

--[[**
	ensures value is a number where min <= value <= max

	@param min The minimum to use
	@param max The maximum to use

	@returns A function that will return true iff the condition is passed
**--]]
function t.numberConstrained(min, max)
	assert(t.number(min))
	assert(t.number(max))
	local minCheck = t.numberMin(min)
	local maxCheck = t.numberMax(max)

	return function(value)
		local minSuccess = minCheck(value)
		if not minSuccess then
			return false
		end

		local maxSuccess = maxCheck(value)
		if not maxSuccess then
			return false
		end

		return true
	end
end

--[[**
	ensures value is a number where min < value < max

	@param min The minimum to use
	@param max The maximum to use

	@returns A function that will return true iff the condition is passed
**--]]
function t.numberConstrainedExclusive(min, max)
	assert(t.number(min))
	assert(t.number(max))
	local minCheck = t.numberMinExclusive(min)
	local maxCheck = t.numberMaxExclusive(max)

	return function(value)
		local minSuccess = minCheck(value)
		if not minSuccess then
			return false
		end

		local maxSuccess = maxCheck(value)
		if not maxSuccess then
			return false
		end

		return true
	end
end

--[[**
	ensures value matches string pattern

	@param string pattern to check against

	@returns A function that will return true iff the condition is passed
**--]]
function t.match(pattern)
	assert(t.string(pattern))
	return function(value)
		local stringSuccess = t.string(value)
		if not stringSuccess then
			return false
		end

		if string.match(value, pattern) == nil then
			return false
		end

		return true
	end
end

--[[**
	ensures value is either nil or passes check

	@param check The check to use

	@returns A function that will return true iff the condition is passed
**--]]
function t.optional(check)
	assert(t.callback(check))
	return function(value)
		if value == nil then
			return true
		end

		local success = check(value)
		if success then
			return true
		else
			return false
		end
	end
end

--[[**
	matches given tuple against tuple type definition

	@param ... The type definition for the tuples

	@returns A function that will return true iff the condition is passed
**--]]
function t.tuple(...)
	local checks = { ... }
	return function(...)
		local args = { ... }
		for i, check in ipairs(checks) do
			local success = check(args[i])
			if success == false then
				return false
			end
		end

		return true
	end
end

--[[**
	ensures all keys in given table pass check

	@param check The function to use to check the keys

	@returns A function that will return true iff the condition is passed
**--]]
function t.keys(check)
	assert(t.callback(check))
	return function(value)
		local tableSuccess = t.table(value)
		if tableSuccess == false then
			return false
		end

		for key in pairs(value) do
			local success = check(key)
			if success == false then
				return false
			end
		end

		return true
	end
end

--[[**
	ensures all values in given table pass check

	@param check The function to use to check the values

	@returns A function that will return true iff the condition is passed
**--]]
function t.values(check)
	assert(t.callback(check))
	return function(value)
		local tableSuccess = t.table(value)
		if tableSuccess == false then
			return false
		end

		for _, val in pairs(value) do
			local success = check(val)
			if success == false then
				return false
			end
		end

		return true
	end
end

--[[**
	ensures value is a table and all keys pass keyCheck and all values pass valueCheck

	@param keyCheck The function to use to check the keys
	@param valueCheck The function to use to check the values

	@returns A function that will return true iff the condition is passed
**--]]
function t.map(keyCheck, valueCheck)
	assert(t.callback(keyCheck))
	assert(t.callback(valueCheck))
	local keyChecker = t.keys(keyCheck)
	local valueChecker = t.values(valueCheck)

	return function(value)
		local keySuccess = keyChecker(value)
		if not keySuccess then
			return false
		end

		local valueSuccess = valueChecker(value)
		if not valueSuccess then
			return false
		end

		return true
	end
end

--[[**
	ensures value is a table and all keys pass valueCheck and all values are true

	@param valueCheck The function to use to check the values

	@returns A function that will return true iff the condition is passed
**--]]
function t.set(valueCheck)
	return t.map(valueCheck, t.literal(true))
end

do
	local arrayKeysCheck = t.keys(t.integer)
--[[**
		ensures value is an array and all values of the array match check

		@param check The check to compare all values with

		@returns A function that will return true iff the condition is passed
	**--]]
	function t.array(check)
		assert(t.callback(check))
		local valuesCheck = t.values(check)

		return function(value)
			local keySuccess = arrayKeysCheck(value)
			if keySuccess == false then
				return false
			end

			-- # is unreliable for sparse arrays
			-- Count upwards using ipairs to avoid false positives from the behavior of #
			local arraySize = 0

			for _ in ipairs(value) do
				arraySize = arraySize + 1
			end

			for key in pairs(value) do
				if key < 1 or key > arraySize then
					return false
				end
			end

			local valueSuccess = valuesCheck(value)
			if not valueSuccess then
				return false
			end

			return true
		end
	end

--[[**
		ensures value is an array of a strict makeup and size

		@param check The check to compare all values with

		@returns A function that will return true iff the condition is passed
	**--]]
	function t.strictArray(...)
		local valueTypes = { ... }
		assert(t.array(t.callback)(valueTypes))

		return function(value)
			local keySuccess = arrayKeysCheck(value)
			if keySuccess == false then
				return false
			end

			-- If there's more than the set array size, disallow
			if #valueTypes < #value then
				return false
			end

			for idx, typeFn in pairs(valueTypes) do
				local typeSuccess = typeFn(value[idx])
				if not typeSuccess then
					return false
				end
			end

			return true
		end
	end
end

do
	local callbackArray = t.array(t.callback)
--[[**
		creates a union type

		@param ... The checks to union

		@returns A function that will return true iff the condition is passed
	**--]]
	function t.union(...)
		local checks = { ... }
		assert(callbackArray(checks))

		return function(value)
			for _, check in ipairs(checks) do
				if check(value) then
					return true
				end
			end

			return false
		end
	end

--[[**
		Alias for t.union
	**--]]
	t.some = t.union

--[[**
		creates an intersection type

		@param ... The checks to intersect

		@returns A function that will return true iff the condition is passed
	**--]]
	function t.intersection(...)
		local checks = { ... }
		assert(callbackArray(checks))

		return function(value)
			for _, check in ipairs(checks) do
				local success = check(value)
				if not success then
					return false
				end
			end

			return true
		end
	end

--[[**
		Alias for t.intersection
	**--]]
	t.every = t.intersection
end

do
	local checkInterface = t.map(t.any, t.callback)
--[[**
		ensures value matches given interface definition

		@param checkTable The interface definition

		@returns A function that will return true iff the condition is passed
	**--]]
	function t.interface(checkTable)
		assert(checkInterface(checkTable))
		return function(value)
			local tableSuccess = t.table(value)
			if tableSuccess == false then
				return false
			end

			for key, check in pairs(checkTable) do
				local success = check(value[key])
				if success == false then
					return false
				end
			end

			return true
		end
	end

--[[**
		ensures value matches given interface definition strictly

		@param checkTable The interface definition

		@returns A function that will return true iff the condition is passed
	**--]]
	function t.strictInterface(checkTable)
		assert(checkInterface(checkTable))
		return function(value)
			local tableSuccess = t.table(value)
			if tableSuccess == false then
				return false
			end

			for key, check in pairs(checkTable) do
				local success = check(value[key])
				if success == false then
					return false
				end
			end

			for key in pairs(value) do
				if not checkTable[key] then
					return false
				end
			end

			return true
		end
	end
end

--[[**
	ensure value is an Instance and it's ClassName matches the given ClassName

	@param className The class name to check for

	@returns A function that will return true iff the condition is passed
**--]]
function t.instanceOf(className, childTable)
	assert(t.string(className))

	local childrenCheck
	if childTable ~= nil then
		childrenCheck = t.children(childTable)
	end

	return function(value)
		local instanceSuccess = t.Instance(value)
		if not instanceSuccess then
			return false
		end

		if value.ClassName ~= className then
			return false
		end

		if childrenCheck then
			local childrenSuccess = childrenCheck(value)
			if not childrenSuccess then
				return false
			end
		end

		return true
	end
end

t.instance = t.instanceOf

--[[**
	ensure value is an Instance and it's ClassName matches the given ClassName by an IsA comparison

	@param className The class name to check for

	@returns A function that will return true iff the condition is passed
**--]]
function t.instanceIsA(className, childTable)
	assert(t.string(className))

	local childrenCheck
	if childTable ~= nil then
		childrenCheck = t.children(childTable)
	end

	return function(value)
		local instanceSuccess = t.Instance(value)
		if not instanceSuccess then
			return false
		end

		if not value:IsA(className) then
			return false
		end

		if childrenCheck then
			local childrenSuccess = childrenCheck(value)
			if not childrenSuccess then
				return false
			end
		end

		return true
	end
end

--[[**
	ensures value is an enum of the correct type

	@param enum The enum to check

	@returns A function that will return true iff the condition is passed
**--]]
function t.enum(enum)
	assert(t.Enum(enum))
	return function(value)
		local enumItemSuccess = t.EnumItem(value)
		if not enumItemSuccess then
			return false
		end

		if value.EnumType == enum then
			return true
		else
			return false
		end
	end
end

do
	local checkWrap = t.tuple(t.callback, t.callback)

--[[**
		wraps a callback in an assert with checkArgs

		@param callback The function to wrap
		@param checkArgs The functon to use to check arguments in the assert

		@returns A function that first asserts using checkArgs and then calls callback
	**--]]
	function t.wrap(callback, checkArgs)
		assert(checkWrap(callback, checkArgs))
		return function(...)
			assert(checkArgs(...))
			return callback(...)
		end
	end
end

--[[**
	asserts a given check

	@param check The function to wrap with an assert

	@returns A function that simply wraps the given check in an assert
**--]]
function t.strict(check)
	return function(...)
		assert(check(...))
	end
end

do
	local checkChildren = t.map(t.string, t.callback)

--[[**
		Takes a table where keys are child names and values are functions to check the children against.
		Pass an instance tree into the function.
		If at least one child passes each check, the overall check passes.

		Warning! If you pass in a tree with more than one child of the same name, this function will always return false

		@param checkTable The table to check against

		@returns A function that checks an instance tree
	**--]]
	function t.children(checkTable)
		assert(checkChildren(checkTable))

		return function(value)
			local instanceSuccess = t.Instance(value)
			if not instanceSuccess then
				return false
			end

			local childrenByName = {}
			for _, child in ipairs(value:GetChildren()) do
				local name = child.Name
				if checkTable[name] then
					if childrenByName[name] then
						return false
					end

					childrenByName[name] = child
				end
			end

			for name, check in pairs(checkTable) do
				local success = check(childrenByName[name])
				if not success then
					return false
				end
			end

			return true
		end
	end
end

return { t = t }
]]></string>
                </Properties>
              </Item>
            </Item>
          </Item>
          <Item class="Folder" referent="575">
            <Properties>
              <string name="Name">types</string>
            </Properties>
            <Item class="Folder" referent="576">
              <Properties>
                <string name="Name">include</string>
              </Properties>
              <Item class="Folder" referent="577">
                <Properties>
                  <string name="Name">generated</string>
                </Properties>
              </Item>
            </Item>
          </Item>
          <Item class="ModuleScript" referent="578">
            <Properties>
              <string name="Name">validate-tree</string>
              <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.3.3
local TS = _G[script]
-- * Defines a Rojo-esque tree type which defines an abstract object tree.
-- * Evaluates a Rojo-esque tree and transforms it into an indexable type.
local function getService(serviceName)
	return game:GetService(serviceName)
end
--[[
	* Returns whether a given Instance matches a particular Rojo-esque InstanceTree.
	* @param object The object which needs validation
	* @param tree The tree to validate
	* @param violators
]]
local function validateTree(object, tree, violators)
	if tree["$className"] ~= nil and not object:IsA(tree["$className"]) then
		return false
	end
	local matches = true
	if object.ClassName == "DataModel" then
		for serviceName, classOrTree in pairs(tree) do
			if serviceName ~= "$className" then
				local success, value = pcall(getService, serviceName)
				if not success then
					if violators ~= nil then
						local _arg0 = 'game.GetService("' .. (serviceName .. '")')
						table.insert(violators, _arg0)
					end
					return false
				end
				if value and (type(classOrTree) == "string" or validateTree(value, classOrTree, violators)) then
					if value.Name ~= serviceName then
						value.Name = serviceName
					end
				else
					if violators == nil then
						return false
					end
					matches = false
					local _arg0 = 'game.GetService("' .. (serviceName .. '")')
					table.insert(violators, _arg0)
				end
			end
		end
	else
		local whitelistedKeys = {
			["$className"] = true,
		}
		for _, child in ipairs(object:GetChildren()) do
			local childName = child.Name
			if childName ~= "$className" then
				local classOrTree = tree[childName]
				if if type(classOrTree) == "string" then child:IsA(classOrTree) else classOrTree and validateTree(child, classOrTree, violators) then
					whitelistedKeys[childName] = true
				end
			end
		end
		for key in pairs(tree) do
			if not (whitelistedKeys[key] ~= nil) then
				if violators == nil then
					return false
				end
				matches = false
				local _arg0 = object:GetFullName() .. "." .. key
				table.insert(violators, _arg0)
			end
		end
	end
	return matches
end
--[[
	* Promises a given tree of objects exists within an object.
	* @param tree Must be an object tree similar to ones considered valid by Rojo.
	* Every tree must have a `$className` member, and can have any number of keys which represent
	* the name of a child instance, which should have a corresponding value which is this same kind of tree.
	* There is also a shorthand syntax available, where setting a key equal to a className is equivalent
	* to an object with `$className` defined. Hence `Things: "Folder"` is equivalent to `Things: { $className: "Folder" }`
]]
local function promiseTree(object, tree)
	if validateTree(object, tree) then
		return TS.Promise.resolve(object)
	end
	local connections = {}
	local warner = TS.Promise.delay(5)
	local _arg0 = function()
		local violators = {}
		if not validateTree(object, tree, violators) then
			warn("[promiseTree] Infinite wait possible. Waiting for: " .. table.concat(violators, ", "))
		end
	end
	warner:andThen(_arg0)
	local promise = TS.Promise.new(function(resolve)
		local function updateTree(violators)
			if validateTree(object, tree, violators) then
				resolve(object)
			end
		end
		for _, d in ipairs(object:GetDescendants()) do
			local _arg0_1 = d:GetPropertyChangedSignal("Name"):Connect(updateTree)
			table.insert(connections, _arg0_1)
		end
		local _arg0_1 = object.DescendantAdded:Connect(function(descendant)
			local _arg0_2 = descendant:GetPropertyChangedSignal("Name"):Connect(updateTree)
			table.insert(connections, _arg0_2)
			updateTree()
		end)
		table.insert(connections, _arg0_1)
	end)
	promise:finally(function()
		for _, connection in ipairs(connections) do
			connection:Disconnect()
		end
		warner:cancel()
	end)
	return promise
end
return {
	validateTree = validateTree,
	promiseTree = promiseTree,
}
]]></string>
            </Properties>
          </Item>
          <Item class="Folder" referent="579">
            <Properties>
              <string name="Name">zircon</string>
            </Properties>
            <Item class="Folder" referent="580">
              <Properties>
                <string name="Name">node_modules</string>
              </Properties>
              <Item class="Folder" referent="581">
                <Properties>
                  <string name="Name">@rbxts</string>
                </Properties>
                <Item class="Folder" referent="582">
                  <Properties>
                    <string name="Name">log</string>
                  </Properties>
                  <Item class="ModuleScript" referent="583">
                    <Properties>
                      <string name="Name">out</string>
                      <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.2
local TS = _G[script]
local exports = {}
local LogEventRobloxOutputSink = TS.import(script, script, "Core", "LogEventRobloxOutputSink").LogEventRobloxOutputSink
local Logger = TS.import(script, script, "Logger").Logger
exports.Logger = TS.import(script, script, "Logger").Logger
exports.LogLevel = TS.import(script, script, "Core").LogLevel
local Log = {}
do
	local _container = Log
	local defaultLogger = Logger:default()
	local function SetLogger(logger)
		defaultLogger = logger
	end
	_container.SetLogger = SetLogger
	local function Default()
		return defaultLogger
	end
	_container.Default = Default
	--[[
		*
		* Creates a custom logger
		* @returns The logger configuration, use `Initialize` to get the logger once configured
	]]
	local function Create()
		return Logger:configure()
	end
	_container.Create = Create
	local RobloxOutput = function(options)
		if options == nil then
			options = {}
		end
		return LogEventRobloxOutputSink.new(options)
	end
	_container.RobloxOutput = RobloxOutput
	--[[
		*
		* Write a "Fatal" message to the default logger
		* @param template
		* @param args
	]]
	local function Fatal(template, ...)
		local args = { ... }
		return defaultLogger:Fatal(template, unpack(args))
	end
	_container.Fatal = Fatal
	--[[
		*
		* Write a "Verbose" message to the default logger
		* @param template
		* @param args
	]]
	local function Verbose(template, ...)
		local args = { ... }
		defaultLogger:Verbose(template, unpack(args))
	end
	_container.Verbose = Verbose
	--[[
		*
		* Write an "Information" message to the default logger
		* @param template
		* @param args
	]]
	local function Info(template, ...)
		local args = { ... }
		defaultLogger:Info(template, unpack(args))
	end
	_container.Info = Info
	--[[
		*
		* Write a "Debugging" message to the default logger
		* @param template
		* @param args
	]]
	local function Debug(template, ...)
		local args = { ... }
		defaultLogger:Debug(template, unpack(args))
	end
	_container.Debug = Debug
	--[[
		*
		* Write a "Warning" message to the default logger
		* @param template
		* @param args
	]]
	local function Warn(template, ...)
		local args = { ... }
		defaultLogger:Warn(template, unpack(args))
	end
	_container.Warn = Warn
	--[[
		*
		* Write an "Error" message to the default logger
		* @param template
		* @param args
	]]
	local function Error(template, ...)
		local args = { ... }
		return defaultLogger:Error(template, unpack(args))
	end
	_container.Error = Error
	--[[
		*
		* Creates a logger that enriches log events with the specified context as the property `SourceContext`.
		* @param context The tag to use
	]]
	local function ForContext(context, contextConfiguration)
		return defaultLogger:ForContext(context, contextConfiguration)
	end
	_container.ForContext = ForContext
	--[[
		*
		* Creates a logger that nriches log events with the specified property
		* @param name The name of the property
		* @param value The value of the property
	]]
	local function ForProperty(name, value)
		return defaultLogger:ForProperty(name, value)
	end
	_container.ForProperty = ForProperty
	--[[
		*
		* Creates a logger that enriches log events with the `SourceContext` as the containing script
	]]
	local function ForScript(scriptContextConfiguration)
		-- Unfortunately have to duplicate here, since `debug.info`.
		local s = debug.info(2, "s")
		local copy = defaultLogger:Copy()
		local _result = scriptContextConfiguration
		if _result ~= nil then
			_result(copy)
		end
		return copy:EnrichWithProperty("SourceContext", s):Create()
	end
	_container.ForScript = ForScript
	--[[
		*
		* Creates a logger that enriches log events with `SourceContext` as the specified function
	]]
	local function ForFunction(func, funcContextConfiguration)
		return defaultLogger:ForFunction(func, funcContextConfiguration)
	end
	_container.ForFunction = ForFunction
end
local default = Log
exports.default = default
return exports
]]></string>
                    </Properties>
                    <Item class="ModuleScript" referent="584">
                      <Properties>
                        <string name="Name">Configuration</string>
                        <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.2
local TS = _G[script]
local LogEventPropertyEnricher = TS.import(script, script.Parent, "Core", "LogEventPropertyEnricher").LogEventPropertyEnricher
local LogLevel = TS.import(script, script.Parent, "Core").LogLevel
local LogEventCallbackSink = TS.import(script, script.Parent, "Core", "LogEventCallbackSink").LogEventCallbackSink
local RunService = game:GetService("RunService")
local LogConfiguration
do
	LogConfiguration = setmetatable({}, {
		__tostring = function()
			return "LogConfiguration"
		end,
	})
	LogConfiguration.__index = LogConfiguration
	function LogConfiguration.new(...)
		local self = setmetatable({}, LogConfiguration)
		return self:constructor(...) or self
	end
	function LogConfiguration:constructor(logger)
		self.logger = logger
		self.sinks = {}
		self.enrichers = {}
		self.logLevel = RunService:IsStudio() and LogLevel.Debugging or LogLevel.Information
	end
	function LogConfiguration:WriteTo(sink, configure)
		local _result = configure
		if _result ~= nil then
			_result(sink)
		end
		local _sinks = self.sinks
		-- ▼ Array.push ▼
		_sinks[#_sinks + 1] = sink
		-- ▲ Array.push ▲
		return self
	end
	function LogConfiguration:WriteToCallback(sinkCallback, configure)
		local sink = LogEventCallbackSink.new(sinkCallback)
		local _result = configure
		if _result ~= nil then
			_result(sink)
		end
		local _sinks = self.sinks
		-- ▼ Array.push ▼
		_sinks[#_sinks + 1] = sink
		-- ▲ Array.push ▲
		return self
	end
	function LogConfiguration:Enrich(enricher)
		if type(enricher) == "function" then
		else
			local _enrichers = self.enrichers
			-- ▼ Array.push ▼
			_enrichers[#_enrichers + 1] = enricher
			-- ▲ Array.push ▲
		end
		return self
	end
	function LogConfiguration:EnrichWithProperty(propertyName, value, configure)
		local enricher = LogEventPropertyEnricher.new(propertyName, value)
		local _result = configure
		if _result ~= nil then
			_result(enricher)
		end
		local _enrichers = self.enrichers
		-- ▼ Array.push ▼
		_enrichers[#_enrichers + 1] = enricher
		-- ▲ Array.push ▲
		return self
	end
	function LogConfiguration:SetMinLogLevel(logLevel)
		self.logLevel = logLevel
		return self
	end
	function LogConfiguration:Create()
		self.logger:_setSinks(self.sinks)
		self.logger:_setEnrichers(self.enrichers)
		self.logger:_setMinLogLevel(self.logLevel)
		return self.logger
	end
end
return {
	LogConfiguration = LogConfiguration,
}
]]></string>
                      </Properties>
                    </Item>
                    <Item class="ModuleScript" referent="585">
                      <Properties>
                        <string name="Name">Core</string>
                        <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.2
local LogLevel
do
	local _inverse = {}
	LogLevel = setmetatable({}, {
		__index = _inverse,
	})
	LogLevel.Verbose = 0
	_inverse[0] = "Verbose"
	LogLevel.Debugging = 1
	_inverse[1] = "Debugging"
	LogLevel.Information = 2
	_inverse[2] = "Information"
	LogLevel.Warning = 3
	_inverse[3] = "Warning"
	LogLevel.Error = 4
	_inverse[4] = "Error"
	LogLevel.Fatal = 5
	_inverse[5] = "Fatal"
end
return {
	LogLevel = LogLevel,
}
]]></string>
                      </Properties>
                      <Item class="ModuleScript" referent="586">
                        <Properties>
                          <string name="Name">LogEventCallbackSink</string>
                          <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.2
local LogEventCallbackSink
do
	LogEventCallbackSink = setmetatable({}, {
		__tostring = function()
			return "LogEventCallbackSink"
		end,
	})
	LogEventCallbackSink.__index = LogEventCallbackSink
	function LogEventCallbackSink.new(...)
		local self = setmetatable({}, LogEventCallbackSink)
		return self:constructor(...) or self
	end
	function LogEventCallbackSink:constructor(callback)
		self.callback = callback
	end
	function LogEventCallbackSink:Emit(message)
		local _binding = self
		local minLogLevel = _binding.minLogLevel
		if minLogLevel == nil or message.Level >= minLogLevel then
			self.callback(message)
		end
	end
	function LogEventCallbackSink:SetMinLogLevel(logLevel)
		self.minLogLevel = logLevel
	end
end
return {
	LogEventCallbackSink = LogEventCallbackSink,
}
]]></string>
                        </Properties>
                      </Item>
                      <Item class="ModuleScript" referent="587">
                        <Properties>
                          <string name="Name">LogEventPropertyEnricher</string>
                          <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.2
local LogEventPropertyEnricher
do
	LogEventPropertyEnricher = setmetatable({}, {
		__tostring = function()
			return "LogEventPropertyEnricher"
		end,
	})
	LogEventPropertyEnricher.__index = LogEventPropertyEnricher
	function LogEventPropertyEnricher.new(...)
		local self = setmetatable({}, LogEventPropertyEnricher)
		return self:constructor(...) or self
	end
	function LogEventPropertyEnricher:constructor(propertyName, value)
		self.propertyName = propertyName
		self.value = value
	end
	function LogEventPropertyEnricher:Enrich(message, properties)
		local minLogLevel = self.minLogLevel
		if minLogLevel == nil or message.Level >= minLogLevel then
			local _propertyName = self.propertyName
			local _value = self.value
			-- ▼ Map.set ▼
			properties[_propertyName] = _value
			-- ▲ Map.set ▲
		end
	end
	function LogEventPropertyEnricher:SetMinLogLevel(minLogLevel)
		self.minLogLevel = minLogLevel
	end
end
return {
	LogEventPropertyEnricher = LogEventPropertyEnricher,
}
]]></string>
                        </Properties>
                      </Item>
                      <Item class="ModuleScript" referent="588">
                        <Properties>
                          <string name="Name">LogEventRobloxOutputSink</string>
                          <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.2
local TS = _G[script]
local _message_templates = TS.import(script, TS.getModule(script, "@rbxts", "message-templates").out)
local MessageTemplateParser = _message_templates.MessageTemplateParser
local PlainTextMessageTemplateRenderer = _message_templates.PlainTextMessageTemplateRenderer
local LogLevel = TS.import(script, script.Parent).LogLevel
local LogEventRobloxOutputSink
do
	LogEventRobloxOutputSink = setmetatable({}, {
		__tostring = function()
			return "LogEventRobloxOutputSink"
		end,
	})
	LogEventRobloxOutputSink.__index = LogEventRobloxOutputSink
	function LogEventRobloxOutputSink.new(...)
		local self = setmetatable({}, LogEventRobloxOutputSink)
		return self:constructor(...) or self
	end
	function LogEventRobloxOutputSink:constructor(options)
		self.options = options
	end
	function LogEventRobloxOutputSink:Emit(message)
		local _binding = self.options
		local TagFormat = _binding.TagFormat
		if TagFormat == nil then
			TagFormat = "short"
		end
		local ErrorsTreatedAsExceptions = _binding.ErrorsTreatedAsExceptions
		if message.Level >= LogLevel.Error and ErrorsTreatedAsExceptions then
			return nil
		end
		local template = PlainTextMessageTemplateRenderer.new(MessageTemplateParser.GetTokens(message.Template))
		local _time = DateTime.fromIsoDate(message.Timestamp)
		if _time ~= nil then
			_time = _time:FormatLocalTime("HH:mm:ss", "en-us")
		end
		local time = _time
		local tag
		local _exp = message.Level
		repeat
			if _exp == (LogLevel.Verbose) then
				tag = TagFormat == "short" and "VRB" or "VERBOSE"
				break
			end
			if _exp == (LogLevel.Debugging) then
				tag = TagFormat == "short" and "DBG" or "DEBUG"
				break
			end
			if _exp == (LogLevel.Information) then
				tag = TagFormat == "short" and "INF" or "INFO"
				break
			end
			if _exp == (LogLevel.Warning) then
				tag = TagFormat == "short" and "WRN" or "WARNING"
				break
			end
			if _exp == (LogLevel.Error) then
				tag = TagFormat == "short" and "ERR" or "ERROR"
				break
			end
			if _exp == (LogLevel.Fatal) then
				tag = TagFormat == "short" and "FTL" or "FATAL"
				break
			end
		until true
		local messageRendered = template:Render(message)
		local formattedMessage = "[" .. tag .. "] " .. messageRendered
		if message.Level >= LogLevel.Warning then
			warn(formattedMessage)
		else
			print(formattedMessage)
		end
	end
end
return {
	LogEventRobloxOutputSink = LogEventRobloxOutputSink,
}
]]></string>
                        </Properties>
                      </Item>
                    </Item>
                    <Item class="ModuleScript" referent="589">
                      <Properties>
                        <string name="Name">Logger</string>
                        <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.2
local TS = _G[script]
local MessageTemplateParser = TS.import(script, TS.getModule(script, "@rbxts", "message-templates").out.MessageTemplateParser).MessageTemplateParser
local _MessageTemplateToken = TS.import(script, TS.getModule(script, "@rbxts", "message-templates").out.MessageTemplateToken)
local DestructureMode = _MessageTemplateToken.DestructureMode
local TemplateTokenKind = _MessageTemplateToken.TemplateTokenKind
local LogLevel = TS.import(script, script.Parent, "Core").LogLevel
local LogConfiguration = TS.import(script, script.Parent, "Configuration").LogConfiguration
local PlainTextMessageTemplateRenderer = TS.import(script, TS.getModule(script, "@rbxts", "message-templates").out).PlainTextMessageTemplateRenderer
local RbxSerializer = TS.import(script, TS.getModule(script, "@rbxts", "message-templates").out.RbxSerializer).RbxSerializer
local Logger
do
	Logger = setmetatable({}, {
		__tostring = function()
			return "Logger"
		end,
	})
	Logger.__index = Logger
	function Logger.new(...)
		local self = setmetatable({}, Logger)
		return self:constructor(...) or self
	end
	function Logger:constructor()
		self.logLevel = LogLevel.Information
		self.sinks = {}
		self.enrichers = {}
	end
	function Logger:configure()
		return LogConfiguration.new(Logger.new())
	end
	function Logger:_setSinks(sinks)
		self.sinks = sinks
	end
	function Logger:_setEnrichers(enrichers)
		self.enrichers = enrichers
	end
	function Logger:_setMinLogLevel(logLevel)
		self.logLevel = logLevel
	end
	function Logger:default()
		return self.defaultLogger
	end
	function Logger:_serializeValue(value)
		if typeof(value) == "Vector3" then
			return {
				X = value.X,
				Y = value.Y,
				Z = value.Z,
			}
		elseif typeof(value) == "Vector2" then
			return {
				X = value.X,
				Y = value.Y,
			}
		elseif typeof(value) == "Instance" then
			return value:GetFullName()
		elseif typeof(value) == "EnumItem" then
			return tostring(value)
		elseif type(value) == "string" or type(value) == "number" or type(value) == "boolean" or type(value) == "table" then
			return value
		else
			return tostring(value)
		end
	end
	function Logger:Write(logLevel, template, ...)
		local args = { ... }
		local message = {
			Level = logLevel,
			SourceContext = nil,
			Template = template,
			Timestamp = DateTime.now():ToIsoDate(),
		}
		local tokens = MessageTemplateParser.GetTokens(template)
		local _arg0 = function(t)
			return t.kind == TemplateTokenKind.Property
		end
		-- ▼ ReadonlyArray.filter ▼
		local _newValue = {}
		local _length = 0
		for _k, _v in ipairs(tokens) do
			if _arg0(_v, _k - 1, tokens) == true then
				_length += 1
				_newValue[_length] = _v
			end
		end
		-- ▲ ReadonlyArray.filter ▲
		local propertyTokens = _newValue
		local idx = 0
		for _, token in ipairs(propertyTokens) do
			local _exp = args
			local _original = idx
			idx += 1
			local arg = _exp[_original + 1]
			if idx <= #args then
				if arg ~= nil then
					if token.destructureMode == DestructureMode.ToString then
						message[token.propertyName] = tostring(arg)
					else
						message[token.propertyName] = type(arg) == "table" and arg or RbxSerializer.Serialize(arg)
					end
				end
			end
		end
		for _, enricher in ipairs(self.enrichers) do
			local toApply = {}
			enricher:Enrich(message, toApply)
			for key, value in pairs(toApply) do
				message[key] = type(value) == "table" and value or RbxSerializer.Serialize(value)
			end
		end
		for _, sink in ipairs(self.sinks) do
			sink:Emit(message)
		end
		return PlainTextMessageTemplateRenderer.new(tokens):Render(message)
	end
	function Logger:GetLevel()
		return self.logLevel
	end
	function Logger:Verbose(template, ...)
		local args = { ... }
		if self:GetLevel() > LogLevel.Verbose then
			return nil
		end
		self:Write(LogLevel.Verbose, template, unpack(args))
	end
	function Logger:Info(template, ...)
		local args = { ... }
		if self:GetLevel() > LogLevel.Information then
			return nil
		end
		self:Write(LogLevel.Information, template, unpack(args))
	end
	function Logger:Debug(template, ...)
		local args = { ... }
		if self:GetLevel() > LogLevel.Debugging then
			return nil
		end
		self:Write(LogLevel.Debugging, template, unpack(args))
	end
	function Logger:Warn(template, ...)
		local args = { ... }
		if self:GetLevel() > LogLevel.Warning then
			return nil
		end
		self:Write(LogLevel.Warning, template, unpack(args))
	end
	function Logger:Error(template, ...)
		local args = { ... }
		if self:GetLevel() > LogLevel.Error then
			return nil
		end
		return self:Write(LogLevel.Error, template, unpack(args))
	end
	function Logger:Fatal(template, ...)
		local args = { ... }
		return self:Write(LogLevel.Fatal, template, unpack(args))
	end
	function Logger:Copy()
		local config = LogConfiguration.new(Logger.new())
		config:SetMinLogLevel(self:GetLevel())
		for _, sink in ipairs(self.sinks) do
			config:WriteTo(sink)
		end
		for _, enricher in ipairs(self.enrichers) do
			config:Enrich(enricher)
		end
		return config
	end
	function Logger:ForContext(context, contextConfiguration)
		local copy = self:Copy()
		local sourceContext
		if typeof(context) == "Instance" then
			sourceContext = context:GetFullName()
		else
			sourceContext = tostring(context)
		end
		local _result = contextConfiguration
		if _result ~= nil then
			_result(copy)
		end
		return copy:EnrichWithProperty("SourceContext", sourceContext):Create()
	end
	function Logger:ForScript(scriptContextConfiguration)
		local s = debug.info(2, "s")
		local copy = self:Copy()
		local _result = scriptContextConfiguration
		if _result ~= nil then
			_result(copy)
		end
		return copy:EnrichWithProperty("SourceContext", s):Create()
	end
	function Logger:ForFunction(func, funcContextConfiguration)
		local n = debug.info(func, "n")
		local copy = self:Copy()
		local _result = funcContextConfiguration
		if _result ~= nil then
			_result(copy)
		end
		local _fn = copy
		local _condition = n
		if _condition == nil then
			_condition = "<anonymous>"
		end
		return _fn:EnrichWithProperty("SourceContext", _condition)
	end
	function Logger:ForProperty(name, value)
		return self:Copy():EnrichWithProperty(name, value):Create()
	end
	Logger.defaultLogger = Logger.new()
end
return {
	Logger = Logger,
}
]]></string>
                      </Properties>
                    </Item>
                  </Item>
                </Item>
                <Item class="Folder" referent="590">
                  <Properties>
                    <string name="Name">roact</string>
                  </Properties>
                  <Item class="ModuleScript" referent="591">
                    <Properties>
                      <string name="Name">src</string>
                      <string name="Source"><![CDATA[--~strict
--[[
	Packages up the internals of Roact and exposes a public API for it.
]]

local GlobalConfig = require(script.GlobalConfig)
local createReconciler = require(script.createReconciler)
local createReconcilerCompat = require(script.createReconcilerCompat)
local RobloxRenderer = require(script.RobloxRenderer)
local strict = require(script.strict)
local Binding = require(script.Binding)

local robloxReconciler = createReconciler(RobloxRenderer)
local reconcilerCompat = createReconcilerCompat(robloxReconciler)

local Roact = strict({
	Component = require(script.Component),
	createElement = require(script.createElement),
	createFragment = require(script.createFragment),
	oneChild = require(script.oneChild),
	PureComponent = require(script.PureComponent),
	None = require(script.None),
	Portal = require(script.Portal),
	createRef = require(script.createRef),
	forwardRef = require(script.forwardRef),
	createBinding = Binding.create,
	joinBindings = Binding.join,
	createContext = require(script.createContext),

	Change = require(script.PropMarkers.Change),
	Children = require(script.PropMarkers.Children),
	Event = require(script.PropMarkers.Event),
	Ref = require(script.PropMarkers.Ref),

	mount = robloxReconciler.mountVirtualTree,
	unmount = robloxReconciler.unmountVirtualTree,
	update = robloxReconciler.updateVirtualTree,

	reify = reconcilerCompat.reify,
	teardown = reconcilerCompat.teardown,
	reconcile = reconcilerCompat.reconcile,

	setGlobalConfig = GlobalConfig.set,

	-- APIs that may change in the future without warning
	UNSTABLE = {},
})

return Roact
]]></string>
                    </Properties>
                    <Item class="ModuleScript" referent="592">
                      <Properties>
                        <string name="Name">Binding</string>
                        <string name="Source"><![CDATA[local createSignal = require(script.Parent.createSignal)
local Symbol = require(script.Parent.Symbol)
local Type = require(script.Parent.Type)

local config = require(script.Parent.GlobalConfig).get()

local BindingImpl = Symbol.named("BindingImpl")

local BindingInternalApi = {}

local bindingPrototype = {}

function bindingPrototype:getValue()
	return BindingInternalApi.getValue(self)
end

function bindingPrototype:map(predicate)
	return BindingInternalApi.map(self, predicate)
end

local BindingPublicMeta = {
	__index = bindingPrototype,
	__tostring = function(self)
		return string.format("RoactBinding(%s)", tostring(self:getValue()))
	end,
}

function BindingInternalApi.update(binding, newValue)
	return binding[BindingImpl].update(newValue)
end

function BindingInternalApi.subscribe(binding, callback)
	return binding[BindingImpl].subscribe(callback)
end

function BindingInternalApi.getValue(binding)
	return binding[BindingImpl].getValue()
end

function BindingInternalApi.create(initialValue)
	local impl = {
		value = initialValue,
		changeSignal = createSignal(),
	}

	function impl.subscribe(callback)
		return impl.changeSignal:subscribe(callback)
	end

	function impl.update(newValue)
		impl.value = newValue
		impl.changeSignal:fire(newValue)
	end

	function impl.getValue()
		return impl.value
	end

	return setmetatable({
		[Type] = Type.Binding,
		[BindingImpl] = impl,
	}, BindingPublicMeta), impl.update
end

function BindingInternalApi.map(upstreamBinding, predicate)
	if config.typeChecks then
		assert(Type.of(upstreamBinding) == Type.Binding, "Expected arg #1 to be a binding")
		assert(typeof(predicate) == "function", "Expected arg #1 to be a function")
	end

	local impl = {}

	function impl.subscribe(callback)
		return BindingInternalApi.subscribe(upstreamBinding, function(newValue)
			callback(predicate(newValue))
		end)
	end

	function impl.update(_newValue)
		error("Bindings created by Binding:map(fn) cannot be updated directly", 2)
	end

	function impl.getValue()
		return predicate(upstreamBinding:getValue())
	end

	return setmetatable({
		[Type] = Type.Binding,
		[BindingImpl] = impl,
	}, BindingPublicMeta)
end

function BindingInternalApi.join(upstreamBindings)
	if config.typeChecks then
		assert(typeof(upstreamBindings) == "table", "Expected arg #1 to be of type table")

		for key, value in pairs(upstreamBindings) do
			if Type.of(value) ~= Type.Binding then
				local message = ("Expected arg #1 to contain only bindings, but key %q had a non-binding value"):format(
					tostring(key)
				)
				error(message, 2)
			end
		end
	end

	local impl = {}

	local function getValue()
		local value = {}

		for key, upstream in pairs(upstreamBindings) do
			value[key] = upstream:getValue()
		end

		return value
	end

	function impl.subscribe(callback)
		local disconnects = {}

		for key, upstream in pairs(upstreamBindings) do
			disconnects[key] = BindingInternalApi.subscribe(upstream, function(_newValue)
				callback(getValue())
			end)
		end

		return function()
			if disconnects == nil then
				return
			end

			for _, disconnect in pairs(disconnects) do
				disconnect()
			end

			disconnects = nil
		end
	end

	function impl.update(_newValue)
		error("Bindings created by joinBindings(...) cannot be updated directly", 2)
	end

	function impl.getValue()
		return getValue()
	end

	return setmetatable({
		[Type] = Type.Binding,
		[BindingImpl] = impl,
	}, BindingPublicMeta)
end

return BindingInternalApi
]]></string>
                      </Properties>
                    </Item>
                    <Item class="ModuleScript" referent="593">
                      <Properties>
                        <string name="Name">Component</string>
                        <string name="Source"><![CDATA[local assign = require(script.Parent.assign)
local ComponentLifecyclePhase = require(script.Parent.ComponentLifecyclePhase)
local Type = require(script.Parent.Type)
local Symbol = require(script.Parent.Symbol)
local invalidSetStateMessages = require(script.Parent.invalidSetStateMessages)
local internalAssert = require(script.Parent.internalAssert)

local config = require(script.Parent.GlobalConfig).get()

--[[
	Calling setState during certain lifecycle allowed methods has the potential
	to create an infinitely updating component. Rather than time out, we exit
	with an error if an unreasonable number of self-triggering updates occur
]]
local MAX_PENDING_UPDATES = 100

local InternalData = Symbol.named("InternalData")

local componentMissingRenderMessage = [[
The component %q is missing the `render` method.
`render` must be defined when creating a Roact component!]]

local tooManyUpdatesMessage = [[
The component %q has reached the setState update recursion limit.
When using `setState` in `didUpdate`, make sure that it won't repeat infinitely!]]

local componentClassMetatable = {}

function componentClassMetatable:__tostring()
	return self.__componentName
end

local Component = {}
setmetatable(Component, componentClassMetatable)

Component[Type] = Type.StatefulComponentClass
Component.__index = Component
Component.__componentName = "Component"

--[[
	A method called by consumers of Roact to create a new component class.
	Components can not be extended beyond this point, with the exception of
	PureComponent.
]]
function Component:extend(name)
	if config.typeChecks then
		assert(Type.of(self) == Type.StatefulComponentClass, "Invalid `self` argument to `extend`.")
		assert(typeof(name) == "string", "Component class name must be a string")
	end

	local class = {}

	for key, value in pairs(self) do
		-- Roact opts to make consumers use composition over inheritance, which
		-- lines up with React.
		-- https://reactjs.org/docs/composition-vs-inheritance.html
		if key ~= "extend" then
			class[key] = value
		end
	end

	class[Type] = Type.StatefulComponentClass
	class.__index = class
	class.__componentName = name

	setmetatable(class, componentClassMetatable)

	return class
end

function Component:__getDerivedState(incomingProps, incomingState)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__getDerivedState`")
	end

	local internalData = self[InternalData]
	local componentClass = internalData.componentClass

	if componentClass.getDerivedStateFromProps ~= nil then
		local derivedState = componentClass.getDerivedStateFromProps(incomingProps, incomingState)

		if derivedState ~= nil then
			if config.typeChecks then
				assert(typeof(derivedState) == "table", "getDerivedStateFromProps must return a table!")
			end

			return derivedState
		end
	end

	return nil
end

function Component:setState(mapState)
	if config.typeChecks then
		assert(Type.of(self) == Type.StatefulComponentInstance, "Invalid `self` argument to `extend`.")
	end

	local internalData = self[InternalData]
	local lifecyclePhase = internalData.lifecyclePhase

	--[[
		When preparing to update, rendering, or unmounting, it is not safe
		to call `setState` as it will interfere with in-flight updates. It's
		also disallowed during unmounting
	]]
	if
		lifecyclePhase == ComponentLifecyclePhase.ShouldUpdate
		or lifecyclePhase == ComponentLifecyclePhase.WillUpdate
		or lifecyclePhase == ComponentLifecyclePhase.Render
		or lifecyclePhase == ComponentLifecyclePhase.WillUnmount
	then
		local messageTemplate = invalidSetStateMessages[internalData.lifecyclePhase]

		local message = messageTemplate:format(tostring(internalData.componentClass))

		error(message, 2)
	end

	local pendingState = internalData.pendingState

	local partialState
	if typeof(mapState) == "function" then
		partialState = mapState(pendingState or self.state, self.props)

		-- Abort the state update if the given state updater function returns nil
		if partialState == nil then
			return
		end
	elseif typeof(mapState) == "table" then
		partialState = mapState
	else
		error("Invalid argument to setState, expected function or table", 2)
	end

	local newState
	if pendingState ~= nil then
		newState = assign(pendingState, partialState)
	else
		newState = assign({}, self.state, partialState)
	end

	if lifecyclePhase == ComponentLifecyclePhase.Init then
		-- If `setState` is called in `init`, we can skip triggering an update!
		local derivedState = self:__getDerivedState(self.props, newState)
		self.state = assign(newState, derivedState)
	elseif
		lifecyclePhase == ComponentLifecyclePhase.DidMount
		or lifecyclePhase == ComponentLifecyclePhase.DidUpdate
		or lifecyclePhase == ComponentLifecyclePhase.ReconcileChildren
	then
		--[[
			During certain phases of the component lifecycle, it's acceptable to
			allow `setState` but defer the update until we're done with ones in flight.
			We do this by collapsing it into any pending updates we have.
		]]
		local derivedState = self:__getDerivedState(self.props, newState)
		internalData.pendingState = assign(newState, derivedState)
	elseif lifecyclePhase == ComponentLifecyclePhase.Idle then
		-- Outside of our lifecycle, the state update is safe to make immediately
		self:__update(nil, newState)
	else
		local messageTemplate = invalidSetStateMessages.default

		local message = messageTemplate:format(tostring(internalData.componentClass))

		error(message, 2)
	end
end

--[[
	Returns the stack trace of where the element was created that this component
	instance's properties are based on.

	Intended to be used primarily by diagnostic tools.
]]
function Component:getElementTraceback()
	return self[InternalData].virtualNode.currentElement.source
end

--[[
	Returns a snapshot of this component given the current props and state. Must
	be overridden by consumers of Roact and should be a pure function with
	regards to props and state.

	TODO (#199): Accept props and state as arguments.
]]
function Component:render()
	local internalData = self[InternalData]

	local message = componentMissingRenderMessage:format(tostring(internalData.componentClass))

	error(message, 0)
end

--[[
	Retrieves the context value corresponding to the given key. Can return nil
	if a requested context key is not present
]]
function Component:__getContext(key)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__getContext`")
		internalAssert(key ~= nil, "Context key cannot be nil")
	end

	local virtualNode = self[InternalData].virtualNode
	local context = virtualNode.context

	return context[key]
end

--[[
	Adds a new context entry to this component's context table (which will be
	passed down to child components).
]]
function Component:__addContext(key, value)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__addContext`")
	end
	local virtualNode = self[InternalData].virtualNode

	-- Make sure we store a reference to the component's original, unmodified
	-- context the virtual node. In the reconciler, we'll restore the original
	-- context if we need to replace the node (this happens when a node gets
	-- re-rendered as a different component)
	if virtualNode.originalContext == nil then
		virtualNode.originalContext = virtualNode.context
	end

	-- Build a new context table on top of the existing one, then apply it to
	-- our virtualNode
	local existing = virtualNode.context
	virtualNode.context = assign({}, existing, { [key] = value })
end

--[[
	Performs property validation if the static method validateProps is declared.
	validateProps should follow assert's expected arguments:
	(false, message: string) | true. The function may return a message in the
	true case; it will be ignored. If this fails, the function will throw the
	error.
]]
function Component:__validateProps(props)
	if not config.propValidation then
		return
	end

	local validator = self[InternalData].componentClass.validateProps

	if validator == nil then
		return
	end

	if typeof(validator) ~= "function" then
		error(
			("validateProps must be a function, but it is a %s.\nCheck the definition of the component %q."):format(
				typeof(validator),
				self.__componentName
			)
		)
	end

	local success, failureReason = validator(props)

	if not success then
		failureReason = failureReason or "<Validator function did not supply a message>"
		error(
			("Property validation failed in %s: %s\n\n%s"):format(
				self.__componentName,
				tostring(failureReason),
				self:getElementTraceback() or "<enable element tracebacks>"
			),
			0
		)
	end
end

--[[
	An internal method used by the reconciler to construct a new component
	instance and attach it to the given virtualNode.
]]
function Component:__mount(reconciler, virtualNode)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentClass, "Invalid use of `__mount`")
		internalAssert(Type.of(virtualNode) == Type.VirtualNode, "Expected arg #2 to be of type VirtualNode")
	end

	local currentElement = virtualNode.currentElement
	local hostParent = virtualNode.hostParent

	-- Contains all the information that we want to keep from consumers of
	-- Roact, or even other parts of the codebase like the reconciler.
	local internalData = {
		reconciler = reconciler,
		virtualNode = virtualNode,
		componentClass = self,
		lifecyclePhase = ComponentLifecyclePhase.Init,
	}

	local instance = {
		[Type] = Type.StatefulComponentInstance,
		[InternalData] = internalData,
	}

	setmetatable(instance, self)

	virtualNode.instance = instance

	local props = currentElement.props

	if self.defaultProps ~= nil then
		props = assign({}, self.defaultProps, props)
	end

	instance:__validateProps(props)

	instance.props = props

	local newContext = assign({}, virtualNode.legacyContext)
	instance._context = newContext

	instance.state = assign({}, instance:__getDerivedState(instance.props, {}))

	if instance.init ~= nil then
		instance:init(instance.props)
		assign(instance.state, instance:__getDerivedState(instance.props, instance.state))
	end

	-- It's possible for init() to redefine _context!
	virtualNode.legacyContext = instance._context

	internalData.lifecyclePhase = ComponentLifecyclePhase.Render
	local renderResult = instance:render()

	internalData.lifecyclePhase = ComponentLifecyclePhase.ReconcileChildren
	reconciler.updateVirtualNodeWithRenderResult(virtualNode, hostParent, renderResult)

	if instance.didMount ~= nil then
		internalData.lifecyclePhase = ComponentLifecyclePhase.DidMount
		instance:didMount()
	end

	if internalData.pendingState ~= nil then
		-- __update will handle pendingState, so we don't pass any new element or state
		instance:__update(nil, nil)
	end

	internalData.lifecyclePhase = ComponentLifecyclePhase.Idle
end

--[[
	Internal method used by the reconciler to clean up any resources held by
	this component instance.
]]
function Component:__unmount()
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__unmount`")
	end

	local internalData = self[InternalData]
	local virtualNode = internalData.virtualNode
	local reconciler = internalData.reconciler

	if self.willUnmount ~= nil then
		internalData.lifecyclePhase = ComponentLifecyclePhase.WillUnmount
		self:willUnmount()
	end

	for _, childNode in pairs(virtualNode.children) do
		reconciler.unmountVirtualNode(childNode)
	end
end

--[[
	Internal method used by setState (to trigger updates based on state) and by
	the reconciler (to trigger updates based on props)

	Returns true if the update was completed, false if it was cancelled by shouldUpdate
]]
function Component:__update(updatedElement, updatedState)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__update`")
		internalAssert(
			Type.of(updatedElement) == Type.Element or updatedElement == nil,
			"Expected arg #1 to be of type Element or nil"
		)
		internalAssert(
			typeof(updatedState) == "table" or updatedState == nil,
			"Expected arg #2 to be of type table or nil"
		)
	end

	local internalData = self[InternalData]
	local componentClass = internalData.componentClass

	local newProps = self.props
	if updatedElement ~= nil then
		newProps = updatedElement.props

		if componentClass.defaultProps ~= nil then
			newProps = assign({}, componentClass.defaultProps, newProps)
		end

		self:__validateProps(newProps)
	end

	local updateCount = 0
	repeat
		local finalState
		local pendingState = nil

		-- Consume any pending state we might have
		if internalData.pendingState ~= nil then
			pendingState = internalData.pendingState
			internalData.pendingState = nil
		end

		-- Consume a standard update to state or props
		if updatedState ~= nil or newProps ~= self.props then
			if pendingState == nil then
				finalState = updatedState or self.state
			else
				finalState = assign(pendingState, updatedState)
			end

			local derivedState = self:__getDerivedState(newProps, finalState)

			if derivedState ~= nil then
				finalState = assign({}, finalState, derivedState)
			end

			updatedState = nil
		else
			finalState = pendingState
		end

		if not self:__resolveUpdate(newProps, finalState) then
			-- If the update was short-circuited, bubble the result up to the caller
			return false
		end

		updateCount = updateCount + 1

		if updateCount > MAX_PENDING_UPDATES then
			error(tooManyUpdatesMessage:format(tostring(internalData.componentClass)), 3)
		end
	until internalData.pendingState == nil

	return true
end

--[[
	Internal method used by __update to apply new props and state

	Returns true if the update was completed, false if it was cancelled by shouldUpdate
]]
function Component:__resolveUpdate(incomingProps, incomingState)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__resolveUpdate`")
	end

	local internalData = self[InternalData]
	local virtualNode = internalData.virtualNode
	local reconciler = internalData.reconciler

	local oldProps = self.props
	local oldState = self.state

	if incomingProps == nil then
		incomingProps = oldProps
	end
	if incomingState == nil then
		incomingState = oldState
	end

	if self.shouldUpdate ~= nil then
		internalData.lifecyclePhase = ComponentLifecyclePhase.ShouldUpdate
		local continueWithUpdate = self:shouldUpdate(incomingProps, incomingState)

		if not continueWithUpdate then
			internalData.lifecyclePhase = ComponentLifecyclePhase.Idle
			return false
		end
	end

	if self.willUpdate ~= nil then
		internalData.lifecyclePhase = ComponentLifecyclePhase.WillUpdate
		self:willUpdate(incomingProps, incomingState)
	end

	internalData.lifecyclePhase = ComponentLifecyclePhase.Render

	self.props = incomingProps
	self.state = incomingState

	local renderResult = virtualNode.instance:render()

	internalData.lifecyclePhase = ComponentLifecyclePhase.ReconcileChildren
	reconciler.updateVirtualNodeWithRenderResult(virtualNode, virtualNode.hostParent, renderResult)

	if self.didUpdate ~= nil then
		internalData.lifecyclePhase = ComponentLifecyclePhase.DidUpdate
		self:didUpdate(oldProps, oldState)
	end

	internalData.lifecyclePhase = ComponentLifecyclePhase.Idle
	return true
end

return Component
]]></string>
                      </Properties>
                    </Item>
                    <Item class="ModuleScript" referent="594">
                      <Properties>
                        <string name="Name">ComponentLifecyclePhase</string>
                        <string name="Source"><![CDATA[local Symbol = require(script.Parent.Symbol)
local strict = require(script.Parent.strict)

local ComponentLifecyclePhase = strict({
	-- Component methods
	Init = Symbol.named("init"),
	Render = Symbol.named("render"),
	ShouldUpdate = Symbol.named("shouldUpdate"),
	WillUpdate = Symbol.named("willUpdate"),
	DidMount = Symbol.named("didMount"),
	DidUpdate = Symbol.named("didUpdate"),
	WillUnmount = Symbol.named("willUnmount"),

	-- Phases describing reconciliation status
	ReconcileChildren = Symbol.named("reconcileChildren"),
	Idle = Symbol.named("idle"),
}, "ComponentLifecyclePhase")

return ComponentLifecyclePhase
]]></string>
                      </Properties>
                    </Item>
                    <Item class="ModuleScript" referent="595">
                      <Properties>
                        <string name="Name">Config</string>
                        <string name="Source"><![CDATA[--[[
	Exposes an interface to set global configuration values for Roact.

	Configuration can only occur once, and should only be done by an application
	using Roact, not a library.

	Any keys that aren't recognized will cause errors. Configuration is only
	intended for configuring Roact itself, not extensions or libraries.

	Configuration is expected to be set immediately after loading Roact. Setting
	configuration values after an application starts may produce unpredictable
	behavior.
]]

-- Every valid configuration value should be non-nil in this table.
local defaultConfig = {
	-- Enables asserts for internal Roact APIs. Useful for debugging Roact itself.
	["internalTypeChecks"] = false,
	-- Enables stricter type asserts for Roact's public API.
	["typeChecks"] = false,
	-- Enables storage of `debug.traceback()` values on elements for debugging.
	["elementTracing"] = false,
	-- Enables validation of component props in stateful components.
	["propValidation"] = false,
}

-- Build a list of valid configuration values up for debug messages.
local defaultConfigKeys = {}
for key in pairs(defaultConfig) do
	table.insert(defaultConfigKeys, key)
end

local Config = {}

function Config.new()
	local self = {}

	self._currentConfig = setmetatable({}, {
		__index = function(_, key)
			local message = ("Invalid global configuration key %q. Valid configuration keys are: %s"):format(
				tostring(key),
				table.concat(defaultConfigKeys, ", ")
			)

			error(message, 3)
		end,
	})

	-- We manually bind these methods here so that the Config's methods can be
	-- used without passing in self, since they eventually get exposed on the
	-- root Roact object.
	self.set = function(...)
		return Config.set(self, ...)
	end

	self.get = function(...)
		return Config.get(self, ...)
	end

	self.scoped = function(...)
		return Config.scoped(self, ...)
	end

	self.set(defaultConfig)

	return self
end

function Config:set(configValues)
	-- Validate values without changing any configuration.
	-- We only want to apply this configuration if it's valid!
	for key, value in pairs(configValues) do
		if defaultConfig[key] == nil then
			local message = ("Invalid global configuration key %q (type %s). Valid configuration keys are: %s"):format(
				tostring(key),
				typeof(key),
				table.concat(defaultConfigKeys, ", ")
			)

			error(message, 3)
		end

		-- Right now, all configuration values must be boolean.
		if typeof(value) ~= "boolean" then
			local message = (
				"Invalid value %q (type %s) for global configuration key %q. Valid values are: true, false"
			):format(tostring(value), typeof(value), tostring(key))

			error(message, 3)
		end

		self._currentConfig[key] = value
	end
end

function Config:get()
	return self._currentConfig
end

function Config:scoped(configValues, callback)
	local previousValues = {}
	for key, value in pairs(self._currentConfig) do
		previousValues[key] = value
	end

	self.set(configValues)

	local success, result = pcall(callback)

	self.set(previousValues)

	assert(success, result)
end

return Config
]]></string>
                      </Properties>
                    </Item>
                    <Item class="ModuleScript" referent="596">
                      <Properties>
                        <string name="Name">ElementKind</string>
                        <string name="Source"><![CDATA[--[[
	Contains markers for annotating the type of an element.

	Use `ElementKind` as a key, and values from it as the value.

		local element = {
			[ElementKind] = ElementKind.Host,
		}
]]

local Symbol = require(script.Parent.Symbol)
local strict = require(script.Parent.strict)
local Portal = require(script.Parent.Portal)

local ElementKind = newproxy(true)

local ElementKindInternal = {
	Portal = Symbol.named("Portal"),
	Host = Symbol.named("Host"),
	Function = Symbol.named("Function"),
	Stateful = Symbol.named("Stateful"),
	Fragment = Symbol.named("Fragment"),
}

function ElementKindInternal.of(value)
	if typeof(value) ~= "table" then
		return nil
	end

	return value[ElementKind]
end

local componentTypesToKinds = {
	["string"] = ElementKindInternal.Host,
	["function"] = ElementKindInternal.Function,
	["table"] = ElementKindInternal.Stateful,
}

function ElementKindInternal.fromComponent(component)
	if component == Portal then
		return ElementKind.Portal
	else
		return componentTypesToKinds[typeof(component)]
	end
end

getmetatable(ElementKind).__index = ElementKindInternal

strict(ElementKindInternal, "ElementKind")

return ElementKind
]]></string>
                      </Properties>
                    </Item>
                    <Item class="ModuleScript" referent="597">
                      <Properties>
                        <string name="Name">ElementUtils</string>
                        <string name="Source"><![CDATA[local Type = require(script.Parent.Type)
local Symbol = require(script.Parent.Symbol)

local function noop()
	return nil
end

local ElementUtils = {}

--[[
	A signal value indicating that a child should use its parent's key, because
	it has no key of its own.

	This occurs when you return only one element from a function component or
	stateful render function.
]]
ElementUtils.UseParentKey = Symbol.named("UseParentKey")

--[[
	Returns an iterator over the children of an element.
	`elementOrElements` may be one of:
	* a boolean
	* nil
	* a single element
	* a fragment
	* a table of elements

	If `elementOrElements` is a boolean or nil, this will return an iterator with
	zero elements.

	If `elementOrElements` is a single element, this will return an iterator with
	one element: a tuple where the first value is ElementUtils.UseParentKey, and
	the second is the value of `elementOrElements`.

	If `elementOrElements` is a fragment or a table, this will return an iterator
	over all the elements of the array.

	If `elementOrElements` is none of the above, this function will throw.
]]
function ElementUtils.iterateElements(elementOrElements)
	local richType = Type.of(elementOrElements)

	-- Single child
	if richType == Type.Element then
		local called = false

		return function()
			if called then
				return nil
			else
				called = true
				return ElementUtils.UseParentKey, elementOrElements
			end
		end
	end

	local regularType = typeof(elementOrElements)

	if elementOrElements == nil or regularType == "boolean" then
		return noop
	end

	if regularType == "table" then
		return pairs(elementOrElements)
	end

	error("Invalid elements")
end

--[[
	Gets the child corresponding to a given key, respecting Roact's rules for
	children. Specifically:
	* If `elements` is nil or a boolean, this will return `nil`, regardless of
		the key given.
	* If `elements` is a single element, this will return `nil`, unless the key
		is ElementUtils.UseParentKey.
	* If `elements` is a table of elements, this will return `elements[key]`.
]]
function ElementUtils.getElementByKey(elements, hostKey)
	if elements == nil or typeof(elements) == "boolean" then
		return nil
	end

	if Type.of(elements) == Type.Element then
		if hostKey == ElementUtils.UseParentKey then
			return elements
		end

		return nil
	end

	if typeof(elements) == "table" then
		return elements[hostKey]
	end

	error("Invalid elements")
end

return ElementUtils
]]></string>
                      </Properties>
                    </Item>
                    <Item class="ModuleScript" referent="598">
                      <Properties>
                        <string name="Name">GlobalConfig</string>
                        <string name="Source"><![CDATA[--[[
	Exposes a single instance of a configuration as Roact's GlobalConfig.
]]

local Config = require(script.Parent.Config)

return Config.new()
]]></string>
                      </Properties>
                    </Item>
                    <Item class="ModuleScript" referent="599">
                      <Properties>
                        <string name="Name">Logging</string>
                        <string name="Source"><![CDATA[--[[
	Centralized place to handle logging. Lets us:
	- Unit test log output via `Logging.capture`
	- Disable verbose log messages when not debugging Roact

	This should be broken out into a separate library with the addition of
	scoping and logging configuration.
]]

-- Determines whether log messages will go to stdout/stderr
local outputEnabled = true

-- A set of LogInfo objects that should have messages inserted into them.
-- This is a set so that nested calls to Logging.capture will behave.
local collectors = {}

-- A set of all stack traces that have called warnOnce.
local onceUsedLocations = {}

--[[
	Indent a potentially multi-line string with the given number of tabs, in
	addition to any indentation the string already has.
]]
local function indent(source, indentLevel)
	local indentString = ("\t"):rep(indentLevel)

	return indentString .. source:gsub("\n", "\n" .. indentString)
end

--[[
	Indents a list of strings and then concatenates them together with newlines
	into a single string.
]]
local function indentLines(lines, indentLevel)
	local outputBuffer = {}

	for _, line in ipairs(lines) do
		table.insert(outputBuffer, indent(line, indentLevel))
	end

	return table.concat(outputBuffer, "\n")
end

local logInfoMetatable = {}

--[[
	Automatic coercion to strings for LogInfo objects to enable debugging them
	more easily.
]]
function logInfoMetatable:__tostring()
	local outputBuffer = { "LogInfo {" }

	local errorCount = #self.errors
	local warningCount = #self.warnings
	local infosCount = #self.infos

	if errorCount + warningCount + infosCount == 0 then
		table.insert(outputBuffer, "\t(no messages)")
	end

	if errorCount > 0 then
		table.insert(outputBuffer, ("\tErrors (%d) {"):format(errorCount))
		table.insert(outputBuffer, indentLines(self.errors, 2))
		table.insert(outputBuffer, "\t}")
	end

	if warningCount > 0 then
		table.insert(outputBuffer, ("\tWarnings (%d) {"):format(warningCount))
		table.insert(outputBuffer, indentLines(self.warnings, 2))
		table.insert(outputBuffer, "\t}")
	end

	if infosCount > 0 then
		table.insert(outputBuffer, ("\tInfos (%d) {"):format(infosCount))
		table.insert(outputBuffer, indentLines(self.infos, 2))
		table.insert(outputBuffer, "\t}")
	end

	table.insert(outputBuffer, "}")

	return table.concat(outputBuffer, "\n")
end

local function createLogInfo()
	local logInfo = {
		errors = {},
		warnings = {},
		infos = {},
	}

	setmetatable(logInfo, logInfoMetatable)

	return logInfo
end

local Logging = {}

--[[
	Invokes `callback`, capturing all output that happens during its execution.

	Output will not go to stdout or stderr and will instead be put into a
	LogInfo object that is returned. If `callback` throws, the error will be
	bubbled up to the caller of `Logging.capture`.
]]
function Logging.capture(callback)
	local collector = createLogInfo()

	local wasOutputEnabled = outputEnabled
	outputEnabled = false
	collectors[collector] = true

	local success, result = pcall(callback)

	collectors[collector] = nil
	outputEnabled = wasOutputEnabled

	assert(success, result)

	return collector
end

--[[
	Issues a warning with an automatically attached stack trace.
]]
function Logging.warn(messageTemplate, ...)
	local message = messageTemplate:format(...)

	for collector in pairs(collectors) do
		table.insert(collector.warnings, message)
	end

	-- debug.traceback inserts a leading newline, so we trim it here
	local trace = debug.traceback("", 2):sub(2)
	local fullMessage = ("%s\n%s"):format(message, indent(trace, 1))

	if outputEnabled then
		warn(fullMessage)
	end
end

--[[
	Issues a warning like `Logging.warn`, but only outputs once per call site.

	This is useful for marking deprecated functions that might be called a lot;
	using `warnOnce` instead of `warn` will reduce output noise while still
	correctly marking all call sites.
]]
function Logging.warnOnce(messageTemplate, ...)
	local trace = debug.traceback()

	if onceUsedLocations[trace] then
		return
	end

	onceUsedLocations[trace] = true
	Logging.warn(messageTemplate, ...)
end

return Logging
]]></string>
                      </Properties>
                    </Item>
                    <Item class="ModuleScript" referent="600">
                      <Properties>
                        <string name="Name">None</string>
                        <string name="Source"><![CDATA[local Symbol = require(script.Parent.Symbol)

-- Marker used to specify that the value is nothing, because nil cannot be
-- stored in tables.
local None = Symbol.named("None")

return None
]]></string>
                      </Properties>
                    </Item>
                    <Item class="ModuleScript" referent="601">
                      <Properties>
                        <string name="Name">NoopRenderer</string>
                        <string name="Source"><![CDATA[--[[
	Reference renderer intended for use in tests as well as for documenting the
	minimum required interface for a Roact renderer.
]]

local NoopRenderer = {}

function NoopRenderer.isHostObject(target)
	-- Attempting to use NoopRenderer to target a Roblox instance is almost
	-- certainly a mistake.
	return target == nil
end

function NoopRenderer.mountHostNode(_reconciler, _node) end

function NoopRenderer.unmountHostNode(_reconciler, _node) end

function NoopRenderer.updateHostNode(_reconciler, node, _newElement)
	return node
end

return NoopRenderer
]]></string>
                      </Properties>
                    </Item>
                    <Item class="ModuleScript" referent="602">
                      <Properties>
                        <string name="Name">Portal</string>
                        <string name="Source"><![CDATA[local Symbol = require(script.Parent.Symbol)

local Portal = Symbol.named("Portal")

return Portal
]]></string>
                      </Properties>
                    </Item>
                    <Item class="Folder" referent="603">
                      <Properties>
                        <string name="Name">PropMarkers</string>
                      </Properties>
                      <Item class="ModuleScript" referent="604">
                        <Properties>
                          <string name="Name">Change</string>
                          <string name="Source"><![CDATA[--[[
	Change is used to generate special prop keys that can be used to connect to
	GetPropertyChangedSignal.

	Generally, Change is indexed by a Roblox property name:

		Roact.createElement("TextBox", {
			[Roact.Change.Text] = function(rbx)
				print("The TextBox", rbx, "changed text to", rbx.Text)
			end,
		})
]]

local Type = require(script.Parent.Parent.Type)

local Change = {}

local changeMetatable = {
	__tostring = function(self)
		return ("RoactHostChangeEvent(%s)"):format(self.name)
	end,
}

setmetatable(Change, {
	__index = function(_self, propertyName)
		local changeListener = {
			[Type] = Type.HostChangeEvent,
			name = propertyName,
		}

		setmetatable(changeListener, changeMetatable)
		Change[propertyName] = changeListener

		return changeListener
	end,
})

return Change
]]></string>
                        </Properties>
                      </Item>
                      <Item class="ModuleScript" referent="605">
                        <Properties>
                          <string name="Name">Children</string>
                          <string name="Source"><![CDATA[local Symbol = require(script.Parent.Parent.Symbol)

local Children = Symbol.named("Children")

return Children
]]></string>
                        </Properties>
                      </Item>
                      <Item class="ModuleScript" referent="606">
                        <Properties>
                          <string name="Name">Event</string>
                          <string name="Source"><![CDATA[--[[
	Index into `Event` to get a prop key for attaching to an event on a Roblox
	Instance.

	Example:

		Roact.createElement("TextButton", {
			Text = "Hello, world!",

			[Roact.Event.MouseButton1Click] = function(rbx)
				print("Clicked", rbx)
			end
		})
]]

local Type = require(script.Parent.Parent.Type)

local Event = {}

local eventMetatable = {
	__tostring = function(self)
		return ("RoactHostEvent(%s)"):format(self.name)
	end,
}

setmetatable(Event, {
	__index = function(_self, eventName)
		local event = {
			[Type] = Type.HostEvent,
			name = eventName,
		}

		setmetatable(event, eventMetatable)

		Event[eventName] = event

		return event
	end,
})

return Event
]]></string>
                        </Properties>
                      </Item>
                      <Item class="ModuleScript" referent="607">
                        <Properties>
                          <string name="Name">Ref</string>
                          <string name="Source"><![CDATA[local Symbol = require(script.Parent.Parent.Symbol)

local Ref = Symbol.named("Ref")

return Ref
]]></string>
                        </Properties>
                      </Item>
                    </Item>
                    <Item class="ModuleScript" referent="608">
                      <Properties>
                        <string name="Name">PureComponent</string>
                        <string name="Source"><![CDATA[--[[
	A version of Component with a `shouldUpdate` method that forces the
	resulting component to be pure.
]]

local Component = require(script.Parent.Component)

local PureComponent = Component:extend("PureComponent")

-- When extend()ing a component, you don't get an extend method.
-- This is to promote composition over inheritance.
-- PureComponent is an exception to this rule.
PureComponent.extend = Component.extend

function PureComponent:shouldUpdate(newProps, newState)
	-- In a vast majority of cases, if state updated, something has updated.
	-- We don't bother checking in this case.
	if newState ~= self.state then
		return true
	end

	if newProps == self.props then
		return false
	end

	for key, value in pairs(newProps) do
		if self.props[key] ~= value then
			return true
		end
	end

	for key, value in pairs(self.props) do
		if newProps[key] ~= value then
			return true
		end
	end

	return false
end

return PureComponent
]]></string>
                      </Properties>
                    </Item>
                    <Item class="ModuleScript" referent="609">
                      <Properties>
                        <string name="Name">RobloxRenderer</string>
                        <string name="Source"><![CDATA[--[[
	Renderer that deals in terms of Roblox Instances. This is the most
	well-supported renderer after NoopRenderer and is currently the only
	renderer that does anything.
]]

local Binding = require(script.Parent.Binding)
local Children = require(script.Parent.PropMarkers.Children)
local ElementKind = require(script.Parent.ElementKind)
local SingleEventManager = require(script.Parent.SingleEventManager)
local getDefaultInstanceProperty = require(script.Parent.getDefaultInstanceProperty)
local Ref = require(script.Parent.PropMarkers.Ref)
local Type = require(script.Parent.Type)
local internalAssert = require(script.Parent.internalAssert)

local config = require(script.Parent.GlobalConfig).get()

local applyPropsError = [[
Error applying props:
	%s
In element:
%s
]]

local updatePropsError = [[
Error updating props:
	%s
In element:
%s
]]

local function identity(...)
	return ...
end

local function applyRef(ref, newHostObject)
	if ref == nil then
		return
	end

	if typeof(ref) == "function" then
		ref(newHostObject)
	elseif Type.of(ref) == Type.Binding then
		Binding.update(ref, newHostObject)
	else
		-- TODO (#197): Better error message
		error(("Invalid ref: Expected type Binding but got %s"):format(typeof(ref)))
	end
end

local function setRobloxInstanceProperty(hostObject, key, newValue)
	if newValue == nil then
		local hostClass = hostObject.ClassName
		local _, defaultValue = getDefaultInstanceProperty(hostClass, key)
		newValue = defaultValue
	end

	-- Assign the new value to the object
	hostObject[key] = newValue

	return
end

local function removeBinding(virtualNode, key)
	local disconnect = virtualNode.bindings[key]
	disconnect()
	virtualNode.bindings[key] = nil
end

local function attachBinding(virtualNode, key, newBinding)
	local function updateBoundProperty(newValue)
		local success, errorMessage = xpcall(function()
			setRobloxInstanceProperty(virtualNode.hostObject, key, newValue)
		end, identity)

		if not success then
			local source = virtualNode.currentElement.source

			if source == nil then
				source = "<enable element tracebacks>"
			end

			local fullMessage = updatePropsError:format(errorMessage, source)
			error(fullMessage, 0)
		end
	end

	if virtualNode.bindings == nil then
		virtualNode.bindings = {}
	end

	virtualNode.bindings[key] = Binding.subscribe(newBinding, updateBoundProperty)

	updateBoundProperty(newBinding:getValue())
end

local function detachAllBindings(virtualNode)
	if virtualNode.bindings ~= nil then
		for _, disconnect in pairs(virtualNode.bindings) do
			disconnect()
		end
	end
end

local function applyProp(virtualNode, key, newValue, oldValue)
	if newValue == oldValue then
		return
	end

	if key == Ref or key == Children then
		-- Refs and children are handled in a separate pass
		return
	end

	local internalKeyType = Type.of(key)

	if internalKeyType == Type.HostEvent or internalKeyType == Type.HostChangeEvent then
		if virtualNode.eventManager == nil then
			virtualNode.eventManager = SingleEventManager.new(virtualNode.hostObject)
		end

		local eventName = key.name

		if internalKeyType == Type.HostChangeEvent then
			virtualNode.eventManager:connectPropertyChange(eventName, newValue)
		else
			virtualNode.eventManager:connectEvent(eventName, newValue)
		end

		return
	end

	local newIsBinding = Type.of(newValue) == Type.Binding
	local oldIsBinding = Type.of(oldValue) == Type.Binding

	if oldIsBinding then
		removeBinding(virtualNode, key)
	end

	if newIsBinding then
		attachBinding(virtualNode, key, newValue)
	else
		setRobloxInstanceProperty(virtualNode.hostObject, key, newValue)
	end
end

local function applyProps(virtualNode, props)
	for propKey, value in pairs(props) do
		applyProp(virtualNode, propKey, value, nil)
	end
end

local function updateProps(virtualNode, oldProps, newProps)
	-- Apply props that were added or updated
	for propKey, newValue in pairs(newProps) do
		local oldValue = oldProps[propKey]

		applyProp(virtualNode, propKey, newValue, oldValue)
	end

	-- Clean up props that were removed
	for propKey, oldValue in pairs(oldProps) do
		local newValue = newProps[propKey]

		if newValue == nil then
			applyProp(virtualNode, propKey, nil, oldValue)
		end
	end
end

local RobloxRenderer = {}

function RobloxRenderer.isHostObject(target)
	return typeof(target) == "Instance"
end

function RobloxRenderer.mountHostNode(reconciler, virtualNode)
	local element = virtualNode.currentElement
	local hostParent = virtualNode.hostParent
	local hostKey = virtualNode.hostKey

	if config.internalTypeChecks then
		internalAssert(ElementKind.of(element) == ElementKind.Host, "Element at given node is not a host Element")
	end
	if config.typeChecks then
		assert(element.props.Name == nil, "Name can not be specified as a prop to a host component in Roact.")
		assert(element.props.Parent == nil, "Parent can not be specified as a prop to a host component in Roact.")
	end

	local instance = Instance.new(element.component)
	virtualNode.hostObject = instance

	local success, errorMessage = xpcall(function()
		applyProps(virtualNode, element.props)
	end, identity)

	if not success then
		local source = element.source

		if source == nil then
			source = "<enable element tracebacks>"
		end

		local fullMessage = applyPropsError:format(errorMessage, source)
		error(fullMessage, 0)
	end

	instance.Name = tostring(hostKey)

	local children = element.props[Children]

	if children ~= nil then
		reconciler.updateVirtualNodeWithChildren(virtualNode, virtualNode.hostObject, children)
	end

	instance.Parent = hostParent
	virtualNode.hostObject = instance

	applyRef(element.props[Ref], instance)

	if virtualNode.eventManager ~= nil then
		virtualNode.eventManager:resume()
	end
end

function RobloxRenderer.unmountHostNode(reconciler, virtualNode)
	local element = virtualNode.currentElement

	applyRef(element.props[Ref], nil)

	for _, childNode in pairs(virtualNode.children) do
		reconciler.unmountVirtualNode(childNode)
	end

	detachAllBindings(virtualNode)

	virtualNode.hostObject:Destroy()
end

function RobloxRenderer.updateHostNode(reconciler, virtualNode, newElement)
	local oldProps = virtualNode.currentElement.props
	local newProps = newElement.props

	if virtualNode.eventManager ~= nil then
		virtualNode.eventManager:suspend()
	end

	-- If refs changed, detach the old ref and attach the new one
	if oldProps[Ref] ~= newProps[Ref] then
		applyRef(oldProps[Ref], nil)
		applyRef(newProps[Ref], virtualNode.hostObject)
	end

	local success, errorMessage = xpcall(function()
		updateProps(virtualNode, oldProps, newProps)
	end, identity)

	if not success then
		local source = newElement.source

		if source == nil then
			source = "<enable element tracebacks>"
		end

		local fullMessage = updatePropsError:format(errorMessage, source)
		error(fullMessage, 0)
	end

	local children = newElement.props[Children]
	if children ~= nil or oldProps[Children] ~= nil then
		reconciler.updateVirtualNodeWithChildren(virtualNode, virtualNode.hostObject, children)
	end

	if virtualNode.eventManager ~= nil then
		virtualNode.eventManager:resume()
	end

	return virtualNode
end

return RobloxRenderer
]]></string>
                      </Properties>
                    </Item>
                    <Item class="ModuleScript" referent="610">
                      <Properties>
                        <string name="Name">SingleEventManager</string>
                        <string name="Source"><![CDATA[--[[
	A manager for a single host virtual node's connected events.
]]

local Logging = require(script.Parent.Logging)

local CHANGE_PREFIX = "Change."

local EventStatus = {
	-- No events are processed at all; they're silently discarded
	Disabled = "Disabled",

	-- Events are stored in a queue; listeners are invoked when the manager is resumed
	Suspended = "Suspended",

	-- Event listeners are invoked as the events fire
	Enabled = "Enabled",
}

local SingleEventManager = {}
SingleEventManager.__index = SingleEventManager

function SingleEventManager.new(instance)
	local self = setmetatable({
		-- The queue of suspended events
		_suspendedEventQueue = {},

		-- All the event connections being managed
		-- Events are indexed by a string key
		_connections = {},

		-- All the listeners being managed
		-- These are stored distinctly from the connections
		-- Connections can have their listeners replaced at runtime
		_listeners = {},

		-- The suspension status of the manager
		-- Managers start disabled and are "resumed" after the initial render
		_status = EventStatus.Disabled,

		-- If true, the manager is processing queued events right now.
		_isResuming = false,

		-- The Roblox instance the manager is managing
		_instance = instance,
	}, SingleEventManager)

	return self
end

function SingleEventManager:connectEvent(key, listener)
	self:_connect(key, self._instance[key], listener)
end

function SingleEventManager:connectPropertyChange(key, listener)
	local success, event = pcall(function()
		return self._instance:GetPropertyChangedSignal(key)
	end)

	if not success then
		error(("Cannot get changed signal on property %q: %s"):format(tostring(key), event), 0)
	end

	self:_connect(CHANGE_PREFIX .. key, event, listener)
end

function SingleEventManager:_connect(eventKey, event, listener)
	-- If the listener doesn't exist we can just disconnect the existing connection
	if listener == nil then
		if self._connections[eventKey] ~= nil then
			self._connections[eventKey]:Disconnect()
			self._connections[eventKey] = nil
		end

		self._listeners[eventKey] = nil
	else
		if self._connections[eventKey] == nil then
			self._connections[eventKey] = event:Connect(function(...)
				if self._status == EventStatus.Enabled then
					self._listeners[eventKey](self._instance, ...)
				elseif self._status == EventStatus.Suspended then
					-- Store this event invocation to be fired when resume is
					-- called.

					local argumentCount = select("#", ...)
					table.insert(self._suspendedEventQueue, { eventKey, argumentCount, ... })
				end
			end)
		end

		self._listeners[eventKey] = listener
	end
end

function SingleEventManager:suspend()
	self._status = EventStatus.Suspended
end

function SingleEventManager:resume()
	-- If we're already resuming events for this instance, trying to resume
	-- again would cause a disaster.
	if self._isResuming then
		return
	end

	self._isResuming = true

	local index = 1

	-- More events might be added to the queue when evaluating events, so we
	-- need to be careful in order to preserve correct evaluation order.
	while index <= #self._suspendedEventQueue do
		local eventInvocation = self._suspendedEventQueue[index]
		local listener = self._listeners[eventInvocation[1]]
		local argumentCount = eventInvocation[2]

		-- The event might have been disconnected since suspension started; in
		-- this case, we drop the event.
		if listener ~= nil then
			-- Wrap the listener in a coroutine to catch errors and handle
			-- yielding correctly.
			local listenerCo = coroutine.create(listener)
			local success, result = coroutine.resume(
				listenerCo,
				self._instance,
				unpack(eventInvocation, 3, 2 + argumentCount)
			)

			-- If the listener threw an error, we log it as a warning, since
			-- there's no way to write error text in Roblox Lua without killing
			-- our thread!
			if not success then
				Logging.warn("%s", result)
			end
		end

		index = index + 1
	end

	self._isResuming = false
	self._status = EventStatus.Enabled
	self._suspendedEventQueue = {}
end

return SingleEventManager
]]></string>
                      </Properties>
                    </Item>
                    <Item class="ModuleScript" referent="611">
                      <Properties>
                        <string name="Name">Symbol</string>
                        <string name="Source"><![CDATA[--!nonstrict
--[[
	A 'Symbol' is an opaque marker type.

	Symbols have the type 'userdata', but when printed to the console, the name
	of the symbol is shown.
]]

local Symbol = {}

--[[
	Creates a Symbol with the given name.

	When printed or coerced to a string, the symbol will turn into the string
	given as its name.
]]
function Symbol.named(name)
	assert(type(name) == "string", "Symbols must be created using a string name!")

	local self = newproxy(true)

	local wrappedName = ("Symbol(%s)"):format(name)

	getmetatable(self).__tostring = function()
		return wrappedName
	end

	return self
end

return Symbol
]]></string>
                      </Properties>
                    </Item>
                    <Item class="ModuleScript" referent="612">
                      <Properties>
                        <string name="Name">Type</string>
                        <string name="Source"><![CDATA[--[[
	Contains markers for annotating objects with types.

	To set the type of an object, use `Type` as a key and the actual marker as
	the value:

		local foo = {
			[Type] = Type.Foo,
		}
]]

local Symbol = require(script.Parent.Symbol)
local strict = require(script.Parent.strict)

local Type = newproxy(true)

local TypeInternal = {}

local function addType(name)
	TypeInternal[name] = Symbol.named("Roact" .. name)
end

addType("Binding")
addType("Element")
addType("HostChangeEvent")
addType("HostEvent")
addType("StatefulComponentClass")
addType("StatefulComponentInstance")
addType("VirtualNode")
addType("VirtualTree")

function TypeInternal.of(value)
	if typeof(value) ~= "table" then
		return nil
	end

	return value[Type]
end

getmetatable(Type).__index = TypeInternal

getmetatable(Type).__tostring = function()
	return "RoactType"
end

strict(TypeInternal, "Type")

return Type
]]></string>
                      </Properties>
                    </Item>
                    <Item class="ModuleScript" referent="613">
                      <Properties>
                        <string name="Name">assertDeepEqual</string>
                        <string name="Source"><![CDATA[--[[
	A utility used to assert that two objects are value-equal recursively. It
	outputs fairly nicely formatted messages to help diagnose why two objects
	would be different.

	This should only be used in tests.
]]

local function deepEqual(a, b)
	if typeof(a) ~= typeof(b) then
		local message = ("{1} is of type %s, but {2} is of type %s"):format(typeof(a), typeof(b))
		return false, message
	end

	if typeof(a) == "table" then
		local visitedKeys = {}

		for key, value in pairs(a) do
			visitedKeys[key] = true

			local success, innerMessage = deepEqual(value, b[key])
			if not success then
				local message = innerMessage
					:gsub("{1}", ("{1}[%s]"):format(tostring(key)))
					:gsub("{2}", ("{2}[%s]"):format(tostring(key)))

				return false, message
			end
		end

		for key, value in pairs(b) do
			if not visitedKeys[key] then
				local success, innerMessage = deepEqual(value, a[key])

				if not success then
					local message = innerMessage
						:gsub("{1}", ("{1}[%s]"):format(tostring(key)))
						:gsub("{2}", ("{2}[%s]"):format(tostring(key)))

					return false, message
				end
			end
		end

		return true
	end

	if a == b then
		return true
	end

	local message = "{1} ~= {2}"
	return false, message
end

local function assertDeepEqual(a, b)
	local success, innerMessageTemplate = deepEqual(a, b)

	if not success then
		local innerMessage = innerMessageTemplate:gsub("{1}", "first"):gsub("{2}", "second")

		local message = ("Values were not deep-equal.\n%s"):format(innerMessage)

		error(message, 2)
	end
end

return assertDeepEqual
]]></string>
                      </Properties>
                    </Item>
                    <Item class="ModuleScript" referent="614">
                      <Properties>
                        <string name="Name">assign</string>
                        <string name="Source"><![CDATA[local None = require(script.Parent.None)

--[[
	Merges values from zero or more tables onto a target table. If a value is
	set to None, it will instead be removed from the table.

	This function is identical in functionality to JavaScript's Object.assign.
]]
local function assign(target, ...)
	for index = 1, select("#", ...) do
		local source = select(index, ...)

		if source ~= nil then
			for key, value in pairs(source) do
				if value == None then
					target[key] = nil
				else
					target[key] = value
				end
			end
		end
	end

	return target
end

return assign
]]></string>
                      </Properties>
                    </Item>
                    <Item class="ModuleScript" referent="615">
                      <Properties>
                        <string name="Name">createContext</string>
                        <string name="Source"><![CDATA[local Symbol = require(script.Parent.Symbol)
local createFragment = require(script.Parent.createFragment)
local createSignal = require(script.Parent.createSignal)
local Children = require(script.Parent.PropMarkers.Children)
local Component = require(script.Parent.Component)

--[[
	Construct the value that is assigned to Roact's context storage.
]]
local function createContextEntry(currentValue)
	return {
		value = currentValue,
		onUpdate = createSignal(),
	}
end

local function createProvider(context)
	local Provider = Component:extend("Provider")

	function Provider:init(props)
		self.contextEntry = createContextEntry(props.value)
		self:__addContext(context.key, self.contextEntry)
	end

	function Provider:willUpdate(nextProps)
		-- If the provided value changed, immediately update the context entry.
		--
		-- During this update, any components that are reachable will receive
		-- this updated value at the same time as any props and state updates
		-- that are being applied.
		if nextProps.value ~= self.props.value then
			self.contextEntry.value = nextProps.value
		end
	end

	function Provider:didUpdate(prevProps)
		-- If the provided value changed, after we've updated every reachable
		-- component, fire a signal to update the rest.
		--
		-- This signal will notify all context consumers. It's expected that
		-- they will compare the last context value they updated with and only
		-- trigger an update on themselves if this value is different.
		--
		-- This codepath will generally only update consumer components that has
		-- a component implementing shouldUpdate between them and the provider.
		if prevProps.value ~= self.props.value then
			self.contextEntry.onUpdate:fire(self.props.value)
		end
	end

	function Provider:render()
		return createFragment(self.props[Children])
	end

	return Provider
end

local function createConsumer(context)
	local Consumer = Component:extend("Consumer")

	function Consumer.validateProps(props)
		if type(props.render) ~= "function" then
			return false, "Consumer expects a `render` function"
		else
			return true
		end
	end

	function Consumer:init(_props)
		-- This value may be nil, which indicates that our consumer is not a
		-- descendant of a provider for this context item.
		self.contextEntry = self:__getContext(context.key)
	end

	function Consumer:render()
		-- Render using the latest available for this context item.
		--
		-- We don't store this value in state in order to have more fine-grained
		-- control over our update behavior.
		local value
		if self.contextEntry ~= nil then
			value = self.contextEntry.value
		else
			value = context.defaultValue
		end

		return self.props.render(value)
	end

	function Consumer:didUpdate()
		-- Store the value that we most recently updated with.
		--
		-- This value is compared in the contextEntry onUpdate hook below.
		if self.contextEntry ~= nil then
			self.lastValue = self.contextEntry.value
		end
	end

	function Consumer:didMount()
		if self.contextEntry ~= nil then
			-- When onUpdate is fired, a new value has been made available in
			-- this context entry, but we may have already updated in the same
			-- update cycle.
			--
			-- To avoid sending a redundant update, we compare the new value
			-- with the last value that we updated with (set in didUpdate) and
			-- only update if they differ. This may happen when an update from a
			-- provider was blocked by an intermediate component that returned
			-- false from shouldUpdate.
			self.disconnect = self.contextEntry.onUpdate:subscribe(function(newValue)
				if newValue ~= self.lastValue then
					-- Trigger a dummy state update.
					self:setState({})
				end
			end)
		end
	end

	function Consumer:willUnmount()
		if self.disconnect ~= nil then
			self.disconnect()
			self.disconnect = nil
		end
	end

	return Consumer
end

local Context = {}
Context.__index = Context

function Context.new(defaultValue)
	return setmetatable({
		defaultValue = defaultValue,
		key = Symbol.named("ContextKey"),
	}, Context)
end

function Context:__tostring()
	return "RoactContext"
end

local function createContext(defaultValue)
	local context = Context.new(defaultValue)

	return {
		Provider = createProvider(context),
		Consumer = createConsumer(context),
	}
end

return createContext
]]></string>
                      </Properties>
                    </Item>
                    <Item class="ModuleScript" referent="616">
                      <Properties>
                        <string name="Name">createElement</string>
                        <string name="Source"><![CDATA[local Children = require(script.Parent.PropMarkers.Children)
local ElementKind = require(script.Parent.ElementKind)
local Logging = require(script.Parent.Logging)
local Type = require(script.Parent.Type)

local config = require(script.Parent.GlobalConfig).get()

local multipleChildrenMessage = [[
The prop `Roact.Children` was defined but was overriden by the third parameter to createElement!
This can happen when a component passes props through to a child element but also uses the `children` argument:

	Roact.createElement("Frame", passedProps, {
		child = ...
	})

Instead, consider using a utility function to merge tables of children together:

	local children = mergeTables(passedProps[Roact.Children], {
		child = ...
	})

	local fullProps = mergeTables(passedProps, {
		[Roact.Children] = children
	})

	Roact.createElement("Frame", fullProps)]]

--[[
	Creates a new element representing the given component.

	Elements are lightweight representations of what a component instance should
	look like.

	Children is a shorthand for specifying `Roact.Children` as a key inside
	props. If specified, the passed `props` table is mutated!
]]
local function createElement(component, props, children)
	if config.typeChecks then
		assert(component ~= nil, "`component` is required")
		assert(typeof(props) == "table" or props == nil, "`props` must be a table or nil")
		assert(typeof(children) == "table" or children == nil, "`children` must be a table or nil")
	end

	if props == nil then
		props = {}
	end

	if children ~= nil then
		if props[Children] ~= nil then
			Logging.warnOnce(multipleChildrenMessage)
		end

		props[Children] = children
	end

	local elementKind = ElementKind.fromComponent(component)

	local element = {
		[Type] = Type.Element,
		[ElementKind] = elementKind,
		component = component,
		props = props,
	}

	if config.elementTracing then
		-- We trim out the leading newline since there's no way to specify the
		-- trace level without also specifying a message.
		element.source = debug.traceback("", 2):sub(2)
	end

	return element
end

return createElement
]]></string>
                      </Properties>
                    </Item>
                    <Item class="ModuleScript" referent="617">
                      <Properties>
                        <string name="Name">createFragment</string>
                        <string name="Source"><![CDATA[local ElementKind = require(script.Parent.ElementKind)
local Type = require(script.Parent.Type)

local function createFragment(elements)
	return {
		[Type] = Type.Element,
		[ElementKind] = ElementKind.Fragment,
		elements = elements,
	}
end

return createFragment
]]></string>
                      </Properties>
                    </Item>
                    <Item class="ModuleScript" referent="618">
                      <Properties>
                        <string name="Name">createReconciler</string>
                        <string name="Source"><![CDATA[--!nonstrict
local Type = require(script.Parent.Type)
local ElementKind = require(script.Parent.ElementKind)
local ElementUtils = require(script.Parent.ElementUtils)
local Children = require(script.Parent.PropMarkers.Children)
local Symbol = require(script.Parent.Symbol)
local internalAssert = require(script.Parent.internalAssert)

local config = require(script.Parent.GlobalConfig).get()

local InternalData = Symbol.named("InternalData")

--[[
	The reconciler is the mechanism in Roact that constructs the virtual tree
	that later gets turned into concrete objects by the renderer.

	Roact's reconciler is constructed with the renderer as an argument, which
	enables switching to different renderers for different platforms or
	scenarios.

	When testing the reconciler itself, it's common to use `NoopRenderer` with
	spies replacing some methods. The default (and only) reconciler interface
	exposed by Roact right now uses `RobloxRenderer`.
]]
local function createReconciler(renderer)
	local reconciler
	local mountVirtualNode
	local updateVirtualNode
	local unmountVirtualNode

	--[[
		Unmount the given virtualNode, replacing it with a new node described by
		the given element.

		Preserves host properties, depth, and legacyContext from parent.
	]]
	local function replaceVirtualNode(virtualNode, newElement)
		local hostParent = virtualNode.hostParent
		local hostKey = virtualNode.hostKey
		local depth = virtualNode.depth
		local parent = virtualNode.parent

		-- If the node that is being replaced has modified context, we need to
		-- use the original *unmodified* context for the new node
		-- The `originalContext` field will be nil if the context was unchanged
		local context = virtualNode.originalContext or virtualNode.context
		local parentLegacyContext = virtualNode.parentLegacyContext

		-- If updating this node has caused a component higher up the tree to re-render
		-- and updateChildren to be re-entered then this node could already have been
		-- unmounted in the previous updateChildren pass.
		if not virtualNode.wasUnmounted then
			unmountVirtualNode(virtualNode)
		end
		local newNode = mountVirtualNode(newElement, hostParent, hostKey, context, parentLegacyContext)

		-- mountVirtualNode can return nil if the element is a boolean
		if newNode ~= nil then
			newNode.depth = depth
			newNode.parent = parent
		end

		return newNode
	end

	--[[
		Utility to update the children of a virtual node based on zero or more
		updated children given as elements.
	]]
	local function updateChildren(virtualNode, hostParent, newChildElements)
		if config.internalTypeChecks then
			internalAssert(Type.of(virtualNode) == Type.VirtualNode, "Expected arg #1 to be of type VirtualNode")
		end

		virtualNode.updateChildrenCount = virtualNode.updateChildrenCount + 1

		local currentUpdateChildrenCount = virtualNode.updateChildrenCount

		local removeKeys = {}

		-- Changed or removed children
		for childKey, childNode in pairs(virtualNode.children) do
			local newElement = ElementUtils.getElementByKey(newChildElements, childKey)
			local newNode = updateVirtualNode(childNode, newElement)

			-- If updating this node has caused a component higher up the tree to re-render
			-- and updateChildren to be re-entered for this virtualNode then
			-- this result is invalid and needs to be disgarded.
			if virtualNode.updateChildrenCount ~= currentUpdateChildrenCount then
				if newNode and newNode ~= virtualNode.children[childKey] then
					unmountVirtualNode(newNode)
				end
				return
			end

			if newNode ~= nil then
				virtualNode.children[childKey] = newNode
			else
				removeKeys[childKey] = true
			end
		end

		for childKey in pairs(removeKeys) do
			virtualNode.children[childKey] = nil
		end

		-- Added children
		for childKey, newElement in ElementUtils.iterateElements(newChildElements) do
			local concreteKey = childKey
			if childKey == ElementUtils.UseParentKey then
				concreteKey = virtualNode.hostKey
			end

			if virtualNode.children[childKey] == nil then
				local childNode = mountVirtualNode(
					newElement,
					hostParent,
					concreteKey,
					virtualNode.context,
					virtualNode.legacyContext
				)

				-- If updating this node has caused a component higher up the tree to re-render
				-- and updateChildren to be re-entered for this virtualNode then
				-- this result is invalid and needs to be discarded.
				if virtualNode.updateChildrenCount ~= currentUpdateChildrenCount then
					if childNode then
						unmountVirtualNode(childNode)
					end
					return
				end

				-- mountVirtualNode can return nil if the element is a boolean
				if childNode ~= nil then
					childNode.depth = virtualNode.depth + 1
					childNode.parent = virtualNode
					virtualNode.children[childKey] = childNode
				end
			end
		end
	end

	local function updateVirtualNodeWithChildren(virtualNode, hostParent, newChildElements)
		updateChildren(virtualNode, hostParent, newChildElements)
	end

	local function updateVirtualNodeWithRenderResult(virtualNode, hostParent, renderResult)
		if Type.of(renderResult) == Type.Element or renderResult == nil or typeof(renderResult) == "boolean" then
			updateChildren(virtualNode, hostParent, renderResult)
		else
			error(
				("%s\n%s"):format(
					"Component returned invalid children:",
					virtualNode.currentElement.source or "<enable element tracebacks>"
				),
				0
			)
		end
	end

	--[[
		Unmounts the given virtual node and releases any held resources.
	]]
	function unmountVirtualNode(virtualNode)
		if config.internalTypeChecks then
			internalAssert(Type.of(virtualNode) == Type.VirtualNode, "Expected arg #1 to be of type VirtualNode")
		end

		virtualNode.wasUnmounted = true

		local kind = ElementKind.of(virtualNode.currentElement)

		-- selene: allow(if_same_then_else)
		if kind == ElementKind.Host then
			renderer.unmountHostNode(reconciler, virtualNode)
		elseif kind == ElementKind.Function then
			for _, childNode in pairs(virtualNode.children) do
				unmountVirtualNode(childNode)
			end
		elseif kind == ElementKind.Stateful then
			virtualNode.instance:__unmount()
		elseif kind == ElementKind.Portal then
			for _, childNode in pairs(virtualNode.children) do
				unmountVirtualNode(childNode)
			end
		elseif kind == ElementKind.Fragment then
			for _, childNode in pairs(virtualNode.children) do
				unmountVirtualNode(childNode)
			end
		else
			error(("Unknown ElementKind %q"):format(tostring(kind)), 2)
		end
	end

	local function updateFunctionVirtualNode(virtualNode, newElement)
		local children = newElement.component(newElement.props)

		updateVirtualNodeWithRenderResult(virtualNode, virtualNode.hostParent, children)

		return virtualNode
	end

	local function updatePortalVirtualNode(virtualNode, newElement)
		local oldElement = virtualNode.currentElement
		local oldTargetHostParent = oldElement.props.target

		local targetHostParent = newElement.props.target

		assert(renderer.isHostObject(targetHostParent), "Expected target to be host object")

		if targetHostParent ~= oldTargetHostParent then
			return replaceVirtualNode(virtualNode, newElement)
		end

		local children = newElement.props[Children]

		updateVirtualNodeWithChildren(virtualNode, targetHostParent, children)

		return virtualNode
	end

	local function updateFragmentVirtualNode(virtualNode, newElement)
		updateVirtualNodeWithChildren(virtualNode, virtualNode.hostParent, newElement.elements)

		return virtualNode
	end

	--[[
		Update the given virtual node using a new element describing what it
		should transform into.

		`updateVirtualNode` will return a new virtual node that should replace
		the passed in virtual node. This is because a virtual node can be
		updated with an element referencing a different component!

		In that case, `updateVirtualNode` will unmount the input virtual node,
		mount a new virtual node, and return it in this case, while also issuing
		a warning to the user.
	]]
	function updateVirtualNode(virtualNode, newElement, newState)
		if config.internalTypeChecks then
			internalAssert(Type.of(virtualNode) == Type.VirtualNode, "Expected arg #1 to be of type VirtualNode")
		end
		if config.typeChecks then
			assert(
				Type.of(newElement) == Type.Element or typeof(newElement) == "boolean" or newElement == nil,
				"Expected arg #2 to be of type Element, boolean, or nil"
			)
		end

		-- If nothing changed, we can skip this update
		if virtualNode.currentElement == newElement and newState == nil then
			return virtualNode
		end

		if typeof(newElement) == "boolean" or newElement == nil then
			unmountVirtualNode(virtualNode)
			return nil
		end

		if virtualNode.currentElement.component ~= newElement.component then
			return replaceVirtualNode(virtualNode, newElement)
		end

		local kind = ElementKind.of(newElement)

		local shouldContinueUpdate = true

		if kind == ElementKind.Host then
			virtualNode = renderer.updateHostNode(reconciler, virtualNode, newElement)
		elseif kind == ElementKind.Function then
			virtualNode = updateFunctionVirtualNode(virtualNode, newElement)
		elseif kind == ElementKind.Stateful then
			shouldContinueUpdate = virtualNode.instance:__update(newElement, newState)
		elseif kind == ElementKind.Portal then
			virtualNode = updatePortalVirtualNode(virtualNode, newElement)
		elseif kind == ElementKind.Fragment then
			virtualNode = updateFragmentVirtualNode(virtualNode, newElement)
		else
			error(("Unknown ElementKind %q"):format(tostring(kind)), 2)
		end

		-- Stateful components can abort updates via shouldUpdate. If that
		-- happens, we should stop doing stuff at this point.
		if not shouldContinueUpdate then
			return virtualNode
		end

		virtualNode.currentElement = newElement

		return virtualNode
	end

	--[[
		Constructs a new virtual node but not does mount it.
	]]
	local function createVirtualNode(element, hostParent, hostKey, context, legacyContext)
		if config.internalTypeChecks then
			internalAssert(
				renderer.isHostObject(hostParent) or hostParent == nil,
				"Expected arg #2 to be a host object"
			)
			internalAssert(typeof(context) == "table" or context == nil, "Expected arg #4 to be of type table or nil")
			internalAssert(
				typeof(legacyContext) == "table" or legacyContext == nil,
				"Expected arg #5 to be of type table or nil"
			)
		end
		if config.typeChecks then
			assert(hostKey ~= nil, "Expected arg #3 to be non-nil")
			assert(
				Type.of(element) == Type.Element or typeof(element) == "boolean",
				"Expected arg #1 to be of type Element or boolean"
			)
		end

		return {
			[Type] = Type.VirtualNode,
			currentElement = element,
			depth = 1,
			parent = nil,
			children = {},
			hostParent = hostParent,
			hostKey = hostKey,
			updateChildrenCount = 0,
			wasUnmounted = false,

			-- Legacy Context API
			-- A table of context values inherited from the parent node
			legacyContext = legacyContext,

			-- A saved copy of the parent context, used when replacing a node
			parentLegacyContext = legacyContext,

			-- Context API
			-- A table of context values inherited from the parent node
			context = context or {},

			-- A saved copy of the unmodified context; this will be updated when
			-- a component adds new context and used when a node is replaced
			originalContext = nil,
		}
	end

	local function mountFunctionVirtualNode(virtualNode)
		local element = virtualNode.currentElement

		local children = element.component(element.props)

		updateVirtualNodeWithRenderResult(virtualNode, virtualNode.hostParent, children)
	end

	local function mountPortalVirtualNode(virtualNode)
		local element = virtualNode.currentElement

		local targetHostParent = element.props.target
		local children = element.props[Children]

		assert(renderer.isHostObject(targetHostParent), "Expected target to be host object")

		updateVirtualNodeWithChildren(virtualNode, targetHostParent, children)
	end

	local function mountFragmentVirtualNode(virtualNode)
		local element = virtualNode.currentElement
		local children = element.elements

		updateVirtualNodeWithChildren(virtualNode, virtualNode.hostParent, children)
	end

	--[[
		Constructs a new virtual node and mounts it, but does not place it into
		the tree.
	]]
	function mountVirtualNode(element, hostParent, hostKey, context, legacyContext)
		if config.internalTypeChecks then
			internalAssert(
				renderer.isHostObject(hostParent) or hostParent == nil,
				"Expected arg #2 to be a host object"
			)
			internalAssert(
				typeof(legacyContext) == "table" or legacyContext == nil,
				"Expected arg #5 to be of type table or nil"
			)
		end
		if config.typeChecks then
			assert(hostKey ~= nil, "Expected arg #3 to be non-nil")
			assert(
				Type.of(element) == Type.Element or typeof(element) == "boolean",
				"Expected arg #1 to be of type Element or boolean"
			)
		end

		-- Boolean values render as nil to enable terse conditional rendering.
		if typeof(element) == "boolean" then
			return nil
		end

		local kind = ElementKind.of(element)

		local virtualNode = createVirtualNode(element, hostParent, hostKey, context, legacyContext)

		if kind == ElementKind.Host then
			renderer.mountHostNode(reconciler, virtualNode)
		elseif kind == ElementKind.Function then
			mountFunctionVirtualNode(virtualNode)
		elseif kind == ElementKind.Stateful then
			element.component:__mount(reconciler, virtualNode)
		elseif kind == ElementKind.Portal then
			mountPortalVirtualNode(virtualNode)
		elseif kind == ElementKind.Fragment then
			mountFragmentVirtualNode(virtualNode)
		else
			error(("Unknown ElementKind %q"):format(tostring(kind)), 2)
		end

		return virtualNode
	end

	--[[
		Constructs a new Roact virtual tree, constructs a root node for
		it, and mounts it.
	]]
	local function mountVirtualTree(element, hostParent, hostKey)
		if config.typeChecks then
			assert(Type.of(element) == Type.Element, "Expected arg #1 to be of type Element")
			assert(renderer.isHostObject(hostParent) or hostParent == nil, "Expected arg #2 to be a host object")
		end

		if hostKey == nil then
			hostKey = "RoactTree"
		end

		local tree = {
			[Type] = Type.VirtualTree,
			[InternalData] = {
				-- The root node of the tree, which starts into the hierarchy of
				-- Roact component instances.
				rootNode = nil,
				mounted = true,
			},
		}

		tree[InternalData].rootNode = mountVirtualNode(element, hostParent, hostKey)

		return tree
	end

	--[[
		Unmounts the virtual tree, freeing all of its resources.

		No further operations should be done on the tree after it's been
		unmounted, as indicated by its the `mounted` field.
	]]
	local function unmountVirtualTree(tree)
		local internalData = tree[InternalData]
		if config.typeChecks then
			assert(Type.of(tree) == Type.VirtualTree, "Expected arg #1 to be a Roact handle")
			assert(internalData.mounted, "Cannot unmounted a Roact tree that has already been unmounted")
		end

		internalData.mounted = false

		if internalData.rootNode ~= nil then
			unmountVirtualNode(internalData.rootNode)
		end
	end

	--[[
		Utility method for updating the root node of a virtual tree given a new
		element.
	]]
	local function updateVirtualTree(tree, newElement)
		local internalData = tree[InternalData]
		if config.typeChecks then
			assert(Type.of(tree) == Type.VirtualTree, "Expected arg #1 to be a Roact handle")
			assert(Type.of(newElement) == Type.Element, "Expected arg #2 to be a Roact Element")
		end

		internalData.rootNode = updateVirtualNode(internalData.rootNode, newElement)

		return tree
	end

	reconciler = {
		mountVirtualTree = mountVirtualTree,
		unmountVirtualTree = unmountVirtualTree,
		updateVirtualTree = updateVirtualTree,

		createVirtualNode = createVirtualNode,
		mountVirtualNode = mountVirtualNode,
		unmountVirtualNode = unmountVirtualNode,
		updateVirtualNode = updateVirtualNode,
		updateVirtualNodeWithChildren = updateVirtualNodeWithChildren,
		updateVirtualNodeWithRenderResult = updateVirtualNodeWithRenderResult,
	}

	return reconciler
end

return createReconciler
]]></string>
                      </Properties>
                    </Item>
                    <Item class="ModuleScript" referent="619">
                      <Properties>
                        <string name="Name">createReconcilerCompat</string>
                        <string name="Source"><![CDATA[--[[
	Contains deprecated methods from Reconciler. Broken out so that removing
	this shim is easy -- just delete this file and remove it from init.
]]

local Logging = require(script.Parent.Logging)

local reifyMessage = [[
Roact.reify has been renamed to Roact.mount and will be removed in a future release.
Check the call to Roact.reify at:
]]

local teardownMessage = [[
Roact.teardown has been renamed to Roact.unmount and will be removed in a future release.
Check the call to Roact.teardown at:
]]

local reconcileMessage = [[
Roact.reconcile has been renamed to Roact.update and will be removed in a future release.
Check the call to Roact.reconcile at:
]]

local function createReconcilerCompat(reconciler)
	local compat = {}

	function compat.reify(...)
		Logging.warnOnce(reifyMessage)

		return reconciler.mountVirtualTree(...)
	end

	function compat.teardown(...)
		Logging.warnOnce(teardownMessage)

		return reconciler.unmountVirtualTree(...)
	end

	function compat.reconcile(...)
		Logging.warnOnce(reconcileMessage)

		return reconciler.updateVirtualTree(...)
	end

	return compat
end

return createReconcilerCompat
]]></string>
                      </Properties>
                    </Item>
                    <Item class="ModuleScript" referent="620">
                      <Properties>
                        <string name="Name">createRef</string>
                        <string name="Source"><![CDATA[--[[
	A ref is nothing more than a binding with a special field 'current'
	that maps to the getValue method of the binding
]]
local Binding = require(script.Parent.Binding)

local function createRef()
	local binding, _ = Binding.create(nil)

	local ref = {}

	--[[
		A ref is just redirected to a binding via its metatable
	]]
	setmetatable(ref, {
		__index = function(_self, key)
			if key == "current" then
				return binding:getValue()
			else
				return binding[key]
			end
		end,
		__newindex = function(_self, key, value)
			if key == "current" then
				error("Cannot assign to the 'current' property of refs", 2)
			end

			binding[key] = value
		end,
		__tostring = function(_self)
			return ("RoactRef(%s)"):format(tostring(binding:getValue()))
		end,
	})

	return ref
end

return createRef
]]></string>
                      </Properties>
                    </Item>
                    <Item class="ModuleScript" referent="621">
                      <Properties>
                        <string name="Name">createSignal</string>
                        <string name="Source"><![CDATA[--[[
	This is a simple signal implementation that has a dead-simple API.

		local signal = createSignal()

		local disconnect = signal:subscribe(function(foo)
			print("Cool foo:", foo)
		end)

		signal:fire("something")

		disconnect()
]]

local function createSignal()
	local connections = {}
	local suspendedConnections = {}
	local firing = false

	local function subscribe(_self, callback)
		assert(typeof(callback) == "function", "Can only subscribe to signals with a function.")

		local connection = {
			callback = callback,
			disconnected = false,
		}

		-- If the callback is already registered, don't add to the suspendedConnection. Otherwise, this will disable
		-- the existing one.
		if firing and not connections[callback] then
			suspendedConnections[callback] = connection
		end

		connections[callback] = connection

		local function disconnect()
			assert(not connection.disconnected, "Listeners can only be disconnected once.")

			connection.disconnected = true
			connections[callback] = nil
			suspendedConnections[callback] = nil
		end

		return disconnect
	end

	local function fire(_self, ...)
		firing = true
		for callback, connection in pairs(connections) do
			if not connection.disconnected and not suspendedConnections[callback] then
				callback(...)
			end
		end

		firing = false

		for callback, _ in pairs(suspendedConnections) do
			suspendedConnections[callback] = nil
		end
	end

	return {
		subscribe = subscribe,
		fire = fire,
	}
end

return createSignal
]]></string>
                      </Properties>
                    </Item>
                    <Item class="ModuleScript" referent="622">
                      <Properties>
                        <string name="Name">createSpy</string>
                        <string name="Source"><![CDATA[--[[
	A utility used to create a function spy that can be used to robustly test
	that functions are invoked the correct number of times and with the correct
	number of arguments.

	This should only be used in tests.
]]

local assertDeepEqual = require(script.Parent.assertDeepEqual)

local function createSpy(inner)
	local self = {}
	self.callCount = 0
	self.values = {}
	self.valuesLength = 0
	self.value = function(...)
		self.callCount = self.callCount + 1
		self.values = { ... }
		self.valuesLength = select("#", ...)

		if inner ~= nil then
			return inner(...)
		end
		return nil
	end

	self.assertCalledWith = function(_, ...)
		local len = select("#", ...)

		if self.valuesLength ~= len then
			error(("Expected %d arguments, but was called with %d arguments"):format(self.valuesLength, len), 2)
		end

		for i = 1, len do
			local expected = select(i, ...)

			assert(self.values[i] == expected, "value differs")
		end
	end

	self.assertCalledWithDeepEqual = function(_, ...)
		local len = select("#", ...)

		if self.valuesLength ~= len then
			error(("Expected %d arguments, but was called with %d arguments"):format(self.valuesLength, len), 2)
		end

		for i = 1, len do
			local expected = select(i, ...)

			assertDeepEqual(self.values[i], expected)
		end
	end

	self.captureValues = function(_, ...)
		local len = select("#", ...)
		local result = {}

		assert(self.valuesLength == len, "length of expected values differs from stored values")

		for i = 1, len do
			local key = select(i, ...)
			result[key] = self.values[i]
		end

		return result
	end

	setmetatable(self, {
		__index = function(_, key)
			error(("%q is not a valid member of spy"):format(key))
		end,
	})

	return self
end

return createSpy
]]></string>
                      </Properties>
                    </Item>
                    <Item class="ModuleScript" referent="623">
                      <Properties>
                        <string name="Name">forwardRef</string>
                        <string name="Source"><![CDATA[local assign = require(script.Parent.assign)
local None = require(script.Parent.None)
local Ref = require(script.Parent.PropMarkers.Ref)

local config = require(script.Parent.GlobalConfig).get()

local excludeRef = {
	[Ref] = None,
}

--[[
	Allows forwarding of refs to underlying host components. Accepts a render
	callback which accepts props and a ref, and returns an element.
]]
local function forwardRef(render)
	if config.typeChecks then
		assert(typeof(render) == "function", "Expected arg #1 to be a function")
	end

	return function(props)
		local ref = props[Ref]
		local propsWithoutRef = assign({}, props, excludeRef)

		return render(propsWithoutRef, ref)
	end
end

return forwardRef
]]></string>
                      </Properties>
                    </Item>
                    <Item class="ModuleScript" referent="624">
                      <Properties>
                        <string name="Name">getDefaultInstanceProperty</string>
                        <string name="Source"><![CDATA[--[[
	Attempts to get the default value of a given property on a Roblox instance.

	This is used by the reconciler in cases where a prop was previously set on a
	primitive component, but is no longer present in a component's new props.

	Eventually, Roblox might provide a nicer API to query the default property
	of an object without constructing an instance of it.
]]

local Symbol = require(script.Parent.Symbol)

local Nil = Symbol.named("Nil")
local _cachedPropertyValues = {}

local function getDefaultInstanceProperty(className, propertyName)
	local classCache = _cachedPropertyValues[className]

	if classCache then
		local propValue = classCache[propertyName]

		-- We have to use a marker here, because Lua doesn't distinguish
		-- between 'nil' and 'not in a table'
		if propValue == Nil then
			return true, nil
		end

		if propValue ~= nil then
			return true, propValue
		end
	else
		classCache = {}
		_cachedPropertyValues[className] = classCache
	end

	local created = Instance.new(className)
	local ok, defaultValue = pcall(function()
		return created[propertyName]
	end)

	created:Destroy()

	if ok then
		if defaultValue == nil then
			classCache[propertyName] = Nil
		else
			classCache[propertyName] = defaultValue
		end
	end

	return ok, defaultValue
end

return getDefaultInstanceProperty
]]></string>
                      </Properties>
                    </Item>
                    <Item class="ModuleScript" referent="625">
                      <Properties>
                        <string name="Name">internalAssert</string>
                        <string name="Source"><![CDATA[local function internalAssert(condition, message)
	if not condition then
		error(message .. " (This is probably a bug in Roact!)", 3)
	end
end

return internalAssert
]]></string>
                      </Properties>
                    </Item>
                    <Item class="ModuleScript" referent="626">
                      <Properties>
                        <string name="Name">invalidSetStateMessages</string>
                        <string name="Source"><![CDATA[--[[
	These messages are used by Component to help users diagnose when they're
	calling setState in inappropriate places.

	The indentation may seem odd, but it's necessary to avoid introducing extra
	whitespace into the error messages themselves.
]]
local ComponentLifecyclePhase = require(script.Parent.ComponentLifecyclePhase)

local invalidSetStateMessages = {}

invalidSetStateMessages[ComponentLifecyclePhase.WillUpdate] = [[
setState cannot be used in the willUpdate lifecycle method.
Consider using the didUpdate method instead, or using getDerivedStateFromProps.

Check the definition of willUpdate in the component %q.]]

invalidSetStateMessages[ComponentLifecyclePhase.WillUnmount] = [[
setState cannot be used in the willUnmount lifecycle method.
A component that is being unmounted cannot be updated!

Check the definition of willUnmount in the component %q.]]

invalidSetStateMessages[ComponentLifecyclePhase.ShouldUpdate] = [[
setState cannot be used in the shouldUpdate lifecycle method.
shouldUpdate must be a pure function that only depends on props and state.

Check the definition of shouldUpdate in the component %q.]]

invalidSetStateMessages[ComponentLifecyclePhase.Render] = [[
setState cannot be used in the render method.
render must be a pure function that only depends on props and state.

Check the definition of render in the component %q.]]

invalidSetStateMessages["default"] = [[
setState can not be used in the current situation, because Roact doesn't know
which part of the lifecycle this component is in.

This is a bug in Roact.
It was triggered by the component %q.
]]

return invalidSetStateMessages
]]></string>
                      </Properties>
                    </Item>
                    <Item class="ModuleScript" referent="627">
                      <Properties>
                        <string name="Name">oneChild</string>
                        <string name="Source"><![CDATA[--[[
	Retrieves at most one child from the children passed to a component.

	If passed nil or an empty table, will return nil.

	Throws an error if passed more than one child.
]]
local function oneChild(children)
	if not children then
		return nil
	end

	local key, child = next(children)

	if not child then
		return nil
	end

	local after = next(children, key)

	if after then
		error("Expected at most child, had more than one child.", 2)
	end

	return child
end

return oneChild
]]></string>
                      </Properties>
                    </Item>
                    <Item class="ModuleScript" referent="628">
                      <Properties>
                        <string name="Name">strict</string>
                        <string name="Source"><![CDATA[--!nonstrict
local function strict(t, name)
	name = name or tostring(t)

	return setmetatable(t, {
		__index = function(_self, key)
			local message = ("%q (%s) is not a valid member of %s"):format(tostring(key), typeof(key), name)

			error(message, 2)
		end,

		__newindex = function(_self, key, _value)
			local message = ("%q (%s) is not a valid member of %s"):format(tostring(key), typeof(key), name)

			error(message, 2)
		end,
	})
end

return strict
]]></string>
                      </Properties>
                    </Item>
                  </Item>
                </Item>
                <Item class="Folder" referent="629">
                  <Properties>
                    <string name="Name">roact-rodux</string>
                  </Properties>
                  <Item class="ModuleScript" referent="630">
                    <Properties>
                      <string name="Name">src</string>
                      <string name="Source">local StoreProvider = require(script.StoreProvider)
local connect = require(script.connect)

return {
	StoreProvider = StoreProvider,
	connect = connect,
	UNSTABLE_connect2 = connect,
}</string>
                    </Properties>
                    <Item class="ModuleScript" referent="631">
                      <Properties>
                        <string name="Name">StoreContext</string>
                        <string name="Source">local nodeModules = script.Parent.Parent.Parent
local Roact = require(nodeModules.roact.src)

local StoreContext = Roact.createContext()

return StoreContext</string>
                      </Properties>
                    </Item>
                    <Item class="ModuleScript" referent="632">
                      <Properties>
                        <string name="Name">StoreProvider</string>
                        <string name="Source">local nodeModules = script.Parent.Parent.Parent
local Roact = require(nodeModules.roact.src)

local StoreContext = require(script.Parent.StoreContext)

local StoreProvider = Roact.Component:extend("StoreProvider")

function StoreProvider.validateProps(props)
	local store = props.store
	if store == nil then
		return false, "Error initializing StoreProvider. Expected a `store` prop to be a Rodux store."
	end
	return true
end

function StoreProvider:init(props)
	self.store = props.store
end

function StoreProvider:render()
	return Roact.createElement(StoreContext.Provider, {
		value = self.store,
	}, Roact.oneChild(
		self.props[Roact.Children]
	))
end

return StoreProvider</string>
                      </Properties>
                    </Item>
                    <Item class="ModuleScript" referent="633">
                      <Properties>
                        <string name="Name">Symbol</string>
                        <string name="Source">--[[
	A 'Symbol' is an opaque marker type that can be used to signify unique
	statuses. Symbols have the type 'userdata', but when printed to the console,
	the name of the symbol is shown.
]]

local Symbol = {}

--[[
	Creates a Symbol with the given name.

	When printed or coerced to a string, the symbol will turn into the string
	given as its name.
]]
function Symbol.named(name)
	assert(type(name) == "string", "Symbols must be created using a string name!")

	local self = newproxy(true)

	local wrappedName = ("Symbol(%s)"):format(name)

	getmetatable(self).__tostring = function()
		return wrappedName
	end

	return self
end

--[[
	Create an unnamed Symbol. Usually, you should create a named Symbol using
	Symbol.named(name)
]]
function Symbol.unnamed()
	local self = newproxy(true)

	getmetatable(self).__tostring = function()
		return "Unnamed Symbol"
	end

	return self
end

return Symbol</string>
                      </Properties>
                    </Item>
                    <Item class="ModuleScript" referent="634">
                      <Properties>
                        <string name="Name">connect</string>
                        <string name="Source">local nodeModules = script.Parent.Parent.Parent
local Roact = require(nodeModules.roact.src)
local shallowEqual = require(script.Parent.shallowEqual)
local join = require(script.Parent.join)
local StoreContext = require(script.Parent.StoreContext)

--[[
	Formats a multi-line message with printf-style placeholders.
]]
local function formatMessage(lines, parameters)
	return table.concat(lines, "\n"):format(unpack(parameters or {}))
end

local function noop()
	return nil
end

--[[
	The stateUpdater accepts props when they update and computes the
	complete set of props that should be passed to the wrapped component.

	Each connected component will have a stateUpdater created for it.

	stateUpdater is put into the component's state in order for
	getDerivedStateFromProps to be able to access it. It is not mutated.
]]
local function makeStateUpdater(store)
	return function(nextProps, prevState, mappedStoreState)
		-- The caller can optionally provide mappedStoreState if it needed that
		-- value beforehand. Doing so is purely an optimization.
		if mappedStoreState == nil then
			mappedStoreState = prevState.mapStateToProps(store:getState(), nextProps)
		end

		local propsForChild = join(nextProps, mappedStoreState, prevState.mappedStoreDispatch)

		return {
			mappedStoreState = mappedStoreState,
			propsForChild = propsForChild,
		}
	end
end

--[[
	mapStateToProps:
		(storeState, props) -> partialProps
		OR
		() -> (storeState, props) -> partialProps
	mapDispatchToProps: (dispatch) -> partialProps
]]
local function connect(mapStateToPropsOrThunk, mapDispatchToProps)
	local connectTrace = debug.traceback()

	if mapStateToPropsOrThunk ~= nil then
		assert(typeof(mapStateToPropsOrThunk) == "function", "mapStateToProps must be a function or nil!")
	else
		mapStateToPropsOrThunk = noop
	end

	local mapDispatchType = typeof(mapDispatchToProps)
	if mapDispatchToProps ~= nil then
		assert(
			mapDispatchType == "function" or mapDispatchType == "table",
			"mapDispatchToProps must be a function, table, or nil!"
		)
	else
		mapDispatchToProps = noop
	end

	return function(innerComponent)
		if innerComponent == nil then
			local message = formatMessage({
				"connect returns a function that must be passed a component.",
				"Check the connection at:",
				"%s",
			}, {
				connectTrace,
			})

			error(message, 2)
		end

		local componentName = ("RoduxConnection(%s)"):format(tostring(innerComponent))

		local Connection = Roact.Component:extend(componentName)

		function Connection.getDerivedStateFromProps(nextProps, prevState)
			if prevState.stateUpdater ~= nil then
				return prevState.stateUpdater(nextProps.innerProps, prevState)
			end
		end

		function Connection:createStoreConnection()
			self.storeChangedConnection = self.store.changed:connect(function(storeState)
				self:setState(function(prevState, props)
					local mappedStoreState = prevState.mapStateToProps(storeState, props.innerProps)

					-- We run this check here so that we only check shallow
					-- equality with the result of mapStateToProps, and not the
					-- other props that could be passed through the connector.
					if shallowEqual(mappedStoreState, prevState.mappedStoreState) then
						return nil
					end

					return prevState.stateUpdater(props, prevState, mappedStoreState)
				end)
			end)
		end

		function Connection:init(props)
			self.store = props.store

			if self.store == nil then
				local message = formatMessage({
					"Cannot initialize Roact-Rodux connection without being a descendent of StoreProvider!",
					"Tried to wrap component %q",
					"Make sure there is a StoreProvider above this component in the tree.",
				}, {
					tostring(innerComponent),
				})

				error(message)
			end

			local storeState = self.store:getState()

			local mapStateToProps = mapStateToPropsOrThunk
			local mappedStoreState = mapStateToProps(storeState, self.props.innerProps)

			-- mapStateToPropsOrThunk can return a function instead of a state
			-- value. In this variant, we keep that value as mapStateToProps
			-- instead of the original mapStateToProps. This matches react-redux
			-- and enables connectors to keep instance-level state.
			if typeof(mappedStoreState) == "function" then
				mapStateToProps = mappedStoreState
				mappedStoreState = mapStateToProps(storeState, self.props.innerProps)
			end

			if mappedStoreState ~= nil and typeof(mappedStoreState) ~= "table" then
				local message = formatMessage({
					"mapStateToProps must either return a table, or return another function that returns a table.",
					"Instead, it returned %q, which is of type %s.",
				}, {
					tostring(mappedStoreState),
					typeof(mappedStoreState),
				})

				error(message)
			end

			local function dispatch(...)
				return self.store:dispatch(...)
			end

			local mappedStoreDispatch
			if mapDispatchType == "table" then
				mappedStoreDispatch = {}

				for key, actionCreator in pairs(mapDispatchToProps) do
					assert(typeof(actionCreator) == "function", "mapDispatchToProps must contain function values")

					mappedStoreDispatch[key] = function(...)
						dispatch(actionCreator(...))
					end
				end
			elseif mapDispatchType == "function" then
				mappedStoreDispatch = mapDispatchToProps(dispatch)
			end

			local stateUpdater = makeStateUpdater(self.store)

			self.state = {
				-- Combines props, mappedStoreDispatch, and the result of
				-- mapStateToProps into propsForChild. Stored in state so that
				-- getDerivedStateFromProps can access it.
				stateUpdater = stateUpdater,

				-- Used by the store changed connection and stateUpdater to
				-- construct propsForChild.
				mapStateToProps = mapStateToProps,

				-- Used by stateUpdater to construct propsForChild.
				mappedStoreDispatch = mappedStoreDispatch,

				-- Passed directly into the component that Connection is
				-- wrapping.
				propsForChild = nil,
			}

			local extraState = stateUpdater(self.props.innerProps, self.state, mappedStoreState)

			for key, value in pairs(extraState) do
				self.state[key] = value
			end

			self:createStoreConnection()
		end

		function Connection:willUnmount()
			self.storeChangedConnection:disconnect()
		end

		function Connection:render()
			return Roact.createElement(innerComponent, self.state.propsForChild)
		end

		local ConnectedComponent = Roact.Component:extend(componentName)

		function ConnectedComponent:render()
			return Roact.createElement(StoreContext.Consumer, {
				render = function(store)
					return Roact.createElement(Connection, {
						innerProps = self.props,
						store = store,
					})
				end,
			})
		end

		return ConnectedComponent
	end
end

return connect</string>
                      </Properties>
                    </Item>
                    <Item class="ModuleScript" referent="635">
                      <Properties>
                        <string name="Name">join</string>
                        <string name="Source">local function join(...)
	local result = {}

	for i = 1, select("#", ...) do
		local source = select(i, ...)

		if source ~= nil then
			for key, value in pairs(source) do
				result[key] = value
			end
		end
	end

	return result
end

return join</string>
                      </Properties>
                    </Item>
                    <Item class="ModuleScript" referent="636">
                      <Properties>
                        <string name="Name">shallowEqual</string>
                        <string name="Source">local function shallowEqual(a, b)
	if a == nil then
		return b == nil
	elseif b == nil then
		return a == nil
	end

	for key, value in pairs(a) do
		if value ~= b[key] then
			return false
		end
	end

	for key, value in pairs(b) do
		if value ~= a[key] then
			return false
		end
	end

	return true
end

return shallowEqual</string>
                      </Properties>
                    </Item>
                  </Item>
                </Item>
                <Item class="Folder" referent="637">
                  <Properties>
                    <string name="Name">rust-classes</string>
                  </Properties>
                  <Item class="ModuleScript" referent="638">
                    <Properties>
                      <string name="Name">out</string>
                      <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.3
local TS = _G[script]
local lazyRegister = TS.import(script, script, "util", "lazyLoad").lazyRegister
local _HashMap = TS.import(script, script, "classes", "HashMap")
local Entry = _HashMap.Entry
local HashMap = _HashMap.HashMap
lazyRegister("HashMap", HashMap)
local Iterator = TS.import(script, script, "classes", "Iterator").Iterator
lazyRegister("Iterator", Iterator)
local Option = TS.import(script, script, "classes", "Option").Option
lazyRegister("Option", Option)
local OptionMut = TS.import(script, script, "classes", "OptionMut").OptionMut
local Result = TS.import(script, script, "classes", "Result").Result
lazyRegister("Result", Result)
local Vec = TS.import(script, script, "classes", "Vec").Vec
lazyRegister("Vec", Vec)
local unit = TS.import(script, script, "util", "Unit").unit
return {
	Entry = Entry,
	HashMap = HashMap,
	Iterator = Iterator,
	Option = Option,
	OptionMut = OptionMut,
	Result = Result,
	Vec = Vec,
	unit = unit,
}
]]></string>
                    </Properties>
                    <Item class="Folder" referent="639">
                      <Properties>
                        <string name="Name">classes</string>
                      </Properties>
                      <Item class="ModuleScript" referent="640">
                        <Properties>
                          <string name="Name">HashMap</string>
                          <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.3
local TS = _G[script]
local lazyGet = TS.import(script, script.Parent.Parent, "util", "lazyLoad").lazyGet
local _sizeHint = TS.import(script, script.Parent.Parent, "util", "sizeHint")
local fixedSizeHint = _sizeHint.fixedSizeHint
local upperSizeHint = _sizeHint.upperSizeHint
local Iterator
lazyGet("Iterator", function(c)
	Iterator = c
end)
local Option
lazyGet("Option", function(c)
	Option = c
end)
local Result
lazyGet("Result", function(c)
	Result = c
end)
local Vec
lazyGet("Vec", function(c)
	Vec = c
end)
local Entry
do
	Entry = setmetatable({}, {
		__tostring = function()
			return "Entry"
		end,
	})
	Entry.__index = Entry
	function Entry.new(...)
		local self = setmetatable({}, Entry)
		return self:constructor(...) or self
	end
	function Entry:constructor(map, index)
		self.map = map
		self.index = index
	end
	function Entry:construct(map, key)
		return Entry.new(map, key)
	end
	function Entry:orInsert(def)
		return self.map:get(self.index):unwrapOrElse(function()
			self.map:insert(self.index, def)
			return def
		end)
	end
	function Entry:orInsertWith(def)
		return self.map:get(self.index):unwrapOrElse(function()
			local val = def()
			self.map:insert(self.index, val)
			return val
		end)
	end
	function Entry:orInsertWithKey(def)
		return self.map:get(self.index):unwrapOrElse(function()
			local val = def(self.index)
			self.map:insert(self.index, val)
			return val
		end)
	end
	function Entry:key()
		return self.index
	end
	function Entry:andModify(f)
		self.map:get(self.index):map(f)
		return self
	end
	function Entry:insert(value)
		self.map:insert(self.index, value)
		return self
	end
end
local HashMap
do
	HashMap = setmetatable({}, {
		__tostring = function()
			return "HashMap"
		end,
	})
	HashMap.__index = HashMap
	function HashMap.new(...)
		local self = setmetatable({}, HashMap)
		return self:constructor(...) or self
	end
	function HashMap:constructor(map)
		self.map = map
		-- ▼ ReadonlyMap.size ▼
		local _size = 0
		for _ in pairs(self.map) do
			_size += 1
		end
		-- ▲ ReadonlyMap.size ▲
		self.length = _size
	end
	function HashMap:withCapacity(size)
		return HashMap.new(table.create(size))
	end
	function HashMap:empty()
		return HashMap.new({})
	end
	function HashMap:fromPtr(map)
		return HashMap.new(map)
	end
	function HashMap:toString()
		return "HashMap{" .. string.sub(self:iter():fold("", function(acc, item)
			return acc .. "(" .. tostring(item[1]) .. ", " .. tostring(item[2]) .. "), "
		end), 0, -3) .. "}"
	end
	function HashMap:i(i)
		local val = self.map[i]
		if val == nil then
			error("called `HashMap.i` with an out-of-range index: " .. tostring(i), 2)
		end
		return val
	end
	function HashMap:keys()
		local last
		return Iterator:fromRawParts(function()
			local key = (next(self.map, last))
			return Option:wrap(key):map(function()
				last = key
				return key
			end)
		end, fixedSizeHint(self.length))
	end
	function HashMap:values()
		local last
		return Iterator:fromRawParts(function()
			local key, value = next(self.map, last)
			return Option:wrap(value):map(function()
				last = key
				return value
			end)
		end, fixedSizeHint(self.length))
	end
	function HashMap:iter()
		local last
		return Iterator:fromRawParts(function()
			local key, value = next(self.map, last)
			return Option:wrap(value):map(function()
				last = key
				return { key, value }
			end)
		end, fixedSizeHint(self.length))
	end
	function HashMap:len()
		return self.length
	end
	function HashMap:isEmpty()
		return self.length == 0
	end
	function HashMap:drain()
		local last
		return Iterator:fromRawParts(function()
			local key, value = next(self.map, last)
			return self:removeEntry(key):map(function()
				last = key
				return { key, value }
			end)
		end, fixedSizeHint(self.length))
	end
	function HashMap:drainFilter(filter)
		local last
		return Iterator:fromRawParts(function()
			while true do
				last = (next(self.map, last))
				if not (last ~= 0 and last == last and last ~= "" and last) then
					break
				end
				local element = self:removeEntry(last)
				if element:map(function(_param)
					local k = _param[1]
					local v = _param[2]
					return filter(k, v)
				end):contains(true) then
					return element
				end
			end
			return Option:none()
		end, upperSizeHint(self.length))
	end
	function HashMap:clear()
		-- ▼ Map.clear ▼
		table.clear(self.map)
		-- ▲ Map.clear ▲
		self.length = 0
		return self
	end
	function HashMap:entry(key)
		return Entry:construct(self, key)
	end
	function HashMap:get(key)
		return Option:wrap(self.map[key])
	end
	function HashMap:getKeyValue(key)
		return Option:some(key):zip(Option:wrap(self.map[key]))
	end
	function HashMap:containsKey(key)
		return self.map[key] ~= nil
	end
	function HashMap:insert(key, value)
		local old = self.map[key]
		-- ▼ Map.set ▼
		self.map[key] = value
		-- ▲ Map.set ▲
		return Option:wrap(old)
	end
	function HashMap:tryInsert(key, value)
		local old = self.map[key]
		if old ~= 0 and old == old and old ~= "" and old then
			return Result:err({
				entry = Entry:construct(self, key),
				value = value,
			})
		end
		-- ▼ Map.set ▼
		self.map[key] = value
		-- ▲ Map.set ▲
		return Result:ok(value)
	end
	function HashMap:remove(key)
		local old = self.map[key]
		-- ▼ Map.delete ▼
		self.map[key] = nil
		-- ▲ Map.delete ▲
		return Option:wrap(old)
	end
	function HashMap:removeEntry(key)
		local old = self.map[key]
		-- ▼ Map.delete ▼
		self.map[key] = nil
		-- ▲ Map.delete ▲
		return Option:some(key):zip(Option:wrap(old))
	end
	function HashMap:retain(filter)
		local _map = self.map
		local _arg0 = function(v, k)
			if not filter(k, v) then
				-- ▼ Map.delete ▼
				self.map[k] = nil
				-- ▲ Map.delete ▲
			end
		end
		-- ▼ ReadonlyMap.forEach ▼
		for _k, _v in pairs(_map) do
			_arg0(_v, _k, _map)
		end
		-- ▲ ReadonlyMap.forEach ▲
		return self
	end
	function HashMap:intoKeys()
		local last
		return Iterator:fromRawParts(function()
			local key, value = next(self.map, last)
			return Option:wrap(key):map(function()
				last = key
				return key
			end)
		end, fixedSizeHint(self.length))
	end
	function HashMap:intoValues()
		local last
		return Iterator:fromRawParts(function()
			local key, value = next(self.map, last)
			return Option:wrap(key):map(function()
				last = key
				return value
			end)
		end, fixedSizeHint(self.length))
	end
	function HashMap:__tostring()
		return self:toString()
	end
end
return {
	Entry = Entry,
	HashMap = HashMap,
}
]]></string>
                        </Properties>
                      </Item>
                      <Item class="ModuleScript" referent="641">
                        <Properties>
                          <string name="Name">Iterator</string>
                          <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.3
local TS = _G[script]
local lazyGet = TS.import(script, script.Parent.Parent, "util", "lazyLoad").lazyGet
local _sizeHint = TS.import(script, script.Parent.Parent, "util", "sizeHint")
local fixedSizeHint = _sizeHint.fixedSizeHint
local lowerSizeHint = _sizeHint.lowerSizeHint
local unit = TS.import(script, script.Parent.Parent, "util", "Unit").unit
local Option
lazyGet("Option", function(c)
	Option = c
end)
local Result
lazyGet("Result", function(c)
	Result = c
end)
local Vec
lazyGet("Vec", function(c)
	Vec = c
end)
local Iterator
do
	Iterator = setmetatable({}, {
		__tostring = function()
			return "Iterator"
		end,
	})
	Iterator.__index = Iterator
	function Iterator.new(...)
		local self = setmetatable({}, Iterator)
		return self:constructor(...) or self
	end
	function Iterator:constructor(nextItem, sizeHint)
		self.nextItem = nextItem
		self.consumed = false
		local _condition = sizeHint
		if _condition == nil then
			_condition = lowerSizeHint(0)
		end
		self.sizeHint = _condition
	end
	function Iterator:fromRawParts(nextItem, sizeHint)
		return Iterator.new(nextItem, sizeHint)
	end
	function Iterator:fromItems(...)
		local items = { ... }
		local i = 0
		return Iterator.new(function()
			local _fn = Option
			local _exp = items
			local _original = i
			i += 1
			return _fn:wrap(_exp[_original + 1])
		end, fixedSizeHint(#items))
	end
	function Iterator:consume()
		if self.consumed then
			error("Attempt to consume Iterator twice", 3)
		end
		self.consumed = true
	end
	function Iterator:count()
		self:consume()
		local i = 0
		repeat
			do
				i += 1
			end
		until not self.nextItem():isSome()
		return i
	end
	function Iterator:last()
		self:consume()
		local last = Option:none()
		while true do
			local curr = self.nextItem()
			if curr:isNone() then
				break
			end
			last = curr
		end
		return last
	end
	function Iterator:advanceBy(n)
		do
			local i = 0
			local _shouldIncrement = false
			while true do
				if _shouldIncrement then
					i += 1
				else
					_shouldIncrement = true
				end
				if not (i < n) then
					break
				end
				if self.nextItem():isNone() then
					return Result:err(i - 1)
				end
			end
		end
		return Result:ok(unit())
	end
	function Iterator:nth(n)
		return self:advanceBy(n):okOption():andWith(function()
			return self.nextItem()
		end)
	end
	function Iterator:stepBy(step)
		self:consume()
		if step == 0 then
			error("called Iterator.stepBy with a step of 0", 2)
		end
		local takeFirst = true
		return Iterator.new(function()
			if takeFirst then
				takeFirst = false
				return self.nextItem()
			else
				return self:nth(step - 1)
			end
		end, function()
			local low, high = self.sizeHint()
			local firstSize = function(step)
				return function(n)
					return n == 0 and 0 or 1 + (n - 1) / step
				end
			end
			local otherSize = function(step)
				return function(n)
					return n / step
				end
			end
			local f = (takeFirst and firstSize or otherSize)(step)
			return f(low), high:map(f)
		end)
	end
	function Iterator:chain(other)
		self:consume()
		other:consume()
		local firstDone = false
		return Iterator.new(function()
			if firstDone then
				return other.nextItem()
			else
				local result = self.nextItem()
				if result:isNone() then
					firstDone = true
					return other.nextItem()
				else
					return result
				end
			end
		end, function()
			local firstLow, firstHigh = self.sizeHint()
			local lastLow, lastHigh = other.sizeHint()
			return firstLow + lastLow, firstHigh:andWith(function(firstSize)
				return lastHigh:map(function(lastSize)
					return firstSize + lastSize
				end)
			end)
		end)
	end
	function Iterator:zip(other)
		self:consume()
		other:consume()
		return Iterator.new(function()
			local first = self.nextItem()
			if first:isSome() then
				return first:zip(other.nextItem())
			else
				return Option:none()
			end
		end, function()
			local firstLow, firstHigh = self.sizeHint()
			local lastLow, lastHigh = other.sizeHint()
			local _exp = math.min(firstLow, lastLow)
			local _fn = firstHigh:map(function(firstSize)
				return lastHigh:map(function(lastSize)
					return math.min(firstSize, lastSize)
				end):unwrapOr(firstSize)
			end)
			return _exp, _fn["or"](_fn, lastHigh)
		end)
	end
	function Iterator:intersperse(other)
		return self:intersperseWith(function()
			return other
		end)
	end
	function Iterator:intersperseWith(other)
		self:consume()
		local doIntermediate = true
		return Iterator.new(function()
			doIntermediate = not doIntermediate
			if doIntermediate then
				return Option:some(other())
			else
				return self.nextItem()
			end
		end, function()
			local low, high = self.sizeHint()
			local f = function(n)
				if n < 2 then
					return n
				else
					return n * 2 - 1
				end
			end
			return f(low), high:map(f)
		end)
	end
	function Iterator:map(f)
		self:consume()
		return Iterator.new(function()
			return self.nextItem():map(f)
		end, function()
			return self.sizeHint()
		end)
	end
	function Iterator:forEach(f)
		self:consume()
		local result
		while true do
			result = self.nextItem()
			if result:isNone() then
				break
			end
			result:map(f)
		end
	end
	function Iterator:filter(f)
		self:consume()
		return Iterator.new(function()
			while true do
				local item = self.nextItem()
				if item:isNone() or item:map(f):contains(true) then
					return item
				end
			end
		end, function()
			return 0, (select(2, self.sizeHint()))
		end)
	end
	function Iterator:filterMap(f)
		self:consume()
		return Iterator.new(function()
			while true do
				local item = self.nextItem()
				local mapped = item:andWith(f)
				if mapped:isSome() then
					return mapped
				end
			end
		end, function()
			return 0, (select(2, self.sizeHint()))
		end)
	end
	function Iterator:enumerate()
		self:consume()
		local i = 0
		return Iterator.new(function()
			return Option:some(i):zip(self.nextItem()):map(function(item)
				i += 1
				return item
			end)
		end, function()
			return self.sizeHint()
		end)
	end
	function Iterator:skipWhile(f)
		self:consume()
		while true do
			local item = self.nextItem()
			local mapped = item:map(f)
			if not mapped:contains(true) then
				break
			end
		end
		return Iterator.new(function()
			return self.nextItem()
		end, function()
			return 0, (select(2, self.sizeHint()))
		end)
	end
	function Iterator:takeWhile(f)
		self:consume()
		local done = false
		return Iterator.new(function()
			if done then
				return Option:none()
			else
				local item = self.nextItem()
				local mapped = item:map(f)
				if not mapped:contains(true) then
					return item
				else
					if item:isSome() then
						done = true
					end
					return Option:none()
				end
			end
		end, function()
			if done then
				return 0, Option:some(0)
			else
				return 0, (select(2, self.sizeHint()))
			end
		end)
	end
	function Iterator:mapWhile(f)
		self:consume()
		return Iterator.new(function()
			return self.nextItem():andWith(f)
		end, function()
			return 0, (select(2, self.sizeHint()))
		end)
	end
	function Iterator:skip(n)
		self:consume()
		local skipped = false
		return Iterator.new(function()
			if not skipped then
				skipped = true
				return self:nth(n)
			else
				return self.nextItem()
			end
		end, function()
			local low, high = self.sizeHint()
			return math.max(0, low - n), high:map(function(size)
				return math.max(0, size - n)
			end)
		end)
	end
	function Iterator:take(n)
		self:consume()
		local toGo = n
		return Iterator.new(function()
			if toGo > 0 then
				toGo -= 1
				return self.nextItem()
			else
				return Option:none()
			end
		end, function()
			local low, high = self.sizeHint()
			local _exp = math.min(low, n)
			local _fn = high:andWith(function(size)
				return size < n and Option:some(size) or Option:none()
			end)
			return _exp, _fn["or"](_fn, Option:some(n))
		end)
	end
	function Iterator:scan(state, f)
		self:consume()
		return Iterator.new(function()
			return self.nextItem():andWith(function(item)
				return f(state, item)
			end)
		end, function()
			return 0, (select(2, self.sizeHint()))
		end)
	end
	function Iterator:flatMap(f)
		self:consume()
		local curr
		return Iterator.new(function()
			local item = curr.nextItem()
			if item:isNone() then
				local nextIter = self.nextItem()
				return nextIter:match(function(iter)
					curr = f(iter)
					return curr.nextItem()
				end, function()
					return Option:none()
				end)
			else
				return item
			end
		end, function()
			if (select(2, self.sizeHint())):contains(0) then
				return curr.sizeHint()
			else
				return (curr.sizeHint()), Option:none()
			end
		end)
	end
	function Iterator:flatten()
		return self:flatMap(function(i)
			return i
		end)
	end
	function Iterator:fuse()
		self:consume()
		local done = false
		return Iterator.new(function()
			if done then
				return Option:none()
			else
				local item = self.nextItem()
				if item:isNone() then
					done = true
				end
				return item
			end
		end, function()
			if done then
				return 0, Option:some(0)
			else
				return 0, (select(2, self.sizeHint()))
			end
		end)
	end
	function Iterator:inspect(f)
		self:consume()
		return Iterator.new(function()
			local item = self.nextItem()
			item:map(f)
			return item
		end, function()
			return self.sizeHint()
		end)
	end
	function Iterator:byRef()
		return Iterator.new(function()
			return self.nextItem()
		end, function()
			return self.sizeHint()
		end)
	end
	function Iterator:collect()
		self:consume()
		local size = { self.sizeHint() }
		local vec = Vec:withCapacity(size[2]:unwrapOr(size[1]))
		local item = self.nextItem()
		while item:isSome() do
			vec:push(item:unwrap())
			item = self.nextItem()
		end
		return vec
	end
	function Iterator:partition(f)
		local trueVec = Vec:vec()
		local falseVec = Vec:vec()
		self:forEach(function(item)
			if f(item) then
				trueVec:push(item)
			else
				falseVec:push(item)
			end
		end)
		return trueVec, falseVec
	end
	function Iterator:tryFold(init, f)
		local acc = Result:ok(init)
		local item = self.nextItem()
		while item:isSome() do
			acc = f(acc:asPtr(), item:unwrap())
			if acc:isErr() then
				break
			end
			item = self.nextItem()
		end
		return acc
	end
	function Iterator:tryForEach(f)
		return self:tryFold(unit(), function(_, item)
			return f(item)
		end)
	end
	function Iterator:fold(init, f)
		self:consume()
		local acc = init
		local item = self.nextItem()
		while item:isSome() do
			acc = f(acc, item:unwrap())
			item = self.nextItem()
		end
		return acc
	end
	function Iterator:reduce(f)
		local first = self.nextItem()
		return first:map(function(item)
			return self:fold(item, f)
		end):orElse(function()
			self:consume()
			return Option:none()
		end)
	end
	function Iterator:all(f)
		local item = self.nextItem()
		while item:isSome() do
			if not f(item:unwrap()) then
				return false
			end
			item = self.nextItem()
		end
		return true
	end
	function Iterator:any(f)
		local item = self.nextItem()
		while item:isSome() do
			if f(item:unwrap()) then
				return true
			end
			item = self.nextItem()
		end
		return false
	end
	function Iterator:find(f)
		local item = self.nextItem()
		while item:isSome() do
			if f(item:unwrap()) then
				return item
			end
			item = self.nextItem()
		end
		return Option:none()
	end
	function Iterator:findMap(f)
		local item = self.nextItem()
		while item:isSome() do
			local result = f(item:unwrap())
			if result:isSome() then
				return result
			end
			item = self.nextItem()
		end
		return Option:none()
	end
	function Iterator:tryFind(f)
		local item = self.nextItem()
		while item:isSome() do
			local result = f(item:unwrap())
			if result:contains(true) then
				return Result:ok(item)
			elseif result:isErr() then
				-- Result err variants are both R
				return result
			end
			item = self.nextItem()
		end
		return Result:ok(Option:none())
	end
	function Iterator:position(f)
		local item = self.nextItem()
		local i = 0
		while item:isSome() do
			if f(item:unwrap()) then
				return Option:some(i)
			end
			item = self.nextItem()
			i += 1
		end
		return Option:none()
	end
	function Iterator:max()
		return self:reduce(function(a, b)
			return b >= a and b or a
		end)
	end
	function Iterator:min()
		return self:reduce(function(a, b)
			return b < a and b or a
		end)
	end
	function Iterator:maxByKey(f)
		return self:reduce(function(a, b)
			local _result
			if f(b) >= f(a) then
				_result = b
			else
				_result = a
			end
			return _result
		end)
	end
	function Iterator:minByKey(f)
		return self:reduce(function(a, b)
			local _result
			if f(b) < f(a) then
				_result = b
			else
				_result = a
			end
			return _result
		end)
	end
	function Iterator:maxBy(f)
		return self:reduce(function(a, b)
			local _result
			if f(a, b) >= 0 then
				_result = a
			else
				_result = b
			end
			return _result
		end)
	end
	function Iterator:unzip()
		self:consume()
		local size = { self.sizeHint() }
		local leftVec = Vec:withCapacity(size[2]:unwrapOr(size[1]))
		local rightVec = Vec:withCapacity(size[2]:unwrapOr(size[1]))
		local item = self.nextItem()
		while item:isSome() do
			local _binding = item:unwrap()
			local a = _binding[1]
			local b = _binding[2]
			leftVec:push(a)
			rightVec:push(b)
			item = self.nextItem()
		end
		return leftVec, rightVec
	end
	function Iterator:sum()
		return self:reduce(function(acc, item)
			return acc + item
		end):unwrapOr(0)
	end
	function Iterator:product()
		return self:reduce(function(acc, item)
			return acc * item
		end):unwrapOr(1)
	end
	function Iterator:eq(other)
		return self:eqBy(other, function(a, b)
			return a == b
		end)
	end
	function Iterator:eqBy(other, eq)
		self:consume()
		while true do
			local item = self.nextItem()
			if item:isNone() then
				return other.nextItem():isNone()
			end
			local a = item:unwrap()
			local otherItem = other.nextItem()
			if otherItem:isNone() then
				return false
			end
			local b = otherItem:unwrap()
			if not eq(a, b) then
				return false
			end
		end
	end
	function Iterator:ne(other)
		return not self:eq(other)
	end
	function Iterator:isSorted()
		return self:isSortedBy(function(a, b)
			return Option:some(a - b)
		end)
	end
	function Iterator:isSortedBy(f)
		self:consume()
		local lastOpt = self.nextItem()
		if lastOpt:isNone() then
			return true
		else
			local last = lastOpt:unwrap()
			return self:all(function(item)
				local result = f(last, item)
				if not result:map(function(ord)
					return ord > 0
				end):contains(false) then
					return false
				end
				last = item
				return true
			end)
		end
	end
	function Iterator:isSortedByKey(f)
		return self:map(f):isSorted()
	end
	function Iterator:generator()
		return TS.generator(function()
			local item = self.nextItem()
			while item:isSome() do
				coroutine.yield(item:unwrap())
				item = self.nextItem()
			end
		end)
	end
end
return {
	Iterator = Iterator,
}
]]></string>
                        </Properties>
                      </Item>
                      <Item class="ModuleScript" referent="642">
                        <Properties>
                          <string name="Name">Option</string>
                          <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.3
local TS = _G[script]
local lazyGet = TS.import(script, script.Parent.Parent, "util", "lazyLoad").lazyGet
local Iterator
lazyGet("Iterator", function(c)
	Iterator = c
end)
local Result
lazyGet("Result", function(c)
	Result = c
end)
local Vec
lazyGet("Vec", function(c)
	Vec = c
end)
local Option
do
	Option = setmetatable({}, {
		__tostring = function()
			return "Option"
		end,
	})
	Option.__index = Option
	function Option.new(...)
		local self = setmetatable({}, Option)
		return self:constructor(...) or self
	end
	function Option:constructor(value)
		self.value = value
	end
	function Option:none()
		return Option.new(nil)
	end
	function Option:some(val)
		return Option.new(val)
	end
	function Option:wrap(val)
		return Option.new(val)
	end
	function Option:toString()
		return self:match(function(val)
			return "Option.some(" .. tostring(val) .. ")"
		end, function()
			return "Option.none"
		end)
	end
	function Option:isSome()
		return self.value ~= nil
	end
	function Option:isNone()
		return not self:isSome()
	end
	function Option:contains(x)
		return self.value == x
	end
	function Option:expect(msg)
		if self:isSome() then
			return self.value
		else
			error(msg)
		end
	end
	function Option:unwrap()
		return self:expect("called `Option.unwrap()` on a `None` value")
	end
	function Option:unwrapOr(def)
		local _result
		if self:isSome() then
			_result = (self.value)
		else
			_result = def
		end
		return _result
	end
	function Option:unwrapOrElse(gen)
		local _result
		if self:isSome() then
			_result = (self.value)
		else
			_result = gen()
		end
		return _result
	end
	function Option:map(func)
		return self:isSome() and Option:some(func(self.value)) or Option:none()
	end
	function Option:mapOr(def, func)
		local _result
		if self:isSome() then
			_result = func(self.value)
		else
			_result = def
		end
		return _result
	end
	function Option:mapOrElse(def, func)
		local _result
		if self:isSome() then
			_result = func(self.value)
		else
			_result = def()
		end
		return _result
	end
	function Option:okOr(err)
		return self:isSome() and Result:ok(self.value) or Result:err(err)
	end
	function Option:okOrElse(err)
		return self:isSome() and Result:ok(self.value) or Result:err(err())
	end
	Option["and"] = function(self, other)
		return self:isNone() and Option:none() or other
	end
	function Option:andWith(other)
		return self:isSome() and other(self.value) or Option:none()
	end
	function Option:filter(func)
		return self:isSome() and (func(self.value) and Option:some(self.value) or Option:none()) or Option:none()
	end
	Option["or"] = function(self, other)
		return self:isSome() and Option:some(self.value) or other
	end
	function Option:orElse(other)
		return self:isSome() and Option:some(self.value) or other()
	end
	function Option:xor(other)
		return self:isSome() and (other:isSome() and Option:none() or Option:some(self.value)) or other:isSome() and Option:some(other.value) or Option:none()
	end
	function Option:zip(other)
		if self:isSome() and other:isSome() then
			return Option:some({ self.value, other.value })
		end
		return Option:none()
	end
	function Option:zipWith(other, func)
		if self:isSome() and other:isSome() then
			return Option:some(func(self.value, other.value))
		end
		return Option:none()
	end
	function Option:copied()
		return Option:wrap(self.value)
	end
	function Option:cloned()
		return self:map(function(i)
			return i.cloned()
		end)
	end
	function Option:transpose()
		return self:isSome() and (self.value:isOk() and Result:ok(Option:some(self.value:asPtr())) or Result:err(self.value:asPtr())) or Result:ok(Option:none())
	end
	function Option:flatten()
		return self:isSome() and Option:wrap(self.value.value) or Option:none()
	end
	function Option:match(ifSome, ifNone)
		local _result
		if self:isSome() then
			_result = ifSome(self.value)
		else
			_result = ifNone()
		end
		return _result
	end
	function Option:asPtr()
		return self.value
	end
	function Option:__tostring()
		return self:toString()
	end
end
local optionMeta = Option
optionMeta.__unm = function(option)
	return option:map(function(item)
		return -item
	end)
end
optionMeta.__add = function(option, other)
	return option:andWith(function(item)
		return other:map(function(otherItem)
			return item + otherItem
		end)
	end)
end
optionMeta.__sub = function(option, other)
	return option:andWith(function(item)
		return other:map(function(otherItem)
			return item - otherItem
		end)
	end)
end
optionMeta.__mul = function(option, other)
	return option:andWith(function(item)
		return other:map(function(otherItem)
			return item * otherItem
		end)
	end)
end
optionMeta.__div = function(option, other)
	return option:andWith(function(item)
		return other:map(function(otherItem)
			return item / otherItem
		end)
	end)
end
optionMeta.__mod = function(option, other)
	return option:andWith(function(item)
		return other:map(function(otherItem)
			return item % otherItem
		end)
	end)
end
optionMeta.__pow = function(option, other)
	return option:andWith(function(item)
		return other:map(function(otherItem)
			return bit32.bxor(item, otherItem)
		end)
	end)
end
optionMeta.__eq = function(a, b)
	return a:asPtr() == b:asPtr()
end
optionMeta.__len = function(option)
	return option:map(function(item)
		return #item
	end):unwrapOr(0)
end
return {
	Option = Option,
}
]]></string>
                        </Properties>
                      </Item>
                      <Item class="ModuleScript" referent="643">
                        <Properties>
                          <string name="Name">OptionMut</string>
                          <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.3
local TS = _G[script]
local lazyGet = TS.import(script, script.Parent.Parent, "util", "lazyLoad").lazyGet
local fixedSizeHint = TS.import(script, script.Parent.Parent, "util", "sizeHint").fixedSizeHint
local Iterator
lazyGet("Iterator", function(c)
	Iterator = c
end)
local Option
lazyGet("Option", function(c)
	Option = c
end)
local Result
lazyGet("Result", function(c)
	Result = c
end)
local Vec
lazyGet("Vec", function(c)
	Vec = c
end)
local OptionMut
do
	local super = Option
	OptionMut = setmetatable({}, {
		__tostring = function()
			return "OptionMut"
		end,
		__index = super,
	})
	OptionMut.__index = OptionMut
	function OptionMut.new(...)
		local self = setmetatable({}, OptionMut)
		return self:constructor(...) or self
	end
	function OptionMut:constructor(...)
		super.constructor(self, ...)
	end
	function OptionMut:none()
		return OptionMut.new(nil)
	end
	function OptionMut:some(val)
		return OptionMut.new(val)
	end
	function OptionMut:wrap(val)
		return OptionMut.new(val)
	end
	function OptionMut:toString()
		return self:match(function(val)
			return "OptionMut.some(" .. tostring(val) .. ")"
		end, function()
			return "OptionMut.none"
		end)
	end
	function OptionMut:insert(val)
		self.value = val
		return self.value
	end
	function OptionMut:getOrInsert(val)
		if not self:isSome() then
			self.value = val
			return self.value
		else
			return self.value
		end
	end
	function OptionMut:getOrInsertWith(val)
		if not self:isSome() then
			self.value = val()
			return self.value
		else
			return self.value
		end
	end
	function OptionMut:take()
		local val = self.value
		self.value = nil
		return Option:wrap(val)
	end
	function OptionMut:replace(val)
		local oldVal = self.value
		self.value = val
		return Option:wrap(oldVal)
	end
	function OptionMut:iter()
		return Iterator:fromRawParts(function()
			return self:take()
		end, self:isSome() and fixedSizeHint(1) or fixedSizeHint(0))
	end
	function OptionMut:__tostring()
		return self:toString()
	end
end
local optionMutMeta = OptionMut
optionMutMeta.__unm = function(option)
	return option:map(function(item)
		return -item
	end)
end
optionMutMeta.__add = function(option, other)
	return option:andWith(function(item)
		return other:map(function(otherItem)
			return item + otherItem
		end)
	end)
end
optionMutMeta.__sub = function(option, other)
	return option:andWith(function(item)
		return other:map(function(otherItem)
			return item - otherItem
		end)
	end)
end
optionMutMeta.__mul = function(option, other)
	return option:andWith(function(item)
		return other:map(function(otherItem)
			return item * otherItem
		end)
	end)
end
optionMutMeta.__div = function(option, other)
	return option:andWith(function(item)
		return other:map(function(otherItem)
			return item / otherItem
		end)
	end)
end
optionMutMeta.__mod = function(option, other)
	return option:andWith(function(item)
		return other:map(function(otherItem)
			return item % otherItem
		end)
	end)
end
optionMutMeta.__pow = function(option, other)
	return option:andWith(function(item)
		return other:map(function(otherItem)
			return bit32.bxor(item, otherItem)
		end)
	end)
end
optionMutMeta.__eq = function(a, b)
	return a:asPtr() == b:asPtr()
end
optionMutMeta.__len = function(option)
	return option:map(function(item)
		return #item
	end):unwrapOr(0)
end
return {
	OptionMut = OptionMut,
}
]]></string>
                        </Properties>
                      </Item>
                      <Item class="ModuleScript" referent="644">
                        <Properties>
                          <string name="Name">Result</string>
                          <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.3
local TS = _G[script]
local lazyGet = TS.import(script, script.Parent.Parent, "util", "lazyLoad").lazyGet
local unit = TS.import(script, script.Parent.Parent, "util", "Unit").unit
local Iterator
lazyGet("Iterator", function(c)
	Iterator = c
end)
local Option
lazyGet("Option", function(c)
	Option = c
end)
local Vec
lazyGet("Vec", function(c)
	Vec = c
end)
local Result
do
	Result = setmetatable({}, {
		__tostring = function()
			return "Result"
		end,
	})
	Result.__index = Result
	function Result.new(...)
		local self = setmetatable({}, Result)
		return self:constructor(...) or self
	end
	function Result:constructor(okValue, errValue)
		self.okValue = okValue
		self.errValue = errValue
	end
	function Result:ok(val)
		return Result.new(val, nil)
	end
	function Result:err(val)
		return Result.new(nil, val)
	end
	function Result:fromCallback(c)
		local success, result = pcall(c)
		return success and Result:ok(result) or Result:err(Option:wrap(result))
	end
	function Result:fromVoidCallback(c)
		local success, result = pcall(c)
		return success and Result:ok(unit()) or Result:err(Option:wrap(result))
	end
	Result.fromPromise = TS.async(function(self, p)
		local _arg0 = function(v)
			return Result:ok(v)
		end
		local _arg1 = function(e)
			return Result:err(Option:wrap(e))
		end
		return p:andThen(_arg0, _arg1)
	end)
	Result.fromVoidPromise = TS.async(function(self, p)
		local _arg0 = function()
			return Result:ok(unit())
		end
		local _arg1 = function(e)
			return Result:err(Option:wrap(e))
		end
		return p:andThen(_arg0, _arg1)
	end)
	function Result:toString()
		return self:match(function(ok)
			return "Result.ok(" .. tostring(ok) .. ")"
		end, function(err)
			return "Result.err(" .. tostring(err) .. ")"
		end)
	end
	function Result:isOk()
		return self.okValue ~= nil
	end
	function Result:isErr()
		return self.errValue ~= nil
	end
	function Result:contains(x)
		return self.okValue == x
	end
	function Result:containsErr(x)
		return self.errValue == x
	end
	function Result:okOption()
		return Option:wrap(self.okValue)
	end
	function Result:errOption()
		return Option:wrap(self.errValue)
	end
	function Result:map(func)
		return self:isOk() and Result:ok(func(self.okValue)) or Result:err(self.errValue)
	end
	function Result:mapOr(def, func)
		local _result
		if self:isOk() then
			_result = func(self.okValue)
		else
			_result = def
		end
		return _result
	end
	function Result:mapOrElse(def, func)
		local _result
		if self:isOk() then
			_result = func(self.okValue)
		else
			_result = def(self.errValue)
		end
		return _result
	end
	function Result:mapErr(func)
		return self:isErr() and Result:err(func(self.errValue)) or Result:ok(self.okValue)
	end
	Result["and"] = function(self, other)
		return self:isErr() and Result:err(self.errValue) or other
	end
	function Result:andWith(func)
		return self:isErr() and Result:err(self.errValue) or func(self.okValue)
	end
	Result["or"] = function(self, other)
		return self:isOk() and Result:ok(self.okValue) or other
	end
	function Result:orElse(other)
		return self:isOk() and Result:ok(self.okValue) or other(self.errValue)
	end
	function Result:expect(msg)
		if self:isOk() then
			return self.okValue
		else
			error(msg)
		end
	end
	function Result:unwrap()
		return self:expect("called \`Result.unwrap()\` on an \`Err\` value: " .. tostring(self.errValue))
	end
	function Result:unwrapOr(def)
		local _result
		if self:isOk() then
			_result = (self.okValue)
		else
			_result = def
		end
		return _result
	end
	function Result:unwrapOrElse(gen)
		local _result
		if self:isOk() then
			_result = (self.okValue)
		else
			_result = gen(self.errValue)
		end
		return _result
	end
	function Result:expectErr(msg)
		if self:isErr() then
			return self.errValue
		else
			error(msg)
		end
	end
	function Result:unwrapErr()
		return self:expectErr("called \`Result.unwrapErr()\` on an \`Ok\` value: " .. tostring(self.okValue))
	end
	function Result:transpose()
		return self:isOk() and self.okValue:map(function(some)
			return Result:ok(some)
		end) or Option:some(Result:err(self.errValue))
	end
	function Result:flatten()
		return self:isOk() and Result.new(self.okValue.okValue, self.okValue.errValue) or Result:err(self.errValue)
	end
	function Result:match(ifOk, ifErr)
		local _result
		if self:isOk() then
			_result = ifOk(self.okValue)
		else
			_result = ifErr(self.errValue)
		end
		return _result
	end
	function Result:asPtr()
		local _condition = (self.okValue)
		if _condition == nil then
			_condition = (self.errValue)
		end
		return _condition
	end
	function Result:__tostring()
		return self:toString()
	end
end
local resultMeta = Result
resultMeta.__eq = function(a, b)
	return b:match(function(ok)
		return a:contains(ok)
	end, function(err)
		return a:containsErr(err)
	end)
end
return {
	Result = Result,
}
]]></string>
                        </Properties>
                      </Item>
                      <Item class="ModuleScript" referent="645">
                        <Properties>
                          <string name="Name">Vec</string>
                          <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.3
local TS = _G[script]
local lazyGet = TS.import(script, script.Parent.Parent, "util", "lazyLoad").lazyGet
local resolveRange = TS.import(script, script.Parent.Parent, "util", "Range").resolveRange
local _sizeHint = TS.import(script, script.Parent.Parent, "util", "sizeHint")
local fixedSizeHint = _sizeHint.fixedSizeHint
local upperSizeHint = _sizeHint.upperSizeHint
local Iterator
lazyGet("Iterator", function(c)
	Iterator = c
end)
local Option
lazyGet("Option", function(c)
	Option = c
end)
local Result
lazyGet("Result", function(c)
	Result = c
end)
local Vec
do
	Vec = setmetatable({}, {
		__tostring = function()
			return "Vec"
		end,
	})
	Vec.__index = Vec
	function Vec.new(...)
		local self = setmetatable({}, Vec)
		return self:constructor(...) or self
	end
	function Vec:constructor(array)
		self.array = array
		self.length = #self.array
	end
	function Vec:withCapacity(size)
		return Vec.new(table.create(size))
	end
	function Vec:vec(...)
		local values = { ... }
		return Vec.new(values)
	end
	function Vec:fromPtr(array)
		return Vec.new(array)
	end
	function Vec:toString()
		return "Vec[" .. string.sub(self:iter():fold("", function(acc, item)
			return acc .. tostring(item) .. ", "
		end), 0, -3) .. "]"
	end
	function Vec:i(i)
		local val = self.array[i + 1]
		if val == nil then
			error("called `Vec.i` with an out-of-range index: " .. tostring(i), 2)
		end
		return val
	end
	function Vec:truncate(len)
		if len < 0 then
			error("called `Vec.truncate` with an out-of-range length: " .. tostring(len), 2)
		end
		if len >= self.length then
			return self
		end
		do
			local i = self.length - 1
			local _shouldIncrement = false
			while true do
				if _shouldIncrement then
					i -= 1
				else
					_shouldIncrement = true
				end
				if not (i >= len) then
					break
				end
				self.array[i + 1] = nil
			end
		end
		self.length = len
		return self
	end
	function Vec:asPtr()
		return self.array
	end
	function Vec:setLen(len)
		self.length = len
		return self
	end
	function Vec:swapRemove(i)
		if i < 0 or i >= self.length then
			error("called `Vec.swapRemove` with an out-of-range index: " .. tostring(i), 2)
		end
		self.length -= 1
		-- ▼ Array.unorderedRemove ▼
		local _index = i + 1
		local _exp = self.array
		local _length = #_exp
		local _value = _exp[_index]
		if _value then
			_exp[_index] = _exp[_length]
			_exp[_length] = nil
		end
		-- ▲ Array.unorderedRemove ▲
		return _value
	end
	function Vec:insert(i, element)
		if i < 0 or i > self.length then
			error("called `Vec.insert` with an out-of-range index: " .. tostring(i), 2)
		end
		self.length += 1
		table.insert(self.array, i + 1, element)
		return self
	end
	function Vec:remove(i)
		if i < 0 or i >= self.length then
			error("called `Vec.remove` with an out-of-range index: " .. tostring(i), 2)
		end
		self.length -= 1
		return table.remove(self.array, i + 1)
	end
	function Vec:retain(func)
		local length = self.length
		local deleted = 0
		do
			local i = 0
			local _shouldIncrement = false
			while true do
				if _shouldIncrement then
					i += 1
				else
					_shouldIncrement = true
				end
				if not (i < length) then
					break
				end
				if not func(self.array[i + 1]) then
					deleted += 1
				elseif deleted > 0 then
					self:swap(i - deleted, i)
				end
			end
		end
		if deleted > 0 then
			self:truncate(length - deleted)
		end
		return self
	end
	function Vec:dedupByKey(func)
		return self:dedupBy(function(a, b)
			return func(a) == func(b)
		end)
	end
	function Vec:dedupBy(isDup)
		if self.length > 1 then
			local nextRead = 1
			local nextWrite = 1
			while nextRead < self.length do
				if not isDup(self.array[nextRead + 1], self.array[nextWrite - 1 + 1]) then
					self:swap(nextRead, nextWrite)
					nextWrite += 1
				end
				nextRead += 1
			end
			self:truncate(nextWrite)
		end
		return self
	end
	function Vec:dedup()
		return self:dedupBy(function(a, b)
			return a == b
		end)
	end
	function Vec:push(element)
		self.length += 1
		local _array = self.array
		-- ▼ Array.push ▼
		_array[#_array + 1] = element
		-- ▲ Array.push ▲
		return self
	end
	function Vec:pop()
		local _fn = Option
		local _exp = self.array
		-- ▼ Array.pop ▼
		local _length = #_exp
		local _result = _exp[_length]
		_exp[_length] = nil
		-- ▲ Array.pop ▲
		return _fn:wrap(_result):map(function(e)
			self.length -= 1
			return e
		end)
	end
	function Vec:append(other)
		for _, element in ipairs(other.array) do
			local _array = self.array
			-- ▼ Array.push ▼
			_array[#_array + 1] = element
			-- ▲ Array.push ▲
		end
		self.length += other:len()
		other:clear()
		return self
	end
	function Vec:drain(r)
		local range = resolveRange(r, self.length)
		if range[1] < 0 or range[1] > range[2] or range[2] > self.length then
			error("called \`Vec.drain\` with an invalid \`Range\`: [" .. tostring(r[1]) .. ", " .. tostring(r[2]) .. "]", 2)
		end
		local size = range[2] - range[1]
		local i = range[1]
		return Iterator:fromRawParts(function()
			local _result
			if i < range[2] then
				local _fn = self
				local _original = i
				i += 1
				_result = _fn:get(_original)
			else
				_result = Option:none()
			end
			return _result
		end, fixedSizeHint(size))
	end
	function Vec:drainFilter(r, filter)
		local range = resolveRange(r, self.length)
		if range[1] < 0 or range[1] > range[2] or range[2] > self.length then
			error("called \`Vec.drainFilter\` with an invalid \`Range\`: [" .. tostring(r[1]) .. ", " .. tostring(r[2]) .. "]", 2)
		end
		local size = range[2] - range[1]
		local i = range[1]
		return Iterator:fromRawParts(function()
			while i < range[2] do
				local _fn = self
				local _original = i
				i += 1
				local element = _fn:get(_original)
				if element:map(filter):contains(true) then
					self:remove(i - 1)
					return element
				end
			end
			return Option:none()
		end, upperSizeHint(size))
	end
	function Vec:clear()
		self.length = 0
		-- ▼ Array.clear ▼
		table.clear(self.array)
		-- ▲ Array.clear ▲
		return self
	end
	function Vec:len()
		return self.length
	end
	function Vec:isEmpty()
		return self.length == 0
	end
	function Vec:splitOff(from)
		if from < 0 or from >= self.length then
			error("called `Vec.splitOff` with an out-of-range index: " .. tostring(from), 2)
		end
		local other
		if from == 0 then
			local _ptr = {}
			local _length = #_ptr
			local _array = self.array
			table.move(_array, 1, #_array, _length + 1, _ptr)
			other = Vec.new(_ptr)
			self:clear()
		else
			other = Vec:withCapacity(self.length - from)
			do
				local i = from
				local _shouldIncrement = false
				while true do
					if _shouldIncrement then
						i += 1
					else
						_shouldIncrement = true
					end
					if not (i < self.length) then
						break
					end
					other:push(self.array[i + 1])
				end
			end
			self:truncate(from)
		end
		return other
	end
	function Vec:resizeWith(newLen, func)
		if newLen < self.length then
			self:truncate(newLen)
		elseif newLen > self.length then
			do
				local i = self.length
				local _shouldIncrement = false
				while true do
					if _shouldIncrement then
						i += 1
					else
						_shouldIncrement = true
					end
					if not (i < newLen) then
						break
					end
					self:push(func())
				end
			end
		end
		return self
	end
	function Vec:resize(newLen, val)
		if newLen < self.length then
			self:truncate(newLen)
		elseif newLen > self.length then
			do
				local i = self.length
				local _shouldIncrement = false
				while true do
					if _shouldIncrement then
						i += 1
					else
						_shouldIncrement = true
					end
					if not (i < newLen) then
						break
					end
					self:push(val)
				end
			end
		end
		return self
	end
	function Vec:splice(r, iter)
		return TS.generator(function()
			local range = resolveRange(r, self.length)
			if range[1] < 0 or range[1] > range[2] or range[2] > self.length then
				error("called \`Vec.splice\` with an invalid \`Range\`: " .. tostring(r[1]) .. ".." .. tostring(r[2]), 2)
			end
			local i = range[1]
			for _result in iter.next do
				if _result.done then
					break
				end
				local item = _result.value
				if i >= range[2] then
					break
				end
				local temp = self.array[i + 1]
				local _exp = self.array
				local _original = i
				i += 1
				_exp[_original + 1] = item
				coroutine.yield(temp)
			end
			while i < range[2] do
				local _array = self.array
				local _i = i
				table.remove(_array, _i + 1)
				range[2] -= 1
			end
		end)
	end
	function Vec:first()
		return Option:wrap(self.array[1])
	end
	function Vec:last()
		return Option:wrap(self.array[self.length - 1 + 1])
	end
	function Vec:get(i)
		return Option:wrap(self.array[i + 1])
	end
	function Vec:swap(a, b)
		if a < 0 or a >= self.length then
			error("called `Vec.swap` with an out-of-range a: " .. tostring(a), 2)
		end
		if b < 0 or b >= self.length then
			error("called `Vec.swap` with an out-of-range b: " .. tostring(b), 2)
		end
		local temp = self.array[a + 1]
		self.array[a + 1] = self.array[b + 1]
		self.array[b + 1] = temp
		return self
	end
	function Vec:reverse()
		local tries = self.length - 1
		do
			local i = 0
			local _shouldIncrement = false
			while true do
				if _shouldIncrement then
					i += 1
				else
					_shouldIncrement = true
				end
				if not (i < tries / 2) then
					break
				end
				self:swap(i, tries - i)
			end
		end
		return self
	end
	function Vec:generator()
		return TS.generator(function()
			local i = 0
			while i < self.length do
				local _exp = self.array
				local _original = i
				i += 1
				coroutine.yield(_exp[_original + 1])
			end
		end)
	end
	function Vec:iter()
		local i = 0
		return Iterator:fromRawParts(function()
			return self:get(i):map(function(item)
				i += 1
				return item
			end)
		end, fixedSizeHint(self.length))
	end
	function Vec:__tostring()
		return self:toString()
	end
end
return {
	Vec = Vec,
}
]]></string>
                        </Properties>
                      </Item>
                    </Item>
                    <Item class="Folder" referent="646">
                      <Properties>
                        <string name="Name">util</string>
                      </Properties>
                      <Item class="ModuleScript" referent="647">
                        <Properties>
                          <string name="Name">Range</string>
                          <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.3
local function resolveRange(r, max)
	local _condition = r[1]
	if _condition == nil then
		_condition = 0
	end
	local _condition_1 = r[2]
	if _condition_1 == nil then
		_condition_1 = max
	end
	return { _condition, _condition_1 }
end
return {
	resolveRange = resolveRange,
}
]]></string>
                        </Properties>
                      </Item>
                      <Item class="ModuleScript" referent="648">
                        <Properties>
                          <string name="Name">Unit</string>
                          <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.3
-- eslint-disable-next-line @typescript-eslint/no-empty-interface
local unitMeta = {}
unitMeta.__eq = function()
	return true
end
unitMeta.__tostring = function()
	return "()"
end
unitMeta.__index = function()
	return error("Attempt to index Unit", 2)
end
local function unit()
	return setmetatable({}, unitMeta)
end
return {
	unit = unit,
}
]]></string>
                        </Properties>
                      </Item>
                      <Item class="ModuleScript" referent="649">
                        <Properties>
                          <string name="Name">imports</string>
                          <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.3
local TS = _G[script]
local lazyGet = TS.import(script, script.Parent, "lazyLoad").lazyGet
local HashMap
lazyGet("HashMap", function(c)
	HashMap = c
end)
local Iterator
lazyGet("Iterator", function(c)
	Iterator = c
end)
local Option
lazyGet("Option", function(c)
	Option = c
end)
local Result
lazyGet("Result", function(c)
	Result = c
end)
local Vec
lazyGet("Vec", function(c)
	Vec = c
end)
return nil
]]></string>
                        </Properties>
                      </Item>
                      <Item class="ModuleScript" referent="650">
                        <Properties>
                          <string name="Name">lazyLoad</string>
                          <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.3
local TS = _G[script]
local classes = {}
local waiting = {}
local function lazyGet(name, callback)
	local c = classes[name]
	if c then
		callback(c)
	else
		local waiter = waiting[name]
		if waiter then
			local _exp = waiter[1]
			local _arg0 = function(c)
				return callback(c)
			end
			_exp:andThen(_arg0)
		else
			local prom
			prom = TS.Promise.new(function(resolve)
				waiting[name] = { prom, resolve }
			end)
			local waiter = waiting[name]
			waiter[1] = prom
			local _arg0 = function(c)
				return callback(c)
			end
			prom:andThen(_arg0)
		end
	end
end
local function lazyRegister(name, c)
	classes[name] = c
	local waiter = waiting[name]
	if waiter then
		waiter[2](c)
	end
end
return {
	lazyGet = lazyGet,
	lazyRegister = lazyRegister,
}
]]></string>
                        </Properties>
                      </Item>
                      <Item class="ModuleScript" referent="651">
                        <Properties>
                          <string name="Name">sizeHint</string>
                          <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.3
local TS = _G[script]
local lazyGet = TS.import(script, script.Parent, "lazyLoad").lazyGet
local HashMap
lazyGet("HashMap", function(c)
	HashMap = c
end)
local Iterator
lazyGet("Iterator", function(c)
	Iterator = c
end)
local Option
lazyGet("Option", function(c)
	Option = c
end)
local Result
lazyGet("Result", function(c)
	Result = c
end)
local Vec
lazyGet("Vec", function(c)
	Vec = c
end)
local function fixedSizeHint(fixed)
	return function()
		return fixed, Option:some(fixed)
	end
end
local function upperSizeHint(upper)
	return function()
		return 0, Option:some(upper)
	end
end
local function lowerSizeHint(lower)
	return function()
		return lower, Option:none()
	end
end
return {
	fixedSizeHint = fixedSizeHint,
	upperSizeHint = upperSizeHint,
	lowerSizeHint = lowerSizeHint,
}
]]></string>
                        </Properties>
                      </Item>
                    </Item>
                  </Item>
                </Item>
                <Item class="Folder" referent="652">
                  <Properties>
                    <string name="Name">t</string>
                  </Properties>
                  <Item class="Folder" referent="653">
                    <Properties>
                      <string name="Name">lib</string>
                    </Properties>
                    <Item class="ModuleScript" referent="654">
                      <Properties>
                        <string name="Name">ts</string>
                        <string name="Source">-- t: a runtime typechecker for Roblox

-- regular lua compatibility
local typeof = typeof or type

local function primitive(typeName)
	return function(value)
		local valueType = typeof(value)
		if valueType == typeName then
			return true
		else
			return false
		end
	end
end

local t = {}

function t.any(value)
	if value ~= nil then
		return true
	else
		return false
	end
end

--Lua primitives

t.boolean = primitive("boolean")
t.thread = primitive("thread")
t.callback = primitive("function")
t["function"] = t.callback
t.none = primitive("nil")
t["nil"] = t.none
t.string = primitive("string")
t.table = primitive("table")
t.userdata = primitive("userdata")

function t.number(value)
	local valueType = typeof(value)
	if valueType == "number" then
		if value == value then
			return true
		else
			return false
		end
	else
		return false
	end
end

function t.nan(value)
	if value ~= value then
		return true
	else
		return false
	end
end

-- roblox types

t.Axes = primitive("Axes")
t.BrickColor = primitive("BrickColor")
t.CFrame = primitive("CFrame")
t.Color3 = primitive("Color3")
t.ColorSequence = primitive("ColorSequence")
t.ColorSequenceKeypoint = primitive("ColorSequenceKeypoint")
t.DockWidgetPluginGuiInfo = primitive("DockWidgetPluginGuiInfo")
t.Faces = primitive("Faces")
t.Instance = primitive("Instance")
t.NumberRange = primitive("NumberRange")
t.NumberSequence = primitive("NumberSequence")
t.NumberSequenceKeypoint = primitive("NumberSequenceKeypoint")
t.PathWaypoint = primitive("PathWaypoint")
t.PhysicalProperties = primitive("PhysicalProperties")
t.Random = primitive("Random")
t.Ray = primitive("Ray")
t.Rect = primitive("Rect")
t.Region3 = primitive("Region3")
t.Region3int16 = primitive("Region3int16")
t.TweenInfo = primitive("TweenInfo")
t.UDim = primitive("UDim")
t.UDim2 = primitive("UDim2")
t.Vector2 = primitive("Vector2")
t.Vector3 = primitive("Vector3")
t.Vector3int16 = primitive("Vector3int16")
t.Enum = primitive("Enum")
t.EnumItem = primitive("EnumItem")
t.RBXScriptSignal = primitive("RBXScriptSignal")
t.RBXScriptConnection = primitive("RBXScriptConnection")

function t.literal(...)
	local size = select("#", ...)
	if size == 1 then
		local literal = ...
		return function(value)
			if value ~= literal then
				return false
			end
			return true
		end
	else
		local literals = {}
		for i = 1, size do
			local value = select(i, ...)
			literals[i] = t.literal(value)
		end
		return t.union(unpack(literals))
	end
end

t.exactly = t.literal

function t.keyOf(keyTable)
	local keys = {}
	for key in pairs(keyTable) do
		keys[#keys + 1] = key
	end
	return t.literal(unpack(keys))
end

function t.valueOf(valueTable)
	local values = {}
	for _, value in pairs(valueTable) do
		values[#values + 1] = value
	end
	return t.literal(unpack(values))
end

function t.integer(value)
	local success = t.number(value)
	if not success then
		return false
	end
	if value%1 == 0 then
		return true
	else
		return false
	end
end

function t.numberMin(min)
	return function(value)
		local success = t.number(value)
		if not success then
			return false
		end
		if value >= min then
			return true
		else
			return false
		end
	end
end

function t.numberMax(max)
	return function(value)
		local success = t.number(value)
		if not success then
			return false
		end
		if value &lt;= max then
			return true
		else
			return false
		end
	end
end

function t.numberMinExclusive(min)
	return function(value)
		local success = t.number(value)
		if not success then
			return false
		end
		if min &lt; value then
			return true
		else
			return false
		end
	end
end

function t.numberMaxExclusive(max)
	return function(value)
		local success = t.number(value)
		if not success then
			return false
		end
		if value &lt; max then
			return true
		else
			return false
		end
	end
end

t.numberPositive = t.numberMinExclusive(0)
t.numberNegative = t.numberMaxExclusive(0)

function t.numberConstrained(min, max)
	assert(t.number(min) and t.number(max))
	local minCheck = t.numberMin(min)
	local maxCheck = t.numberMax(max)
	return function(value)
		local minSuccess = minCheck(value)
		if not minSuccess then
			return false
		end

		local maxSuccess = maxCheck(value)
		if not maxSuccess then
			return false
		end

		return true
	end
end

function t.numberConstrainedExclusive(min, max)
	assert(t.number(min) and t.number(max))
	local minCheck = t.numberMinExclusive(min)
	local maxCheck = t.numberMaxExclusive(max)
	return function(value)
		local minSuccess = minCheck(value)
		if not minSuccess then
			return false
		end

		local maxSuccess = maxCheck(value)
		if not maxSuccess then
			return false
		end

		return true
	end
end

function t.match(pattern)
	assert(t.string(pattern))
	return function(value)
		local stringSuccess = t.string(value)
		if not stringSuccess then
			return false
		end

		if string.match(value, pattern) == nil then
			return false
		end

		return true
	end
end

function t.optional(check)
	assert(t.callback(check))
	return function(value)
		if value == nil then
			return true
		end
		local success = check(value)
		if success then
			return true
		else
			return false
		end
	end
end

function t.tuple(...)
	local checks = {...}
	return function(...)
		local args = {...}
		for i = 1, #checks do
			local success = checks[i](args[i])
			if success == false then
				return false
			end
		end
		return true
	end
end

function t.keys(check)
	assert(t.callback(check))
	return function(value)
		local tableSuccess = t.table(value)
		if tableSuccess == false then
			return false
		end

		for key in pairs(value) do
			local success = check(key)
			if success == false then
				return false
			end
		end

		return true
	end
end

function t.values(check)
	assert(t.callback(check))
	return function(value)
		local tableSuccess = t.table(value)
		if tableSuccess == false then
			return false
		end

		for _, val in pairs(value) do
			local success = check(val)
			if success == false then
				return false
			end
		end

		return true
	end
end

function t.map(keyCheck, valueCheck)
	assert(t.callback(keyCheck), t.callback(valueCheck))
	local keyChecker = t.keys(keyCheck)
	local valueChecker = t.values(valueCheck)
	return function(value)
		local keySuccess = keyChecker(value)
		if not keySuccess then
			return false
		end

		local valueSuccess = valueChecker(value)
		if not valueSuccess then
			return false
		end

		return true
	end
end

function t.set(valueCheck)
	return t.map(valueCheck, t.literal(true))
end

do
	local arrayKeysCheck = t.keys(t.integer)

	function t.array(check)
		assert(t.callback(check))
		local valuesCheck = t.values(check)
		return function(value)
			local keySuccess = arrayKeysCheck(value)
			if keySuccess == false then
				return false
			end

			-- # is unreliable for sparse arrays
			-- Count upwards using ipairs to avoid false positives from the behavior of #
			local arraySize = 0

			for _, _ in ipairs(value) do
				arraySize = arraySize + 1
			end

			for key in pairs(value) do
				if key &lt; 1 or key > arraySize then
					return false
				end
			end

			local valueSuccess = valuesCheck(value)
			if not valueSuccess then
				return false
			end

			return true
		end
	end

	function t.strictArray(...)
		local valueTypes = { ... }
		assert(t.array(t.callback)(valueTypes))

		return function(value)
			local keySuccess = arrayKeysCheck(value)
			if keySuccess == false then
				return false
			end

			-- If there's more than the set array size, disallow
			if #valueTypes &lt; #value then
				return false
			end

			for idx, typeFn in pairs(valueTypes) do
				local typeSuccess = typeFn(value[idx])
				if not typeSuccess then
					return false
				end
			end

			return true
		end
	end
end

do
	local callbackArray = t.array(t.callback)

	function t.union(...)
		local checks = {...}
		assert(callbackArray(checks))
		return function(value)
			for _, check in pairs(checks) do
				if check(value) then
					return true
				end
			end
			return false
		end
	end

	function t.intersection(...)
		local checks = {...}
		assert(callbackArray(checks))
		return function(value)
			for _, check in pairs(checks) do
				local success = check(value)
				if not success then
					return false
				end
			end
			return true
		end
	end
end

do
	local checkInterface = t.map(t.any, t.callback)

	function t.interface(checkTable)
		assert(checkInterface(checkTable))
		return function(value)
			local tableSuccess = t.table(value)
			if tableSuccess == false then
				return false
			end

			for key, check in pairs(checkTable) do
				local success = check(value[key])
				if success == false then
					return false
				end
			end
			return true
		end
	end

	function t.strictInterface(checkTable)
		assert(checkInterface(checkTable))
		return function(value)
			local tableSuccess = t.table(value)
			if tableSuccess == false then
				return false
			end

			for key, check in pairs(checkTable) do
				local success = check(value[key])
				if success == false then
					return false
				end
			end

			for key in pairs(value) do
				if not checkTable[key] then
					return false
				end
			end

			return true
		end
	end
end

function t.instanceOf(className)
	assert(t.string(className))
	return function(value)
		local instanceSuccess = t.Instance(value)
		if not instanceSuccess then
			return false
		end

		if value.ClassName ~= className then
			return false
		end

		return true
	end
end
t.instance = t.instanceOf

function t.instanceIsA(className)
	assert(t.string(className))
	return function(value)
		local instanceSuccess = t.Instance(value)
		if not instanceSuccess then
			return false
		end

		if not value:IsA(className) then
			return false
		end

		return true
	end
end

function t.enum(enum)
	assert(t.Enum(enum))
	return function(value)
		local enumItemSuccess = t.EnumItem(value)
		if not enumItemSuccess then
			return false
		end

		if value.EnumType == enum then
			return true
		else
			return false
		end
	end
end

do
	local checkWrap = t.tuple(t.callback, t.callback)

	function t.wrap(callback, checkArgs)
		assert(checkWrap(callback, checkArgs))
		return function(...)
			assert(checkArgs(...))
			return callback(...)
		end
	end
end

function t.strict(check)
	return function(...)
		assert(check(...))
	end
end

do
	local checkChildren = t.map(t.string, t.callback)
	function t.children(checkTable)
		assert(checkChildren(checkTable))

		return function(value)
			local instanceSuccess = t.Instance(value)
			if not instanceSuccess then
				return false
			end

			local childrenByName = {}
			for _, child in pairs(value:GetChildren()) do
				local name = child.Name
				if checkTable[name] then
					if childrenByName[name] then
						return false
					end
					childrenByName[name] = child
				end
			end

			for name, check in pairs(checkTable) do
				local success = check(childrenByName[name])
				if not success then
					return false
				end
			end

			return true
		end
	end
end

return t</string>
                      </Properties>
                    </Item>
                  </Item>
                </Item>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="655">
              <Properties>
                <string name="Name">out</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local exports = {}
local _message_templates = TS.import(script, TS.getModule(script, "@rbxts", "message-templates").out)
local MessageTemplateParser = _message_templates.MessageTemplateParser
local PlainTextMessageTemplateRenderer = _message_templates.PlainTextMessageTemplateRenderer
local Logging = TS.import(script, script, "Log").Logging
local _typeId = TS.import(script, script, "Shared", "typeId")
local zirconTypeIs = _typeId.zirconTypeIs
local zirconTypeOf = _typeId.zirconTypeOf
exports.ZirconNamespaceBuilder = TS.import(script, script, "Class", "ZirconNamespaceBuilder").ZirconNamespaceBuilder
exports.ZirconFunctionBuilder = TS.import(script, script, "Class", "ZirconFunctionBuilder").ZirconFunctionBuilder
exports.ZirconEnumBuilder = TS.import(script, script, "Class", "ZirconEnumBuilder").ZirconEnumBuilder
exports.ZirconConfigurationBuilder = TS.import(script, script, "Class", "ZirconConfigurationBuilder").ZirconConfigurationBuilder
exports.ZirconServer = TS.import(script, script, "Server").default
exports.ZirconClient = TS.import(script, script, "Client").default
--[[
	*
	* The Zircon console framework
]]
local Zircon = {}
do
	local _container = Zircon
	local Log = Logging
	_container.Log = Log
	-- * @deprecated
	local typeIs = zirconTypeIs
	_container.typeIs = typeIs
	-- * @deprecated
	local typeOf = zirconTypeOf
	_container.typeOf = typeOf
	local TypeIs = zirconTypeIs
	_container.TypeIs = TypeIs
	local TypeOf = zirconTypeOf
	_container.TypeOf = TypeOf
	--[[
		*
		* Converts a log event to a plain text string
		* @param event The log event
		* @returns A string representation of the log event
	]]
	local function LogEventToString(event)
		local plainTextRenderer = PlainTextMessageTemplateRenderer.new(MessageTemplateParser.GetTokens(event.Template))
		return plainTextRenderer:Render(event)
	end
	_container.LogEventToString = LogEventToString
end
local default = Zircon
exports.default = default
return exports
]]></string>
              </Properties>
              <Item class="Folder" referent="656">
                <Properties>
                  <string name="Name">BuiltIn</string>
                </Properties>
                <Item class="ModuleScript" referent="657">
                  <Properties>
                    <string name="Name">EnumPrint</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local ZirconFunctionBuilder = TS.import(script, script.Parent.Parent, "Class", "ZirconFunctionBuilder").ZirconFunctionBuilder
local ZirconEnumPrint = ZirconFunctionBuilder.new("print"):AddArgument("ZrEnum"):Bind(function(context, args)
	local _exp = args:getItems()
	local _arg0 = function(f)
		return f:getName()
	end
	-- ▼ ReadonlyArray.map ▼
	local _newValue = table.create(#_exp)
	for _k, _v in ipairs(_exp) do
		_newValue[_k] = _arg0(_v, _k - 1, _exp)
	end
	-- ▲ ReadonlyArray.map ▲
	local items = _newValue
	context:LogInfo("Enum Items for {EnumName}: {EnumItems} ", args:getEnumName(), items)
end)
return ZirconEnumPrint
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="658">
                  <Properties>
                    <string name="Name">Print</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local ZirconFunctionBuilder = TS.import(script, script.Parent.Parent, "Class", "ZirconFunctionBuilder").ZirconFunctionBuilder
local ZirconPrint = ZirconFunctionBuilder.new("print"):AddVariadicArgument("unknown"):Bind(function(context, ...)
	local args = { ... }
	local _fn = context
	-- ▼ ReadonlyArray.map ▼
	local _newValue = table.create(#args)
	for _k, _v in ipairs(args) do
		_newValue[_k] = tostring(_v, _k - 1, args)
	end
	-- ▲ ReadonlyArray.map ▲
	_fn:LogInfo(table.concat(_newValue, " "))
end)
return ZirconPrint
]]></string>
                  </Properties>
                </Item>
              </Item>
              <Item class="Folder" referent="659">
                <Properties>
                  <string name="Name">Class</string>
                </Properties>
                <Item class="ModuleScript" referent="660">
                  <Properties>
                    <string name="Name">StatefulZirconValidator</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local StatefulZirconValidator
do
	StatefulZirconValidator = {}
	function StatefulZirconValidator:constructor(Type)
		self.Type = Type
	end
end
return {
	StatefulZirconValidator = StatefulZirconValidator,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="661">
                  <Properties>
                    <string name="Name">TypeUtilities</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local t = TS.import(script, TS.getModule(script, "@rbxts", "t").lib.ts)
local ZirconEnum = TS.import(script, script.Parent, "ZirconEnum").ZirconEnum
local BuiltInValidators = TS.import(script, script.Parent, "ZirconTypeValidator").BuiltInValidators
local isArray = t.array(t.any)
local function ZirconGetValidatorType(validatorLike)
	local validator
	if type(validatorLike) == "string" then
		validator = BuiltInValidators[validatorLike]
	elseif TS.instanceof(validatorLike, ZirconEnum) then
		validator = validatorLike:getValidator()
	else
		validator = validatorLike
	end
	return validator
end
local ZirconUnionValidator
local function ZirconTypeUnion(...)
	local validators = { ... }
	-- ▼ ReadonlyArray.map ▼
	local _newValue = table.create(#validators)
	for _k, _v in ipairs(validators) do
		_newValue[_k] = ZirconGetValidatorType(_v, _k - 1, validators)
	end
	-- ▲ ReadonlyArray.map ▲
	local result = _newValue
	return ZirconUnionValidator(result)
end
local function ZirconArrayType(validator)
	local arrayType = ZirconGetValidatorType(validator)
	local _arg0 = {
		Type = arrayType.Type .. "[]",
		Validate = function(self, value, player)
			local _condition = isArray(value)
			if _condition then
				local _arg0_1 = function(value)
					return arrayType:Validate(value, player)
				end
				-- ▼ ReadonlyArray.every ▼
				local _result = true
				for _k, _v in ipairs(value) do
					if not _arg0_1(_v, _k - 1, value) then
						_result = false
						break
					end
				end
				-- ▲ ReadonlyArray.every ▲
				_condition = _result
			end
			return _condition
		end,
	}
	return _arg0
end
function ZirconUnionValidator(validators)
	local _object = {}
	local _left = "Type"
	local _arg0 = function(v)
		return v.Type
	end
	-- ▼ ReadonlyArray.map ▼
	local _newValue = table.create(#validators)
	for _k, _v in ipairs(validators) do
		_newValue[_k] = _arg0(_v, _k - 1, validators)
	end
	-- ▲ ReadonlyArray.map ▲
	_object[_left] = table.concat(_newValue, " | ")
	function _object:Validate(value, player)
		local _arg0_1 = function(v)
			return v:Validate(value, player)
		end
		-- ▼ ReadonlyArray.some ▼
		local _result = false
		for _k, _v in ipairs(validators) do
			if _arg0_1(_v, _k - 1, validators) then
				_result = true
				break
			end
		end
		-- ▲ ReadonlyArray.some ▲
		return _result
	end
	function _object:Transform(value, player)
		for _, validator in ipairs(validators) do
			if validator:Validate(value) then
				if validator.Transform ~= nil then
					return validator:Transform(value, player)
				else
					return value
				end
			end
		end
		return nil
	end
	return _object
end
return {
	ZirconGetValidatorType = ZirconGetValidatorType,
	ZirconTypeUnion = ZirconTypeUnion,
	ZirconArrayType = ZirconArrayType,
	ZirconUnionValidator = ZirconUnionValidator,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="Folder" referent="662">
                  <Properties>
                    <string name="Name">Validators</string>
                  </Properties>
                  <Item class="ModuleScript" referent="663">
                    <Properties>
                      <string name="Name">OptionalValidator</string>
                      <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local StatefulZirconValidator = TS.import(script, script.Parent.Parent, "StatefulZirconValidator").StatefulZirconValidator
local OptionalValidator
do
	local super = StatefulZirconValidator
	OptionalValidator = setmetatable({}, {
		__tostring = function()
			return "OptionalValidator"
		end,
		__index = super,
	})
	OptionalValidator.__index = OptionalValidator
	function OptionalValidator.new(...)
		local self = setmetatable({}, OptionalValidator)
		return self:constructor(...) or self
	end
	function OptionalValidator:constructor(innerValidator)
		super.constructor(self, innerValidator.Type .. "?")
		self.innerValidator = innerValidator
	end
	function OptionalValidator:Validate(value)
		return self.innerValidator:Validate(value) or value == nil
	end
	function OptionalValidator:Transform(value)
		local _self = self.innerValidator
		local _result = _self.Transform
		if _result ~= nil then
			_result = _result(_self, value)
		end
		return _result
	end
end
return {
	OptionalValidator = OptionalValidator,
}
]]></string>
                    </Properties>
                  </Item>
                  <Item class="ModuleScript" referent="664">
                    <Properties>
                      <string name="Name">ZirconFuzzyPlayerValidator</string>
                      <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local ZrInstanceUserdata = TS.import(script, TS.getModule(script, "@rbxts", "zirconium").out.Data.Userdata).ZrInstanceUserdata
local OptionalValidator = TS.import(script, script.Parent, "OptionalValidator").OptionalValidator
local StatefulZirconValidator = TS.import(script, script.Parent.Parent, "StatefulZirconValidator").StatefulZirconValidator
local ZirconFuzzyPlayerValidator
do
	local super = StatefulZirconValidator
	ZirconFuzzyPlayerValidator = setmetatable({}, {
		__tostring = function()
			return "ZirconFuzzyPlayerValidator"
		end,
		__index = super,
	})
	ZirconFuzzyPlayerValidator.__index = ZirconFuzzyPlayerValidator
	function ZirconFuzzyPlayerValidator.new(...)
		local self = setmetatable({}, ZirconFuzzyPlayerValidator)
		return self:constructor(...) or self
	end
	function ZirconFuzzyPlayerValidator:constructor()
		super.constructor(self, "Player")
	end
	function ZirconFuzzyPlayerValidator:Validate(value)
		if type(value) == "string" then
			local _exp = game:GetService("Players"):GetPlayers()
			local _arg0 = function(player)
				local _name = player.Name
				local _arg1 = #value
				return string.lower(string.sub(_name, 1, _arg1)) == string.lower(value)
			end
			-- ▼ ReadonlyArray.find ▼
			local _result = nil
			for _i, _v in ipairs(_exp) do
				if _arg0(_v, _i - 1, _exp) == true then
					_result = _v
					break
				end
			end
			-- ▲ ReadonlyArray.find ▲
			local existingPlayer = _result
			if existingPlayer then
				self.playerRef = existingPlayer
				return true
			end
		elseif type(value) == "number" then
			local player = game:GetService("Players"):GetPlayerByUserId(value)
			if player then
				self.playerRef = player
				return true
			end
		elseif TS.instanceof(value, ZrInstanceUserdata) and value:isA("Player") then
			self.playerRef = value:value()
			return true
		end
		return false
	end
	function ZirconFuzzyPlayerValidator:Transform()
		local _playerRef = self.playerRef
		assert(_playerRef, "Transform called before Validate, perhaps?")
		return self.playerRef
	end
end
local ZirconFuzzyPlayer = ZirconFuzzyPlayerValidator.new()
local OptionalZirconFuzzyPlayer = OptionalValidator.new(ZirconFuzzyPlayer)
return {
	ZirconFuzzyPlayerValidator = ZirconFuzzyPlayerValidator,
	ZirconFuzzyPlayer = ZirconFuzzyPlayer,
	OptionalZirconFuzzyPlayer = OptionalZirconFuzzyPlayer,
}
]]></string>
                    </Properties>
                  </Item>
                  <Item class="ModuleScript" referent="665">
                    <Properties>
                      <string name="Name">ZirconFuzzyPlayersValidator</string>
                      <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local OptionalValidator = TS.import(script, script.Parent, "OptionalValidator").OptionalValidator
local StatefulZirconValidator = TS.import(script, script.Parent.Parent, "StatefulZirconValidator").StatefulZirconValidator
local Players = game:GetService("Players")
local ZirconServer = TS.import(script, script.Parent.Parent.Parent, "Server").default
local ZirconFuzzyPlayersValidator
do
	local super = StatefulZirconValidator
	ZirconFuzzyPlayersValidator = setmetatable({}, {
		__tostring = function()
			return "ZirconFuzzyPlayersValidator"
		end,
		__index = super,
	})
	ZirconFuzzyPlayersValidator.__index = ZirconFuzzyPlayersValidator
	function ZirconFuzzyPlayersValidator.new(...)
		local self = setmetatable({}, ZirconFuzzyPlayersValidator)
		return self:constructor(...) or self
	end
	function ZirconFuzzyPlayersValidator:constructor()
		super.constructor(self, "Player[]")
		self.playerRef = {}
	end
	function ZirconFuzzyPlayersValidator:Validate(value, executingPlayer)
		self.playerRef = {}
		if type(value) == "string" then
			if (string.find(value, "^@", 1)) ~= nil then
				local id = string.sub(value, 2)
				if id == "me" and executingPlayer ~= nil then
					self.playerRef = { executingPlayer }
					return true
				end
				local _binding = ZirconServer.Registry.GetGroups({ id })
				local group = _binding[1]
				if group ~= nil then
					for member in pairs(group:GetMembers()) do
						local _playerRef = self.playerRef
						-- ▼ Array.push ▼
						_playerRef[#_playerRef + 1] = member
						-- ▲ Array.push ▲
					end
					return true
				end
			end
			local _exp = Players:GetPlayers()
			local _arg0 = function(player)
				local _exp_1 = string.lower(player.Name)
				local _arg0_1 = string.lower(value)
				return (string.find(_exp_1, _arg0_1, 1, true)) ~= nil
			end
			-- ▼ ReadonlyArray.filter ▼
			local _newValue = {}
			local _length = 0
			for _k, _v in ipairs(_exp) do
				if _arg0(_v, _k - 1, _exp) == true then
					_length += 1
					_newValue[_length] = _v
				end
			end
			-- ▲ ReadonlyArray.filter ▲
			local matchingPlayers = _newValue
			for _, matchingPlayer in ipairs(matchingPlayers) do
				local _playerRef = self.playerRef
				-- ▼ Array.push ▼
				_playerRef[#_playerRef + 1] = matchingPlayer
				-- ▲ Array.push ▲
			end
		elseif type(value) == "number" then
			local userIdPlayer = Players:GetPlayerByUserId(value)
			if userIdPlayer then
				self.playerRef = { userIdPlayer }
				return true
			end
		end
		return #self.playerRef > 0
	end
	function ZirconFuzzyPlayersValidator:Transform()
		local _playerRef = self.playerRef
		assert(_playerRef, "Transform called before Validate, perhaps?")
		return self.playerRef
	end
end
local ZirconFuzzyPlayers = ZirconFuzzyPlayersValidator.new()
local OptionalZirconFuzzyPlayer = OptionalValidator.new(ZirconFuzzyPlayers)
local _ = ZirconFuzzyPlayers
return {
	ZirconFuzzyPlayersValidator = ZirconFuzzyPlayersValidator,
	ZirconFuzzyPlayers = ZirconFuzzyPlayers,
	OptionalZirconFuzzyPlayer = OptionalZirconFuzzyPlayer,
}
]]></string>
                    </Properties>
                  </Item>
                </Item>
                <Item class="ModuleScript" referent="666">
                  <Properties>
                    <string name="Name">ZirconClientConfigurationBuilder</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local ZirconClientConfigurationBuilder
do
	ZirconClientConfigurationBuilder = setmetatable({}, {
		__tostring = function()
			return "ZirconClientConfigurationBuilder"
		end,
	})
	ZirconClientConfigurationBuilder.__index = ZirconClientConfigurationBuilder
	function ZirconClientConfigurationBuilder.new(...)
		local self = setmetatable({}, ZirconClientConfigurationBuilder)
		return self:constructor(...) or self
	end
	function ZirconClientConfigurationBuilder:constructor()
		self.configuration = {
			Groups = {},
			Registry = {},
		}
	end
	function ZirconClientConfigurationBuilder:AddFunction(functionType)
		local _array = {}
		local _length = #_array
		local _array_1 = self.configuration.Registry
		local _Length = #_array_1
		table.move(_array_1, 1, _Length, _length + 1, _array)
		_length += _Length
		_array[_length + 1] = functionType
		self.configuration.Registry = _array
		return self
	end
	function ZirconClientConfigurationBuilder:Build()
		return self.configuration
	end
end
return {
	ZirconClientConfigurationBuilder = ZirconClientConfigurationBuilder,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="667">
                  <Properties>
                    <string name="Name">ZirconConfigurationBuilder</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local LogLevel = TS.import(script, TS.getModule(script, "@rbxts", "log").out).LogLevel
local ZirconServer = TS.import(script, script.Parent.Parent, "Server").default
local ZirconGroupBuilder = TS.import(script, script.Parent, "ZirconGroupBuilder").ZirconGroupBuilder
local ExecutionAction
do
	local _inverse = {}
	ExecutionAction = setmetatable({}, {
		__index = _inverse,
	})
	ExecutionAction.Execute = 0
	_inverse[0] = "Execute"
	ExecutionAction.Skip = 1
	_inverse[1] = "Skip"
end
local ZirconConfigurationBuilder
do
	ZirconConfigurationBuilder = setmetatable({}, {
		__tostring = function()
			return "ZirconConfigurationBuilder"
		end,
	})
	ZirconConfigurationBuilder.__index = ZirconConfigurationBuilder
	function ZirconConfigurationBuilder.new(...)
		local self = setmetatable({}, ZirconConfigurationBuilder)
		return self:constructor(...) or self
	end
	function ZirconConfigurationBuilder:constructor()
		self.configuration = {
			Groups = {},
			Registry = {},
			GroupGlobalsMap = {},
			Hooks = {
				BeforeExecute = {},
				AfterExecute = {},
			},
		}
	end
	function ZirconConfigurationBuilder:CreateGroup(rank, id, configurator)
		local group = ZirconGroupBuilder.new(self, rank, id)
		configurator(group):Add()
		return self
	end
	function ZirconConfigurationBuilder:CreateDefaultCreatorGroup()
		return ZirconGroupBuilder.new(self, 255, "creator"):BindToCreator():SetPermissions({
			CanAccessFullZirconEditor = true,
			CanExecuteZirconiumScripts = true,
			CanRecieveServerLogMessages = true,
			CanViewLogMetadata = true,
		}):Add()
	end
	function ZirconConfigurationBuilder:CreateDefaultAdminGroup(builderOrOptions)
		local group = ZirconGroupBuilder.new(self, 254, "admin"):SetPermissions({
			CanAccessFullZirconEditor = true,
			CanExecuteZirconiumScripts = true,
			CanRecieveServerLogMessages = true,
			CanViewLogMetadata = true,
		})
		if type(builderOrOptions) == "function" then
			builderOrOptions(group)
		else
			local _condition = builderOrOptions
			if _condition == nil then
				_condition = {}
			end
			local _binding = _condition
			local GroupRank = _binding.GroupRank
			if GroupRank == nil then
				GroupRank = 254
			end
			local GroupId = _binding.GroupId
			if GroupId == nil then
				GroupId = game.CreatorId
			end
			if game.CreatorType == Enum.CreatorType.Group or GroupId ~= game.CreatorId then
				group:BindToGroupRank(GroupId, GroupRank)
			else
				ZirconServer.Log.WriteStructured({
					Level = LogLevel.Warning,
					Template = "Implicit administrator groups only work in group places, try explicitly setting the admin group config",
					Timestamp = DateTime.now():ToIsoDate(),
					SourceContext = "CreateDefaultAdminGroup",
				})
			end
		end
		return group:Add()
	end
	function ZirconConfigurationBuilder:CreateDefaultUserGroup(options)
		local _fn = ZirconGroupBuilder.new(self, 1, "user")
		local _object = {}
		local _left = "CanAccessConsole"
		local _result = options
		if _result ~= nil then
			_result = _result.CanAccessConsole
		end
		local _condition = _result
		if _condition == nil then
			_condition = false
		end
		_object[_left] = _condition
		return _fn:SetPermissions(_object):BindToEveryone():Add()
	end
	function ZirconConfigurationBuilder:AddNamespace(namespace, groups)
		local _array = {}
		local _length = #_array
		local _array_1 = self.configuration.Registry
		local _Length = #_array_1
		table.move(_array_1, 1, _Length, _length + 1, _array)
		_length += _Length
		_array[_length + 1] = { namespace, groups }
		self.configuration.Registry = _array
		return self
	end
	function ZirconConfigurationBuilder:AddEnum(enumType, groups)
		local _array = {}
		local _length = #_array
		local _array_1 = self.configuration.Registry
		local _Length = #_array_1
		table.move(_array_1, 1, _Length, _length + 1, _array)
		_length += _Length
		_array[_length + 1] = { enumType, groups }
		self.configuration.Registry = _array
		return self
	end
	function ZirconConfigurationBuilder:AddFunction(functionType, groups)
		local _array = {}
		local _length = #_array
		local _array_1 = self.configuration.Registry
		local _Length = #_array_1
		table.move(_array_1, 1, _Length, _length + 1, _array)
		_length += _Length
		_array[_length + 1] = { functionType, groups }
		self.configuration.Registry = _array
		return self
	end
	function ZirconConfigurationBuilder:AddFunctionsToGroups(functions, groupIds)
		local _array = {}
		local _length = #_array
		local _array_1 = self.configuration.Registry
		table.move(_array_1, 1, #_array_1, _length + 1, _array)
		local registry = _array
		for _, func in ipairs(functions) do
			local _arg0 = { func, groupIds }
			-- ▼ Array.push ▼
			registry[#registry + 1] = _arg0
			-- ▲ Array.push ▲
		end
		self.configuration.Registry = registry
		return self
	end
	function ZirconConfigurationBuilder:AddHook(hookName, hookCallback)
		local _array = {}
		local _length = #_array
		local _array_1 = self.configuration.Hooks[hookName]
		local _Length = #_array_1
		table.move(_array_1, 1, _Length, _length + 1, _array)
		_length += _Length
		_array[_length + 1] = hookCallback
		local hooks = _array
		self.configuration.Hooks[hookName] = hooks
		return self
	end
	function ZirconConfigurationBuilder:logging()
		return ZirconConfigurationBuilder.new():CreateGroup(255, "creator", function(group)
			return group:BindToCreator():SetPermissions({
				CanAccessFullZirconEditor = false,
				CanExecuteZirconiumScripts = false,
				CanRecieveServerLogMessages = true,
			})
		end):CreateDefaultUserGroup():Build()
	end
	function ZirconConfigurationBuilder:default()
		if game.CreatorType == Enum.CreatorType.Group then
			return ZirconConfigurationBuilder.new():CreateDefaultCreatorGroup():CreateDefaultAdminGroup():CreateDefaultUserGroup()
		else
			return ZirconConfigurationBuilder.new():CreateDefaultCreatorGroup():CreateDefaultUserGroup()
		end
	end
	function ZirconConfigurationBuilder:Build()
		return self.configuration
	end
end
return {
	ExecutionAction = ExecutionAction,
	ZirconConfigurationBuilder = ZirconConfigurationBuilder,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="668">
                  <Properties>
                    <string name="Name">ZirconContext</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local LogLevel = TS.import(script, TS.getModule(script, "@rbxts", "log").out).LogLevel
local MessageTemplateParser = TS.import(script, TS.getModule(script, "@rbxts", "message-templates").out).MessageTemplateParser
local _MessageTemplateToken = TS.import(script, TS.getModule(script, "@rbxts", "message-templates").out.MessageTemplateToken)
local DestructureMode = _MessageTemplateToken.DestructureMode
local TemplateTokenKind = _MessageTemplateToken.TemplateTokenKind
local RbxSerializer = TS.import(script, TS.getModule(script, "@rbxts", "message-templates").out.RbxSerializer).RbxSerializer
local RunService = game:GetService("RunService")
local ZirconContext
do
	ZirconContext = setmetatable({}, {
		__tostring = function()
			return "ZirconContext"
		end,
	})
	ZirconContext.__index = ZirconContext
	function ZirconContext.new(...)
		local self = setmetatable({}, ZirconContext)
		return self:constructor(...) or self
	end
	function ZirconContext:constructor(innerContext, executingFunction)
		self.innerContext = innerContext
		self.executingFunction = executingFunction
		self.logs = {}
	end
	function ZirconContext:GetExecutor()
		local executor = self.innerContext:getExecutor()
		assert(executor)
		return executor
	end
	function ZirconContext:Log(level, template, ...)
		local args = { ... }
		if RunService:IsServer() then
			local _promise = TS.Promise.new(function(resolve)
				resolve(TS.import(script, script.Parent.Parent, "Services", "LogService"))
			end)
			local _arg0 = function(log)
				local message = {
					Level = level,
					SourceContext = "(function '" .. (self.executingFunction:GetName() .. "')"),
					Template = template,
					Timestamp = DateTime.now():ToIsoDate(),
					LogToPlayer = self:GetExecutor(),
				}
				local tokens = MessageTemplateParser.GetTokens(template)
				local _arg0_1 = function(t)
					return t.kind == TemplateTokenKind.Property
				end
				-- ▼ ReadonlyArray.filter ▼
				local _newValue = {}
				local _length = 0
				for _k, _v in ipairs(tokens) do
					if _arg0_1(_v, _k - 1, tokens) == true then
						_length += 1
						_newValue[_length] = _v
					end
				end
				-- ▲ ReadonlyArray.filter ▲
				local propertyTokens = _newValue
				local idx = 0
				for _, token in ipairs(propertyTokens) do
					local _exp = args
					local _original = idx
					idx += 1
					local arg = _exp[_original + 1]
					if idx <= #args then
						if arg ~= nil then
							if token.destructureMode == DestructureMode.ToString then
								message[token.propertyName] = tostring(arg)
							else
								message[token.propertyName] = type(arg) == "table" and arg or RbxSerializer.Serialize(arg)
							end
						end
					end
				end
				log.ZirconLogService.WriteStructured(message)
				local _logs = self.logs
				-- ▼ Array.push ▼
				_logs[#_logs + 1] = message
				-- ▲ Array.push ▲
			end
			_promise:andThen(_arg0)
		else
			local _promise = TS.Promise.new(function(resolve)
				resolve(TS.import(script, script.Parent.Parent, "Client"))
			end)
			local _arg0 = function(_param)
				local client = _param.default
				local log = {
					Level = level,
					SourceContext = "(function '" .. (self.executingFunction:GetName() .. "')"),
					Template = template,
					Timestamp = DateTime.now():ToIsoDate(),
					LogToPlayer = self:GetExecutor(),
				}
				client.StructuredLog(log)
				local _logs = self.logs
				-- ▼ Array.push ▼
				_logs[#_logs + 1] = log
				-- ▲ Array.push ▲
			end
			_promise:andThen(_arg0)
		end
	end
	function ZirconContext:LogInfo(template, ...)
		local args = { ... }
		self:Log(LogLevel.Information, template, unpack(args))
	end
	function ZirconContext:LogWarning(template, ...)
		local args = { ... }
		self:Log(LogLevel.Warning, template, unpack(args))
	end
	function ZirconContext:LogError(template, ...)
		local args = { ... }
		self:Log(LogLevel.Error, template, unpack(args))
	end
	function ZirconContext:GetLogs()
		return self.logs
	end
	function ZirconContext:GetOutput()
		return self.innerContext:getOutput()
	end
	function ZirconContext:GetInput()
		return self.innerContext:getInput()
	end
	function ZirconContext:GetFunctionName()
		return self.executingFunction:GetName()
	end
end
return {
	ZirconContext = ZirconContext,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="669">
                  <Properties>
                    <string name="Name">ZirconEnum</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local ZrEnum = TS.import(script, TS.getModule(script, "@rbxts", "zirconium").out.Data.Enum).ZrEnum
local zirconTypeId = TS.import(script, script.Parent.Parent, "Shared", "typeId").zirconTypeId
local ZirconEnumItem = TS.import(script, script.Parent, "ZirconEnumItem").ZirconEnumItem
--[[
	*
	* An extension of the `ZrEnum` class for Zircon
]]
local ZirconEnum
do
	local super = ZrEnum
	ZirconEnum = setmetatable({}, {
		__tostring = function()
			return "ZirconEnum"
		end,
		__index = super,
	})
	ZirconEnum.__index = ZirconEnum
	function ZirconEnum.new(...)
		local self = setmetatable({}, ZirconEnum)
		return self:constructor(...) or self
	end
	function ZirconEnum:constructor(name, members)
		super.constructor(self, members, name, function(value, index)
			return ZirconEnumItem.new(self, index, value)
		end)
	end
	function ZirconEnum:is(value)
		return table.find(self:getItems(), value) ~= nil
	end
	function ZirconEnum:getItem(key)
		local _exp = self:getItems()
		local _arg0 = function(k)
			return k:getName() == key
		end
		-- ▼ ReadonlyArray.find ▼
		local _result = nil
		for _i, _v in ipairs(_exp) do
			if _arg0(_v, _i - 1, _exp) == true then
				_result = _v
				break
			end
		end
		-- ▲ ReadonlyArray.find ▲
		return _result
	end
	function ZirconEnum:match(value, matches)
		for _, member in ipairs(self:getItems()) do
			if member == value then
				return matches[member:getName()](value)
			end
		end
		if matches._ ~= nil then
			return matches._()
		end
		error("Invalid match")
	end
	function ZirconEnum:getValidator()
		return {
			Enum = self,
			Validate = function(self, value)
				local enumType = self.Enum
				if type(value) == "string" then
					local _exp = enumType:getItems()
					local _arg0 = function(item)
						return string.lower(item:getName()) == string.lower(value)
					end
					-- ▼ ReadonlyArray.find ▼
					local _result = nil
					for _i, _v in ipairs(_exp) do
						if _arg0(_v, _i - 1, _exp) == true then
							_result = _v
							break
						end
					end
					-- ▲ ReadonlyArray.find ▲
					local strItem = _result
					return strItem ~= nil
				elseif type(value) == "number" then
					local _exp = enumType:getItems()
					local _arg0 = function(item)
						return item:getValue() == value
					end
					-- ▼ ReadonlyArray.find ▼
					local _result = nil
					for _i, _v in ipairs(_exp) do
						if _arg0(_v, _i - 1, _exp) == true then
							_result = _v
							break
						end
					end
					-- ▲ ReadonlyArray.find ▲
					local intItem = _result
					return intItem ~= nil
				elseif TS.instanceof(value, ZirconEnumItem) then
					return value:getEnum() == enumType
				end
				return false
			end,
			Transform = function(self, value)
				local enumType = self.Enum
				if type(value) == "string" then
					local _exp = enumType:getItems()
					local _arg0 = function(item)
						return string.lower(item:getName()) == string.lower(value)
					end
					-- ▼ ReadonlyArray.find ▼
					local _result = nil
					for _i, _v in ipairs(_exp) do
						if _arg0(_v, _i - 1, _exp) == true then
							_result = _v
							break
						end
					end
					-- ▲ ReadonlyArray.find ▲
					local strItem = _result
					return strItem
				elseif type(value) == "number" then
					local _exp = enumType:getItems()
					local _arg0 = function(item)
						return item:getValue() == value
					end
					-- ▼ ReadonlyArray.find ▼
					local _result = nil
					for _i, _v in ipairs(_exp) do
						if _arg0(_v, _i - 1, _exp) == true then
							_result = _v
							break
						end
					end
					-- ▲ ReadonlyArray.find ▲
					local strItem = _result
					return strItem
				else
					return value
				end
			end,
			Type = self:getEnumName(),
			ErrorMessage = function(value)
				return zirconTypeId(value) .. (" is not castable to Enum '" .. (self:getEnumName() .. "'"))
			end,
		}
	end
	function ZirconEnum:toString()
		return self:getEnumName()
	end
	function ZirconEnum:__tostring()
		return self:toString()
	end
end
return {
	ZirconEnum = ZirconEnum,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="670">
                  <Properties>
                    <string name="Name">ZirconEnumBuilder</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local ZirconEnum = TS.import(script, script.Parent, "ZirconEnum").ZirconEnum
local function keysOf(value)
	local keys = {}
	for key in pairs(value) do
		-- ▼ Array.push ▼
		keys[#keys + 1] = key
		-- ▲ Array.push ▲
	end
	return keys
end
local ZirconEnumBuilder
do
	ZirconEnumBuilder = setmetatable({}, {
		__tostring = function()
			return "ZirconEnumBuilder"
		end,
	})
	ZirconEnumBuilder.__index = ZirconEnumBuilder
	function ZirconEnumBuilder.new(...)
		local self = setmetatable({}, ZirconEnumBuilder)
		return self:constructor(...) or self
	end
	function ZirconEnumBuilder:constructor(name)
		self.name = name
		self.members = {}
	end
	function ZirconEnumBuilder:AddEnumMember(name)
		local _members = self.members
		-- ▼ Array.push ▼
		_members[#_members + 1] = name
		-- ▲ Array.push ▲
		return self
	end
	function ZirconEnumBuilder:FromEnum(enumerable)
		return ZirconEnum.new(self.name, keysOf(enumerable))
	end
	function ZirconEnumBuilder:FromArray(values)
		return ZirconEnum.new(self.name, values)
	end
	function ZirconEnumBuilder:Build()
		return ZirconEnum.new(self.name, self.members)
	end
end
return {
	ZirconEnumBuilder = ZirconEnumBuilder,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="671">
                  <Properties>
                    <string name="Name">ZirconEnumItem</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local ZrEnumItem = TS.import(script, TS.getModule(script, "@rbxts", "zirconium").out.Data.EnumItem).ZrEnumItem
--[[
	*
	* An extension of the `ZrEnumItem` class for Zircon.
]]
local ZirconEnumItem
do
	local super = ZrEnumItem
	ZirconEnumItem = setmetatable({}, {
		__tostring = function()
			return "ZirconEnumItem"
		end,
		__index = super,
	})
	ZirconEnumItem.__index = ZirconEnumItem
	function ZirconEnumItem.new(...)
		local self = setmetatable({}, ZirconEnumItem)
		return self:constructor(...) or self
	end
	function ZirconEnumItem:constructor(enumParent, id, name)
		super.constructor(self, enumParent, id, name)
	end
	function ZirconEnumItem:match(matches)
		return matches[self:getName()](self)
	end
	function ZirconEnumItem:getName()
		return super.getName(self)
	end
	function ZirconEnumItem:getEnum()
		return super.getEnum(self)
	end
	function ZirconEnumItem:toString()
		return self:getEnum():getEnumName() .. ("." .. self:getName())
	end
	function ZirconEnumItem:__tostring()
		return self:toString()
	end
end
return {
	ZirconEnumItem = ZirconEnumItem,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="672">
                  <Properties>
                    <string name="Name">ZirconFunction</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local LogLevel = TS.import(script, TS.getModule(script, "@rbxts", "log").out).LogLevel
local RunService = TS.import(script, TS.getModule(script, "@rbxts", "services")).RunService
local ZrLuauFunction = TS.import(script, TS.getModule(script, "@rbxts", "zirconium").out.Data.LuauFunction).default
local Server = TS.import(script, script.Parent.Parent, "Server").default
local ZirconContext = TS.import(script, script.Parent, "ZirconContext").ZirconContext
local zirconTypeOf
local function emitArgumentError(func, context, arg, index, validator)
	local _errorMessage = validator.ErrorMessage
	local err = type(_errorMessage) == "function" and validator.ErrorMessage(arg, index, func) or validator.ErrorMessage
	-- Have to dynamically import
	if zirconTypeOf == nil then
		zirconTypeOf = TS.Promise.new(function(resolve)
			resolve(TS.import(script, script.Parent.Parent, "Shared", "typeId"))
		end):expect().zirconTypeOf
	end
	local _fn = Server.Log
	local _object = {
		SourceContext = "(function '" .. (func:GetName() .. "')"),
		Level = LogLevel.Error,
	}
	local _left = "Template"
	local _condition = err
	if _condition == nil then
		_condition = "Expected {ValidatorType}, got {ArgType}"
	end
	_object[_left] = "Argument #{ArgIndex} to '{FunctionName}': " .. _condition
	_object.Timestamp = DateTime.now():ToIsoDate()
	_object.FunctionName = func:GetName()
	_object.FunctionArgs = func:GetArgumentTypes()
	_object.FunctionVariadicArg = func:GetVariadicType()
	_object.LogToPlayer = context:getExecutor()
	_object.ArgIndex = index + 1
	_object.ValidatorType = validator.Type
	_object.ArgType = zirconTypeOf(arg)
	_fn.WriteStructured(_object)
end
local ZirconFunction
do
	local super = ZrLuauFunction
	ZirconFunction = setmetatable({}, {
		__tostring = function()
			return "ZirconFunction"
		end,
		__index = super,
	})
	ZirconFunction.__index = ZirconFunction
	function ZirconFunction.new(...)
		local self = setmetatable({}, ZirconFunction)
		return self:constructor(...) or self
	end
	function ZirconFunction:constructor(name, zirconCallback, metadata)
		self.name = name
		self.zirconCallback = zirconCallback
		self.metadata = metadata
		local _binding = metadata
		local VariadicValidator = _binding.VariadicValidator
		local ArgumentValidators = _binding.ArgumentValidators
		super.constructor(self, function(context, ...)
			local args = { ... }
			-- We'll need to type check all the arguments to ensure they're valid
			-- and transform as appropriate for the user side
			local executor = context:getExecutor()
			local transformedArguments = {}
			if #ArgumentValidators > 0 then
				do
					local i = 0
					local _shouldIncrement = false
					while true do
						if _shouldIncrement then
							i += 1
						else
							_shouldIncrement = true
						end
						if not (i < #ArgumentValidators) then
							break
						end
						local validator = ArgumentValidators[i + 1]
						local argument = args[i + 1]
						if validator and validator:Validate(argument, executor) then
							if validator.Transform ~= nil then
								transformedArguments[i + 1] = validator:Transform(argument, executor)
							else
								transformedArguments[i + 1] = argument
							end
						else
							if RunService:IsServer() then
								emitArgumentError(self, context, argument, i, validator)
							end
							return nil
						end
					end
				end
			elseif not VariadicValidator then
				transformedArguments = args
			end
			if #args > #ArgumentValidators and VariadicValidator then
				do
					local i = #ArgumentValidators
					local _shouldIncrement = false
					while true do
						if _shouldIncrement then
							i += 1
						else
							_shouldIncrement = true
						end
						if not (i < #args) then
							break
						end
						local argument = args[i + 1]
						if VariadicValidator:Validate(argument, executor) then
							if VariadicValidator.Transform ~= nil then
								transformedArguments[i + 1] = VariadicValidator:Transform(argument, executor)
							else
								transformedArguments[i + 1] = argument
							end
						else
							if RunService:IsServer() then
								emitArgumentError(self, context, argument, i, VariadicValidator)
							end
							return nil
						end
					end
				end
			end
			-- / This is not pretty, I know.
			return self.zirconCallback(ZirconContext.new(context, self), unpack(transformedArguments))
		end)
	end
	function ZirconFunction:GetName()
		return self.name
	end
	function ZirconFunction:GetArgumentTypes()
		local _binding = self.metadata
		local ArgumentValidators = _binding.ArgumentValidators
		local _arg0 = function(v)
			return v.Type
		end
		-- ▼ ReadonlyArray.map ▼
		local _newValue = table.create(#ArgumentValidators)
		for _k, _v in ipairs(ArgumentValidators) do
			_newValue[_k] = _arg0(_v, _k - 1, ArgumentValidators)
		end
		-- ▲ ReadonlyArray.map ▲
		local args = _newValue
		return args
	end
	function ZirconFunction:GetVariadicType()
		local _binding = self.metadata
		local VariadicValidator = _binding.VariadicValidator
		local _result = VariadicValidator
		if _result ~= nil then
			_result = _result.Type
		end
		return _result
	end
	function ZirconFunction:RegisterToContext(context)
		context:registerGlobal(self.name, self)
	end
	function ZirconFunction:GetDescription()
		return self.metadata.Description
	end
	function ZirconFunction:toString()
		local _exp = self:GetArgumentTypes()
		local _arg0 = function(typeName, argIndex)
			return typeName
		end
		-- ▼ ReadonlyArray.map ▼
		local _newValue = table.create(#_exp)
		for _k, _v in ipairs(_exp) do
			_newValue[_k] = _arg0(_v, _k - 1, _exp)
		end
		-- ▲ ReadonlyArray.map ▲
		local argTypes = _newValue
		local varadicType = self:GetVariadicType()
		if varadicType ~= nil then
			local _arg0_1 = "..." .. varadicType
			-- ▼ Array.push ▼
			argTypes[#argTypes + 1] = _arg0_1
			-- ▲ Array.push ▲
		end
		return (self.metadata.Description ~= nil and "/* " .. (self.metadata.Description .. " */") or "") .. (" function " .. (self.name .. "(")) .. table.concat(argTypes, ", ") .. ") { [ZirconFunction] }"
	end
	function ZirconFunction:__tostring()
		return self:toString()
	end
end
return {
	emitArgumentError = emitArgumentError,
	ZirconFunction = ZirconFunction,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="673">
                  <Properties>
                    <string name="Name">ZirconFunctionBuilder</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local BuiltInValidators = TS.import(script, script.Parent, "ZirconTypeValidator").BuiltInValidators
local ZirconFunction = TS.import(script, script.Parent, "ZirconFunction").ZirconFunction
local ZirconEnum = TS.import(script, script.Parent, "ZirconEnum").ZirconEnum
local _TypeUtilities = TS.import(script, script.Parent, "TypeUtilities")
local ZirconArrayType = _TypeUtilities.ZirconArrayType
local ZirconTypeUnion = _TypeUtilities.ZirconTypeUnion
local t = TS.import(script, TS.getModule(script, "@rbxts", "t").lib.ts)
local isArray = t.array(t.any)
local ZirconFunctionBuilder
do
	ZirconFunctionBuilder = setmetatable({}, {
		__tostring = function()
			return "ZirconFunctionBuilder"
		end,
	})
	ZirconFunctionBuilder.__index = ZirconFunctionBuilder
	function ZirconFunctionBuilder.new(...)
		local self = setmetatable({}, ZirconFunctionBuilder)
		return self:constructor(...) or self
	end
	function ZirconFunctionBuilder:constructor(name)
		self.name = name
		self.validators = {}
		self.hasVariadic = false
	end
	function ZirconFunctionBuilder:GetValidator(argValidator)
		local validator
		if type(argValidator) == "string" then
			validator = BuiltInValidators[argValidator]
		elseif TS.instanceof(argValidator, ZirconEnum) then
			validator = argValidator:getValidator()
		else
			validator = argValidator
		end
		return validator
	end
	function ZirconFunctionBuilder:GetUnionableValidator(argValidator)
		if isArray(argValidator) then
			return self:GetValidator(ZirconTypeUnion(unpack(argValidator)))
		else
			return self:GetValidator(argValidator)
		end
	end
	function ZirconFunctionBuilder:AddArgument(argValidator, description)
		local validator = self:GetUnionableValidator(argValidator)
		local _validators = self.validators
		-- ▼ Array.push ▼
		_validators[#_validators + 1] = validator
		-- ▲ Array.push ▲
		return self
	end
	function ZirconFunctionBuilder:AddArrayArgument(argValidator, description)
		local validator = ZirconArrayType(self:GetUnionableValidator(argValidator))
		local _validators = self.validators
		-- ▼ Array.push ▼
		_validators[#_validators + 1] = validator
		-- ▲ Array.push ▲
		return self
	end
	function ZirconFunctionBuilder:AddVariadicArgument(arg)
		self.hasVariadic = true
		local validator = self:GetUnionableValidator(arg)
		self.varadicValidator = validator
		return self
	end
	function ZirconFunctionBuilder:AddDescription(description)
		self.description = description
		return self
	end
	function ZirconFunctionBuilder:Bind(fn)
		return ZirconFunction.new(self.name, fn, {
			Description = self.description,
			HasVariadic = self.hasVariadic,
			VariadicValidator = self.varadicValidator,
			ArgumentValidators = self.validators,
		})
	end
end
return {
	ZirconFunctionBuilder = ZirconFunctionBuilder,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="674">
                  <Properties>
                    <string name="Name">ZirconGroupBuilder</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local ZirconBindingType
do
	local _inverse = {}
	ZirconBindingType = setmetatable({}, {
		__index = _inverse,
	})
	ZirconBindingType.Creator = 1
	_inverse[1] = "Creator"
	ZirconBindingType.Group = 2
	_inverse[2] = "Group"
	ZirconBindingType.UserIds = 4
	_inverse[4] = "UserIds"
	ZirconBindingType.Everyone = 1073741824
	_inverse[1073741824] = "Everyone"
end
local ZirconGroupBuilder
do
	ZirconGroupBuilder = setmetatable({}, {
		__tostring = function()
			return "ZirconGroupBuilder"
		end,
	})
	ZirconGroupBuilder.__index = ZirconGroupBuilder
	function ZirconGroupBuilder.new(...)
		local self = setmetatable({}, ZirconGroupBuilder)
		return self:constructor(...) or self
	end
	function ZirconGroupBuilder:constructor(parent, rank, id)
		self.parent = parent
		self.rank = rank
		self.id = id
		self.permissions = {
			CanAccessConsole = true,
			CanAccessFullZirconEditor = false,
			CanExecuteZirconiumScripts = false,
			CanViewLogMetadata = false,
			CanRecieveServerLogMessages = false,
		}
		self.groupLink = {}
		self.userIds = {}
		self.bindType = 0
	end
	function ZirconGroupBuilder:SetPermission(key, value)
		self.permissions[key] = value
		return self
	end
	function ZirconGroupBuilder:SetPermissions(permissions)
		local _object = {}
		local _left = "CanAccessConsole"
		local _condition = permissions.CanAccessConsole
		if _condition == nil then
			_condition = self.permissions.CanAccessConsole
		end
		_object[_left] = _condition
		local _left_1 = "CanRecieveServerLogMessages"
		local _condition_1 = permissions.CanRecieveServerLogMessages
		if _condition_1 == nil then
			_condition_1 = self.permissions.CanRecieveServerLogMessages
		end
		_object[_left_1] = _condition_1
		local _left_2 = "CanAccessFullZirconEditor"
		local _condition_2 = permissions.CanAccessFullZirconEditor
		if _condition_2 == nil then
			_condition_2 = self.permissions.CanAccessFullZirconEditor
		end
		_object[_left_2] = _condition_2
		local _left_3 = "CanExecuteZirconiumScripts"
		local _condition_3 = permissions.CanExecuteZirconiumScripts
		if _condition_3 == nil then
			_condition_3 = self.permissions.CanExecuteZirconiumScripts
		end
		_object[_left_3] = _condition_3
		local _left_4 = "CanViewLogMetadata"
		local _condition_4 = permissions.CanViewLogMetadata
		if _condition_4 == nil then
			_condition_4 = permissions.CanRecieveServerLogMessages
			if _condition_4 == nil then
				_condition_4 = self.permissions.CanViewLogMetadata
			end
		end
		_object[_left_4] = _condition_4
		self.permissions = _object
		return self
	end
	function ZirconGroupBuilder:BindToGroupRole(groupId, groupRole)
		local _groupLink = self.groupLink
		local _arg0 = {
			GroupId = groupId,
			GroupRoleOrRank = groupRole,
		}
		-- ▼ Array.push ▼
		_groupLink[#_groupLink + 1] = _arg0
		-- ▲ Array.push ▲
		return self
	end
	function ZirconGroupBuilder:BindToUserIds(userIds)
		self.bindType = bit32.bor(self.bindType, ZirconBindingType.UserIds)
		for _, userId in ipairs(userIds) do
			local _userIds = self.userIds
			-- ▼ Array.push ▼
			_userIds[#_userIds + 1] = userId
			-- ▲ Array.push ▲
		end
		return self
	end
	function ZirconGroupBuilder:BindToEveryone()
		self.bindType = bit32.bor(self.bindType, ZirconBindingType.Everyone)
		return self
	end
	function ZirconGroupBuilder:BindToCreator()
		self.bindType = bit32.bor(self.bindType, ZirconBindingType.Creator)
		return self
	end
	function ZirconGroupBuilder:BindToGroupRank(groupId, groupRank)
		self.bindType = bit32.bor(self.bindType, ZirconBindingType.Group)
		local _groupLink = self.groupLink
		local _arg0 = {
			GroupId = groupId,
			GroupRoleOrRank = groupRank,
		}
		-- ▼ Array.push ▼
		_groupLink[#_groupLink + 1] = _arg0
		-- ▲ Array.push ▲
		return self
	end
	function ZirconGroupBuilder:Add()
		local _binding = self.parent
		local configuration = _binding.configuration
		local _array = {}
		local _length = #_array
		local _array_1 = configuration.Groups
		local _Length = #_array_1
		table.move(_array_1, 1, _Length, _length + 1, _array)
		_length += _Length
		_array[_length + 1] = {
			Id = self.id,
			Rank = self.rank,
			UserIds = self.userIds,
			BindType = self.bindType,
			Permissions = self.permissions,
			Groups = self.groupLink,
		}
		configuration.Groups = _array
		return self.parent
	end
end
return {
	ZirconBindingType = ZirconBindingType,
	ZirconGroupBuilder = ZirconGroupBuilder,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="675">
                  <Properties>
                    <string name="Name">ZirconNamespace</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local ZrObjectUserdata = TS.import(script, TS.getModule(script, "@rbxts", "zirconium").out.Data.Userdata).ZrObjectUserdata
local ZirconNamespace
do
	ZirconNamespace = setmetatable({}, {
		__tostring = function()
			return "ZirconNamespace"
		end,
	})
	ZirconNamespace.__index = ZirconNamespace
	function ZirconNamespace.new(...)
		local self = setmetatable({}, ZirconNamespace)
		return self:constructor(...) or self
	end
	function ZirconNamespace:constructor(name, functions)
		self.name = name
		self.functions = functions
	end
	function ZirconNamespace:RegisterToContext(context)
		local functionMap = {}
		for _, func in ipairs(self.functions) do
			local _arg0 = func:GetName()
			-- ▼ Map.set ▼
			functionMap[_arg0] = func
			-- ▲ Map.set ▲
		end
		local namespaceObject = ZrObjectUserdata:fromObject(functionMap)
		context:registerGlobal(self.name, namespaceObject)
	end
	function ZirconNamespace:GetMembers()
		return self.functions
	end
	function ZirconNamespace:GetName()
		return self.name
	end
	function ZirconNamespace:ToUserdata()
		local functionMap = {}
		for _, func in ipairs(self.functions) do
			local _arg0 = func:GetName()
			-- ▼ Map.set ▼
			functionMap[_arg0] = func
			-- ▲ Map.set ▲
		end
		return ZrObjectUserdata:fromObject(functionMap)
	end
end
return {
	ZirconNamespace = ZirconNamespace,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="676">
                  <Properties>
                    <string name="Name">ZirconNamespaceBuilder</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local LogLevel = TS.import(script, TS.getModule(script, "@rbxts", "log").out).LogLevel
local ZirconFunctionBuilder = TS.import(script, script.Parent, "ZirconFunctionBuilder").ZirconFunctionBuilder
local ZirconNamespace = TS.import(script, script.Parent, "ZirconNamespace").ZirconNamespace
local ZirconNamespaceBuilder
do
	ZirconNamespaceBuilder = setmetatable({}, {
		__tostring = function()
			return "ZirconNamespaceBuilder"
		end,
	})
	ZirconNamespaceBuilder.__index = ZirconNamespaceBuilder
	function ZirconNamespaceBuilder.new(...)
		local self = setmetatable({}, ZirconNamespaceBuilder)
		return self:constructor(...) or self
	end
	function ZirconNamespaceBuilder:constructor(name)
		self.name = name
		self.functions = {}
	end
	function ZirconNamespaceBuilder:AddFunction(func)
		local _functions = self.functions
		local _arg0 = function(f)
			return f:GetName() == func:GetName()
		end
		-- ▼ ReadonlyArray.find ▼
		local _result = nil
		for _i, _v in ipairs(_functions) do
			if _arg0(_v, _i - 1, _functions) == true then
				_result = _v
				break
			end
		end
		-- ▲ ReadonlyArray.find ▲
		local existingFn = _result
		if existingFn then
			warn("Duplicate function: '" .. func:GetName() .. "' in namespace '" .. self.name .. "'")
		else
			local _functions_1 = self.functions
			-- ▼ Array.push ▼
			_functions_1[#_functions_1 + 1] = func
			-- ▲ Array.push ▲
		end
		return self
	end
	function ZirconNamespaceBuilder:AddHelpFunction(callback, functionName, functionDescription)
		if callback == nil then
			callback = function(name, args, desc)
				local _promise = TS.Promise.new(function(resolve)
					resolve(TS.import(script, script.Parent.Parent, "Services", "LogService"))
				end)
				local _arg0 = function(_param)
					local ZirconLogService = _param.ZirconLogService
					ZirconLogService.WriteStructured({
						Template = desc ~= nil and "function {Name} {Args}: '{Description}'" or "function {Name} {Args}",
						Name = name,
						Args = args,
						Description = desc,
						Timestamp = DateTime.now():ToIsoDate(),
						Level = LogLevel.Information,
						SourceContext = self.name .. ("." .. functionName),
					})
				end
				_promise:andThen(_arg0)
			end
		end
		if functionName == nil then
			functionName = "help"
		end
		if functionDescription == nil then
			functionDescription = "Lists all members in this namespace"
		end
		local _functions = self.functions
		local _arg0 = ZirconFunctionBuilder.new(functionName):AddArgument("string?"):AddDescription(functionDescription):Bind(function(_, memberName)
			local _result
			if memberName ~= nil then
				local _functions_1 = self.functions
				local _arg0_1 = function(f)
					local _exp = string.lower(f:GetName())
					local _arg0_2 = string.lower(memberName)
					return (string.find(_exp, _arg0_2, 1, true)) ~= nil
				end
				-- ▼ ReadonlyArray.find ▼
				local _result_1 = nil
				for _i, _v in ipairs(_functions_1) do
					if _arg0_1(_v, _i - 1, _functions_1) == true then
						_result_1 = _v
						break
					end
				end
				-- ▲ ReadonlyArray.find ▲
				_result = _result_1
			else
				_result = nil
			end
			local matchingMember = _result
			if matchingMember then
				local args = matchingMember:GetArgumentTypes()
				local varType = matchingMember:GetVariadicType()
				if varType ~= nil then
					local _arg0_1 = "..." .. varType
					-- ▼ Array.push ▼
					args[#args + 1] = _arg0_1
					-- ▲ Array.push ▲
				end
				callback(matchingMember:GetName(), args, matchingMember:GetDescription())
			else
				local _functions_1 = self.functions
				local _arg0_1 = function(f)
					local args = f:GetArgumentTypes()
					local varType = f:GetVariadicType()
					if varType ~= nil then
						local _arg0_2 = "..." .. varType
						-- ▼ Array.push ▼
						args[#args + 1] = _arg0_2
						-- ▲ Array.push ▲
					end
					return { f:GetName(), args, f:GetDescription() }
				end
				-- ▼ ReadonlyArray.map ▼
				local _newValue = table.create(#_functions_1)
				for _k, _v in ipairs(_functions_1) do
					_newValue[_k] = _arg0_1(_v, _k - 1, _functions_1)
				end
				-- ▲ ReadonlyArray.map ▲
				local _arg0_2 = function(arg)
					return callback(unpack(arg))
				end
				-- ▼ ReadonlyArray.forEach ▼
				for _k, _v in ipairs(_newValue) do
					_arg0_2(_v, _k - 1, _newValue)
				end
				-- ▲ ReadonlyArray.forEach ▲
			end
		end)
		-- ▼ Array.push ▼
		_functions[#_functions + 1] = _arg0
		-- ▲ Array.push ▲
		return self
	end
	function ZirconNamespaceBuilder:Build()
		return ZirconNamespace.new(self.name, self.functions)
	end
end
return {
	ZirconNamespaceBuilder = ZirconNamespaceBuilder,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="677">
                  <Properties>
                    <string name="Name">ZirconTypeValidator</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local ZrEnum = TS.import(script, TS.getModule(script, "@rbxts", "zirconium").out.Data.Enum).ZrEnum
local ZrEnumItem = TS.import(script, TS.getModule(script, "@rbxts", "zirconium").out.Data.EnumItem).ZrEnumItem
local ZrObject = TS.import(script, TS.getModule(script, "@rbxts", "zirconium").out.Data.Object).default
local ZrUndefined = TS.import(script, TS.getModule(script, "@rbxts", "zirconium").out.Data.Undefined)
local ZrInstanceUserdata = TS.import(script, TS.getModule(script, "@rbxts", "zirconium").out.Data.Userdata).ZrInstanceUserdata
local ZirconFuzzyPlayer = TS.import(script, script.Parent, "Validators", "ZirconFuzzyPlayerValidator").ZirconFuzzyPlayer
local ZirconFuzzyPlayers = TS.import(script, script.Parent, "Validators", "ZirconFuzzyPlayersValidator").ZirconFuzzyPlayers
local ZrRange = TS.import(script, TS.getModule(script, "@rbxts", "zirconium").out.Data.Range).default
local zirconTypeOf = TS.import(script, script.Parent.Parent, "Shared", "typeId").zirconTypeOf
local ZirconString = {
	Type = "string",
	Validate = function(self, value)
		return type(value) == "string"
	end,
	ErrorMessage = function(value)
		return "Expected string, got " .. zirconTypeOf(value)
	end,
}
local ZirconNumber = {
	Type = "number",
	Validate = function(self, value)
		return type(value) == "number"
	end,
	ErrorMessage = function(value)
		return "Expected number, got " .. zirconTypeOf(value)
	end,
}
local ZirconBoolean = {
	Type = "boolean",
	Validate = function(self, value)
		return type(value) == "boolean"
	end,
	ErrorMessage = function(value)
		return "Expected boolean, got " .. zirconTypeOf(value)
	end,
}
local ZirconObject = {
	Type = "object",
	Validate = function(self, value)
		return TS.instanceof(value, ZrObject)
	end,
	ErrorMessage = function(value)
		return "Expected object, got " .. zirconTypeOf(value)
	end,
}
local NativeEnum = {
	Type = "ZrEnum",
	Validate = function(self, value)
		return TS.instanceof(value, ZrEnum)
	end,
	ErrorMessage = function(value)
		return "Expected enum, got " .. zirconTypeOf(value)
	end,
}
local NativeEnumItem = {
	Type = "ZrEnumItem",
	Validate = function(self, value)
		return TS.instanceof(value, ZrEnumItem)
	end,
	ErrorMessage = function(value)
		return "Expected enum item, got " .. zirconTypeOf(value)
	end,
}
local function ZirconOptionalValidator(validator)
	return {
		Type = validator.Type .. "?",
		Validate = function(self, value, player)
			return validator:Validate(value, player) or value == nil
		end,
		Transform = function(self, value, player)
			if validator:Validate(value, player) then
				if validator.Transform ~= nil then
					local _condition = validator:Transform(value, player)
					if _condition == nil then
						_condition = nil
					end
					return _condition
				else
					return value
				end
			else
				return nil
			end
		end,
	}
end
local ZirconUnknown = {
	Type = "unknown",
	Validate = function(self, value)
		return true
	end,
}
local ZirconDefined = {
	Type = "defined",
	Validate = function(self, value)
		return value ~= ZrUndefined and value ~= nil
	end,
	ErrorMessage = function(value)
		return "Expected defined, got " .. zirconTypeOf(value)
	end,
}
local ZirconRange = {
	Type = "range",
	Validate = function(self, value)
		return type(value) == "number" or TS.instanceof(value, ZrRange)
	end,
	Transform = function(self, value)
		if type(value) == "number" then
			return ZrRange.new(NumberRange.new(value))
		else
			return value
		end
	end,
	ErrorMessage = function(value)
		return "Expected range, got " .. zirconTypeOf(value)
	end,
}
local function ZirconInstanceIsA(typeName)
	local _arg0 = {
		Type = "RBX" .. typeName,
		Validate = function(self, value)
			return TS.instanceof(value, ZrInstanceUserdata) and value:isA(typeName)
		end,
		Transform = function(self, value)
			return value:value()
		end,
		ErrorMessage = function(value)
			return "Expected Instance, got " .. zirconTypeOf(value)
		end,
	}
	return _arg0
end
local ZirconPlayer = ZirconInstanceIsA("Player")
local BuiltInValidators = {
	string = ZirconString,
	number = ZirconNumber,
	boolean = ZirconBoolean,
	object = ZirconObject,
	defined = ZirconDefined,
	["object?"] = ZirconOptionalValidator(ZirconObject),
	player = ZirconFuzzyPlayer,
	players = ZirconFuzzyPlayers,
	["player?"] = ZirconOptionalValidator(ZirconFuzzyPlayer),
	["players?"] = ZirconOptionalValidator(ZirconFuzzyPlayers),
	["string?"] = ZirconOptionalValidator(ZirconString),
	["number?"] = ZirconOptionalValidator(ZirconNumber),
	["boolean?"] = ZirconOptionalValidator(ZirconBoolean),
	unknown = ZirconUnknown,
	ZrEnum = NativeEnum,
	ZrEnumItem = NativeEnumItem,
	range = ZirconRange,
	["range?"] = ZirconOptionalValidator(ZirconRange),
}
-- export type InferArguments<T extends ReadonlyArray<Validator>> = {
-- readonly [P in keyof T]: InferTypeFromValidator<T[P]>;
-- } & { length: T["length"] };
return {
	ZirconOptionalValidator = ZirconOptionalValidator,
	ZirconInstanceIsA = ZirconInstanceIsA,
	ZirconString = ZirconString,
	ZirconNumber = ZirconNumber,
	ZirconBoolean = ZirconBoolean,
	ZirconObject = ZirconObject,
	NativeEnum = NativeEnum,
	NativeEnumItem = NativeEnumItem,
	ZirconUnknown = ZirconUnknown,
	ZirconDefined = ZirconDefined,
	ZirconRange = ZirconRange,
	ZirconPlayer = ZirconPlayer,
	BuiltInValidators = BuiltInValidators,
}
]]></string>
                  </Properties>
                </Item>
              </Item>
              <Item class="ModuleScript" referent="678">
                <Properties>
                  <string name="Name">Client</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local Roact = TS.import(script, TS.getModule(script, "@rbxts", "roact").src)
local RoactRodux = TS.import(script, TS.getModule(script, "@rbxts", "roact-rodux").src)
local _services = TS.import(script, TS.getModule(script, "@rbxts", "services"))
local ContextActionService = _services.ContextActionService
local Players = _services.Players
local RunService = _services.RunService
local StarterGui = _services.StarterGui
local ZirconClientStore = TS.import(script, script, "BuiltInConsole", "Store").default
local ZirconDockedConsole = TS.import(script, script, "BuiltInConsole", "UI", "DockedConsole").default
local Lazy = TS.import(script, script.Parent, "Shared", "Lazy")
local GetCommandService = TS.import(script, script.Parent, "Services").GetCommandService
local Remotes = TS.import(script, script.Parent, "Shared", "Remotes").default
local ZirconLogLevel = TS.import(script, script, "Types").ZirconLogLevel
local ZirconTopBar = TS.import(script, script, "BuiltInConsole", "UI", "TopbarMenu").default
local _ThemeContext = TS.import(script, script, "UIKit", "ThemeContext")
local ThemeContext = _ThemeContext.default
local BuiltInThemes = _ThemeContext.BuiltInThemes
local IsClient = RunService:IsClient()
local ConsoleType
do
	local _inverse = {}
	ConsoleType = setmetatable({}, {
		__index = _inverse,
	})
	ConsoleType.DockedConsole = 0
	_inverse[0] = "DockedConsole"
end
local ZirconClient = {}
do
	local _container = ZirconClient
	local handle
	local isVisible = false
	local Registry = Lazy(function()
		assert(IsClient, "Zircon Service only accessible on client")
		return GetCommandService("ClientRegistryService")
	end)
	_container.Registry = Registry
	local Dispatch = Lazy(function()
		assert(IsClient, "Zircon Service only accessible on client")
		return GetCommandService("ClientDispatchService")
	end)
	_container.Dispatch = Dispatch
	-- * @internal
	local function StructuredLog(data)
		ZirconClientStore:dispatch({
			type = "AddOutput",
			message = {
				type = "slog:output",
				data = data,
				context = 1,
			},
		})
	end
	_container.StructuredLog = StructuredLog
	-- * @internal
	local function ZirconErrorLog(data)
		ZirconClientStore:dispatch({
			type = "AddOutput",
			message = {
				type = "zr:error",
				error = data,
				context = 1,
			},
		})
	end
	_container.ZirconErrorLog = ZirconErrorLog
	local topbarEnabledState = false
	local SetVisible
	local function activateBuiltInConsole(_, state)
		local _binding = ZirconClientStore:getState()
		local hotkeyEnabled = _binding.hotkeyEnabled
		print("test", state)
		if state == Enum.UserInputState.End and hotkeyEnabled then
			SetVisible(not isVisible)
		end
		return Enum.ContextActionResult.Sink
	end
	function SetVisible(visible)
		local isTopbarEnabled = StarterGui:GetCore("TopbarEnabled")
		if visible then
			if isTopbarEnabled then
				topbarEnabledState = true
				StarterGui:SetCore("TopbarEnabled", false)
			end
		else
			if topbarEnabledState then
				StarterGui:SetCore("TopbarEnabled", true)
			end
		end
		ZirconClientStore:dispatch({
			type = "SetConsoleVisible",
			visible = visible,
		})
		isVisible = visible
	end
	_container.SetVisible = SetVisible
	local consoleBound = false
	local function BindConsoleIntl(options)
		local _binding = options
		local Keys = _binding.Keys
		if Keys == nil then
			Keys = { Enum.KeyCode.F10 }
		end
		local ConsoleComponent = _binding.ConsoleComponent
		if ConsoleComponent == nil then
			ConsoleComponent = ZirconDockedConsole
		end
		local Theme = _binding.Theme
		if Theme == nil then
			Theme = "Plastic"
		end
		local AutoFocusTextBox = _binding.AutoFocusTextBox
		if AutoFocusTextBox == nil then
			AutoFocusTextBox = true
		end
		local EnableTags = _binding.EnableTags
		if EnableTags == nil then
			EnableTags = true
		end
		local GetPlayerOptions = Remotes.Client:WaitFor("ZrSiO4/GetPlayerPermissions"):expect()
		local _exp = GetPlayerOptions:CallServerAsync()
		local _arg0 = function(permissions)
			if permissions.CanAccessConsole ~= nil then
				ContextActionService:UnbindAction("ZirconConsoleActivate")
				ContextActionService:BindActionAtPriority("ZirconConsoleActivate", function(_, state, io)
					if state == Enum.UserInputState.End then
						SetVisible(not isVisible)
					end
					return Enum.ContextActionResult.Sink
				end, false, Enum.ContextActionPriority.High.Value, unpack(Keys))
				handle = Roact.mount(Roact.createElement(ThemeContext.Provider, {
					value = BuiltInThemes[Theme],
				}, {
					Roact.createElement(RoactRodux.StoreProvider, {
						store = ZirconClientStore,
					}, {
						Roact.createFragment({
							Roact.createElement(ZirconTopBar),
							Roact.createElement(ConsoleComponent),
						}),
					}),
				}), Players.LocalPlayer:FindFirstChildOfClass("PlayerGui"))
			end
			ZirconClientStore:dispatch({
				type = "SetConsoleConfiguration",
				hotkeyEnabled = permissions.CanAccessConsole ~= nil,
				autoFocusTextBox = AutoFocusTextBox,
				bindKeys = Keys,
				executionEnabled = permissions.CanExecuteZirconiumScripts ~= nil,
				logDetailsPaneEnabled = permissions.CanViewLogMetadata ~= nil,
				showTagsInOutput = EnableTags,
			})
		end
		_exp:andThen(_arg0)
	end
	--[[
		*
		* Binds the built-in Zircon console
		* Default Keybind: F10
		*
		* @param options The console options
		*
		* *This is not required, you can use your own console solution!*
	]]
	local function Init(options)
		if options == nil then
			options = {}
		end
		if consoleBound then
			return nil
		end
		local initialized = Remotes.Client:Get("ZrSOi4/GetZirconInit"):CallServerAsync():expect()
		consoleBound = true
		if initialized == false then
			local _exp = Remotes.Client:WaitFor("ZrSOi4/ZirconInit")
			local _arg0 = function(remote)
				local connection
				connection = remote:Connect(function()
					BindConsoleIntl(options)
					connection:Disconnect()
				end)
			end
			_exp:andThen(_arg0)
		else
			BindConsoleIntl(options)
		end
	end
	_container.Init = Init
	-- * @deprecated Use `Init`
	local function BindConsole(options)
		if options == nil then
			options = {}
		end
		return Init(options)
	end
	_container.BindConsole = BindConsole
	local bound = false
	-- * @hidden @deprecated No longer works - use `Keys` option to {@link Init}
	local function BindActivationKeys(keys)
		-- Sink
		bound = true
	end
	_container.BindActivationKeys = BindActivationKeys
	if IsClient then
		local _exp = Remotes.Client:WaitFor("ZrSiO4/StandardOutput")
		local _arg0 = function(StandardOutput)
			StandardOutput:Connect(function(message)
				local _exp_1 = message.type
				repeat
					if _exp_1 == "ZrStandardOutput" then
						ZirconClientStore:dispatch({
							type = "AddOutput",
							message = {
								type = "zr:output",
								context = 0,
								message = message,
							},
						})
						break
					end
					if _exp_1 == "ZirconStructuredOutput" then
						ZirconClientStore:dispatch({
							type = "AddOutput",
							message = {
								type = "slog:output",
								context = 0,
								data = message.data,
							},
						})
						break
					end
					if _exp_1 == "ZirconStandardOutput" then
						ZirconClientStore:dispatch({
							type = "AddOutput",
							message = {
								type = "zirclog:message",
								context = 0,
								message = message,
							},
						})
						break
					end
				until true
			end)
			ZirconClientStore:dispatch({
				type = "AddOutput",
				message = {
					type = "zirclog:message",
					context = 1,
					message = {
						type = "ZirconStandardOutput",
						message = "Loaded Zircon v" .. "1.0.9",
						level = ZirconLogLevel.Debug,
						time = DateTime.now().UnixTimestamp,
						tag = "INIT",
						data = {
							Variables = {},
						},
					},
				},
			})
		end
		_exp:andThen(_arg0)
		local _exp_1 = Remotes.Client:WaitFor("ZrSiO4/StandardError")
		local _arg0_1 = function(StandardError)
			StandardError:Connect(function(err)
				local _exp_2 = err.type
				repeat
					local _fallthrough = false
					if _exp_2 == "ZrParserError" then
						_fallthrough = true
					end
					if _fallthrough or _exp_2 == "ZrRuntimeError" then
						ZirconClientStore:dispatch({
							type = "AddOutput",
							message = {
								type = "zr:error",
								context = 0,
								error = err,
							},
						})
						break
					end
					if _exp_2 == "ZirconStandardError" then
						ZirconClientStore:dispatch({
							type = "AddOutput",
							message = {
								type = "zirclog:error",
								context = 0,
								error = err,
							},
						})
						break
					end
				until true
			end)
		end
		_exp_1:andThen(_arg0_1)
	end
end
local default = ZirconClient
return {
	ConsoleType = ConsoleType,
	default = default,
}
]]></string>
                </Properties>
                <Item class="Folder" referent="679">
                  <Properties>
                    <string name="Name">BuiltInConsole</string>
                  </Properties>
                  <Item class="ModuleScript" referent="680">
                    <Properties>
                      <string name="Name">DelayAsync</string>
                      <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local RunService = game:GetService("RunService")
local function fspawn(fn)
	return coroutine.wrap(fn)()
end
--[[
	*
	* Delays execution for a set amount of time
	*
	* ```ts
	* // Example usage:
	* delayAsync(10).then(() => {
	* 	print("Waited 10 seconds to execute this!");
	* });
	* ```
	*
	* You can also do
	*
	* ```ts
	* await delayAsync(10);
	* print("Waited 10 seconds!");
	* ```
	*
	* ----
	* This can also be cancelled.
	*
	* @param timeout The timeout
	* @param useRenderStepped To use renderStepped - for plugins iirc?
]]
local function delayAsync(timeout, useRenderStepped)
	return TS.Promise.new(function(resolve, _, onCancel)
		fspawn(function()
			local endTime = tick() + (timeout ~= nil and timeout or 1 / 60)
			local ticking = true
			onCancel(function()
				ticking = false
			end)
			while tick() < endTime and ticking do
				if useRenderStepped then
					RunService.RenderStepped:Wait()
				else
					RunService.Stepped:Wait()
				end
			end
			if tick() >= endTime then
				resolve({ tick(), time() })
			end
		end)
	end)
end
local function waitUntilDescendantOfGame(instance)
	return TS.Promise.defer(function(resolve)
		while not instance:IsDescendantOf(game) do
			RunService.Stepped:Wait()
		end
		resolve(instance.Parent)
	end)
end
--[[
	*
	* Replacement for `game.Debris:AddItem(x)`.
	* @param instance The instance to destroy
	* @param seconds The time to destroy it in
]]
local destroyAsync = TS.async(function(instance, seconds)
	if seconds == nil then
		seconds = 0
	end
	if seconds > 0 then
		TS.await(delayAsync(seconds))
	end
	local _ = instance:IsDescendantOf(game) and instance:Destroy()
end)
return {
	fspawn = fspawn,
	default = delayAsync,
	waitUntilDescendantOfGame = waitUntilDescendantOfGame,
	destroyAsync = destroyAsync,
}
]]></string>
                    </Properties>
                  </Item>
                  <Item class="ModuleScript" referent="681">
                    <Properties>
                      <string name="Name">Store</string>
                      <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local Rodux = TS.import(script, TS.getModule(script, "@rbxts", "rodux").src)
local consoleReducer = TS.import(script, script, "_reducers", "ConsoleReducer").default
--[[
	*
	* The Rodux client store for Zircon
	* @internal
]]
local ZirconClientStore = Rodux.Store.new(consoleReducer)
local default = ZirconClientStore
return {
	default = default,
}
]]></string>
                    </Properties>
                    <Item class="Folder" referent="682">
                      <Properties>
                        <string name="Name">_reducers</string>
                      </Properties>
                      <Item class="ModuleScript" referent="683">
                        <Properties>
                          <string name="Name">ConsoleReducer</string>
                          <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local createReducer = TS.import(script, TS.getModule(script, "@rbxts", "rodux").src).createReducer
local ZirconLogLevel = TS.import(script, script.Parent.Parent.Parent.Parent, "Types").ZirconLogLevel
local DEFAULT_FILTER = {
	[ZirconLogLevel.Info] = true,
	[ZirconLogLevel.Warning] = true,
	[ZirconLogLevel.Error] = true,
	[ZirconLogLevel.Wtf] = true,
}
local INITIAL_STATE = {
	visible = false,
	autoFocusTextBox = true,
	executionEnabled = false,
	hotkeyEnabled = false,
	canExecuteLocalScripts = false,
	logDetailsPaneEnabled = false,
	showTagsInOutput = true,
	output = {},
	history = {},
	bindingKeys = {},
	filter = {
		Levels = {
			[ZirconLogLevel.Info] = true,
			[ZirconLogLevel.Warning] = true,
			[ZirconLogLevel.Error] = true,
			[ZirconLogLevel.Wtf] = true,
		},
	},
}
local actions = {
	SetConsoleVisible = function(state, _param)
		local visible = _param.visible
		local _object = {}
		for _k, _v in pairs(state) do
			_object[_k] = _v
		end
		_object.visible = visible
		return _object
	end,
	SetConsoleConfiguration = function(state, _param)
		local executionEnabled = _param.executionEnabled
		local hotkeyEnabled = _param.hotkeyEnabled
		local showTagsInOutput = _param.showTagsInOutput
		local logDetailsPaneEnabled = _param.logDetailsPaneEnabled
		local autoFocusTextBox = _param.autoFocusTextBox
		local bindKeys = _param.bindKeys
		local _object = {}
		for _k, _v in pairs(state) do
			_object[_k] = _v
		end
		_object.executionEnabled = executionEnabled
		_object.hotkeyEnabled = hotkeyEnabled
		_object.showTagsInOutput = showTagsInOutput
		_object.logDetailsPaneEnabled = logDetailsPaneEnabled
		_object.autoFocusTextBox = autoFocusTextBox
		_object.bindingKeys = bindKeys
		return _object
	end,
	SetClientExecutionEnabled = function(state, _param)
		local enabled = _param.enabled
		local _object = {}
		for _k, _v in pairs(state) do
			_object[_k] = _v
		end
		_object.canExecuteLocalScripts = enabled
		return _object
	end,
	AddOutput = function(state, _param)
		local message = _param.message
		local _object = {}
		for _k, _v in pairs(state) do
			_object[_k] = _v
		end
		local _left = "output"
		local _array = {}
		local _length = #_array
		local _array_1 = state.output
		local _Length = #_array_1
		table.move(_array_1, 1, _Length, _length + 1, _array)
		_length += _Length
		_array[_length + 1] = message
		_object[_left] = _array
		return _object
	end,
	AddHistory = function(state, _param)
		local message = _param.message
		local _object = {}
		for _k, _v in pairs(state) do
			_object[_k] = _v
		end
		local _left = "history"
		local _array = {}
		local _length = #_array
		local _array_1 = state.history
		local _Length = #_array_1
		table.move(_array_1, 1, _Length, _length + 1, _array)
		_length += _Length
		_array[_length + 1] = message
		_object[_left] = _array
		return _object
	end,
	SetFilter = function(state, _param)
		local filter = _param.filter
		local _object = {}
		for _k, _v in pairs(state) do
			_object[_k] = _v
		end
		_object.filter = filter
		return _object
	end,
	UpdateFilter = function(state, options)
		local _object = {}
		for _k, _v in pairs(state) do
			_object[_k] = _v
		end
		local _left = "filter"
		local _object_1 = {}
		for _k, _v in pairs(state.filter) do
			_object_1[_k] = _v
		end
		for _k, _v in pairs(options) do
			_object_1[_k] = _v
		end
		_object[_left] = _object_1
		return _object
	end,
	RemoveFilter = function(state, _param)
		local filter = _param.filter
		local _object = {}
		for _k, _v in pairs(state) do
			_object[_k] = _v
		end
		local _left = "filter"
		local _object_1 = {}
		for _k, _v in pairs(state.filter) do
			_object_1[_k] = _v
		end
		_object_1[filter] = nil
		_object[_left] = _object_1
		return _object
	end,
}
local consoleReducer = createReducer(INITIAL_STATE, actions)
local default = consoleReducer
return {
	DEFAULT_FILTER = DEFAULT_FILTER,
	default = default,
}
]]></string>
                        </Properties>
                      </Item>
                    </Item>
                  </Item>
                  <Item class="Folder" referent="684">
                    <Properties>
                      <string name="Name">UI</string>
                    </Properties>
                    <Item class="ModuleScript" referent="685">
                      <Properties>
                        <string name="Name">DockedConsole</string>
                        <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local Roact = TS.import(script, TS.getModule(script, "@rbxts", "roact").src)
local _flipper = TS.import(script, TS.getModule(script, "@rbxts", "flipper").src)
local SingleMotor = _flipper.SingleMotor
local Spring = _flipper.Spring
local connect = TS.import(script, TS.getModule(script, "@rbxts", "roact-rodux").src).connect
local DEFAULT_FILTER = TS.import(script, script.Parent.Parent, "Store", "_reducers", "ConsoleReducer").DEFAULT_FILTER
local ZirconSyntaxTextBox = TS.import(script, script.Parent.Parent.Parent, "Components", "SyntaxTextBox").default
local _Icon = TS.import(script, script.Parent.Parent.Parent, "Components", "Icon")
local ZirconIcon = _Icon.default
local ZirconIconButton = _Icon.ZirconIconButton
local Remotes = TS.import(script, script.Parent.Parent.Parent.Parent, "Shared", "Remotes").default
local ZirconOutput = TS.import(script, script.Parent.Parent.Parent, "Components", "Output").default
local ThemeContext = TS.import(script, script.Parent.Parent.Parent, "UIKit", "ThemeContext").default
local ZirconLogLevel = TS.import(script, script.Parent.Parent.Parent, "Types").ZirconLogLevel
local Dropdown = TS.import(script, script.Parent.Parent.Parent, "Components", "Dropdown").default
local Workspace = TS.import(script, TS.getModule(script, "@rbxts", "services")).Workspace
local Padding = TS.import(script, script.Parent.Parent.Parent, "Components", "Padding").default
local SearchTextBox = TS.import(script, script.Parent.Parent.Parent, "Components", "SearchTextBox").default
local MultiSelectDropdown = TS.import(script, script.Parent.Parent.Parent, "Components", "MultiSelectDropdown").default
local GetCommandService = TS.import(script, script.Parent.Parent.Parent.Parent, "Services").GetCommandService
local MAX_SIZE = 28 * 10
--[[
	*
	* The console
]]
local ZirconConsoleComponent
do
	ZirconConsoleComponent = Roact.Component:extend("ZirconConsoleComponent")
	function ZirconConsoleComponent:init(props)
		self.state = {
			isVisible = props.isVisible,
			isFullView = false,
			filterVisible = false,
			levelFilter = props.levelFilter,
			historyIndex = 0,
			searchQuery = props.searchQuery,
			source = "",
			sizeY = MAX_SIZE,
			context = not props.executionEnabled and 1 or 0,
		}
		-- Initialization
		self.positionYMotor = SingleMotor.new(0)
		self.sizeYMotor = SingleMotor.new(MAX_SIZE)
		self.filterSettingsSizeY = SingleMotor.new(0)
		self.outputTransparencyMotor = SingleMotor.new(0.1)
		local setPositionY
		local setSizeY
		local setOutputTransparency
		local setFilterSizeY
		-- Bindings
		self.positionY, setPositionY = Roact.createBinding(self.positionYMotor:getValue())
		self.sizeY, setSizeY = Roact.createBinding(self.sizeYMotor:getValue())
		self.filterSizeY, setFilterSizeY = Roact.createBinding(self.filterSettingsSizeY:getValue())
		self.outputTransparency, setOutputTransparency = Roact.createBinding(self.outputTransparencyMotor:getValue())
		-- Binding updates
		self.filterSettingsSizeY:onStep(function(value)
			return setFilterSizeY(value)
		end)
		self.positionYMotor:onStep(function(value)
			return setPositionY(value)
		end)
		self.sizeYMotor:onStep(function(value)
			return setSizeY(value)
		end)
		self.outputTransparencyMotor:onStep(function(value)
			return setOutputTransparency(value)
		end)
		local DispatchToServer = Remotes.Client:WaitFor("ZrSiO4/DispatchToServer"):expect()
		self.dispatch = DispatchToServer
	end
	function ZirconConsoleComponent:didMount()
	end
	function ZirconConsoleComponent:didUpdate(prevProps, prevState)
		if prevProps.isVisible ~= self.props.isVisible or (prevState.isFullView ~= self.state.isFullView or prevState.filterVisible ~= self.state.filterVisible) then
			local fullScreenViewSize = Workspace.CurrentCamera.ViewportSize
			local size = self.state.isFullView and fullScreenViewSize.Y - 40 or MAX_SIZE
			self.positionYMotor:setGoal(Spring.new(self.props.isVisible and size + 40 or 0))
			self.outputTransparencyMotor:setGoal(Spring.new(self.state.isFullView and 0.35 or 0.1))
			self.filterSettingsSizeY:setGoal(Spring.new((self.state.isFullView or self.state.filterVisible) and 40 or 0))
			self.sizeYMotor:setGoal(Spring.new(size))
			self:setState({
				isVisible = self.props.isVisible,
			})
		end
		if prevProps.clientExecutionEnabled ~= self.props.clientExecutionEnabled then
			if not self.props.executionEnabled then
				self:setState({
					context = 1,
				})
			end
		end
		if prevProps.executionEnabled ~= self.props.executionEnabled then
			self:setState({
				context = self.props.executionEnabled and 0 or 1,
			})
		end
		if prevProps.levelFilter ~= self.props.levelFilter then
			self:setState({
				levelFilter = self.props.levelFilter,
			})
		end
		if prevProps.searchQuery ~= self.props.searchQuery then
			self:setState({
				searchQuery = self.props.searchQuery,
			})
		end
	end
	function ZirconConsoleComponent:renderNonExecutionBox()
		return Roact.createElement(ThemeContext.Consumer, {
			render = function(theme)
				return Roact.createElement("Frame", {
					BorderColor3 = theme.SecondaryBackgroundColor3,
					BackgroundColor3 = theme.PrimaryBackgroundColor3,
					Size = UDim2.new(1, 0, 0, 28),
					Position = UDim2.new(0, 0, 1, -28),
				}, {
					Roact.createElement("UIListLayout", {
						FillDirection = "Horizontal",
						HorizontalAlignment = "Right",
					}),
					Roact.createElement(ZirconIconButton, {
						Icon = self.state.isFullView and "UpDoubleArrow" or "DownDoubleArrow",
						Size = UDim2.new(0, 32, 0, 28),
						OnClick = function()
							self:setState({
								isFullView = not self.state.isFullView,
							})
						end,
					}),
				})
			end,
		})
	end
	function ZirconConsoleComponent:renderExecutionBox()
		local showDropdown = self.props.executionEnabled
		return Roact.createElement(ThemeContext.Consumer, {
			render = function(theme)
				local _attributes = {
					BorderColor3 = theme.PrimaryBackgroundColor3,
					BackgroundColor3 = theme.SecondaryBackgroundColor3,
					Size = UDim2.new(1, 0, 0, 28),
					Position = UDim2.new(0, 0, 1, -28),
				}
				local _children = {
					Roact.createElement("UIListLayout", {
						FillDirection = "Horizontal",
					}),
				}
				local _length = #_children
				local _child = showDropdown and (Roact.createElement(Dropdown, {
					Disabled = not self.props.clientExecutionEnabled or not self.props.executionEnabled,
					Items = { {
						Id = 0,
						Text = "Server",
						Icon = "ContextServer",
					}, {
						Id = 1,
						Text = "Client",
						Icon = "ContextClient",
					} },
					SelectedItemId = self.state.context,
					Position = UDim2.new(1, -150, 0, 0),
					Size = UDim2.new(0, 100, 1, 0),
					ItemSelected = function(value)
						return self:setState({
							context = value.Id,
						})
					end,
				}))
				if _child then
					if _child.elements ~= nil or _child.props ~= nil and _child.component ~= nil then
						_children[_length + 1] = _child
					else
						for _k, _v in ipairs(_child) do
							_children[_length + _k] = _v
						end
					end
				end
				_length = #_children
				_children[_length + 1] = Roact.createElement(ZirconIcon, {
					Size = UDim2.new(0, 16, 0, 28),
					Icon = "RightArrow",
				})
				_children[_length + 2] = Roact.createElement(ZirconSyntaxTextBox, {
					RefocusOnSubmit = self.props.autoFocus,
					AutoFocus = self.props.autoFocus,
					CancelKeyCodes = self.props.toggleKeys,
					OnCancel = self.props.close,
					PlaceholderText = "Enter script to execute",
					Size = UDim2.new(1, -16 - 32 - (showDropdown and 100 or 0), 1, 0),
					Position = UDim2.new(0, 16, 0, 0),
					Focused = self.state.isVisible,
					Source = self.state.source,
					OnControlKey = function(key, io)
						if key == Enum.KeyCode.E then
							if not self.props.clientExecutionEnabled or not self.props.executionEnabled then
								return nil
							end
							if self.state.context == 1 then
								self:setState({
									context = 0,
								})
							else
								self:setState({
									context = 1,
								})
							end
						end
					end,
					OnEnterSubmit = function(input)
						self.props.addMessage(input)
						local _exp = self.state.context
						repeat
							if _exp == 0 then
								self.dispatch:SendToServer(input)
								break
							end
							if _exp == 1 then
								GetCommandService("ClientDispatchService").ExecuteScript(input)
								break
							end
						until true
						self:setState({
							historyIndex = 0,
							source = "",
						})
					end,
					OnHistoryTraversal = function(direction)
						local index = self.state.historyIndex
						local history = self.props.history
						local text = ""
						if direction == -1 then
							if index <= 0 then
								index = #history - 1
							else
								index = index - 1
							end
							text = history[index + 1]
						elseif direction == 1 then
							if index >= #history - 1 then
								index = 0
							else
								index = index + 1
							end
							text = history[index + 1]
						end
						self:setState({
							historyIndex = index,
							source = text,
						})
					end,
				})
				_children[_length + 3] = Roact.createElement(ZirconIconButton, {
					Icon = self.state.isFullView and "UpDoubleArrow" or "DownDoubleArrow",
					Size = UDim2.new(0, 32, 0, 28),
					OnClick = function()
						self:setState({
							isFullView = not self.state.isFullView,
						})
					end,
				})
				return Roact.createElement("Frame", _attributes, _children)
			end,
		})
	end
	function ZirconConsoleComponent:render()
		local canExec = self.props.clientExecutionEnabled or self.props.executionEnabled
		local sizePositionBinding = Roact.joinBindings({
			Size = self.sizeY,
			Position = self.positionY,
		})
		return Roact.createElement(ThemeContext.Consumer, {
			render = function(theme)
				local _attributes = {
					ZIndexBehavior = "Sibling",
					DisplayOrder = 10000,
					ResetOnSpawn = false,
					IgnoreGuiInset = true,
				}
				local _children = {}
				local _length = #_children
				local _attributes_1 = {
					Active = self.state.isFullView,
					BorderSizePixel = 0,
				}
				local _condition = theme.Dock.Transparency
				if _condition == nil then
					_condition = self.outputTransparency
				end
				_attributes_1.BackgroundTransparency = _condition
				_attributes_1.BackgroundColor3 = theme.PrimaryBackgroundColor3
				_attributes_1.ClipsDescendants = true
				_attributes_1.Size = sizePositionBinding:map(function(v)
					return UDim2.new(1, 0, 0, v.Size)
				end)
				_attributes_1.Position = sizePositionBinding:map(function(v)
					return UDim2.new(0, 0, 0, -v.Size + v.Position)
				end)
				local _children_1 = {
					Roact.createElement("Frame", {
						Position = self.filterSizeY:map(function(v)
							return UDim2.new(0, 0, 0, self.state.isFullView and v or 0)
						end),
						Size = self.filterSizeY:map(function(v)
							return UDim2.new(1, 0, 1, self.state.isFullView and v - 30 or -30)
						end),
						BackgroundTransparency = 1,
					}, {
						Roact.createElement(ZirconOutput),
					}),
					Roact.createElement("Frame", {
						Size = UDim2.new(0, 100, 0, 30),
						Position = UDim2.new(1, -100, 0, 5),
						BackgroundTransparency = 1,
					}, {
						Roact.createElement("UIListLayout", {
							FillDirection = "Horizontal",
							HorizontalAlignment = "Right",
							Padding = UDim.new(0, 5),
						}),
						Roact.createElement(Padding, {
							Padding = {
								Right = 25,
							},
						}),
						Roact.createElement(ZirconIconButton, {
							Icon = "Funnel",
							ZIndex = 2,
							Floating = true,
							Size = UDim2.new(0, 30, 0, 30),
							OnClick = function()
								return self:setState({
									filterVisible = true,
								})
							end,
						}),
					}),
				}
				local _length_1 = #_children_1
				local _attributes_2 = {
					Size = self.filterSizeY:map(function(v)
						return UDim2.new(1, 0, 0, v)
					end),
					ClipsDescendants = true,
					BackgroundColor3 = theme.PrimaryBackgroundColor3,
					BorderSizePixel = 1,
					BorderColor3 = theme.SecondaryBackgroundColor3,
				}
				local _children_2 = {
					LeftContent = Roact.createElement("Frame", {
						BackgroundTransparency = 1,
						Size = UDim2.new(0.5, 0, 1, 0),
					}, {
						Roact.createElement("UIListLayout", {
							FillDirection = "Horizontal",
							HorizontalAlignment = "Left",
							Padding = UDim.new(0, 10),
						}),
						Roact.createElement(Padding, {
							Padding = {
								Horizontal = 20,
								Vertical = 5,
							},
						}),
						Roact.createElement(Dropdown, {
							Items = { {
								SelectedText = "(Context)",
								Text = "All Contexts",
								Id = nil,
								TextColor3 = Color3.fromRGB(150, 150, 150),
							}, {
								Text = "Server",
								Id = 0,
								Icon = "ContextServer",
							}, {
								Text = "Client",
								Icon = "ContextClient",
								Id = 1,
							} },
							SelectedItemId = nil,
							ItemSelected = function(item)
								self.props.updateContextFilter(item.Id)
							end,
						}),
						Roact.createElement(MultiSelectDropdown, {
							Label = "Level Filter",
							SelectedItemIds = self.state.levelFilter,
							Items = { {
								Id = ZirconLogLevel.Verbose,
								Text = "Verbose",
							}, {
								Id = ZirconLogLevel.Debug,
								Text = "Debugging",
							}, {
								Id = ZirconLogLevel.Info,
								Text = "Information",
							}, {
								Id = ZirconLogLevel.Warning,
								Text = "Warnings",
							}, {
								Id = ZirconLogLevel.Error,
								Text = "Errors",
							}, {
								Id = ZirconLogLevel.Wtf,
								Text = "Fatal Errors",
							} },
							ItemsSelected = function(items)
								return self.props.updateLevelFilter(items)
							end,
						}),
					}),
				}
				local _length_2 = #_children_2
				local _attributes_3 = {
					Size = UDim2.new(0.5, 0, 1, 0),
					Position = UDim2.new(0.5, 0, 0, 0),
					BackgroundTransparency = 1,
				}
				local _children_3 = {
					Roact.createElement("UIListLayout", {
						FillDirection = "Horizontal",
						HorizontalAlignment = "Right",
						Padding = UDim.new(0, 10),
					}),
					Roact.createElement(Padding, {
						Padding = {
							Horizontal = 25,
							Vertical = 5,
						},
					}),
					Roact.createElement(SearchTextBox, {
						Value = self.state.searchQuery,
						TextChanged = function(value)
							self.props.updateSearchFilter(value)
						end,
					}),
				}
				local _length_3 = #_children_3
				local _child = not self.state.isFullView and (Roact.createElement(ZirconIconButton, {
					Icon = "UpDoubleArrow",
					Floating = true,
					Size = UDim2.new(0, 30, 0, 30),
					OnClick = function()
						return self:setState({
							filterVisible = false,
						})
					end,
				}))
				if _child then
					if _child.elements ~= nil or _child.props ~= nil and _child.component ~= nil then
						_children_3[_length_3 + 1] = _child
					else
						for _k, _v in ipairs(_child) do
							_children_3[_length_3 + _k] = _v
						end
					end
				end
				_children_2.RightContent = Roact.createElement("Frame", _attributes_3, _children_3)
				_children_1.FilterLayout = Roact.createElement("Frame", _attributes_2, _children_2)
				local _child_1 = canExec and self:renderExecutionBox()
				if _child_1 then
					if _child_1.elements ~= nil or _child_1.props ~= nil and _child_1.component ~= nil then
						_children_1[_length_1 + 1] = _child_1
					else
						for _k, _v in ipairs(_child_1) do
							_children_1[_length_1 + _k] = _v
						end
					end
				end
				_length_1 = #_children_1
				local _child_2 = not canExec and self:renderNonExecutionBox()
				if _child_2 then
					if _child_2.elements ~= nil or _child_2.props ~= nil and _child_2.component ~= nil then
						_children_1[_length_1 + 1] = _child_2
					else
						for _k, _v in ipairs(_child_2) do
							_children_1[_length_1 + _k] = _v
						end
					end
				end
				_children.ZirconViewport = Roact.createElement("Frame", _attributes_1, _children_1)
				return Roact.createElement("ScreenGui", _attributes, _children)
			end,
		})
	end
end
local mapStateToProps = function(state)
	local _object = {
		isVisible = state.visible,
		autoFocus = state.autoFocusTextBox,
		toggleKeys = state.bindingKeys,
	}
	local _left = "levelFilter"
	local _condition = state.filter.Levels
	if _condition == nil then
		_condition = DEFAULT_FILTER
	end
	_object[_left] = _condition
	_object.executionEnabled = state.executionEnabled
	local _left_1 = "searchQuery"
	local _condition_1 = state.filter.SearchQuery
	if _condition_1 == nil then
		_condition_1 = ""
	end
	_object[_left_1] = _condition_1
	_object.clientExecutionEnabled = state.canExecuteLocalScripts
	_object.history = state.history
	return _object
end
local mapPropsToDispatch = function(dispatch)
	return {
		addMessage = function(source)
			dispatch({
				type = "AddHistory",
				message = source,
			})
			dispatch({
				type = "AddOutput",
				message = {
					type = "zr:execute",
					source = source,
				},
			})
		end,
		updateSearchFilter = function(query)
			dispatch({
				type = "UpdateFilter",
				SearchQuery = query,
			})
		end,
		updateContextFilter = function(Context)
			if Context ~= nil then
				dispatch({
					type = "UpdateFilter",
					Context = Context,
				})
			else
				dispatch({
					type = "RemoveFilter",
					filter = "Context",
				})
			end
		end,
		updateLevelFilter = function(Levels)
			if Levels ~= nil then
				dispatch({
					type = "UpdateFilter",
					Levels = Levels,
				})
			else
				dispatch({
					type = "RemoveFilter",
					filter = "Levels",
				})
			end
		end,
		close = function()
			return dispatch({
				type = "SetConsoleVisible",
				visible = false,
			})
		end,
	}
end
--[[
	*
	* A docked console
]]
local ZirconDockedConsole = connect(mapStateToProps, mapPropsToDispatch)(ZirconConsoleComponent)
local default = ZirconDockedConsole
return {
	default = default,
}
]]></string>
                      </Properties>
                    </Item>
                    <Item class="ModuleScript" referent="686">
                      <Properties>
                        <string name="Name">TopbarMenu</string>
                        <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local Roact = TS.import(script, TS.getModule(script, "@rbxts", "roact").src)
local connect = TS.import(script, TS.getModule(script, "@rbxts", "roact-rodux").src).connect
local ThemeContext = TS.import(script, script.Parent.Parent.Parent, "UIKit", "ThemeContext").default
local DEFAULT_FILTER = TS.import(script, script.Parent.Parent, "Store", "_reducers", "ConsoleReducer").DEFAULT_FILTER
local ZirconTopbarMenuComponent
do
	ZirconTopbarMenuComponent = Roact.Component:extend("ZirconTopbarMenuComponent")
	function ZirconTopbarMenuComponent:init(props)
		self.state = {
			isVisible = props.isVisible,
			levelFilter = props.levelFilter,
		}
	end
	function ZirconTopbarMenuComponent:didUpdate(prevProps)
		if prevProps.isVisible ~= self.props.isVisible then
			self:setState({
				isVisible = self.props.isVisible,
			})
		elseif prevProps.levelFilter ~= self.props.levelFilter then
			self:setState({
				levelFilter = self.props.levelFilter,
			})
		end
	end
	function ZirconTopbarMenuComponent:render()
		return Roact.createElement(ThemeContext.Consumer, {
			render = function(theme)
				return Roact.createElement("ScreenGui", {
					DisplayOrder = 10001,
					ResetOnSpawn = false,
					IgnoreGuiInset = true,
				}, {
					Roact.createElement("Frame", {
						Visible = self.state.isVisible,
						Size = UDim2.new(1, 0, 0, 40),
						BackgroundColor3 = theme.PrimaryBackgroundColor3,
						BorderSizePixel = 0,
						Position = self.state.isVisible and UDim2.new(0, 0, 0, 0) or UDim2.new(0, 0, 0, -40),
					}, {
						Roact.createElement("UIPadding", {
							PaddingLeft = UDim.new(0, 60),
						}),
						Roact.createElement("UIListLayout", {
							VerticalAlignment = "Center",
							FillDirection = "Horizontal",
							Padding = UDim.new(0, 10),
						}),
						Roact.createElement("Frame", {
							Size = UDim2.new(0, 32, 0, 32),
							BackgroundTransparency = 1,
						}, {
							Roact.createElement("UIListLayout", {
								VerticalAlignment = "Center",
								HorizontalAlignment = "Center",
							}),
						}),
					}),
				})
			end,
		})
	end
end
local mapStateToProps = function(state)
	local _object = {
		isVisible = state.visible,
	}
	local _left = "levelFilter"
	local _condition = state.filter.Levels
	if _condition == nil then
		_condition = DEFAULT_FILTER
	end
	_object[_left] = _condition
	return _object
end
local mapPropsToDispatch = function(dispatch)
	return {
		updateContextFilter = function(Context)
			if Context ~= nil then
				dispatch({
					type = "UpdateFilter",
					Context = Context,
				})
			else
				dispatch({
					type = "RemoveFilter",
					filter = "Context",
				})
			end
		end,
		updateLevelFilter = function(Levels)
			if Levels ~= nil then
				dispatch({
					type = "UpdateFilter",
					Levels = Levels,
				})
			else
				dispatch({
					type = "RemoveFilter",
					filter = "Levels",
				})
			end
		end,
	}
end
--[[
	*
	* A docked console
]]
local ZirconTopBar = connect(mapStateToProps, mapPropsToDispatch)(ZirconTopbarMenuComponent)
local default = ZirconTopBar
return {
	default = default,
}
]]></string>
                      </Properties>
                    </Item>
                  </Item>
                </Item>
                <Item class="Folder" referent="687">
                  <Properties>
                    <string name="Name">Components</string>
                  </Properties>
                  <Item class="ModuleScript" referent="688">
                    <Properties>
                      <string name="Name">Dropdown</string>
                      <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local Maid = TS.import(script, TS.getModule(script, "@rbxts", "maid").Maid)
local Roact = TS.import(script, TS.getModule(script, "@rbxts", "roact").src)
local Players = game:GetService("Players")
local ThemeContext = TS.import(script, script.Parent.Parent, "UIKit", "ThemeContext").default
local ZirconIcon = TS.import(script, script.Parent, "Icon").default
local Padding = TS.import(script, script.Parent, "Padding").default
local ScrollView = TS.import(script, script.Parent, "ScrollView").default
local Dropdown
do
	Dropdown = Roact.Component:extend("Dropdown")
	function Dropdown:init(props)
		self.dropdownRef = Roact.createRef()
		self.maid = Maid.new()
		self.state = {
			selectedItemIndex = props.SelectedItemIndex ~= nil and props.SelectedItemIndex or 0,
			active = false,
		}
		if props.SelectedItemId ~= nil then
			local _items = props.Items
			local _arg0 = function(f)
				return f.Id == props.SelectedItemId
			end
			-- ▼ ReadonlyArray.findIndex ▼
			local _result = -1
			for _i, _v in ipairs(_items) do
				if _arg0(_v, _i - 1, _items) == true then
					_result = _i - 1
					break
				end
			end
			-- ▲ ReadonlyArray.findIndex ▲
			local selectedItemIndex = _result
			if selectedItemIndex ~= -1 then
				self:setState({
					selectedItemIndex = selectedItemIndex,
				})
			end
		end
		self.portalPosition, self.setPortalPosition = Roact.createBinding(UDim2.new())
		self.portalSizeX, self.setPortalSizeX = Roact.createBinding(0)
	end
	function Dropdown:setPortalPositionRelativeTo(frame)
		local _binding = frame
		local AbsolutePosition = _binding.AbsolutePosition
		local AbsoluteSize = _binding.AbsoluteSize
		self.setPortalPosition(UDim2.new(0, AbsolutePosition.X, 0, AbsolutePosition.Y + AbsoluteSize.Y))
		self.setPortalSizeX(AbsoluteSize.X)
	end
	function Dropdown:didUpdate(prevProps)
		if prevProps.SelectedItemId ~= self.props.SelectedItemId then
			local _items = self.props.Items
			local _arg0 = function(f)
				return f.Id == self.props.SelectedItemId
			end
			-- ▼ ReadonlyArray.findIndex ▼
			local _result = -1
			for _i, _v in ipairs(_items) do
				if _arg0(_v, _i - 1, _items) == true then
					_result = _i - 1
					break
				end
			end
			-- ▲ ReadonlyArray.findIndex ▲
			local selectedItemIndex = _result
			if selectedItemIndex ~= -1 then
				self:setState({
					selectedItemIndex = selectedItemIndex,
				})
			end
		end
	end
	function Dropdown:didMount()
		local frame = self.dropdownRef:getValue()
		if frame then
			self.maid:GiveTask(frame:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
				self:setPortalPositionRelativeTo(frame)
			end))
			self.maid:GiveTask(frame:GetPropertyChangedSignal("AbsolutePosition"):Connect(function()
				self:setPortalPositionRelativeTo(frame)
			end))
			self:setPortalPositionRelativeTo(frame)
		end
	end
	function Dropdown:willUnmount()
		self.maid:DoCleaning()
	end
	function Dropdown:renderDropdownItems()
		local _binding = self.state
		local selectedItemIndex = _binding.selectedItemIndex
		local _items = self.props.Items
		local _arg0 = function(item, idx)
			return Roact.createElement(ThemeContext.Consumer, {
				render = function(theme)
					local _attributes = {
						Size = UDim2.new(1, 0, 0, 30),
						BackgroundColor3 = selectedItemIndex == idx and theme.PrimarySelectColor3 or theme.SecondaryBackgroundColor3,
						BorderSizePixel = 0,
					}
					local _children = {}
					local _length = #_children
					local _attributes_1 = {
						Size = UDim2.new(1, 0, 1, 0),
						BackgroundTransparency = 1,
					}
					local _children_1 = {
						Roact.createElement(Padding, {
							Padding = {
								Right = 20,
								Horizontal = 5,
							},
						}),
					}
					local _length_1 = #_children_1
					local _child = item.Icon and Roact.createElement(ZirconIcon, {
						Icon = item.Icon,
						Position = UDim2.new(0, 0, 0.5, -8),
					})
					if _child then
						if _child.elements ~= nil or _child.props ~= nil and _child.component ~= nil then
							_children_1[_length_1 + 1] = _child
						else
							for _k, _v in ipairs(_child) do
								_children_1[_length_1 + _k] = _v
							end
						end
					end
					_length_1 = #_children_1
					_children_1[_length_1 + 1] = Roact.createElement("TextButton", {
						Font = theme.Font,
						TextXAlignment = "Left",
						TextSize = 15,
						BackgroundTransparency = 1,
						Size = UDim2.new(1, 0, 1, 0),
						Position = item.Icon and UDim2.new(0, 20, 0, 0) or UDim2.new(),
						TextColor3 = theme.PrimaryTextColor3,
						Text = item.Text,
						[Roact.Event.MouseButton1Click] = function()
							self:setState({
								selectedItemIndex = idx,
								active = false,
							})
							if self.props.ItemSelected ~= nil then
								self.props.ItemSelected(item)
							end
						end,
					})
					_children[_length + 1] = Roact.createElement("Frame", _attributes_1, _children_1)
					return Roact.createElement("Frame", _attributes, _children)
				end,
			})
		end
		-- ▼ ReadonlyArray.map ▼
		local _newValue = table.create(#_items)
		for _k, _v in ipairs(_items) do
			_newValue[_k] = _arg0(_v, _k - 1, _items)
		end
		-- ▲ ReadonlyArray.map ▲
		return _newValue
	end
	function Dropdown:renderDropdown()
		local _binding = self.state
		local active = _binding.active
		if active == false then
			return Roact.createFragment()
		end
		local activeSizeY = math.min(#self.props.Items * 30, 30 * 4)
		local portal = (Roact.createElement(ThemeContext.Consumer, {
			render = function(theme)
				local _attributes = {
					BackgroundColor3 = theme.PrimaryBackgroundColor3,
					BorderColor3 = theme.SecondaryBackgroundColor3,
					Position = self.portalPosition,
					Size = self.portalSizeX:map(function(x)
						return UDim2.new(0, x, 0, activeSizeY)
					end),
					[Roact.Event.MouseLeave] = function()
						return self:setState({
							active = false,
						})
					end,
				}
				local _children = {}
				local _length = #_children
				local _children_1 = {}
				local _length_1 = #_children_1
				for _k, _v in ipairs(self:renderDropdownItems()) do
					_children_1[_length_1 + _k] = _v
				end
				_children[_length + 1] = Roact.createElement(ScrollView, {}, _children_1)
				return Roact.createFragment({
					DropdownPortal = Roact.createElement("Frame", _attributes, _children),
				})
			end,
		}))
		return Roact.createElement(Roact.Portal, {
			target = Players.LocalPlayer:FindFirstChildOfClass("PlayerGui"),
		}, {
			HostedDropdownPortal = Roact.createElement("ScreenGui", {
				DisplayOrder = 10500,
			}, {
				portal,
			}),
		})
	end
	function Dropdown:render()
		local _binding = self.props
		local Items = _binding.Items
		local Disabled = _binding.Disabled
		local Size = _binding.Size
		if Size == nil then
			Size = UDim2.new(0, 150, 0, 30)
		end
		local Position = _binding.Position
		local _binding_1 = self.state
		local selectedItemIndex = _binding_1.selectedItemIndex
		local item = Items[selectedItemIndex + 1]
		local _arg1 = "Invalid Item Index " .. tostring(selectedItemIndex)
		assert(item, _arg1)
		return Roact.createElement(ThemeContext.Consumer, {
			render = function(theme)
				local _attributes = {
					BackgroundColor3 = theme.SecondaryBackgroundColor3,
					BorderColor3 = theme.PrimaryBackgroundColor3,
					Size = Size,
					Position = Position,
					[Roact.Ref] = self.dropdownRef,
				}
				local _children = {}
				local _length = #_children
				local _attributes_1 = {
					Size = UDim2.new(1, -25, 1, 0),
					BackgroundTransparency = 1,
				}
				local _children_1 = {
					Roact.createElement(Padding, {
						Padding = {
							Horizontal = 10,
						},
					}),
				}
				local _length_1 = #_children_1
				local _child = item.Icon and Roact.createElement(ZirconIcon, {
					Icon = item.Icon,
					Position = UDim2.new(0, 0, 0.5, -8),
				})
				if _child then
					if _child.elements ~= nil or _child.props ~= nil and _child.component ~= nil then
						_children_1[_length_1 + 1] = _child
					else
						for _k, _v in ipairs(_child) do
							_children_1[_length_1 + _k] = _v
						end
					end
				end
				_length_1 = #_children_1
				local _attributes_2 = {
					Size = UDim2.new(1, 0, 1, 0),
					Position = item.Icon and UDim2.new(0, 20, 0, 0) or UDim2.new(),
					BackgroundTransparency = 1,
					Font = theme.Font,
					TextSize = 15,
					TextXAlignment = "Left",
					TextColor3 = Disabled and theme.PrimaryDisabledColor3 or (item.TextColor3 and item.TextColor3 or theme.PrimaryTextColor3),
				}
				local _condition = item.SelectedText
				if _condition == nil then
					_condition = item.Text
				end
				_attributes_2.Text = _condition
				_attributes_2[Roact.Event.MouseButton1Click] = function()
					return not Disabled and self:setState({
						active = not self.state.active,
					})
				end
				_children_1[_length_1 + 1] = Roact.createElement("TextButton", _attributes_2)
				_children.Content = Roact.createElement("Frame", _attributes_1, _children_1)
				_children[_length + 1] = Roact.createElement("ImageLabel", {
					Image = "rbxassetid://2657038128",
					ImageColor3 = Disabled and theme.PrimaryDisabledColor3 or theme.PrimaryTextColor3,
					Position = UDim2.new(1, -25, 0, 5),
					BackgroundTransparency = 1,
					Rotation = self.state.active and 0 or 180,
					Size = UDim2.new(0, 20, 0, 20),
				})
				_children[_length + 2] = self:renderDropdown()
				return Roact.createElement("Frame", _attributes, _children)
			end,
		})
	end
end
return {
	default = Dropdown,
}
]]></string>
                    </Properties>
                  </Item>
                  <Item class="ModuleScript" referent="689">
                    <Properties>
                      <string name="Name">Icon</string>
                      <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local Roact = TS.import(script, TS.getModule(script, "@rbxts", "roact").src)
local ThemeContext = TS.import(script, script.Parent.Parent, "UIKit", "ThemeContext").default
local function icon(x, y)
	local _arg0 = {
		Offset = Vector2.new(-16 + 16 * x, -16 + 16 * y),
	}
	return _arg0
end
local function tintedIcon(x, y, defaultTint)
	local _arg0 = {
		Offset = Vector2.new(-16 + 16 * x, -16 + 16 * y),
	}
	return _arg0
end
local _object = {}
local _left = "DownArrow"
local _arg0 = {
	Offset = Vector2.new(0, 0),
}
_object[_left] = _arg0
local _left_1 = "UpArrow"
local _arg0_1 = {
	Offset = Vector2.new(16, 0),
}
_object[_left_1] = _arg0_1
local _left_2 = "RightArrow"
local _arg0_2 = {
	Offset = Vector2.new(16 * 2, 0),
}
_object[_left_2] = _arg0_2
local _left_3 = "LeftArrow"
local _arg0_3 = {
	Offset = Vector2.new(16 * 3, 0),
}
_object[_left_3] = _arg0_3
local _left_4 = "Close"
local _arg0_4 = {
	Offset = Vector2.new(16 * 4, 0),
}
_object[_left_4] = _arg0_4
local _left_5 = "MaximizeDown"
local _arg0_5 = {
	Offset = Vector2.new(16 * 5, 0),
}
_object[_left_5] = _arg0_5
local _left_6 = "MaximizeUp"
local _arg0_6 = {
	Offset = Vector2.new(16 * 6, 0),
}
_object[_left_6] = _arg0_6
local _left_7 = "Minimize"
local _arg0_7 = {
	Offset = Vector2.new(16 * 7, 0),
}
_object[_left_7] = _arg0_7
local _left_8 = "Zirconium"
local _arg0_8 = {
	Offset = Vector2.new(16 * 8, 0),
}
_object[_left_8] = _arg0_8
local _left_9 = "ActionExecute"
local _arg0_9 = {
	Offset = Vector2.new(0, 16 * 2),
}
_object[_left_9] = _arg0_9
local _left_10 = "ContextClient"
local _arg0_10 = {
	Offset = Vector2.new(0, 16 * 3),
}
_object[_left_10] = _arg0_10
local _left_11 = "ContextServer"
local _arg0_11 = {
	Offset = Vector2.new(16, 16 * 3),
}
_object[_left_11] = _arg0_11
local _left_12 = "ActionContextClient"
local _arg0_12 = {
	Offset = Vector2.new(16 * 2, 16 * 3),
}
_object[_left_12] = _arg0_12
local _left_13 = "ActionContextServer"
local _arg0_13 = {
	Offset = Vector2.new(16 * 3, 16 * 3),
}
_object[_left_13] = _arg0_13
local _left_14 = "ActionTrash"
local _arg0_14 = {
	Offset = Vector2.new(16 * 2, 16 * 2),
}
_object[_left_14] = _arg0_14
local _left_15 = "ActionAdd"
local _arg0_15 = {
	Offset = Vector2.new(16 * 3, 16 * 2),
}
_object[_left_15] = _arg0_15
local _left_16 = "ActionElipsisMenu"
local _arg0_16 = {
	Offset = Vector2.new(16, 16 * 2),
}
_object[_left_16] = _arg0_16
local _left_17 = "SplitPanels"
local _arg0_17 = {
	Offset = Vector2.new(16 * 4, 16 * 2),
}
_object[_left_17] = _arg0_17
local _left_18 = "Checkmark"
local _arg0_18 = {
	Offset = Vector2.new(16 * 5, 16 * 2),
}
_object[_left_18] = _arg0_18
_object.TypeClass = tintedIcon(1, 2, Color3.fromRGB(255, 165, 0))
_object.TypeMember = tintedIcon(2, 2, Color3.fromRGB(0, 148, 255))
_object.TypeFunction = tintedIcon(3, 2, Color3.fromRGB(233, 0, 255))
_object.TypeProperty = tintedIcon(4, 2, Color3.fromRGB(216, 216, 216))
_object.TypeKeyword = tintedIcon(5, 2, Color3.fromRGB(216, 216, 216))
_object.Folder = icon(3, 5)
_object.FloppyDisk = icon(4, 5)
_object.Infinity = icon(1, 5)
_object.Sun = icon(2, 5)
_object.RightDoubleArrow = icon(5, 5)
_object.LeftDoubleArrow = icon(6, 5)
_object.UpDoubleArrow = icon(7, 5)
_object.DownDoubleArrow = icon(8, 5)
_object.Gear = icon(9, 5)
_object.Paper = icon(1, 6)
_object.Funnel = icon(8, 3)
_object.ListClear = icon(9, 3)
_object.CheckmarkHeavy = icon(1, 9)
_object.CrossHeavy = icon(2, 9)
_object.Square = icon(3, 9)
_object.Diamond = icon(4, 9)
_object.Circle = icon(5, 9)
_object.OuterSquare = icon(6, 9)
local IconsV2 = _object
local ZirconIcon
do
	ZirconIcon = Roact.PureComponent:extend("ZirconIcon")
	function ZirconIcon:init(props)
	end
	function ZirconIcon:render()
		local icon = IconsV2[self.props.Icon]
		if self.props.Size then
			return Roact.createElement(ThemeContext.Consumer, {
				render = function(theme)
					return Roact.createElement("ImageButton", {
						Image = "",
						BackgroundTransparency = 1,
						BackgroundColor3 = theme.PrimaryBackgroundColor3,
						BorderColor3 = theme.SecondaryBackgroundColor3,
						Size = self.props.Size,
						ZIndex = self.props.ZIndex,
						Position = self.props.Position,
					}, {
						Roact.createElement("UIListLayout", {
							VerticalAlignment = "Center",
							HorizontalAlignment = "Center",
						}),
						Roact.createElement("ImageLabel", {
							Size = UDim2.new(0, 16, 0, 16),
							BackgroundTransparency = 1,
							Image = theme.IconAssetUri,
							ImageColor3 = theme.IconColor3,
							ImageRectOffset = icon.Offset,
							ZIndex = self.props.ZIndex,
							ImageRectSize = Vector2.new(16, 16),
						}),
					})
				end,
			})
		else
			return Roact.createElement(ThemeContext.Consumer, {
				render = function(theme)
					return Roact.createElement("ImageLabel", {
						Size = UDim2.new(0, 16, 0, 16),
						BackgroundTransparency = 1,
						Image = theme.IconAssetUri,
						ImageColor3 = theme.IconColor3,
						ImageRectOffset = icon.Offset,
						Position = self.props.Position,
						ZIndex = self.props.ZIndex,
						ImageRectSize = Vector2.new(16, 16),
					})
				end,
			})
		end
	end
end
local function ZirconIconButton(_param)
	local Icon = _param.Icon
	local OnClick = _param.OnClick
	local Position = _param.Position
	local Size = _param.Size
	local Floating = _param.Floating
	local ZIndex = _param.ZIndex
	return Roact.createElement(ThemeContext.Consumer, {
		render = function(theme)
			local _attributes = {
				Image = "",
				ZIndex = ZIndex,
				Position = Position,
				[Roact.Event.MouseButton1Down] = OnClick,
				BackgroundTransparency = Floating and 0 or 1,
				BackgroundColor3 = theme.PrimaryBackgroundColor3,
				BorderColor3 = theme.SecondaryBackgroundColor3,
			}
			local _condition = Size
			if _condition == nil then
				_condition = UDim2.new(0, 20, 0, 20)
			end
			_attributes.Size = _condition
			return Roact.createElement("ImageButton", _attributes, {
				Roact.createElement("UIListLayout", {
					VerticalAlignment = "Center",
					HorizontalAlignment = "Center",
				}),
				Roact.createElement(ZirconIcon, {
					Icon = Icon,
					ZIndex = ZIndex,
				}),
			})
		end,
	})
end
return {
	ZirconIconButton = ZirconIconButton,
	default = ZirconIcon,
}
]]></string>
                    </Properties>
                  </Item>
                  <Item class="ModuleScript" referent="690">
                    <Properties>
                      <string name="Name">MultiSelectDropdown</string>
                      <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local Maid = TS.import(script, TS.getModule(script, "@rbxts", "maid").Maid)
local Roact = TS.import(script, TS.getModule(script, "@rbxts", "roact").src)
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local ThemeContext = TS.import(script, script.Parent.Parent, "UIKit", "ThemeContext").default
local _Collections = TS.import(script, script.Parent.Parent.Parent, "Shared", "Collections")
local setsEqual = _Collections.setsEqual
local toArray = _Collections.toArray
local ZirconIcon = TS.import(script, script.Parent, "Icon").default
local Padding = TS.import(script, script.Parent, "Padding").default
local ScrollView = TS.import(script, script.Parent, "ScrollView").default
local MultiSelectDropdown
do
	MultiSelectDropdown = Roact.Component:extend("MultiSelectDropdown")
	function MultiSelectDropdown:init(props)
		self.dropdownRef = Roact.createRef()
		self.maid = Maid.new()
		local _object = {
			selectedItems = {},
		}
		local _left = "selectedItemIds"
		local _condition = props.SelectedItemIds
		if _condition == nil then
			_condition = {}
		end
		_object[_left] = _condition
		_object.active = false
		self.state = _object
		self:updateSelectedIndexes()
		self.portalPosition, self.setPortalPosition = Roact.createBinding(UDim2.new())
		self.portalSizeX, self.setPortalSizeX = Roact.createBinding(0)
	end
	function MultiSelectDropdown:getItemSet()
		local _binding = self
		local _binding_1 = _binding.props
		local Items = _binding_1.Items
		local _binding_2 = self.state
		local selectedItemIds = _binding_2.selectedItemIds
		local _arg0 = function(accumulator, current)
			local _id = current.Id
			if selectedItemIds[_id] ~= nil then
				-- ▼ Set.add ▼
				accumulator[current] = true
				-- ▲ Set.add ▲
			end
			return accumulator
		end
		-- ▼ ReadonlyArray.reduce ▼
		local _result = {}
		local _callback = _arg0
		for _i = 1, #Items do
			_result = _callback(_result, Items[_i], _i - 1, Items)
		end
		-- ▲ ReadonlyArray.reduce ▲
		local selectedItemSet = _result
		return selectedItemSet
	end
	function MultiSelectDropdown:updateSelectedIndexes()
		self:setState({
			selectedItems = self:getItemSet(),
		})
	end
	function MultiSelectDropdown:setPortalPositionRelativeTo(frame)
		local _binding = frame
		local AbsolutePosition = _binding.AbsolutePosition
		local AbsoluteSize = _binding.AbsoluteSize
		self.setPortalPosition(UDim2.new(0, AbsolutePosition.X, 0, AbsolutePosition.Y + AbsoluteSize.Y))
		self.setPortalSizeX(AbsoluteSize.X)
	end
	function MultiSelectDropdown:didUpdate(prevProps)
		if not setsEqual(prevProps.SelectedItemIds, self.props.SelectedItemIds) then
			local _fn = self
			local _object = {
				selectedItems = self:getItemSet(),
			}
			local _left = "selectedItemIds"
			local _condition = self.props.SelectedItemIds
			if _condition == nil then
				_condition = {}
			end
			_object[_left] = _condition
			_fn:setState(_object)
		end
	end
	function MultiSelectDropdown:didMount()
		local frame = self.dropdownRef:getValue()
		if frame then
			self.maid:GiveTask(frame:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
				self:setPortalPositionRelativeTo(frame)
			end))
			self.maid:GiveTask(frame:GetPropertyChangedSignal("AbsolutePosition"):Connect(function()
				self:setPortalPositionRelativeTo(frame)
			end))
			self:setPortalPositionRelativeTo(frame)
		end
		-- Hack to re-render it
		self:setState({
			selectedItems = self:getItemSet(),
		})
	end
	function MultiSelectDropdown:willUnmount()
		self.maid:DoCleaning()
	end
	function MultiSelectDropdown:renderDropdownItems()
		local _binding = self.state
		local selectedItems = _binding.selectedItems
		local selectedItemIds = _binding.selectedItemIds
		local _items = self.props.Items
		local _arg0 = function(item, idx)
			return Roact.createElement(ThemeContext.Consumer, {
				render = function(theme)
					local _attributes = {
						Size = UDim2.new(1, 0, 0, 30),
					}
					local _id = item.Id
					_attributes.BackgroundColor3 = selectedItemIds[_id] ~= nil and theme.PrimarySelectColor3 or theme.SecondaryBackgroundColor3
					_attributes.BorderSizePixel = 1
					_attributes.BorderColor3 = theme.PrimaryBackgroundColor3
					local _children = {}
					local _length = #_children
					local _id_1 = item.Id
					local _condition = selectedItemIds[_id_1] ~= nil
					if _condition then
						_condition = (Roact.createElement(ZirconIcon, {
							Icon = "CheckmarkHeavy",
							Position = UDim2.new(0, 0, 0.5, -8),
						}))
					end
					local _attributes_1 = {
						Size = UDim2.new(1, 0, 1, 0),
						BackgroundTransparency = 1,
					}
					local _children_1 = {
						Roact.createElement(Padding, {
							Padding = {
								Right = 20,
								Horizontal = 5,
							},
						}),
					}
					local _length_1 = #_children_1
					if _condition then
						if _condition.elements ~= nil or _condition.props ~= nil and _condition.component ~= nil then
							_children_1[_length_1 + 1] = _condition
						else
							for _k, _v in ipairs(_condition) do
								_children_1[_length_1 + _k] = _v
							end
						end
					end
					_length_1 = #_children_1
					_children_1[_length_1 + 1] = Roact.createElement("TextButton", {
						Font = theme.Font,
						TextXAlignment = "Left",
						TextSize = 15,
						BackgroundTransparency = 1,
						Size = UDim2.new(1, 0, 1, 0),
						Position = UDim2.new(0, 20, 0, 0),
						TextColor3 = theme.PrimaryTextColor3,
						Text = item.Text,
						[Roact.Event.MouseButton1Click] = function()
							local selectedSet = {}
							local newSet = {}
							for existingItem in pairs(self.state.selectedItems) do
								local _id_2 = existingItem.Id
								-- ▼ Set.add ▼
								newSet[_id_2] = true
								-- ▲ Set.add ▲
								-- ▼ Set.add ▼
								selectedSet[existingItem] = true
								-- ▲ Set.add ▲
							end
							local _id_2 = item.Id
							if newSet[_id_2] ~= nil then
								local _id_3 = item.Id
								-- ▼ Set.delete ▼
								newSet[_id_3] = nil
								-- ▲ Set.delete ▲
								-- ▼ Set.delete ▼
								selectedSet[item] = nil
								-- ▲ Set.delete ▲
							else
								local _id_3 = item.Id
								-- ▼ Set.add ▼
								newSet[_id_3] = true
								-- ▲ Set.add ▲
								-- ▼ Set.add ▼
								selectedSet[item] = true
								-- ▲ Set.add ▲
							end
							if UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
								-- ▼ Set.clear ▼
								table.clear(newSet)
								-- ▲ Set.clear ▲
								-- ▼ Set.clear ▼
								table.clear(selectedSet)
								-- ▲ Set.clear ▲
								local _id_3 = item.Id
								-- ▼ Set.add ▼
								newSet[_id_3] = true
								-- ▲ Set.add ▲
								-- ▼ Set.add ▼
								selectedSet[item] = true
								-- ▲ Set.add ▲
							end
							self:setState({
								selectedItems = selectedSet,
								selectedItemIds = newSet,
							})
							if self.props.ItemsSelected ~= nil then
								self.props.ItemsSelected(newSet)
							end
						end,
					})
					_children[_length + 1] = Roact.createElement("Frame", _attributes_1, _children_1)
					return Roact.createElement("Frame", _attributes, _children)
				end,
			})
		end
		-- ▼ ReadonlyArray.map ▼
		local _newValue = table.create(#_items)
		for _k, _v in ipairs(_items) do
			_newValue[_k] = _arg0(_v, _k - 1, _items)
		end
		-- ▲ ReadonlyArray.map ▲
		return _newValue
	end
	function MultiSelectDropdown:renderDropdown()
		local _binding = self.state
		local active = _binding.active
		if active == false then
			return Roact.createFragment()
		end
		local activeSizeY = math.min(#self.props.Items * 30, 30 * 4)
		local portal = (Roact.createElement(ThemeContext.Consumer, {
			render = function(theme)
				local _attributes = {
					BackgroundColor3 = theme.PrimaryBackgroundColor3,
					BorderColor3 = theme.SecondaryBackgroundColor3,
					Position = self.portalPosition,
					Size = self.portalSizeX:map(function(x)
						return UDim2.new(0, x, 0, activeSizeY)
					end),
					[Roact.Event.MouseLeave] = function()
						return self:setState({
							active = false,
						})
					end,
				}
				local _children = {}
				local _length = #_children
				local _children_1 = {}
				local _length_1 = #_children_1
				for _k, _v in ipairs(self:renderDropdownItems()) do
					_children_1[_length_1 + _k] = _v
				end
				_children[_length + 1] = Roact.createElement(ScrollView, {}, _children_1)
				return Roact.createFragment({
					DropdownPortal = Roact.createElement("Frame", _attributes, _children),
				})
			end,
		}))
		return Roact.createElement(Roact.Portal, {
			target = Players.LocalPlayer:FindFirstChildOfClass("PlayerGui"),
		}, {
			HostedDropdownPortal = Roact.createElement("ScreenGui", {
				DisplayOrder = 10500,
			}, {
				portal,
			}),
		})
	end
	function MultiSelectDropdown:render()
		local _binding = self.props
		local Items = _binding.Items
		local Disabled = _binding.Disabled
		local Size = _binding.Size
		if Size == nil then
			Size = UDim2.new(0, 150, 0, 30)
		end
		local _binding_1 = self.state
		local selectedItems = _binding_1.selectedItems
		local values = toArray(selectedItems)
		local _arg0 = function(f)
			local _condition = f.SelectedText
			if _condition == nil then
				_condition = f.Text
			end
			return _condition
		end
		-- ▼ ReadonlyArray.map ▼
		local _newValue = table.create(#values)
		for _k, _v in ipairs(values) do
			_newValue[_k] = _arg0(_v, _k - 1, values)
		end
		-- ▲ ReadonlyArray.map ▲
		local fullString = table.concat(_newValue, ", ")
		return Roact.createElement(ThemeContext.Consumer, {
			render = function(theme)
				local _attributes = {
					BackgroundColor3 = theme.SecondaryBackgroundColor3,
					BorderColor3 = theme.PrimaryBackgroundColor3,
					Size = Size,
					[Roact.Ref] = self.dropdownRef,
				}
				local _children = {}
				local _length = #_children
				local _attributes_1 = {
					Size = UDim2.new(1, -25, 1, 0),
					BackgroundTransparency = 1,
				}
				local _children_1 = {
					Roact.createElement(Padding, {
						Padding = {
							Horizontal = 10,
						},
					}),
				}
				local _length_1 = #_children_1
				local _attributes_2 = {
					Size = UDim2.new(1, 0, 1, 0),
					BackgroundTransparency = 1,
					Font = theme.Font,
					TextSize = 15,
					TextXAlignment = "Left",
					TextColor3 = Disabled and theme.PrimaryDisabledColor3 or theme.PrimaryTextColor3,
				}
				local _label = self.props.Label
				local _arg0_1 = #values
				_attributes_2.Text = string.format(_label, _arg0_1)
				_attributes_2[Roact.Event.MouseButton1Click] = function()
					return not Disabled and self:setState({
						active = not self.state.active,
					})
				end
				_children_1[_length_1 + 1] = Roact.createElement("TextButton", _attributes_2)
				_children.Content = Roact.createElement("Frame", _attributes_1, _children_1)
				_children[_length + 1] = Roact.createElement("ImageLabel", {
					Image = "rbxassetid://2657038128",
					ImageColor3 = Disabled and theme.PrimaryDisabledColor3 or Color3.fromRGB(255, 255, 255),
					Position = UDim2.new(1, -25, 0, 5),
					BackgroundTransparency = 1,
					Rotation = self.state.active and 0 or 180,
					Size = UDim2.new(0, 20, 0, 20),
				})
				_children[_length + 2] = self:renderDropdown()
				return Roact.createElement("Frame", _attributes, _children)
			end,
		})
	end
end
return {
	default = MultiSelectDropdown,
}
]]></string>
                    </Properties>
                  </Item>
                  <Item class="ModuleScript" referent="691">
                    <Properties>
                      <string name="Name">Output</string>
                      <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local Roact = TS.import(script, TS.getModule(script, "@rbxts", "roact").src)
local connect = TS.import(script, TS.getModule(script, "@rbxts", "roact-rodux").src).connect
local _Types = TS.import(script, script.Parent.Parent, "Types")
local isContextMessage = _Types.isContextMessage
local getMessageText = _Types.getMessageText
local getLogLevel = _Types.getLogLevel
local ThemeContext = TS.import(script, script.Parent.Parent, "UIKit", "ThemeContext").default
local ScrollView = TS.import(script, script.Parent, "ScrollView").default
local ZrRichTextHighlighter = TS.import(script, TS.getModule(script, "@rbxts", "zirconium").out.Ast).ZrRichTextHighlighter
local ZirconIcon = TS.import(script, script.Parent, "Icon").default
local ZirconOutputMessage = TS.import(script, script.Parent, "OutputMessage").default
local last = TS.import(script, script.Parent.Parent.Parent, "Shared", "Collections").last
local StringUtils = TS.import(script, TS.getModule(script, "@rbxts", "string-utils"))
local function OutputPlain(props)
	local message = props.Message
	if message.type == "zr:execute" then
		return Roact.createElement(ThemeContext.Consumer, {
			render = function(theme)
				return Roact.createElement("Frame", {
					Size = UDim2.new(1, 0, 0, 25),
					BackgroundTransparency = 1,
				}, {
					Roact.createElement(ZirconIcon, {
						Icon = "RightArrow",
						Position = UDim2.new(0, -3, 0, 6),
					}),
					Roact.createElement("TextLabel", {
						RichText = true,
						Position = UDim2.new(0, 20, 0, 0),
						Size = UDim2.new(1, -20, 1, 0),
						Text = ZrRichTextHighlighter.new(message.source):parse(),
						BackgroundTransparency = 1,
						Font = theme.ConsoleFont,
						TextColor3 = theme.PrimaryTextColor3,
						TextXAlignment = "Left",
						TextSize = 20,
					}),
				})
			end,
		})
	else
		return Roact.createElement(ThemeContext.Consumer, {
			render = function(theme)
				return Roact.createElement("TextLabel", {
					RichText = true,
					Size = UDim2.new(1, 0, 0, 25),
					Text = message.message,
					BackgroundTransparency = 1,
					Font = theme.ConsoleFont,
					TextColor3 = theme.PrimaryTextColor3,
					TextXAlignment = "Left",
					TextSize = 20,
				})
			end,
		})
	end
end
local OutputComponent
do
	OutputComponent = Roact.Component:extend("OutputComponent")
	function OutputComponent:init(props)
		self.state = {
			output = props.output,
		}
	end
	function OutputComponent:didUpdate(prevProps)
		if prevProps.output ~= self.props.output then
			self:setState({
				output = self.props.output,
			})
		end
	end
	function OutputComponent:render()
		return Roact.createElement(ThemeContext.Consumer, {
			render = function()
				local _output = self.state.output
				local _arg0 = function(output)
					if output.type == "zr:error" or (output.type == "luau:error" or (output.type == "zirclog:error" or (output.type == "zirclog:message" or (output.type == "zr:output" or output.type == "slog:output")))) then
						return Roact.createElement(ZirconOutputMessage, {
							ShowTags = self.props.showTags,
							Message = output,
						})
					else
						return Roact.createElement(OutputPlain, {
							Message = output,
						})
					end
				end
				-- ▼ ReadonlyArray.map ▼
				local _newValue = table.create(#_output)
				for _k, _v in ipairs(_output) do
					_newValue[_k] = _arg0(_v, _k - 1, _output)
				end
				-- ▲ ReadonlyArray.map ▲
				local _attributes = {
					AutoScrollToEnd = true,
					Padding = {
						PaddingHorizontal = 5,
						PaddingVertical = 5,
					},
					ItemPadding = UDim.new(0, 5),
				}
				local _children = {}
				local _length = #_children
				for _k, _v in ipairs(_newValue) do
					_children[_length + _k] = _v
				end
				return Roact.createElement(ScrollView, _attributes, _children)
			end,
		})
	end
end
local mapStateToProps = function(state)
	local _binding = state
	local filter = _binding.filter
	local output = state.output
	if filter then
		if filter.Context ~= nil then
			local _output = output
			local _arg0 = function(message)
				return isContextMessage(message) and message.context == filter.Context
			end
			-- ▼ ReadonlyArray.filter ▼
			local _newValue = {}
			local _length = 0
			for _k, _v in ipairs(_output) do
				if _arg0(_v, _k - 1, _output) == true then
					_length += 1
					_newValue[_length] = _v
				end
			end
			-- ▲ ReadonlyArray.filter ▲
			output = _newValue
		end
		local _searchQuery = filter.SearchQuery
		if type(_searchQuery) == "string" then
			local _binding_1 = filter
			local SearchQuery = _binding_1.SearchQuery
			local _output = output
			local _arg0 = function(message)
				return StringUtils.includes(getMessageText(message), SearchQuery)
			end
			-- ▼ ReadonlyArray.filter ▼
			local _newValue = {}
			local _length = 0
			for _k, _v in ipairs(_output) do
				if _arg0(_v, _k - 1, _output) == true then
					_length += 1
					_newValue[_length] = _v
				end
			end
			-- ▲ ReadonlyArray.filter ▲
			output = _newValue
		end
		local _output = output
		local _arg0 = function(message)
			local _levels = filter.Levels
			local _arg0_1 = getLogLevel(message)
			return _levels[_arg0_1] ~= nil
		end
		-- ▼ ReadonlyArray.filter ▼
		local _newValue = {}
		local _length = 0
		for _k, _v in ipairs(_output) do
			if _arg0(_v, _k - 1, _output) == true then
				_length += 1
				_newValue[_length] = _v
			end
		end
		-- ▲ ReadonlyArray.filter ▲
		output = _newValue
	end
	local _object = {}
	local _left = "output"
	local _result = filter
	if _result ~= nil then
		_result = _result.Tail
	end
	_object[_left] = _result and last(output, 25) or last(output, 100)
	_object.showTags = state.showTagsInOutput
	return _object
end
--[[
	*
	* A docked console
]]
local ZirconOutput = connect(mapStateToProps)(OutputComponent)
local default = ZirconOutput
return {
	default = default,
}
]]></string>
                    </Properties>
                  </Item>
                  <Item class="ModuleScript" referent="692">
                    <Properties>
                      <string name="Name">OutputMessage</string>
                      <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
-- eslint-disable roblox-ts/lua-truthiness
local Roact = TS.import(script, TS.getModule(script, "@rbxts", "roact").src)
local LocalizationService = game:GetService("LocalizationService")
local ZirconLogLevel = TS.import(script, script.Parent.Parent, "Types").ZirconLogLevel
local _ThemeContext = TS.import(script, script.Parent.Parent, "UIKit", "ThemeContext")
local ThemeContext = _ThemeContext.default
local getRichTextColor3 = _ThemeContext.getRichTextColor3
local getThemeRichTextColor = _ThemeContext.getThemeRichTextColor
local italicize = _ThemeContext.italicize
local ZrRichTextHighlighter = TS.import(script, TS.getModule(script, "@rbxts", "zirconium").out.Ast).ZrRichTextHighlighter
local _Format = TS.import(script, script.Parent.Parent, "Format")
local formatParse = _Format.formatParse
local formatTokens = _Format.formatTokens
local StructuredLogMessage = TS.import(script, script.Parent, "StructuredLogMessage").StructuredLogMessage
local function sanitise(input)
	return (string.gsub(input, "[<>]", {
		[">"] = "&gt;",
		["<"] = "&lt;",
	}))
end
local function OutputMessage(props)
	local output = props.Message
	if output.type == "slog:output" then
		return Roact.createElement(StructuredLogMessage, {
			LogEvent = output.data,
			Context = output.context,
			DetailedView = true,
		})
	end
	return Roact.createElement(ThemeContext.Consumer, {
		render = function(theme)
			local messages = {}
			if output.type == "zr:output" then
				local _binding = output
				local message = _binding.message
				local _arg0 = getRichTextColor3(theme, "Grey", "[" .. (DateTime.fromUnixTimestamp(message.time):FormatLocalTime("LT", LocalizationService.SystemLocaleId) .. "]"))
				-- ▼ Array.push ▼
				messages[#messages + 1] = _arg0
				-- ▲ Array.push ▲
				local _message = message.message
				-- ▼ Array.push ▼
				messages[#messages + 1] = _message
				-- ▲ Array.push ▲
			elseif output.type == "zirclog:message" then
				local _binding = output
				local message = _binding.message
				local _arg0 = getRichTextColor3(theme, "Grey", "[" .. (DateTime.fromUnixTimestamp(message.time):FormatLocalTime("LT", LocalizationService.SystemLocaleId) .. "]"))
				-- ▼ Array.push ▼
				messages[#messages + 1] = _arg0
				-- ▲ Array.push ▲
				local _result = message.data.Variables
				if _result ~= nil then
					_result = #_result
				end
				local _condition = _result
				if _condition == nil then
					_condition = 0
				end
				local text = _condition > 0 and formatTokens(formatParse(message.message), message.data.Variables) or message.message
				if message.level == ZirconLogLevel.Info then
					local _arg0_1 = getRichTextColor3(theme, "Cyan", "INFO ")
					-- ▼ Array.push ▼
					messages[#messages + 1] = _arg0_1
					-- ▲ Array.push ▲
					local _arg0_2 = getRichTextColor3(theme, "White", text)
					-- ▼ Array.push ▼
					messages[#messages + 1] = _arg0_2
					-- ▲ Array.push ▲
				elseif message.level == ZirconLogLevel.Debug then
					local _arg0_1 = getRichTextColor3(theme, "Green", "DEBUG")
					-- ▼ Array.push ▼
					messages[#messages + 1] = _arg0_1
					-- ▲ Array.push ▲
					local _arg0_2 = getRichTextColor3(theme, "White", text)
					-- ▼ Array.push ▼
					messages[#messages + 1] = _arg0_2
					-- ▲ Array.push ▲
				elseif message.level == ZirconLogLevel.Warning then
					local _arg0_1 = getRichTextColor3(theme, "Yellow", "WARN ")
					-- ▼ Array.push ▼
					messages[#messages + 1] = _arg0_1
					-- ▲ Array.push ▲
					local _arg0_2 = getRichTextColor3(theme, "White", text)
					-- ▼ Array.push ▼
					messages[#messages + 1] = _arg0_2
					-- ▲ Array.push ▲
				end
				local _value = props.ShowTags and message.tag
				if _value ~= "" and _value then
					-- const toAppend = padEnd(message.tag ?? "", 20, " ");
					local _arg0_1 = "- " .. italicize(getRichTextColor3(theme, "Grey", message.tag))
					-- ▼ Array.push ▼
					messages[#messages + 1] = _arg0_1
					-- ▲ Array.push ▲
				end
			end
			return Roact.createElement("Frame", {
				Size = UDim2.new(1, 0, 0, 25),
				BackgroundTransparency = 0.5,
				BackgroundColor3 = theme.PrimaryBackgroundColor3,
				BorderSizePixel = 0,
			}, {
				Roact.createElement("Frame", {
					Size = UDim2.new(0, 5, 1, 0),
					BackgroundColor3 = props.Message.context == 0 and theme.ServerContextColor or theme.ClientContextColor,
					BorderSizePixel = 0,
				}),
				Roact.createElement("TextLabel", {
					RichText = true,
					Position = UDim2.new(0, 10, 0, 0),
					Size = UDim2.new(1, -15, 0, 25),
					Text = table.concat(messages, " "),
					BackgroundTransparency = 1,
					Font = theme.ConsoleFont,
					TextColor3 = theme.PrimaryTextColor3,
					TextXAlignment = "Left",
					TextSize = 20,
				}),
			})
		end,
	})
end
local function OutputError(props)
	local output = props.Message
	return Roact.createElement(ThemeContext.Consumer, {
		render = function(theme)
			local messages = {}
			if output.type == "zr:error" then
				local _binding = output
				local zrError = _binding.error
				local _arg0 = getRichTextColor3(theme, "Grey", "[" .. (DateTime.fromUnixTimestamp(zrError.time):FormatLocalTime("LT", LocalizationService.SystemLocaleId) .. "]"))
				-- ▼ Array.push ▼
				messages[#messages + 1] = _arg0
				-- ▲ Array.push ▲
				if zrError.script ~= nil then
					local inner = getRichTextColor3(theme, "Cyan", zrError.script)
					if zrError.source ~= nil then
						inner ..= ":" .. (getRichTextColor3(theme, "Yellow", tostring(zrError.source[1])) .. (":" .. getRichTextColor3(theme, "Yellow", tostring(zrError.source[2]))))
					end
					local _arg0_1 = getRichTextColor3(theme, "White", inner .. " -")
					-- ▼ Array.push ▼
					messages[#messages + 1] = _arg0_1
					-- ▲ Array.push ▲
				end
				local _arg0_1 = getRichTextColor3(theme, "Red", "error")
				-- ▼ Array.push ▼
				messages[#messages + 1] = _arg0_1
				-- ▲ Array.push ▲
				local _code = zrError.code
				local _arg0_2 = getRichTextColor3(theme, "Grey", "ZR" .. (string.format("%.4d", _code) .. ":"))
				-- ▼ Array.push ▼
				messages[#messages + 1] = _arg0_2
				-- ▲ Array.push ▲
				local _arg0_3 = getRichTextColor3(theme, "White", zrError.message)
				-- ▼ Array.push ▼
				messages[#messages + 1] = _arg0_3
				-- ▲ Array.push ▲
			elseif output.type == "zirclog:error" then
				local _binding = output
				local zrError = _binding.error
				local _arg0 = getRichTextColor3(theme, "Grey", "[" .. (DateTime.fromUnixTimestamp(zrError.time):FormatLocalTime("LT", LocalizationService.SystemLocaleId) .. "]"))
				-- ▼ Array.push ▼
				messages[#messages + 1] = _arg0
				-- ▲ Array.push ▲
				if zrError.level == ZirconLogLevel.Error then
					local _arg0_1 = getRichTextColor3(theme, "Red", "ERROR")
					-- ▼ Array.push ▼
					messages[#messages + 1] = _arg0_1
					-- ▲ Array.push ▲
					local _arg0_2 = getRichTextColor3(theme, "Yellow", zrError.message)
					-- ▼ Array.push ▼
					messages[#messages + 1] = _arg0_2
					-- ▲ Array.push ▲
				elseif zrError.level == ZirconLogLevel.Wtf then
					local _arg0_1 = getRichTextColor3(theme, "Red", "FAIL ")
					-- ▼ Array.push ▼
					messages[#messages + 1] = _arg0_1
					-- ▲ Array.push ▲
					local _arg0_2 = getRichTextColor3(theme, "Yellow", zrError.message)
					-- ▼ Array.push ▼
					messages[#messages + 1] = _arg0_2
					-- ▲ Array.push ▲
				end
				local _value = props.ShowTags and zrError.tag
				if _value ~= "" and _value then
					-- const toAppend = padEnd(zrError.tag ?? "", 20, " ");
					local _arg0_1 = "- " .. italicize(getRichTextColor3(theme, "Grey", zrError.tag))
					-- ▼ Array.push ▼
					messages[#messages + 1] = _arg0_1
					-- ▲ Array.push ▲
				end
			end
			return Roact.createElement("Frame", {
				Size = UDim2.new(1, 0, 0, 25),
				BackgroundTransparency = 0.5,
				BackgroundColor3 = theme.PrimaryBackgroundColor3,
				BorderSizePixel = 0,
			}, {
				Roact.createElement("Frame", {
					Size = UDim2.new(0, 5, 1, 0),
					BackgroundColor3 = props.Message.context == 0 and theme.ServerContextColor or theme.ClientContextColor,
					BorderSizePixel = 0,
				}),
				Roact.createElement("TextLabel", {
					RichText = true,
					Position = UDim2.new(0, 10, 0, 0),
					Size = UDim2.new(1, -15, 0, 25),
					Text = table.concat(messages, " "),
					BackgroundTransparency = 1,
					Font = theme.ConsoleFont,
					TextColor3 = theme.PrimaryTextColor3,
					TextXAlignment = "Left",
					TextSize = 20,
				}),
			})
		end,
	})
end
local getErrorLine
local function ErrorLine(_param)
	local TokenInfo = _param.TokenInfo
	local Highlight = _param.Highlight
	if Highlight == nil then
		Highlight = true
	end
	return Roact.createElement(ThemeContext.Consumer, {
		render = function(theme)
			return Roact.createElement("Frame", {
				Size = UDim2.new(1, 0, 0, 30),
				Position = UDim2.new(0.1, 0, 0, 0),
				BackgroundTransparency = 1,
			}, {
				Roact.createElement("TextLabel", {
					Text = tostring(TokenInfo.LineAndColumn[1]),
					TextColor3 = theme.PrimaryBackgroundColor3,
					BackgroundColor3 = theme.PrimaryTextColor3,
					Size = UDim2.new(0, 20, 1, 0),
					Position = UDim2.new(0, 20, 0, 0),
					Font = theme.ConsoleFont,
					TextSize = 20,
					TextXAlignment = "Center",
				}),
				Roact.createElement("TextLabel", {
					RichText = true,
					BackgroundTransparency = 1,
					Size = UDim2.new(1, 0, 0, 30),
					Position = UDim2.new(0, 20 + 25, 0, 0),
					Text = Highlight and ZrRichTextHighlighter.new(TokenInfo.Line):parse() or TokenInfo.Line,
					Font = theme.ConsoleFont,
					TextSize = 20,
					TextXAlignment = "Left",
					TextColor3 = theme.PrimaryTextColor3,
				}),
				Roact.createElement("TextLabel", {
					BackgroundTransparency = 1,
					TextXAlignment = "Left",
					RichText = true,
					Font = theme.ConsoleFont,
					TextSize = 20,
					TextColor3 = theme.PrimaryTextColor3,
					Text = getErrorLine(theme, TokenInfo).ErrorLine,
					Size = UDim2.new(1, 0, 0, 30),
					Position = UDim2.new(0, 20 + 25, 0, 0),
				}),
			})
		end,
	})
end
function getErrorLine(theme, _param)
	local Line = _param.Line
	local TokenLinePosition = _param.TokenLinePosition
	local red = getThemeRichTextColor(theme, "Red")
	local resultingString = ""
	local errorArrows = ""
	do
		local i = 1
		local _shouldIncrement = false
		while true do
			if _shouldIncrement then
				i += 1
			else
				_shouldIncrement = true
			end
			if not (i <= #Line) then
				break
			end
			local char = " "
			if i == TokenLinePosition[1] and i == TokenLinePosition[2] then
				resultingString ..= '<font color="' .. red .. '"><u>' .. char .. "</u></font>"
				errorArrows ..= '<font color="' .. red .. '"><u>^</u></font>'
			elseif i == TokenLinePosition[1] then
				resultingString ..= '<font color="' .. red .. '"><u>' .. char
				errorArrows ..= '<font color="' .. red .. '"><u>^'
			elseif i > TokenLinePosition[1] and i < TokenLinePosition[2] then
				resultingString ..= " "
				errorArrows ..= "^"
			elseif i == TokenLinePosition[2] then
				resultingString ..= char .. "</u></font>"
				errorArrows ..= char .. "^</u></font>"
			else
				resultingString ..= char
			end
		end
	end
	return {
		ErrorLine = resultingString,
	}
end
local ZirconOutputMessage
do
	ZirconOutputMessage = Roact.PureComponent:extend("ZirconOutputMessage")
	function ZirconOutputMessage:init()
	end
	function ZirconOutputMessage:render()
		local _binding = self.props
		local Message = _binding.Message
		if Message.type == "zr:error" or Message.type == "zirclog:error" then
			local _binding_1 = Message
			local zrError = _binding_1.error
			if zrError.type == "ZrParserError" or zrError.type == "ZrRuntimeError" then
				if zrError.debug ~= nil then
					return Roact.createFragment({
						Roact.createElement(OutputError, {
							ShowTags = self.props.ShowTags,
							Message = Message,
						}),
						Roact.createElement(ErrorLine, {
							Highlight = true,
							TokenInfo = zrError.debug,
						}),
					})
				end
			end
			return Roact.createElement(OutputError, {
				ShowTags = self.props.ShowTags,
				Message = Message,
			})
		elseif Message.type == "zr:output" or (Message.type == "zirclog:message" or Message.type == "slog:output") then
			return Roact.createElement(OutputMessage, {
				ShowTags = self.props.ShowTags,
				Message = Message,
			})
		end
		return nil
	end
end
return {
	default = ZirconOutputMessage,
}
]]></string>
                    </Properties>
                  </Item>
                  <Item class="ModuleScript" referent="693">
                    <Properties>
                      <string name="Name">Padding</string>
                      <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local function CalculatePaddingUDim2(padding)
	if type(padding) == "number" then
		return UDim2.new(0, padding, 0, padding)
	elseif padding.PaddingHorizontal ~= nil or padding.PaddingVertical ~= nil then
		local _binding = padding
		local PaddingHorizontal = _binding.PaddingHorizontal
		if PaddingHorizontal == nil then
			PaddingHorizontal = 0
		end
		local PaddingVertical = _binding.PaddingVertical
		if PaddingVertical == nil then
			PaddingVertical = 0
		end
		return UDim2.new(0, PaddingHorizontal, 0, PaddingVertical)
	end
	error("Invalid argument to CalculatePadding")
end
local function CalculatePadding(padding)
	if type(padding) == "number" then
		return {
			PaddingBottom = UDim.new(0, padding),
			PaddingLeft = UDim.new(0, padding),
			PaddingRight = UDim.new(0, padding),
			PaddingTop = UDim.new(0, padding),
		}
	elseif padding.PaddingHorizontal ~= nil or padding.PaddingVertical ~= nil then
		local _binding = padding
		local PaddingHorizontal = _binding.PaddingHorizontal
		if PaddingHorizontal == nil then
			PaddingHorizontal = 0
		end
		local PaddingVertical = _binding.PaddingVertical
		if PaddingVertical == nil then
			PaddingVertical = 0
		end
		return {
			PaddingBottom = UDim.new(0, PaddingVertical),
			PaddingLeft = UDim.new(0, PaddingHorizontal),
			PaddingRight = UDim.new(0, PaddingHorizontal),
			PaddingTop = UDim.new(0, PaddingVertical),
		}
	elseif padding.PaddingLeft ~= nil or (padding.PaddingRight ~= nil or (padding.PaddingTop ~= nil or padding.PaddingBottom ~= nil)) then
		local _binding = padding
		local PaddingBottom = _binding.PaddingBottom
		if PaddingBottom == nil then
			PaddingBottom = 0
		end
		local PaddingTop = _binding.PaddingTop
		if PaddingTop == nil then
			PaddingTop = 0
		end
		local PaddingLeft = _binding.PaddingLeft
		if PaddingLeft == nil then
			PaddingLeft = 0
		end
		local PaddingRight = _binding.PaddingRight
		if PaddingRight == nil then
			PaddingRight = 0
		end
		return {
			PaddingBottom = UDim.new(0, PaddingBottom),
			PaddingLeft = UDim.new(0, PaddingLeft),
			PaddingRight = UDim.new(0, PaddingRight),
			PaddingTop = UDim.new(0, PaddingTop),
		}
	end
	return {
		PaddingBottom = UDim.new(0, 0),
		PaddingLeft = UDim.new(0, 0),
		PaddingRight = UDim.new(0, 0),
		PaddingTop = UDim.new(0, 0),
	}
end
local Roact = TS.import(script, TS.getModule(script, "@rbxts", "roact").src)
local function Padding(_param)
	local _binding = _param.Padding
	local Left = _binding.Left
	if Left == nil then
		Left = 0
	end
	local Right = _binding.Right
	if Right == nil then
		Right = 0
	end
	local Top = _binding.Top
	if Top == nil then
		Top = 0
	end
	local Bottom = _binding.Bottom
	if Bottom == nil then
		Bottom = 0
	end
	local Vertical = _binding.Vertical
	if Vertical == nil then
		Vertical = 0
	end
	local Horizontal = _binding.Horizontal
	if Horizontal == nil then
		Horizontal = 0
	end
	return Roact.createElement("UIPadding", {
		PaddingBottom = UDim.new(0, Bottom + Vertical),
		PaddingTop = UDim.new(0, Top + Vertical),
		PaddingRight = UDim.new(0, Right + Horizontal),
		PaddingLeft = UDim.new(0, Left + Horizontal),
	})
end
return {
	CalculatePaddingUDim2 = CalculatePaddingUDim2,
	CalculatePadding = CalculatePadding,
	default = Padding,
}
]]></string>
                    </Properties>
                  </Item>
                  <Item class="ModuleScript" referent="694">
                    <Properties>
                      <string name="Name">ScrollView</string>
                      <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local Maid = TS.import(script, TS.getModule(script, "@rbxts", "maid").Maid)
local Roact = TS.import(script, TS.getModule(script, "@rbxts", "roact").src)
local ThemeContext = TS.import(script, script.Parent.Parent, "UIKit", "ThemeContext").default
local delayAsync = TS.import(script, script.Parent.Parent, "BuiltInConsole", "DelayAsync").default
local ZirconIcon = TS.import(script, script.Parent, "Icon").default
local _Padding = TS.import(script, script.Parent, "Padding")
local CalculatePadding = _Padding.CalculatePadding
local CalculatePaddingUDim2 = _Padding.CalculatePaddingUDim2
local ScrollView
do
	ScrollView = Roact.Component:extend("ScrollView")
	function ScrollView:init(props)
		self.initScrollToBottom = false
		self.invokeUpdate = function()
			local size = self.scrollListLayout.AbsoluteContentSize
			if self.props.ContentSizeChanged ~= nil then
				local canvasSize = self.scrollFrame.AbsoluteSize
				local contentSize = Vector2.new(canvasSize.X - 20, size.Y)
				self.props.ContentSizeChanged(contentSize, self)
			end
		end
		self.canvasPositionUpdated = function()
			local canvasPosition = self.scrollFrame.CanvasPosition
			local _condition = self.props.Padding
			if _condition == nil then
				_condition = {}
			end
			local padding = CalculatePadding(_condition)
			local _result = padding.PaddingBottom
			if _result ~= nil then
				_result = _result.Offset
			end
			local _condition_1 = _result
			if _condition_1 == nil then
				_condition_1 = 0
			end
			local paddingBottomOffset = _condition_1
			local _result_1 = padding.PaddingTop
			if _result_1 ~= nil then
				_result_1 = _result_1.Offset
			end
			local _condition_2 = _result_1
			if _condition_2 == nil then
				_condition_2 = 0
			end
			local paddingTopOffset = _condition_2
			local _absoluteContentSize = self.scrollListLayout.AbsoluteContentSize
			local _vector2 = Vector2.new(0, paddingBottomOffset + paddingTopOffset)
			local size = _absoluteContentSize + _vector2
			self:setState({
				barPos = canvasPosition.Y / (size.Y - self.scrollFrame.AbsoluteSize.Y),
			})
			self.initScrollToBottom = false
			local _ = self.props.CanvasPositionChanged ~= nil and self.props.CanvasPositionChanged(canvasPosition, self)
		end
		self.absoluteContentSizeChanged = function()
			local _binding = self.props
			local AutoScrollToEndThreshold = _binding.AutoScrollToEndThreshold
			if AutoScrollToEndThreshold == nil then
				AutoScrollToEndThreshold = 0.8
			end
			local AutoScrollToEnd = _binding.AutoScrollToEnd
			local _condition = self.props.Padding
			if _condition == nil then
				_condition = {}
			end
			local padding = CalculatePadding(_condition)
			local _result = padding.PaddingBottom
			if _result ~= nil then
				_result = _result.Offset
			end
			local _condition_1 = _result
			if _condition_1 == nil then
				_condition_1 = 0
			end
			local paddingBottomOffset = _condition_1
			local _result_1 = padding.PaddingTop
			if _result_1 ~= nil then
				_result_1 = _result_1.Offset
			end
			local _condition_2 = _result_1
			if _condition_2 == nil then
				_condition_2 = 0
			end
			local paddingTopOffset = _condition_2
			local _absoluteContentSize = self.scrollListLayout.AbsoluteContentSize
			local _vector2 = Vector2.new(0, paddingBottomOffset + paddingTopOffset)
			local size = _absoluteContentSize + _vector2
			self:setState({
				size = size,
			})
			local scale = self.scrollFrame.AbsoluteSize.Y / size.Y
			local canvasPosition = self.scrollFrame.CanvasPosition
			local canvasSize = self.scrollFrame.AbsoluteSize
			local canvasAbsoluteSize = self.scrollListLayout.AbsoluteContentSize
			self:setState({
				barScale = scale,
				barShown = scale < 1,
				barPos = canvasPosition.Y / (size.Y - canvasSize.Y),
			})
			if self.props.ContentSizeChanged ~= nil then
				local contentSize = Vector2.new(canvasSize.X - 20, size.Y)
				self.props.ContentSizeChanged(contentSize, self)
			end
			local calculatedSize = canvasAbsoluteSize.Y - self.scrollFrame.AbsoluteWindowSize.Y + paddingBottomOffset
			if AutoScrollToEnd and (canvasPosition.Y / calculatedSize >= AutoScrollToEndThreshold or self.initScrollToBottom) then
				self:scrollToEnd()
			end
		end
		self.state = {
			size = Vector2.new(),
			barScale = 1,
			barPos = 0,
			barShown = false,
			loaded = false,
		}
		self.maid = Maid.new()
	end
	function ScrollView:didMount()
		local _binding = self.props
		local AutoScrollToEnd = _binding.AutoScrollToEnd
		if AutoScrollToEnd then
			self.initScrollToBottom = true
		end
		if self.scrollFrame == nil then
			warn("Missing ScrollFrame to ScrollView")
			return nil
		end
		if self.scrollListLayout == nil then
			warn("Missing UIListLayout to ScrollView")
			return nil
		end
		local size = self.scrollListLayout.AbsoluteContentSize
		-- Have to wait a frame because of ROBLOX's quirkiness.
		local _exp = delayAsync()
		local _arg0 = function()
			return self.absoluteContentSizeChanged()
		end
		_exp:andThen(_arg0)
		self:setState({
			size = size,
		})
		if self.props.ViewRef then
			self.props.ViewRef(self)
		end
	end
	function ScrollView:willUnmount()
		self.maid:DoCleaning()
	end
	function ScrollView:renderBar()
		if self.state.barShown then
			return Roact.createElement(ThemeContext.Consumer, {
				render = function(theme)
					local scale = self.state.barScale
					local _attributes = {
						BorderSizePixel = 0,
						BackgroundTransparency = 0,
						BackgroundColor3 = theme.SecondaryBackgroundColor3,
						Size = UDim2.new(1, 0, self.state.barScale, 0),
						Position = UDim2.new(0, 0, self.state.barPos * (1 - self.state.barScale), 0),
					}
					local _children = {}
					local _length = #_children
					local _child = scale >= 0.1 and Roact.createElement(ZirconIcon, {
						Icon = "UpArrow",
						Position = UDim2.fromOffset(2, 0),
					})
					if _child then
						if _child.elements ~= nil or _child.props ~= nil and _child.component ~= nil then
							_children[_length + 1] = _child
						else
							for _k, _v in ipairs(_child) do
								_children[_length + _k] = _v
							end
						end
					end
					_length = #_children
					local _child_1 = scale >= 0.1 and Roact.createElement(ZirconIcon, {
						Icon = "DownArrow",
						Position = UDim2.new(0, 2, 1, -16),
					})
					if _child_1 then
						if _child_1.elements ~= nil or _child_1.props ~= nil and _child_1.component ~= nil then
							_children[_length + 1] = _child_1
						else
							for _k, _v in ipairs(_child_1) do
								_children[_length + _k] = _v
							end
						end
					end
					return Roact.createElement("Frame", _attributes, _children)
				end,
			})
		else
			return nil
		end
	end
	function ScrollView:scrollToPositionY(position)
		self.scrollFrame.CanvasPosition = Vector2.new(0, position)
	end
	function ScrollView:scrollToEnd()
		self.scrollFrame.CanvasPosition = Vector2.new(0, self.scrollFrame.CanvasSize.Height.Offset)
		self.initScrollToBottom = true
	end
	function ScrollView:getScrollFrame()
		return self.scrollFrame
	end
	function ScrollView:renderContentHandler()
		local _binding = self.props
		local ItemPadding = _binding.ItemPadding
		local computedPadding
		if typeof(ItemPadding) == "UDim" then
			computedPadding = ItemPadding
		elseif type(ItemPadding) == "number" then
			computedPadding = UDim.new(0, ItemPadding)
		end
		if self.props.GridLayout == true then
			local _binding_1 = (self.props)
			local ItemSize = _binding_1.ItemSize
			local ItemPadding = _binding_1.ItemPadding
			if ItemPadding == nil then
				ItemPadding = 0
			end
			local _attributes = {
				CellSize = ItemSize,
				[Roact.Change.AbsoluteContentSize] = self.absoluteContentSizeChanged,
				CellPadding = CalculatePaddingUDim2(ItemPadding),
				[Roact.Ref] = function(ref)
					self.scrollListLayout = ref
					return self.scrollListLayout
				end,
			}
			local _condition = self.props.SortOrder
			if _condition == nil then
				_condition = Enum.SortOrder.LayoutOrder
			end
			_attributes.SortOrder = _condition
			return Roact.createFragment({
				ScrollViewGrid = Roact.createElement("UIGridLayout", _attributes),
			})
		else
			local _attributes = {
				VerticalAlignment = self.props.ItemAlignment,
				[Roact.Change.AbsoluteContentSize] = self.absoluteContentSizeChanged,
				Padding = computedPadding,
			}
			local _condition = self.props.SortOrder
			if _condition == nil then
				_condition = Enum.SortOrder.LayoutOrder
			end
			_attributes.SortOrder = _condition
			_attributes[Roact.Ref] = function(ref)
				self.scrollListLayout = ref
				return self.scrollListLayout
			end
			return Roact.createFragment({
				ScrollViewList = Roact.createElement("UIListLayout", _attributes),
			})
		end
	end
	function ScrollView:render()
		local _binding = self.props
		local Style = _binding.Style
		if Style == nil then
			Style = "NoButtons"
		end
		local Padding = _binding.Padding
		if Padding == nil then
			Padding = 0
		end
		local padding = CalculatePadding(Padding)
		-- Include the scrollbar in the equation
		local _condition = padding.PaddingRight
		if _condition == nil then
			_condition = UDim.new(0, 0)
		end
		local _uDim = UDim.new(0, 20)
		padding.PaddingRight = _condition + _uDim
		local useButtons = Style == "Buttons"
		return Roact.createElement(ThemeContext.Consumer, {
			render = function(theme)
				local _attributes = {
					Size = self.props.Size or UDim2.new(1, 0, 1, 0),
					BackgroundTransparency = 1,
				}
				local _children = {}
				local _length = #_children
				local _attributes_1 = {
					[Roact.Ref] = function(frame)
						self.scrollFrame = frame
						return self.scrollFrame
					end,
					Size = UDim2.new(1, 0, 1, 0),
					Position = self.props.Position,
					BackgroundTransparency = 1,
					BorderSizePixel = 0,
					CanvasSize = UDim2.new(0, self.state.size.X, 0, self.state.size.Y),
					BottomImage = "",
					MidImage = "",
					ScrollingDirection = "Y",
					TopImage = "",
					[Roact.Change.AbsoluteSize] = self.absoluteContentSizeChanged,
					[Roact.Change.CanvasPosition] = self.canvasPositionUpdated,
					ScrollBarThickness = 20,
				}
				local _children_1 = {
					self:renderContentHandler(),
				}
				local _length_1 = #_children_1
				local _attributes_2 = {}
				for _k, _v in pairs(padding) do
					_attributes_2[_k] = _v
				end
				_children_1.ScrollPadding = Roact.createElement("UIPadding", _attributes_2)
				local _child = self.props[Roact.Children]
				if _child then
					for _k, _v in pairs(_child) do
						if type(_k) == "number" then
							_children_1[_length_1 + _k] = _v
						else
							_children_1[_k] = _v
						end
					end
				end
				_children.ScrollFrameHost = Roact.createElement("ScrollingFrame", _attributes_1, _children_1)
				local _attributes_3 = {
					BackgroundTransparency = 1,
					Size = true and UDim2.new(0, 20, 1, 0) or UDim2.new(0, 0, 1, 0),
					Position = UDim2.new(1, -20, 0, 0),
				}
				local _children_2 = {
					ScrollFrameBarTrackUpButtonContainer = Roact.createElement("Frame", {
						Size = UDim2.new(0, 20, 0, 20),
						BackgroundTransparency = 1,
					}),
				}
				local _length_2 = #_children_2
				local _attributes_4 = {
					Size = useButtons and UDim2.new(1, 0, 1, -40) or UDim2.new(1, 0, 1, 0),
					Position = UDim2.new(0, 0, 0, useButtons and 20 or 0),
					BackgroundTransparency = 0,
					BackgroundColor3 = theme.PrimaryBackgroundColor3,
					BorderColor3 = theme.SecondaryBackgroundColor3,
					BorderSizePixel = 1,
				}
				local _children_3 = {}
				local _length_3 = #_children_3
				local _child_1 = self:renderBar()
				if _child_1 then
					if _child_1.elements ~= nil or _child_1.props ~= nil and _child_1.component ~= nil then
						_children_3[_length_3 + 1] = _child_1
					else
						for _k, _v in ipairs(_child_1) do
							_children_3[_length_3 + _k] = _v
						end
					end
				end
				_children_2.ScrollFrameBarTrack = Roact.createElement("Frame", _attributes_4, _children_3)
				_children_2.ScrollFrameBarTrackDnButtonContainer = Roact.createElement("Frame", {
					Size = UDim2.new(0, 20, 0, 20),
					Position = UDim2.new(0, 0, 1, -20),
					BackgroundTransparency = 1,
				})
				_children.ScrollFrameBar = Roact.createElement("Frame", _attributes_3, _children_2)
				return Roact.createElement("Frame", _attributes, _children)
			end,
		})
	end
end
return {
	default = ScrollView,
}
]]></string>
                    </Properties>
                  </Item>
                  <Item class="ModuleScript" referent="695">
                    <Properties>
                      <string name="Name">SearchTextBox</string>
                      <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local Roact = TS.import(script, TS.getModule(script, "@rbxts", "roact").src)
local ThemeContext = TS.import(script, script.Parent.Parent, "UIKit", "ThemeContext").default
local ZirconIcon = TS.import(script, script.Parent, "Icon").default
local Padding = TS.import(script, script.Parent, "Padding").default
local SearchTextBox
do
	SearchTextBox = Roact.Component:extend("SearchTextBox")
	function SearchTextBox:init(props)
		self.state = {
			Value = props.Value,
		}
	end
	function SearchTextBox:render()
		local _binding = self.props
		local Size = _binding.Size
		if Size == nil then
			Size = UDim2.new(0, 400, 0, 30)
		end
		return Roact.createElement(ThemeContext.Consumer, {
			render = function(theme)
				local _attributes = {
					Size = Size,
					BackgroundTransparency = 1,
				}
				local _children = {
					Roact.createElement("UIListLayout", {
						FillDirection = "Horizontal",
						HorizontalAlignment = "Right",
						Padding = UDim.new(0, 2),
					}),
					Roact.createElement("Frame", {
						Size = UDim2.new(0, 30, 0, 30),
						BackgroundColor3 = theme.PrimaryBackgroundColor3,
						BorderColor3 = theme.SecondaryBackgroundColor3,
					}, {
						Roact.createElement("UIListLayout", {
							VerticalAlignment = "Center",
							HorizontalAlignment = "Center",
						}),
						Roact.createElement(ZirconIcon, {
							Icon = "Funnel",
						}),
					}),
				}
				local _length = #_children
				local _attributes_1 = {
					BackgroundColor3 = theme.SecondaryBackgroundColor3,
					BorderColor3 = theme.SecondaryBackgroundColor3,
					Size = UDim2.new(0, 400, 0, 30),
				}
				local _children_1 = {
					Roact.createElement(Padding, {
						Padding = {
							Horizontal = 5,
							Vertical = 5,
						},
					}),
				}
				local _length_1 = #_children_1
				local _attributes_2 = {
					Size = UDim2.new(1, 0, 1, 0),
					BackgroundTransparency = 1,
					TextColor3 = theme.PrimaryTextColor3,
					TextSize = 18,
					PlaceholderText = "Find",
					PlaceholderColor3 = theme.SecondaryTextColor3,
				}
				local _condition = self.state.Value
				if _condition == nil then
					_condition = ""
				end
				_attributes_2.Text = _condition
				_attributes_2.TextXAlignment = "Left"
				_attributes_2[Roact.Change.Text] = function(_param)
					local Text = _param.Text
					self:setState({
						Value = Text,
					})
					local _result = self.props.TextChanged
					if _result ~= nil then
						_result(Text)
					end
				end
				_attributes_2.Font = theme.ConsoleFont
				_children_1[_length_1 + 1] = Roact.createElement("TextBox", _attributes_2)
				_children[_length + 1] = Roact.createElement("Frame", _attributes_1, _children_1)
				return Roact.createElement("Frame", _attributes, _children)
			end,
		})
	end
end
return {
	default = SearchTextBox,
}
]]></string>
                    </Properties>
                  </Item>
                  <Item class="ModuleScript" referent="696">
                    <Properties>
                      <string name="Name">StructuredLogMessage</string>
                      <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local LogLevel = TS.import(script, TS.getModule(script, "@rbxts", "log").out).LogLevel
local _message_templates = TS.import(script, TS.getModule(script, "@rbxts", "message-templates").out)
local MessageTemplateParser = _message_templates.MessageTemplateParser
local PlainTextMessageTemplateRenderer = _message_templates.PlainTextMessageTemplateRenderer
local Roact = TS.import(script, TS.getModule(script, "@rbxts", "roact").src)
local ZirconStructuredMessageTemplateRenderer = TS.import(script, script.Parent.Parent, "Format", "ZirconStructuredMessageTemplate").ZirconStructuredMessageTemplateRenderer
local _ThemeContext = TS.import(script, script.Parent.Parent, "UIKit", "ThemeContext")
local ThemeContext = _ThemeContext.default
local getRichTextColor3 = _ThemeContext.getRichTextColor3
local italicize = _ThemeContext.italicize
local _flipper = TS.import(script, TS.getModule(script, "@rbxts", "flipper").src)
local Flipper = _flipper
local Instant = _flipper.Instant
local Padding = TS.import(script, script.Parent, "Padding").default
local formatRichText = TS.import(script, script.Parent.Parent, "Format").formatRichText
local connect = TS.import(script, TS.getModule(script, "@rbxts", "roact-rodux").src).connect
local function sanitise(input)
	return (string.gsub(input, "[<>]", {
		[">"] = "&gt;",
		["<"] = "&lt;",
	}))
end
local keys = { "Template", "Level", "Timestamp" }
local function getNonEventProps(logEvent)
	local props = {}
	for key, value in pairs(logEvent) do
		if not (table.find(keys, key) ~= nil) then
			local _arg0 = { key, value }
			-- ▼ Array.push ▼
			props[#props + 1] = _arg0
			-- ▲ Array.push ▲
		end
	end
	return props
end
local StructuredLogMessageComponent
do
	StructuredLogMessageComponent = Roact.Component:extend("StructuredLogMessageComponent")
	function StructuredLogMessageComponent:init(props)
		self.state = {
			viewDetails = false,
			minHeight = 25,
		}
		self.height, self.setHeight = Roact.createBinding(self.state.minHeight)
		self.heightMotor = Flipper.SingleMotor.new(self.height:getValue())
		self.heightMotor:onStep(function(value)
			return self.setHeight(value)
		end)
	end
	function StructuredLogMessageComponent:didMount()
		local logEvent = self.props.LogEvent
		local tokens = MessageTemplateParser.GetTokens(logEvent.Template)
		local plainText = PlainTextMessageTemplateRenderer.new(tokens)
		local result = plainText:Render(logEvent)
		self:setState({
			minHeight = #string.split(result, "\n") * 25,
		})
	end
	function StructuredLogMessageComponent:didUpdate(_, prevState)
		if prevState.minHeight ~= self.state.minHeight then
			self.heightMotor:setGoal(Instant.new(self.state.minHeight))
		end
	end
	function StructuredLogMessageComponent:willUnmount()
		self.heightMotor:destroy()
	end
	function StructuredLogMessageComponent:render()
		local _binding = self.props
		local LogEvent = _binding.LogEvent
		local Context = _binding.Context
		local _binding_1 = LogEvent
		local Template = _binding_1.Template
		local Timestamp = _binding_1.Timestamp
		local Level = _binding_1.Level
		local SourceContext = _binding_1.SourceContext
		local messages = {}
		local tokens = MessageTemplateParser.GetTokens(sanitise(Template))
		local evtProps = getNonEventProps(self.props.LogEvent)
		return Roact.createElement(ThemeContext.Consumer, {
			render = function(theme)
				local highlightRenderer = ZirconStructuredMessageTemplateRenderer.new(tokens, theme)
				local _exp = string.split(highlightRenderer:Render(LogEvent), "\n")
				local _arg0 = function(f, i)
					return i > 0 and string.rep(" ", 6) .. f or f
				end
				-- ▼ ReadonlyArray.map ▼
				local _newValue = table.create(#_exp)
				for _k, _v in ipairs(_exp) do
					_newValue[_k] = _arg0(_v, _k - 1, _exp)
				end
				-- ▲ ReadonlyArray.map ▲
				local text = table.concat(_newValue, "\n")
				if Level == LogLevel.Information then
					local _arg0_1 = getRichTextColor3(theme, "Cyan", "INFO ")
					-- ▼ Array.push ▼
					messages[#messages + 1] = _arg0_1
					-- ▲ Array.push ▲
					local _arg0_2 = getRichTextColor3(theme, "White", text)
					-- ▼ Array.push ▼
					messages[#messages + 1] = _arg0_2
					-- ▲ Array.push ▲
				elseif Level == LogLevel.Debugging then
					local _arg0_1 = getRichTextColor3(theme, "Green", "DEBUG")
					-- ▼ Array.push ▼
					messages[#messages + 1] = _arg0_1
					-- ▲ Array.push ▲
					local _arg0_2 = getRichTextColor3(theme, "White", text)
					-- ▼ Array.push ▼
					messages[#messages + 1] = _arg0_2
					-- ▲ Array.push ▲
				elseif Level == LogLevel.Verbose then
					local _arg0_1 = getRichTextColor3(theme, "Grey", "VERBOSE")
					-- ▼ Array.push ▼
					messages[#messages + 1] = _arg0_1
					-- ▲ Array.push ▲
					local _arg0_2 = getRichTextColor3(theme, "White", text)
					-- ▼ Array.push ▼
					messages[#messages + 1] = _arg0_2
					-- ▲ Array.push ▲
				elseif Level == LogLevel.Warning then
					local _arg0_1 = getRichTextColor3(theme, "Yellow", "WARN ")
					-- ▼ Array.push ▼
					messages[#messages + 1] = _arg0_1
					-- ▲ Array.push ▲
					local _arg0_2 = getRichTextColor3(theme, "White", text)
					-- ▼ Array.push ▼
					messages[#messages + 1] = _arg0_2
					-- ▲ Array.push ▲
				elseif Level == LogLevel.Error then
					local _arg0_1 = getRichTextColor3(theme, "Red", "ERROR ")
					-- ▼ Array.push ▼
					messages[#messages + 1] = _arg0_1
					-- ▲ Array.push ▲
					local _arg0_2 = getRichTextColor3(theme, "Yellow", text)
					-- ▼ Array.push ▼
					messages[#messages + 1] = _arg0_2
					-- ▲ Array.push ▲
				elseif Level == LogLevel.Fatal then
					local _arg0_1 = getRichTextColor3(theme, "Red", "FATAL ")
					-- ▼ Array.push ▼
					messages[#messages + 1] = _arg0_1
					-- ▲ Array.push ▲
					local _arg0_2 = getRichTextColor3(theme, "Red", text)
					-- ▼ Array.push ▼
					messages[#messages + 1] = _arg0_2
					-- ▲ Array.push ▲
				end
				if SourceContext ~= nil and self.props.showTagsInOutput then
					local _arg0_1 = "- " .. italicize(getRichTextColor3(theme, "Grey", tostring(LogEvent.SourceContext)))
					-- ▼ Array.push ▼
					messages[#messages + 1] = _arg0_1
					-- ▲ Array.push ▲
				end
				local _attributes = {
					AutoButtonColor = self.props.logDetailsPaneEnabled,
					Size = self.height:map(function(v)
						return UDim2.new(1, 0, 0, v)
					end),
					BackgroundTransparency = 0.5,
					BackgroundColor3 = theme.SecondaryBackgroundColor3,
					BorderSizePixel = 0,
					[Roact.Event.MouseButton1Click] = function()
						if not self.props.logDetailsPaneEnabled then
							return nil
						end
						if self.state.viewDetails then
							self.heightMotor:setGoal(Flipper.Spring.new(self.state.minHeight))
						else
							self.heightMotor:setGoal(Flipper.Spring.new(self.state.minHeight + #evtProps * 30 + 5))
						end
						self:setState({
							viewDetails = not self.state.viewDetails,
						})
					end,
				}
				local _children = {
					Roact.createElement("Frame", {
						Size = UDim2.new(0, 5, 1, 0),
						BackgroundColor3 = Context == 0 and theme.ServerContextColor or theme.ClientContextColor,
						BorderSizePixel = 0,
					}),
					Roact.createElement("TextLabel", {
						RichText = true,
						Position = UDim2.new(0, 10, 0, 0),
						Size = UDim2.new(1, -15, 0, self.state.minHeight),
						Text = table.concat(messages, " "),
						BackgroundTransparency = 1,
						Font = theme.ConsoleFont,
						TextColor3 = theme.PrimaryTextColor3,
						TextXAlignment = "Left",
						TextSize = 20,
					}),
				}
				local _length = #_children
				local _condition = self.props.logDetailsPaneEnabled and self.state.viewDetails
				if _condition then
					local _arg0_1 = function(_param)
						local key = _param[1]
						local value = _param[2]
						return Roact.createElement("Frame", {
							BackgroundTransparency = 1,
							Size = UDim2.new(1, 0, 0, 25),
							BorderSizePixel = 0,
						}, {
							Roact.createElement(Padding, {
								Padding = {
									Horizontal = 5,
								},
							}),
							Roact.createElement("UIListLayout", {
								FillDirection = "Horizontal",
								Padding = UDim.new(0, 10),
							}),
							Roact.createElement("TextLabel", {
								Text = key,
								Font = theme.ConsoleFont,
								TextSize = 16,
								BackgroundTransparency = 1,
								Size = UDim2.new(0.25, 0, 1, 0),
								TextColor3 = theme.PrimaryTextColor3,
								TextXAlignment = "Left",
							}),
							Roact.createElement("TextLabel", {
								Text = formatRichText(value, nil, theme),
								Font = theme.ConsoleFont,
								TextSize = 16,
								RichText = true,
								BackgroundTransparency = 1,
								Size = UDim2.new(0.75, 0, 1, 0),
								TextColor3 = theme.PrimaryTextColor3,
								TextXAlignment = "Left",
							}),
						})
					end
					-- ▼ ReadonlyArray.map ▼
					local _newValue_1 = table.create(#evtProps)
					for _k, _v in ipairs(evtProps) do
						_newValue_1[_k] = _arg0_1(_v, _k - 1, evtProps)
					end
					-- ▲ ReadonlyArray.map ▲
					_condition = _newValue_1
				end
				local _attributes_1 = {
					Position = UDim2.new(0, 30, 0, self.state.minHeight),
					ClipsDescendants = true,
					BorderSizePixel = 0,
					BackgroundTransparency = 1,
					Size = self.height:map(function(v)
						return UDim2.new(1, -35, 0, v - 25)
					end),
				}
				local _children_1 = {
					Roact.createElement("UIListLayout", {
						Padding = UDim.new(0, 5),
					}),
				}
				local _length_1 = #_children_1
				if _condition then
					for _k, _v in ipairs(_condition) do
						_children_1[_length_1 + _k] = _v
					end
				end
				_children[_length + 1] = Roact.createElement("Frame", _attributes_1, _children_1)
				return Roact.createElement("ImageButton", _attributes, _children)
			end,
		})
	end
end
local mapStateToProps = function(props)
	return {
		logDetailsPaneEnabled = props.logDetailsPaneEnabled,
		showTagsInOutput = props.showTagsInOutput,
	}
end
local StructuredLogMessage = connect(mapStateToProps)(StructuredLogMessageComponent)
return {
	getNonEventProps = getNonEventProps,
	StructuredLogMessage = StructuredLogMessage,
}
]]></string>
                    </Properties>
                  </Item>
                  <Item class="ModuleScript" referent="697">
                    <Properties>
                      <string name="Name">SyntaxTextBox</string>
                      <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local Roact = TS.import(script, TS.getModule(script, "@rbxts", "roact").src)
local ZirconIcon = TS.import(script, script.Parent, "Icon").default
local ZrRichTextHighlighter = TS.import(script, TS.getModule(script, "@rbxts", "zirconium").out.Ast).ZrRichTextHighlighter
local _ThemeContext = TS.import(script, script.Parent.Parent, "UIKit", "ThemeContext")
local ThemeContext = _ThemeContext.default
local convertColorObjectToHex = _ThemeContext.convertColorObjectToHex
local Maid = TS.import(script, TS.getModule(script, "@rbxts", "maid").Maid)
local UserInputService = game:GetService("UserInputService")
--[[
	*
	* A basic syntax text box
]]
local ZirconSyntaxTextBox
do
	ZirconSyntaxTextBox = Roact.Component:extend("ZirconSyntaxTextBox")
	function ZirconSyntaxTextBox:init(props)
		self.ref = Roact.createRef()
		self.maid = Maid.new()
		self.focusMaid = Maid.new()
		self.state = {
			source = props.Source,
			cursorPosition = 0,
			virtualCursorPosition = 0,
		}
	end
	function ZirconSyntaxTextBox:didMount()
		local textBox = self.ref:getValue()
		if textBox then
			self.maid:GiveTask(UserInputService.InputEnded:Connect(function(io, gameProcessed)
				if self.state.focused then
					if io.KeyCode == Enum.KeyCode.Up then
						local _result = self.props.OnHistoryTraversal
						if _result ~= nil then
							_result(-1)
						end
					elseif io.KeyCode == Enum.KeyCode.Down then
						local _result = self.props.OnHistoryTraversal
						if _result ~= nil then
							_result(1)
						end
					end
				end
			end))
		end
	end
	function ZirconSyntaxTextBox:willUnmount()
		self.maid:DoCleaning()
		self.focusMaid:DoCleaning()
	end
	function ZirconSyntaxTextBox:didUpdate(prevProps)
		local textBox = self.ref:getValue()
		if prevProps.Focused ~= self.props.Focused and (self.props.AutoFocus and textBox) then
			if self.props.Focused then
				textBox:CaptureFocus()
			else
				textBox:ReleaseFocus()
			end
		end
		if self.props.Source ~= prevProps.Source then
			self:setState({
				source = self.props.Source,
			})
			task.defer(function()
				return self:setState({
					cursorPosition = #self.props.Source + 1,
				})
			end)
		end
	end
	function ZirconSyntaxTextBox:render()
		return Roact.createElement(ThemeContext.Consumer, {
			render = function(theme)
				local highlighter = ZrRichTextHighlighter.new(self.state.source, theme.SyntaxHighlighter and convertColorObjectToHex(theme.SyntaxHighlighter) or nil)
				local _attributes = {}
				local _condition = self.props.Size
				if _condition == nil then
					_condition = UDim2.new(1, 0, 1, 0)
				end
				_attributes.Size = _condition
				_attributes.Position = self.props.Position
				_attributes.BackgroundColor3 = theme.SecondaryBackgroundColor3
				_attributes.BorderSizePixel = 0
				local _children = {
					Roact.createElement("UIPadding", {
						PaddingLeft = UDim.new(0, 5),
						PaddingRight = UDim.new(0, 5),
						PaddingBottom = UDim.new(0, 5),
						PaddingTop = UDim.new(0, 5),
					}),
					Roact.createElement("TextBox", {
						[Roact.Ref] = self.ref,
						BackgroundTransparency = 1,
						Font = "Code",
						TextSize = 18,
						TextXAlignment = "Left",
						TextYAlignment = "Top",
						ClearTextOnFocus = true,
						PlaceholderColor3 = theme.SecondaryTextColor3,
						PlaceholderText = self.props.PlaceholderText,
						CursorPosition = self.state.cursorPosition,
						MultiLine = self.props.MultiLine,
						Size = UDim2.new(1, 0, 1, 0),
						Text = self.state.source,
						[Roact.Change.Text] = function(rbx)
							return self:setState({
								source = (string.gsub(rbx.Text, "\t", " ")),
							})
						end,
						[Roact.Change.CursorPosition] = function(rbx)
							return self:setState({
								virtualCursorPosition = rbx.CursorPosition,
							})
						end,
						TextTransparency = 0.75,
						[Roact.Event.Focused] = function(rbx)
							self:setState({
								focused = true,
								source = "",
							})
							self.focusMaid:GiveTask(UserInputService.InputBegan:Connect(function(io)
								if io.UserInputState == Enum.UserInputState.Begin and io.UserInputType == Enum.UserInputType.Keyboard then
									local _result = self.props.CancelKeyCodes
									if _result ~= nil then
										local _keyCode = io.KeyCode
										_result = table.find(_result, _keyCode) ~= nil
									end
									if _result then
										local _result_1 = self.props.OnCancel
										if _result_1 ~= nil then
											_result_1()
										end
										rbx:ReleaseFocus()
										rbx.Text = ""
									elseif io:IsModifierKeyDown(Enum.ModifierKey.Ctrl) then
										local _result_1 = self.props.OnControlKey
										if _result_1 ~= nil then
											_result_1(io.KeyCode, io)
										end
									end
								end
							end))
						end,
						[Roact.Event.FocusLost] = function(textBox, enterPressed, inputThatCausedFocusLoss)
							if enterPressed and not self.props.MultiLine then
								local _result = self.props.OnEnterSubmit
								if _result ~= nil then
									_result(textBox.Text)
								end
							end
							self:setState({
								focused = false,
							})
							if enterPressed and self.props.RefocusOnSubmit then
								-- Needs to be deferred, otherwise roblox keeps the enter key there.
								task.defer(function()
									return textBox:CaptureFocus()
								end)
							end
							self.focusMaid:DoCleaning()
						end,
						[Roact.Event.InputChanged] = function(rbx, io)
							if io.UserInputType == Enum.UserInputType.Keyboard then
								local _result = self.props.CancelKeyCodes
								if _result ~= nil then
									local _keyCode = io.KeyCode
									_result = table.find(_result, _keyCode) ~= nil
								end
								if _result then
									rbx:ReleaseFocus()
								end
							end
						end,
						TextColor3 = theme.PrimaryTextColor3,
					}),
					Roact.createElement("TextLabel", {
						TextXAlignment = "Left",
						TextYAlignment = "Top",
						Font = "Code",
						Size = UDim2.new(1, 0, 1, 0),
						TextSize = 18,
						RichText = true,
						BackgroundTransparency = 1,
						Text = highlighter:parse(),
						TextColor3 = Color3.fromRGB(198, 204, 215),
					}),
				}
				local _length = #_children
				local _child = self.state.source ~= "" and (Roact.createElement("TextButton", {
					BackgroundTransparency = 1,
					Text = "",
					Size = UDim2.new(0, 20, 0, 20),
					Position = UDim2.new(1, -25, 0, 0),
					[Roact.Event.MouseButton1Click] = function()
						return self:setState({
							source = "",
						})
					end,
				}, {
					Roact.createElement("UIListLayout", {
						VerticalAlignment = "Center",
						HorizontalAlignment = "Center",
					}),
					Roact.createElement(ZirconIcon, {
						Icon = "Close",
					}),
				}))
				if _child then
					if _child.elements ~= nil or _child.props ~= nil and _child.component ~= nil then
						_children[_length + 1] = _child
					else
						for _k, _v in ipairs(_child) do
							_children[_length + _k] = _v
						end
					end
				end
				return Roact.createElement("Frame", _attributes, _children)
			end,
		})
	end
end
return {
	default = ZirconSyntaxTextBox,
}
]]></string>
                    </Properties>
                  </Item>
                  <Item class="ModuleScript" referent="698">
                    <Properties>
                      <string name="Name">Titlebar</string>
                      <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local Maid = TS.import(script, TS.getModule(script, "@rbxts", "maid").Maid)
local Roact = TS.import(script, TS.getModule(script, "@rbxts", "roact").src)
local Snapdragon = TS.import(script, TS.getModule(script, "@rbxts", "snapdragon").src)
local ThemeContext = TS.import(script, script.Parent.Parent, "UIKit", "ThemeContext").default
local ZirconIcon = TS.import(script, script.Parent, "Icon").default
local TITLEBAR_SIZE = 30
local ZirconTitlebar
do
	ZirconTitlebar = Roact.Component:extend("ZirconTitlebar")
	function ZirconTitlebar:init(props)
		self.dragRef = Snapdragon.createRef()
		self.frameRef = Roact.createRef()
		self.maid = Maid.new()
		self.state = {}
	end
	function ZirconTitlebar:didMount()
		local frameRef = self.frameRef:getValue()
		local _binding = self.props
		local Draggable = _binding.Draggable
		if frameRef and Draggable then
			local _binding_1 = self.props
			local SnapEnabled = _binding_1.SnapEnabled
			local SnapMargin = _binding_1.SnapMargin
			local SnapThreshold = _binding_1.SnapThresholdMargin
			self.dragRef:Update(frameRef)
			self.dragController = Snapdragon.createDragController(self.dragRef, {
				DragGui = frameRef.Parent,
				SnapEnabled = SnapEnabled,
				SnapMargin = SnapMargin,
				SnapThreshold = SnapThreshold,
			})
			self.dragController:Connect()
			self.maid:GiveTask(self.dragController)
			if self.props.DragBegan ~= nil then
				self.maid:GiveTask(self.dragController.DragEnded:Connect(function(ended)
					local _result = self.props.DragEnded
					if _result ~= nil then
						_result(ended.InputPosition)
					end
				end))
			end
			if self.props.DragEnded ~= nil then
				self.maid:GiveTask(self.dragController.DragEnded:Connect(function(ended)
					local _result = self.props.DragEnded
					if _result ~= nil then
						_result(ended.InputPosition)
					end
				end))
			end
		end
	end
	function ZirconTitlebar:willUnmount()
		self.maid:DoCleaning()
	end
	function ZirconTitlebar:render()
		local _binding = self.props
		local Buttons = _binding.Buttons
		local RenderContent = _binding.RenderContent
		local leftButtons = {}
		local rightButtons = {}
		local LeftButtons = function()
			if #leftButtons > 0 then
				local _attributes = {
					Size = UDim2.new(0.25, 0, 1, 0),
					Position = UDim2.new(0, 0, 0, 0),
					BackgroundTransparency = 1,
				}
				local _children = {
					Roact.createElement("UIListLayout", {
						HorizontalAlignment = Enum.HorizontalAlignment.Left,
						FillDirection = Enum.FillDirection.Horizontal,
					}),
				}
				local _length = #_children
				for _k, _v in ipairs(leftButtons) do
					_children[_length + _k] = _v
				end
				return Roact.createElement("Frame", _attributes, _children)
			else
				return Roact.createFragment({})
			end
		end
		local RightButtons = function()
			if #rightButtons > 0 then
				local _attributes = {
					Size = UDim2.new(0.25, 0, 1, 0),
					Position = UDim2.new(0.75, 0, 0, 0),
					BackgroundTransparency = 1,
				}
				local _children = {
					Roact.createElement("UIListLayout", {
						HorizontalAlignment = Enum.HorizontalAlignment.Right,
						FillDirection = Enum.FillDirection.Horizontal,
					}),
				}
				local _length = #_children
				for _k, _v in ipairs(rightButtons) do
					_children[_length + _k] = _v
				end
				return Roact.createElement("Frame", _attributes, _children)
			else
				return Roact.createFragment({})
			end
		end
		if Buttons then
			for _, button in ipairs(Buttons) do
				local _attributes = {
					Text = "",
					BackgroundTransparency = 1,
				}
				local _condition = button.Size
				if _condition == nil then
					_condition = UDim2.new(0, TITLEBAR_SIZE, 0, TITLEBAR_SIZE)
				end
				_attributes.Size = _condition
				_attributes[Roact.Event.MouseButton1Click] = button.OnClick
				local btn = (Roact.createElement("TextButton", _attributes, {
					Roact.createElement("UIListLayout", {
						VerticalAlignment = "Center",
						HorizontalAlignment = "Center",
					}),
					Roact.createElement(ZirconIcon, {
						Icon = button.Icon,
					}),
				}))
				if button.Alignment == "right" then
					-- ▼ Array.push ▼
					rightButtons[#rightButtons + 1] = btn
					-- ▲ Array.push ▲
				elseif button.Alignment == "left" then
					-- ▼ Array.push ▼
					leftButtons[#leftButtons + 1] = btn
					-- ▲ Array.push ▲
				end
			end
		end
		return Roact.createElement(ThemeContext.Consumer, {
			render = function(value)
				return Roact.createElement("Frame", {
					BackgroundColor3 = Color3.fromRGB(33, 37, 43),
					BorderColor3 = Color3.fromRGB(33, 37, 43),
					Size = self.props.Size or UDim2.new(1, 0, 0, TITLEBAR_SIZE),
					[Roact.Ref] = self.frameRef,
				}, {
					Roact.createElement("TextLabel", {
						Text = self.props.Text ~= nil and self.props.Text or "",
						BackgroundTransparency = 1,
						Font = value.Font,
						Size = #leftButtons > 0 and UDim2.new(0.5, -10, 1, 0) or UDim2.new(1, -10, 1, 0),
						TextColor3 = self.props.TextColor or Color3.fromRGB(220, 220, 220),
						TextXAlignment = #leftButtons > 0 and Enum.TextXAlignment.Center or Enum.TextXAlignment.Left,
						Position = #leftButtons > 0 and UDim2.new(0.25, 10, 0, 0) or UDim2.new(0, 10, 0, 0),
						TextSize = self.props.TextSize ~= nil and self.props.TextSize or 18,
					}),
					Roact.createElement(LeftButtons),
					Roact.createElement(RightButtons),
				})
			end,
		})
	end
end
return {
	TITLEBAR_SIZE = TITLEBAR_SIZE,
	default = ZirconTitlebar,
}
]]></string>
                    </Properties>
                  </Item>
                  <Item class="ModuleScript" referent="699">
                    <Properties>
                      <string name="Name">Window</string>
                      <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local Maid = TS.import(script, TS.getModule(script, "@rbxts", "maid").Maid)
local Roact = TS.import(script, TS.getModule(script, "@rbxts", "roact").src)
local _snapdragon = TS.import(script, TS.getModule(script, "@rbxts", "snapdragon").src)
local Snapdragon = _snapdragon
local SnapdragonController = _snapdragon.SnapdragonController
local _Titlebar = TS.import(script, script.Parent, "Titlebar")
local ZirconTitlebar = _Titlebar.default
local TITLEBAR_SIZE = _Titlebar.TITLEBAR_SIZE
local ZirconWindow
do
	ZirconWindow = Roact.Component:extend("ZirconWindow")
	function ZirconWindow:init()
		self.dragRef = Snapdragon.createRef()
		self.windowRef = Roact.createRef()
		self.maid = Maid.new()
	end
	function ZirconWindow:didMount()
		local _binding = self.props
		local TitlebarEnabled = _binding.TitlebarEnabled
		if TitlebarEnabled == nil then
			TitlebarEnabled = false
		end
		local IsDraggable = _binding.IsDraggable
		if IsDraggable == nil then
			IsDraggable = false
		end
		local SnapEnabled = _binding.SnapEnabled
		if SnapEnabled == nil then
			SnapEnabled = true
		end
		local SnapMargin = _binding.SnapMargin
		local SnapThreshold = _binding.SnapThresholdMargin
		local windowRef = self.windowRef:getValue()
		if windowRef ~= nil then
			self.dragRef:Update(windowRef)
			self.dragController = SnapdragonController.new(self.dragRef, {
				SnapEnabled = SnapEnabled,
				SnapThreshold = SnapThreshold,
				SnapMargin = SnapMargin,
			})
			if TitlebarEnabled == false and IsDraggable == true then
				self.dragController:Connect()
				if self.props.DragBegan ~= nil then
					self.maid:GiveTask(self.dragController.DragBegan:Connect(function(began)
						local _result = self.props.DragBegan
						if _result ~= nil then
							_result(began.InputPosition)
						end
					end))
				end
				if self.props.DragEnded ~= nil then
					self.maid:GiveTask(self.dragController.DragBegan:Connect(function(ended)
						local _result = self.props.DragEnded
						if _result ~= nil then
							_result(ended.InputPosition)
						end
					end))
				end
			end
			self.maid:GiveTask(self.dragController)
			self.maid:GiveTask(windowRef:GetPropertyChangedSignal("Position"):Connect(function()
				local _result = self.props.PositionChanged
				if _result ~= nil then
					_result(windowRef.Position)
				end
			end))
		end
	end
	function ZirconWindow:willUnmount()
		self.maid:DoCleaning()
	end
	function ZirconWindow:render()
		local props = self.props
		local _binding = props
		local NativeWindow = _binding.NativeWindow
		if NativeWindow == nil then
			NativeWindow = true
		end
		local IsDraggable = _binding.IsDraggable
		if IsDraggable == nil then
			IsDraggable = false
		end
		local TitlebarEnabled = _binding.TitlebarEnabled
		if TitlebarEnabled == nil then
			TitlebarEnabled = false
		end
		local SnapEnabled = _binding.SnapEnabled
		local SnapIgnoresOffset = _binding.SnapIgnoresOffset
		local SnapThresholdMargin = _binding.SnapThresholdMargin
		local SnapMargin = _binding.SnapMargin
		local ZIndexBehaviour = _binding.ZIndexBehaviour
		if ZIndexBehaviour == nil then
			ZIndexBehaviour = Enum.ZIndexBehavior.Global
		end
		local TitlebarButtons = _binding.TitlebarButtons
		if TitlebarButtons == nil then
			TitlebarButtons = {}
		end
		local TitlebarCloseAction = _binding.TitlebarCloseAction
		local DragBegan = _binding.DragBegan
		local DragEnded = _binding.DragEnded
		if TitlebarCloseAction ~= nil then
			local _arg0 = {
				Alignment = "right",
				Icon = "Close",
				OnClick = TitlebarCloseAction,
				Color = Color3.fromRGB(170, 0, 0),
			}
			-- ▼ Array.push ▼
			TitlebarButtons[#TitlebarButtons + 1] = _arg0
			-- ▲ Array.push ▲
		end
		local childComponents = {}
		local children = self.props[Roact.Children]
		if children and (next(children)) ~= nil then
			local _attributes = {
				Size = UDim2.new(1, 0, 1, TitlebarEnabled and -TITLEBAR_SIZE or 0),
				Position = UDim2.new(0, 0, 0, TitlebarEnabled and TITLEBAR_SIZE or 0),
				BackgroundTransparency = 1,
			}
			local _children = {}
			local _length = #_children
			for _k, _v in pairs(children) do
				if type(_k) == "number" then
					_children[_length + _k] = _v
				else
					_children[_k] = _v
				end
			end
			local frame = (Roact.createElement("Frame", _attributes, _children))
			-- ▼ Array.push ▼
			childComponents[#childComponents + 1] = frame
			-- ▲ Array.push ▲
		end
		if TitlebarEnabled then
			local _arg0 = Roact.createElement(ZirconTitlebar, {
				SnapThresholdMargin = SnapThresholdMargin,
				SnapEnabled = SnapEnabled,
				SnapIgnoresOffset = SnapIgnoresOffset,
				SnapMargin = SnapMargin,
				Draggable = IsDraggable,
				DragBegan = DragBegan,
				DragEnded = DragEnded,
				Text = props.TitleText,
				Buttons = TitlebarButtons,
			})
			-- ▼ Array.push ▼
			childComponents[#childComponents + 1] = _arg0
			-- ▲ Array.push ▲
		end
		local _attributes = {
			Active = true,
		}
		local _condition = self.props.Size
		if _condition == nil then
			_condition = UDim2.new(0, 200, 0, 200)
		end
		_attributes.Size = _condition
		_attributes.Position = self.props.Position
		_attributes.BorderColor3 = Color3.fromRGB(33, 37, 43)
		_attributes.BackgroundColor3 = Color3.fromRGB(24, 26, 31)
		_attributes[Roact.Ref] = self.windowRef
		local _children = {}
		local _length = #_children
		for _k, _v in ipairs(childComponents) do
			_children[_length + _k] = _v
		end
		local hostFrame = (Roact.createElement("Frame", _attributes, _children))
		return NativeWindow and (Roact.createElement("ScreenGui", {
			ZIndexBehavior = ZIndexBehaviour,
			DisplayOrder = props.DisplayOrder,
			IgnoreGuiInset = SnapIgnoresOffset,
		}, {
			hostFrame,
		})) or hostFrame
	end
end
return {
	default = ZirconWindow,
}
]]></string>
                    </Properties>
                  </Item>
                </Item>
                <Item class="Folder" referent="700">
                  <Properties>
                    <string name="Name">Context</string>
                  </Properties>
                  <Item class="ModuleScript" referent="701">
                    <Properties>
                      <string name="Name">ZirconContext</string>
                      <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local Roact = TS.import(script, TS.getModule(script, "@rbxts", "roact").src)
local ZirconClient = TS.import(script, script.Parent.Parent.Parent).ZirconClient
local ZirconProvider
do
	ZirconProvider = Roact.Component:extend("ZirconProvider")
	function ZirconProvider:init(props)
		self:__addContext("_zrso4dispatcher", ZirconClient.Dispatch)
		self:__addContext("_zrso4registry", ZirconClient.Registry)
	end
	function ZirconProvider:render()
		local _children = {}
		local _length = #_children
		local _child = self.props[Roact.Children]
		if _child then
			for _k, _v in pairs(_child) do
				if type(_k) == "number" then
					_children[_length + _k] = _v
				else
					_children[_k] = _v
				end
			end
		end
		return Roact.createFragment(_children)
	end
end
local ZirconConsumer
do
	ZirconConsumer = Roact.Component:extend("ZirconConsumer")
	function ZirconConsumer:init(props)
		self.dispatcher = self:__getContext("_zrso4dispatcher")
		self.registry = self:__getContext("_zrso4registry")
	end
	function ZirconConsumer:render()
		local _children = {}
		local _length = #_children
		local _child = self.props.render(self.dispatcher)
		if _child then
			if _child.elements ~= nil or _child.props ~= nil and _child.component ~= nil then
				_children[_length + 1] = _child
			else
				for _k, _v in ipairs(_child) do
					_children[_length + _k] = _v
				end
			end
		end
		return Roact.createFragment(_children)
	end
end
local ZirconContext = {}
do
	local _container = ZirconContext
	local Provider = ZirconProvider
	_container.Provider = Provider
	local Consumer = ZirconConsumer
	_container.Consumer = Consumer
end
local default = ZirconContext
return {
	default = default,
}
]]></string>
                    </Properties>
                  </Item>
                </Item>
                <Item class="ModuleScript" referent="702">
                  <Properties>
                    <string name="Name">Format</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local _message_templates = TS.import(script, TS.getModule(script, "@rbxts", "message-templates").out)
local MessageTemplateParser = _message_templates.MessageTemplateParser
local TemplateTokenKind = _message_templates.TemplateTokenKind
local t = TS.import(script, TS.getModule(script, "@rbxts", "t").lib.ts)
local ZrTextStream = TS.import(script, TS.getModule(script, "@rbxts", "zirconium").out.Ast.TextStream).default
local _ThemeContext = TS.import(script, script.Parent, "UIKit", "ThemeContext")
local getRichTextColor3 = _ThemeContext.getRichTextColor3
local ZirconTheme = _ThemeContext.ZirconTheme
local function formatParse(formatString)
	local tokens = {}
	local stream = ZrTextStream.new(formatString)
	local isNotEndVarBracket = function(c)
		return c ~= "}"
	end
	--[[
		*
		* Reads while the specified condition is met, or the end of stream
	]]
	local function readWhile(condition)
		local src = ""
		while stream:hasNext() == true and condition(stream:peek()) == true do
			src ..= stream:next()
		end
		return src
	end
	local str = ""
	while stream:hasNext() do
		local char = stream:next()
		if char == "{" then
			local _arg0 = {
				Type = "Text",
				Value = str,
			}
			-- ▼ Array.push ▼
			tokens[#tokens + 1] = _arg0
			-- ▲ Array.push ▲
			str = ""
			local variable = readWhile(isNotEndVarBracket)
			local _arg0_1 = {
				Type = "Variable",
				Value = variable,
			}
			-- ▼ Array.push ▼
			tokens[#tokens + 1] = _arg0_1
			-- ▲ Array.push ▲
			stream:next()
		else
			str ..= char
		end
	end
	if str ~= "" then
		local _arg0 = {
			Type = "Text",
			Value = str,
		}
		-- ▼ Array.push ▼
		tokens[#tokens + 1] = _arg0
		-- ▲ Array.push ▲
	end
	return tokens
end
local isArray = t.array(t.any)
local isMap = t.map(t.string, t.any)
local function formatRichText(value, level, theme)
	if level == nil then
		level = 1
	end
	if type(value) == "string" then
		return getRichTextColor3(theme, "Green", value)
	elseif type(value) == "number" or type(value) == "boolean" then
		return getRichTextColor3(theme, "Cyan", tostring(value))
	elseif isArray(value) then
		if level > 1 then
			return getRichTextColor3(theme, "Grey", "[...]")
		else
			local _arg0 = function(v)
				return formatRichText(v, level + 1, theme)
			end
			-- ▼ ReadonlyArray.map ▼
			local _newValue = table.create(#value)
			for _k, _v in ipairs(value) do
				_newValue[_k] = _arg0(_v, _k - 1, value)
			end
			-- ▲ ReadonlyArray.map ▲
			return getRichTextColor3(ZirconTheme, "Grey", "[" .. (table.concat(_newValue, ", ") .. "]"))
		end
	elseif isMap(value) then
		if level > 1 then
			return getRichTextColor3(theme, "Grey", "{...}")
		else
			local arr = {}
			for k, v in pairs(value) do
				local _arg0 = getRichTextColor3(theme, "White", k) .. (": " .. formatRichText(v, level + 1, theme))
				-- ▼ Array.push ▼
				arr[#arr + 1] = _arg0
				-- ▲ Array.push ▲
			end
			return getRichTextColor3(theme, "Grey", "{" .. (table.concat(arr, ", ") .. "}"))
		end
	elseif typeof(value) == "Instance" then
		return getRichTextColor3(theme, "Orange", value:GetFullName())
	elseif value == nil then
		return getRichTextColor3(theme, "Cyan", "undefined")
	else
		return getRichTextColor3(theme, "Yellow", "<" .. (tostring(value) .. ">"))
	end
end
local function formatPlainText(value, level)
	if level == nil then
		level = 1
	end
	if type(value) == "string" or (type(value) == "number" or type(value) == "boolean") then
		return tostring(value)
	elseif isArray(value) then
		if level > 1 then
			return "[...]"
		else
			local _arg0 = function(v)
				return formatPlainText(v, level + 1)
			end
			-- ▼ ReadonlyArray.map ▼
			local _newValue = table.create(#value)
			for _k, _v in ipairs(value) do
				_newValue[_k] = _arg0(_v, _k - 1, value)
			end
			-- ▲ ReadonlyArray.map ▲
			return "[" .. (table.concat(_newValue, ", ") .. "]")
		end
	elseif isMap(value) then
		if level > 1 then
			return "{...}"
		else
			local arr = {}
			for k, v in pairs(value) do
				local _arg0 = k .. (": " .. formatPlainText(v, level + 1))
				-- ▼ Array.push ▼
				arr[#arr + 1] = _arg0
				-- ▲ Array.push ▲
			end
			return "{" .. (table.concat(arr, ", ") .. "}")
		end
	elseif typeof(value) == "Instance" then
		return value:GetFullName()
	elseif value == nil then
		return "undefined"
	else
		return tostring(value)
	end
end
local function formatTokensPlain(tokens, vars)
	local resultingStr = ""
	local idxOffset = 0
	for _, token in ipairs(tokens) do
		if token.Type == "Text" then
			resultingStr ..= token.Value
		elseif token.Type == "Variable" then
			if token.Value == "" then
				if idxOffset > #vars then
					resultingStr ..= "{" .. (token.Value .. "}")
				else
					resultingStr ..= formatPlainText(vars[idxOffset + 1])
					idxOffset += 1
				end
			end
		end
	end
	return resultingStr
end
local function formatMessageTemplate(template, values)
	local tokens = MessageTemplateParser.GetTokens(template)
	for _, token in ipairs(tokens) do
		if token.kind == TemplateTokenKind.Property then
			local value = values[token.propertyName]
			return formatRichText(value, nil, ZirconTheme)
		end
	end
end
local function formatTokens(tokens, vars)
	local resultingStr = ""
	local idxOffset = 0
	for _, token in ipairs(tokens) do
		if token.Type == "Text" then
			resultingStr ..= token.Value
		elseif token.Type == "Variable" then
			if token.Value == "" then
				if idxOffset > #vars then
					resultingStr ..= getRichTextColor3(ZirconTheme, "Red", "{" .. (token.Value .. "}"))
				else
					resultingStr ..= formatRichText(vars[idxOffset + 1], nil, ZirconTheme)
					idxOffset += 1
				end
			end
		end
	end
	return resultingStr
end
return {
	formatParse = formatParse,
	formatRichText = formatRichText,
	formatTokensPlain = formatTokensPlain,
	formatMessageTemplate = formatMessageTemplate,
	formatTokens = formatTokens,
}
]]></string>
                  </Properties>
                  <Item class="ModuleScript" referent="703">
                    <Properties>
                      <string name="Name">ZirconStructuredMessageTemplate</string>
                      <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local MessageTemplateRenderer = TS.import(script, TS.getModule(script, "@rbxts", "message-templates").out).MessageTemplateRenderer
local DestructureMode = TS.import(script, TS.getModule(script, "@rbxts", "message-templates").out.MessageTemplateToken).DestructureMode
local formatRichText = TS.import(script, script.Parent).formatRichText
local ZirconStructuredMessageTemplateRenderer
do
	local super = MessageTemplateRenderer
	ZirconStructuredMessageTemplateRenderer = setmetatable({}, {
		__tostring = function()
			return "ZirconStructuredMessageTemplateRenderer"
		end,
		__index = super,
	})
	ZirconStructuredMessageTemplateRenderer.__index = ZirconStructuredMessageTemplateRenderer
	function ZirconStructuredMessageTemplateRenderer.new(...)
		local self = setmetatable({}, ZirconStructuredMessageTemplateRenderer)
		return self:constructor(...) or self
	end
	function ZirconStructuredMessageTemplateRenderer:constructor(tokens, theme)
		super.constructor(self, tokens)
		self.theme = theme
	end
	function ZirconStructuredMessageTemplateRenderer:RenderPropertyToken(propertyToken, value)
		if propertyToken.destructureMode == DestructureMode.Destructure then
			return formatRichText(value, nil, self.theme)
		elseif propertyToken.destructureMode == DestructureMode.ToString then
			return tostring(value)
		else
			return formatRichText(value, nil, self.theme)
		end
	end
	function ZirconStructuredMessageTemplateRenderer:RenderTextToken(textToken)
		return textToken.text
	end
end
return {
	ZirconStructuredMessageTemplateRenderer = ZirconStructuredMessageTemplateRenderer,
}
]]></string>
                    </Properties>
                  </Item>
                </Item>
                <Item class="ModuleScript" referent="704">
                  <Properties>
                    <string name="Name">Types</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local _Format = TS.import(script, script.Parent, "Format")
local formatParse = _Format.formatParse
local formatTokensPlain = _Format.formatTokensPlain
--[[
	*
	* Extra logging data relating to the specified log message
]]
local ZirconLogLevel
do
	local _inverse = {}
	ZirconLogLevel = setmetatable({}, {
		__index = _inverse,
	})
	ZirconLogLevel.Verbose = 0
	_inverse[0] = "Verbose"
	ZirconLogLevel.Debug = 1
	_inverse[1] = "Debug"
	ZirconLogLevel.Info = 2
	_inverse[2] = "Info"
	ZirconLogLevel.Warning = 3
	_inverse[3] = "Warning"
	ZirconLogLevel.Error = 4
	_inverse[4] = "Error"
	ZirconLogLevel.Wtf = 5
	_inverse[5] = "Wtf"
end
local function isContextMessage(message)
	return message.type == "zirclog:error" or (message.type == "zirclog:message" or (message.type == "zr:output" or (message.type == "zr:error" or message.type == "slog:output")))
end
local function getMessageText(message)
	if message.type == "zirclog:message" then
		local _binding = message.message
		local outputMessage = _binding.message
		local data = _binding.data
		local _result = data.Variables
		if _result ~= nil then
			_result = #_result
		end
		local _condition = _result
		if _condition == nil then
			_condition = 0
		end
		local formatted = _condition > 0 and formatTokensPlain(formatParse(outputMessage), data.Variables) or outputMessage
		return formatted
	elseif message.type == "zirclog:error" then
		local _binding = message.error
		local outputMessage = _binding.message
		local data = _binding.data
		local _result = data.Variables
		if _result ~= nil then
			_result = #_result
		end
		local _condition = _result
		if _condition == nil then
			_condition = 0
		end
		local formatted = _condition > 0 and formatTokensPlain(formatParse(outputMessage), data.Variables) or outputMessage
		return formatted
	elseif message.type == "zr:output" then
		return message.message.message
	elseif message.type == "zr:error" then
		return message.error.message
	elseif message.type == "zr:execute" then
		return message.source
	elseif message.type == "plain" then
		return message.message
	elseif message.type == "slog:output" then
		return message.data.Template
	else
		return ""
	end
end
local function isLogMessage(message)
	return message.type == "zirclog:error" or (message.type == "zirclog:message" or message.type == "slog:output")
end
local function getLogLevel(message)
	if message.type == "zirclog:message" then
		return message.message.level
	elseif message.type == "slog:output" then
		return message.data.Level
	elseif message.type == "zirclog:error" then
		return message.error.level
	elseif message.type == "zr:error" then
		return ZirconLogLevel.Error
	elseif message.type == "zr:output" then
		return ZirconLogLevel.Info
	else
		return ZirconLogLevel.Info
	end
end
-- * @deprecated
-- * @deprecated
return {
	isContextMessage = isContextMessage,
	getMessageText = getMessageText,
	isLogMessage = isLogMessage,
	getLogLevel = getLogLevel,
	ZirconLogLevel = ZirconLogLevel,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="Folder" referent="705">
                  <Properties>
                    <string name="Name">UIKit</string>
                  </Properties>
                  <Item class="ModuleScript" referent="706">
                    <Properties>
                      <string name="Name">ThemeContext</string>
                      <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local Roact = TS.import(script, TS.getModule(script, "@rbxts", "roact").src)
local _arg0 = {
	IconAssetUri = "rbxassetid://6413958171",
	Font = "Ubuntu",
	ConsoleFont = "RobotoMono",
	PrimaryBackgroundColor3 = Color3.fromRGB(33, 37, 43),
	PrimaryDisabledColor3 = Color3.fromRGB(100, 100, 100),
	PrimaryTextColor3 = Color3.fromRGB(255, 255, 255),
	SecondaryTextColor3 = Color3.fromRGB(170, 170, 170),
	SecondaryBackgroundColor3 = Color3.fromRGB(24, 26, 31),
	PrimarySelectColor3 = Color3.fromRGB(53, 57, 64),
	ErrorTextColor3 = Color3.fromRGB(224, 108, 117),
	ServerContextColor = Color3.fromRGB(0, 255, 144),
	ClientContextColor = Color3.fromRGB(0, 148, 255),
	Dock = {},
	ConsoleColors = {
		Red = Color3.fromRGB(224, 108, 117),
		Yellow = Color3.fromRGB(229, 192, 123),
		Cyan = Color3.fromRGB(86, 182, 194),
		Grey = Color3.fromRGB(90, 99, 116),
		White = Color3.fromRGB(220, 223, 228),
		Green = Color3.fromRGB(152, 195, 121),
		Orange = Color3.fromRGB(255, 135, 0),
	},
}
local ZirconDarkPlastic = _arg0
local _arg0_1 = {
	IconAssetUri = "rbxassetid://6413958171",
	Font = "Ubuntu",
	ConsoleFont = "RobotoMono",
	PrimaryBackgroundColor3 = Color3.fromRGB(212, 218, 212),
	PrimaryDisabledColor3 = Color3.fromRGB(100, 100, 100),
	SecondaryBackgroundColor3 = Color3.fromRGB(231, 229, 224),
	PrimaryTextColor3 = Color3.fromRGB(33, 33, 33),
	IconColor3 = Color3.fromRGB(33, 33, 33),
	SecondaryTextColor3 = Color3.fromRGB(46, 46, 46),
	PrimarySelectColor3 = Color3.new(0.68, 0.73, 0.82),
	ErrorTextColor3 = Color3.fromRGB(224, 108, 117),
	ServerContextColor = Color3.fromRGB(0, 255, 144),
	ClientContextColor = Color3.fromRGB(0, 148, 255),
	Dock = {},
	ConsoleColors = {
		Red = Color3.fromRGB(224, 108, 117),
		Yellow = Color3.fromRGB(232, 179, 77),
		Cyan = Color3.new(0.19, 0.51, 0.55),
		Grey = Color3.fromRGB(90, 99, 116),
		White = Color3.fromRGB(41, 43, 43),
		Green = Color3.fromRGB(102, 148, 69),
		Orange = Color3.fromRGB(255, 135, 0),
	},
}
local ZirconFrost = _arg0_1
local BuiltInThemes = {
	Frost = ZirconFrost,
	Plastic = ZirconDarkPlastic,
}
local function getThemeRichTextColor(theme, color3)
	local color = theme.ConsoleColors[color3]
	local numeric = bit32.bor(bit32.bor((bit32.lshift((color.R * 255), 16)), (bit32.lshift((color.G * 255), 8))), (bit32.lshift((color.B * 255), 0)))
	return string.format("#%.6X", numeric)
end
local function convertColorObjectToHex(values)
	local newArr = {}
	for key, value in pairs(values) do
		if typeof(value) == "Color3" then
			local numeric = bit32.bor(bit32.bor((bit32.lshift((value.R * 255), 16)), (bit32.lshift((value.G * 255), 8))), (bit32.lshift((value.B * 255), 0)))
			newArr[key] = string.format("#%.6X", numeric)
		end
	end
	return newArr
end
local function getRichTextColor3(theme, color3, text)
	return '<font color="' .. (getThemeRichTextColor(theme, color3) .. ('">' .. (text .. "</font>")))
end
local function italicize(text)
	return "<i>" .. (text .. "</i>")
end
local function makeTheme(theme)
	local _object = {}
	for _k, _v in pairs(ZirconDarkPlastic) do
		_object[_k] = _v
	end
	for _k, _v in pairs(theme) do
		_object[_k] = _v
	end
	return _object
end
-- * @deprecated
local ZirconTheme = makeTheme({
	Font = "Sarpanch",
	ConsoleFont = "Code",
	PrimaryBackgroundColor3 = Color3.fromRGB(33, 37, 43),
	SecondaryBackgroundColor3 = Color3.fromRGB(24, 26, 31),
})
local ThemeContext = Roact.createContext(ZirconDarkPlastic)
local default = ThemeContext
return {
	getThemeRichTextColor = getThemeRichTextColor,
	convertColorObjectToHex = convertColorObjectToHex,
	getRichTextColor3 = getRichTextColor3,
	italicize = italicize,
	makeTheme = makeTheme,
	ZirconDarkPlastic = ZirconDarkPlastic,
	ZirconFrost = ZirconFrost,
	BuiltInThemes = BuiltInThemes,
	ZirconTheme = ZirconTheme,
	default = default,
}
]]></string>
                    </Properties>
                  </Item>
                </Item>
              </Item>
              <Item class="ModuleScript" referent="707">
                <Properties>
                  <string name="Name">Log</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local RunService = game:GetService("RunService")
local Client = TS.import(script, script.Parent, "Client").default
local Server = TS.import(script, script.Parent, "Server").default
local Logging = {}
do
	local _container = Logging
	local LogEventConsoleSink
	do
		LogEventConsoleSink = setmetatable({}, {
			__tostring = function()
				return "LogEventConsoleSink"
			end,
		})
		LogEventConsoleSink.__index = LogEventConsoleSink
		function LogEventConsoleSink.new(...)
			local self = setmetatable({}, LogEventConsoleSink)
			return self:constructor(...) or self
		end
		function LogEventConsoleSink:constructor()
		end
		function LogEventConsoleSink:Emit(message)
			if RunService:IsServer() then
				Server.Log.WriteStructured(message)
			else
				Client.StructuredLog(message)
			end
		end
	end
	local function Console()
		return LogEventConsoleSink.new()
	end
	_container.Console = Console
end
return {
	Logging = Logging,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="708">
                <Properties>
                  <string name="Name">Server</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local RunService = TS.import(script, TS.getModule(script, "@rbxts", "services")).RunService
local Remotes = TS.import(script, script.Parent, "Shared", "Remotes").default
local GetCommandService = TS.import(script, script.Parent, "Services").GetCommandService
local Lazy = TS.import(script, script.Parent, "Shared", "Lazy")
local ZirconLogLevel = TS.import(script, script.Parent, "Client", "Types").ZirconLogLevel
local ZirconDebug = TS.import(script, script.Parent, "Shared", "Debugging").ZirconDebug
local IsServer = RunService:IsServer()
local ZirconServer = {}
do
	local _container = ZirconServer
	--[[
		*
		* The server registry for Zircon
	]]
	local Registry = Lazy(function()
		assert(IsServer, "Zircon Service only accessible on server")
		return GetCommandService("RegistryService")
	end)
	_container.Registry = Registry
	--[[
		*
		* The server dispatch for Zircon
	]]
	local Dispatch = Lazy(function()
		assert(IsServer, "Zircon Service only accessible on server")
		return GetCommandService("DispatchService")
	end)
	_container.Dispatch = Dispatch
	local Log = Lazy(function()
		assert(IsServer, "Zircon Service only accessible on server")
		return GetCommandService("LogService")
	end)
	_container.Log = Log
	if RunService:IsServer() then
		local StandardOutput = Remotes.Server:Create("ZrSiO4/StandardOutput")
		local StandardError = Remotes.Server:Create("ZrSiO4/StandardError")
		local DispatchToServer = Remotes.Server:Create("ZrSiO4/DispatchToServer")
		local dispatch = TS.async(function(player, text)
			local _exp = Dispatch.ExecuteScript(player, text)
			local _arg0 = function(result)
				return result:execute()
			end
			return _exp:andThen(_arg0)
		end)
		DispatchToServer:Connect(function(player, message)
			local _exp = dispatch(player, message)
			local _arg0 = function(output)
				for _, message in ipairs(output) do
					StandardOutput:SendToPlayer(player, {
						type = "ZrStandardOutput",
						time = DateTime.now().UnixTimestamp,
						script = "zr",
						message = message,
					})
				end
			end
			_exp:andThen(_arg0):catch(function(err)
				for _, zrError in ipairs(err) do
					local errStruct = ZirconDebug.GetMessageForError(message, zrError)
					StandardError:SendToPlayer(player, errStruct)
				end
			end)
		end)
		local GetPlayerOptions = Remotes.Server:Create("ZrSiO4/GetPlayerPermissions")
		GetPlayerOptions:SetCallback(function(player)
			local group = Registry.GetHighestPlayerGroup(player)
			if group then
				return group:GetPermissions()
			else
				Log.Write(ZirconLogLevel.Wtf, "GetPlayerPermissions", "Could not fetch permissions for player {}", {
					Variables = { player },
				})
				return {}
			end
		end)
	end
end
local default = ZirconServer
return {
	default = default,
}
]]></string>
                </Properties>
                <Item class="Folder" referent="709">
                  <Properties>
                    <string name="Name">Class</string>
                  </Properties>
                  <Item class="ModuleScript" referent="710">
                    <Properties>
                      <string name="Name">ZirconFunction</string>
                      <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local ZrLuauFunction = TS.import(script, TS.getModule(script, "@rbxts", "zirconium").out.Data.LuauFunction).default
local ZrObject = TS.import(script, TS.getModule(script, "@rbxts", "zirconium").out.Data.Object).default
-- * @deprecated
local ZirconFunction
do
	local super = ZrLuauFunction
	ZirconFunction = setmetatable({}, {
		__tostring = function()
			return "ZirconFunction"
		end,
		__index = super,
	})
	ZirconFunction.__index = ZirconFunction
	function ZirconFunction.new(...)
		local self = setmetatable({}, ZirconFunction)
		return self:constructor(...) or self
	end
	function ZirconFunction:constructor(declaration)
		super.constructor(self, function(ctx, ...)
			local args = { ... }
			do
				local i = 0
				local _shouldIncrement = false
				while true do
					if _shouldIncrement then
						i += 1
					else
						_shouldIncrement = true
					end
					if not (i < #args) then
						break
					end
					local argCheck = declaration.Arguments[i + 1]
					if not argCheck(args[i + 1]) then
						return false
					end
				end
			end
			declaration.Execute(ctx, unpack(args))
		end)
		self.declaration = declaration
	end
	function ZirconFunction:create(declaration)
		return ZirconFunction.new(declaration)
	end
	function ZirconFunction:__tostring()
		return self:toString()
	end
	ZirconFunction.string = function(value)
		return type(value) == "string"
	end
	ZirconFunction.number = function(value)
		return type(value) == "number"
	end
	ZirconFunction.boolean = function(value)
		return type(value) == "number"
	end
	ZirconFunction.array = function(value)
		return type(value) == "table"
	end
	ZirconFunction.object = function(value)
		return TS.instanceof(value, ZrObject)
	end
end
ZirconFunction:create({
	Groups = {},
	Arguments = { ZirconFunction.string, ZirconFunction.number },
	Execute = function(ctx, arg0) end,
})
return {
	default = ZirconFunction,
}
]]></string>
                    </Properties>
                  </Item>
                  <Item class="ModuleScript" referent="711">
                    <Properties>
                      <string name="Name">ZirconGroup</string>
                      <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local RunService = game:GetService("RunService")
local ZirconBindingType = TS.import(script, script.Parent.Parent.Parent, "Class", "ZirconGroupBuilder").ZirconBindingType
local ZirconGroupType
do
	local _inverse = {}
	ZirconGroupType = setmetatable({}, {
		__index = _inverse,
	})
	ZirconGroupType.User = 0
	_inverse[0] = "User"
	ZirconGroupType.Moderator = 1
	_inverse[1] = "Moderator"
	ZirconGroupType.Administrator = 2
	_inverse[2] = "Administrator"
end
local ZirconUserGroup
do
	ZirconUserGroup = setmetatable({}, {
		__tostring = function()
			return "ZirconUserGroup"
		end,
	})
	ZirconUserGroup.__index = ZirconUserGroup
	function ZirconUserGroup.new(...)
		local self = setmetatable({}, ZirconUserGroup)
		return self:constructor(...) or self
	end
	function ZirconUserGroup:constructor(id, name, configuration)
		self.id = id
		self.name = name
		self.configuration = configuration
		self.functions = {}
		self.namespaces = {}
		self.enums = {}
		self.members = setmetatable({}, {
			__mode = "k",
		})
		local permissionSet = {}
		for name, enabled in pairs(configuration.Permissions) do
			if type(enabled) == "boolean" and enabled then
				-- ▼ Set.add ▼
				permissionSet[name] = true
				-- ▲ Set.add ▲
			end
		end
		self.permissions = permissionSet
	end
	function ZirconUserGroup:AddMember(player)
		-- ▼ Set.add ▼
		self.members[player] = true
		-- ▲ Set.add ▲
	end
	function ZirconUserGroup:GetMembers()
		return self.members
	end
	function ZirconUserGroup:HasMember(player)
		return self.members[player] ~= nil
	end
	function ZirconUserGroup:GetConfiguration()
		return self.configuration
	end
	function ZirconUserGroup:CanJoinGroup(player)
		local group = self.configuration
		local canJoinGroup = false
		if (bit32.band(group.BindType, ZirconBindingType.Group)) ~= 0 then
			local matchesGroup = group.Groups
			for _, group in ipairs(matchesGroup) do
				local _groupRoleOrRank = group.GroupRoleOrRank
				if type(_groupRoleOrRank) == "string" then
					local _condition = canJoinGroup
					if not canJoinGroup then
						_condition = player:GetRoleInGroup(group.GroupId) == group.GroupRoleOrRank
					end
					canJoinGroup = _condition
				else
					local _condition = canJoinGroup
					if not canJoinGroup then
						_condition = player:GetRankInGroup(group.GroupId) >= group.GroupRoleOrRank
					end
					canJoinGroup = _condition
				end
			end
		end
		if (bit32.band(group.BindType, ZirconBindingType.UserIds)) ~= 0 then
			local _condition = canJoinGroup
			if not canJoinGroup then
				local _userIds = group.UserIds
				local _userId = player.UserId
				_condition = table.find(_userIds, _userId) ~= nil
			end
			canJoinGroup = _condition
		end
		if (bit32.band(group.BindType, ZirconBindingType.Everyone)) ~= 0 then
			canJoinGroup = true
		end
		if (bit32.band(group.BindType, ZirconBindingType.Creator)) ~= 0 then
			if RunService:IsStudio() then
				canJoinGroup = true
			end
			if game.CreatorType == Enum.CreatorType.Group then
				local _condition = canJoinGroup
				if not canJoinGroup then
					_condition = player:GetRankInGroup(game.CreatorId) >= 255
				end
				canJoinGroup = _condition
			else
				local _condition = canJoinGroup
				if not canJoinGroup then
					_condition = game.CreatorId == player.UserId
				end
				canJoinGroup = _condition
			end
		end
		return canJoinGroup
	end
	function ZirconUserGroup:GetName()
		return self.name
	end
	function ZirconUserGroup:GetRank()
		return self.id
	end
	function ZirconUserGroup:GetPermissions()
		return self.permissions
	end
	function ZirconUserGroup:GetPermission(name)
		return self.configuration.Permissions[name]
	end
	function ZirconUserGroup:RegisterFunction(func)
		local _functions = self.functions
		local _arg0 = func:GetName()
		-- ▼ Map.set ▼
		_functions[_arg0] = func
		-- ▲ Map.set ▲
	end
	function ZirconUserGroup:RegisterEnum(enumerable)
		local _enums = self.enums
		local _arg0 = enumerable:getEnumName()
		-- ▼ Map.set ▼
		_enums[_arg0] = enumerable
		-- ▲ Map.set ▲
	end
	function ZirconUserGroup:RegisterNamespace(namespace)
		local _namespaces = self.namespaces
		local _arg0 = namespace:GetName()
		local _arg1 = namespace:ToUserdata()
		-- ▼ Map.set ▼
		_namespaces[_arg0] = _arg1
		-- ▲ Map.set ▲
	end
	function ZirconUserGroup:_getFunctions()
		return self.functions
	end
	function ZirconUserGroup:_getNamespaces()
		return self.namespaces
	end
	function ZirconUserGroup:_getEnums()
		return self.enums
	end
end
return {
	ZirconGroupType = ZirconGroupType,
	default = ZirconUserGroup,
}
]]></string>
                    </Properties>
                  </Item>
                </Item>
              </Item>
              <Item class="ModuleScript" referent="712">
                <Properties>
                  <string name="Name">Services</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local t = TS.import(script, TS.getModule(script, "@rbxts", "t").lib.ts)
local Lazy = TS.import(script, script.Parent, "Shared", "Lazy")
local TSRequire = TS.import(script, script.Parent, "Shared", "tsImportShim")
local IS_SERVER = game:GetService("RunService"):IsServer()
local HasDependencyInjection = t.interface({
	dependencies = t.array(t.string),
	LoadDependencies = t.callback,
})
local serviceMap = {}
local serviceLoading = {}
local function GetServiceInt(service, importingFrom)
	if serviceLoading[service] ~= nil then
		error("Cyclic service dependency " .. (tostring(importingFrom) .. ("<->" .. service)))
	end
	local svcImport = serviceMap[service]
	if svcImport == nil then
		-- ▼ Set.add ▼
		serviceLoading[service] = true
		-- ▲ Set.add ▲
		-- eslint-disable-next-line @typescript-eslint/no-var-requires
		-- const serviceMaster = require(script.FindFirstChild(service) as ModuleScript) as Map<string, ServiceMap[K]>;
		local serviceMaster = TSRequire(script, service)
		local importId = IS_SERVER and "Zircon" .. service or "Zircon" .. service
		svcImport = serviceMaster[importId]
		if svcImport == nil then
			error("Tried importing service: " .. (service .. (", but no matching " .. (importId .. " declaration."))))
		end
		local _svcImport = svcImport
		-- ▼ Map.set ▼
		serviceMap[service] = _svcImport
		-- ▲ Map.set ▲
		if HasDependencyInjection(svcImport) then
			local dependencies = {}
			for _, dependency in ipairs(svcImport.dependencies) do
				local _arg0 = Lazy(function()
					return GetServiceInt(dependency, service)
				end)
				-- ▼ Array.push ▼
				dependencies[#dependencies + 1] = _arg0
				-- ▲ Array.push ▲
			end
			svcImport.LoadDependencies(unpack(dependencies))
		end
		-- ▼ Set.delete ▼
		serviceLoading[service] = nil
		-- ▲ Set.delete ▲
		return svcImport
	else
		return svcImport
	end
end
--[[
	*
	* Synchronously imports the service
	* @rbxts server
	* @internal
	* @param service The service name
]]
local function GetCommandService(service)
	return GetServiceInt(service)
end
return {
	GetCommandService = GetCommandService,
}
]]></string>
                </Properties>
                <Item class="ModuleScript" referent="713">
                  <Properties>
                    <string name="Name">ClientDispatchService</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local LogLevel = TS.import(script, TS.getModule(script, "@rbxts", "log").out).LogLevel
local ZirconClientStore = TS.import(script, script.Parent.Parent, "Client", "BuiltInConsole", "Store").default
local ZirconClient = TS.import(script, script.Parent.Parent).ZirconClient
local GetCommandService = TS.import(script, script.Parent).GetCommandService
local ZirconDebug = TS.import(script, script.Parent.Parent, "Shared", "Debugging").ZirconDebug
local Remotes = TS.import(script, script.Parent.Parent, "Shared", "Remotes").default
local DispatchContext
do
	local _inverse = {}
	DispatchContext = setmetatable({}, {
		__index = _inverse,
	})
	DispatchContext.Server = 0
	_inverse[0] = "Server"
	DispatchContext.Client = 1
	_inverse[1] = "Client"
end
local ZirconClientDispatchService = {}
do
	local _container = ZirconClientDispatchService
	local Registry
	-- * @internal
	local dependencies = { "ClientRegistryService" }
	_container.dependencies = dependencies
	local DispatchToServer = Remotes.Client:WaitFor("ZrSiO4/DispatchToServer"):expect()
	local function Dispatch(input)
		DispatchToServer:SendToServer(input)
	end
	_container.Dispatch = Dispatch
	local function Log(data)
		ZirconClientStore:dispatch({
			type = "AddOutput",
			message = {
				type = "slog:output",
				data = data,
				context = 1,
			},
		})
	end
	-- * @internal
	local ExecuteScript = TS.async(function(text)
		local Registry = GetCommandService("ClientRegistryService")
		local _exp = TS.Promise.defer(function(resolve, reject)
			local mainScript = Registry.GetScriptContextsForLocalPlayer()
			local source = mainScript:parseSource(text, 1001, "command")
			if source:isOk() then
				resolve(mainScript:createScript(source.okValue))
			else
				reject(source:unwrapErr().errors)
			end
		end)
		local _arg0 = function(scr)
			return scr:execute()
		end
		local _exp_1 = _exp:andThen(_arg0)
		local _arg0_1 = function(output)
			local _arg0_2 = function(message)
				Log({
					Template = (string.gsub(message, "{(.-)}", "{{%1}}")),
					Timestamp = DateTime.now():ToIsoDate(),
					Level = LogLevel.Information,
					SourceContext = "Client Script",
				})
			end
			-- ▼ ReadonlyArray.forEach ▼
			for _k, _v in ipairs(output) do
				_arg0_2(_v, _k - 1, output)
			end
			-- ▲ ReadonlyArray.forEach ▲
		end
		return _exp_1:andThen(_arg0_1):catch(function(err)
			if type(err) == "table" then
				local messages = err
				for _, message in ipairs(messages) do
					local errMsg = ZirconDebug.GetMessageForError(text, message)
					ZirconClient.ZirconErrorLog(errMsg)
				end
			end
		end)
	end)
	_container.ExecuteScript = ExecuteScript
end
return {
	DispatchContext = DispatchContext,
	ZirconClientDispatchService = ZirconClientDispatchService,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="714">
                  <Properties>
                    <string name="Name">ClientRegistryService</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local Players = game:GetService("Players")
local ZrPlayerScriptContext = TS.import(script, TS.getModule(script, "@rbxts", "zirconium").out.Runtime.PlayerScriptContext).default
local ZirconEnum = TS.import(script, script.Parent.Parent, "Class", "ZirconEnum").ZirconEnum
local ZirconFunction = TS.import(script, script.Parent.Parent, "Class", "ZirconFunction").ZirconFunction
local ZirconClientStore = TS.import(script, script.Parent.Parent, "Client", "BuiltInConsole", "Store").default
local ZirconClientRegistryService = {}
do
	local _container = ZirconClientRegistryService
	local globals = {}
	local initialized = false
	--[[
		*
		* Creates a scripting environment on the client for Zircon.
		*
		* NOTE: This is 100% insecure because it's on the client, and thus shouldn't use any elevated functions
		* (WIP client)
		* @param configuration
		* @hidden @deprecated
	]]
	local function Init(configuration)
		for _, global in ipairs(configuration.Registry) do
			-- ▼ Array.push ▼
			globals[#globals + 1] = global
			-- ▲ Array.push ▲
		end
		initialized = true
		if #globals > 0 then
			ZirconClientStore:dispatch({
				type = "SetClientExecutionEnabled",
				enabled = true,
			})
		end
	end
	_container.Init = Init
	-- * @internal
	local function GetScriptContextsForLocalPlayer()
		local context = ZrPlayerScriptContext.new(Players.LocalPlayer)
		for _, global in ipairs(globals) do
			if TS.instanceof(global, ZirconFunction) then
				context:registerGlobal(global:GetName(), global)
			elseif TS.instanceof(global, ZirconEnum) then
				context:registerGlobal(global:getEnumName(), global)
			end
		end
		return context
	end
	_container.GetScriptContextsForLocalPlayer = GetScriptContextsForLocalPlayer
end
return {
	ZirconClientRegistryService = ZirconClientRegistryService,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="715">
                  <Properties>
                    <string name="Name">DispatchService</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local Zr = TS.import(script, TS.getModule(script, "@rbxts", "zirconium").out)
local GetCommandService = TS.import(script, script.Parent).GetCommandService
local ZirconDispatchService = {}
do
	local _container = ZirconDispatchService
	local globalContext = Zr.createContext("global")
	-- * @internal
	local ExecuteScriptGlobal = TS.async(function(text)
		return TS.Promise.defer(function(resolve, reject) end)
	end)
	_container.ExecuteScriptGlobal = ExecuteScriptGlobal
	local ExecuteScript = TS.async(function(player, text)
		local Registry = GetCommandService("RegistryService")
		return TS.Promise.defer(function(resolve, reject)
			local _binding = Registry.GetScriptContextsForPlayer(player)
			local mainScript = _binding[1]
			local source = mainScript:parseSource(text, 1001)
			if source:isOk() then
				resolve(mainScript:createScript(source.okValue))
			else
				reject(source:unwrapErr().errors)
			end
		end)
	end)
	_container.ExecuteScript = ExecuteScript
end
return {
	ZirconDispatchService = ZirconDispatchService,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="716">
                  <Properties>
                    <string name="Name">LogService</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local GetCommandService = TS.import(script, script.Parent).GetCommandService
local Lazy = TS.import(script, script.Parent.Parent, "Shared", "Lazy")
local ZirconLogLevel = TS.import(script, script.Parent.Parent, "Client", "Types").ZirconLogLevel
local Remotes = TS.import(script, script.Parent.Parent, "Shared", "Remotes").default
local StandardOutput = Remotes.Server:Create("ZrSiO4/StandardOutput")
local StandardError = Remotes.Server:Create("ZrSiO4/StandardError")
local ZirconLogService = {}
do
	local _container = ZirconLogService
	local outputMessages = {}
	local Registry = Lazy(function()
		return GetCommandService("RegistryService")
	end)
	--[[
		*
		* @internal
	]]
	local function writeServerLogMessage(level, tag, message, data)
		local _arg0 = {
			type = "ZirconStandardOutput",
			tag = tag,
			message = message,
			data = data,
			level = level,
			time = DateTime.now().UnixTimestamp,
		}
		local outputMessage = _arg0
		-- ▼ Array.push ▼
		outputMessages[#outputMessages + 1] = outputMessage
		-- ▲ Array.push ▲
		local loggablePlayers = Registry.InternalGetPlayersWithPermission("CanRecieveServerLogMessages")
		StandardOutput:SendToPlayers(loggablePlayers, outputMessage)
	end
	--[[
		*
		* @internal
	]]
	local function writeServerErrorMessage(level, tag, message, data)
		local _arg0 = {
			type = "ZirconStandardError",
			tag = tag,
			message = message,
			data = data,
			level = level,
			time = DateTime.now().UnixTimestamp,
		}
		local outputError = _arg0
		-- ▼ Array.push ▼
		outputMessages[#outputMessages + 1] = outputError
		-- ▲ Array.push ▲
		local loggablePlayers = Registry.InternalGetPlayersWithPermission("CanRecieveServerLogMessages")
		StandardError:SendToPlayers(loggablePlayers, outputError)
	end
	--[[
		*
		* @internal
	]]
	local function GetCurrentOutput()
		return outputMessages
	end
	_container.GetCurrentOutput = GetCurrentOutput
	local function WriteStructured(data)
		local _arg0 = {
			type = "ZirconStructuredOutput",
			data = data,
			message = "",
			time = 0,
		}
		local outputError = _arg0
		-- ▼ Array.push ▼
		outputMessages[#outputMessages + 1] = outputError
		-- ▲ Array.push ▲
		local _logToPlayer = data.LogToPlayer
		local _condition = typeof(_logToPlayer) == "Instance"
		if _condition then
			_condition = data.LogToPlayer:IsA("Player")
		end
		if _condition then
			StandardOutput:SendToPlayer(data.LogToPlayer, outputError)
		else
			local loggablePlayers = Registry.InternalGetPlayersWithPermission("CanRecieveServerLogMessages")
			StandardOutput:SendToPlayers(loggablePlayers, outputError)
		end
	end
	_container.WriteStructured = WriteStructured
	--[[
		*
		* Writes a message to either the output stream or input stream of Zircon
	]]
	local function Write(level, tag, message, data)
		repeat
			local _fallthrough = false
			if level == (ZirconLogLevel.Debug) then
				_fallthrough = true
			end
			if _fallthrough or level == (ZirconLogLevel.Info) then
				_fallthrough = true
			end
			if _fallthrough or level == (ZirconLogLevel.Warning) then
				writeServerLogMessage(level, tag, message, data)
				break
			end
			if level == (ZirconLogLevel.Error) then
				_fallthrough = true
			end
			if _fallthrough or level == (ZirconLogLevel.Wtf) then
				writeServerErrorMessage(level, tag, message, data)
				break
			end
		until true
	end
	_container.Write = Write
end
return {
	ZirconLogService = ZirconLogService,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="717">
                  <Properties>
                    <string name="Name">RegistryService</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local Players = TS.import(script, TS.getModule(script, "@rbxts", "services")).Players
local toArray = TS.import(script, script.Parent.Parent, "Shared", "Collections").toArray
local ZirconUserGroup = TS.import(script, script.Parent.Parent, "Server", "Class", "ZirconGroup").default
local ZrPlayerScriptContext = TS.import(script, TS.getModule(script, "@rbxts", "zirconium").out.Runtime.PlayerScriptContext).default
local ZirconFunction = TS.import(script, script.Parent.Parent, "Class", "ZirconFunction").ZirconFunction
local ZirconNamespace = TS.import(script, script.Parent.Parent, "Class", "ZirconNamespace").ZirconNamespace
local ZirconEnum = TS.import(script, script.Parent.Parent, "Class", "ZirconEnum").ZirconEnum
local ZirconConfigurationBuilder = TS.import(script, script.Parent.Parent, "Class", "ZirconConfigurationBuilder").ZirconConfigurationBuilder
local Remotes = TS.import(script, script.Parent.Parent, "Shared", "Remotes").default
local ZirconRegistryService = {}
do
	local _container = ZirconRegistryService
	local contexts = {}
	local groups = {}
	local playerGroupMap = {}
	local unregisteredTypes = {}
	local initalized = false
	local function playerFunctionIterator(player)
		return TS.generator(function()
			local groups = playerGroupMap[player]
			if not groups then
				return false
			end
			for _, group in ipairs(groups) do
				for _k, _v in pairs(group:_getFunctions()) do
					local value = { _k, _v }
					coroutine.yield(value)
				end
				for _k, _v in pairs(group:_getNamespaces()) do
					local value = { _k, _v }
					coroutine.yield(value)
				end
				for _k, _v in pairs(group:_getEnums()) do
					local value = { _k, _v }
					coroutine.yield(value)
				end
			end
			return true
		end)
	end
	-- * @internal
	local function GetScriptContextsForPlayer(player)
		local contextArray
		if not (contexts[player] ~= nil) then
			contextArray = {}
			local context = ZrPlayerScriptContext.new(player)
			for _result in playerFunctionIterator(player).next do
				if _result.done then
					break
				end
				local _binding = _result.value
				local name = _binding[1]
				local fun = _binding[2]
				context:registerGlobal(name, fun)
			end
			-- ▼ Array.push ▼
			contextArray[#contextArray + 1] = context
			-- ▲ Array.push ▲
			local _contextArray = contextArray
			-- ▼ Map.set ▼
			contexts[player] = _contextArray
			-- ▲ Map.set ▲
		else
			contextArray = contexts[player]
		end
		return contextArray
	end
	_container.GetScriptContextsForPlayer = GetScriptContextsForPlayer
	--[[
		*
		* Registers a function in the global namespace to the specified group(s)
		* @param func The function to register
		* @param groups The groups
		* @deprecated Use `ZirconFunctionBuilder` + the ZirconConfigurationBuilder API
	]]
	local GetGroups
	local function RegisterFunction(func, groupIds)
		if not initalized then
			local _arg0 = { func, groupIds }
			-- ▼ Array.push ▼
			unregisteredTypes[#unregisteredTypes + 1] = _arg0
			-- ▲ Array.push ▲
		else
			for _, group in ipairs(GetGroups(groupIds)) do
				group:RegisterFunction(func)
			end
		end
	end
	_container.RegisterFunction = RegisterFunction
	--[[
		*
		* Registers a namespace to the specified group(s)
		* @param namespace The namespace
		* @param groups The groups to register it to
		* @deprecated Use `ZirconNamespaceBuilder` + the ZirconConfigurationBuilder API
	]]
	local function RegisterNamespace(namespace, groupIds)
		if not initalized then
			local _arg0 = { namespace, groupIds }
			-- ▼ Array.push ▼
			unregisteredTypes[#unregisteredTypes + 1] = _arg0
			-- ▲ Array.push ▲
		else
			for _, group in ipairs(GetGroups(groupIds)) do
				group:RegisterNamespace(namespace)
			end
		end
	end
	_container.RegisterNamespace = RegisterNamespace
	function GetGroups(groupIds)
		local _arg0 = function(groupId)
			local _arg0_1 = string.lower(groupId)
			return groups[_arg0_1]
		end
		-- ▼ ReadonlyArray.mapFiltered ▼
		local _newValue = {}
		local _length = 0
		for _k, _v in ipairs(groupIds) do
			local _result = _arg0(_v, _k - 1, groupIds)
			if _result ~= nil then
				_length += 1
				_newValue[_length] = _result
			end
		end
		-- ▲ ReadonlyArray.mapFiltered ▲
		return _newValue
	end
	_container.GetGroups = GetGroups
	--[[
		*
		* Registers an enumerable type to the specified group(s)
		* @param enumType The enumerable type
		* @param groups The groups to register the enum to
		* @returns The enum
		* @deprecated Use `ZirconEnumBuilder` + the ZirconConfigurationBuilder API
	]]
	local function RegisterEnum(enumType, groupIds)
		if not initalized then
			local _arg0 = { enumType, groupIds }
			-- ▼ Array.push ▼
			unregisteredTypes[#unregisteredTypes + 1] = _arg0
			-- ▲ Array.push ▲
		else
			for _, group in ipairs(GetGroups(groupIds)) do
				group:RegisterEnum(enumType)
			end
		end
	end
	_container.RegisterEnum = RegisterEnum
	--[[
		*
		* Gets the highest player group for this player
	]]
	local function GetHighestPlayerGroup(player)
		local _result = playerGroupMap[player]
		if _result ~= nil then
			local _arg0 = function(acc, curr)
				return curr:GetRank() > acc:GetRank() and curr or acc
			end
			-- ▼ ReadonlyArray.reduce ▼
			if #_result == 0 then
				error("Attempted to call `ReadonlyArray.reduce()` on an empty array without an initialValue.")
			end
			local _result_1 = _result[1]
			local _callback = _arg0
			for _i = 2, #_result do
				_result_1 = _callback(_result_1, _result[_i], _i - 1, _result)
			end
			-- ▲ ReadonlyArray.reduce ▲
			_result = _result_1
		end
		return _result
	end
	_container.GetHighestPlayerGroup = GetHighestPlayerGroup
	--[[
		*
		* Adds the specified player to the targeted groups.
		*
		* All players are added to `user`, and group owners/game owners are added to `creator` by default.
		* @param player The player to add to the groups
		* @param targetGroups The groups to add the player to
	]]
	local function AddPlayerToGroups(player, targetGroups)
		local _condition = playerGroupMap[player]
		if _condition == nil then
			_condition = {}
		end
		local playerGroups = _condition
		for _, groupOrId in ipairs(targetGroups) do
			local _result
			if type(groupOrId) == "string" then
				_result = groups[groupOrId]
			else
				_result = groupOrId
			end
			local group = _result
			if group then
				group:AddMember(player)
				-- ▼ Array.push ▼
				playerGroups[#playerGroups + 1] = group
				-- ▲ Array.push ▲
			else
				warn("[Zircon] Failed to add player '" .. (tostring(player) .. ("' to group '" .. (tostring(groupOrId) .. "'"))))
			end
		end
		-- ▼ Map.set ▼
		playerGroupMap[player] = playerGroups
		-- ▲ Map.set ▲
	end
	-- * @internal
	local function GetGroupsWithPermission(permission)
		local matching = {}
		for _, group in pairs(groups) do
			if group:GetPermission(permission) then
				-- ▼ Array.push ▼
				matching[#matching + 1] = group
				-- ▲ Array.push ▲
			end
		end
		return matching
	end
	_container.GetGroupsWithPermission = GetGroupsWithPermission
	--[[
		*
		* The cache of players that are allowed this permission
	]]
	local permissionGroupCache = {}
	--[[
		*
		* Gets the players with the specified permission
		* @internal
	]]
	local function InternalGetPlayersWithPermission(permission)
		if permissionGroupCache[permission] ~= nil then
			return permissionGroupCache[permission]
		end
		local groups = GetGroupsWithPermission(permission)
		local playerSet = {}
		for _, group in ipairs(groups) do
			for member in pairs(group:GetMembers()) do
				-- ▼ Set.add ▼
				playerSet[member] = true
				-- ▲ Set.add ▲
			end
		end
		local arr = toArray(playerSet)
		-- ▼ Map.set ▼
		permissionGroupCache[permission] = arr
		-- ▲ Map.set ▲
		return arr
	end
	_container.InternalGetPlayersWithPermission = InternalGetPlayersWithPermission
	-- * @internal
	local function InternalGetPlayerHasPermission(player, permission)
		local players = InternalGetPlayersWithPermission(permission)
		local _arg0 = function(p)
			return p == player
		end
		-- ▼ ReadonlyArray.find ▼
		local _result = nil
		for _i, _v in ipairs(players) do
			if _arg0(_v, _i - 1, players) == true then
				_result = _v
				break
			end
		end
		-- ▲ ReadonlyArray.find ▲
		return _result ~= nil
	end
	_container.InternalGetPlayerHasPermission = InternalGetPlayerHasPermission
	local function GetGroupOrThrow(name)
		local _arg0 = string.lower(name)
		local group = groups[_arg0]
		local _arg1 = "Group '" .. name .. "' does not exist!"
		assert(group, _arg1)
		return group
	end
	_container.GetGroupOrThrow = GetGroupOrThrow
	local function RegisterZirconGlobal(_param)
		local typeId = _param[1]
		local typeGroups = _param[2]
		if TS.instanceof(typeId, ZirconFunction) then
			for _, group in ipairs(GetGroups(typeGroups)) do
				group:RegisterFunction(typeId)
			end
		elseif TS.instanceof(typeId, ZirconEnum) then
			for _, group in ipairs(GetGroups(typeGroups)) do
				group:RegisterEnum(typeId)
			end
		elseif TS.instanceof(typeId, ZirconNamespace) then
			for _, group in ipairs(GetGroups(typeGroups)) do
				group:RegisterNamespace(typeId)
			end
		end
	end
	--[[
		*
		* Initializes Zircon as a logging console *only*.
		*
		* This is equivalent to
		* ```ts
		* ZirconServer.Registry.Init(ZirconConfigurationBuilder.logging())
		* ```
	]]
	local Init
	local function InitLogging()
		return Init(ZirconConfigurationBuilder:logging())
	end
	_container.InitLogging = InitLogging
	--[[
		*
		* Initializes Zircon on the server with a given configuration if specified.
		*
		* If no configuration is passed, it will behave as a logging console _only_.
		* @param configuration The configuration
	]]
	function Init(configuration)
		if initalized then
			return nil
		end
		local configurationGroups = configuration.Groups
		for _, group in ipairs(configurationGroups) do
			local userGroup = ZirconUserGroup.new(group.Rank, group.Id, group)
			local _arg0 = string.lower(group.Id)
			-- ▼ Map.set ▼
			groups[_arg0] = userGroup
			-- ▲ Map.set ▲
		end
		-- Handle builder API types
		for _, typeId in ipairs(configuration.Registry) do
			RegisterZirconGlobal(typeId)
		end
		-- Handle any types registered with the deprecated api
		for _, typeId in ipairs(unregisteredTypes) do
			RegisterZirconGlobal(typeId)
		end
		Players.PlayerAdded:Connect(function(player)
			-- ▼ Map.clear ▼
			table.clear(permissionGroupCache)
			-- ▲ Map.clear ▲
			local groupsToJoin = {}
			for _, group in pairs(groups) do
				if group:CanJoinGroup(player) then
					-- ▼ Array.push ▼
					groupsToJoin[#groupsToJoin + 1] = group
					-- ▲ Array.push ▲
				end
			end
			AddPlayerToGroups(player, groupsToJoin)
			Remotes.Server:Get("ZrSOi4/ZirconInit"):SendToPlayer(player)
		end)
		Players.PlayerRemoving:Connect(function(player)
			-- ▼ Map.clear ▼
			table.clear(permissionGroupCache)
			-- ▲ Map.clear ▲
			-- ▼ Map.delete ▼
			contexts[player] = nil
			-- ▲ Map.delete ▲
			-- ▼ Map.delete ▼
			playerGroupMap[player] = nil
			-- ▲ Map.delete ▲
		end)
		for _, player in ipairs(Players:GetPlayers()) do
			local groupsToJoin = {}
			for _, group in pairs(groups) do
				if group:CanJoinGroup(player) then
					-- ▼ Array.push ▼
					groupsToJoin[#groupsToJoin + 1] = group
					-- ▲ Array.push ▲
				end
			end
			AddPlayerToGroups(player, groupsToJoin)
		end
		initalized = true
		Remotes.Server:Get("ZrSOi4/ZirconInit"):SendToAllPlayers()
	end
	_container.Init = Init
	Remotes.Server:OnFunction("ZrSOi4/GetZirconInit", function()
		return initalized
	end)
end
return {
	ZirconRegistryService = ZirconRegistryService,
}
]]></string>
                  </Properties>
                </Item>
              </Item>
              <Item class="Folder" referent="718">
                <Properties>
                  <string name="Name">Shared</string>
                </Properties>
                <Item class="ModuleScript" referent="719">
                  <Properties>
                    <string name="Name">Collections</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local function values(collection)
	local arr = {}
	return arr
end
local function toArray(collection)
	local arr = {}
	for key in pairs(collection) do
		-- ▼ Array.push ▼
		arr[#arr + 1] = key
		-- ▲ Array.push ▲
	end
	return arr
end
local function setsEqual(collectionA, collectionB)
	if type(collectionA) == "table" and type(collectionB) == "table" then
		for item in pairs(collectionA) do
			if not (collectionB[item] ~= nil) then
				return false
			end
		end
		for item in pairs(collectionB) do
			if not (collectionA[item] ~= nil) then
				return false
			end
		end
	else
		return false
	end
	return true
end
local function last(collection, amount)
	local amountCalculated = math.min(amount, #collection)
	local newArray = table.create(amountCalculated)
	do
		local start = #collection - amountCalculated
		local _shouldIncrement = false
		while true do
			if _shouldIncrement then
				start += 1
			else
				_shouldIncrement = true
			end
			if not (start < #collection) then
				break
			end
			local _arg0 = collection[start + 1]
			-- ▼ Array.push ▼
			newArray[#newArray + 1] = _arg0
			-- ▲ Array.push ▲
		end
	end
	return newArray
end
return {
	values = values,
	toArray = toArray,
	setsEqual = setsEqual,
	last = last,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="720">
                  <Properties>
                    <string name="Name">Debugging</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
-- * @internal
local ZirconDebug
local ZirconDebug = {}
do
	local _container = ZirconDebug
	-- * @internal
	local function IsParserError(err)
		return err.code >= 1000
	end
	_container.IsParserError = IsParserError
	-- * @internal
	local function GetDebugInformationForNode(source, node)
		local _condition = node.startPos
		if _condition == nil then
			_condition = 0
		end
		local startPos = _condition
		local _condition_1 = node.endPos
		if _condition_1 == nil then
			_condition_1 = startPos
		end
		local endPos = _condition_1
		local col = 0
		local row = 1
		local lineStart = 0
		local lineEnd = #source
		local reachedToken = false
		local reachedEndToken = false
		do
			local i = 0
			local _shouldIncrement = false
			while true do
				if _shouldIncrement then
					i += 1
				else
					_shouldIncrement = true
				end
				if not (i < #source) then
					break
				end
				local _arg0 = i + 1
				local _arg1 = i + 1
				local char = string.sub(source, _arg0, _arg1)
				if i == startPos then
					reachedToken = true
				end
				if i == endPos then
					reachedEndToken = true
				end
				if char == "\n" then
					lineEnd = i
					if not reachedToken then
						lineStart = i + 1
					elseif reachedEndToken then
						break
					end
					row += 1
					col = 1
				else
					col += 1
				end
			end
		end
		if reachedToken then
			local _object = {
				LineAndColumn = { row, col },
				CodeLine = { lineStart, lineEnd },
				TokenPosition = { startPos, endPos },
				TokenLinePosition = { startPos - lineStart, endPos - lineStart },
			}
			local _left = "Line"
			local _arg0 = lineStart + 1
			local _arg1 = lineEnd + 1
			_object[_left] = string.sub(source, _arg0, _arg1)
			return _object
		end
	end
	_container.GetDebugInformationForNode = GetDebugInformationForNode
	-- * @internal
	local function GetDebugInformationForToken(source, token)
		local col = 0
		local row = 1
		local lineStart = 0
		local lineEnd = #source
		local reachedToken = false
		do
			local i = 0
			local _shouldIncrement = false
			while true do
				if _shouldIncrement then
					i += 1
				else
					_shouldIncrement = true
				end
				if not (i < #source) then
					break
				end
				local _arg0 = i + 1
				local _arg1 = i + 1
				local char = string.sub(source, _arg0, _arg1)
				if i == token.startPos then
					reachedToken = true
				end
				if char == "\n" then
					lineEnd = i
					if reachedToken then
						break
					end
					lineStart = i + 1
					row += 1
					col = 1
				else
					col += 1
				end
			end
		end
		if reachedToken then
			local _object = {
				LineAndColumn = { row, col },
				CodeLine = { lineStart, lineEnd },
				TokenPosition = { token.startPos, token.endPos },
				TokenLinePosition = { token.startPos - lineStart, token.endPos - lineStart },
			}
			local _left = "Line"
			local _arg0 = lineStart + 1
			local _arg1 = lineEnd + 1
			_object[_left] = string.sub(source, _arg0, _arg1)
			return _object
		end
	end
	_container.GetDebugInformationForToken = GetDebugInformationForToken
	-- * @internal
	local function GetMessageForError(source, zrError)
		if ZirconDebug.IsParserError(zrError) then
			local _result
			if zrError.token then
				_result = ZirconDebug.GetDebugInformationForToken(source, zrError.token)
			else
				_result = nil
			end
			local debug = _result
			return {
				type = "ZrParserError",
				script = "zr",
				time = DateTime.now().UnixTimestamp,
				source = debug and debug.LineAndColumn or nil,
				debug = debug,
				message = zrError.message,
				code = zrError.code,
			}
		else
			local _result
			if zrError.node then
				_result = ZirconDebug.GetDebugInformationForNode(source, zrError.node)
			else
				_result = nil
			end
			local debug = _result
			return {
				type = "ZrRuntimeError",
				time = DateTime.now().UnixTimestamp,
				debug = debug,
				script = "zr",
				message = zrError.message,
				code = zrError.code,
			}
		end
	end
	_container.GetMessageForError = GetMessageForError
end
return {
	ZirconDebug = ZirconDebug,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="721">
                  <Properties>
                    <string name="Name">Lazy</string>
                    <string name="Source">local function Lazy(fn, ...)
    local arg = {...}
    local cached
    return setmetatable({
        GetValue = function()
            if not cached then
                cached = fn(unpack(arg))
            end
            return cached
        end,
        HasValue = function()
            return cached ~= nil
        end
    }, {
        __index = function(self, idx)
            if not cached then
                cached = fn(unpack(arg))
            end
            return cached[idx]
        end,
        __newindex = function()
            error("Cannot assign value to Lazy object.")
        end
    })
end

return Lazy</string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="722">
                  <Properties>
                    <string name="Name">MapUtils</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
--[[
	*
	* Utilites relating to Map objects
]]
local MapUtils = {}
do
	local _container = MapUtils
	--[[
		*
		* Creates a shallow copy of a map
		* @param map The map to copy
		* @returns A shallow copy of the map
	]]
	local function Copy(map)
		local mapCopy = {}
		for k, v in pairs(map) do
			-- ▼ Map.set ▼
			mapCopy[k] = v
			-- ▲ Map.set ▲
		end
		return mapCopy
	end
	_container.Copy = Copy
	--[[
		*
		* Gets the value of this map, or creates the key with the default value if it doesn't exist.
		* @param map The map
		* @param key The key to get the value or "place" a default value in
		* @param defaultValue The default value if the key doesn't exist (to set)
		* @returns The value
	]]
	local function GetOrCreateKey(map, key, defaultValue)
		local value = map[key]
		if value ~= nil then
			return value
		else
			-- ▼ Map.set ▼
			map[key] = defaultValue
			-- ▲ Map.set ▲
			return defaultValue
		end
	end
	_container.GetOrCreateKey = GetOrCreateKey
end
return {
	MapUtils = MapUtils,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="723">
                  <Properties>
                    <string name="Name">NetPermissionMiddleware</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local ZirconLogLevel = TS.import(script, script.Parent.Parent, "Client", "Types").ZirconLogLevel
local GetCommandService = TS.import(script, script.Parent.Parent, "Services").GetCommandService
local function createPermissionMiddleware(permission)
	local permissionMiddleware = function(nxt, event)
		local registry = GetCommandService("RegistryService")
		local log = GetCommandService("LogService")
		return function(sender, ...)
			local args = { ... }
			local groups = registry.GetGroupsWithPermission(permission)
			local _arg0 = function(f)
				return f:HasMember(sender)
			end
			-- ▼ ReadonlyArray.find ▼
			local _result = nil
			for _i, _v in ipairs(groups) do
				if _arg0(_v, _i - 1, groups) == true then
					_result = _v
					break
				end
			end
			-- ▲ ReadonlyArray.find ▲
			local matchingGroup = _result
			if matchingGroup ~= nil then
				return nxt(sender, unpack(args))
			else
				log.Write(ZirconLogLevel.Error, "NetPermissionMiddleware", "Request to {} by user {} denied.", {
					Variables = { event:GetInstance().Name, sender },
				})
				warn("[Zircon] Request to '" .. (event:GetInstance():GetFullName() .. ("' by user '" .. (tostring(sender) .. "' denied."))))
			end
		end
	end
	return permissionMiddleware
end
return {
	default = createPermissionMiddleware,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="724">
                  <Properties>
                    <string name="Name">Remotes</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local Net = TS.import(script, TS.getModule(script, "@rbxts", "net").out)
local createPermissionMiddleware = TS.import(script, script.Parent, "NetPermissionMiddleware").default
local Remotes = Net.CreateDefinitions({
	["ZrSiO4/StandardOutput"] = Net.Definitions.ServerToClientEvent(),
	["ZrSiO4/StandardError"] = Net.Definitions.ServerToClientEvent(),
	["ZrSiO4/DispatchToServer"] = Net.Definitions.ClientToServerEvent({ createPermissionMiddleware("CanExecuteZirconiumScripts"), Net.Middleware.RateLimit({
		MaxRequestsPerMinute = 25,
	}), Net.Middleware.TypeChecking(function(value)
		return type(value) == "string"
	end) }),
	["ZrSiO4/GetPlayerPermissions"] = Net.Definitions.ServerAsyncFunction({ Net.Middleware.RateLimit({
		MaxRequestsPerMinute = 1,
	}) }),
	["ZrSOi4/GetServerLogMessages"] = Net.Definitions.ServerAsyncFunction({ createPermissionMiddleware("CanRecieveServerLogMessages") }),
	["ZrSOi4/PlayerPermissionsUpdated"] = Net.Definitions.ServerToClientEvent(),
	["ZrSOi4/ZirconInit"] = Net.Definitions.ServerToClientEvent(),
	["ZrSOi4/GetZirconInit"] = Net.Definitions.ServerAsyncFunction(),
})
local default = Remotes
return {
	default = default,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="725">
                  <Properties>
                    <string name="Name">tsImportShim</string>
                    <string name="Source">local TS = _G[script]
return function(relativeTo, ...)
    return TS.import(script, relativeTo, ...)
end</string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="726">
                  <Properties>
                    <string name="Name">typeId</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local t = TS.import(script, TS.getModule(script, "@rbxts", "t").lib.ts)
local ZrEnum = TS.import(script, TS.getModule(script, "@rbxts", "zirconium").out.Data.Enum).ZrEnum
local ZrEnumItem = TS.import(script, TS.getModule(script, "@rbxts", "zirconium").out.Data.EnumItem).ZrEnumItem
local ZrObject = TS.import(script, TS.getModule(script, "@rbxts", "zirconium").out.Data.Object).default
local ZrRange = TS.import(script, TS.getModule(script, "@rbxts", "zirconium").out.Data.Range).default
local ZrUndefined = TS.import(script, TS.getModule(script, "@rbxts", "zirconium").out.Data.Undefined)
local _Userdata = TS.import(script, TS.getModule(script, "@rbxts", "zirconium").out.Data.Userdata)
local ZrUserdata = _Userdata.ZrUserdata
local ZrInstanceUserdata = _Userdata.ZrInstanceUserdata
local ZirconFunction = TS.import(script, script.Parent.Parent, "Class", "ZirconFunction").ZirconFunction
local array = t.array(t.any)
local zirconTypeOf
local function zirconTypeIs(value, k)
	return zirconTypeOf(value) == k
end
function zirconTypeOf(value)
	if type(value) == "string" or (type(value) == "number" or type(value) == "boolean") then
		return typeof(value)
	elseif value == ZrUndefined then
		return "undefined"
	elseif TS.instanceof(value, ZirconFunction) then
		return "function"
	elseif TS.instanceof(value, ZrRange) then
		return "range"
	elseif TS.instanceof(value, ZrUserdata) then
		return "userdata"
	elseif TS.instanceof(value, ZrInstanceUserdata) then
		return "Instance"
	elseif TS.instanceof(value, ZrObject) then
		return "object"
	elseif TS.instanceof(value, ZrEnum) then
		return "enum"
	elseif TS.instanceof(value, ZrEnumItem) then
		return "enum$" .. value:getEnum():getEnumName()
	elseif array(value) then
		return "array"
	else
		error("Invalid Zirconium Type")
	end
end
local function zirconTypeId(value)
	if zirconTypeIs(value, "string") then
		return 'string "' .. (value .. '"')
	elseif zirconTypeIs(value, "number") or zirconTypeIs(value, "boolean") then
		return "number '" .. (tostring(value) .. "'")
	elseif zirconTypeIs(value, "range") then
		return "range <" .. (tostring(value:GetMin()) .. (" .. " .. (tostring(value:GetMax()) .. ">")))
	elseif zirconTypeIs(value, "enum") then
		return "Enum '" .. (value:getEnumName() .. "'")
	elseif zirconTypeIs(value, "EnumItem") then
		return "EnumItem '" .. (value:getEnum():getEnumName() .. ("::" .. (value:getName() .. "'")))
	elseif zirconTypeIs(value, "function") then
		return "function '" .. (value:GetName() .. "'")
	else
		return zirconTypeOf(value)
	end
end
return {
	zirconTypeIs = zirconTypeIs,
	zirconTypeOf = zirconTypeOf,
	zirconTypeId = zirconTypeId,
}
]]></string>
                  </Properties>
                </Item>
              </Item>
            </Item>
          </Item>
          <Item class="Folder" referent="727">
            <Properties>
              <string name="Name">zirconium</string>
            </Properties>
            <Item class="Folder" referent="728">
              <Properties>
                <string name="Name">node_modules</string>
              </Properties>
              <Item class="Folder" referent="729">
                <Properties>
                  <string name="Name">@rbxts</string>
                </Properties>
                <Item class="Folder" referent="730">
                  <Properties>
                    <string name="Name">rust-classes</string>
                  </Properties>
                  <Item class="ModuleScript" referent="731">
                    <Properties>
                      <string name="Name">out</string>
                      <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.1.1
local TS = _G[script]
local lazyRegister = TS.import(script, script, "util", "lazyLoad").lazyRegister
local Iterator = TS.import(script, script, "classes", "Iterator").Iterator
lazyRegister("Iterator", Iterator)
local Option = TS.import(script, script, "classes", "Option").Option
lazyRegister("Option", Option)
local OptionMut = TS.import(script, script, "classes", "OptionMut").OptionMut
local Result = TS.import(script, script, "classes", "Result").Result
lazyRegister("Result", Result)
local Vec = TS.import(script, script, "classes", "Vec").Vec
lazyRegister("Vec", Vec)
local unit = TS.import(script, script, "util", "Unit").unit
return {
	Option = Option,
	OptionMut = OptionMut,
	Iterator = Iterator,
	Result = Result,
	Vec = Vec,
	unit = unit,
}
]]></string>
                    </Properties>
                    <Item class="Folder" referent="732">
                      <Properties>
                        <string name="Name">classes</string>
                      </Properties>
                      <Item class="ModuleScript" referent="733">
                        <Properties>
                          <string name="Name">Iterator</string>
                          <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.1.1
local TS = _G[script]
local lazyGet = TS.import(script, script.Parent.Parent, "util", "lazyLoad").lazyGet
local unit = TS.import(script, script.Parent.Parent, "util", "Unit").unit
local Option
lazyGet("Option", function(c)
	Option = c
end)
local Result
lazyGet("Result", function(c)
	Result = c
end)
local Vec
lazyGet("Vec", function(c)
	Vec = c
end)
local DEFAULT_SIZE_HINT = function()
	return { 0, Option:none() }
end
local Iterator
do
	Iterator = setmetatable({}, {
		__tostring = function()
			return "Iterator"
		end,
	})
	Iterator.__index = Iterator
	function Iterator.new(...)
		local self = setmetatable({}, Iterator)
		self:constructor(...)
		return self
	end
	function Iterator:constructor(nextItem, sizeHint)
		self.nextItem = nextItem
		self.consumed = false
		local _0 = sizeHint
		if _0 == nil then
			_0 = DEFAULT_SIZE_HINT
		end
		self.sizeHint = _0
	end
	function Iterator:fromRawParts(nextItem, sizeHint)
		if sizeHint == nil then
			sizeHint = function()
				return { 0, Option:none() }
			end
		end
		return Iterator.new(nextItem, sizeHint)
	end
	function Iterator:fromItems(...)
		local items = { ... }
		local size = #items
		local i = 0
		return Iterator.new(function()
			local _0 = Option
			local _1 = items
			local _2 = i
			i += 1
			return _0:wrap(_1[_2 + 1])
		end, function()
			return size, Option:some(size)
		end)
	end
	function Iterator:consume()
		if self.consumed then
			error("Attempt to consume Iterator twice", 2)
		end
		self.consumed = true
	end
	function Iterator:count()
		self:consume()
		local i = 0
		repeat
			do
				i += 1
			end
		until not self.nextItem():isSome()
		return i
	end
	function Iterator:last()
		self:consume()
		local last = Option:none()
		while true do
			local curr = self.nextItem()
			if curr:isNone() then
				break
			end
			last = curr
		end
		return last
	end
	function Iterator:advanceBy(n)
		do
			local _0 = 0
			while _0 < n do
				local i = _0
				if self.nextItem():isNone() then
					return Result:err(i - 1)
				end
				_0 = i
				_0 += 1
			end
		end
		return Result:ok(unit())
	end
	function Iterator:nth(n)
		return self:advanceBy(n):okOption():andThen(function()
			return self.nextItem()
		end)
	end
	function Iterator:stepBy(step)
		self:consume()
		if step == 0 then
			error("called Iterator.stepBy with a step of 0", 2)
		end
		local takeFirst = true
		return Iterator.new(function()
			if takeFirst then
				takeFirst = false
				return self.nextItem()
			else
				return self:nth(step - 1)
			end
		end, function()
			local low, high = self.sizeHint()
			local firstSize = function(step)
				return function(n)
					return n == 0 and 0 or 1 + (n - 1) / step
				end
			end
			local otherSize = function(step)
				return function(n)
					return n / step
				end
			end
			local _0
			if takeFirst then
				_0 = firstSize
			else
				_0 = otherSize
			end
			local f = _0(step)
			return { f(low), high:map(f) }
		end)
	end
	function Iterator:chain(other)
		self:consume()
		other:consume()
		local firstDone = false
		return Iterator.new(function()
			if firstDone then
				return other.nextItem()
			else
				local result = self.nextItem()
				if result:isNone() then
					firstDone = true
					return other.nextItem()
				else
					return result
				end
			end
		end, function()
			local firstLow, firstHigh = self.sizeHint()
			local lastLow, lastHigh = other.sizeHint()
			return { firstLow + lastLow, firstHigh:andThen(function(firstSize)
				return lastHigh:map(function(lastSize)
					return firstSize + lastSize
				end)
			end) }
		end)
	end
	function Iterator:zip(other)
		self:consume()
		other:consume()
		return Iterator.new(function()
			local first = self.nextItem()
			if first:isSome() then
				return first:zip(other.nextItem())
			else
				return Option:none()
			end
		end, function()
			local firstLow, firstHigh = self.sizeHint()
			local lastLow, lastHigh = other.sizeHint()
			local _0 = math.min(firstLow, lastLow)
			local _1 = firstHigh:map(function(firstSize)
				return lastHigh:map(function(lastSize)
					return math.min(firstSize, lastSize)
				end):unwrapOr(firstSize)
			end)
			return { _0, _1["or"](_1, lastHigh) }
		end)
	end
	function Iterator:intersperse(other)
		return self:intersperseWith(function()
			return other
		end)
	end
	function Iterator:intersperseWith(other)
		self:consume()
		local doIntermediate = true
		return Iterator.new(function()
			doIntermediate = not doIntermediate
			if doIntermediate then
				return Option:some(other())
			else
				return self.nextItem()
			end
		end, function()
			local low, high = self.sizeHint()
			local f = function(n)
				if n < 2 then
					return n
				else
					return n * 2 - 1
				end
			end
			return { f(low), high:map(f) }
		end)
	end
	function Iterator:map(f)
		self:consume()
		return Iterator.new(function()
			return self.nextItem():map(f)
		end, function()
			return self.sizeHint()
		end)
	end
	function Iterator:forEach(f)
		self:consume()
		local result
		while true do
			result = self.nextItem()
			if result:isNone() then
				break
			end
			result:map(f)
		end
	end
	function Iterator:filter(f)
		self:consume()
		return Iterator.new(function()
			while true do
				local item = self.nextItem()
				if item:isNone() or item:map(f):contains(true) then
					return item
				end
			end
		end, function()
			return { 0, (select(2, self.sizeHint())) }
		end)
	end
	function Iterator:filterMap(f)
		self:consume()
		return Iterator.new(function()
			while true do
				local item = self.nextItem()
				local mapped = item:andThen(f)
				if mapped:isSome() then
					return mapped
				end
			end
		end, function()
			return { 0, (select(2, self.sizeHint())) }
		end)
	end
	function Iterator:enumerate()
		self:consume()
		local i = 0
		return Iterator.new(function()
			return Option:some(i):zip(self.nextItem()):map(function(item)
				i += 1
				return item
			end)
		end, function()
			return self.sizeHint()
		end)
	end
	function Iterator:skipWhile(f)
		self:consume()
		while true do
			local item = self.nextItem()
			local mapped = item:map(f)
			if not mapped:contains(true) then
				break
			end
		end
		return Iterator.new(function()
			return self.nextItem()
		end, function()
			return { 0, (select(2, self.sizeHint())) }
		end)
	end
	function Iterator:takeWhile(f)
		self:consume()
		local done = false
		return Iterator.new(function()
			if done then
				return Option:none()
			else
				local item = self.nextItem()
				local mapped = item:map(f)
				if not mapped:contains(true) then
					return item
				else
					if item:isSome() then
						done = true
					end
					return Option:none()
				end
			end
		end, function()
			if done then
				return { 0, Option:some(0) }
			else
				return { 0, (select(2, self.sizeHint())) }
			end
		end)
	end
	function Iterator:mapWhile(f)
		self:consume()
		return Iterator.new(function()
			return self.nextItem():andThen(f)
		end, function()
			return { 0, (select(2, self.sizeHint())) }
		end)
	end
	function Iterator:skip(n)
		self:consume()
		local skipped = false
		return Iterator.new(function()
			if not skipped then
				skipped = true
				return self:nth(n)
			else
				return self.nextItem()
			end
		end, function()
			local low, high = self.sizeHint()
			return { math.max(0, low - n), high:map(function(size)
				return math.max(0, size - n)
			end) }
		end)
	end
	function Iterator:take(n)
		self:consume()
		local toGo = n
		return Iterator.new(function()
			if toGo > 0 then
				toGo -= 1
				return self.nextItem()
			else
				return Option:none()
			end
		end, function()
			local low, high = self.sizeHint()
			local _0 = math.min(low, n)
			local _1 = high:andThen(function(size)
				return size < n and Option:some(size) or Option:none()
			end)
			return { _0, _1["or"](_1, Option:some(n)) }
		end)
	end
	function Iterator:scan(state, f)
		self:consume()
		return Iterator.new(function()
			return self.nextItem():andThen(function(item)
				return f(state, item)
			end)
		end, function()
			return { 0, (select(2, self.sizeHint())) }
		end)
	end
	function Iterator:flatMap(f)
		self:consume()
		local curr
		return Iterator.new(function()
			local item = curr.nextItem()
			if item:isNone() then
				local nextIter = self.nextItem()
				return nextIter:match(function(iter)
					curr = f(iter)
					return curr.nextItem()
				end, function()
					return Option:none()
				end)
			else
				return item
			end
		end, function()
			if (select(2, self.sizeHint())):contains(0) then
				return curr.sizeHint()
			else
				return { (curr.sizeHint()), Option:none() }
			end
		end)
	end
	function Iterator:flatten()
		return self:flatMap(function(i)
			return i
		end)
	end
	function Iterator:fuse()
		self:consume()
		local done = false
		return Iterator.new(function()
			if done then
				return Option:none()
			else
				local item = self.nextItem()
				if item:isNone() then
					done = true
				end
				return item
			end
		end, function()
			if done then
				return { 0, Option:some(0) }
			else
				return { 0, (select(2, self.sizeHint())) }
			end
		end)
	end
	function Iterator:inspect(f)
		self:consume()
		return Iterator.new(function()
			local item = self.nextItem()
			item:map(f)
			return item
		end, function()
			return self.sizeHint()
		end)
	end
	function Iterator:byRef()
		return Iterator.new(function()
			return self.nextItem()
		end, function()
			return self.sizeHint()
		end)
	end
	function Iterator:collect()
		self:consume()
		local size = { self.sizeHint() }
		local vec = Vec:withCapacity(size[2]:unwrapOr(size[1]))
		local item = self.nextItem()
		while item:isSome() do
			vec:push(item:unwrap())
			item = self.nextItem()
		end
		return vec
	end
	function Iterator:partition(f)
		local trueVec = Vec:vec()
		local falseVec = Vec:vec()
		self:forEach(function(item)
			if f(item) then
				trueVec:push(item)
			else
				falseVec:push(item)
			end
		end)
		return trueVec, falseVec
	end
	function Iterator:tryFold(init, f)
		local acc = Result:ok(init)
		local item = self.nextItem()
		while item:isSome() do
			acc = f(acc:unwrap(), item:unwrap())
			if acc:isErr() then
				break
			end
			item = self.nextItem()
		end
		return acc
	end
	function Iterator:tryForEach(f)
		return self:tryFold(unit(), function(_, item)
			return f(item)
		end)
	end
	function Iterator:fold(init, f)
		self:consume()
		local acc = init
		local item = self.nextItem()
		while item:isSome() do
			acc = f(acc, item:unwrap())
			item = self.nextItem()
		end
		return acc
	end
	function Iterator:reduce(f)
		local first = self.nextItem()
		return first:map(function(item)
			return self:fold(item, f)
		end):orElse(function()
			self:consume()
			return Option:none()
		end)
	end
	function Iterator:all(f)
		local item = self.nextItem()
		while item:isSome() do
			if not f(item:unwrap()) then
				return false
			end
			item = self.nextItem()
		end
		return true
	end
	function Iterator:any(f)
		local item = self.nextItem()
		while item:isSome() do
			if f(item:unwrap()) then
				return true
			end
			item = self.nextItem()
		end
		return false
	end
	function Iterator:find(f)
		local item = self.nextItem()
		while item:isSome() do
			if f(item:unwrap()) then
				return item
			end
			item = self.nextItem()
		end
		return Option:none()
	end
	function Iterator:findMap(f)
		local item = self.nextItem()
		while item:isSome() do
			local result = f(item:unwrap())
			if result:isSome() then
				return result
			end
			item = self.nextItem()
		end
		return Option:none()
	end
	function Iterator:tryFind(f)
		local item = self.nextItem()
		while item:isSome() do
			local result = f(item:unwrap())
			if result:contains(true) then
				return Result:ok(item)
			elseif result:isErr() then
				-- Result always err variant which are both R
				return result
			end
			item = self.nextItem()
		end
		return Result:ok(Option:none())
	end
	function Iterator:position(f)
		local item = self.nextItem()
		local i = 0
		while item:isSome() do
			if f(item:unwrap()) then
				return Option:some(i)
			end
			item = self.nextItem()
			i += 1
		end
		return Option:none()
	end
	function Iterator:max()
		return self:reduce(function(a, b)
			return b >= a and b or a
		end)
	end
	function Iterator:min()
		return self:reduce(function(a, b)
			return b < a and b or a
		end)
	end
	function Iterator:maxByKey(f)
		return self:reduce(function(a, b)
			local _0
			if f(b) >= f(a) then
				_0 = b
			else
				_0 = a
			end
			return _0
		end)
	end
	function Iterator:minByKey(f)
		return self:reduce(function(a, b)
			local _0
			if f(b) < f(a) then
				_0 = b
			else
				_0 = a
			end
			return _0
		end)
	end
	function Iterator:maxBy(f)
		return self:reduce(function(a, b)
			local _0
			if f(a, b) >= 0 then
				_0 = a
			else
				_0 = b
			end
			return _0
		end)
	end
	function Iterator:unzip()
		self:consume()
		local size = { self.sizeHint() }
		local leftVec = Vec:withCapacity(size[2]:unwrapOr(size[1]))
		local rightVec = Vec:withCapacity(size[2]:unwrapOr(size[1]))
		local item = self.nextItem()
		while item:isSome() do
			local _0 = item:unwrap()
			local a = _0[1]
			local b = _0[2]
			leftVec:push(a)
			rightVec:push(b)
			item = self.nextItem()
		end
		return leftVec, rightVec
	end
	function Iterator:sum()
		return self:reduce(function(acc, item)
			return acc + item
		end):unwrapOr(0)
	end
	function Iterator:product()
		return self:reduce(function(acc, item)
			return acc * item
		end):unwrapOr(1)
	end
	function Iterator:eq(other)
		return self:eqBy(other, function(a, b)
			return a == b
		end)
	end
	function Iterator:eqBy(other, eq)
		self:consume()
		while true do
			local item = self.nextItem()
			if item:isNone() then
				return other.nextItem():isNone()
			end
			local a = item:unwrap()
			local otherItem = other.nextItem()
			if otherItem:isNone() then
				return false
			end
			local b = otherItem:unwrap()
			if not eq(a, b) then
				return false
			end
		end
	end
	function Iterator:ne(other)
		return not self:eq(other)
	end
	function Iterator:isSorted()
		return self:isSortedBy(function(a, b)
			return Option:some(a - b)
		end)
	end
	function Iterator:isSortedBy(f)
		self:consume()
		local lastOpt = self.nextItem()
		if lastOpt:isNone() then
			return true
		else
			local last = lastOpt:unwrap()
			return self:all(function(item)
				local result = f(last, item)
				if not result:map(function(ord)
					return ord > 0
				end):contains(false) then
					return false
				end
				last = item
				return true
			end)
		end
	end
	function Iterator:isSortedByKey(f)
		return self:map(f):isSorted()
	end
	function Iterator:generator()
		return TS.generator(function()
			local item = self.nextItem()
			while item:isSome() do
				coroutine.yield(item:unwrap())
				item = self.nextItem()
			end
		end)
	end
end
return {
	Iterator = Iterator,
}
]]></string>
                        </Properties>
                      </Item>
                      <Item class="ModuleScript" referent="734">
                        <Properties>
                          <string name="Name">Option</string>
                          <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.1.1
local TS = _G[script]
local lazyGet = TS.import(script, script.Parent.Parent, "util", "lazyLoad").lazyGet
local Iterator
lazyGet("Iterator", function(c)
	Iterator = c
end)
local Result
lazyGet("Result", function(c)
	Result = c
end)
local Vec
lazyGet("Vec", function(c)
	Vec = c
end)
local Option
do
	Option = setmetatable({}, {
		__tostring = function()
			return "Option"
		end,
	})
	Option.__index = Option
	function Option.new(...)
		local self = setmetatable({}, Option)
		self:constructor(...)
		return self
	end
	function Option:constructor(value)
		self.value = value
	end
	function Option:none()
		return Option.new(nil)
	end
	function Option:some(val)
		return Option.new(val)
	end
	function Option:wrap(val)
		return Option.new(val)
	end
	function Option:isSome()
		return self.value ~= nil
	end
	function Option:isNone()
		return not self:isSome()
	end
	function Option:contains(x)
		return self.value == x
	end
	function Option:expect(msg)
		if self:isSome() then
			return self.value
		else
			error(msg)
		end
	end
	function Option:unwrap()
		return self:expect("called `Option.unwrap()` on a `None` value")
	end
	function Option:unwrapOr(def)
		local _0
		if self:isSome() then
			_0 = self.value
		else
			_0 = def
		end
		return _0
	end
	function Option:unwrapOrElse(gen)
		local _0
		if self:isSome() then
			_0 = self.value
		else
			_0 = gen()
		end
		return _0
	end
	function Option:map(func)
		return self:isSome() and Option:some(func(self.value)) or Option:none()
	end
	function Option:mapOr(def, func)
		local _0
		if self:isSome() then
			_0 = func(self.value)
		else
			_0 = def
		end
		return _0
	end
	function Option:mapOrElse(def, func)
		local _0
		if self:isSome() then
			_0 = func(self.value)
		else
			_0 = def()
		end
		return _0
	end
	function Option:okOr(err)
		return self:isSome() and Result:ok(self.value) or Result:err(err)
	end
	function Option:okOrElse(err)
		return self:isSome() and Result:ok(self.value) or Result:err(err())
	end
	Option["and"] = function(self, other)
		return self:isNone() and Option:none() or other
	end
	function Option:andThen(other)
		return self:isSome() and other(self.value) or Option:none()
	end
	function Option:filter(func)
		return self:isSome() and (func(self.value) and Option:some(self.value) or Option:none()) or Option:none()
	end
	Option["or"] = function(self, other)
		return self:isSome() and Option:some(self.value) or other
	end
	function Option:orElse(other)
		return self:isSome() and Option:some(self.value) or other()
	end
	function Option:xor(other)
		return self:isSome() and (other:isSome() and Option:none() or Option:some(self.value)) or other:isSome() and Option:some(other.value) or Option:none()
	end
	function Option:zip(other)
		if self:isSome() and other:isSome() then
			return Option:some({ self.value, other.value })
		end
		return Option:none()
	end
	function Option:zipWith(other, func)
		if self:isSome() and other:isSome() then
			return Option:some(func(self.value, other.value))
		end
		return Option:none()
	end
	function Option:copied()
		return Option:wrap(self.value)
	end
	function Option:cloned()
		return self:map(function(i)
			return i.cloned()
		end)
	end
	function Option:transpose()
		return self:isSome() and (self.value:isOk() and Result:ok(Option:some(self.value:unwrap())) or Result:err(self.value:unwrapErr())) or Result:ok(Option:none())
	end
	function Option:flatten()
		return self:isSome() and Option:wrap(self.value.value) or Option:none()
	end
	function Option:match(ifSome, ifNone)
		local _0
		if self:isSome() then
			_0 = ifSome(self.value)
		else
			_0 = ifNone()
		end
		return _0
	end
	function Option:asPtr()
		return self.value
	end
end
local optionMeta = Option
optionMeta.__unm = function(option)
	return option:map(function(item)
		return -item
	end)
end
optionMeta.__add = function(option, other)
	return option:andThen(function(item)
		return other:map(function(otherItem)
			return item + otherItem
		end)
	end)
end
optionMeta.__sub = function(option, other)
	return option:andThen(function(item)
		return other:map(function(otherItem)
			return item - otherItem
		end)
	end)
end
optionMeta.__mul = function(option, other)
	return option:andThen(function(item)
		return other:map(function(otherItem)
			return item * otherItem
		end)
	end)
end
optionMeta.__div = function(option, other)
	return option:andThen(function(item)
		return other:map(function(otherItem)
			return item / otherItem
		end)
	end)
end
optionMeta.__mod = function(option, other)
	return option:andThen(function(item)
		return other:map(function(otherItem)
			return item % otherItem
		end)
	end)
end
optionMeta.__pow = function(option, other)
	return option:andThen(function(item)
		return other:map(function(otherItem)
			return bit32.bxor(item, otherItem)
		end)
	end)
end
optionMeta.__tostring = function(option)
	return option:match(function(val)
		return "Option.some(" .. tostring(val) .. ")"
	end, function()
		return "Option.none"
	end)
end
optionMeta.__eq = function(a, b)
	return a:asPtr() == b:asPtr()
end
optionMeta.__len = function(option)
	return option:map(function(item)
		return #item
	end):unwrapOr(0)
end
return {
	Option = Option,
}
]]></string>
                        </Properties>
                      </Item>
                      <Item class="ModuleScript" referent="735">
                        <Properties>
                          <string name="Name">OptionMut</string>
                          <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.1.1
local TS = _G[script]
local lazyGet = TS.import(script, script.Parent.Parent, "util", "lazyLoad").lazyGet
local Iterator
lazyGet("Iterator", function(c)
	Iterator = c
end)
local Option
lazyGet("Option", function(c)
	Option = c
end)
local Result
lazyGet("Result", function(c)
	Result = c
end)
local Vec
lazyGet("Vec", function(c)
	Vec = c
end)
local OptionMut
do
	local super = Option
	OptionMut = setmetatable({}, {
		__tostring = function()
			return "OptionMut"
		end,
		__index = super,
	})
	OptionMut.__index = OptionMut
	function OptionMut.new(...)
		local self = setmetatable({}, OptionMut)
		self:constructor(...)
		return self
	end
	function OptionMut:constructor(...)
		super.constructor(self, ...)
	end
	function OptionMut:none()
		return OptionMut.new(nil)
	end
	function OptionMut:some(val)
		return OptionMut.new(val)
	end
	function OptionMut:wrap(val)
		return OptionMut.new(val)
	end
	function OptionMut:insert(val)
		self.value = val
		return self.value
	end
	function OptionMut:getOrInsert(val)
		if not self:isSome() then
			self.value = val
			return self.value
		else
			return self.value
		end
	end
	function OptionMut:getOrInsertWith(val)
		if not self:isSome() then
			self.value = val()
			return self.value
		else
			return self.value
		end
	end
	function OptionMut:take()
		local val = self.value
		self.value = nil
		return Option:wrap(val)
	end
	function OptionMut:replace(val)
		local oldVal = self.value
		self.value = val
		return Option:wrap(oldVal)
	end
	function OptionMut:iter()
		return Iterator:fromRawParts(function()
			return self:take()
		end, function()
			return unpack(self:isSome() and { 1, Option:some(1) } or { 0, Option:some(0) })
		end)
	end
end
local optionMutMeta = OptionMut
optionMutMeta.__unm = function(option)
	return option:map(function(item)
		return -item
	end)
end
optionMutMeta.__add = function(option, other)
	return option:andThen(function(item)
		return other:map(function(otherItem)
			return item + otherItem
		end)
	end)
end
optionMutMeta.__sub = function(option, other)
	return option:andThen(function(item)
		return other:map(function(otherItem)
			return item - otherItem
		end)
	end)
end
optionMutMeta.__mul = function(option, other)
	return option:andThen(function(item)
		return other:map(function(otherItem)
			return item * otherItem
		end)
	end)
end
optionMutMeta.__div = function(option, other)
	return option:andThen(function(item)
		return other:map(function(otherItem)
			return item / otherItem
		end)
	end)
end
optionMutMeta.__mod = function(option, other)
	return option:andThen(function(item)
		return other:map(function(otherItem)
			return item % otherItem
		end)
	end)
end
optionMutMeta.__pow = function(option, other)
	return option:andThen(function(item)
		return other:map(function(otherItem)
			return bit32.bxor(item, otherItem)
		end)
	end)
end
optionMutMeta.__tostring = function(option)
	return option:match(function(val)
		return "OptionMut.some(" .. tostring(val) .. ")"
	end, function()
		return "OptionMut.none"
	end)
end
optionMutMeta.__eq = function(a, b)
	return a:asPtr() == b:asPtr()
end
optionMutMeta.__len = function(option)
	return option:map(function(item)
		return #item
	end):unwrapOr(0)
end
return {
	OptionMut = OptionMut,
}
]]></string>
                        </Properties>
                      </Item>
                      <Item class="ModuleScript" referent="736">
                        <Properties>
                          <string name="Name">Result</string>
                          <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.1.1
local TS = _G[script]
local lazyGet = TS.import(script, script.Parent.Parent, "util", "lazyLoad").lazyGet
local unit = TS.import(script, script.Parent.Parent, "util", "Unit").unit
local Iterator
lazyGet("Iterator", function(c)
	Iterator = c
end)
local Option
lazyGet("Option", function(c)
	Option = c
end)
local Vec
lazyGet("Vec", function(c)
	Vec = c
end)
local Result
do
	Result = setmetatable({}, {
		__tostring = function()
			return "Result"
		end,
	})
	Result.__index = Result
	function Result.new(...)
		local self = setmetatable({}, Result)
		self:constructor(...)
		return self
	end
	function Result:constructor(okValue, errValue)
		self.okValue = okValue
		self.errValue = errValue
	end
	function Result:ok(val)
		return Result.new(val, nil)
	end
	function Result:err(val)
		return Result.new(nil, val)
	end
	function Result:fromCallback(c)
		local _0 = c
		local _1, _2 = pcall(_0)
		local result = _1 and {
			success = true,
			value = _2,
		} or {
			success = false,
			error = _2,
		}
		return result.success and Result:ok(result.value) or Result:err(Option:wrap(result.error))
	end
	function Result:fromVoidCallback(c)
		local _0 = c
		local _1, _2 = pcall(_0)
		local result = _1 and {
			success = true,
			value = _2,
		} or {
			success = false,
			error = _2,
		}
		return result.success and Result:ok(unit()) or Result:err(Option:wrap(result.error))
	end
	Result.fromPromise = TS.async(function(self, p)
		local _0, _1 = TS.try(function()
			return TS.TRY_RETURN, { Result:ok(TS.await(p)) }
		end, function(e)
			return TS.TRY_RETURN, { Result:err(Option:wrap(e)) }
		end)
		if _0 then
			return unpack(_1)
		end
	end)
	Result.fromVoidPromise = TS.async(function(self, p)
		local _0, _1 = TS.try(function()
			TS.await(p)
			return TS.TRY_RETURN, { Result:ok(unit()) }
		end, function(e)
			return TS.TRY_RETURN, { Result:err(Option:wrap(e)) }
		end)
		if _0 then
			return unpack(_1)
		end
	end)
	function Result:isOk()
		return self.okValue ~= nil
	end
	function Result:isErr()
		return self.errValue ~= nil
	end
	function Result:contains(x)
		return self.okValue == x
	end
	function Result:containsErr(x)
		return self.errValue == x
	end
	function Result:okOption()
		return Option:wrap(self.okValue)
	end
	function Result:errOption()
		return Option:wrap(self.errValue)
	end
	function Result:map(func)
		return self:isOk() and Result:ok(func(self.okValue)) or Result:err(self.errValue)
	end
	function Result:mapOr(def, func)
		local _0
		if self:isOk() then
			_0 = func(self.okValue)
		else
			_0 = def
		end
		return _0
	end
	function Result:mapOrElse(def, func)
		local _0
		if self:isOk() then
			_0 = func(self.okValue)
		else
			_0 = def(self.errValue)
		end
		return _0
	end
	function Result:mapErr(func)
		return self:isErr() and Result:err(func(self.errValue)) or Result:ok(self.okValue)
	end
	Result["and"] = function(self, other)
		return self:isErr() and Result:err(self.errValue) or other
	end
	function Result:andThen(func)
		return self:isErr() and Result:err(self.errValue) or func(self.okValue)
	end
	Result["or"] = function(self, other)
		return self:isOk() and Result:ok(self.okValue) or other
	end
	function Result:orElse(other)
		return self:isOk() and Result:ok(self.okValue) or other(self.errValue)
	end
	function Result:expect(msg)
		if self:isOk() then
			return self.okValue
		else
			error(msg)
		end
	end
	function Result:unwrap()
		return self:expect("called `Result.unwrap()` on an `Err` value: " .. tostring(self.errValue))
	end
	function Result:unwrapOr(def)
		local _0
		if self:isOk() then
			_0 = self.okValue
		else
			_0 = def
		end
		return _0
	end
	function Result:unwrapOrElse(gen)
		local _0
		if self:isOk() then
			_0 = self.okValue
		else
			_0 = gen(self.errValue)
		end
		return _0
	end
	function Result:expectErr(msg)
		if self:isErr() then
			return self.errValue
		else
			error(msg)
		end
	end
	function Result:unwrapErr()
		return self:expectErr("called `Result.unwrapErr()` on an `Ok` value: " .. tostring(self.okValue))
	end
	function Result:transpose()
		return self:isOk() and self.okValue:map(function(some)
			return Result:ok(some)
		end) or Option:some(Result:err(self.errValue))
	end
	function Result:flatten()
		return self:isOk() and Result.new(self.okValue.okValue, self.okValue.errValue) or Result:err(self.errValue)
	end
	function Result:match(ifOk, ifErr)
		local _0
		if self:isOk() then
			_0 = ifOk(self.okValue)
		else
			_0 = ifErr(self.errValue)
		end
		return _0
	end
	function Result:asPtr()
		local _0 = (self.okValue)
		if _0 == nil then
			_0 = (self.errValue)
		end
		return _0
	end
end
local resultMeta = Result
resultMeta.__eq = function(a, b)
	return b:match(function(ok)
		return a:contains(ok)
	end, function(err)
		return a:containsErr(err)
	end)
end
resultMeta.__tostring = function(result)
	return result:match(function(ok)
		return "Result.ok(" .. tostring(ok) .. ")"
	end, function(err)
		return "Result.err(" .. tostring(err) .. ")"
	end)
end
return {
	Result = Result,
}
]]></string>
                        </Properties>
                      </Item>
                      <Item class="ModuleScript" referent="737">
                        <Properties>
                          <string name="Name">Vec</string>
                          <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.1.1
local TS = _G[script]
local lazyGet = TS.import(script, script.Parent.Parent, "util", "lazyLoad").lazyGet
local resolveRange = TS.import(script, script.Parent.Parent, "util", "Range").resolveRange
local Iterator
lazyGet("Iterator", function(c)
	Iterator = c
end)
local Option
lazyGet("Option", function(c)
	Option = c
end)
local Result
lazyGet("Result", function(c)
	Result = c
end)
local Vec
do
	Vec = setmetatable({}, {
		__tostring = function()
			return "Vec"
		end,
	})
	Vec.__index = Vec
	function Vec.new(...)
		local self = setmetatable({}, Vec)
		self:constructor(...)
		return self
	end
	function Vec:constructor(array)
		self.array = array
		self.length = #array
	end
	function Vec:withCapacity(size)
		return Vec.new(table.create(size))
	end
	function Vec:vec(...)
		local values = { ... }
		return Vec.new(values)
	end
	function Vec:fromPtr(array)
		return Vec.new(array)
	end
	function Vec:i(i, failMessage)
		local val = self.array[i + 1]
		if val == nil then
			local _0 = failMessage
			if _0 == nil then
				_0 = "called `Vec.i` with an out-of-range index: " .. tostring(i)
			end
			error(_0)
		end
		return val
	end
	function Vec:truncate(len, failMessage)
		if len < 0 then
			local _0 = failMessage
			if _0 == nil then
				_0 = "called `Vec.truncate` with an out-of-range length: " .. tostring(len)
			end
			error(_0)
		end
		do
			local _0 = self.length - 1
			while _0 >= len do
				local i = _0
				self.array[i + 1] = nil
				_0 = i
				_0 -= 1
			end
		end
		self.length = len
		return self
	end
	function Vec:asPtr()
		return self.array
	end
	function Vec:swapRemove(i, failMessage)
		if i < 0 or i >= self.length then
			local _0 = failMessage
			if _0 == nil then
				_0 = "called `Vec.swapRemove` with an out-of-range index: " .. tostring(i)
			end
			error(_0)
		end
		self.length -= 1
		local _0 = self.array
		local _1 = i
		-- ▼ Array.unorderedRemove ▼
		local _2 = _1 + 1
		local _3 = #_0
		local _4 = _0[_2]
		if _4 then
			_0[_2] = _0[_3]
			_0[_3] = nil
		end
		-- ▲ Array.unorderedRemove ▲
		return _4
	end
	function Vec:insert(i, element, failMessage)
		if i < 0 or i > self.length then
			local _0 = failMessage
			if _0 == nil then
				_0 = "called `Vec.insert` with an out-of-range index: " .. tostring(i)
			end
			error(_0)
		end
		self.length += 1
		local _0 = self.array
		local _1 = i
		local _2 = element
		table.insert(_0, _1 + 1, _2)
		return self
	end
	function Vec:remove(i, failMessage)
		if i < 0 or i >= self.length then
			local _0 = failMessage
			if _0 == nil then
				_0 = "called `Vec.remove` with an out-of-range index: " .. tostring(i)
			end
			error(_0)
		end
		self.length -= 1
		local _0 = self.array
		local _1 = i
		return table.remove(_0, _1 + 1)
	end
	function Vec:retain(func)
		local length = self.length
		local deleted = 0
		do
			local _0 = 0
			while _0 < length do
				local i = _0
				if not func(self.array[i + 1]) then
					deleted += 1
				elseif deleted > 0 then
					self:swap(i - deleted, i)
				end
				_0 = i
				_0 += 1
			end
		end
		if deleted > 0 then
			self:truncate(length - deleted, "@rbxts/rust-classes internal error. Please submit a bug report! len=" .. tostring(length) .. " del=" .. tostring(deleted))
		end
		return self
	end
	function Vec:dedupByKey(func)
		return self:dedupBy(function(a, b)
			return func(a) == func(b)
		end)
	end
	function Vec:dedupBy(isDup)
		if self.length > 1 then
			local nextRead = 1
			local nextWrite = 1
			while nextRead < self.length do
				if not isDup(self.array[nextRead + 1], self.array[nextWrite - 1 + 1]) then
					self:swap(nextRead, nextWrite, "@rbxts/rust-classes internal error. Please submit a bug report! r=" .. tostring(nextRead) .. " w=" .. tostring(nextWrite) .. " a")
					nextWrite += 1
				end
				nextRead += 1
			end
			self:truncate(nextWrite, "@rbxts/rust-classes internal error. Please submit a bug report! r=" .. tostring(nextRead) .. " w=" .. tostring(nextWrite))
		end
		return self
	end
	function Vec:dedup()
		return self:dedupBy(function(a, b)
			return a == b
		end)
	end
	function Vec:push(element)
		self.length += 1
		local _0 = self.array
		local _1 = element
		-- ▼ Array.push ▼
		_0[#_0 + 1] = _1
		-- ▲ Array.push ▲
		return self
	end
	function Vec:pop()
		local _0 = Option
		local _1 = self.array
		-- ▼ Array.pop ▼
		local _2 = #_1
		local _3 = _1[_2]
		_1[_2] = nil
		-- ▲ Array.pop ▲
		return _0:wrap(_3):map(function(e)
			self.length -= 1
			return e
		end)
	end
	function Vec:append(other)
		for _, element in ipairs(other.array) do
			local _0 = self.array
			local _1 = element
			-- ▼ Array.push ▼
			_0[#_0 + 1] = _1
			-- ▲ Array.push ▲
		end
		self.length += other:len()
		other:clear()
		return self
	end
	function Vec:drain(r, failMessage)
		return TS.generator(function()
			local range = resolveRange(r, self.length)
			if range[1] < 0 or range[1] >= range[2] or range[2] > self.length then
				local _0 = failMessage
				if _0 == nil then
					_0 = "called \`Vec.drain\` with an invalid \`Range\`: [" .. tostring(r[1]) .. ", " .. tostring(r[2]) .. "]"
				end
				error(_0)
			end
			local array = {}
			do
				local _0 = range[1]
				while _0 < range[2] do
					local i = _0
					local _1 = array
					local _2 = self:remove(range[1])
					-- ▼ Array.push ▼
					_1[#_1 + 1] = _2
					-- ▲ Array.push ▲
					_0 = i
					_0 += 1
				end
			end
			local i = 0
			while i < #array do
				local _0 = array
				local _1 = i
				i += 1
				coroutine.yield(_0[_1 + 1])
			end
		end)
	end
	function Vec:drainFilter(r, filter, failMessage)
		return TS.generator(function()
			local range = resolveRange(r, self.length)
			if range[1] < 0 or range[1] >= range[2] or range[2] > self.length then
				local _0 = failMessage
				if _0 == nil then
					_0 = "called \`Vec.drainFilter\` with an invalid \`Range\`: [" .. tostring(r[1]) .. ", " .. tostring(r[2]) .. "]"
				end
				error(_0)
			end
			local array = {}
			local skipped = 0
			do
				local _0 = range[1]
				while _0 < range[2] do
					local i = _0
					if filter(self:i(range[1] + skipped)) then
						local _1 = array
						local _2 = self:remove(range[1] + skipped)
						-- ▼ Array.push ▼
						_1[#_1 + 1] = _2
						-- ▲ Array.push ▲
					else
						skipped += 1
					end
					_0 = i
					_0 += 1
				end
			end
			local i = 0
			while i < #array do
				local _0 = array
				local _1 = i
				i += 1
				coroutine.yield(_0[_1 + 1])
			end
		end)
	end
	function Vec:clear()
		self.length = 0
		-- ▼ Array.clear ▼
		table.clear(self.array)
		-- ▲ Array.clear ▲
		return self
	end
	function Vec:len()
		return self.length
	end
	function Vec:isEmpty()
		return self.length == 0
	end
	function Vec:splitOff(from, failMessage)
		if from < 0 or from >= self.length then
			local _0 = failMessage
			if _0 == nil then
				_0 = "called `Vec.splitOff` with an out-of-range index: " .. tostring(from)
			end
			error(_0)
		end
		local other
		if from == 0 then
			local _0 = {}
			local _1 = #_0
			for _2, _3 in ipairs(self.array) do
				_0[_1 + _2] = _3
			end
			other = Vec.new(_0)
			self:clear()
		else
			other = Vec:withCapacity(self.length - from)
			do
				local _0 = from
				while _0 < self.length do
					local i = _0
					other:push(self.array[i + 1])
					_0 = i
					_0 += 1
				end
			end
			self:truncate(from)
		end
		return other
	end
	function Vec:resizeWith(newLen, func)
		if newLen < self.length then
			self:truncate(newLen)
		elseif newLen > self.length then
			do
				local _0 = self.length
				while _0 < newLen do
					local i = _0
					self:push(func())
					_0 = i
					_0 += 1
				end
			end
		end
		return self
	end
	function Vec:resize(newLen, val)
		if newLen < self.length then
			self:truncate(newLen)
		elseif newLen > self.length then
			do
				local _0 = self.length
				while _0 < newLen do
					local i = _0
					self:push(val)
					_0 = i
					_0 += 1
				end
			end
		end
		return self
	end
	function Vec:splice(r, iter, failMessage)
		return TS.generator(function()
			local range = resolveRange(r, self.length)
			if range[1] < 0 or range[1] >= range[2] or range[2] > self.length then
				local _0 = failMessage
				if _0 == nil then
					_0 = "called `Vec.splice` with an invalid `Range`: [" .. tostring(r[1]) .. ", " .. tostring(r[2]) .. "]"
				end
				error(_0)
			end
			local i = range[1]
			for _0 in iter.next do
				if _0.done then
					break
				end
				local item = _0.value
				if i >= range[2] then
					break
				end
				local temp = self.array[i + 1]
				local _1 = self.array
				local _2 = i
				i += 1
				_1[_2 + 1] = item
				coroutine.yield(temp)
			end
			while i < range[2] do
				local _0 = self.array
				local _1 = i
				table.remove(_0, _1 + 1)
				range[2] -= 1
			end
		end)
	end
	function Vec:first()
		return Option:wrap(self.array[1])
	end
	function Vec:last()
		return Option:wrap(self.array[self.length - 1 + 1])
	end
	function Vec:get(i)
		return Option:wrap(self.array[i + 1])
	end
	function Vec:swap(a, b, failMessage)
		if a < 0 or a >= self.length then
			local _0 = failMessage
			if _0 == nil then
				_0 = "called `Vec.swap` with an out-of-range a: " .. tostring(a)
			end
			error(_0)
		end
		if b < 0 or b >= self.length then
			local _0 = failMessage
			if _0 == nil then
				_0 = "called `Vec.swap` with an out-of-range b: " .. tostring(b)
			end
			error(_0)
		end
		local temp = self.array[a + 1]
		self.array[a + 1] = self.array[b + 1]
		self.array[b + 1] = temp
		return self
	end
	function Vec:reverse()
		local tries = self.length - 1
		do
			local _0 = 0
			while _0 < tries / 2 do
				local i = _0
				self:swap(i, tries - i, "@rbxts/rust-classes internal error. Please submit a bug report! tries=" .. tostring(tries) .. " i=" .. tostring(i))
				_0 = i
				_0 += 1
			end
		end
		return self
	end
	function Vec:generator()
		return TS.generator(function()
			local i = 0
			while i < self.length do
				local _0 = self.array
				local _1 = i
				i += 1
				coroutine.yield(_0[_1 + 1])
			end
		end)
	end
	function Vec:iter()
		local i = 0
		return Iterator:fromRawParts(function()
			return self:get(i):map(function(item)
				i += 1
				return item
			end)
		end, function()
			return self:len(), Option:some(self:len())
		end)
	end
end
local vecMeta = Vec
vecMeta.__tostring = function(vec)
	return "Vec[" .. string.sub(vec:iter():fold("", function(acc, item)
		return acc .. tostring(item) .. ", "
	end), 0, -3) .. "]"
end
return {
	Vec = Vec,
}
]]></string>
                        </Properties>
                      </Item>
                    </Item>
                    <Item class="Folder" referent="738">
                      <Properties>
                        <string name="Name">util</string>
                      </Properties>
                      <Item class="ModuleScript" referent="739">
                        <Properties>
                          <string name="Name">Range</string>
                          <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.1.1
local function resolveRange(r, max)
	local _0 = r[1]
	if _0 == nil then
		_0 = 0
	end
	local _1 = r[2]
	if _1 == nil then
		_1 = max
	end
	return { _0, _1 }
end
return {
	resolveRange = resolveRange,
}
]]></string>
                        </Properties>
                      </Item>
                      <Item class="ModuleScript" referent="740">
                        <Properties>
                          <string name="Name">Unit</string>
                          <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.1.1
-- eslint-disable-next-line @typescript-eslint/no-empty-interface
local unitMeta = {}
unitMeta.__eq = function()
	return false
end
unitMeta.__tostring = function()
	return "()"
end
unitMeta.__index = function()
	return error("Attempt to index Unit", 2)
end
local function unit()
	return setmetatable({}, unitMeta)
end
return {
	unit = unit,
}
]]></string>
                        </Properties>
                      </Item>
                      <Item class="ModuleScript" referent="741">
                        <Properties>
                          <string name="Name">imports</string>
                          <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.1.1
local TS = _G[script]
local lazyGet = TS.import(script, script.Parent, "lazyLoad").lazyGet
local Iterator
lazyGet("Iterator", function(c)
	Iterator = c
end)
local Option
lazyGet("Option", function(c)
	Option = c
end)
local Result
lazyGet("Result", function(c)
	Result = c
end)
local Vec
lazyGet("Vec", function(c)
	Vec = c
end)
return nil
]]></string>
                        </Properties>
                      </Item>
                      <Item class="ModuleScript" referent="742">
                        <Properties>
                          <string name="Name">lazyLoad</string>
                          <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.1.1
local TS = _G[script]
local classes = {}
local waiting = {}
local function lazyGet(name, callback)
	local c = classes[name]
	if c then
		callback(c)
	else
		local waiter = waiting[name]
		if waiter then
			local _0 = waiter[1]
			local _1 = function(c)
				return callback(c)
			end
			_0:andThen(_1)
		else
			local prom
			prom = TS.Promise.new(function(resolve)
				waiting[name] = { prom, resolve }
			end)
			local waiter = waiting[name]
			waiter[1] = prom
			local _0 = prom
			local _1 = function(c)
				return callback(c)
			end
			_0:andThen(_1)
		end
	end
end
local function lazyRegister(name, c)
	classes[name] = c
	local waiter = waiting[name]
	if waiter then
		waiter[2](c)
	end
end
return {
	lazyGet = lazyGet,
	lazyRegister = lazyRegister,
}
]]></string>
                        </Properties>
                      </Item>
                    </Item>
                  </Item>
                </Item>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="743">
              <Properties>
                <string name="Name">out</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local ZrPlayerScriptContext = TS.import(script, script, "Runtime", "PlayerScriptContext").default
local ZrScriptContext = TS.import(script, script, "Runtime", "ScriptContext").default
--[[
	*
	* Zirconium Language Namespace
]]
local Zr = {}
do
	local _container = Zr
	local contexts = {}
	--[[
		*
		* Create a new Zirconium script context to execute code against
	]]
	local function createContext(name)
		if name == nil then
			name = game:GetService("HttpService"):GenerateGUID()
		end
		if contexts[name] ~= nil then
			error("Context '" .. (name .. "' already exists."))
		end
		local ctx = ZrScriptContext.new()
		-- ▼ Map.set ▼
		contexts[name] = ctx
		-- ▲ Map.set ▲
		return ctx
	end
	_container.createContext = createContext
	local function createPlayerContext(player, name)
		if name == nil then
			name = game:GetService("HttpService"):GenerateGUID()
		end
		if contexts[name] ~= nil then
			error("Context '" .. (name .. "' already exists."))
		end
		local ctx = ZrPlayerScriptContext.new(player)
		-- ▼ Map.set ▼
		contexts[name] = ctx
		-- ▲ Map.set ▲
		return ctx
	end
	_container.createPlayerContext = createPlayerContext
end
return Zr
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="744">
                <Properties>
                  <string name="Name">Ast</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local exports = {}
local prettyPrintNodes = TS.import(script, script, "Utility", "PrettyPrintNodes")
local ZrLexer = TS.import(script, script, "Lexer").default
local ZrTextStream = TS.import(script, script, "TextStream").default
local ZrParser = TS.import(script, script, "Parser").default
local ZrRichTextHighlighter = TS.import(script, script, "Syntax", "RichTextHighlighter").default
local factory = TS.import(script, script, "Nodes", "Create")
local ZrVisitors = TS.import(script, script, "Utility", "NodeVisitor")
local types = TS.import(script, script, "Nodes").typeGuards
local AST_VERSION = "1.1.0"
for _k, _v in pairs(TS.import(script, script, "Nodes", "Guards")) do
	exports[_k] = _v
end
exports.ZrVisitors = ZrVisitors
exports.ZrLexer = ZrLexer
exports.ZrParser = ZrParser
exports.ZrTextStream = ZrTextStream
exports.ZrRichTextHighlighter = ZrRichTextHighlighter
exports.prettyPrintNodes = prettyPrintNodes
exports.factory = factory
exports.AST_VERSION = AST_VERSION
exports.types = types
return exports
]]></string>
                </Properties>
                <Item class="Folder" referent="745">
                  <Properties>
                    <string name="Name">Definitions</string>
                  </Properties>
                  <Item class="ModuleScript" referent="746">
                    <Properties>
                      <string name="Name">Definitions</string>
                      <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local _Guards = TS.import(script, script.Parent.Parent, "Nodes", "Guards")
local isStringExpression = _Guards.isStringExpression
local isNumberLiteral = _Guards.isNumberLiteral
local isBooleanLiteral = _Guards.isBooleanLiteral
-- eslint-disable @typescript-eslint/no-empty-interface
local function nodeMatchAstDefinitionType(node, typeName)
	if typeName == "string" and isStringExpression(node) then
		return {
			matches = true,
			matchType = typeName,
		}
	elseif typeName == "number" and isNumberLiteral(node) then
		return {
			matches = true,
			matchType = typeName,
		}
	elseif typeName == "boolean" and isBooleanLiteral(node) then
		return {
			matches = true,
			matchType = typeName,
		}
	elseif typeName == "switch" then
		return {
			matches = true,
			matchType = typeName,
		}
	end
	return {
		matches = false,
	}
end
local function nodeMatchesAstDefinitionTypes(node, types)
	for _, typeName in ipairs(types) do
		local result = nodeMatchAstDefinitionType(node, typeName)
		if result.matches then
			return result
		end
	end
	return {
		matches = false,
	}
end
return {
	nodeMatchAstDefinitionType = nodeMatchAstDefinitionType,
	nodeMatchesAstDefinitionTypes = nodeMatchesAstDefinitionTypes,
}
]]></string>
                    </Properties>
                  </Item>
                </Item>
                <Item class="ModuleScript" referent="747">
                  <Properties>
                    <string name="Name">ErrorStrings</string>
                    <string name="Source">return {
	FUNCTION_ID_EXPECTED = "Identifier expected for function declaration",
	FUNCTION_IMPLEMENTATION_MISSING = "Missing function implementation for '%s'",
	IDENTIFIER_EXPECTED = "Identifier expected",
	INVALID_IDENTIFIER = "Invalid identifier '%s'",
	PROPERTY_ACCESS_IDENTIFIER_INVALID = "Attempt to access property '%s' with invalid identifier '%s'",
	PROPERTY_ACCESS_PROPERTY_INVALID = "Attempt to access invalid property '%s' of '%s'",
}</string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="748">
                  <Properties>
                    <string name="Name">Lexer</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local _Grammar = TS.import(script, script.Parent, "Tokens", "Grammar")
local Grammar = _Grammar.default
local Keywords = _Grammar.Keywords
local joinInterpolatedString = TS.import(script, script.Parent, "Tokens", "Tokens").joinInterpolatedString
local DEFAULTS = {
	SyntaxHighlighterLexer = false,
	ExperimentalSyntaxHighlighter = false,
	CommandNames = {},
}
--[[
	*
	* The lexer for Zirconium
]]
local ZrLexer
do
	ZrLexer = setmetatable({}, {
		__tostring = function()
			return "ZrLexer"
		end,
	})
	ZrLexer.__index = ZrLexer
	function ZrLexer.new(...)
		local self = setmetatable({}, ZrLexer)
		return self:constructor(...) or self
	end
	function ZrLexer:constructor(stream, options)
		self.stream = stream
		self.isNumeric = function(c)
			return (string.match(c, "[%d]")) ~= nil
		end
		self.isSpecial = function(c)
			return table.find(ZrLexer.SPECIAL, c) ~= nil
		end
		self.isNotNewline = function(c)
			return c ~= "\n"
		end
		self.isNotEndOfStatement = function(c)
			return c ~= "\n" and c ~= ";"
		end
		self.isKeyword = function(c)
			return table.find((Grammar.Keywords), c) ~= nil
		end
		self.isWhitespace = function(c)
			return (string.match(c, "%s")) ~= nil and c ~= "\n"
		end
		self.isId = function(c)
			return (string.match(c, "[%w_]")) ~= nil
		end
		self.isOptionId = function(c)
			return (string.match(c, "[%w_-]")) ~= nil
		end
		self.previousTokens = {}
		local _object = {}
		for _k, _v in pairs(DEFAULTS) do
			_object[_k] = _v
		end
		if type(options) == "table" then
			for _k, _v in pairs(options) do
				_object[_k] = _v
			end
		end
		self.options = _object
	end
	function ZrLexer:getStreamSub(x, y)
		return self.stream:sub(x, y)
	end
	function ZrLexer:getStream()
		return self.stream
	end
	function ZrLexer:reset()
		self.stream:reset()
	end
	function ZrLexer:readWhile(condition)
		local src = ""
		local idx = 0
		while self.stream:hasNext() == true and condition(self.stream:peek(), self.stream:peek(1), idx) == true do
			src ..= self.stream:next()
			idx += 1
		end
		return src
	end
	function ZrLexer:parseLongString(character)
		local str = ""
		local src = {}
		local vars = {}
		local escaped = false
		local closed = false
		self.stream:next()
		while self.stream:hasNext() do
			local char = self.stream:next()
			if escaped then
				escaped = false
			elseif char == "\\" then
				escaped = true
			elseif char == character then
				closed = true
				break
			elseif char == "$" then
				local _str = str
				-- ▼ Array.push ▼
				src[#src + 1] = _str
				-- ▲ Array.push ▲
				str = ""
				local id = self:readWhile(self.isId)
				-- ▼ Array.push ▼
				vars[#vars + 1] = id
				-- ▲ Array.push ▲
				continue
			end
			str ..= char
		end
		if str ~= "" then
			local _str = str
			-- ▼ Array.push ▼
			src[#src + 1] = _str
			-- ▲ Array.push ▲
		end
		return { src, vars, closed }
	end
	function ZrLexer:readComment()
		local result = self:readWhile(self.isNotNewline)
		return result
	end
	function ZrLexer:readStringToken(startCharacter)
		local startPos = self.stream:getPtr()
		local _binding = self:parseLongString(startCharacter)
		local values = _binding[1]
		local variables = _binding[2]
		local closed = _binding[3]
		local endPos = self.stream:getPtr() - 1
		if #variables == 0 then
			local _arg0 = {
				kind = "String",
				value = table.concat(values, " "),
				startPos = startPos,
				closed = closed,
				flags = closed and 0 or 1,
				endPos = endPos,
				startCharacter = startCharacter,
				endCharacter = closed and startCharacter or nil,
			}
			return _arg0
		else
			local _arg0 = {
				kind = "InterpolatedString",
				values = values,
				value = joinInterpolatedString(values, variables),
				variables = variables,
				closed = closed,
				startPos = startPos,
				flags = bit32.bor((closed and 0 or 1), 2),
				endPos = endPos,
				quotes = startCharacter,
			}
			return _arg0
		end
	end
	function ZrLexer:parseBoolean(value)
		if value == "true" then
			return true
		end
		return false
	end
	function ZrLexer:lastText(count)
		return self.stream:sub(math.max(0, self.stream:getPtr() - count), self.stream:getPtr())
	end
	function ZrLexer:readLiteralString()
		local startPos = self.stream:getPtr()
		local literal = self:readWhile(function(c)
			return self.isNotEndOfStatement(c) and (not self.isWhitespace(c) and (not self.isSpecial(c) and (c ~= '"' and (c ~= "'" and (c ~= "!" and c ~= "\n")))))
		end)
		local endPos = self.stream:getPtr() - 1
		if self.isKeyword(literal) then
			local _arg0 = {
				kind = "Keyword",
				startPos = startPos,
				endPos = endPos,
				flags = 0,
				value = literal,
			}
			return _arg0
		end
		if table.find(ZrLexer.BOOLEAN, literal) ~= nil then
			local _arg0 = {
				kind = "Boolean",
				startPos = startPos,
				endPos = endPos,
				flags = 0,
				value = self:parseBoolean(literal),
				rawText = literal,
			}
			return _arg0
		end
		local previous = self:prev(2)
		if previous and (self:prevIs("Keyword", 2) and previous.value == "function") then
			local _arg0 = {
				kind = "Id",
				startPos = startPos,
				endPos = endPos,
				flags = 4,
				value = literal,
			}
			return _arg0
		end
		if previous and (self:prevIs("Keyword", 1) and previous.value == "enum") then
			local _arg0 = {
				kind = "Id",
				startPos = startPos,
				endPos = endPos,
				flags = 65,
				value = literal,
			}
			return _arg0
		end
		if previous and (self:prevIs("Keyword", 2) and (previous.value == "let" or previous.value == "const")) then
			if self.options.SyntaxHighlighterLexer and self.options.ExperimentalSyntaxHighlighter then
				local nextToken = self:peekNext(2)
				local _result = nextToken
				if _result ~= nil then
					_result = _result.kind
				end
				local _condition = _result == "Keyword"
				if _condition then
					_condition = nextToken.value == "function"
				end
				if _condition then
					local _arg0 = {
						kind = "Id",
						startPos = startPos,
						endPos = endPos,
						flags = 4,
						value = literal,
					}
					return _arg0
				end
			end
			local _arg0 = {
				kind = "Id",
				startPos = startPos,
				endPos = endPos,
				flags = 32,
				value = literal,
			}
			return _arg0
		end
		if self.options.SyntaxHighlighterLexer and self.options.ExperimentalSyntaxHighlighter then
			local nextToken = self:peekNext()
			local _result = nextToken
			if _result ~= nil then
				_result = _result.kind
			end
			local _condition = _result == "Special"
			if _condition then
				_condition = nextToken.value == ":"
			end
			if _condition then
				local _arg0 = {
					kind = "String",
					startPos = startPos,
					endPos = endPos,
					closed = true,
					flags = 8,
					value = literal,
				}
				return _arg0
			end
		end
		self.stream:setPtr(startPos)
		return self:readIdentifier(4, startPos)
	end
	function ZrLexer:readNumber()
		local startPos = self.stream:getPtr()
		local isDecimal = false
		local isNegative = false
		local number = self:readWhile(function(c, c1, idx)
			if idx == 0 and (c == "-" and self.isNumeric(c1)) then
				isNegative = true
				return true
			end
			if c == "." and self.isNumeric(c1) then
				if isDecimal then
					return false
				end
				isDecimal = true
				return true
			end
			return self.isNumeric(c)
		end)
		local endPos = self.stream:getPtr() - 1
		local _arg0 = {
			kind = "Number",
			value = tonumber(number),
			startPos = startPos,
			flags = 0,
			endPos = endPos,
			rawText = number,
		}
		return _arg0
	end
	function ZrLexer:readVariableToken()
		local startPos = self.stream:getPtr()
		local flags = 64
		-- skip $
		self.stream:next()
		return self:readIdentifier(flags, startPos)
	end
	function ZrLexer:readOption(prefix)
		local startPos = self.stream:getPtr()
		local optionName = self:readWhile(self.isOptionId)
		local endPos = self.stream:getPtr() - 1
		local _arg0 = {
			kind = "Option",
			value = optionName,
			flags = 0,
			startPos = startPos,
			endPos = endPos,
			prefix = prefix,
		}
		return _arg0
	end
	function ZrLexer:peekNext(offset)
		if offset == nil then
			offset = 1
		end
		local start = self.stream:getPtr()
		local i = 0
		local value
		while i < offset do
			self:readWhile(self.isWhitespace)
			value = self:readNext()
			i += 1
		end
		self.stream:setPtr(start)
		return value
	end
	function ZrLexer:readNext()
		local _binding = self
		local options = _binding.options
		-- skip whitespace
		if not options.SyntaxHighlighterLexer then
			self:readWhile(self.isWhitespace)
		end
		local startPos = self.stream:getPtr()
		if not self.stream:hasNext() then
			return nil
		end
		-- Get the next token
		local char = self.stream:peek()
		local nextChar = self.stream:peek(1)
		local code = (string.byte(char))
		if code > 126 then
			self.stream:next()
			local _arg0 = {
				kind = "Special",
				startPos = startPos,
				endPos = startPos,
				flags = 0,
				value = "?",
			}
			return _arg0
		end
		if options.SyntaxHighlighterLexer and self.isWhitespace(char) then
			self.stream:next()
			local _arg0 = {
				kind = "Whitespace",
				value = char,
				flags = 0,
				startPos = startPos,
				endPos = startPos,
			}
			return _arg0
		end
		if char == "#" or (char == "/" and self.stream:peek(1) == "/") then
			local value = self:readComment()
			if options.SyntaxHighlighterLexer then
				local _arg0 = {
					kind = "Comment",
					value = value,
					flags = 0,
					startPos = startPos,
					endPos = startPos + #value,
				}
				return _arg0
			end
			return self:readNext()
		end
		if char == "$" then
			return self:readVariableToken()
		end
		-- Handle double quote and single quote strings
		if char == '"' or char == "'" then
			return self:readStringToken(char)
		end
		if char == "-" then
			local nextChar = self.stream:peek(1)
			if nextChar == "-" then
				-- if dash dash prefix (aka 'option')
				self.stream:next(2)
				return self:readOption("--")
			end
		end
		if (char == "-" and self.isNumeric(nextChar)) or self.isNumeric(char) then
			return self:readNumber()
		end
		if table.find(ZrLexer.OPERATORS, char) ~= nil then
			local _arg0 = {
				kind = "Operator",
				startPos = startPos,
				flags = 0,
				endPos = startPos + #char,
				value = self:readWhile(function(c)
					return table.find(ZrLexer.OPERATORS, c) ~= nil
				end),
			}
			return _arg0
		end
		if table.find(ZrLexer.ENDOFSTATEMENT, char) ~= nil then
			local _arg0 = {
				kind = "EndOfStatement",
				startPos = startPos,
				flags = 0,
				endPos = startPos,
				value = self.stream:next(),
			}
			return _arg0
		end
		if table.find(ZrLexer.SPECIAL, char) ~= nil then
			if char == ":" then
				local prev = self:prevSkipWhitespace()
				if prev then
					prev.flags = bit32.bor(prev.flags, 8)
				end
			end
			if char == "." then
				local followedBy = self.stream:peek(1)
				if followedBy == "." then
					local _arg0 = {
						kind = "Operator",
						startPos = startPos,
						endPos = startPos + 1,
						value = string.rep(self.stream:next(2), 2),
						flags = 0,
					}
					return _arg0
				end
			end
			local _arg0 = {
				kind = "Special",
				startPos = startPos,
				endPos = startPos,
				flags = 0,
				value = self.stream:next(),
			}
			return _arg0
		end
		return self:readLiteralString()
	end
	function ZrLexer:readIdentifier(flags, startPos)
		if startPos == nil then
			startPos = self.stream:getPtr()
		end
		local properties = {}
		-- read the id
		local id = self:readWhile(self.isId)
		-- read any property access
		while self.stream:hasNext() and self.stream:peek() == "." do
			self.stream:next()
			local id = self:readWhile(self.isId)
			if id == "" then
				flags = 16
			end
			-- ▼ Array.push ▼
			properties[#properties + 1] = id
			-- ▲ Array.push ▲
		end
		local endPos = self.stream:getPtr() - 1
		if #properties > 0 then
			local _arg0 = {
				kind = "Property",
				startPos = startPos,
				endPos = endPos,
				flags = flags,
				properties = properties,
				value = id,
			}
			return _arg0
		else
			local _arg0 = {
				kind = "Id",
				startPos = startPos,
				flags = flags,
				endPos = endPos,
				value = id,
			}
			return _arg0
		end
	end
	function ZrLexer:isNextOfKind(kind)
		local _result = self:peek()
		if _result ~= nil then
			_result = _result.kind
		end
		return _result == kind
	end
	function ZrLexer:isNextOfAnyKind(...)
		local kind = { ... }
		for _, k in ipairs(kind) do
			if self:isNextOfKind(k) then
				return true
			end
		end
		return false
	end
	function ZrLexer:fetchNextToken()
		if self.currentToken then
			return self.currentToken
		else
			local nextToken = self:readNext()
			if nextToken then
				local _previousTokens = self.previousTokens
				-- ▼ Array.push ▼
				_previousTokens[#_previousTokens + 1] = nextToken
				-- ▲ Array.push ▲
			end
			return nextToken
		end
	end
	function ZrLexer:peek()
		self.currentToken = self:fetchNextToken()
		return self.currentToken
	end
	function ZrLexer:prev(offset)
		if offset == nil then
			offset = 1
		end
		local _arg0 = offset > 0
		assert(_arg0)
		return self.previousTokens[#self.previousTokens - offset + 1]
	end
	function ZrLexer:prevSkipWhitespace(offset)
		if offset == nil then
			offset = 1
		end
		local _arg0 = offset > 0
		assert(_arg0)
		do
			local i = #self.previousTokens - offset
			local _shouldIncrement = false
			while true do
				if _shouldIncrement then
					i -= 1
				else
					_shouldIncrement = true
				end
				if not (i > 0) then
					break
				end
				local token = self.previousTokens[i + 1]
				if token.kind ~= "Whitespace" then
					return token
				end
			end
		end
		return nil
	end
	function ZrLexer:prevIs(kind, offset)
		local prev = self:prev(offset)
		local _result = prev
		if _result ~= nil then
			_result = _result.kind
		end
		return _result == kind
	end
	function ZrLexer:current()
		return self.currentToken
	end
	function ZrLexer:next()
		local token = self:fetchNextToken()
		self.currentToken = nil
		return token
	end
	function ZrLexer:hasNext()
		return self.currentToken ~= nil or self.stream:hasNext()
	end
	ZrLexer.OPERATORS = Grammar.Operators
	ZrLexer.ENDOFSTATEMENT = Grammar.EndOfStatement
	ZrLexer.SPECIAL = Grammar.Punctuation
	ZrLexer.BOOLEAN = Grammar.BooleanLiterals
	ZrLexer.IsPrimitiveValueToken = function(token)
		return token.kind == "String" or (token.kind == "InterpolatedString" or (token.kind == "Number" or (token.kind == "Boolean" or (token.kind == "Keyword" and token.value == Keywords.UNDEFINED))))
	end
end
return {
	default = ZrLexer,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="749">
                  <Properties>
                    <string name="Name">Nodes</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local ZrNodeKind = TS.import(script, script, "Enum").ZrNodeKind
local _Guards = TS.import(script, script, "Guards")
local isNode = _Guards.isNode
local isNodeIn = _Guards.isNodeIn
local getSiblingNode = _Guards.getSiblingNode
local assertIsNode = _Guards.assertIsNode
local isValidPrefixCharacter = _Guards.isValidPrefixCharacter
local getNodesOfType = _Guards.getNodesOfType
local hasNodeFlag = _Guards.hasNodeFlag
local typeGuards = TS.import(script, script, "Guards")
local _Functions = TS.import(script, script, "Functions")
local getKindName = _Functions.getKindName
local getNodeKindName = _Functions.getNodeKindName
return {
	CmdSyntaxKind = ZrNodeKind,
	ZrNodeKind = ZrNodeKind,
	isNode = isNode,
	isNodeIn = isNodeIn,
	getSiblingNode = getSiblingNode,
	assertIsNode = assertIsNode,
	isValidPrefixCharacter = isValidPrefixCharacter,
	getNodesOfType = getNodesOfType,
	hasNodeFlag = hasNodeFlag,
	getKindName = getKindName,
	getNodeKindName = getNodeKindName,
	typeGuards = typeGuards,
}
]]></string>
                  </Properties>
                  <Item class="ModuleScript" referent="750">
                    <Properties>
                      <string name="Name">Create</string>
                      <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local ZrNodeKind = TS.import(script, script.Parent, "Enum").ZrNodeKind
local isNode = TS.import(script, script.Parent, "Guards").isNode
local function createNode(kind)
	return {
		kind = kind,
		flags = 0,
	}
end
-- * @internal
local function updateNodeInternal(node, props)
	for key, prop in pairs(props) do
		-- * @ts-ignore
		node[key] = prop
	end
	return node
end
local function createInterpolatedString(...)
	local values = { ... }
	local node = createNode(ZrNodeKind.InterpolatedString)
	node.values = values
	node.children = values
	return node
end
local function createReturnStatement(expression)
	local node = createNode(ZrNodeKind.ReturnStatement)
	node.expression = expression
	node.children = { expression }
	return node
end
local function createArrayLiteral(values)
	local node = createNode(ZrNodeKind.ArrayLiteralExpression)
	node.values = values
	node.children = values
	return node
end
local function createEnumDeclaration(name, values)
	local node = createNode(ZrNodeKind.EnumDeclaration)
	node.name = name
	node.values = values
	node.children = values
	return node
end
local function createEnumItemExpression(name)
	local node = createNode(ZrNodeKind.EnumItemExpression)
	node.name = name
	return node
end
local function withError(node)
	node.flags = bit32.bor(node.flags, 65536)
	return node
end
local function createExportKeyword()
	local node = createNode(ZrNodeKind.ExportKeyword)
	return node
end
local function createUndefined()
	local node = createNode(ZrNodeKind.UndefinedKeyword)
	return node
end
local function createPropertyAssignment(name, initializer)
	local node = createNode(ZrNodeKind.PropertyAssignment)
	node.name = name
	node.initializer = initializer
	node.children = { name, initializer }
	return node
end
local function createObjectLiteral(values)
	local node = createNode(ZrNodeKind.ObjectLiteralExpression)
	node.values = values
	node.children = values
	return node
end
local function createArrayIndexExpression(expression, index)
	local node = createNode(ZrNodeKind.ArrayIndexExpression)
	node.expression = expression
	node.index = index
	node.children = { expression, index }
	return node
end
local function createPropertyAccessExpression(expression, name)
	local node = createNode(ZrNodeKind.PropertyAccessExpression)
	node.expression = expression
	node.name = name
	node.children = { expression, name }
	return node
end
local function createNodeError(message, node)
	return {
		node = node,
		message = message,
	}
end
local function createIfStatement(condition, thenStatement, elseStatement)
	local node = createNode(ZrNodeKind.IfStatement)
	node.condition = condition
	node.thenStatement = thenStatement
	node.elseStatement = elseStatement
	node.children = {}
	if condition then
		local _children = node.children
		-- ▼ Array.push ▼
		_children[#_children + 1] = condition
		-- ▲ Array.push ▲
	end
	if thenStatement then
		local _children = node.children
		-- ▼ Array.push ▼
		_children[#_children + 1] = thenStatement
		-- ▲ Array.push ▲
	end
	if elseStatement then
		local _children = node.children
		-- ▼ Array.push ▼
		_children[#_children + 1] = elseStatement
		-- ▲ Array.push ▲
	end
	return node
end
local function createExpressionStatement(expression)
	local node = createNode(ZrNodeKind.ExpressionStatement)
	node.expression = expression
	node.children = { expression }
	return node
end
local function createRangeExpression(left, right)
	local node = createNode(ZrNodeKind.RangeExpression)
	node.left = left
	node.right = right
	return node
end
local function createForInStatement(initializer, expression, statement)
	local node = createNode(ZrNodeKind.ForInStatement)
	node.initializer = initializer
	node.children = { initializer }
	if expression then
		node.expression = expression
		local _children = node.children
		-- ▼ Array.push ▼
		_children[#_children + 1] = expression
		-- ▲ Array.push ▲
	end
	if statement then
		node.statement = statement
		local _children = node.children
		-- ▼ Array.push ▼
		_children[#_children + 1] = statement
		-- ▲ Array.push ▲
	end
	return node
end
--[[
	*
	* Flattens an interpolated string into a regular string
	* @param expression The interpolated string expression
	* @param variables The variables for identifiers etc. to flatten with
]]
local function flattenInterpolatedString(expression, variables)
	local text = ""
	for _, value in ipairs(expression.values) do
		if isNode(value, ZrNodeKind.Identifier) then
			text ..= tostring(variables[value.name])
		else
			text ..= value.text
		end
	end
	local node = createNode(ZrNodeKind.String)
	node.text = text
	return node
end
local function createBlock(statements)
	local node = createNode(ZrNodeKind.Block)
	node.statements = statements
	node.children = statements
	return node
end
local function createTypeReference(typeName)
	local _arg0 = {
		kind = ZrNodeKind.TypeReference,
		typeName = typeName,
		children = {},
		flags = 0,
	}
	return _arg0
end
local createIdentifier
local function createKeywordTypeNode(keyword)
	return createTypeReference(createIdentifier(keyword))
end
local function createParameter(name, typeName)
	local node = createNode(ZrNodeKind.Parameter)
	node.name = name
	node.type = typeName
	node.children = { name }
	return node
end
local function createFunctionExpression(parameters, body)
	local node = createNode(ZrNodeKind.FunctionExpression)
	node.parameters = parameters
	local _array = {}
	local _length = #_array
	table.move(parameters, 1, #parameters, _length + 1, _array)
	node.children = _array
	if body then
		node.body = body
		local _children = node.children
		-- ▼ Array.push ▼
		_children[#_children + 1] = body
		-- ▲ Array.push ▲
	end
	return node
end
local function createFunctionDeclaration(name, parameters, body)
	local node = createNode(ZrNodeKind.FunctionDeclaration)
	node.name = name
	node.children = { name }
	node.parameters = parameters
	if body then
		node.body = body
		local _children = node.children
		-- ▼ Array.push ▼
		_children[#_children + 1] = body
		-- ▲ Array.push ▲
	end
	return node
end
local function createParenthesizedExpression(expression)
	local node = createNode(ZrNodeKind.ParenthesizedExpression)
	node.expression = expression
	node.children = { expression }
	return node
end
-- /** @deprecated Use createCallExpression */
-- export function createCommandStatement(command: CommandName, children: Node[], startPos?: number, endPos?: number) {
-- const statement: CommandStatement = {
-- kind: ZrNodeKind.CommandStatement,
-- command,
-- children,
-- flags: 0,
-- startPos: startPos,
-- endPos,
-- };
-- for (const child of statement.children) {
-- child.parent = statement;
-- }
-- return statement;
-- }
local function createSimpleCallExpression(expression, args, startPos, endPos)
	local node = createNode(ZrNodeKind.SimpleCallExpression)
	node.expression = expression
	node.arguments = args
	node.startPos = startPos
	node.endPos = endPos
	local _array = { expression }
	local _length = #_array
	table.move(args, 1, #args, _length + 1, _array)
	node.children = _array
	return node
end
local function createCallExpression(expression, args, options, startPos, endPos)
	local result = createNode(ZrNodeKind.CallExpression)
	result.expression = expression
	result.arguments = args
	result.startPos = startPos
	result.endPos = endPos
	local _condition = options
	if _condition == nil then
		_condition = {}
	end
	result.options = _condition
	return result
end
local function createInnerExpression(expression, startPos, endPos)
	local node = createNode(ZrNodeKind.InnerExpression)
	node.expression = expression
	node.startPos = startPos
	node.endPos = endPos
	node.children = { expression }
	return node
end
local function createPrefixToken(value)
	return {
		kind = ZrNodeKind.PrefixToken,
		value = value,
		flags = 0,
		children = {},
	}
end
local function createPrefixExpression(prefix, expression)
	local node = createNode(ZrNodeKind.PrefixExpression)
	node.prefix = prefix
	node.expression = expression
	node.children = { prefix, expression }
	return node
end
local function createSourceFile(children)
	local statement = {
		kind = ZrNodeKind.Source,
		children = children,
		flags = 0,
	}
	for _, child in ipairs(statement.children) do
		child.parent = statement
	end
	return statement
end
local function createStringNode(text, quotes)
	-- return { kind: ZrNodeKind.String, text, quotes, flags: 0 };
	local node = createNode(ZrNodeKind.String)
	node.text = text
	node.quotes = quotes
	return node
end
local function createNumberNode(value)
	local node = createNode(ZrNodeKind.Number)
	node.value = value
	return node
end
function createIdentifier(name, prefix)
	if prefix == nil then
		prefix = "$"
	end
	local node = createNode(ZrNodeKind.Identifier)
	node.name = name
	node.prefix = prefix
	return node
end
local function createOptionKey(flag, endPos)
	-- return { kind: ZrNodeKind.OptionKey, flag, flags: 0, startPos: endPos ? endPos - flag.size() : 0, endPos };
	local node = createNode(ZrNodeKind.OptionKey)
	node.flag = flag
	node.startPos = endPos ~= 0 and (endPos == endPos and endPos) and endPos - #flag or 0
	node.endPos = endPos
	return node
end
local function createOptionExpression(option, expression)
	local node = createNode(ZrNodeKind.OptionExpression)
	node.startPos = option.startPos
	node.endPos = expression.endPos
	node.option = option
	node.expression = expression
	return node
end
local function createOperator(operator, startPos)
	local _object = {
		kind = ZrNodeKind.OperatorToken,
		operator = operator,
		flags = 0,
		children = {},
		startPos = startPos,
	}
	local _left = "endPos"
	local _condition = startPos
	if _condition == nil then
		_condition = 0
	end
	_object[_left] = _condition + #operator - 1
	return _object
end
local function createVariableDeclaration(identifier, expression)
	local node = createNode(ZrNodeKind.VariableDeclaration)
	node.flags = 2
	node.identifier = identifier
	node.expression = expression
	node.children = { identifier, expression }
	node.startPos = identifier.startPos
	node.endPos = expression.endPos
	return node
end
local function createVariableStatement(declaration, modifiers)
	local node = createNode(ZrNodeKind.VariableStatement)
	node.declaration = declaration
	node.modifiers = modifiers
	node.children = { declaration }
	return node
end
local function createBooleanNode(value)
	local node = createNode(ZrNodeKind.Boolean)
	node.value = value
	return node
end
local function createEndOfStatementNode()
	return {
		kind = ZrNodeKind.EndOfStatement,
		flags = 0,
		children = {},
	}
end
local function createInvalidNode(message, expression, startPos, endPos)
	local _object = {
		kind = ZrNodeKind.Invalid,
		expression = expression,
		message = message,
		flags = 65536,
		children = {},
	}
	local _left = "startPos"
	local _condition = startPos
	if _condition == nil then
		_condition = expression.startPos
	end
	_object[_left] = _condition
	local _left_1 = "endPos"
	local _condition_1 = endPos
	if _condition_1 == nil then
		_condition_1 = expression.endPos
	end
	_object[_left_1] = _condition_1
	return _object
end
local function createBinaryExpression(left, op, right, startPos, endPos)
	local node = createNode(ZrNodeKind.BinaryExpression)
	node.left = left
	node.operator = op
	node.right = right
	node.startPos = startPos
	node.endPos = endPos
	left.parent = node
	right.parent = node
	node.children = { left, right }
	return node
end
local function createUnaryExpression(op, expression, startPos, endPos)
	local node = createNode(ZrNodeKind.UnaryExpression)
	node.expression = expression
	node.operator = op
	node.startPos = startPos
	node.endPos = endPos
	node.parent = expression
	node.children = { expression }
	return node
end
return {
	updateNodeInternal = updateNodeInternal,
	createInterpolatedString = createInterpolatedString,
	createReturnStatement = createReturnStatement,
	createArrayLiteral = createArrayLiteral,
	createEnumDeclaration = createEnumDeclaration,
	createEnumItemExpression = createEnumItemExpression,
	withError = withError,
	createExportKeyword = createExportKeyword,
	createUndefined = createUndefined,
	createPropertyAssignment = createPropertyAssignment,
	createObjectLiteral = createObjectLiteral,
	createArrayIndexExpression = createArrayIndexExpression,
	createPropertyAccessExpression = createPropertyAccessExpression,
	createNodeError = createNodeError,
	createIfStatement = createIfStatement,
	createExpressionStatement = createExpressionStatement,
	createRangeExpression = createRangeExpression,
	createForInStatement = createForInStatement,
	flattenInterpolatedString = flattenInterpolatedString,
	createBlock = createBlock,
	createTypeReference = createTypeReference,
	createKeywordTypeNode = createKeywordTypeNode,
	createParameter = createParameter,
	createFunctionExpression = createFunctionExpression,
	createFunctionDeclaration = createFunctionDeclaration,
	createParenthesizedExpression = createParenthesizedExpression,
	createSimpleCallExpression = createSimpleCallExpression,
	createCallExpression = createCallExpression,
	createInnerExpression = createInnerExpression,
	createPrefixToken = createPrefixToken,
	createPrefixExpression = createPrefixExpression,
	createSourceFile = createSourceFile,
	createStringNode = createStringNode,
	createNumberNode = createNumberNode,
	createIdentifier = createIdentifier,
	createOptionKey = createOptionKey,
	createOptionExpression = createOptionExpression,
	createOperator = createOperator,
	createVariableDeclaration = createVariableDeclaration,
	createVariableStatement = createVariableStatement,
	createBooleanNode = createBooleanNode,
	createEndOfStatementNode = createEndOfStatementNode,
	createInvalidNode = createInvalidNode,
	createBinaryExpression = createBinaryExpression,
	createUnaryExpression = createUnaryExpression,
}
]]></string>
                    </Properties>
                  </Item>
                  <Item class="ModuleScript" referent="751">
                    <Properties>
                      <string name="Name">Enum</string>
                      <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local ZrNodeKind
do
	local _inverse = {}
	ZrNodeKind = setmetatable({}, {
		__index = _inverse,
	})
	ZrNodeKind.Unknown = 0
	_inverse[0] = "Unknown"
	ZrNodeKind.Source = 1
	_inverse[1] = "Source"
	ZrNodeKind.ExpressionStatement = 2
	_inverse[2] = "ExpressionStatement"
	ZrNodeKind.CallExpression = 3
	_inverse[3] = "CallExpression"
	ZrNodeKind.SimpleCallExpression = 4
	_inverse[4] = "SimpleCallExpression"
	ZrNodeKind.InnerExpression = 5
	_inverse[5] = "InnerExpression"
	ZrNodeKind.Block = 6
	_inverse[6] = "Block"
	ZrNodeKind.String = 7
	_inverse[7] = "String"
	ZrNodeKind.Boolean = 8
	_inverse[8] = "Boolean"
	ZrNodeKind.Number = 9
	_inverse[9] = "Number"
	ZrNodeKind.OptionKey = 10
	_inverse[10] = "OptionKey"
	ZrNodeKind.OptionExpression = 11
	_inverse[11] = "OptionExpression"
	ZrNodeKind.Identifier = 12
	_inverse[12] = "Identifier"
	ZrNodeKind.OperatorToken = 13
	_inverse[13] = "OperatorToken"
	ZrNodeKind.BinaryExpression = 14
	_inverse[14] = "BinaryExpression"
	ZrNodeKind.InterpolatedString = 15
	_inverse[15] = "InterpolatedString"
	ZrNodeKind.PrefixToken = 16
	_inverse[16] = "PrefixToken"
	ZrNodeKind.PrefixExpression = 17
	_inverse[17] = "PrefixExpression"
	ZrNodeKind.EndOfStatement = 18
	_inverse[18] = "EndOfStatement"
	ZrNodeKind.VariableDeclaration = 19
	_inverse[19] = "VariableDeclaration"
	ZrNodeKind.VariableStatement = 20
	_inverse[20] = "VariableStatement"
	ZrNodeKind.Invalid = 21
	_inverse[21] = "Invalid"
	ZrNodeKind.IfStatement = 22
	_inverse[22] = "IfStatement"
	ZrNodeKind.ArrayLiteralExpression = 23
	_inverse[23] = "ArrayLiteralExpression"
	ZrNodeKind.ArrayIndexExpression = 24
	_inverse[24] = "ArrayIndexExpression"
	ZrNodeKind.PropertyAccessExpression = 25
	_inverse[25] = "PropertyAccessExpression"
	ZrNodeKind.ForInStatement = 26
	_inverse[26] = "ForInStatement"
	ZrNodeKind.ParenthesizedExpression = 27
	_inverse[27] = "ParenthesizedExpression"
	ZrNodeKind.FunctionDeclaration = 28
	_inverse[28] = "FunctionDeclaration"
	ZrNodeKind.FunctionExpression = 29
	_inverse[29] = "FunctionExpression"
	ZrNodeKind.Parameter = 30
	_inverse[30] = "Parameter"
	ZrNodeKind.TypeReference = 31
	_inverse[31] = "TypeReference"
	ZrNodeKind.ObjectLiteralExpression = 32
	_inverse[32] = "ObjectLiteralExpression"
	ZrNodeKind.PropertyAssignment = 33
	_inverse[33] = "PropertyAssignment"
	ZrNodeKind.UnaryExpression = 34
	_inverse[34] = "UnaryExpression"
	ZrNodeKind.UndefinedKeyword = 35
	_inverse[35] = "UndefinedKeyword"
	ZrNodeKind.ExportKeyword = 36
	_inverse[36] = "ExportKeyword"
	ZrNodeKind.RangeExpression = 37
	_inverse[37] = "RangeExpression"
	ZrNodeKind.ReturnStatement = 38
	_inverse[38] = "ReturnStatement"
	ZrNodeKind.EnumDeclaration = 39
	_inverse[39] = "EnumDeclaration"
	ZrNodeKind.EnumItemExpression = 40
	_inverse[40] = "EnumItemExpression"
end
local ZrTypeKeyword
do
	local _inverse = {}
	ZrTypeKeyword = setmetatable({}, {
		__index = _inverse,
	})
	ZrTypeKeyword.Any = "any"
	_inverse.any = "Any"
end
local CmdSyntaxKind = ZrNodeKind
return {
	ZrNodeKind = ZrNodeKind,
	ZrTypeKeyword = ZrTypeKeyword,
	CmdSyntaxKind = CmdSyntaxKind,
}
]]></string>
                    </Properties>
                  </Item>
                  <Item class="ModuleScript" referent="752">
                    <Properties>
                      <string name="Name">Functions</string>
                      <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local ZrNodeKind = TS.import(script, script.Parent, "Enum").ZrNodeKind
local function getKindName(kind)
	if kind == nil then
		return "<none>"
	end
	return ZrNodeKind[kind]
end
local function isNode(node, kind)
	return node.kind == kind
end
local function interpolate(node)
	if isNode(node, ZrNodeKind.Identifier) then
		return node.name
	elseif isNode(node, ZrNodeKind.PropertyAccessExpression) then
		return tostring(node.name) .. "." .. interpolate(node.expression)
	elseif isNode(node, ZrNodeKind.ArrayIndexExpression) then
		return interpolate(node.expression) .. "." .. tostring(node.index.value)
	end
	error("Invalid")
end
local function getVariableName(node)
	return interpolate(node)
end
local function getFriendlyName(node, isConst)
	if isConst == nil then
		isConst = false
	end
	if node.kind == ZrNodeKind.String or node.kind == ZrNodeKind.InterpolatedString then
		return "string"
	elseif node.kind == ZrNodeKind.Number then
		return "number"
	elseif node.kind == ZrNodeKind.Boolean then
		local _result
		if isConst then
			_result = node.value
		else
			_result = "boolean"
		end
		return _result
	end
	return getKindName(node.kind)
end
local function getNodeKindName(node)
	if node == nil then
		return "<none>"
	end
	return getKindName(node.kind)
end
local function isParentNode(node)
	return node.children ~= nil
end
-- export function getNextNode(node: Node): Node | undefined {
-- const { parent } = node;
-- if (parent && isParentNode(parent)) {
-- const index = parent.children.indexOf(node) + 1;
-- return parent.children[index];
-- }
-- }
-- export function getPreviousNode(node: Node): Node | undefined {
-- const { parent } = node;
-- if (parent && isParentNode(parent)) {
-- const index = parent.children.indexOf(node) - 1;
-- return parent.children[index];
-- }
-- }
return {
	getKindName = getKindName,
	getVariableName = getVariableName,
	getFriendlyName = getFriendlyName,
	getNodeKindName = getNodeKindName,
	isParentNode = isParentNode,
}
]]></string>
                    </Properties>
                  </Item>
                  <Item class="ModuleScript" referent="753">
                    <Properties>
                      <string name="Name">Guards</string>
                      <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local VALID_PREFIX_CHARS = TS.import(script, script.Parent, "NodeTypes").VALID_PREFIX_CHARS
local ZrNodeKind = TS.import(script, script.Parent, "Enum").ZrNodeKind
local _Functions = TS.import(script, script.Parent, "Functions")
local getKindName = _Functions.getKindName
local getNodeKindName = _Functions.getNodeKindName
local function isNode(node, typeName)
	return node ~= nil and node.kind == typeName
end
local function hasNodeFlag(node, flag)
	return node.flags ~= nil and (bit32.band(node.flags, flag)) ~= 0
end
local function assertIsNode(node, typeName)
	if not isNode(node, typeName) then
		error("Expected " .. (getKindName(typeName) .. (", got " .. getNodeKindName(node))))
	end
end
local function getNodesOfType(nodes, typeName)
	local _arg0 = function(node)
		return isNode(node, typeName)
	end
	-- ▼ ReadonlyArray.filter ▼
	local _newValue = {}
	local _length = 0
	for _k, _v in ipairs(nodes) do
		if _arg0(_v, _k - 1, nodes) == true then
			_length += 1
			_newValue[_length] = _v
		end
	end
	-- ▲ ReadonlyArray.filter ▲
	return _newValue
end
local function getSiblingNode(nodes, kind)
	local _arg0 = function(f)
		return f.kind == kind
	end
	-- ▼ ReadonlyArray.find ▼
	local _result = nil
	for _i, _v in ipairs(nodes) do
		if _arg0(_v, _i - 1, nodes) == true then
			_result = _v
			break
		end
	end
	-- ▲ ReadonlyArray.find ▲
	return _result
end
local function isNodeIn(node, typeName)
	local _condition = node ~= nil
	if _condition then
		local _kind = node.kind
		_condition = table.find(typeName, _kind) ~= nil
	end
	return _condition
end
local function isValidPrefixCharacter(input)
	return table.find(VALID_PREFIX_CHARS, input) ~= nil
end
--[[
	*
	* @internal
]]
local VALID_VARIABLE_NAME = "^[A-Za-z_][A-Za-z0-9_]*$"
--[[
	*
	* @internal
]]
local VALID_COMMAND_NAME = "^[A-Za-z][A-Z0-9a-z_%-]*$"
--[[
	*
	* @internal
]]
local PREFIXABLE = { ZrNodeKind.String, ZrNodeKind.InterpolatedString, ZrNodeKind.Number, ZrNodeKind.Boolean }
--[[
	*
	* Can this expression be prefixed?
]]
local function isPrefixableExpression(node)
	return isNodeIn(node, PREFIXABLE)
end
--[[
	*
	* @internal
]]
local ASSIGNABLE = { ZrNodeKind.String, ZrNodeKind.InterpolatedString, ZrNodeKind.Identifier, ZrNodeKind.Number, ZrNodeKind.Boolean, ZrNodeKind.InnerExpression, ZrNodeKind.ArrayLiteralExpression, ZrNodeKind.PropertyAccessExpression, ZrNodeKind.ArrayIndexExpression, ZrNodeKind.ObjectLiteralExpression, ZrNodeKind.BinaryExpression, ZrNodeKind.UnaryExpression, ZrNodeKind.CallExpression, ZrNodeKind.SimpleCallExpression, ZrNodeKind.UndefinedKeyword, ZrNodeKind.FunctionExpression, ZrNodeKind.ParenthesizedExpression }
--[[
	*
	* Can this expression be prefixed?
]]
local function isAssignableExpression(node)
	return isNodeIn(node, ASSIGNABLE)
end
--[[
	*
	* @internal
]]
local LIT = { ZrNodeKind.String, ZrNodeKind.InterpolatedString, ZrNodeKind.Identifier, ZrNodeKind.Number, ZrNodeKind.Boolean }
local EXPRESSIONABLE = { ZrNodeKind.VariableStatement, ZrNodeKind.BinaryExpression }
local function isSourceFile(node)
	return node ~= nil and node.kind == ZrNodeKind.Source
end
-- * @deprecated
local isSource = isSourceFile
local function isParameterDeclaration(node)
	return node ~= nil and node.kind == ZrNodeKind.Parameter
end
-- REGION Expressions
-- * @deprecated
local function isValidExpression(node)
	return isNodeIn(node, EXPRESSIONABLE)
end
--[[
	*
	* Is this expression considered a primitive type?
]]
local function isPrimitiveExpression(node)
	return isNodeIn(node, ASSIGNABLE)
end
local function isSimpleCallExpression(node)
	return node ~= nil and node.kind == ZrNodeKind.SimpleCallExpression
end
local function isCallExpression(node)
	return node ~= nil and node.kind == ZrNodeKind.CallExpression
end
local function isCallableExpression(node)
	return isSimpleCallExpression(node) or isCallExpression(node)
end
local function isOptionExpression(node)
	return node ~= nil and node.kind == ZrNodeKind.OptionExpression
end
local function isExpressionStatement(node)
	return node ~= nil and node.kind == ZrNodeKind.ExpressionStatement
end
local function isUnaryExpression(node)
	return node ~= nil and node.kind == ZrNodeKind.UnaryExpression
end
local function isParenthesizedExpression(node)
	return node ~= nil and node.kind == ZrNodeKind.ParenthesizedExpression
end
-- REGION Statements
local function isReturnStatement(node)
	return node ~= nil and node.kind == ZrNodeKind.ReturnStatement
end
local function isBlock(node)
	return node ~= nil and node.kind == ZrNodeKind.Block
end
-- REGION indexing
local function isArrayIndexExpression(node)
	return node ~= nil and node.kind == ZrNodeKind.ArrayIndexExpression
end
local function isPropertyAccessExpression(node)
	return node ~= nil and node.kind == ZrNodeKind.PropertyAccessExpression
end
local function isPropertyAssignment(node)
	return node ~= nil and node.kind == ZrNodeKind.PropertyAssignment
end
-- REGION variables
local function isVariableStatement(node)
	return node ~= nil and node.kind == ZrNodeKind.VariableStatement
end
local function isVariableDeclaration(node)
	return node ~= nil and node.kind == ZrNodeKind.VariableDeclaration
end
-- REGION Iterable
local function isForInStatement(node)
	return node ~= nil and node.kind == ZrNodeKind.ForInStatement
end
local function isStringExpression(node)
	return node ~= nil and (node.kind == ZrNodeKind.String or node.kind == ZrNodeKind.InterpolatedString)
end
-- REGION function checks
local function isFunctionDeclaration(node)
	return node ~= nil and node.kind == ZrNodeKind.FunctionDeclaration
end
local function isFunctionExpression(node)
	return node ~= nil and node.kind == ZrNodeKind.FunctionExpression
end
-- / REGION Literal Checks
local function isIdentifier(node)
	return node ~= nil and node.kind == ZrNodeKind.Identifier
end
local function isObjectLiteralExpression(node)
	return node ~= nil and node.kind == ZrNodeKind.ObjectLiteralExpression
end
local function isArrayLiteralExpression(node)
	return node ~= nil and node.kind == ZrNodeKind.ArrayLiteralExpression
end
local function isBooleanLiteral(node)
	return node ~= nil and node.kind == ZrNodeKind.Boolean
end
local function isNumberLiteral(node)
	return node ~= nil and node.kind == ZrNodeKind.Number
end
local function isStringLiteral(node)
	return node ~= nil and node.kind == ZrNodeKind.String
end
-- * @deprecated
local function isPrefixToken(node)
	return node ~= nil and node.kind == ZrNodeKind.PrefixToken
end
local function isOperatorToken(node)
	return node ~= nil and node.kind == ZrNodeKind.OperatorToken
end
local function isBinaryExpression(node)
	return node ~= nil and node.kind == ZrNodeKind.BinaryExpression
end
local function isOptionKey(node)
	return node ~= nil and node.kind == ZrNodeKind.OptionKey
end
-- * @deprecated
local function isInvalid(node)
	return node ~= nil and node.kind == ZrNodeKind.Invalid
end
-- REGION Keywords
local function isExportKeyword(node)
	return node ~= nil and node.kind == ZrNodeKind.ExportKeyword
end
local function isUndefinedKeyword(node)
	return node ~= nil and node.kind == ZrNodeKind.UndefinedKeyword
end
return {
	isNode = isNode,
	hasNodeFlag = hasNodeFlag,
	assertIsNode = assertIsNode,
	getNodesOfType = getNodesOfType,
	getSiblingNode = getSiblingNode,
	isNodeIn = isNodeIn,
	isValidPrefixCharacter = isValidPrefixCharacter,
	isPrefixableExpression = isPrefixableExpression,
	isAssignableExpression = isAssignableExpression,
	isSourceFile = isSourceFile,
	isParameterDeclaration = isParameterDeclaration,
	isValidExpression = isValidExpression,
	isPrimitiveExpression = isPrimitiveExpression,
	isSimpleCallExpression = isSimpleCallExpression,
	isCallExpression = isCallExpression,
	isCallableExpression = isCallableExpression,
	isOptionExpression = isOptionExpression,
	isExpressionStatement = isExpressionStatement,
	isUnaryExpression = isUnaryExpression,
	isParenthesizedExpression = isParenthesizedExpression,
	isReturnStatement = isReturnStatement,
	isBlock = isBlock,
	isArrayIndexExpression = isArrayIndexExpression,
	isPropertyAccessExpression = isPropertyAccessExpression,
	isPropertyAssignment = isPropertyAssignment,
	isVariableStatement = isVariableStatement,
	isVariableDeclaration = isVariableDeclaration,
	isForInStatement = isForInStatement,
	isStringExpression = isStringExpression,
	isFunctionDeclaration = isFunctionDeclaration,
	isFunctionExpression = isFunctionExpression,
	isIdentifier = isIdentifier,
	isObjectLiteralExpression = isObjectLiteralExpression,
	isArrayLiteralExpression = isArrayLiteralExpression,
	isBooleanLiteral = isBooleanLiteral,
	isNumberLiteral = isNumberLiteral,
	isStringLiteral = isStringLiteral,
	isPrefixToken = isPrefixToken,
	isOperatorToken = isOperatorToken,
	isBinaryExpression = isBinaryExpression,
	isOptionKey = isOptionKey,
	isInvalid = isInvalid,
	isExportKeyword = isExportKeyword,
	isUndefinedKeyword = isUndefinedKeyword,
	VALID_VARIABLE_NAME = VALID_VARIABLE_NAME,
	VALID_COMMAND_NAME = VALID_COMMAND_NAME,
	ASSIGNABLE = ASSIGNABLE,
	isSource = isSource,
}
]]></string>
                    </Properties>
                  </Item>
                  <Item class="ModuleScript" referent="754">
                    <Properties>
                      <string name="Name">NodeTypes</string>
                      <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
-- eslint-disable @typescript-eslint/no-explicit-any
--[[
	*
	* An expression like `func(...)`
]]
--[[
	*
	* An expression like `func ...`
]]
local VALID_PREFIX_CHARS = { "~", "@", "%", "^", "*", "!" }
return {
	VALID_PREFIX_CHARS = VALID_PREFIX_CHARS,
}
]]></string>
                    </Properties>
                  </Item>
                </Item>
                <Item class="ModuleScript" referent="755">
                  <Properties>
                    <string name="Name">Parser</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local ZrLexer = TS.import(script, script.Parent, "Lexer").default
local _Nodes = TS.import(script, script.Parent, "Nodes")
local ZrNodeKind = _Nodes.ZrNodeKind
local isNode = _Nodes.isNode
local ErrorStrings = TS.import(script, script.Parent, "ErrorStrings")
local _Create = TS.import(script, script.Parent, "Nodes", "Create")
local createArrayIndexExpression = _Create.createArrayIndexExpression
local createArrayLiteral = _Create.createArrayLiteral
local createBinaryExpression = _Create.createBinaryExpression
local createBlock = _Create.createBlock
local createBooleanNode = _Create.createBooleanNode
local createCallExpression = _Create.createCallExpression
local createSourceFile = _Create.createSourceFile
local createExpressionStatement = _Create.createExpressionStatement
local createForInStatement = _Create.createForInStatement
local createFunctionDeclaration = _Create.createFunctionDeclaration
local createIdentifier = _Create.createIdentifier
local createIfStatement = _Create.createIfStatement
local createInterpolatedString = _Create.createInterpolatedString
local createKeywordTypeNode = _Create.createKeywordTypeNode
local createNumberNode = _Create.createNumberNode
local createObjectLiteral = _Create.createObjectLiteral
local createOptionExpression = _Create.createOptionExpression
local createOptionKey = _Create.createOptionKey
local createParameter = _Create.createParameter
local createParenthesizedExpression = _Create.createParenthesizedExpression
local createPropertyAccessExpression = _Create.createPropertyAccessExpression
local createPropertyAssignment = _Create.createPropertyAssignment
local createSimpleCallExpression = _Create.createSimpleCallExpression
local createStringNode = _Create.createStringNode
local createTypeReference = _Create.createTypeReference
local createUnaryExpression = _Create.createUnaryExpression
local createVariableDeclaration = _Create.createVariableDeclaration
local createVariableStatement = _Create.createVariableStatement
local createUndefined = _Create.createUndefined
local createExportKeyword = _Create.createExportKeyword
local createFunctionExpression = _Create.createFunctionExpression
local createReturnStatement = _Create.createReturnStatement
local withError = _Create.withError
local updateNodeInternal = _Create.updateNodeInternal
local createEnumDeclaration = _Create.createEnumDeclaration
local createEnumItemExpression = _Create.createEnumItemExpression
local ZrTypeKeyword = TS.import(script, script.Parent, "Nodes", "Enum").ZrTypeKeyword
local _Functions = TS.import(script, script.Parent, "Nodes", "Functions")
local getFriendlyName = _Functions.getFriendlyName
local getVariableName = _Functions.getVariableName
local _Guards = TS.import(script, script.Parent, "Nodes", "Guards")
local isAssignableExpression = _Guards.isAssignableExpression
local isOptionExpression = _Guards.isOptionExpression
local _Grammar = TS.import(script, script.Parent, "Tokens", "Grammar")
local Grammar = _Grammar.default
local Keywords = _Grammar.Keywords
local isToken = TS.import(script, script.Parent, "Tokens", "Tokens").isToken
local ZrParser
do
	ZrParser = setmetatable({}, {
		__tostring = function()
			return "ZrParser"
		end,
	})
	ZrParser.__index = ZrParser
	function ZrParser.new(...)
		local self = setmetatable({}, ZrParser)
		return self:constructor(...) or self
	end
	function ZrParser:constructor(lexer, options)
		self.lexer = lexer
		self.preventCommandParsing = false
		self.strict = false
		self.callContext = {}
		self.functionContext = {}
		self.errors = {}
		self.warnings = {}
		self.enableExportKeyword = false
		self.enableUserEnum = false
		self.experimentalFeaturesEnabled = false
		self.functionCallScope = 0
		local _object = {
			version = 1000,
			mode = "command",
			enableExport = false,
		}
		if type(options) == "table" then
			for _k, _v in pairs(options) do
				_object[_k] = _v
			end
		end
		self.options = _object
		self.strict = self.options.mode == "strict"
		self.enableExportKeyword = self.options.enableExport
		if self.options.version >= 1000 then
			self.experimentalFeaturesEnabled = true
		end
		if self.options.version >= 1001 then
			self.enableUserEnum = true
		end
	end
	function ZrParser:getCurrentCallContext()
		return self.callContext[#self.callContext - 1 + 1]
	end
	function ZrParser:parserErrorNode(message, code, node, range)
		local _errors = self.errors
		local _arg0 = {
			message = message,
			code = code,
			node = node,
			range = range,
		}
		-- ▼ Array.push ▼
		_errors[#_errors + 1] = _arg0
		-- ▲ Array.push ▲
		return withError(node)
	end
	function ZrParser:throwParserError(message, code, token)
		local _errors = self.errors
		local _arg0 = {
			message = message,
			code = code,
			token = token,
			range = token and { token.startPos, token.endPos } or nil,
		}
		-- ▼ Array.push ▼
		_errors[#_errors + 1] = _arg0
		-- ▲ Array.push ▲
		self:_throwParserError(message)
	end
	function ZrParser:throwParserNodeError(message, code, node)
		local _errors = self.errors
		local _object = {
			message = message,
			code = code,
			node = node,
		}
		local _left = "range"
		local _result = node
		if _result ~= nil then
			_result = _result.startPos
		end
		local _result_1
		if _result then
			local _exp = node.startPos
			local _condition = node.endPos
			if _condition == nil then
				_condition = node.startPos
			end
			_result_1 = { _exp, _condition }
		else
			_result_1 = nil
		end
		_object[_left] = _result_1
		-- ▼ Array.push ▼
		_errors[#_errors + 1] = _object
		-- ▲ Array.push ▲
		self:_throwParserError(message)
	end
	function ZrParser:_throwParserError(message)
		error("[ZParser] Parsing Error: " .. (message .. " \n") .. debug.traceback("", 2))
	end
	function ZrParser:is(kind, value)
		local token = self.lexer:peek()
		if value ~= nil then
			return token ~= nil and (token.kind == kind and token.value == value)
		else
			return token ~= nil and token.kind == kind
		end
	end
	function ZrParser:get(kind, value)
		return self:is(kind, value) and (self.lexer:peek()) or nil
	end
	function ZrParser:tokenToString(token)
		if token == nil then
			return "<EOF>"
		elseif token.value == "\n" then
			return "<newline>"
		else
			return "'" .. (tostring(token.value) .. "'")
		end
	end
	function ZrParser:skip(kind, value, message)
		if self:is(kind, value) then
			return self.lexer:next()
		else
			local node = self.lexer:peek()
			local _fn = self
			local _condition = message
			if _condition == nil then
				_condition = 'ZrParser.skip("' .. (kind .. ('", ' .. ((value ~= 0 and (value == value and (value ~= "" and value)) and "'" .. (tostring(value) .. "'") or "undefined") .. "): Expected '"))) .. tostring(value) .. "' got " .. self:tokenToString(node)
			end
			_fn:throwParserError(_condition, 1001, node)
		end
	end
	function ZrParser:skipIf(kind, value)
		if self:is(kind, value) then
			self.lexer:next()
			return true
		else
			return false
		end
	end
	function ZrParser:parseBlock()
		local statements = {}
		self:skip("Special", "{")
		while self.lexer:hasNext() do
			if self:is("Special", "}") then
				break
			end
			if self:skipIf("EndOfStatement", "\n") then
				continue
			end
			local _arg0 = self:parseNextStatement()
			-- ▼ Array.push ▼
			statements[#statements + 1] = _arg0
			-- ▲ Array.push ▲
		end
		self:skip("Special", "}")
		return createBlock(statements)
	end
	function ZrParser:parseInlineStatement()
		if self:is("Special", ":") then
			self:skip("Special", ":")
			return createBlock({ self:mutateStatement(self:parseNext()) })
		else
			local _fn = self
			local _result = self.lexer:peek()
			if _result ~= nil then
				_result = _result.kind
			end
			_fn:throwParserError("Expected ':' got  " .. tostring(_result), 1005)
		end
	end
	function ZrParser:parseBlockOrInlineStatement()
		if self:is("Special", ":") then
			return self:parseInlineStatement()
		else
			return self:parseBlock()
		end
	end
	function ZrParser:parseParameters()
		local parameters = {}
		if self:is("Special", "(") then
			self:skip("Special", "(")
			local index = 0
			while self.lexer:hasNext() and not self:is("Special", ")") do
				if index > 0 then
					self:skip("Special", ",")
				end
				index += 1
				-- If valid parameter
				if self:is("Id") then
					local id = self.lexer:next()
					-- Check for parameter type
					if self:is("Special", ":") then
						self:skip("Special", ":")
						-- TODO: More advanced types later.
						if self:is("String") then
							local typeName = self.lexer:next()
							local _arg0 = createParameter(createIdentifier(id.value), createTypeReference(createIdentifier(typeName.value)))
							-- ▼ Array.push ▼
							parameters[#parameters + 1] = _arg0
							-- ▲ Array.push ▲
						else
							self:throwParserError("Type expected", 1001)
						end
					else
						local _arg0 = createParameter(createIdentifier(id.value), createKeywordTypeNode(ZrTypeKeyword.Any))
						-- ▼ Array.push ▼
						parameters[#parameters + 1] = _arg0
						-- ▲ Array.push ▲
					end
				else
					local nextItem = self.lexer:next()
					self:throwParserError("Parameter item expects an identifier", 1004, nextItem)
				end
			end
			self:skip("Special", ")")
		else
			local _fn = self
			local _result = self.lexer:peek()
			if _result ~= nil then
				_result = _result.value
			end
			local _condition = _result
			if _condition == nil then
				_condition = "EOF"
			end
			_fn:throwParserError("'(' expected got '" .. tostring(_condition) .. "'", 1005)
		end
		return parameters
	end
	function ZrParser:parseForIn(initializer)
		local forStatement = createForInStatement(initializer, nil, nil)
		self.lexer:next()
		local targetId = self:get("Id")
		if targetId ~= nil then
			self.lexer:next()
			forStatement.expression = createIdentifier(targetId.value)
			forStatement.statement = self:parseBlockOrInlineStatement()
		elseif not self.lexer:isNextOfKind("EndOfStatement") then
			local expression = self:mutateExpression(self:parseExpression())
			if isNode(expression, ZrNodeKind.CallExpression) or (isNode(expression, ZrNodeKind.SimpleCallExpression) or (isNode(expression, ZrNodeKind.ArrayLiteralExpression) or (isNode(expression, ZrNodeKind.ObjectLiteralExpression) or (isNode(expression, ZrNodeKind.ArrayIndexExpression) or (isNode(expression, ZrNodeKind.ParenthesizedExpression) or isNode(expression, ZrNodeKind.BinaryExpression)))))) then
				forStatement.expression = expression
				forStatement.statement = self:parseBlockOrInlineStatement()
			else
				return self:parserErrorNode("ForIn statement expects a valid expression after 'in' got " .. ZrNodeKind[expression.kind], 1004, forStatement)
			end
		else
			self:throwParserError("ForIn statement expects expression after 'in'", 1007)
		end
		return forStatement
	end
	function ZrParser:parseFor()
		self:skip("Keyword", Keywords.FOR)
		local initializer = self:parseExpression()
		if isNode(initializer, ZrNodeKind.Identifier) then
			if self:is("Keyword", Keywords.IN) then
				return self:parseForIn(initializer)
			else
				return self:throwParserNodeError("Expected 'in' after initializer", 1015, initializer)
			end
		else
			self:throwParserError("Identifier expected after 'for'", 1004)
		end
	end
	function ZrParser:parseFunctionExpression()
		local funcToken = self:skip("Keyword", Keywords.FUNCTION)
		local paramList = self:parseParameters()
		if self:is("Special", "{") then
			local _functionContext = self.functionContext
			-- ▼ Array.push ▼
			_functionContext[#_functionContext + 1] = "<Anonymous>"
			-- ▲ Array.push ▲
			local body = self:parseBlock()
			local _exp = self.functionContext
			-- ▼ Array.pop ▼
			_exp[#_exp] = nil
			-- ▲ Array.pop ▲
			return createFunctionExpression(paramList, body)
		else
			local invalidFuncExpression = createFunctionExpression(paramList, nil)
			return self:parserErrorNode(string.format(ErrorStrings.FUNCTION_IMPLEMENTATION_MISSING, "<Anonymous>"), 1014, invalidFuncExpression, funcToken and { funcToken.startPos, funcToken.endPos } or nil)
		end
	end
	function ZrParser:parseFunction()
		local funcToken = self:skip("Keyword", Keywords.FUNCTION)
		if self.lexer:isNextOfAnyKind("String", "Id") then
			local id = self.lexer:next()
			local idNode = createIdentifier(id.value)
			local _functionContext = self.functionContext
			local _name = idNode.name
			-- ▼ Array.push ▼
			_functionContext[#_functionContext + 1] = _name
			-- ▲ Array.push ▲
			local paramList = self:parseParameters()
			if self:is("Special", "{") then
				local body = self:parseBlock()
				local _exp = self.functionContext
				-- ▼ Array.pop ▼
				_exp[#_exp] = nil
				-- ▲ Array.pop ▲
				return createFunctionDeclaration(idNode, paramList, body)
			else
				local _fn = self
				local _fUNCTION_IMPLEMENTATION_MISSING = ErrorStrings.FUNCTION_IMPLEMENTATION_MISSING
				local _name_1 = idNode.name
				return _fn:parserErrorNode(string.format(_fUNCTION_IMPLEMENTATION_MISSING, _name_1), 1006, createFunctionDeclaration(idNode, paramList, nil), { id.startPos, id.endPos })
				-- this.throwParserError(
				-- ErrorStrings.FUNCTION_IMPLEMENTATION_MISSING.format(idNode.name),
				-- ZrParserErrorCode.NotImplemented,
				-- id,
				-- );
			end
		else
			local _fn = self
			local _exp = ErrorStrings.FUNCTION_ID_EXPECTED
			local _condition = self.lexer:next()
			if _condition == nil then
				_condition = funcToken
			end
			_fn:throwParserError(_exp, 1009, _condition)
		end
	end
	function ZrParser:parseIfStatement()
		local token = self:skip("Keyword", Keywords.IF)
		local expr = self:mutateExpression(self:parseExpression())
		local node = createIfStatement(expr, nil, nil)
		if self:is("Special", ":") then
			node.thenStatement = self:parseInlineStatement()
			return node
		elseif self:is("Special", "{") then
			node.thenStatement = self:parseBlock()
		else
			return self:parserErrorNode("Expected block or inline block after if statement", 1014, node)
		end
		if self:is("Keyword", Keywords.ELSE) then
			self.lexer:next()
			if self:is("Keyword", Keywords.IF) then
				node.elseStatement = self:parseIfStatement()
			elseif self:is("Special", "{") then
				node.elseStatement = self:parseBlock()
			elseif self:is("Special", ":") then
				node.elseStatement = self:parseInlineStatement()
			else
				local _fn = self
				local _result = self.lexer:peek()
				if _result ~= nil then
					_result = _result.value
				end
				return _fn:parserErrorNode("Unexpected '" .. tostring(_result) .. "' after 'else' - must be block or inline statement", 1014, node)
			end
		end
		return node
	end
	function ZrParser:isOperatorToken()
		return self.lexer:isNextOfKind("Operator")
	end
	function ZrParser:isEndBracketOrBlockToken()
		return self:is("Special", ")") or (self:is("Special", "]") or self:is("Special", "}"))
	end
	function ZrParser:getFunctionCallee(token)
		local callee
		if token.kind == "Property" then
			callee = self:parsePropertyAccess(token)
		else
			callee = createIdentifier(token.value)
		end
		return callee
	end
	function ZrParser:parseCallExpression(token, isStrictFunctionCall)
		if isStrictFunctionCall == nil then
			isStrictFunctionCall = self.strict
		end
		self.functionCallScope += 1
		local startPos = token.startPos
		local endPos = token.startPos
		local callee = self:getFunctionCallee(token)
		local options = {}
		local args = {}
		-- Enable 'strict' function-like calls e.g. `kill(vorlias)` vs `kill vorlias`
		if self:is("Special", "(") or isStrictFunctionCall then
			self:skip("Special", "(")
			isStrictFunctionCall = true
			self.strict = true
			local _callContext = self.callContext
			-- ▼ Array.push ▼
			local _arg0 = {
				strict = true,
			}
			_callContext[#_callContext + 1] = _arg0
			-- ▲ Array.push ▲
		else
			local _callContext = self.callContext
			-- ▼ Array.push ▼
			local _arg0 = {
				strict = false,
			}
			_callContext[#_callContext + 1] = _arg0
			-- ▲ Array.push ▲
		end
		local argumentIndex = 0
		while self.lexer:hasNext() and ((not self:isNextEndOfStatementOrNewline() or isStrictFunctionCall) and not self:isEndBracketOrBlockToken()) do
			if isStrictFunctionCall and self:is("Special", ")") then
				break
			end
			local isEscaped = self:is("Special", "\\") and self:skip("Special", "\\")
			if (isStrictFunctionCall or isEscaped) and self:skipIf("EndOfStatement", "\n") then
				continue
			end
			local arg
			-- Handle expression mutation only if strict
			if isStrictFunctionCall then
				if argumentIndex > 0 then
					self:skip("Special", ",")
				end
				self:skipIf("EndOfStatement", "\n")
				arg = self:mutateExpression(self:parseExpression())
			else
				arg = self:parseExpression(nil, true)
			end
			if isOptionExpression(arg) then
				local _arg = arg
				-- ▼ Array.push ▼
				options[#options + 1] = _arg
				-- ▲ Array.push ▲
			else
				local _arg = arg
				-- ▼ Array.push ▼
				args[#args + 1] = _arg
				-- ▲ Array.push ▲
			end
			argumentIndex += 1
			endPos = self.lexer:getStream():getPtr() - 1
		end
		if isStrictFunctionCall then
			endPos = self:skip("Special", ")").endPos - 1
			self.strict = false
		end
		local _exp = self.callContext
		-- ▼ Array.pop ▼
		_exp[#_exp] = nil
		-- ▲ Array.pop ▲
		local result
		if isStrictFunctionCall then
			result = createCallExpression(callee, args, options)
		else
			result = createSimpleCallExpression(callee, args)
		end
		self.functionCallScope -= 1
		result.startPos = startPos
		result.endPos = endPos
		result.rawText = self.lexer:getStreamSub(startPos, endPos)
		return result
	end
	function ZrParser:parseInterpolatedString(token)
		if (bit32.band(token.flags, 1)) ~= 0 then
			self:throwParserError("Unterminated string literal", 1008, token)
		end
		local _binding = token
		local values = _binding.values
		local variables = _binding.variables
		local resulting = {}
		do
			local k = 0
			local _shouldIncrement = false
			while true do
				if _shouldIncrement then
					k += 1
				else
					_shouldIncrement = true
				end
				if not (k < #values) then
					break
				end
				local v = values[k + 1]
				local _arg0 = createStringNode(v)
				-- ▼ Array.push ▼
				resulting[#resulting + 1] = _arg0
				-- ▲ Array.push ▲
				local matchingVar = variables[k + 1]
				if matchingVar ~= nil then
					local _arg0_1 = createIdentifier(matchingVar)
					-- ▼ Array.push ▼
					resulting[#resulting + 1] = _arg0_1
					-- ▲ Array.push ▲
				end
			end
		end
		return createInterpolatedString(unpack(resulting))
	end
	function ZrParser:parseListExpression(start, stop, nextItem, separator, strict)
		if separator == nil then
			separator = ","
		end
		if strict == nil then
			strict = self.strict
		end
		local values = {}
		local index = 0
		self:skip("Special", start)
		self.preventCommandParsing = false
		local functionContext = self:getCurrentCallContext()
		while self.lexer:hasNext() do
			if self:is("Special", stop) then
				break
			end
			if self:skipIf("EndOfStatement", "\n") then
				continue
			end
			if index > 0 and (self:is("Special", separator) or (functionContext and functionContext.strict)) then
				self:skip("Special", separator)
			end
			self:skipIf("EndOfStatement", "\n")
			local _arg0 = nextItem()
			-- ▼ Array.push ▼
			values[#values + 1] = _arg0
			-- ▲ Array.push ▲
			index += 1
		end
		self:skipIf("EndOfStatement", "\n")
		self:skip("Special", stop)
		return values
	end
	function ZrParser:parseObjectPropertyAssignment()
		if self.lexer:isNextOfAnyKind("Id", "String") then
			local id = self.lexer:next()
			self:skip("Special", ":")
			local preventCommandParsing = self.preventCommandParsing
			self.preventCommandParsing = false
			local expression = self:parseExpression()
			self.preventCommandParsing = preventCommandParsing
			return createPropertyAssignment(createIdentifier(id.value), expression)
		else
			self:throwParserError("Expected Identifier", 1004, self.lexer:peek())
		end
	end
	function ZrParser:parseObjectExpression()
		local values = self:parseListExpression("{", "}", function()
			return self:parseObjectPropertyAssignment()
		end, ",", true)
		return createObjectLiteral(values)
	end
	function ZrParser:parseArrayExpression()
		local values = self:parseListExpression("[", "]", function()
			return self:parseExpression()
		end, nil, true)
		return createArrayLiteral(values)
	end
	function ZrParser:parsePropertyAccess(token)
		local expr = createIdentifier(token.value)
		for _, name in ipairs(token.properties) do
			local _value = (string.match(name, "^%d+$"))
			if _value ~= 0 and (_value == _value and (_value ~= "" and _value)) then
				expr = createArrayIndexExpression(expr, createNumberNode(tonumber(name)))
			else
				expr = createPropertyAccessExpression(expr, createIdentifier(name))
			end
		end
		return expr
	end
	function ZrParser:parseStrictFunctionOption(option)
		self:skip("Special", ":")
		return createOptionExpression(createOptionKey(option), self:mutateExpression(self:parseExpression()))
	end
	function ZrParser:parseUndefined(token)
		if token then
			if isToken(token, "Keyword") and token.value == Keywords.UNDEFINED then
				return createUndefined()
			end
		else
			if self:is("Keyword", Keywords.UNDEFINED) then
				self:skip("Keyword", Keywords.UNDEFINED)
				return createUndefined()
			end
		end
	end
	function ZrParser:parseExpression(token, treatIdentifiersAsStrings)
		if treatIdentifiersAsStrings == nil then
			treatIdentifiersAsStrings = false
		end
		if self:is("Special", "{") then
			return self:parseObjectExpression()
		end
		if self:is("Special", "[") then
			return self:parseArrayExpression()
		end
		if self.experimentalFeaturesEnabled and self:is("Keyword", Keywords.FUNCTION) then
			return self:parseFunctionExpression()
		end
		-- Handle literals
		local _condition = token
		if _condition == nil then
			_condition = self.lexer:next()
		end
		token = _condition
		local undefinedNode = self:parseUndefined(token)
		if undefinedNode then
			return undefinedNode
		end
		if not token then
			self:throwParserError("Expression expected, got EOF after " .. self.lexer:prev().kind .. " - " .. debug.traceback(), 1007)
		end
		if isToken(token, "String") then
			if self.preventCommandParsing or token.startCharacter ~= undefinedNode then
				if self.strict and token.startCharacter == undefinedNode then
					self:throwParserError("Unexpected '" .. token.value .. "'", 1002)
				end
				if not token.closed then
					self:throwParserError("Unterminated string literal", 1008, token)
				end
				return createStringNode(token.value, token.startCharacter)
			elseif token.value ~= "" then
				local _value = (string.match(token.value, "[%w_.]+"))
				if not (_value ~= 0 and (_value == _value and (_value ~= "" and _value))) then
					self:throwParserError("Expression expected", 1007, token)
				end
				local context = self:getCurrentCallContext()
				local _condition_1 = self.functionCallScope > 0 and self:is("Special", ":")
				if _condition_1 then
					local _result = context
					if _result ~= nil then
						_result = _result.strict
					end
					_condition_1 = _result
				end
				if _condition_1 then
					return self:parseStrictFunctionOption(token.value)
				end
				local callContext = self:getCurrentCallContext()
				-- If we're inside a function
				if callContext then
					if callContext.strict then
						local isFunctionCall = self:is("Special", "(")
						local result = not isFunctionCall and createIdentifier(token.value) or self:parseCallExpression(token)
						return result
					else
						return createStringNode(token.value)
					end
				else
					local result = self:parseCallExpression(token)
					return result
				end
			end
		end
		if isToken(token, "Id") or isToken(token, "Property") then
			if treatIdentifiersAsStrings and (bit32.band(token.flags, 64)) == 0 then
				return createStringNode(token.value)
			end
			if token.value == undefinedNode or #token.value == 0 then
				self:throwParserError("Unexpected empty identifier", 1001, token)
			end
			local nextToken = self.lexer:peek()
			if self:is("Special", "(") then
				-- Handle bracketed "strict" calls e.g. `x()`
				return self:parseCallExpression(token, true)
			elseif nextToken then
				-- Handle any `x "y"` calls as well as `x!`
				if nextToken.kind == "Id" or ZrLexer.IsPrimitiveValueToken(nextToken) then
					return self:parseCallExpression(token, false)
				elseif nextToken.kind == "Operator" and (nextToken.value == "!" and self.experimentalFeaturesEnabled) then
					self.lexer:next()
					local callee = self:getFunctionCallee(token)
					return createCallExpression(callee, {})
				end
			end
			if isToken(token, "Id") then
				return updateNodeInternal(createIdentifier(token.value), {
					startPos = token.startPos,
					endPos = token.endPos,
					rawText = token.value,
				})
			elseif isToken(token, "Property") then
				local expr = createIdentifier(token.value)
				for _, name in ipairs(token.properties) do
					local _value = (string.match(name, "^%d+$"))
					if _value ~= 0 and (_value == _value and (_value ~= "" and _value)) then
						expr = createArrayIndexExpression(expr, createNumberNode(tonumber(name)))
					else
						expr = createPropertyAccessExpression(expr, createIdentifier(name))
					end
				end
				return expr
			end
		elseif isToken(token, "Number") then
			return updateNodeInternal(createNumberNode(token.value), {
				startPos = token.startPos,
				endPos = token.endPos,
				rawText = token.rawText,
			})
		elseif isToken(token, "Boolean") then
			return updateNodeInternal(createBooleanNode(token.value), {
				startPos = token.startPos,
				endPos = token.endPos,
				rawText = token.rawText,
			})
		elseif isToken(token, "InterpolatedString") then
			return self:parseInterpolatedString(token)
		elseif isToken(token, "EndOfStatement") then
			self:_throwParserError("Invalid EndOfStatement: '" .. (token.value .. ("' [" .. (tostring(token.startPos) .. (":" .. (tostring(token.endPos) .. "]"))))))
		elseif isToken(token, "Option") then
			return createOptionKey(token.value)
		end
		local _condition_1 = isToken(token, "Operator")
		if _condition_1 then
			local _unaryOperators = Grammar.UnaryOperators
			local _value = token.value
			_condition_1 = table.find(_unaryOperators, _value) ~= nil
		end
		if _condition_1 then
			return createUnaryExpression(token.value, self:parseExpression())
		end
		-- Handle parenthesized expression
		if isToken(token, "Special") and token.value == "(" then
			local expr = createParenthesizedExpression(self:mutateExpression(self:parseExpression()))
			self:skip("Special", ")")
			return expr
		end
		if isToken(token, "Special") or isToken(token, "Operator") then
			self:throwParserError("ZrParser.parseExpression(" .. (token.kind .. (", " .. (tostring(treatIdentifiersAsStrings) .. (') - Unexpected Token "' .. (token.kind .. ('" with value "' .. (token.value .. '"'))))))), 1001, token)
		end
		if token.kind == "Keyword" then
			self:throwParserError("Cannot use '" .. (token.value .. "' here, it is a reserved keyword."), 1010, token)
		else
			self:throwParserError("Unexpected '" .. (token.value .. ("' (" .. (token.kind .. (") preceded by token " .. self.lexer:prev().kind)))), 1001, token)
		end
	end
	function ZrParser:parseNewVariableDeclaration(keyword, exportKeyword)
		self:skip("Keyword", keyword)
		local word = self.lexer:next()
		if word and (word.kind == "String" or word.kind == "Id") then
			return self:parseVariableDeclaration(createIdentifier(word.value), keyword == "const" and 1 or 2, exportKeyword and { createExportKeyword() } or nil)
		else
			self:throwParserError("'" .. keyword .. "' must be followed by a text identifier", 1003, word)
		end
	end
	function ZrParser:isVariableDeclarationStatement()
		local _condition = self:get("Keyword", Keywords.LET)
		if _condition == nil then
			_condition = self:get("Keyword", Keywords.CONST)
		end
		return _condition
	end
	function ZrParser:parseEnumStatement()
		local enumToken = self:skip("Keyword", Keywords.ENUM)
		if self.lexer:isNextOfKind("Id") then
			local id = self.lexer:next()
			local idNode = createIdentifier(id.value, "")
			if self:is("Special", "{") then
				local items = self:parseListExpression("{", "}", function()
					local id = self:skip("Id")
					return createEnumItemExpression(createIdentifier(id.value))
				end, ",", true)
				return createEnumDeclaration(idNode, items)
			else
				self:throwParserError("Enum requires body", 1014, enumToken)
			end
		end
		error("Not Implemented")
	end
	function ZrParser:parseDeclarations()
		if self:is("Keyword", Keywords.FUNCTION) then
			return self:parseFunction()
		end
		if self:is("Keyword", Keywords.ENUM) and self.enableUserEnum then
			return self:parseEnumStatement()
		end
	end
	function ZrParser:parseNextStatement()
		local declaration = self:parseDeclarations()
		if declaration then
			return declaration
		end
		if self:is("Keyword", Keywords.RETURN) then
			self:skip("Keyword", Keywords.RETURN)
			if #self.functionContext > 0 then
				return createReturnStatement(self:parseExpression())
			else
				self:throwParserError("'return' can only be used inside of functions", 1013, self.lexer:prev())
			end
		end
		if self:is("Keyword", Keywords.FOR) then
			return self:parseFor()
		end
		if self:is("Special", "{") then
			return self:parseBlock()
		end
		if self:is("Keyword", Keywords.IF) then
			return self:parseIfStatement()
		end
		if self.experimentalFeaturesEnabled then
			local variable
			if self:is("Keyword", Keywords.EXPORT) and self.enableExportKeyword then
				self:skip("Keyword", Keywords.EXPORT)
				variable = self:isVariableDeclarationStatement()
				if variable then
					return self:parseNewVariableDeclaration(variable.value, true)
				end
			else
				variable = self:isVariableDeclarationStatement()
				if variable then
					return self:parseNewVariableDeclaration(variable.value)
				end
			end
		end
		local token = self.lexer:next()
		assert(token)
		-- This passes the token directly, since in this case the expressions statement is part of our statement
		-- generation code anyway.
		return createExpressionStatement(self:mutateExpression(self:parseExpression(token)))
	end
	function ZrParser:parseVariableDeclaration(left, flags, modifiers)
		if flags == nil then
			flags = 0
		end
		local prev = self:get("Operator")
		self:skipIf("Operator", "=")
		local right = self:mutateExpression(self:parseExpression())
		-- Simplify the expression a bit, if it's parenthesized
		if isNode(right, ZrNodeKind.ParenthesizedExpression) then
			right = right.expression
		end
		if isAssignableExpression(right) then
			-- isAssignment
			local decl = createVariableDeclaration(left, right)
			decl.flags = flags
			local statement = createVariableStatement(decl, modifiers)
			return statement
		else
			self:throwParserNodeError("Cannot assign " .. (tostring(getFriendlyName(right)) .. (" to variable '" .. (getVariableName(left) .. "'"))), 1003, right)
		end
	end
	function ZrParser:mutateExpression(left, precedence)
		if precedence == nil then
			precedence = 0
		end
		local token = self:get("Operator")
		if token then
			local otherPrecedence = Grammar.OperatorPrecedence[token.value]
			local _arg0 = otherPrecedence ~= nil
			local _arg1 = "No precedence for '" .. (token.value .. "'")
			assert(_arg0, _arg1)
			if otherPrecedence > precedence then
				local prev = self.lexer:prev()
				self.lexer:next()
				if token.value == "=" and left.kind ~= ZrNodeKind.Identifier then
					self:throwParserError("Unexpected '=' after " .. ZrNodeKind[left.kind], 1001, token)
				end
				return createBinaryExpression(left, token.value, self:mutateExpression(self:parseExpression()))
			end
		end
		return left
	end
	function ZrParser:mutateStatement(left, precedence)
		if precedence == nil then
			precedence = 0
		end
		local token = self:get("Operator")
		if token then
			local otherPrecedence = Grammar.OperatorPrecedence[token.value]
			if otherPrecedence > precedence then
				self.lexer:next()
				if token.value == "=" then
					if not isNode(left, ZrNodeKind.Identifier) and not isNode(left, ZrNodeKind.PropertyAccessExpression) then
						self:throwParserNodeError("Unexpected '=' (Assignment to " .. ZrNodeKind[left.kind] .. ")", 1001, left)
					end
					return self:parseVariableDeclaration(left)
				end
			end
		end
		return left
	end
	function ZrParser:parseNext()
		local expr = self:parseNextStatement()
		return self:mutateStatement(expr)
	end
	function ZrParser:isNextEndOfStatement()
		return self:is("EndOfStatement", ";") or not self.lexer:hasNext()
	end
	function ZrParser:isNextEndOfStatementOrNewline()
		return self:is("EndOfStatement", ";") or (self:is("EndOfStatement", "\n") or not self.lexer:hasNext())
	end
	function ZrParser:skipNextEndOfStatementOrNewline()
		if self:isNextEndOfStatementOrNewline() then
			self.lexer:next()
		else
			self:throwParserError("Expected end of statement", 1001)
		end
	end
	function ZrParser:skipAllWhitespace()
		while self.lexer:hasNext() and self:isNextEndOfStatementOrNewline() do
			self:skipNextEndOfStatementOrNewline()
		end
	end
	function ZrParser:parseSource(start, stop)
		local source = {}
		if start ~= "" and start then
			self:skip("Special", start)
		end
		-- this.skipAllWhitespace();
		while self.lexer:hasNext() do
			local _condition = stop
			if _condition ~= "" and _condition then
				_condition = self:is("Special", stop)
			end
			if _condition ~= "" and _condition then
				break
			end
			local statement = self:parseNext()
			-- ▼ Array.push ▼
			source[#source + 1] = statement
			-- ▲ Array.push ▲
			local _condition_1 = stop
			if _condition_1 ~= "" and _condition_1 then
				_condition_1 = self:is("Special", stop)
			end
			if _condition_1 ~= "" and _condition_1 then
				break
			end
			self:skipAllWhitespace()
		end
		self:skipAllWhitespace()
		if stop ~= "" and stop then
			self:skip("Special", stop)
		end
		return source
	end
	function ZrParser:parseOrThrow()
		local source = createSourceFile(self:parseSource())
		if self:hasErrors() then
			local _errors = self.errors
			local _arg0 = function(e)
				return e.range and "[ZR" .. (tostring(e.code) .. ("] [" .. (tostring(e.range[1]) .. (":" .. (tostring(e.range[2]) .. ("] " .. e.message)))))) or "[ZR" .. (tostring(e.code) .. ("] " .. e.message))
			end
			-- ▼ ReadonlyArray.map ▼
			local _newValue = table.create(#_errors)
			for _k, _v in ipairs(_errors) do
				_newValue[_k] = _arg0(_v, _k - 1, _errors)
			end
			-- ▲ ReadonlyArray.map ▲
			error(table.concat(_newValue, "\n"))
		else
			return source
		end
	end
	function ZrParser:parse()
		local _exitType, _returns = TS.try(function()
			return TS.TRY_RETURN, { self:parseOrThrow() }
		end, function(e)
			warn(e)
			return TS.TRY_RETURN, { createSourceFile({}) }
		end)
		if _exitType then
			return unpack(_returns)
		end
	end
	function ZrParser:getErrors()
		return self.errors
	end
	function ZrParser:hasErrors()
		return #self.errors > 0
	end
end
return {
	default = ZrParser,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="Folder" referent="756">
                  <Properties>
                    <string name="Name">Syntax</string>
                  </Properties>
                  <Item class="ModuleScript" referent="757">
                    <Properties>
                      <string name="Name">RichTextHighlighter</string>
                      <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local ZrTextStream = TS.import(script, script.Parent.Parent, "TextStream").default
local ZrLexer = TS.import(script, script.Parent.Parent, "Lexer").default
local isToken = TS.import(script, script.Parent.Parent, "Tokens", "Tokens").isToken
local DARK_THEME = {
	VariableColor = "#B57EDC",
	KeywordColor = "#57AFE3",
	NumberColor = "#56B6C2",
	StringColor = "#79C36C",
	OperatorColor = "#5F6672",
	FunctionColor = "#E0E0E0",
	BooleanLiteral = "#56B6C2",
	ControlCharacters = "rgb(50, 50, 50)",
}
local function font(text, color)
	return color ~= "" and color and '<font color="' .. (color .. ('">' .. (text .. "</font>"))) or text
end
local ZrRichTextHighlighter
do
	ZrRichTextHighlighter = setmetatable({}, {
		__tostring = function()
			return "ZrRichTextHighlighter"
		end,
	})
	ZrRichTextHighlighter.__index = ZrRichTextHighlighter
	function ZrRichTextHighlighter.new(...)
		local self = setmetatable({}, ZrRichTextHighlighter)
		return self:constructor(...) or self
	end
	function ZrRichTextHighlighter:constructor(source, options, lexerOptions)
		if options == nil then
			options = DARK_THEME
		end
		if lexerOptions == nil then
			lexerOptions = {
				SyntaxHighlighterLexer = true,
				ExperimentalSyntaxHighlighter = true,
				CommandNames = {},
			}
		end
		self.options = options
		local stream = ZrTextStream.new(source)
		self.lexer = ZrLexer.new(stream, lexerOptions)
	end
	function ZrRichTextHighlighter:parse()
		local str = ""
		local _binding = self
		local options = _binding.options
		while self.lexer:hasNext() do
			local token = self.lexer:next()
			if not token then
				break
			end
			if isToken(token, "Boolean") then
				local _exp = token.rawText
				local _condition = options.BooleanLiteral
				if _condition == nil then
					_condition = options.OperatorColor
				end
				str ..= font(_exp, _condition)
			elseif isToken(token, "String") then
				local _binding_1 = token
				local value = _binding_1.value
				local flags = _binding_1.flags
				local startCharacter = _binding_1.startCharacter
				local endCharacter = _binding_1.endCharacter
				if startCharacter ~= nil then
					local _exp = font(value, options.StringColor)
					local _condition = endCharacter
					if _condition == nil then
						_condition = ""
					end
					str ..= font(startCharacter .. (_exp .. _condition), options.OperatorColor)
				else
					if flags ~= 0 then
						if (bit32.band(flags, 4)) ~= 0 then
							local _condition = options.FunctionColor
							if _condition == nil then
								_condition = options.VariableColor
							end
							str ..= font(value, _condition)
						elseif (bit32.band(flags, 8)) ~= 0 then
							local _condition = options.LabelColor
							if _condition == nil then
								_condition = options.VariableColor
							end
							str ..= font(value, _condition)
						end
					else
						str ..= value
					end
				end
			elseif isToken(token, "InterpolatedString") then
				local _binding_1 = token
				local values = _binding_1.values
				local variables = _binding_1.variables
				local quotes = _binding_1.quotes
				local closed = _binding_1.closed
				local resulting = {}
				do
					local k = 0
					local _shouldIncrement = false
					while true do
						if _shouldIncrement then
							k += 1
						else
							_shouldIncrement = true
						end
						if not (k < #values) then
							break
						end
						local v = values[k + 1]
						local _arg0 = font(v, options.StringColor)
						-- ▼ Array.push ▼
						resulting[#resulting + 1] = _arg0
						-- ▲ Array.push ▲
						local matchingVar = variables[k + 1]
						if matchingVar ~= nil then
							local _arg0_1 = font("$" .. matchingVar, options.VariableColor)
							-- ▼ Array.push ▼
							resulting[#resulting + 1] = _arg0_1
							-- ▲ Array.push ▲
						end
					end
				end
				local _exp = font(table.concat(resulting, ""), options.StringColor)
				local _result
				if closed then
					_result = quotes
				else
					_result = ""
				end
				str ..= font(tostring(quotes) .. (_exp .. tostring(_result)), options.OperatorColor)
			elseif isToken(token, "Number") then
				str ..= font(token.rawText, options.NumberColor)
			elseif isToken(token, "Id") then
				if (bit32.band(token.flags, 4)) ~= 0 then
					local _exp = token.value
					local _condition = options.FunctionColor
					if _condition == nil then
						_condition = options.NumberColor
					end
					str ..= font(_exp, _condition)
				elseif (bit32.band(token.flags, 32)) ~= 0 then
					str ..= font(token.value, options.VariableColor)
				else
					str ..= font((bit32.band(token.flags, 64)) ~= 0 and "$" .. token.value or token.value, options.VariableColor)
				end
			elseif isToken(token, "Operator") or isToken(token, "Special") then
				str ..= font(token.value, options.OperatorColor)
			elseif isToken(token, "Keyword") then
				str ..= font(token.value, options.KeywordColor)
			elseif isToken(token, "EndOfStatement") then
				if token.value == "\n" then
					str ..= font("¬", options.ControlCharacters)
					str ..= token.value
				elseif token.value ~= "\r" then
					str ..= font(token.value, options.OperatorColor)
				end
			elseif isToken(token, "Whitespace") then
				if token.value == " " then
					str ..= font("·", options.ControlCharacters)
				else
					str ..= token.value
				end
			elseif isToken(token, "Option") then
				local _condition = token.prefix
				if _condition == nil then
					_condition = ""
				end
				str ..= font(_condition .. token.value, options.KeywordColor)
			elseif isToken(token, "Property") then
				str ..= font((bit32.band(token.flags, 64)) ~= 0 and "$" .. token.value or token.value, options.VariableColor)
				for _, prop in ipairs(token.properties) do
					str ..= font(".", options.OperatorColor) .. ((string.match(prop, "%d+")) ~= nil and font(prop, options.NumberColor) or font(prop, options.VariableColor))
				end
			elseif isToken(token, "Comment") then
				local _exp = token.value
				local _condition = options.CommentColor
				if _condition == nil then
					_condition = options.OperatorColor
				end
				str ..= font(_exp, _condition)
			else
				str ..= tostring(token.value)
			end
		end
		return str
	end
end
return {
	default = ZrRichTextHighlighter,
}
]]></string>
                    </Properties>
                  </Item>
                </Item>
                <Item class="ModuleScript" referent="758">
                  <Properties>
                    <string name="Name">TextStream</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
--[[
	*
	* A text stream
]]
local ZrTextStream
do
	ZrTextStream = setmetatable({}, {
		__tostring = function()
			return "ZrTextStream"
		end,
	})
	ZrTextStream.__index = ZrTextStream
	function ZrTextStream.new(...)
		local self = setmetatable({}, ZrTextStream)
		return self:constructor(...) or self
	end
	function ZrTextStream:constructor(source)
		self.source = source
		self.ptr = 1
		self.column = 0
		self.row = 0
	end
	function ZrTextStream:next(offset)
		if offset == nil then
			offset = 1
		end
		local _source = self.source
		local _ptr = self.ptr
		local _ptr_1 = self.ptr
		local char = string.sub(_source, _ptr, _ptr_1)
		self.ptr += offset
		if char == "\n" then
			self.column += 1
		else
			self.column = 0
			self.row += 1
		end
		return char
	end
	function ZrTextStream:getRowAndColumn()
		local _arg0 = { self.row, self.column }
		return _arg0
	end
	function ZrTextStream:sub(x, y)
		return string.sub(self.source, x, y)
	end
	function ZrTextStream:getRow()
		return self.row
	end
	function ZrTextStream:getColumn()
		return self.column
	end
	function ZrTextStream:peek(offset)
		if offset == nil then
			offset = 0
		end
		local _source = self.source
		local _arg0 = self.ptr + offset
		local _arg1 = self.ptr + offset
		local char = string.sub(_source, _arg0, _arg1)
		return char
	end
	function ZrTextStream:reset()
		self.ptr = 1
	end
	function ZrTextStream:hasNext()
		return #self.source >= self.ptr
	end
	function ZrTextStream:getPtr()
		return self.ptr
	end
	function ZrTextStream:setPtr(ptr)
		self.ptr = ptr
	end
end
return {
	default = ZrTextStream,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="Folder" referent="759">
                  <Properties>
                    <string name="Name">Tokens</string>
                  </Properties>
                  <Item class="ModuleScript" referent="760">
                    <Properties>
                      <string name="Name">Grammar</string>
                      <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local Grammar = {
	Operators = { "&", "|", "=", ">", "<", "-", "+", "/", "*", "!", "?", "%", "^", "~" },
	UnaryOperators = { "!" },
	EndOfStatement = { ";", "\n" },
	Punctuation = { "(", ")", ",", "{", "}", "[", "]", ".", ":", "\\", "@", "`" },
	BooleanLiterals = { "true", "false" },
	Keywords = { "if", "else", "for", "in", "enum", "declare", "function", "let", "export", "const", "delete", "undefined", "new", "continue", "while", "return", "default", "null", "nil", "import", "set", "get", "try", "catch", "finally", "class", "do", "throw", "from" },
	Types = { "number", "string", "boolean" },
	OperatorPrecedence = {
		[".."] = 1,
		["!"] = 2,
		["="] = 2,
		["+="] = 2,
		["-="] = 2,
		["|"] = 3,
		["||"] = 3,
		["&&"] = 4,
		["<"] = 7,
		[">"] = 7,
		[">="] = 7,
		["<="] = 7,
		["=="] = 7,
		["!="] = 7,
		["+"] = 10,
		["-"] = 10,
		["*"] = 20,
		["/"] = 20,
		["%"] = 20,
	},
}
local function makeKeywordMap(value)
	local items = {}
	for _, item in ipairs(value) do
		items[string.upper(item)] = item
	end
	return items
end
local Keywords = makeKeywordMap(Grammar.Keywords)
local default = Grammar
return {
	Keywords = Keywords,
	default = default,
}
]]></string>
                    </Properties>
                  </Item>
                  <Item class="ModuleScript" referent="761">
                    <Properties>
                      <string name="Name">Tokens</string>
                      <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local KEYWORDS = { "if", "else", "for", "in", "function", "while", "const", "let" }
local TYPES = { "number", "string", "boolean" }
local function joinInterpolatedString(values, variables)
	local resulting = {}
	do
		local k = 0
		local _shouldIncrement = false
		while true do
			if _shouldIncrement then
				k += 1
			else
				_shouldIncrement = true
			end
			if not (k < #values) then
				break
			end
			local v = values[k + 1]
			-- ▼ Array.push ▼
			resulting[#resulting + 1] = v
			-- ▲ Array.push ▲
			local matchingVar = variables[k + 1]
			if matchingVar ~= nil then
				local _arg0 = "$" .. matchingVar
				-- ▼ Array.push ▼
				resulting[#resulting + 1] = _arg0
				-- ▲ Array.push ▲
			end
		end
	end
	return table.concat(resulting, "")
end
local function isToken(token, kind)
	return token ~= nil and token.kind == kind
end
return {
	joinInterpolatedString = joinInterpolatedString,
	isToken = isToken,
	KEYWORDS = KEYWORDS,
	TYPES = TYPES,
}
]]></string>
                    </Properties>
                  </Item>
                </Item>
                <Item class="Folder" referent="762">
                  <Properties>
                    <string name="Name">Utility</string>
                  </Properties>
                  <Item class="ModuleScript" referent="763">
                    <Properties>
                      <string name="Name">NodeVisitor</string>
                      <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
-- export default class ZrAstNodeVisitor<TNode extends Node> {
-- constructor(private node: TNode) {}
-- private nodeStack = new Array<TNode>();
-- public visitNode(visitor: Visitor) {
-- return visitor(this.node);
-- }
-- public static iterateNodeAndChildren = function* (this: typeof ZrAstNodeVisitor, node: Node) {
-- yield node;
-- if (node.children) {
-- for (const child of node.children) {
-- yield child;
-- }
-- }
-- };
-- public visitNodeAndChildren(visitor: Visitor) {
-- for (const node of ZrAstNodeVisitor.iterateNodeAndChildren(this.node)) {
-- visitor(node);
-- }
-- }
-- public static fromSourceFile(sourceFile: SourceFile) {
-- return new ZrAstNodeVisitor(sourceFile);
-- }
-- }
local function iterateNodeChildren(node)
	return TS.generator(function()
		if node == nil then
			return nil
		end
		if node.children then
			for _, child in ipairs(node.children) do
				coroutine.yield(child)
			end
		end
	end)
end
local function iterateNodeAndChildren(node)
	return TS.generator(function()
		coroutine.yield(node)
		if node and node.children then
			for _, child in ipairs(node.children) do
				coroutine.yield(child)
			end
		end
	end)
end
local function visitNodeAndChildren(targetNode, visitor)
	for _result in iterateNodeAndChildren(targetNode).next do
		if _result.done then
			break
		end
		local node = _result.value
		visitor(node)
	end
end
local function visitEachChild(targetNode, visitor)
	for _result in iterateNodeChildren(targetNode).next do
		if _result.done then
			break
		end
		local node = _result.value
		visitor(node)
	end
end
return {
	visitNodeAndChildren = visitNodeAndChildren,
	visitEachChild = visitEachChild,
}
]]></string>
                    </Properties>
                  </Item>
                  <Item class="ModuleScript" referent="764">
                    <Properties>
                      <string name="Name">PrettyPrintNodes</string>
                      <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local isNode = TS.import(script, script.Parent.Parent, "Nodes", "Guards").isNode
local CmdSyntaxKind = TS.import(script, script.Parent.Parent, "Nodes").CmdSyntaxKind
local getNodeKindName = TS.import(script, script.Parent.Parent, "Nodes", "Functions").getNodeKindName
local function prettyPrintNodes(nodes, prefix, verbose)
	if prefix == nil then
		prefix = ""
	end
	if verbose == nil then
		verbose = false
	end
	for _, node in ipairs(nodes) do
		if isNode(node, CmdSyntaxKind.String) then
			local str = node.quotes ~= nil and node.quotes .. (node.text .. node.quotes) or "\`" .. (node.text .. "\`")
			if verbose then
				print(prefix, getNodeKindName(node), str, "[" .. (tostring(node.startPos) .. (":" .. (tostring(node.endPos) .. "]"))), "{" .. (tostring(node.rawText) .. "}"))
			else
				print(prefix, CmdSyntaxKind[node.kind], str)
			end
			if node.isUnterminated then
				print(prefix, "Unterminated String")
			end
		elseif isNode(node, CmdSyntaxKind.CallExpression) or isNode(node, CmdSyntaxKind.SimpleCallExpression) then
			if verbose then
				print(prefix, CmdSyntaxKind[node.kind], "'" .. (tostring(node.rawText) .. "'"), "[" .. (tostring(node.startPos) .. (":" .. (tostring(node.endPos) .. "]"))), "{")
			else
				print(prefix, CmdSyntaxKind[node.kind], "{")
			end
			prettyPrintNodes({ node.expression }, prefix .. "\t", verbose)
			prettyPrintNodes(node.arguments, prefix .. "\t", verbose)
			if isNode(node, CmdSyntaxKind.CallExpression) then
				prettyPrintNodes(node.options, prefix .. "\t", verbose)
			end
			print(prefix, "}")
		elseif isNode(node, CmdSyntaxKind.Number) or isNode(node, CmdSyntaxKind.Boolean) then
			if verbose then
				print(prefix, CmdSyntaxKind[node.kind], node.value, "'" .. (tostring(node.rawText) .. "'"), "[" .. (tostring(node.startPos) .. (":" .. (tostring(node.endPos) .. "]"))))
			else
				print(prefix, CmdSyntaxKind[node.kind], node.value)
			end
		elseif isNode(node, CmdSyntaxKind.OptionKey) then
			if verbose then
				local _exp = CmdSyntaxKind[node.kind]
				local _exp_1 = node.flag
				local _condition = node.startPos
				if _condition == nil then
					_condition = 0
				end
				local _condition_1 = node.endPos
				if _condition_1 == nil then
					_condition_1 = 0
				end
				print(prefix, _exp, _exp_1, "[" .. (tostring(_condition) .. (":" .. (tostring(_condition_1) .. "]"))))
			else
				print(prefix, CmdSyntaxKind[node.kind], node.flag)
			end
			prettyPrintNodes({ node.right }, prefix .. "\t", verbose)
		elseif isNode(node, CmdSyntaxKind.Identifier) then
			if verbose then
				print(prefix, CmdSyntaxKind[node.kind], node.name, "'" .. (tostring(node.rawText) .. "'"), "[" .. (tostring(node.startPos) .. (":" .. (tostring(node.endPos) .. "]"))))
			else
				print(prefix, CmdSyntaxKind[node.kind], node.name)
			end
		elseif isNode(node, CmdSyntaxKind.OperatorToken) then
			print(prefix, CmdSyntaxKind[node.kind], node.operator)
		elseif isNode(node, CmdSyntaxKind.UnaryExpression) then
			if verbose then
				print(prefix, CmdSyntaxKind[node.kind], node.operator, "'" .. (tostring(node.rawText) .. "'"), "[" .. (tostring(node.startPos) .. (":" .. (tostring(node.endPos) .. "]"))), "{")
			else
				print(prefix, CmdSyntaxKind[node.kind], node.operator, "{")
			end
			prettyPrintNodes({ node.expression }, prefix .. "\t", verbose)
			print(prefix, "}")
		elseif isNode(node, CmdSyntaxKind.BinaryExpression) then
			if verbose then
				print(prefix, CmdSyntaxKind[node.kind], node.operator, "'" .. (tostring(node.rawText) .. "'"), "[" .. (tostring(node.startPos) .. (":" .. (tostring(node.endPos) .. "]"))), "{")
			else
				print(prefix, CmdSyntaxKind[node.kind], node.operator, "{")
			end
			prettyPrintNodes({ node.left, node.right }, prefix .. "\t", verbose)
			print(prefix, "}")
		elseif isNode(node, CmdSyntaxKind.InterpolatedString) then
			if verbose then
				print(prefix, CmdSyntaxKind[node.kind], "'" .. (tostring(node.rawText) .. "'"), "[" .. (tostring(node.startPos) .. (":" .. (tostring(node.endPos) .. "]"))), "{")
			else
				print(prefix, CmdSyntaxKind[node.kind], "{")
			end
			prettyPrintNodes(node.values, prefix .. "\t", verbose)
			print(prefix, "}")
		elseif isNode(node, CmdSyntaxKind.Source) then
			if verbose then
				print(prefix, CmdSyntaxKind[node.kind], "[" .. (tostring(node.startPos) .. (":" .. (tostring(node.endPos) .. "]"))), "{")
			else
				print(prefix, CmdSyntaxKind[node.kind], "{")
			end
			prettyPrintNodes(node.children, prefix .. "\t", verbose)
			print(prefix, "}")
		elseif isNode(node, CmdSyntaxKind.PrefixToken) then
			print(prefix, CmdSyntaxKind[node.kind], node.value)
		elseif isNode(node, CmdSyntaxKind.PrefixExpression) then
			print(prefix, CmdSyntaxKind[node.kind], "{")
			prettyPrintNodes({ node.prefix, node.expression }, prefix .. "\t", verbose)
			print(prefix, "}")
		elseif isNode(node, CmdSyntaxKind.VariableDeclaration) then
			local isConst = (bit32.band(node.flags, 1)) ~= 0 and "const" or ((bit32.band(node.flags, 2)) ~= 0 and "let" or "var")
			print(prefix, CmdSyntaxKind[node.kind], isConst, "{")
			prettyPrintNodes({ node.identifier, node.expression }, prefix .. "\t", verbose)
			print(prefix, "}")
		elseif isNode(node, CmdSyntaxKind.VariableStatement) then
			print(prefix, CmdSyntaxKind[node.kind], "{")
			if node.modifiers then
				prettyPrintNodes(node.modifiers, prefix .. "\t", verbose)
			end
			prettyPrintNodes({ node.declaration }, prefix .. "\t", verbose)
			print(prefix, "}")
		elseif isNode(node, CmdSyntaxKind.EndOfStatement) then
			print(prefix, "EndOfStatement")
		elseif isNode(node, CmdSyntaxKind.Invalid) then
			print(prefix, "SYNTAX ERROR", node.message)
		elseif isNode(node, CmdSyntaxKind.OptionExpression) then
			if verbose then
				local _condition = node.startPos
				if _condition == nil then
					_condition = 0
				end
				local _condition_1 = node.endPos
				if _condition_1 == nil then
					_condition_1 = 0
				end
				print(prefix, "OptionExpression", "[" .. (tostring(_condition) .. (":" .. (tostring(_condition_1) .. "]"))), "{")
			else
				print(prefix, "OptionExpression", "{")
			end
			prettyPrintNodes({ node.option, node.expression }, prefix .. "\t", verbose)
			print(prefix, "}")
		elseif isNode(node, CmdSyntaxKind.ExpressionStatement) then
			print(prefix, "ExpressionStatement", "{")
			prettyPrintNodes({ node.expression }, prefix .. "\t", verbose)
			print(prefix, "}")
		elseif isNode(node, CmdSyntaxKind.ArrayLiteralExpression) then
			print(prefix, "ArrayLiteralExpression", "{")
			prettyPrintNodes(node.values, prefix .. "\t", verbose)
			print(prefix, "}")
		elseif isNode(node, CmdSyntaxKind.PropertyAccessExpression) then
			print(prefix, "PropertyAccessExpression", "{")
			prettyPrintNodes({ node.expression, node.name }, prefix .. "\t", verbose)
			print(prefix, "}")
		elseif isNode(node, CmdSyntaxKind.ArrayIndexExpression) then
			print(prefix, "ArrayIndexExpression", "{")
			prettyPrintNodes({ node.expression, node.index }, prefix .. "\t", verbose)
			print(prefix, "}")
		elseif isNode(node, CmdSyntaxKind.PropertyAssignment) then
			print(prefix, "PropertyAssignment", "{")
			prettyPrintNodes({ node.name, node.initializer }, prefix .. "\t", verbose)
			print(prefix, "}")
		elseif isNode(node, CmdSyntaxKind.ObjectLiteralExpression) then
			print(prefix, "ObjectLiteralExpression", "{")
			prettyPrintNodes(node.values, prefix .. "\t", verbose)
			print(prefix, "}")
		elseif isNode(node, CmdSyntaxKind.Block) then
			print(prefix, "Block", "{")
			prettyPrintNodes(node.statements, prefix .. "\t", verbose)
			print(prefix, "}")
		elseif isNode(node, CmdSyntaxKind.FunctionDeclaration) then
			print(prefix, "FunctionDeclaration", "{")
			prettyPrintNodes({ node.name }, prefix .. "\t", verbose)
			prettyPrintNodes(node.parameters, prefix .. "\t ", verbose)
			prettyPrintNodes({ node.body }, prefix .. "\t", verbose)
			print(prefix, "}")
		elseif isNode(node, CmdSyntaxKind.FunctionExpression) then
			print(prefix, "FunctionExpression", "{")
			prettyPrintNodes(node.parameters, prefix .. "\t ", verbose)
			prettyPrintNodes({ node.body }, prefix .. "\t", verbose)
			print(prefix, "}")
		elseif isNode(node, CmdSyntaxKind.Parameter) then
			print(prefix, "Parameter", "{")
			prettyPrintNodes({ node.name }, prefix .. "\t", verbose)
			print(prefix, "}")
		elseif isNode(node, CmdSyntaxKind.TypeReference) then
			print(prefix, "TypeReference", "{")
			prettyPrintNodes({ node.typeName }, prefix .. "\t", verbose)
			print(prefix, "}")
		elseif isNode(node, CmdSyntaxKind.ParenthesizedExpression) then
			print(prefix, "ParenthesizedExpression", "{")
			prettyPrintNodes({ node.expression }, prefix .. "\t", verbose)
			print(prefix, "}")
		elseif isNode(node, CmdSyntaxKind.ForInStatement) then
			print(prefix, "ForInStatement", "{")
			prettyPrintNodes({ node.initializer, node.expression, node.statement }, prefix .. "\t", verbose)
			print(prefix, "}")
		elseif isNode(node, CmdSyntaxKind.ReturnStatement) then
			print(prefix, "ReturnStatement", "{")
			prettyPrintNodes({ node.expression }, prefix .. "\t", verbose)
			print(prefix, "}")
		elseif isNode(node, CmdSyntaxKind.IfStatement) then
			print(prefix, "IfStatement", "{")
			if node.condition then
				prettyPrintNodes({ node.condition }, prefix .. "\t", verbose)
			end
			if node.thenStatement then
				prettyPrintNodes({ node.thenStatement }, prefix .. "\t", verbose)
			end
			if node.elseStatement then
				prettyPrintNodes({ node.elseStatement }, prefix .. "\t", verbose)
			end
			print(prefix, "}")
		else
			print(prefix, getNodeKindName(node))
		end
	end
end
return prettyPrintNodes
]]></string>
                    </Properties>
                  </Item>
                </Item>
                <Item class="ModuleScript" referent="765">
                  <Properties>
                    <string name="Name">Validation</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
return nil
]]></string>
                  </Properties>
                </Item>
              </Item>
              <Item class="ModuleScript" referent="766">
                <Properties>
                  <string name="Name">Binder</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local _Nodes = TS.import(script, script.Parent, "Ast", "Nodes")
local isNode = _Nodes.isNode
local ZrNodeKind = _Nodes.ZrNodeKind
local ZrSymbolKind
do
	local _inverse = {}
	ZrSymbolKind = setmetatable({}, {
		__index = _inverse,
	})
	ZrSymbolKind.Source = 0
	_inverse[0] = "Source"
	ZrSymbolKind.Function = 1
	_inverse[1] = "Function"
	ZrSymbolKind.Variable = 2
	_inverse[2] = "Variable"
end
local ZrSymbolTable
do
	ZrSymbolTable = setmetatable({}, {
		__tostring = function()
			return "ZrSymbolTable"
		end,
	})
	ZrSymbolTable.__index = ZrSymbolTable
	function ZrSymbolTable.new(...)
		local self = setmetatable({}, ZrSymbolTable)
		return self:constructor(...) or self
	end
	function ZrSymbolTable:constructor()
		self.symbols = {}
	end
	function ZrSymbolTable:hasSymbolById(symbolId)
		local _symbols = self.symbols
		local _arg0 = function(f)
			return f.name == symbolId
		end
		-- ▼ ReadonlyArray.find ▼
		local _result = nil
		for _i, _v in ipairs(_symbols) do
			if _arg0(_v, _i - 1, _symbols) == true then
				_result = _v
				break
			end
		end
		-- ▲ ReadonlyArray.find ▲
		return _result
	end
	function ZrSymbolTable:addSymbol(symbol)
	end
end
-- * @internal
local ZrBinder
do
	ZrBinder = setmetatable({}, {
		__tostring = function()
			return "ZrBinder"
		end,
	})
	ZrBinder.__index = ZrBinder
	function ZrBinder.new(...)
		local self = setmetatable({}, ZrBinder)
		return self:constructor(...) or self
	end
	function ZrBinder:constructor(source)
		self.source = source
		self.symbolMap = {}
		self.symbolStack = {}
		self.currentSymbol = {
			kind = ZrSymbolKind.Source,
			name = "<source>",
		}
		local _symbolStack = self.symbolStack
		local _currentSymbol = self.currentSymbol
		-- ▼ Array.push ▼
		_symbolStack[#_symbolStack + 1] = _currentSymbol
		-- ▲ Array.push ▲
	end
	function ZrBinder:getSymbolNameFor(node)
		if isNode(node, ZrNodeKind.Identifier) then
			return "id:" .. node.name
		end
	end
	function ZrBinder:bindNode(node, parentSymbol)
		if isNode(node, ZrNodeKind.Source) then
			for _, child in ipairs(node.children) do
				self:bindNode(child)
			end
		elseif isNode(node, ZrNodeKind.VariableDeclaration) then
			local id = self:getSymbolNameFor(node)
		end
	end
	function ZrBinder:bind()
	end
end
return {
	ZrBinder = ZrBinder,
	ZrSymbolKind = ZrSymbolKind,
	ZrSymbolTable = ZrSymbolTable,
}
]]></string>
                </Properties>
              </Item>
              <Item class="Folder" referent="767">
                <Properties>
                  <string name="Name">Data</string>
                </Properties>
                <Item class="ModuleScript" referent="768">
                  <Properties>
                    <string name="Name">Context</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local _Stream = TS.import(script, script.Parent, "Stream")
local ZrInputStream = _Stream.ZrInputStream
local ZrOutputStream = _Stream.ZrOutputStream
local ZrContext
do
	ZrContext = setmetatable({}, {
		__tostring = function()
			return "ZrContext"
		end,
	})
	ZrContext.__index = ZrContext
	function ZrContext.new(...)
		local self = setmetatable({}, ZrContext)
		return self:constructor(...) or self
	end
	function ZrContext:constructor(runtime)
		self.runtime = runtime
		self.input = ZrInputStream:empty()
		self.output = ZrOutputStream.new()
	end
	function ZrContext:createPipedContext(runtime, input, output)
		local context = ZrContext.new(runtime)
		context.input = input
		context.output = output
		return context
	end
	function ZrContext:getLocals()
		return self.runtime:getLocals()
	end
	function ZrContext:getInput()
		return self.input
	end
	function ZrContext:getExecutor()
		return self.runtime:getExecutingPlayer()
	end
	function ZrContext:getOutput()
		return self.output
	end
end
return {
	default = ZrContext,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="769">
                  <Properties>
                    <string name="Name">Enum</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local ZrEnumItem = TS.import(script, script.Parent, "EnumItem").ZrEnumItem
--[[
	*
	* The built-in Enum type in Zirconium
]]
local ZrEnum
do
	ZrEnum = setmetatable({}, {
		__tostring = function()
			return "ZrEnum"
		end,
	})
	ZrEnum.__index = ZrEnum
	function ZrEnum.new(...)
		local self = setmetatable({}, ZrEnum)
		return self:constructor(...) or self
	end
	function ZrEnum:constructor(items, name, enumFactory)
		if name == nil then
			name = "[ZrEnum]"
		end
		if enumFactory == nil then
			enumFactory = function(value, index)
				return ZrEnumItem.new(self, index, value)
			end
		end
		self.name = name
		self.items = {}
		-- ▼ ReadonlyArray.map ▼
		local _newValue = table.create(#items)
		for _k, _v in ipairs(items) do
			_newValue[_k] = enumFactory(_v, _k - 1, items)
		end
		-- ▲ ReadonlyArray.map ▲
		self.items = _newValue
	end
	function ZrEnum:fromArray(name, items)
		return ZrEnum.new(items, name)
	end
	function ZrEnum:getEnumName()
		return self.name
	end
	function ZrEnum:getItemByName(name)
		local _items = self.items
		local _arg0 = function(f)
			return f:getName() == name
		end
		-- ▼ ReadonlyArray.find ▼
		local _result = nil
		for _i, _v in ipairs(_items) do
			if _arg0(_v, _i - 1, _items) == true then
				_result = _v
				break
			end
		end
		-- ▲ ReadonlyArray.find ▲
		return _result
	end
	function ZrEnum:getItemByIndex(idx)
		local _items = self.items
		local _arg0 = function(f)
			return f:getValue() == idx
		end
		-- ▼ ReadonlyArray.find ▼
		local _result = nil
		for _i, _v in ipairs(_items) do
			if _arg0(_v, _i - 1, _items) == true then
				_result = _v
				break
			end
		end
		-- ▲ ReadonlyArray.find ▲
		return _result
	end
	function ZrEnum:getItems()
		return self.items
	end
	function ZrEnum:toString()
		return "enum@" .. self.name
	end
	function ZrEnum:__tostring()
		return self:toString()
	end
end
return {
	ZrEnum = ZrEnum,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="770">
                  <Properties>
                    <string name="Name">EnumItem</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
--[[
	*
	* The built-in Zirconium enum item type
]]
local ZrEnumItem
do
	ZrEnumItem = setmetatable({}, {
		__tostring = function()
			return "ZrEnumItem"
		end,
	})
	ZrEnumItem.__index = ZrEnumItem
	function ZrEnumItem.new(...)
		local self = setmetatable({}, ZrEnumItem)
		return self:constructor(...) or self
	end
	function ZrEnumItem:constructor(parentEnum, value, name)
		self.parentEnum = parentEnum
		self.value = value
		self.name = name
	end
	function ZrEnumItem:getEnum()
		return self.parentEnum
	end
	function ZrEnumItem:getValue()
		return self.value
	end
	function ZrEnumItem:getName()
		return self.name
	end
	function ZrEnumItem:toString()
		return "enum@" .. (self.parentEnum:getEnumName() .. ("." .. self:getName()))
	end
	function ZrEnumItem:__tostring()
		return self:toString()
	end
end
return {
	ZrEnumItem = ZrEnumItem,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="771">
                  <Properties>
                    <string name="Name">Helpers</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local ZrUndefined = TS.import(script, script.Parent, "Undefined")
local function ZrIsUndefined(value)
	return value == ZrUndefined
end
return {
	ZrIsUndefined = ZrIsUndefined,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="772">
                  <Properties>
                    <string name="Name">Locals</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local Result = TS.import(script, TS.getModule(script, "@rbxts", "rust-classes").out).Result
local _Nodes = TS.import(script, script.Parent.Parent, "Ast", "Nodes")
local isNode = _Nodes.isNode
local ZrNodeKind = _Nodes.ZrNodeKind
local ZrLuauFunction = TS.import(script, script.Parent, "LuauFunction").default
local ZrUndefined = TS.import(script, script.Parent, "Undefined")
local ZrLocalStack
do
	ZrLocalStack = setmetatable({}, {
		__tostring = function()
			return "ZrLocalStack"
		end,
	})
	ZrLocalStack.__index = ZrLocalStack
	function ZrLocalStack.new(...)
		local self = setmetatable({}, ZrLocalStack)
		return self:constructor(...) or self
	end
	function ZrLocalStack:constructor(inject)
		self.locals = {}
		if inject then
			local newLocals = {}
			for name, value in pairs(inject) do
				local _arg1 = { value, TS.instanceof(value, ZrLuauFunction) }
				-- ▼ Map.set ▼
				newLocals[name] = _arg1
				-- ▲ Map.set ▲
			end
			local _locals = self.locals
			-- ▼ Array.push ▼
			_locals[#_locals + 1] = newLocals
			-- ▲ Array.push ▲
		end
	end
	function ZrLocalStack:print()
		print("=== stack ===")
		for i, localStack in ipairs(self.locals) do
			for k, v in pairs(localStack) do
				local _arg0 = i - 1
				print(string.rep("░", _arg0), k, v)
			end
		end
		print("=== end stack ===")
	end
	function ZrLocalStack:current()
		return self.locals[#self.locals - 1 + 1]
	end
	function ZrLocalStack:setGlobal(name, value, constant)
		local first = self.locals[1]
		local _arg1 = { value, constant }
		-- ▼ Map.set ▼
		first[name] = _arg1
		-- ▲ Map.set ▲
	end
	function ZrLocalStack:getGlobal(name)
		local first = self.locals[1]
		return first[name]
	end
	function ZrLocalStack:setUpValueOrLocal(name, value, constant)
		local _condition = self:getUpValueStack(name)
		if _condition == nil then
			_condition = self:current()
		end
		local stack = _condition
		local stackValue = stack[name]
		if stackValue then
			local _binding = stackValue
			local constant = _binding[2]
			if constant then
				return Result:err(0)
			end
		end
		if value ~= nil and value ~= ZrUndefined then
			local _arg1 = { value, constant }
			-- ▼ Map.set ▼
			stack[name] = _arg1
			-- ▲ Map.set ▲
			return Result:ok(value)
		else
			-- ▼ Map.delete ▼
			stack[name] = nil
			-- ▲ Map.delete ▲
			return Result:ok(ZrUndefined)
		end
	end
	function ZrLocalStack:setUpValueOrLocalIfDefined(name, value)
		local _condition = self:getUpValueStack(name)
		if _condition == nil then
			_condition = self:current()
		end
		local stack = _condition
		local existingValue = stack[name]
		if existingValue ~= nil then
			if value == ZrUndefined or value == nil then
				return self:setUpValueOrLocal(name, ZrUndefined)
			else
				return self:setUpValueOrLocal(name, value)
			end
		else
			return Result:err(1)
		end
	end
	function ZrLocalStack:setLocal(name, value, constant)
		local last = self:current()
		if value == nil then
			local _arg1 = { ZrUndefined, constant }
			-- ▼ Map.set ▼
			last[name] = _arg1
			-- ▲ Map.set ▲
		else
			local _arg1 = { value, constant }
			-- ▼ Map.set ▼
			last[name] = _arg1
			-- ▲ Map.set ▲
		end
	end
	function ZrLocalStack:getUpValueStack(name)
		for _, currentLocals in ipairs(self.locals) do
			if currentLocals[name] ~= nil then
				return currentLocals
			end
		end
	end
	function ZrLocalStack:getLocalOrUpValue(name)
		do
			local i = #self.locals - 1
			local _shouldIncrement = false
			while true do
				if _shouldIncrement then
					i -= 1
				else
					_shouldIncrement = true
				end
				if not (i >= 0) then
					break
				end
				local stack = self.locals[i + 1]
				if stack[name] ~= nil then
					return stack[name]
				end
			end
		end
		return nil
	end
	function ZrLocalStack:pop()
		local _exp = self.locals
		-- ▼ Array.pop ▼
		local _length = #_exp
		local _result = _exp[_length]
		_exp[_length] = nil
		-- ▲ Array.pop ▲
		return _result
	end
	function ZrLocalStack:push()
		local _locals = self.locals
		-- ▼ Array.push ▼
		local _arg0 = {}
		_locals[#_locals + 1] = _arg0
		-- ▲ Array.push ▲
	end
	function ZrLocalStack:toMap()
		local map = {}
		for _, currentLocals in ipairs(self.locals) do
			local _arg0 = function(v, k)
				local _arg1 = v[1]
				-- ▼ Map.set ▼
				map[k] = _arg1
				-- ▲ Map.set ▲
				return map
			end
			-- ▼ ReadonlyMap.forEach ▼
			for _k, _v in pairs(currentLocals) do
				_arg0(_v, _k, currentLocals)
			end
			-- ▲ ReadonlyMap.forEach ▲
		end
		return map
	end
	function ZrLocalStack:evaluateInterpolatedString(expression)
		local text = ""
		for _, value in ipairs(expression.values) do
			if isNode(value, ZrNodeKind.Identifier) then
				local _condition = self:getLocalOrUpValue(value.name)
				if _condition == nil then
					_condition = ""
				end
				text ..= tostring(_condition)
			else
				text ..= value.text
			end
		end
		return text
	end
end
return {
	default = ZrLocalStack,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="773">
                  <Properties>
                    <string name="Name">LuauFunction</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
--[[
	*
	* A lua-side function.
	*
	* Where the real magic happens.
]]
local ZrLuauFunction
do
	ZrLuauFunction = setmetatable({}, {
		__tostring = function()
			return "ZrLuauFunction"
		end,
	})
	ZrLuauFunction.__index = ZrLuauFunction
	function ZrLuauFunction.new(...)
		local self = setmetatable({}, ZrLuauFunction)
		return self:constructor(...) or self
	end
	function ZrLuauFunction:constructor(callback)
		self.callback = callback
	end
	function ZrLuauFunction:createDynamic(fn)
		return ZrLuauFunction.new(fn)
	end
	function ZrLuauFunction:call(context, ...)
		local args = { ... }
		return self.callback(context, unpack(args))
	end
	function ZrLuauFunction:toString()
		return "function (...) { [native] }"
	end
	function ZrLuauFunction:__tostring()
		return self:toString()
	end
end
return {
	default = ZrLuauFunction,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="774">
                  <Properties>
                    <string name="Name">Null</string>
                    <string name="Source">local self = newproxy(true)
getmetatable(self).__tostring = function()
    return "(null)"
end
return self;</string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="775">
                  <Properties>
                    <string name="Name">Object</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local ZrIsUndefined = TS.import(script, script.Parent, "Helpers").ZrIsUndefined
local ZrUndefined = TS.import(script, script.Parent, "Undefined")
--[[
	*
	* A zirconium object
]]
local ZrObject
do
	ZrObject = setmetatable({}, {
		__tostring = function()
			return "ZrObject"
		end,
	})
	ZrObject.__index = ZrObject
	function ZrObject.new(...)
		local self = setmetatable({}, ZrObject)
		return self:constructor(...) or self
	end
	function ZrObject:constructor()
		self.map = {}
	end
	function ZrObject:fromRecord(record)
		local obj = ZrObject.new()
		for key, value in pairs(record) do
			obj:set(key, value)
		end
		return obj
	end
	function ZrObject:set(name, value)
		if ZrIsUndefined(value) then
			-- ▼ Map.delete ▼
			self.map[name] = nil
			-- ▲ Map.delete ▲
		else
			-- ▼ Map.set ▼
			self.map[name] = value
			-- ▲ Map.set ▲
		end
	end
	function ZrObject:get(name)
		local _condition = self.map[name]
		if _condition == nil then
			_condition = ZrUndefined
		end
		return _condition
	end
	function ZrObject:toString()
		local str = {}
		for key, value in pairs(self.map) do
			local _arg0 = key .. (": " .. tostring(value))
			-- ▼ Array.push ▼
			str[#str + 1] = _arg0
			-- ▲ Array.push ▲
		end
		local _condition = table.concat(str, ", ")
		if not (_condition ~= "" and _condition) then
			_condition = " "
		end
		return "{" .. (_condition .. "}")
	end
	function ZrObject:toMap()
		return self.map
	end
	function ZrObject:__tostring()
		return self:toString()
	end
end
return {
	default = ZrObject,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="776">
                  <Properties>
                    <string name="Name">Range</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local ZrRange
do
	ZrRange = setmetatable({}, {
		__tostring = function()
			return "ZrRange"
		end,
	})
	ZrRange.__index = ZrRange
	function ZrRange.new(...)
		local self = setmetatable({}, ZrRange)
		return self:constructor(...) or self
	end
	function ZrRange:constructor(range)
		self.range = range
		self.rng = Random.new()
	end
	function ZrRange:GetValue()
		return self.range
	end
	function ZrRange:GetRandomInteger()
		return self.rng:NextInteger(self.range.Min, self.range.Max)
	end
	function ZrRange:GetRandomNumber()
		return self.rng:NextNumber(self.range.Min, self.range.Max)
	end
	function ZrRange:Iterator()
		return TS.generator(function()
			do
				local i = self.range.Min
				local _shouldIncrement = false
				while true do
					if _shouldIncrement then
						i += 1
					else
						_shouldIncrement = true
					end
					if not (i <= self.range.Max) then
						break
					end
					coroutine.yield(i)
				end
			end
		end)
	end
	function ZrRange:GetMin()
		return self.range.Min
	end
	function ZrRange:GetMax()
		return self.range.Max
	end
	function ZrRange:toString()
		return tostring(self.range.Min) .. (" .. " .. tostring(self.range.Max))
	end
	function ZrRange:__tostring()
		return self:toString()
	end
	ZrRange.properties = {
		random_int = function(range)
			return range:GetRandomInteger()
		end,
		random = function(range)
			return range:GetRandomNumber()
		end,
		min = function(range)
			return range:GetMin()
		end,
		max = function(range)
			return range:GetMax()
		end,
	}
end
return {
	default = ZrRange,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="777">
                  <Properties>
                    <string name="Name">Stream</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local stringify = TS.import(script, script.Parent.Parent, "Functions", "BuiltInFunctions").stringify
local ZrInputStream
do
	ZrInputStream = setmetatable({}, {
		__tostring = function()
			return "ZrInputStream"
		end,
	})
	ZrInputStream.__index = ZrInputStream
	function ZrInputStream.new(...)
		local self = setmetatable({}, ZrInputStream)
		return self:constructor(...) or self
	end
	function ZrInputStream:constructor(input)
		self.input = input
	end
	function ZrInputStream:empty()
		return ZrInputStream.new({})
	end
	function ZrInputStream:isEmpty()
		return #self.input == 0
	end
	function ZrInputStream:stream()
		return TS.generator(function()
			for _, value in ipairs(self.input) do
				coroutine.yield(value)
			end
		end)
	end
	function ZrInputStream:ipairs()
		return ipairs(self.input)
	end
	function ZrInputStream:toArray()
		return self.input
	end
end
local ZrOutputStream
do
	ZrOutputStream = setmetatable({}, {
		__tostring = function()
			return "ZrOutputStream"
		end,
	})
	ZrOutputStream.__index = ZrOutputStream
	function ZrOutputStream.new(...)
		local self = setmetatable({}, ZrOutputStream)
		return self:constructor(...) or self
	end
	function ZrOutputStream:constructor()
		self.output = {}
	end
	function ZrOutputStream:toArray()
		return self.output
	end
	function ZrOutputStream:write(message)
		local _output = self.output
		-- ▼ Array.push ▼
		_output[#_output + 1] = message
		-- ▲ Array.push ▲
	end
	function ZrOutputStream:_toStringArray()
		local _output = self.output
		local _arg0 = function(v)
			return stringify(v)
		end
		-- ▼ ReadonlyArray.map ▼
		local _newValue = table.create(#_output)
		for _k, _v in ipairs(_output) do
			_newValue[_k] = _arg0(_v, _k - 1, _output)
		end
		-- ▲ ReadonlyArray.map ▲
		return _newValue
	end
	function ZrOutputStream:_toInputStream()
		return ZrInputStream.new(self.output)
	end
end
return {
	ZrInputStream = ZrInputStream,
	ZrOutputStream = ZrOutputStream,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="778">
                  <Properties>
                    <string name="Name">Undefined</string>
                    <string name="Source">local self = newproxy(true)
getmetatable(self).__tostring = function()
    return "undefined"
end
return self;</string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="779">
                  <Properties>
                    <string name="Name">UserFunction</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local isNode = TS.import(script, script.Parent.Parent, "Ast").isNode
local ZrNodeKind = TS.import(script, script.Parent.Parent, "Ast", "Nodes").ZrNodeKind
--[[
	*
	* A function declared by a user
]]
local ZrUserFunction
do
	ZrUserFunction = setmetatable({}, {
		__tostring = function()
			return "ZrUserFunction"
		end,
	})
	ZrUserFunction.__index = ZrUserFunction
	function ZrUserFunction.new(...)
		local self = setmetatable({}, ZrUserFunction)
		return self:constructor(...) or self
	end
	function ZrUserFunction:constructor(declaration)
		self.parameters = declaration.parameters
		self.body = declaration.body
		if isNode(declaration, ZrNodeKind.FunctionDeclaration) then
			self.name = declaration.name.name
		end
	end
	function ZrUserFunction:getParameters()
		return self.parameters
	end
	function ZrUserFunction:getBody()
		return self.body
	end
	function ZrUserFunction:toString()
		local _condition = self.name
		if _condition == nil then
			_condition = ""
		end
		local _parameters = self.parameters
		local _arg0 = function(p)
			return p.name.name
		end
		-- ▼ ReadonlyArray.map ▼
		local _newValue = table.create(#_parameters)
		for _k, _v in ipairs(_parameters) do
			_newValue[_k] = _arg0(_v, _k - 1, _parameters)
		end
		-- ▲ ReadonlyArray.map ▲
		return "function " .. (_condition .. ("(" .. (table.concat(_newValue, ", ") .. ") {...}")))
	end
	function ZrUserFunction:__tostring()
		return self:toString()
	end
end
return {
	default = ZrUserFunction,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="780">
                  <Properties>
                    <string name="Name">Userdata</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local ZrInstanceUserdata, ZrObjectUserdata
local ZrUserdata
do
	ZrUserdata = {}
	function ZrUserdata:constructor()
	end
	function ZrUserdata:fromInstance(instance)
		return ZrInstanceUserdata.new(instance)
	end
	function ZrUserdata:fromLazyInstance(lazyFn)
		return ZrInstanceUserdata.new(lazyFn)
	end
	function ZrUserdata:fromRecord(record)
		return ZrObjectUserdata.new(record)
	end
	function ZrUserdata:fromObject(object)
		return ZrObjectUserdata.new(object)
	end
end
do
	local super = ZrUserdata
	ZrObjectUserdata = setmetatable({}, {
		__tostring = function()
			return "ZrObjectUserdata"
		end,
		__index = super,
	})
	ZrObjectUserdata.__index = ZrObjectUserdata
	function ZrObjectUserdata.new(...)
		local self = setmetatable({}, ZrObjectUserdata)
		return self:constructor(...) or self
	end
	function ZrObjectUserdata:constructor(object)
		super.constructor(self)
		self.object = object
	end
	function ZrObjectUserdata:isInstance()
		return false
	end
	function ZrObjectUserdata:isObject(klass)
		return TS.instanceof(self.object, klass)
	end
	function ZrObjectUserdata:toString()
		return self.object.toString ~= nil and tostring(self.object) or "[ZrObjectUserdata]"
	end
	function ZrObjectUserdata:value()
		return self.object
	end
	function ZrObjectUserdata:__tostring()
		return self:toString()
	end
end
do
	local super = ZrUserdata
	ZrInstanceUserdata = setmetatable({}, {
		__tostring = function()
			return "ZrInstanceUserdata"
		end,
		__index = super,
	})
	ZrInstanceUserdata.__index = ZrInstanceUserdata
	function ZrInstanceUserdata.new(...)
		local self = setmetatable({}, ZrInstanceUserdata)
		return self:constructor(...) or self
	end
	function ZrInstanceUserdata:constructor(instance)
		super.constructor(self)
		self.instance = instance
	end
	function ZrInstanceUserdata:isInstance()
		return true
	end
	function ZrInstanceUserdata:isObject(value)
		return false
	end
	function ZrInstanceUserdata:toString()
		return tostring(self:value())
	end
	function ZrInstanceUserdata:get(name)
		local _instance = self.instance
		if type(_instance) == "function" then
			self.instance = self.instance()
		end
		local value = self.instance[name]
		if type(value) == "function" then
			error("Cannot index function")
		elseif typeof(value) == "Instance" then
			return ZrInstanceUserdata.new(value)
		else
			return value
		end
	end
	function ZrInstanceUserdata:value()
		local _instance = self.instance
		if type(_instance) == "function" then
			self.instance = self.instance()
		end
		return self.instance
	end
	function ZrInstanceUserdata:isA(className)
		return self:value():IsA(className)
	end
	function ZrInstanceUserdata:__tostring()
		return self:toString()
	end
end
return {
	ZrUserdata = ZrUserdata,
	ZrObjectUserdata = ZrObjectUserdata,
	ZrInstanceUserdata = ZrInstanceUserdata,
}
]]></string>
                  </Properties>
                </Item>
              </Item>
              <Item class="Folder" referent="781">
                <Properties>
                  <string name="Name">Functions</string>
                </Properties>
                <Item class="ModuleScript" referent="782">
                  <Properties>
                    <string name="Name">BuiltInFunctions</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local _Util = TS.import(script, script.Parent.Parent, "Util")
local isArray = _Util.isArray
local isMap = _Util.isMap
local ZrLuauFunction = TS.import(script, script.Parent.Parent, "Data", "LuauFunction").default
local runService = game:GetService("RunService")
local stringify
stringify = function(value)
	if isArray(value) then
		local _arg0 = function(v)
			return stringify(v)
		end
		-- ▼ ReadonlyArray.map ▼
		local _newValue = table.create(#value)
		for _k, _v in ipairs(value) do
			_newValue[_k] = _arg0(_v, _k - 1, value)
		end
		-- ▲ ReadonlyArray.map ▲
		local _condition = table.concat(_newValue, ", ")
		if not (_condition ~= "" and _condition) then
			_condition = " "
		end
		return "[" .. _condition .. "]"
	elseif isMap(value) then
		local values = {}
		for k, v in pairs(value) do
			local _arg0 = k .. (": " .. stringify(v))
			-- ▼ Array.push ▼
			values[#values + 1] = _arg0
			-- ▲ Array.push ▲
		end
		return table.concat(values, ", ")
	elseif type(value) == "table" then
		return tostring(value)
	else
		return tostring(value)
	end
end
local ZrPrint = ZrLuauFunction:createDynamic(function(ctx, ...)
	local params = { ... }
	local input = ctx:getInput()
	if input:isEmpty() then
		local _arg0 = function(p)
			return stringify(p)
		end
		-- ▼ ReadonlyArray.map ▼
		local _newValue = table.create(#params)
		for _k, _v in ipairs(params) do
			_newValue[_k] = _arg0(_v, _k - 1, params)
		end
		-- ▲ ReadonlyArray.map ▲
		print(table.concat(_newValue, " "))
	else
		local _exp = input:toArray()
		local _arg0 = function(p)
			return stringify(p)
		end
		-- ▼ ReadonlyArray.map ▼
		local _newValue = table.create(#_exp)
		for _k, _v in ipairs(_exp) do
			_newValue[_k] = _arg0(_v, _k - 1, _exp)
		end
		-- ▲ ReadonlyArray.map ▲
		print(table.concat(_newValue, " "))
	end
end)
local ZrRange = ZrLuauFunction:createDynamic(function(ctx, start, stop)
	if type(start) == "number" and type(stop) == "number" then
		local arr = table.create(stop - start)
		do
			local i = 0
			local _shouldIncrement = false
			while true do
				if _shouldIncrement then
					i += 1
				else
					_shouldIncrement = true
				end
				if not (i <= stop - start) then
					break
				end
				local _arg0 = start + i
				-- ▼ Array.push ▼
				arr[#arr + 1] = _arg0
				-- ▲ Array.push ▲
			end
		end
		return arr
	end
end)
local ZrDebug = ZrLuauFunction:createDynamic(function(ctx)
	local _arg0 = runService:IsStudio()
	assert(_arg0)
	local locals = ctx:getLocals()
	locals:print()
end)
return {
	stringify = stringify,
	ZrPrint = ZrPrint,
	ZrRange = ZrRange,
	ZrDebug = ZrDebug,
}
]]></string>
                  </Properties>
                </Item>
              </Item>
              <Item class="Folder" referent="783">
                <Properties>
                  <string name="Name">Runtime</string>
                </Properties>
                <Item class="ModuleScript" referent="784">
                  <Properties>
                    <string name="Name">PlayerScriptContext</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local ZrInstanceUserdata = TS.import(script, script.Parent.Parent, "Data", "Userdata").ZrInstanceUserdata
local ZrScript = TS.import(script, script.Parent, "Script").default
local ZrScriptContext = TS.import(script, script.Parent, "ScriptContext").default
local ZrPlayerScriptContext
do
	local super = ZrScriptContext
	ZrPlayerScriptContext = setmetatable({}, {
		__tostring = function()
			return "ZrPlayerScriptContext"
		end,
		__index = super,
	})
	ZrPlayerScriptContext.__index = ZrPlayerScriptContext
	function ZrPlayerScriptContext.new(...)
		local self = setmetatable({}, ZrPlayerScriptContext)
		return self:constructor(...) or self
	end
	function ZrPlayerScriptContext:constructor(player)
		super.constructor(self)
		self.player = player
	end
	function ZrPlayerScriptContext:createScript(nodes)
		self:registerGlobal("executor", ZrInstanceUserdata.new(self.player))
		return ZrScript.new(nodes, self:getGlobals(), self.player)
	end
end
return {
	default = ZrPlayerScriptContext,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="785">
                  <Properties>
                    <string name="Name">Runtime</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local _Nodes = TS.import(script, script.Parent.Parent, "Ast", "Nodes")
local isNode = _Nodes.isNode
local ZrNodeKind = _Nodes.ZrNodeKind
local getFriendlyName = TS.import(script, script.Parent.Parent, "Ast", "Nodes", "Functions").getFriendlyName
local ZrObject = TS.import(script, script.Parent.Parent, "Data", "Object").default
local ZrLocalStack = TS.import(script, script.Parent.Parent, "Data", "Locals").default
local _Util = TS.import(script, script.Parent.Parent, "Util")
local isArray = _Util.isArray
local isMap = _Util.isMap
local ZrUserFunction = TS.import(script, script.Parent.Parent, "Data", "UserFunction").default
local ZrLuauFunction = TS.import(script, script.Parent.Parent, "Data", "LuauFunction").default
local ZrContext = TS.import(script, script.Parent.Parent, "Data", "Context").default
local types = TS.import(script, script.Parent.Parent, "Ast").types
local ZrUserdata = TS.import(script, script.Parent.Parent, "Data", "Userdata").ZrUserdata
local ZrUndefined = TS.import(script, script.Parent.Parent, "Data", "Undefined")
local _Stream = TS.import(script, script.Parent.Parent, "Data", "Stream")
local ZrInputStream = _Stream.ZrInputStream
local ZrOutputStream = _Stream.ZrOutputStream
local ZrRange = TS.import(script, script.Parent.Parent, "Data", "Range").default
local ZrEnum = TS.import(script, script.Parent.Parent, "Data", "Enum").ZrEnum
local ZrEnumItem = TS.import(script, script.Parent.Parent, "Data", "EnumItem").ZrEnumItem
local ZrRuntimeErrorCode
do
	local _inverse = {}
	ZrRuntimeErrorCode = setmetatable({}, {
		__index = _inverse,
	})
	ZrRuntimeErrorCode.NodeValueError = 0
	_inverse[0] = "NodeValueError"
	ZrRuntimeErrorCode.EvaluationError = 1
	_inverse[1] = "EvaluationError"
	ZrRuntimeErrorCode.StackOverflow = 2
	_inverse[2] = "StackOverflow"
	ZrRuntimeErrorCode.InvalidForInExpression = 3
	_inverse[3] = "InvalidForInExpression"
	ZrRuntimeErrorCode.IndexingUndefined = 4
	_inverse[4] = "IndexingUndefined"
	ZrRuntimeErrorCode.InvalidArrayIndex = 5
	_inverse[5] = "InvalidArrayIndex"
	ZrRuntimeErrorCode.InvalidType = 6
	_inverse[6] = "InvalidType"
	ZrRuntimeErrorCode.NotCallable = 7
	_inverse[7] = "NotCallable"
	ZrRuntimeErrorCode.InvalidPropertyAccess = 8
	_inverse[8] = "InvalidPropertyAccess"
	ZrRuntimeErrorCode.PipeError = 9
	_inverse[9] = "PipeError"
	ZrRuntimeErrorCode.InstanceSetViolation = 10
	_inverse[10] = "InstanceSetViolation"
	ZrRuntimeErrorCode.InstanceGetViolation = 11
	_inverse[11] = "InstanceGetViolation"
	ZrRuntimeErrorCode.InvalidIterator = 12
	_inverse[12] = "InvalidIterator"
	ZrRuntimeErrorCode.ReassignConstant = 13
	_inverse[13] = "ReassignConstant"
	ZrRuntimeErrorCode.InvalidRangeError = 14
	_inverse[14] = "InvalidRangeError"
	ZrRuntimeErrorCode.InvalidEnumItem = 15
	_inverse[15] = "InvalidEnumItem"
	ZrRuntimeErrorCode.OutOfRange = 16
	_inverse[16] = "OutOfRange"
	ZrRuntimeErrorCode.UnassignedVariable = 17
	_inverse[17] = "UnassignedVariable"
end
local getTypeName = function(value)
	if isArray(value) then
		return "Array"
	elseif TS.instanceof(value, ZrObject) then
		return "Object"
	elseif value == ZrUndefined then
		return "undefined"
	else
		return typeof(value)
	end
end
--[[
	*
	* Handles a block
]]
local ZrRuntime
do
	ZrRuntime = setmetatable({}, {
		__tostring = function()
			return "ZrRuntime"
		end,
	})
	ZrRuntime.__index = ZrRuntime
	function ZrRuntime.new(...)
		local self = setmetatable({}, ZrRuntime)
		return self:constructor(...) or self
	end
	function ZrRuntime:constructor(source, locals, executingPlayer)
		if locals == nil then
			locals = ZrLocalStack.new()
		end
		self.source = source
		self.locals = locals
		self.executingPlayer = executingPlayer
		self.level = 0
		self.errors = {}
		self.functions = {}
		self.context = ZrContext.new(self)
	end
	function ZrRuntime:runtimeError(message, code, node)
		local _arg0 = {
			message = message,
			code = code,
			node = node,
		}
		local err = _arg0
		local _errors = self.errors
		-- ▼ Array.push ▼
		_errors[#_errors + 1] = err
		-- ▲ Array.push ▲
		error("[RuntimeError] " .. err.message)
	end
	function ZrRuntime:runtimeAssert(condition, message, code, node)
		if condition == false then
			self:runtimeError(message, code, node)
		end
	end
	function ZrRuntime:runtimeAssertNotUndefined(condition, message, code, node)
		if condition == nil then
			self:runtimeError(message, code, node)
		end
	end
	function ZrRuntime:registerFunction(name, func)
		-- ▼ Map.set ▼
		self.functions[name] = func
		-- ▲ Map.set ▲
		self.locals:setGlobal(name, func)
	end
	function ZrRuntime:getLocals()
		return self.locals
	end
	function ZrRuntime:getErrors()
		return self.errors
	end
	function ZrRuntime:push()
		self.level += 1
		self.locals:push()
		if self.level > 256 then
			self:runtimeError("Stack overflow", ZrRuntimeErrorCode.StackOverflow)
		end
	end
	function ZrRuntime:pop()
		self.level -= 1
		return self.locals:pop()
	end
	function ZrRuntime:executeSetVariable(node)
		local _binding = node
		local identifier = _binding.identifier
		local expression = _binding.expression
		local flags = _binding.flags
		local value = self:evaluateNode(expression)
		if types.isIdentifier(identifier) then
			local isConstant = (bit32.band(flags, 1)) ~= 0
			local isLocalAssignment = isConstant or (bit32.band(flags, 2)) ~= 0
			if isLocalAssignment then
				local _fn = self:getLocals()
				local _exp = identifier.name
				local _result
				if value == ZrUndefined then
					_result = nil
				else
					_result = value
				end
				_fn:setLocal(_exp, _result, isConstant)
			else
				local _fn = self:getLocals()
				local _exp = identifier.name
				local _result
				if value == ZrUndefined then
					_result = nil
				else
					_result = value
				end
				local result = _fn:setUpValueOrLocal(_exp, _result, isConstant)
				if result:isErr() then
					local _binding_1 = result
					local errValue = _binding_1.errValue
					if errValue == 0 then
						self:runtimeError("Unable to reassign constant or readonly '" .. (identifier.name .. "'"), ZrRuntimeErrorCode.ReassignConstant, node)
					end
				end
			end
		else
			self:runtimeError("Not yet implemented", ZrRuntimeErrorCode.EvaluationError)
		end
		return nil
	end
	function ZrRuntime:evaluateObjectNode(node)
		local object = ZrObject.new()
		for _, prop in ipairs(node.values) do
			local value = self:evaluateNode(prop.initializer)
			self:runtimeAssertNotUndefined(value, "No value", ZrRuntimeErrorCode.NodeValueError, prop.initializer)
			object:set(prop.name.name, value)
		end
		return object
	end
	function ZrRuntime:evaluateFunctionDeclaration(node)
		local declaration = ZrUserFunction.new(node)
		self.locals:setLocal(node.name.name, declaration, true)
		return declaration
	end
	function ZrRuntime:evaluateEnumDeclaration(node)
		local name = node.name.name
		local _fn = ZrEnum
		local _exp = node.name.name
		local _values = node.values
		local _arg0 = function(v)
			return v.name.name
		end
		-- ▼ ReadonlyArray.map ▼
		local _newValue = table.create(#_values)
		for _k, _v in ipairs(_values) do
			_newValue[_k] = _arg0(_v, _k - 1, _values)
		end
		-- ▲ ReadonlyArray.map ▲
		local declaration = _fn:fromArray(_exp, _newValue)
		self.locals:setLocal(name, declaration, true)
		return declaration
	end
	function ZrRuntime:evaluateFunctionExpression(node)
		local declaration = ZrUserFunction.new(node)
		return declaration
	end
	function ZrRuntime:evaluateArrayNode(node)
		local values = {}
		local i = 0
		for _, subNode in ipairs(node.values) do
			local value = self:evaluateNode(subNode)
			self:runtimeAssertNotUndefined(value, "Array value is NONE at index " .. tostring(i), ZrRuntimeErrorCode.NodeValueError, subNode)
			if value == ZrUndefined then
				break
			end
			-- ▼ Array.push ▼
			values[#values + 1] = value
			-- ▲ Array.push ▲
			i += 1
		end
		return values
	end
	function ZrRuntime:evaluateIfStatement(node)
		local _binding = node
		local condition = _binding.condition
		local thenStatement = _binding.thenStatement
		local elseStatement = _binding.elseStatement
		assert(condition)
		local resultOfCondition = self:evaluateNode(condition)
		self:runtimeAssertNotUndefined(condition, "Condition not valid?", ZrRuntimeErrorCode.EvaluationError, condition)
		local isTruthy = resultOfCondition ~= nil and (resultOfCondition ~= false and resultOfCondition ~= ZrUndefined)
		if isTruthy and thenStatement ~= nil then
			self:evaluateNode(thenStatement)
		elseif elseStatement ~= nil then
			self:evaluateNode(elseStatement)
		end
	end
	function ZrRuntime:evaluateForInStatement(node)
		local _binding = node
		local initializer = _binding.initializer
		local statement = _binding.statement
		local _binding_1 = node
		local expression = _binding_1.expression
		-- Shortcut a parenthesized expression
		if isNode(expression, ZrNodeKind.ParenthesizedExpression) then
			expression = expression.expression
		end
		local value
		if isNode(expression, ZrNodeKind.Identifier) then
			local _result = self.locals:getLocalOrUpValue(expression.name)
			if _result ~= nil then
				_result = _result[1]
			end
			local _condition = _result
			if _condition == nil then
				_condition = ZrUndefined
			end
			value = _condition
		elseif types.isCallableExpression(expression) or (isNode(expression, ZrNodeKind.ArrayLiteralExpression) or (isNode(expression, ZrNodeKind.ObjectLiteralExpression) or isNode(expression, ZrNodeKind.BinaryExpression))) then
			value = self:evaluateNode(expression)
		else
			self:runtimeError("Invalid expression to ForIn statement - expects Array or Object", ZrRuntimeErrorCode.InvalidForInExpression, expression)
		end
		if value == ZrUndefined then
			self:runtimeError("Cannot iterate undefined value", ZrRuntimeErrorCode.InvalidIterator, expression)
		end
		self:runtimeAssertNotUndefined(value, "Expression expected", ZrRuntimeErrorCode.InvalidForInExpression, expression)
		self:runtimeAssert(isArray(value) or (TS.instanceof(value, ZrObject) or TS.instanceof(value, ZrRange)), "Array, Map or Object expected", ZrRuntimeErrorCode.InvalidType, expression)
		if TS.instanceof(value, ZrObject) then
			for k, v in pairs(value:toMap()) do
				self:push()
				self.locals:setLocal(initializer.name, { k, v })
				self:evaluateNode(statement)
				self:pop()
			end
		elseif TS.instanceof(value, ZrRange) then
			for _result in value:Iterator().next do
				if _result.done then
					break
				end
				local item = _result.value
				self:push()
				self.locals:setLocal(initializer.name, item)
				self:evaluateNode(statement)
				self:pop()
			end
		else
			for _, v in pairs(value) do
				self:push()
				self.locals:setLocal(initializer.name, v)
				self:evaluateNode(statement)
				self:pop()
			end
		end
	end
	function ZrRuntime:evaluateArrayIndexExpression(node)
		local _binding = node
		local expression = _binding.expression
		local index = _binding.index
		local value = self:evaluateNode(expression)
		if TS.instanceof(value, ZrEnum) then
			local enumValue = value:getItemByIndex(index.value)
			if not enumValue then
				self:runtimeAssertNotUndefined(value, "Index out of range for enum " .. tostring(index.value), ZrRuntimeErrorCode.OutOfRange, expression)
			end
			return enumValue
		else
			self:runtimeAssertNotUndefined(value, "Attempted to index nil value", ZrRuntimeErrorCode.IndexingUndefined, expression)
			self:runtimeAssert(isArray(value), "Attempt to index " .. getTypeName(value) .. " with a number", ZrRuntimeErrorCode.InvalidArrayIndex, index)
			return value[index.value + 1]
		end
	end
	function ZrRuntime:setUserdata(expression, userdata, key, value)
		if userdata:isInstance() then
			self:runtimeError("Runtime Violation: Instance properties are read-only via Zirconium", ZrRuntimeErrorCode.InstanceSetViolation, expression)
		else
			local object = userdata:value()
			TS.try(function()
				object[key] = value
			end, function(err)
				self:runtimeError(tostring(err), ZrRuntimeErrorCode.InstanceSetViolation, expression)
			end)
		end
	end
	function ZrRuntime:getUserdata(expression, userdata, key)
		if userdata:isInstance() then
			local _exitType, _returns = TS.try(function()
				return TS.TRY_RETURN, { userdata:get(key) }
			end, function(err)
				self:runtimeError(tostring(err), ZrRuntimeErrorCode.InstanceGetViolation, expression)
			end)
			if _exitType then
				return unpack(_returns)
			end
		else
			local object = userdata:value()
			return object[key]
		end
	end
	function ZrRuntime:evaluatePropertyAccessExpression(node)
		local _binding = node
		local expression = _binding.expression
		local name = _binding.name
		local value = self:evaluateNode(expression)
		local id = name.name
		self:runtimeAssertNotUndefined(id, "", ZrRuntimeErrorCode.NodeValueError, name)
		self:runtimeAssertNotUndefined(value, "Attempted to index nil with " .. id, ZrRuntimeErrorCode.IndexingUndefined, expression)
		if TS.instanceof(value, ZrObject) then
			return value:get(id)
		elseif TS.instanceof(value, ZrUserdata) then
			return self:getUserdata(expression, value, id)
		elseif TS.instanceof(value, ZrEnum) then
			local _condition = value:getItemByName(id)
			if _condition == nil then
				_condition = self:runtimeError(id .. " is not a valid enum item", ZrRuntimeErrorCode.InvalidEnumItem, name)
			end
			return _condition
		elseif TS.instanceof(value, ZrEnumItem) then
			if id == "name" then
				return value:getName()
			elseif id == "value" then
				return value:getValue()
			else
				self:runtimeError("Attempted to index EnumItem with " .. id, ZrRuntimeErrorCode.InvalidPropertyAccess, name)
			end
		elseif isMap(value) then
			return value[id]
		elseif TS.instanceof(value, ZrRange) then
			local property = ZrRange.properties[id]
			if property ~= nil then
				return property(value)
			else
				self:runtimeError(id .. " is not a valid member of Range", ZrRuntimeErrorCode.InvalidPropertyAccess, name)
			end
		else
			self:runtimeError("Attempt to index " .. (getTypeName(value) .. (" with '" .. (id .. "'"))), ZrRuntimeErrorCode.InvalidPropertyAccess, name)
		end
	end
	function ZrRuntime:evaluateFunctionCall(node, context)
		local _binding = node
		local expression = _binding.expression
		local children = _binding.children
		local callArgs = _binding.arguments
		local options = {}
		if types.isCallExpression(node) then
			local _binding_1 = node
			options = _binding_1.options
		end
		local matching
		if types.isArrayIndexExpression(expression) then
			error("Not supported yet")
		elseif types.isPropertyAccessExpression(expression) then
			matching = self:evaluateNode(expression)
		else
			local _result = self.locals:getLocalOrUpValue(expression.name)
			if _result ~= nil then
				_result = _result[1]
			end
			matching = _result
		end
		-- const matching = this.locals.getLocalOrUpValue(name)?.[0];
		if TS.instanceof(matching, ZrUserFunction) then
			self:push()
			local params = matching:getParameters()
			do
				local i = 0
				local _shouldIncrement = false
				while true do
					if _shouldIncrement then
						i += 1
					else
						_shouldIncrement = true
					end
					if not (i < #params) then
						break
					end
					local param = params[i + 1]
					local value = callArgs[i + 1]
					if value ~= nil then
						local nodeValue = self:evaluateNode(value)
						self:runtimeAssertNotUndefined(nodeValue, "Huh?", ZrRuntimeErrorCode.EvaluationError, node)
						if nodeValue ~= ZrUndefined then
							self.locals:setLocal(param.name.name, nodeValue)
						end
					end
				end
			end
			for _, option in ipairs(options) do
				local value = self:evaluateNode(option.expression)
				if value ~= nil and value ~= ZrUndefined then
					self.locals:setLocal(option.option.flag, value)
				end
			end
			self:evaluateNode(matching:getBody())
			self:pop()
		elseif TS.instanceof(matching, ZrLuauFunction) then
			local args = {}
			local i = 0
			for _, child in ipairs(callArgs) do
				local value = self:evaluateNode(child)
				if value ~= nil then
					args[i + 1] = value
				end
				i += 1
			end
			local result = matching:call(context, unpack(args))
			if result ~= nil then
				return result
			end
		else
			self:runtimeError(self:getFullName(expression) .. " is not a function", ZrRuntimeErrorCode.NotCallable, node)
		end
	end
	function ZrRuntime:getLeafName(id)
		if types.isIdentifier(id) then
			return id.name
		elseif types.isPropertyAccessExpression(id) then
			return id.name.name
		else
			return tostring(id.index.value)
		end
	end
	function ZrRuntime:getFullName(id)
		if types.isIdentifier(id) then
			return id.name
		elseif types.isArrayIndexExpression(id) then
			return self:getFullName(id.expression) .. ("[" .. (tostring(id.index.value) .. "]"))
		elseif types.isPropertyAccessExpression(id) then
			return self:getFullName(id.expression) .. ("." .. self:getFullName(id.name))
		else
			return "?"
		end
	end
	function ZrRuntime:evaluateBinaryExpression(node, input)
		if input == nil then
			input = ZrInputStream:empty()
		end
		local _binding = node
		local left = _binding.left
		local operator = _binding.operator
		local right = _binding.right
		if operator == "|" then
			self:runtimeAssert(types.isCallableExpression(left) and (types.isCallableExpression(right) or isNode(right, ZrNodeKind.BinaryExpression)), "Pipe expression only works with two command statements", ZrRuntimeErrorCode.PipeError)
			local output = ZrOutputStream.new()
			local context = ZrContext:createPipedContext(self, input, output)
			local result = self:evaluateFunctionCall(left, context)
			if result ~= nil and result ~= ZrUndefined then
				output:write(result)
			end
			if types.isCallableExpression(right) then
				self:evaluateFunctionCall(right, ZrContext:createPipedContext(self, output:_toInputStream(), self.context:getOutput()))
			else
				self:evaluateBinaryExpression(right, output:_toInputStream())
			end
		elseif operator == "&&" then
			if types.isCallableExpression(left) then
				local result = self:evaluateFunctionCall(left, self.context)
				if result == nil or (result ~= nil and result ~= ZrUndefined) then
					return self:evaluateNode(right)
				end
			else
				local result = self:evaluateNode(left)
				if result ~= nil and result ~= ZrUndefined then
					return self:evaluateNode(right)
				end
			end
		elseif operator == "||" then
			if types.isCallableExpression(left) then
				local result = self:evaluateFunctionCall(left, self.context)
				if result ~= nil or result == ZrUndefined then
					return self:evaluateNode(right)
				end
			else
				self:runtimeError("Binary OR not handled", ZrRuntimeErrorCode.EvaluationError)
			end
		elseif operator == ".." then
			local leftValue = self:evaluateNode(left)
			local rightValue = self:evaluateNode(right)
			if type(leftValue) == "number" and type(rightValue) == "number" then
				return ZrRange.new(NumberRange.new(leftValue, rightValue))
			else
				self:runtimeError("Range operator expects two numbers", ZrRuntimeErrorCode.InvalidRangeError, node)
			end
		elseif operator == "=" and types.isIdentifier(left) then
			local assignment = self:getLocals():setUpValueOrLocalIfDefined(left.name, self:evaluateNode(right))
			if assignment:isErr() then
				local err = assignment:unwrapErr()
				repeat
					local _fallthrough = false
					if err == 0 then
						self:runtimeError("Cannot reassign constant '" .. (left.name .. "'"), ZrRuntimeErrorCode.ReassignConstant, left)
						_fallthrough = true
					end
					if _fallthrough or err == 1 then
						self:runtimeError("Unable to assign to undeclared '" .. (left.name .. "' - use 'let' or 'const'"), ZrRuntimeErrorCode.UnassignedVariable, left)
					end
				until true
			else
				return assignment:unwrap()
			end
		else
			self:runtimeError("Unhandled expression '" .. (operator .. "'"), ZrRuntimeErrorCode.EvaluationError)
		end
		return nil
	end
	function ZrRuntime:evaluateNode(node)
		if isNode(node, ZrNodeKind.Source) then
			for _, subNode in ipairs(node.children) do
				self:evaluateNode(subNode)
			end
			return nil
		elseif isNode(node, ZrNodeKind.String) then
			return node.text
		elseif isNode(node, ZrNodeKind.Identifier) then
			local _result = self:getLocals():getLocalOrUpValue(node.name)
			if _result ~= nil then
				_result = _result[1]
			end
			local _condition = _result
			if _condition == nil then
				_condition = ZrUndefined
			end
			return _condition
		elseif isNode(node, ZrNodeKind.ArrayIndexExpression) then
			return self:evaluateArrayIndexExpression(node)
		elseif isNode(node, ZrNodeKind.PropertyAccessExpression) then
			local _condition = self:evaluatePropertyAccessExpression(node)
			if _condition == nil then
				_condition = ZrUndefined
			end
			return _condition
		elseif isNode(node, ZrNodeKind.FunctionDeclaration) then
			return self:evaluateFunctionDeclaration(node)
		elseif isNode(node, ZrNodeKind.EnumDeclaration) then
			return self:evaluateEnumDeclaration(node)
		elseif isNode(node, ZrNodeKind.ParenthesizedExpression) then
			return self:evaluateNode(node.expression)
		elseif isNode(node, ZrNodeKind.BinaryExpression) then
			return self:evaluateBinaryExpression(node)
		elseif isNode(node, ZrNodeKind.UnaryExpression) then
			if node.operator == "!" then
				local result = self:evaluateNode(node.expression)
				return result == false or (result == nil or result == ZrUndefined)
			end
		elseif isNode(node, ZrNodeKind.UndefinedKeyword) then
			return ZrUndefined
		elseif isNode(node, ZrNodeKind.ExpressionStatement) then
			local value = self:evaluateNode(node.expression)
			if value ~= nil then
				self.context:getOutput():write(value)
			end
		elseif isNode(node, ZrNodeKind.ForInStatement) then
			self:evaluateForInStatement(node)
		elseif isNode(node, ZrNodeKind.IfStatement) then
			self:evaluateIfStatement(node)
		elseif isNode(node, ZrNodeKind.ObjectLiteralExpression) then
			return self:evaluateObjectNode(node)
		elseif isNode(node, ZrNodeKind.ArrayLiteralExpression) then
			return self:evaluateArrayNode(node)
		elseif isNode(node, ZrNodeKind.Number) or isNode(node, ZrNodeKind.Boolean) then
			return node.value
		elseif isNode(node, ZrNodeKind.InterpolatedString) then
			return self:getLocals():evaluateInterpolatedString(node)
		elseif isNode(node, ZrNodeKind.VariableStatement) then
			return self:executeSetVariable(node.declaration)
		elseif isNode(node, ZrNodeKind.FunctionExpression) then
			return self:evaluateFunctionExpression(node)
		elseif isNode(node, ZrNodeKind.Block) then
			self:push()
			for _, statement in ipairs(node.statements) do
				self:evaluateNode(statement)
			end
			self:pop()
		elseif types.isCallableExpression(node) then
			return self:evaluateFunctionCall(node, self.context)
		else
			self:runtimeError("Failed to evaluate " .. tostring(getFriendlyName(node)), ZrRuntimeErrorCode.EvaluationError, node)
		end
	end
	function ZrRuntime:getExecutingPlayer()
		return self.executingPlayer
	end
	function ZrRuntime:execute()
		self:evaluateNode(self.source)
		return self.context:getOutput()
	end
end
return {
	ZrRuntimeErrorCode = ZrRuntimeErrorCode,
	default = ZrRuntime,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="786">
                  <Properties>
                    <string name="Name">Script</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local ZrLocalStack = TS.import(script, script.Parent.Parent, "Data", "Locals").default
local ZrRuntime = TS.import(script, script.Parent, "Runtime").default
local ZrScript
do
	ZrScript = setmetatable({}, {
		__tostring = function()
			return "ZrScript"
		end,
	})
	ZrScript.__index = ZrScript
	function ZrScript.new(...)
		local self = setmetatable({}, ZrScript)
		return self:constructor(...) or self
	end
	function ZrScript:constructor(source, globalVariables, player)
		local globals = ZrLocalStack.new(globalVariables)
		self.runtime = ZrRuntime.new(source, globals, player)
	end
	function ZrScript:registerFunction(name, func)
		self.runtime:getLocals():setGlobal(name, func, true)
	end
	ZrScript.execute = TS.async(function(self)
		return TS.Promise.defer(function(resolve, reject)
			TS.try(function()
				resolve(self.runtime:execute():_toStringArray())
			end, function(e)
				reject(self.runtime:getErrors())
			end)
		end)
	end)
	function ZrScript:executeOrThrow()
		local results = self.runtime:execute():toArray()
		for _, result in ipairs(results) do
		end
	end
	function ZrScript:_printScriptGlobals()
		for name, value in pairs(self.runtime:getLocals():toMap()) do
			print(name, value)
		end
	end
end
return {
	default = ZrScript,
}
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="787">
                  <Properties>
                    <string name="Name">ScriptContext</string>
                    <string name="Source"><![CDATA[-- Compiled with roblox-ts v1.2.7
local TS = _G[script]
local Result = TS.import(script, TS.getModule(script, "@rbxts", "rust-classes").out).Result
local _Ast = TS.import(script, script.Parent.Parent, "Ast")
local ZrTextStream = _Ast.ZrTextStream
local ZrLexer = _Ast.ZrLexer
local ZrParser = TS.import(script, script.Parent.Parent, "Ast", "Parser").default
local ZrLuauFunction = TS.import(script, script.Parent.Parent, "Data", "LuauFunction").default
local ZrScript = TS.import(script, script.Parent, "Script").default
local ZrScriptCreateResult
do
	local _inverse = {}
	ZrScriptCreateResult = setmetatable({}, {
		__index = _inverse,
	})
	ZrScriptCreateResult.ParserError = 0
	_inverse[0] = "ParserError"
	ZrScriptCreateResult.OK = 1
	_inverse[1] = "OK"
end
local ZrScriptContext
do
	ZrScriptContext = setmetatable({}, {
		__tostring = function()
			return "ZrScriptContext"
		end,
	})
	ZrScriptContext.__index = ZrScriptContext
	function ZrScriptContext.new(...)
		local self = setmetatable({}, ZrScriptContext)
		return self:constructor(...) or self
	end
	function ZrScriptContext:constructor()
		self.globals = {}
	end
	function ZrScriptContext:registerGlobal(name, value)
		self.globals[name] = value
	end
	function ZrScriptContext:importGlobals(context)
		for name, global in pairs(context.globals) do
			self.globals[name] = global
		end
	end
	function ZrScriptContext:registerLuauFunction(name, fn)
		self:registerGlobal(name, ZrLuauFunction.new(fn))
	end
	function ZrScriptContext:getGlobals()
		local localMap = {}
		for k, v in pairs(self.globals) do
			-- ▼ Map.set ▼
			localMap[k] = v
			-- ▲ Map.set ▲
		end
		return localMap
	end
	function ZrScriptContext:createScript(nodes)
		return ZrScript.new(nodes, self:getGlobals())
	end
	function ZrScriptContext:parseSource(source, version, mode)
		if version == nil then
			version = 0
		end
		if mode == nil then
			mode = "command"
		end
		local stream = ZrTextStream.new(source)
		local lexer = ZrLexer.new(stream)
		local parser = ZrParser.new(lexer, {
			version = version,
			mode = mode,
		})
		local _exitType, _returns = TS.try(function()
			local nodes = parser:parseOrThrow()
			return TS.TRY_RETURN, { Result:ok(nodes) }
		end, function(error)
			warn(error)
			local _fn = Result
			local _arg0 = {
				result = ZrScriptCreateResult.ParserError,
				errors = parser:getErrors(),
				message = tostring(error),
			}
			return TS.TRY_RETURN, { _fn:err(_arg0) }
		end)
		if _exitType then
			return unpack(_returns)
		end
	end
end
return {
	ZrScriptCreateResult = ZrScriptCreateResult,
	default = ZrScriptContext,
}
]]></string>
                  </Properties>
                </Item>
              </Item>
              <Item class="ModuleScript" referent="788">
                <Properties>
                  <string name="Name">Util</string>
                  <string name="Source">local function isArray(value)
    if type(value) ~= "table" or getmetatable(value) then
        return false
    end

    local key = next(value)
    local hasIndex = typeof(key) == "number"
    local hasNoKey = #value > 0 and next(value, #value) == nil
    return hasIndex and hasNoKey
end

local function isMap(value)
    return type(value) == "table" and not getmetatable(value) and type(next(value)) == "string"
end

local function isAmbiguous(value)
    return type(value) == "table" and not isMap(value) and not isArray(value)
end



return {
    isArray = isArray,
    isMap = isMap,
    isAmbiguous = isAmbiguous,
}</string>
                </Properties>
                <Item class="ModuleScript" referent="789">
                  <Properties>
                    <string name="Name">Symbol</string>
                    <string name="Source">--[[
	A 'Symbol' is an opaque marker type.

	Symbols have the type 'userdata', but when printed to the console, the name
	of the symbol is shown.
]]

local Symbol = {}

--[[
	Creates a Symbol with the given name.

	When printed or coerced to a string, the symbol will turn into the string
	given as its name.
]]
function Symbol.named(name)
	assert(type(name) == "string", "Symbols must be created using a string name!")

	local self = newproxy(true)

	local wrappedName = ("Symbol(%s)"):format(name)

	getmetatable(self).__tostring = function()
		return wrappedName
	end

	return self
end

Symbol.ZrNull = Symbol.named("ZrNull")

return Symbol</string>
                  </Properties>
                </Item>
              </Item>
            </Item>
          </Item>
        </Item>
      </Item>
    </Item>
  </Item>
  <Item class="ServerScriptService" referent="790">
    <Properties>
      <string name="Name">ServerScriptService</string>
    </Properties>
    <Item class="Folder" referent="791">
      <Properties>
        <string name="Name">Maps</string>
      </Properties>
      <Item class="Folder" referent="792">
        <Properties>
          <string name="Name">lobby_variants</string>
        </Properties>
        <Item class="Model" referent="793">
          <Properties>
            <string name="Name">bridges</string>
            <BinaryString name="AttributesSerialize"></BinaryString>
            <bool name="DefinesCapabilities">false</bool>
            <token name="LevelOfDetail">0</token>
            <CoordinateFrame name="ModelMeshCFrame">
              <X>0</X>
              <Y>0</Y>
              <Z>0</Z>
              <R00>1</R00>
              <R01>0</R01>
              <R02>0</R02>
              <R10>0</R10>
              <R11>1</R11>
              <R12>0</R12>
              <R20>0</R20>
              <R21>0</R21>
              <R22>1</R22>
            </CoordinateFrame>
            <SharedString name="ModelMeshData">rxNJufX5oaagQE3qNtzJSQ==</SharedString>
            <Vector3 name="ModelMeshSize">
              <X>0</X>
              <Y>0</Y>
              <Z>0</Z>
            </Vector3>
            <token name="ModelStreamingMode">0</token>
            <bool name="NeedsPivotMigration">false</bool>
            <Ref name="PrimaryPart">null</Ref>
            <float name="ScaleFactor">1</float>
            <int64 name="SourceAssetId">-1</int64>
            <BinaryString name="Tags"></BinaryString>
            <OptionalCoordinateFrame name="WorldPivotData">
              <CFrame>
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CFrame>
            </OptionalCoordinateFrame>
          </Properties>
          <Item class="Part" referent="794">
            <Properties>
              <string name="Name">platform</string>
              <bool name="Anchored">true</bool>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <float name="BackParamA">-0.5</float>
              <float name="BackParamB">0.5</float>
              <token name="BackSurface">0</token>
              <token name="BackSurfaceInput">0</token>
              <float name="BottomParamA">-0.5</float>
              <float name="BottomParamB">0.5</float>
              <token name="BottomSurface">0</token>
              <token name="BottomSurfaceInput">0</token>
              <CoordinateFrame name="CFrame">
                <X>0</X>
                <Y>4.99999</Y>
                <Z>-22.5</Z>
                <R00>0</R00>
                <R01>0</R01>
                <R02>-1</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>1</R20>
                <R21>0</R21>
                <R22>0</R22>
              </CoordinateFrame>
              <bool name="CanCollide">true</bool>
              <bool name="CanQuery">true</bool>
              <bool name="CanTouch">true</bool>
              <bool name="CastShadow">false</bool>
              <string name="CollisionGroup">Default</string>
              <int name="CollisionGroupId">0</int>
              <Color3uint8 name="Color3uint8">12147790</Color3uint8>
              <PhysicalProperties name="CustomPhysicalProperties">
                <CustomPhysics>false</CustomPhysics>
              </PhysicalProperties>
              <bool name="DefinesCapabilities">false</bool>
              <bool name="EnableFluidForces">true</bool>
              <token name="formFactorRaw">1</token>
              <float name="FrontParamA">-0.5</float>
              <float name="FrontParamB">0.5</float>
              <token name="FrontSurface">0</token>
              <token name="FrontSurfaceInput">0</token>
              <float name="LeftParamA">-0.5</float>
              <float name="LeftParamB">0.5</float>
              <token name="LeftSurface">0</token>
              <token name="LeftSurfaceInput">0</token>
              <bool name="Locked">false</bool>
              <bool name="Massless">false</bool>
              <token name="Material">272</token>
              <string name="MaterialVariantSerialized"></string>
              <CoordinateFrame name="PivotOffset">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <float name="Reflectance">0</float>
              <float name="RightParamA">-0.5</float>
              <float name="RightParamB">0.5</float>
              <token name="RightSurface">0</token>
              <token name="RightSurfaceInput">0</token>
              <int name="RootPriority">0</int>
              <Vector3 name="RotVelocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <token name="shape">1</token>
              <Vector3 name="size">
                <X>6</X>
                <Y>1</Y>
                <Z>35</Z>
              </Vector3>
              <int64 name="SourceAssetId">-1</int64>
              <BinaryString name="Tags"></BinaryString>
              <float name="TopParamA">-0.5</float>
              <float name="TopParamB">0.5</float>
              <token name="TopSurface">0</token>
              <token name="TopSurfaceInput">0</token>
              <float name="Transparency">0</float>
              <Vector3 name="Velocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
            </Properties>
          </Item>
          <Item class="Part" referent="795">
            <Properties>
              <string name="Name">platform</string>
              <bool name="Anchored">true</bool>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <float name="BackParamA">-0.5</float>
              <float name="BackParamB">0.5</float>
              <token name="BackSurface">0</token>
              <token name="BackSurfaceInput">0</token>
              <float name="BottomParamA">-0.5</float>
              <float name="BottomParamB">0.5</float>
              <token name="BottomSurface">0</token>
              <token name="BottomSurfaceInput">0</token>
              <CoordinateFrame name="CFrame">
                <X>22.5</X>
                <Y>0.24998999</Y>
                <Z>-22.5</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <bool name="CanCollide">true</bool>
              <bool name="CanQuery">true</bool>
              <bool name="CanTouch">true</bool>
              <bool name="CastShadow">false</bool>
              <string name="CollisionGroup">Default</string>
              <int name="CollisionGroupId">0</int>
              <Color3uint8 name="Color3uint8">9979193</Color3uint8>
              <PhysicalProperties name="CustomPhysicalProperties">
                <CustomPhysics>false</CustomPhysics>
              </PhysicalProperties>
              <bool name="DefinesCapabilities">false</bool>
              <bool name="EnableFluidForces">true</bool>
              <token name="formFactorRaw">1</token>
              <float name="FrontParamA">-0.5</float>
              <float name="FrontParamB">0.5</float>
              <token name="FrontSurface">0</token>
              <token name="FrontSurfaceInput">0</token>
              <float name="LeftParamA">-0.5</float>
              <float name="LeftParamB">0.5</float>
              <token name="LeftSurface">0</token>
              <token name="LeftSurfaceInput">0</token>
              <bool name="Locked">false</bool>
              <bool name="Massless">false</bool>
              <token name="Material">272</token>
              <string name="MaterialVariantSerialized"></string>
              <CoordinateFrame name="PivotOffset">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <float name="Reflectance">0</float>
              <float name="RightParamA">-0.5</float>
              <float name="RightParamB">0.5</float>
              <token name="RightSurface">0</token>
              <token name="RightSurfaceInput">0</token>
              <int name="RootPriority">0</int>
              <Vector3 name="RotVelocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <token name="shape">1</token>
              <Vector3 name="size">
                <X>10</X>
                <Y>12.5</Y>
                <Z>10</Z>
              </Vector3>
              <int64 name="SourceAssetId">-1</int64>
              <BinaryString name="Tags"></BinaryString>
              <float name="TopParamA">-0.5</float>
              <float name="TopParamB">0.5</float>
              <token name="TopSurface">0</token>
              <token name="TopSurfaceInput">0</token>
              <float name="Transparency">0</float>
              <Vector3 name="Velocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
            </Properties>
          </Item>
          <Item class="TrussPart" referent="796">
            <Properties>
              <string name="Name">Truss</string>
              <bool name="Anchored">true</bool>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <float name="BackParamA">-0.5</float>
              <float name="BackParamB">0.5</float>
              <token name="BackSurface">0</token>
              <token name="BackSurfaceInput">0</token>
              <float name="BottomParamA">-0.5</float>
              <float name="BottomParamB">0.5</float>
              <token name="BottomSurface">0</token>
              <token name="BottomSurfaceInput">0</token>
              <CoordinateFrame name="CFrame">
                <X>22.5</X>
                <Y>1.25</Y>
                <Z>-28.5</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <bool name="CanCollide">true</bool>
              <bool name="CanQuery">true</bool>
              <bool name="CanTouch">true</bool>
              <bool name="CastShadow">false</bool>
              <string name="CollisionGroup">Default</string>
              <int name="CollisionGroupId">0</int>
              <Color3uint8 name="Color3uint8">5776413</Color3uint8>
              <PhysicalProperties name="CustomPhysicalProperties">
                <CustomPhysics>false</CustomPhysics>
              </PhysicalProperties>
              <bool name="DefinesCapabilities">false</bool>
              <bool name="EnableFluidForces">true</bool>
              <float name="FrontParamA">-0.5</float>
              <float name="FrontParamB">0.5</float>
              <token name="FrontSurface">0</token>
              <token name="FrontSurfaceInput">0</token>
              <float name="LeftParamA">-0.5</float>
              <float name="LeftParamB">0.5</float>
              <token name="LeftSurface">0</token>
              <token name="LeftSurfaceInput">0</token>
              <bool name="Locked">false</bool>
              <bool name="Massless">false</bool>
              <token name="Material">256</token>
              <string name="MaterialVariantSerialized"></string>
              <CoordinateFrame name="PivotOffset">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <float name="Reflectance">0</float>
              <float name="RightParamA">-0.5</float>
              <float name="RightParamB">0.5</float>
              <token name="RightSurface">0</token>
              <token name="RightSurfaceInput">0</token>
              <int name="RootPriority">0</int>
              <Vector3 name="RotVelocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <Vector3 name="size">
                <X>2</X>
                <Y>11.5</Y>
                <Z>2</Z>
              </Vector3>
              <int64 name="SourceAssetId">-1</int64>
              <BinaryString name="Tags"></BinaryString>
              <float name="TopParamA">-0.5</float>
              <float name="TopParamB">0.5</float>
              <token name="TopSurface">0</token>
              <token name="TopSurfaceInput">0</token>
              <float name="Transparency">0</float>
              <Vector3 name="Velocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <token name="style">0</token>
            </Properties>
          </Item>
          <Item class="Part" referent="797">
            <Properties>
              <string name="Name">platform</string>
              <bool name="Anchored">true</bool>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <float name="BackParamA">-0.5</float>
              <float name="BackParamB">0.5</float>
              <token name="BackSurface">0</token>
              <token name="BackSurfaceInput">0</token>
              <float name="BottomParamA">-0.5</float>
              <float name="BottomParamB">0.5</float>
              <token name="BottomSurface">0</token>
              <token name="BottomSurfaceInput">0</token>
              <CoordinateFrame name="CFrame">
                <X>22.5</X>
                <Y>4.99999</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <bool name="CanCollide">true</bool>
              <bool name="CanQuery">true</bool>
              <bool name="CanTouch">true</bool>
              <bool name="CastShadow">false</bool>
              <string name="CollisionGroup">Default</string>
              <int name="CollisionGroupId">0</int>
              <Color3uint8 name="Color3uint8">12147790</Color3uint8>
              <PhysicalProperties name="CustomPhysicalProperties">
                <CustomPhysics>false</CustomPhysics>
              </PhysicalProperties>
              <bool name="DefinesCapabilities">false</bool>
              <bool name="EnableFluidForces">true</bool>
              <token name="formFactorRaw">1</token>
              <float name="FrontParamA">-0.5</float>
              <float name="FrontParamB">0.5</float>
              <token name="FrontSurface">0</token>
              <token name="FrontSurfaceInput">0</token>
              <float name="LeftParamA">-0.5</float>
              <float name="LeftParamB">0.5</float>
              <token name="LeftSurface">0</token>
              <token name="LeftSurfaceInput">0</token>
              <bool name="Locked">false</bool>
              <bool name="Massless">false</bool>
              <token name="Material">272</token>
              <string name="MaterialVariantSerialized"></string>
              <CoordinateFrame name="PivotOffset">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <float name="Reflectance">0</float>
              <float name="RightParamA">-0.5</float>
              <float name="RightParamB">0.5</float>
              <token name="RightSurface">0</token>
              <token name="RightSurfaceInput">0</token>
              <int name="RootPriority">0</int>
              <Vector3 name="RotVelocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <token name="shape">1</token>
              <Vector3 name="size">
                <X>6</X>
                <Y>1</Y>
                <Z>35</Z>
              </Vector3>
              <int64 name="SourceAssetId">-1</int64>
              <BinaryString name="Tags"></BinaryString>
              <float name="TopParamA">-0.5</float>
              <float name="TopParamB">0.5</float>
              <token name="TopSurface">0</token>
              <token name="TopSurfaceInput">0</token>
              <float name="Transparency">0</float>
              <Vector3 name="Velocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
            </Properties>
          </Item>
          <Item class="Part" referent="798">
            <Properties>
              <string name="Name">platform</string>
              <bool name="Anchored">true</bool>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <float name="BackParamA">-0.5</float>
              <float name="BackParamB">0.5</float>
              <token name="BackSurface">0</token>
              <token name="BackSurfaceInput">0</token>
              <float name="BottomParamA">-0.5</float>
              <float name="BottomParamB">0.5</float>
              <token name="BottomSurface">0</token>
              <token name="BottomSurfaceInput">0</token>
              <CoordinateFrame name="CFrame">
                <X>22.5</X>
                <Y>-5.500003</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <bool name="CanCollide">true</bool>
              <bool name="CanQuery">true</bool>
              <bool name="CanTouch">true</bool>
              <bool name="CastShadow">true</bool>
              <string name="CollisionGroup">Default</string>
              <int name="CollisionGroupId">0</int>
              <Color3uint8 name="Color3uint8">12147790</Color3uint8>
              <PhysicalProperties name="CustomPhysicalProperties">
                <CustomPhysics>false</CustomPhysics>
              </PhysicalProperties>
              <bool name="DefinesCapabilities">false</bool>
              <bool name="EnableFluidForces">true</bool>
              <token name="formFactorRaw">1</token>
              <float name="FrontParamA">-0.5</float>
              <float name="FrontParamB">0.5</float>
              <token name="FrontSurface">0</token>
              <token name="FrontSurfaceInput">0</token>
              <float name="LeftParamA">-0.5</float>
              <float name="LeftParamB">0.5</float>
              <token name="LeftSurface">0</token>
              <token name="LeftSurfaceInput">0</token>
              <bool name="Locked">false</bool>
              <bool name="Massless">false</bool>
              <token name="Material">272</token>
              <string name="MaterialVariantSerialized"></string>
              <CoordinateFrame name="PivotOffset">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <float name="Reflectance">0</float>
              <float name="RightParamA">-0.5</float>
              <float name="RightParamB">0.5</float>
              <token name="RightSurface">0</token>
              <token name="RightSurfaceInput">0</token>
              <int name="RootPriority">0</int>
              <Vector3 name="RotVelocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <token name="shape">1</token>
              <Vector3 name="size">
                <X>10</X>
                <Y>1</Y>
                <Z>10</Z>
              </Vector3>
              <int64 name="SourceAssetId">-1</int64>
              <BinaryString name="Tags"></BinaryString>
              <float name="TopParamA">-0.5</float>
              <float name="TopParamB">0.5</float>
              <token name="TopSurface">0</token>
              <token name="TopSurfaceInput">0</token>
              <float name="Transparency">0</float>
              <Vector3 name="Velocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
            </Properties>
          </Item>
          <Item class="Part" referent="799">
            <Properties>
              <string name="Name">platform</string>
              <bool name="Anchored">true</bool>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <float name="BackParamA">-0.5</float>
              <float name="BackParamB">0.5</float>
              <token name="BackSurface">0</token>
              <token name="BackSurfaceInput">0</token>
              <float name="BottomParamA">-0.5</float>
              <float name="BottomParamB">0.5</float>
              <token name="BottomSurface">0</token>
              <token name="BottomSurfaceInput">0</token>
              <CoordinateFrame name="CFrame">
                <X>-22.5</X>
                <Y>4.99999</Y>
                <Z>0</Z>
                <R00>-1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>-1</R22>
              </CoordinateFrame>
              <bool name="CanCollide">true</bool>
              <bool name="CanQuery">true</bool>
              <bool name="CanTouch">true</bool>
              <bool name="CastShadow">false</bool>
              <string name="CollisionGroup">Default</string>
              <int name="CollisionGroupId">0</int>
              <Color3uint8 name="Color3uint8">12147790</Color3uint8>
              <PhysicalProperties name="CustomPhysicalProperties">
                <CustomPhysics>false</CustomPhysics>
              </PhysicalProperties>
              <bool name="DefinesCapabilities">false</bool>
              <bool name="EnableFluidForces">true</bool>
              <token name="formFactorRaw">1</token>
              <float name="FrontParamA">-0.5</float>
              <float name="FrontParamB">0.5</float>
              <token name="FrontSurface">0</token>
              <token name="FrontSurfaceInput">0</token>
              <float name="LeftParamA">-0.5</float>
              <float name="LeftParamB">0.5</float>
              <token name="LeftSurface">0</token>
              <token name="LeftSurfaceInput">0</token>
              <bool name="Locked">false</bool>
              <bool name="Massless">false</bool>
              <token name="Material">272</token>
              <string name="MaterialVariantSerialized"></string>
              <CoordinateFrame name="PivotOffset">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <float name="Reflectance">0</float>
              <float name="RightParamA">-0.5</float>
              <float name="RightParamB">0.5</float>
              <token name="RightSurface">0</token>
              <token name="RightSurfaceInput">0</token>
              <int name="RootPriority">0</int>
              <Vector3 name="RotVelocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <token name="shape">1</token>
              <Vector3 name="size">
                <X>6</X>
                <Y>1</Y>
                <Z>35</Z>
              </Vector3>
              <int64 name="SourceAssetId">-1</int64>
              <BinaryString name="Tags"></BinaryString>
              <float name="TopParamA">-0.5</float>
              <float name="TopParamB">0.5</float>
              <token name="TopSurface">0</token>
              <token name="TopSurfaceInput">0</token>
              <float name="Transparency">0</float>
              <Vector3 name="Velocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
            </Properties>
          </Item>
          <Item class="Part" referent="800">
            <Properties>
              <string name="Name">platform</string>
              <bool name="Anchored">true</bool>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <float name="BackParamA">-0.5</float>
              <float name="BackParamB">0.5</float>
              <token name="BackSurface">0</token>
              <token name="BackSurfaceInput">0</token>
              <float name="BottomParamA">-0.5</float>
              <float name="BottomParamB">0.5</float>
              <token name="BottomSurface">0</token>
              <token name="BottomSurfaceInput">0</token>
              <CoordinateFrame name="CFrame">
                <X>-22.5</X>
                <Y>0.24998999</Y>
                <Z>-22.5</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <bool name="CanCollide">true</bool>
              <bool name="CanQuery">true</bool>
              <bool name="CanTouch">true</bool>
              <bool name="CastShadow">false</bool>
              <string name="CollisionGroup">Default</string>
              <int name="CollisionGroupId">0</int>
              <Color3uint8 name="Color3uint8">9979193</Color3uint8>
              <PhysicalProperties name="CustomPhysicalProperties">
                <CustomPhysics>false</CustomPhysics>
              </PhysicalProperties>
              <bool name="DefinesCapabilities">false</bool>
              <bool name="EnableFluidForces">true</bool>
              <token name="formFactorRaw">1</token>
              <float name="FrontParamA">-0.5</float>
              <float name="FrontParamB">0.5</float>
              <token name="FrontSurface">0</token>
              <token name="FrontSurfaceInput">0</token>
              <float name="LeftParamA">-0.5</float>
              <float name="LeftParamB">0.5</float>
              <token name="LeftSurface">0</token>
              <token name="LeftSurfaceInput">0</token>
              <bool name="Locked">false</bool>
              <bool name="Massless">false</bool>
              <token name="Material">272</token>
              <string name="MaterialVariantSerialized"></string>
              <CoordinateFrame name="PivotOffset">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <float name="Reflectance">0</float>
              <float name="RightParamA">-0.5</float>
              <float name="RightParamB">0.5</float>
              <token name="RightSurface">0</token>
              <token name="RightSurfaceInput">0</token>
              <int name="RootPriority">0</int>
              <Vector3 name="RotVelocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <token name="shape">1</token>
              <Vector3 name="size">
                <X>10</X>
                <Y>12.5</Y>
                <Z>10</Z>
              </Vector3>
              <int64 name="SourceAssetId">-1</int64>
              <BinaryString name="Tags"></BinaryString>
              <float name="TopParamA">-0.5</float>
              <float name="TopParamB">0.5</float>
              <token name="TopSurface">0</token>
              <token name="TopSurfaceInput">0</token>
              <float name="Transparency">0</float>
              <Vector3 name="Velocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
            </Properties>
          </Item>
          <Item class="Part" referent="801">
            <Properties>
              <string name="Name">platform</string>
              <bool name="Anchored">true</bool>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <float name="BackParamA">-0.5</float>
              <float name="BackParamB">0.5</float>
              <token name="BackSurface">0</token>
              <token name="BackSurfaceInput">0</token>
              <float name="BottomParamA">-0.5</float>
              <float name="BottomParamB">0.5</float>
              <token name="BottomSurface">0</token>
              <token name="BottomSurfaceInput">0</token>
              <CoordinateFrame name="CFrame">
                <X>0</X>
                <Y>-5.500003</Y>
                <Z>-22.5</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <bool name="CanCollide">true</bool>
              <bool name="CanQuery">true</bool>
              <bool name="CanTouch">true</bool>
              <bool name="CastShadow">true</bool>
              <string name="CollisionGroup">Default</string>
              <int name="CollisionGroupId">0</int>
              <Color3uint8 name="Color3uint8">12147790</Color3uint8>
              <PhysicalProperties name="CustomPhysicalProperties">
                <CustomPhysics>false</CustomPhysics>
              </PhysicalProperties>
              <bool name="DefinesCapabilities">false</bool>
              <bool name="EnableFluidForces">true</bool>
              <token name="formFactorRaw">1</token>
              <float name="FrontParamA">-0.5</float>
              <float name="FrontParamB">0.5</float>
              <token name="FrontSurface">0</token>
              <token name="FrontSurfaceInput">0</token>
              <float name="LeftParamA">-0.5</float>
              <float name="LeftParamB">0.5</float>
              <token name="LeftSurface">0</token>
              <token name="LeftSurfaceInput">0</token>
              <bool name="Locked">false</bool>
              <bool name="Massless">false</bool>
              <token name="Material">272</token>
              <string name="MaterialVariantSerialized"></string>
              <CoordinateFrame name="PivotOffset">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <float name="Reflectance">0</float>
              <float name="RightParamA">-0.5</float>
              <float name="RightParamB">0.5</float>
              <token name="RightSurface">0</token>
              <token name="RightSurfaceInput">0</token>
              <int name="RootPriority">0</int>
              <Vector3 name="RotVelocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <token name="shape">1</token>
              <Vector3 name="size">
                <X>10</X>
                <Y>1</Y>
                <Z>10</Z>
              </Vector3>
              <int64 name="SourceAssetId">-1</int64>
              <BinaryString name="Tags"></BinaryString>
              <float name="TopParamA">-0.5</float>
              <float name="TopParamB">0.5</float>
              <token name="TopSurface">0</token>
              <token name="TopSurfaceInput">0</token>
              <float name="Transparency">0</float>
              <Vector3 name="Velocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
            </Properties>
          </Item>
          <Item class="TrussPart" referent="802">
            <Properties>
              <string name="Name">Truss</string>
              <bool name="Anchored">true</bool>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <float name="BackParamA">-0.5</float>
              <float name="BackParamB">0.5</float>
              <token name="BackSurface">0</token>
              <token name="BackSurfaceInput">0</token>
              <float name="BottomParamA">-0.5</float>
              <float name="BottomParamB">0.5</float>
              <token name="BottomSurface">0</token>
              <token name="BottomSurfaceInput">0</token>
              <CoordinateFrame name="CFrame">
                <X>-28.5</X>
                <Y>1.25</Y>
                <Z>-22.5</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <bool name="CanCollide">true</bool>
              <bool name="CanQuery">true</bool>
              <bool name="CanTouch">true</bool>
              <bool name="CastShadow">false</bool>
              <string name="CollisionGroup">Default</string>
              <int name="CollisionGroupId">0</int>
              <Color3uint8 name="Color3uint8">5776413</Color3uint8>
              <PhysicalProperties name="CustomPhysicalProperties">
                <CustomPhysics>false</CustomPhysics>
              </PhysicalProperties>
              <bool name="DefinesCapabilities">false</bool>
              <bool name="EnableFluidForces">true</bool>
              <float name="FrontParamA">-0.5</float>
              <float name="FrontParamB">0.5</float>
              <token name="FrontSurface">0</token>
              <token name="FrontSurfaceInput">0</token>
              <float name="LeftParamA">-0.5</float>
              <float name="LeftParamB">0.5</float>
              <token name="LeftSurface">0</token>
              <token name="LeftSurfaceInput">0</token>
              <bool name="Locked">false</bool>
              <bool name="Massless">false</bool>
              <token name="Material">256</token>
              <string name="MaterialVariantSerialized"></string>
              <CoordinateFrame name="PivotOffset">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <float name="Reflectance">0</float>
              <float name="RightParamA">-0.5</float>
              <float name="RightParamB">0.5</float>
              <token name="RightSurface">0</token>
              <token name="RightSurfaceInput">0</token>
              <int name="RootPriority">0</int>
              <Vector3 name="RotVelocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <Vector3 name="size">
                <X>2</X>
                <Y>11.5</Y>
                <Z>2</Z>
              </Vector3>
              <int64 name="SourceAssetId">-1</int64>
              <BinaryString name="Tags"></BinaryString>
              <float name="TopParamA">-0.5</float>
              <float name="TopParamB">0.5</float>
              <token name="TopSurface">0</token>
              <token name="TopSurfaceInput">0</token>
              <float name="Transparency">0</float>
              <Vector3 name="Velocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <token name="style">0</token>
            </Properties>
          </Item>
          <Item class="Part" referent="803">
            <Properties>
              <string name="Name">platform</string>
              <bool name="Anchored">true</bool>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <float name="BackParamA">-0.5</float>
              <float name="BackParamB">0.5</float>
              <token name="BackSurface">0</token>
              <token name="BackSurfaceInput">0</token>
              <float name="BottomParamA">-0.5</float>
              <float name="BottomParamB">0.5</float>
              <token name="BottomSurface">0</token>
              <token name="BottomSurfaceInput">0</token>
              <CoordinateFrame name="CFrame">
                <X>22.5</X>
                <Y>0.24998999</Y>
                <Z>22.5</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <bool name="CanCollide">true</bool>
              <bool name="CanQuery">true</bool>
              <bool name="CanTouch">true</bool>
              <bool name="CastShadow">false</bool>
              <string name="CollisionGroup">Default</string>
              <int name="CollisionGroupId">0</int>
              <Color3uint8 name="Color3uint8">9979193</Color3uint8>
              <PhysicalProperties name="CustomPhysicalProperties">
                <CustomPhysics>false</CustomPhysics>
              </PhysicalProperties>
              <bool name="DefinesCapabilities">false</bool>
              <bool name="EnableFluidForces">true</bool>
              <token name="formFactorRaw">1</token>
              <float name="FrontParamA">-0.5</float>
              <float name="FrontParamB">0.5</float>
              <token name="FrontSurface">0</token>
              <token name="FrontSurfaceInput">0</token>
              <float name="LeftParamA">-0.5</float>
              <float name="LeftParamB">0.5</float>
              <token name="LeftSurface">0</token>
              <token name="LeftSurfaceInput">0</token>
              <bool name="Locked">false</bool>
              <bool name="Massless">false</bool>
              <token name="Material">272</token>
              <string name="MaterialVariantSerialized"></string>
              <CoordinateFrame name="PivotOffset">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <float name="Reflectance">0</float>
              <float name="RightParamA">-0.5</float>
              <float name="RightParamB">0.5</float>
              <token name="RightSurface">0</token>
              <token name="RightSurfaceInput">0</token>
              <int name="RootPriority">0</int>
              <Vector3 name="RotVelocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <token name="shape">1</token>
              <Vector3 name="size">
                <X>10</X>
                <Y>12.5</Y>
                <Z>10</Z>
              </Vector3>
              <int64 name="SourceAssetId">-1</int64>
              <BinaryString name="Tags"></BinaryString>
              <float name="TopParamA">-0.5</float>
              <float name="TopParamB">0.5</float>
              <token name="TopSurface">0</token>
              <token name="TopSurfaceInput">0</token>
              <float name="Transparency">0</float>
              <Vector3 name="Velocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
            </Properties>
          </Item>
          <Item class="TrussPart" referent="804">
            <Properties>
              <string name="Name">Truss</string>
              <bool name="Anchored">true</bool>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <float name="BackParamA">-0.5</float>
              <float name="BackParamB">0.5</float>
              <token name="BackSurface">0</token>
              <token name="BackSurfaceInput">0</token>
              <float name="BottomParamA">-0.5</float>
              <float name="BottomParamB">0.5</float>
              <token name="BottomSurface">0</token>
              <token name="BottomSurfaceInput">0</token>
              <CoordinateFrame name="CFrame">
                <X>28.5</X>
                <Y>1.25</Y>
                <Z>22.5</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <bool name="CanCollide">true</bool>
              <bool name="CanQuery">true</bool>
              <bool name="CanTouch">true</bool>
              <bool name="CastShadow">false</bool>
              <string name="CollisionGroup">Default</string>
              <int name="CollisionGroupId">0</int>
              <Color3uint8 name="Color3uint8">5776413</Color3uint8>
              <PhysicalProperties name="CustomPhysicalProperties">
                <CustomPhysics>false</CustomPhysics>
              </PhysicalProperties>
              <bool name="DefinesCapabilities">false</bool>
              <bool name="EnableFluidForces">true</bool>
              <float name="FrontParamA">-0.5</float>
              <float name="FrontParamB">0.5</float>
              <token name="FrontSurface">0</token>
              <token name="FrontSurfaceInput">0</token>
              <float name="LeftParamA">-0.5</float>
              <float name="LeftParamB">0.5</float>
              <token name="LeftSurface">0</token>
              <token name="LeftSurfaceInput">0</token>
              <bool name="Locked">false</bool>
              <bool name="Massless">false</bool>
              <token name="Material">256</token>
              <string name="MaterialVariantSerialized"></string>
              <CoordinateFrame name="PivotOffset">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <float name="Reflectance">0</float>
              <float name="RightParamA">-0.5</float>
              <float name="RightParamB">0.5</float>
              <token name="RightSurface">0</token>
              <token name="RightSurfaceInput">0</token>
              <int name="RootPriority">0</int>
              <Vector3 name="RotVelocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <Vector3 name="size">
                <X>2</X>
                <Y>11.5</Y>
                <Z>2</Z>
              </Vector3>
              <int64 name="SourceAssetId">-1</int64>
              <BinaryString name="Tags"></BinaryString>
              <float name="TopParamA">-0.5</float>
              <float name="TopParamB">0.5</float>
              <token name="TopSurface">0</token>
              <token name="TopSurfaceInput">0</token>
              <float name="Transparency">0</float>
              <Vector3 name="Velocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <token name="style">0</token>
            </Properties>
          </Item>
          <Item class="Part" referent="805">
            <Properties>
              <string name="Name">platform</string>
              <bool name="Anchored">true</bool>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <float name="BackParamA">-0.5</float>
              <float name="BackParamB">0.5</float>
              <token name="BackSurface">0</token>
              <token name="BackSurfaceInput">0</token>
              <float name="BottomParamA">-0.5</float>
              <float name="BottomParamB">0.5</float>
              <token name="BottomSurface">0</token>
              <token name="BottomSurfaceInput">0</token>
              <CoordinateFrame name="CFrame">
                <X>0</X>
                <Y>-5.500003</Y>
                <Z>22.5</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <bool name="CanCollide">true</bool>
              <bool name="CanQuery">true</bool>
              <bool name="CanTouch">true</bool>
              <bool name="CastShadow">true</bool>
              <string name="CollisionGroup">Default</string>
              <int name="CollisionGroupId">0</int>
              <Color3uint8 name="Color3uint8">12147790</Color3uint8>
              <PhysicalProperties name="CustomPhysicalProperties">
                <CustomPhysics>false</CustomPhysics>
              </PhysicalProperties>
              <bool name="DefinesCapabilities">false</bool>
              <bool name="EnableFluidForces">true</bool>
              <token name="formFactorRaw">1</token>
              <float name="FrontParamA">-0.5</float>
              <float name="FrontParamB">0.5</float>
              <token name="FrontSurface">0</token>
              <token name="FrontSurfaceInput">0</token>
              <float name="LeftParamA">-0.5</float>
              <float name="LeftParamB">0.5</float>
              <token name="LeftSurface">0</token>
              <token name="LeftSurfaceInput">0</token>
              <bool name="Locked">false</bool>
              <bool name="Massless">false</bool>
              <token name="Material">272</token>
              <string name="MaterialVariantSerialized"></string>
              <CoordinateFrame name="PivotOffset">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <float name="Reflectance">0</float>
              <float name="RightParamA">-0.5</float>
              <float name="RightParamB">0.5</float>
              <token name="RightSurface">0</token>
              <token name="RightSurfaceInput">0</token>
              <int name="RootPriority">0</int>
              <Vector3 name="RotVelocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <token name="shape">1</token>
              <Vector3 name="size">
                <X>10</X>
                <Y>1</Y>
                <Z>10</Z>
              </Vector3>
              <int64 name="SourceAssetId">-1</int64>
              <BinaryString name="Tags"></BinaryString>
              <float name="TopParamA">-0.5</float>
              <float name="TopParamB">0.5</float>
              <token name="TopSurface">0</token>
              <token name="TopSurfaceInput">0</token>
              <float name="Transparency">0</float>
              <Vector3 name="Velocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
            </Properties>
          </Item>
          <Item class="Part" referent="806">
            <Properties>
              <string name="Name">platform</string>
              <bool name="Anchored">true</bool>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <float name="BackParamA">-0.5</float>
              <float name="BackParamB">0.5</float>
              <token name="BackSurface">0</token>
              <token name="BackSurfaceInput">0</token>
              <float name="BottomParamA">-0.5</float>
              <float name="BottomParamB">0.5</float>
              <token name="BottomSurface">0</token>
              <token name="BottomSurfaceInput">0</token>
              <CoordinateFrame name="CFrame">
                <X>0</X>
                <Y>4.99999</Y>
                <Z>22.5</Z>
                <R00>0</R00>
                <R01>0</R01>
                <R02>1</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>-1</R20>
                <R21>0</R21>
                <R22>0</R22>
              </CoordinateFrame>
              <bool name="CanCollide">true</bool>
              <bool name="CanQuery">true</bool>
              <bool name="CanTouch">true</bool>
              <bool name="CastShadow">false</bool>
              <string name="CollisionGroup">Default</string>
              <int name="CollisionGroupId">0</int>
              <Color3uint8 name="Color3uint8">12147790</Color3uint8>
              <PhysicalProperties name="CustomPhysicalProperties">
                <CustomPhysics>false</CustomPhysics>
              </PhysicalProperties>
              <bool name="DefinesCapabilities">false</bool>
              <bool name="EnableFluidForces">true</bool>
              <token name="formFactorRaw">1</token>
              <float name="FrontParamA">-0.5</float>
              <float name="FrontParamB">0.5</float>
              <token name="FrontSurface">0</token>
              <token name="FrontSurfaceInput">0</token>
              <float name="LeftParamA">-0.5</float>
              <float name="LeftParamB">0.5</float>
              <token name="LeftSurface">0</token>
              <token name="LeftSurfaceInput">0</token>
              <bool name="Locked">false</bool>
              <bool name="Massless">false</bool>
              <token name="Material">272</token>
              <string name="MaterialVariantSerialized"></string>
              <CoordinateFrame name="PivotOffset">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <float name="Reflectance">0</float>
              <float name="RightParamA">-0.5</float>
              <float name="RightParamB">0.5</float>
              <token name="RightSurface">0</token>
              <token name="RightSurfaceInput">0</token>
              <int name="RootPriority">0</int>
              <Vector3 name="RotVelocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <token name="shape">1</token>
              <Vector3 name="size">
                <X>6</X>
                <Y>1</Y>
                <Z>35</Z>
              </Vector3>
              <int64 name="SourceAssetId">-1</int64>
              <BinaryString name="Tags"></BinaryString>
              <float name="TopParamA">-0.5</float>
              <float name="TopParamB">0.5</float>
              <token name="TopSurface">0</token>
              <token name="TopSurfaceInput">0</token>
              <float name="Transparency">0</float>
              <Vector3 name="Velocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
            </Properties>
          </Item>
          <Item class="Part" referent="807">
            <Properties>
              <string name="Name">platform</string>
              <bool name="Anchored">true</bool>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <float name="BackParamA">-0.5</float>
              <float name="BackParamB">0.5</float>
              <token name="BackSurface">0</token>
              <token name="BackSurfaceInput">0</token>
              <float name="BottomParamA">-0.5</float>
              <float name="BottomParamB">0.5</float>
              <token name="BottomSurface">0</token>
              <token name="BottomSurfaceInput">0</token>
              <CoordinateFrame name="CFrame">
                <X>-22.5</X>
                <Y>-5.500003</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <bool name="CanCollide">true</bool>
              <bool name="CanQuery">true</bool>
              <bool name="CanTouch">true</bool>
              <bool name="CastShadow">true</bool>
              <string name="CollisionGroup">Default</string>
              <int name="CollisionGroupId">0</int>
              <Color3uint8 name="Color3uint8">12147790</Color3uint8>
              <PhysicalProperties name="CustomPhysicalProperties">
                <CustomPhysics>false</CustomPhysics>
              </PhysicalProperties>
              <bool name="DefinesCapabilities">false</bool>
              <bool name="EnableFluidForces">true</bool>
              <token name="formFactorRaw">1</token>
              <float name="FrontParamA">-0.5</float>
              <float name="FrontParamB">0.5</float>
              <token name="FrontSurface">0</token>
              <token name="FrontSurfaceInput">0</token>
              <float name="LeftParamA">-0.5</float>
              <float name="LeftParamB">0.5</float>
              <token name="LeftSurface">0</token>
              <token name="LeftSurfaceInput">0</token>
              <bool name="Locked">false</bool>
              <bool name="Massless">false</bool>
              <token name="Material">272</token>
              <string name="MaterialVariantSerialized"></string>
              <CoordinateFrame name="PivotOffset">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <float name="Reflectance">0</float>
              <float name="RightParamA">-0.5</float>
              <float name="RightParamB">0.5</float>
              <token name="RightSurface">0</token>
              <token name="RightSurfaceInput">0</token>
              <int name="RootPriority">0</int>
              <Vector3 name="RotVelocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <token name="shape">1</token>
              <Vector3 name="size">
                <X>10</X>
                <Y>1</Y>
                <Z>10</Z>
              </Vector3>
              <int64 name="SourceAssetId">-1</int64>
              <BinaryString name="Tags"></BinaryString>
              <float name="TopParamA">-0.5</float>
              <float name="TopParamB">0.5</float>
              <token name="TopSurface">0</token>
              <token name="TopSurfaceInput">0</token>
              <float name="Transparency">0</float>
              <Vector3 name="Velocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
            </Properties>
          </Item>
          <Item class="Part" referent="808">
            <Properties>
              <string name="Name">platform</string>
              <bool name="Anchored">true</bool>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <float name="BackParamA">-0.5</float>
              <float name="BackParamB">0.5</float>
              <token name="BackSurface">0</token>
              <token name="BackSurfaceInput">0</token>
              <float name="BottomParamA">-0.5</float>
              <float name="BottomParamB">0.5</float>
              <token name="BottomSurface">0</token>
              <token name="BottomSurfaceInput">0</token>
              <CoordinateFrame name="CFrame">
                <X>-22.5</X>
                <Y>0.24998999</Y>
                <Z>22.5</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <bool name="CanCollide">true</bool>
              <bool name="CanQuery">true</bool>
              <bool name="CanTouch">true</bool>
              <bool name="CastShadow">false</bool>
              <string name="CollisionGroup">Default</string>
              <int name="CollisionGroupId">0</int>
              <Color3uint8 name="Color3uint8">9979193</Color3uint8>
              <PhysicalProperties name="CustomPhysicalProperties">
                <CustomPhysics>false</CustomPhysics>
              </PhysicalProperties>
              <bool name="DefinesCapabilities">false</bool>
              <bool name="EnableFluidForces">true</bool>
              <token name="formFactorRaw">1</token>
              <float name="FrontParamA">-0.5</float>
              <float name="FrontParamB">0.5</float>
              <token name="FrontSurface">0</token>
              <token name="FrontSurfaceInput">0</token>
              <float name="LeftParamA">-0.5</float>
              <float name="LeftParamB">0.5</float>
              <token name="LeftSurface">0</token>
              <token name="LeftSurfaceInput">0</token>
              <bool name="Locked">false</bool>
              <bool name="Massless">false</bool>
              <token name="Material">272</token>
              <string name="MaterialVariantSerialized"></string>
              <CoordinateFrame name="PivotOffset">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <float name="Reflectance">0</float>
              <float name="RightParamA">-0.5</float>
              <float name="RightParamB">0.5</float>
              <token name="RightSurface">0</token>
              <token name="RightSurfaceInput">0</token>
              <int name="RootPriority">0</int>
              <Vector3 name="RotVelocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <token name="shape">1</token>
              <Vector3 name="size">
                <X>10</X>
                <Y>12.5</Y>
                <Z>10</Z>
              </Vector3>
              <int64 name="SourceAssetId">-1</int64>
              <BinaryString name="Tags"></BinaryString>
              <float name="TopParamA">-0.5</float>
              <float name="TopParamB">0.5</float>
              <token name="TopSurface">0</token>
              <token name="TopSurfaceInput">0</token>
              <float name="Transparency">0</float>
              <Vector3 name="Velocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
            </Properties>
          </Item>
          <Item class="TrussPart" referent="809">
            <Properties>
              <string name="Name">Truss</string>
              <bool name="Anchored">true</bool>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <float name="BackParamA">-0.5</float>
              <float name="BackParamB">0.5</float>
              <token name="BackSurface">0</token>
              <token name="BackSurfaceInput">0</token>
              <float name="BottomParamA">-0.5</float>
              <float name="BottomParamB">0.5</float>
              <token name="BottomSurface">0</token>
              <token name="BottomSurfaceInput">0</token>
              <CoordinateFrame name="CFrame">
                <X>-22.5</X>
                <Y>1.25</Y>
                <Z>28.5</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <bool name="CanCollide">true</bool>
              <bool name="CanQuery">true</bool>
              <bool name="CanTouch">true</bool>
              <bool name="CastShadow">false</bool>
              <string name="CollisionGroup">Default</string>
              <int name="CollisionGroupId">0</int>
              <Color3uint8 name="Color3uint8">5776413</Color3uint8>
              <PhysicalProperties name="CustomPhysicalProperties">
                <CustomPhysics>false</CustomPhysics>
              </PhysicalProperties>
              <bool name="DefinesCapabilities">false</bool>
              <bool name="EnableFluidForces">true</bool>
              <float name="FrontParamA">-0.5</float>
              <float name="FrontParamB">0.5</float>
              <token name="FrontSurface">0</token>
              <token name="FrontSurfaceInput">0</token>
              <float name="LeftParamA">-0.5</float>
              <float name="LeftParamB">0.5</float>
              <token name="LeftSurface">0</token>
              <token name="LeftSurfaceInput">0</token>
              <bool name="Locked">false</bool>
              <bool name="Massless">false</bool>
              <token name="Material">256</token>
              <string name="MaterialVariantSerialized"></string>
              <CoordinateFrame name="PivotOffset">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <float name="Reflectance">0</float>
              <float name="RightParamA">-0.5</float>
              <float name="RightParamB">0.5</float>
              <token name="RightSurface">0</token>
              <token name="RightSurfaceInput">0</token>
              <int name="RootPriority">0</int>
              <Vector3 name="RotVelocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <Vector3 name="size">
                <X>2</X>
                <Y>11.5</Y>
                <Z>2</Z>
              </Vector3>
              <int64 name="SourceAssetId">-1</int64>
              <BinaryString name="Tags"></BinaryString>
              <float name="TopParamA">-0.5</float>
              <float name="TopParamB">0.5</float>
              <token name="TopSurface">0</token>
              <token name="TopSurfaceInput">0</token>
              <float name="Transparency">0</float>
              <Vector3 name="Velocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <token name="style">0</token>
            </Properties>
          </Item>
          <Item class="Part" referent="810">
            <Properties>
              <string name="Name">plate</string>
              <bool name="Anchored">true</bool>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <float name="BackParamA">-0.5</float>
              <float name="BackParamB">0.5</float>
              <token name="BackSurface">0</token>
              <token name="BackSurfaceInput">0</token>
              <float name="BottomParamA">-0.5</float>
              <float name="BottomParamB">0.5</float>
              <token name="BottomSurface">0</token>
              <token name="BottomSurfaceInput">0</token>
              <CoordinateFrame name="CFrame">
                <X>0</X>
                <Y>-6.5</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <bool name="CanCollide">true</bool>
              <bool name="CanQuery">true</bool>
              <bool name="CanTouch">true</bool>
              <bool name="CastShadow">true</bool>
              <string name="CollisionGroup">Default</string>
              <int name="CollisionGroupId">0</int>
              <Color3uint8 name="Color3uint8">8836474</Color3uint8>
              <PhysicalProperties name="CustomPhysicalProperties">
                <CustomPhysics>false</CustomPhysics>
              </PhysicalProperties>
              <bool name="DefinesCapabilities">false</bool>
              <bool name="EnableFluidForces">true</bool>
              <token name="formFactorRaw">1</token>
              <float name="FrontParamA">-0.5</float>
              <float name="FrontParamB">0.5</float>
              <token name="FrontSurface">0</token>
              <token name="FrontSurfaceInput">0</token>
              <float name="LeftParamA">-0.5</float>
              <float name="LeftParamB">0.5</float>
              <token name="LeftSurface">0</token>
              <token name="LeftSurfaceInput">0</token>
              <bool name="Locked">false</bool>
              <bool name="Massless">false</bool>
              <token name="Material">272</token>
              <string name="MaterialVariantSerialized"></string>
              <CoordinateFrame name="PivotOffset">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <float name="Reflectance">0</float>
              <float name="RightParamA">-0.5</float>
              <float name="RightParamB">0.5</float>
              <token name="RightSurface">0</token>
              <token name="RightSurfaceInput">0</token>
              <int name="RootPriority">0</int>
              <Vector3 name="RotVelocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <token name="shape">1</token>
              <Vector3 name="size">
                <X>90</X>
                <Y>1</Y>
                <Z>90</Z>
              </Vector3>
              <int64 name="SourceAssetId">-1</int64>
              <BinaryString name="Tags"></BinaryString>
              <float name="TopParamA">-0.5</float>
              <float name="TopParamB">0.5</float>
              <token name="TopSurface">0</token>
              <token name="TopSurfaceInput">0</token>
              <float name="Transparency">0</float>
              <Vector3 name="Velocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
            </Properties>
            <Item class="Texture" referent="811">
              <Properties>
                <string name="Name">Texture</string>
                <BinaryString name="AttributesSerialize"></BinaryString>
                <Color3 name="Color3">
                  <R>0.1254902</R>
                  <G>0.4039216</G>
                  <B>0.17254902</B>
                </Color3>
                <bool name="DefinesCapabilities">false</bool>
                <token name="Face">1</token>
                <float name="OffsetStudsU">0</float>
                <float name="OffsetStudsV">0</float>
                <int64 name="SourceAssetId">-1</int64>
                <float name="StudsPerTileU">7.5</float>
                <float name="StudsPerTileV">7.5</float>
                <BinaryString name="Tags"></BinaryString>
                <Content name="Texture">
                  <url>rbxassetid://6372755229</url>
                </Content>
                <float name="Transparency">0.75</float>
                <int name="ZIndex">1</int>
              </Properties>
            </Item>
          </Item>
          <Item class="Part" referent="812">
            <Properties>
              <string name="Name">platform</string>
              <bool name="Anchored">true</bool>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <float name="BackParamA">-0.5</float>
              <float name="BackParamB">0.5</float>
              <token name="BackSurface">0</token>
              <token name="BackSurfaceInput">0</token>
              <float name="BottomParamA">-0.5</float>
              <float name="BottomParamB">0.5</float>
              <token name="BottomSurface">0</token>
              <token name="BottomSurfaceInput">0</token>
              <CoordinateFrame name="CFrame">
                <X>0</X>
                <Y>-4.500002</Y>
                <Z>-0.25</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <bool name="CanCollide">true</bool>
              <bool name="CanQuery">true</bool>
              <bool name="CanTouch">true</bool>
              <bool name="CastShadow">true</bool>
              <string name="CollisionGroup">Default</string>
              <int name="CollisionGroupId">0</int>
              <Color3uint8 name="Color3uint8">7614502</Color3uint8>
              <PhysicalProperties name="CustomPhysicalProperties">
                <CustomPhysics>false</CustomPhysics>
              </PhysicalProperties>
              <bool name="DefinesCapabilities">false</bool>
              <bool name="EnableFluidForces">true</bool>
              <token name="formFactorRaw">1</token>
              <float name="FrontParamA">-0.5</float>
              <float name="FrontParamB">0.5</float>
              <token name="FrontSurface">0</token>
              <token name="FrontSurfaceInput">0</token>
              <float name="LeftParamA">-0.5</float>
              <float name="LeftParamB">0.5</float>
              <token name="LeftSurface">0</token>
              <token name="LeftSurfaceInput">0</token>
              <bool name="Locked">false</bool>
              <bool name="Massless">false</bool>
              <token name="Material">272</token>
              <string name="MaterialVariantSerialized"></string>
              <CoordinateFrame name="PivotOffset">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <float name="Reflectance">0</float>
              <float name="RightParamA">-0.5</float>
              <float name="RightParamB">0.5</float>
              <token name="RightSurface">0</token>
              <token name="RightSurfaceInput">0</token>
              <int name="RootPriority">0</int>
              <Vector3 name="RotVelocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <token name="shape">1</token>
              <Vector3 name="size">
                <X>13</X>
                <Y>3</Y>
                <Z>13.5</Z>
              </Vector3>
              <int64 name="SourceAssetId">-1</int64>
              <BinaryString name="Tags"></BinaryString>
              <float name="TopParamA">-0.5</float>
              <float name="TopParamB">0.5</float>
              <token name="TopSurface">0</token>
              <token name="TopSurfaceInput">0</token>
              <float name="Transparency">0</float>
              <Vector3 name="Velocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
            </Properties>
          </Item>
        </Item>
        <Item class="Model" referent="813">
          <Properties>
            <string name="Name">truss_playground</string>
            <BinaryString name="AttributesSerialize"></BinaryString>
            <bool name="DefinesCapabilities">false</bool>
            <token name="LevelOfDetail">0</token>
            <CoordinateFrame name="ModelMeshCFrame">
              <X>0</X>
              <Y>0</Y>
              <Z>0</Z>
              <R00>1</R00>
              <R01>0</R01>
              <R02>0</R02>
              <R10>0</R10>
              <R11>1</R11>
              <R12>0</R12>
              <R20>0</R20>
              <R21>0</R21>
              <R22>1</R22>
            </CoordinateFrame>
            <SharedString name="ModelMeshData">rxNJufX5oaagQE3qNtzJSQ==</SharedString>
            <Vector3 name="ModelMeshSize">
              <X>0</X>
              <Y>0</Y>
              <Z>0</Z>
            </Vector3>
            <token name="ModelStreamingMode">0</token>
            <bool name="NeedsPivotMigration">false</bool>
            <Ref name="PrimaryPart">null</Ref>
            <float name="ScaleFactor">1</float>
            <int64 name="SourceAssetId">-1</int64>
            <BinaryString name="Tags"></BinaryString>
            <OptionalCoordinateFrame name="WorldPivotData">
              <CFrame>
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CFrame>
            </OptionalCoordinateFrame>
          </Properties>
          <Item class="Part" referent="814">
            <Properties>
              <string name="Name">platform</string>
              <bool name="Anchored">true</bool>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <float name="BackParamA">-0.5</float>
              <float name="BackParamB">0.5</float>
              <token name="BackSurface">0</token>
              <token name="BackSurfaceInput">0</token>
              <float name="BottomParamA">-0.5</float>
              <float name="BottomParamB">0.5</float>
              <token name="BottomSurface">0</token>
              <token name="BottomSurfaceInput">0</token>
              <CoordinateFrame name="CFrame">
                <X>0</X>
                <Y>-0.5</Y>
                <Z>-22.5</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <bool name="CanCollide">true</bool>
              <bool name="CanQuery">true</bool>
              <bool name="CanTouch">true</bool>
              <bool name="CastShadow">false</bool>
              <string name="CollisionGroup">Default</string>
              <int name="CollisionGroupId">0</int>
              <Color3uint8 name="Color3uint8">12147790</Color3uint8>
              <PhysicalProperties name="CustomPhysicalProperties">
                <CustomPhysics>false</CustomPhysics>
              </PhysicalProperties>
              <bool name="DefinesCapabilities">false</bool>
              <bool name="EnableFluidForces">true</bool>
              <token name="formFactorRaw">1</token>
              <float name="FrontParamA">-0.5</float>
              <float name="FrontParamB">0.5</float>
              <token name="FrontSurface">0</token>
              <token name="FrontSurfaceInput">0</token>
              <float name="LeftParamA">-0.5</float>
              <float name="LeftParamB">0.5</float>
              <token name="LeftSurface">0</token>
              <token name="LeftSurfaceInput">0</token>
              <bool name="Locked">false</bool>
              <bool name="Massless">false</bool>
              <token name="Material">272</token>
              <string name="MaterialVariantSerialized"></string>
              <CoordinateFrame name="PivotOffset">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <float name="Reflectance">0</float>
              <float name="RightParamA">-0.5</float>
              <float name="RightParamB">0.5</float>
              <token name="RightSurface">0</token>
              <token name="RightSurfaceInput">0</token>
              <int name="RootPriority">0</int>
              <Vector3 name="RotVelocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <token name="shape">1</token>
              <Vector3 name="size">
                <X>10</X>
                <Y>1</Y>
                <Z>10</Z>
              </Vector3>
              <int64 name="SourceAssetId">-1</int64>
              <BinaryString name="Tags"></BinaryString>
              <float name="TopParamA">-0.5</float>
              <float name="TopParamB">0.5</float>
              <token name="TopSurface">0</token>
              <token name="TopSurfaceInput">0</token>
              <float name="Transparency">0</float>
              <Vector3 name="Velocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
            </Properties>
          </Item>
          <Item class="Part" referent="815">
            <Properties>
              <string name="Name">plate</string>
              <bool name="Anchored">true</bool>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <float name="BackParamA">-0.5</float>
              <float name="BackParamB">0.5</float>
              <token name="BackSurface">0</token>
              <token name="BackSurfaceInput">0</token>
              <float name="BottomParamA">-0.5</float>
              <float name="BottomParamB">0.5</float>
              <token name="BottomSurface">0</token>
              <token name="BottomSurfaceInput">0</token>
              <CoordinateFrame name="CFrame">
                <X>0</X>
                <Y>-1.499999</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <bool name="CanCollide">true</bool>
              <bool name="CanQuery">true</bool>
              <bool name="CanTouch">true</bool>
              <bool name="CastShadow">false</bool>
              <string name="CollisionGroup">Default</string>
              <int name="CollisionGroupId">0</int>
              <Color3uint8 name="Color3uint8">8836474</Color3uint8>
              <PhysicalProperties name="CustomPhysicalProperties">
                <CustomPhysics>false</CustomPhysics>
              </PhysicalProperties>
              <bool name="DefinesCapabilities">false</bool>
              <bool name="EnableFluidForces">true</bool>
              <token name="formFactorRaw">1</token>
              <float name="FrontParamA">-0.5</float>
              <float name="FrontParamB">0.5</float>
              <token name="FrontSurface">0</token>
              <token name="FrontSurfaceInput">0</token>
              <float name="LeftParamA">-0.5</float>
              <float name="LeftParamB">0.5</float>
              <token name="LeftSurface">0</token>
              <token name="LeftSurfaceInput">0</token>
              <bool name="Locked">false</bool>
              <bool name="Massless">false</bool>
              <token name="Material">272</token>
              <string name="MaterialVariantSerialized"></string>
              <CoordinateFrame name="PivotOffset">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <float name="Reflectance">0</float>
              <float name="RightParamA">-0.5</float>
              <float name="RightParamB">0.5</float>
              <token name="RightSurface">0</token>
              <token name="RightSurfaceInput">0</token>
              <int name="RootPriority">0</int>
              <Vector3 name="RotVelocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <token name="shape">1</token>
              <Vector3 name="size">
                <X>90</X>
                <Y>1</Y>
                <Z>90</Z>
              </Vector3>
              <int64 name="SourceAssetId">-1</int64>
              <BinaryString name="Tags"></BinaryString>
              <float name="TopParamA">-0.5</float>
              <float name="TopParamB">0.5</float>
              <token name="TopSurface">0</token>
              <token name="TopSurfaceInput">0</token>
              <float name="Transparency">0</float>
              <Vector3 name="Velocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
            </Properties>
            <Item class="Texture" referent="816">
              <Properties>
                <string name="Name">Texture</string>
                <BinaryString name="AttributesSerialize"></BinaryString>
                <Color3 name="Color3">
                  <R>0.1254902</R>
                  <G>0.4039216</G>
                  <B>0.17254902</B>
                </Color3>
                <bool name="DefinesCapabilities">false</bool>
                <token name="Face">1</token>
                <float name="OffsetStudsU">0</float>
                <float name="OffsetStudsV">0</float>
                <int64 name="SourceAssetId">-1</int64>
                <float name="StudsPerTileU">7.5</float>
                <float name="StudsPerTileV">7.5</float>
                <BinaryString name="Tags"></BinaryString>
                <Content name="Texture">
                  <url>rbxassetid://6372755229</url>
                </Content>
                <float name="Transparency">0.75</float>
                <int name="ZIndex">1</int>
              </Properties>
            </Item>
          </Item>
          <Item class="Part" referent="817">
            <Properties>
              <string name="Name">platform</string>
              <bool name="Anchored">true</bool>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <float name="BackParamA">-0.5</float>
              <float name="BackParamB">0.5</float>
              <token name="BackSurface">0</token>
              <token name="BackSurfaceInput">0</token>
              <float name="BottomParamA">-0.5</float>
              <float name="BottomParamB">0.5</float>
              <token name="BottomSurface">0</token>
              <token name="BottomSurfaceInput">0</token>
              <CoordinateFrame name="CFrame">
                <X>22.5</X>
                <Y>2.5</Y>
                <Z>-22.5</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <bool name="CanCollide">true</bool>
              <bool name="CanQuery">true</bool>
              <bool name="CanTouch">true</bool>
              <bool name="CastShadow">false</bool>
              <string name="CollisionGroup">Default</string>
              <int name="CollisionGroupId">0</int>
              <Color3uint8 name="Color3uint8">9979193</Color3uint8>
              <PhysicalProperties name="CustomPhysicalProperties">
                <CustomPhysics>false</CustomPhysics>
              </PhysicalProperties>
              <bool name="DefinesCapabilities">false</bool>
              <bool name="EnableFluidForces">true</bool>
              <token name="formFactorRaw">1</token>
              <float name="FrontParamA">-0.5</float>
              <float name="FrontParamB">0.5</float>
              <token name="FrontSurface">0</token>
              <token name="FrontSurfaceInput">0</token>
              <float name="LeftParamA">-0.5</float>
              <float name="LeftParamB">0.5</float>
              <token name="LeftSurface">0</token>
              <token name="LeftSurfaceInput">0</token>
              <bool name="Locked">false</bool>
              <bool name="Massless">false</bool>
              <token name="Material">272</token>
              <string name="MaterialVariantSerialized"></string>
              <CoordinateFrame name="PivotOffset">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <float name="Reflectance">0</float>
              <float name="RightParamA">-0.5</float>
              <float name="RightParamB">0.5</float>
              <token name="RightSurface">0</token>
              <token name="RightSurfaceInput">0</token>
              <int name="RootPriority">0</int>
              <Vector3 name="RotVelocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <token name="shape">1</token>
              <Vector3 name="size">
                <X>10</X>
                <Y>7</Y>
                <Z>10</Z>
              </Vector3>
              <int64 name="SourceAssetId">-1</int64>
              <BinaryString name="Tags"></BinaryString>
              <float name="TopParamA">-0.5</float>
              <float name="TopParamB">0.5</float>
              <token name="TopSurface">0</token>
              <token name="TopSurfaceInput">0</token>
              <float name="Transparency">0</float>
              <Vector3 name="Velocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
            </Properties>
          </Item>
          <Item class="Part" referent="818">
            <Properties>
              <string name="Name">platform</string>
              <bool name="Anchored">true</bool>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <float name="BackParamA">-0.5</float>
              <float name="BackParamB">0.5</float>
              <token name="BackSurface">0</token>
              <token name="BackSurfaceInput">0</token>
              <float name="BottomParamA">-0.5</float>
              <float name="BottomParamB">0.5</float>
              <token name="BottomSurface">0</token>
              <token name="BottomSurfaceInput">0</token>
              <CoordinateFrame name="CFrame">
                <X>22.5</X>
                <Y>-0.5</Y>
                <Z>22.5</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <bool name="CanCollide">true</bool>
              <bool name="CanQuery">true</bool>
              <bool name="CanTouch">true</bool>
              <bool name="CastShadow">false</bool>
              <string name="CollisionGroup">Default</string>
              <int name="CollisionGroupId">0</int>
              <Color3uint8 name="Color3uint8">9979193</Color3uint8>
              <PhysicalProperties name="CustomPhysicalProperties">
                <CustomPhysics>false</CustomPhysics>
              </PhysicalProperties>
              <bool name="DefinesCapabilities">false</bool>
              <bool name="EnableFluidForces">true</bool>
              <token name="formFactorRaw">1</token>
              <float name="FrontParamA">-0.5</float>
              <float name="FrontParamB">0.5</float>
              <token name="FrontSurface">0</token>
              <token name="FrontSurfaceInput">0</token>
              <float name="LeftParamA">-0.5</float>
              <float name="LeftParamB">0.5</float>
              <token name="LeftSurface">0</token>
              <token name="LeftSurfaceInput">0</token>
              <bool name="Locked">false</bool>
              <bool name="Massless">false</bool>
              <token name="Material">272</token>
              <string name="MaterialVariantSerialized"></string>
              <CoordinateFrame name="PivotOffset">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <float name="Reflectance">0</float>
              <float name="RightParamA">-0.5</float>
              <float name="RightParamB">0.5</float>
              <token name="RightSurface">0</token>
              <token name="RightSurfaceInput">0</token>
              <int name="RootPriority">0</int>
              <Vector3 name="RotVelocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <token name="shape">1</token>
              <Vector3 name="size">
                <X>10</X>
                <Y>1</Y>
                <Z>10</Z>
              </Vector3>
              <int64 name="SourceAssetId">-1</int64>
              <BinaryString name="Tags"></BinaryString>
              <float name="TopParamA">-0.5</float>
              <float name="TopParamB">0.5</float>
              <token name="TopSurface">0</token>
              <token name="TopSurfaceInput">0</token>
              <float name="Transparency">0</float>
              <Vector3 name="Velocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
            </Properties>
          </Item>
          <Item class="Part" referent="819">
            <Properties>
              <string name="Name">platform</string>
              <bool name="Anchored">true</bool>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <float name="BackParamA">-0.5</float>
              <float name="BackParamB">0.5</float>
              <token name="BackSurface">0</token>
              <token name="BackSurfaceInput">0</token>
              <float name="BottomParamA">-0.5</float>
              <float name="BottomParamB">0.5</float>
              <token name="BottomSurface">0</token>
              <token name="BottomSurfaceInput">0</token>
              <CoordinateFrame name="CFrame">
                <X>0</X>
                <Y>0.49999905</Y>
                <Z>-0.25</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <bool name="CanCollide">true</bool>
              <bool name="CanQuery">true</bool>
              <bool name="CanTouch">true</bool>
              <bool name="CastShadow">false</bool>
              <string name="CollisionGroup">Default</string>
              <int name="CollisionGroupId">0</int>
              <Color3uint8 name="Color3uint8">7614502</Color3uint8>
              <PhysicalProperties name="CustomPhysicalProperties">
                <CustomPhysics>false</CustomPhysics>
              </PhysicalProperties>
              <bool name="DefinesCapabilities">false</bool>
              <bool name="EnableFluidForces">true</bool>
              <token name="formFactorRaw">1</token>
              <float name="FrontParamA">-0.5</float>
              <float name="FrontParamB">0.5</float>
              <token name="FrontSurface">0</token>
              <token name="FrontSurfaceInput">0</token>
              <float name="LeftParamA">-0.5</float>
              <float name="LeftParamB">0.5</float>
              <token name="LeftSurface">0</token>
              <token name="LeftSurfaceInput">0</token>
              <bool name="Locked">false</bool>
              <bool name="Massless">false</bool>
              <token name="Material">272</token>
              <string name="MaterialVariantSerialized"></string>
              <CoordinateFrame name="PivotOffset">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <float name="Reflectance">0</float>
              <float name="RightParamA">-0.5</float>
              <float name="RightParamB">0.5</float>
              <token name="RightSurface">0</token>
              <token name="RightSurfaceInput">0</token>
              <int name="RootPriority">0</int>
              <Vector3 name="RotVelocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <token name="shape">1</token>
              <Vector3 name="size">
                <X>13</X>
                <Y>3</Y>
                <Z>13.5</Z>
              </Vector3>
              <int64 name="SourceAssetId">-1</int64>
              <BinaryString name="Tags"></BinaryString>
              <float name="TopParamA">-0.5</float>
              <float name="TopParamB">0.5</float>
              <token name="TopSurface">0</token>
              <token name="TopSurfaceInput">0</token>
              <float name="Transparency">0</float>
              <Vector3 name="Velocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
            </Properties>
          </Item>
          <Item class="Part" referent="820">
            <Properties>
              <string name="Name">platform</string>
              <bool name="Anchored">true</bool>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <float name="BackParamA">-0.5</float>
              <float name="BackParamB">0.5</float>
              <token name="BackSurface">0</token>
              <token name="BackSurfaceInput">0</token>
              <float name="BottomParamA">-0.5</float>
              <float name="BottomParamB">0.5</float>
              <token name="BottomSurface">0</token>
              <token name="BottomSurfaceInput">0</token>
              <CoordinateFrame name="CFrame">
                <X>22.5</X>
                <Y>-0.5</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <bool name="CanCollide">true</bool>
              <bool name="CanQuery">true</bool>
              <bool name="CanTouch">true</bool>
              <bool name="CastShadow">false</bool>
              <string name="CollisionGroup">Default</string>
              <int name="CollisionGroupId">0</int>
              <Color3uint8 name="Color3uint8">12147790</Color3uint8>
              <PhysicalProperties name="CustomPhysicalProperties">
                <CustomPhysics>false</CustomPhysics>
              </PhysicalProperties>
              <bool name="DefinesCapabilities">false</bool>
              <bool name="EnableFluidForces">true</bool>
              <token name="formFactorRaw">1</token>
              <float name="FrontParamA">-0.5</float>
              <float name="FrontParamB">0.5</float>
              <token name="FrontSurface">0</token>
              <token name="FrontSurfaceInput">0</token>
              <float name="LeftParamA">-0.5</float>
              <float name="LeftParamB">0.5</float>
              <token name="LeftSurface">0</token>
              <token name="LeftSurfaceInput">0</token>
              <bool name="Locked">false</bool>
              <bool name="Massless">false</bool>
              <token name="Material">272</token>
              <string name="MaterialVariantSerialized"></string>
              <CoordinateFrame name="PivotOffset">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <float name="Reflectance">0</float>
              <float name="RightParamA">-0.5</float>
              <float name="RightParamB">0.5</float>
              <token name="RightSurface">0</token>
              <token name="RightSurfaceInput">0</token>
              <int name="RootPriority">0</int>
              <Vector3 name="RotVelocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <token name="shape">1</token>
              <Vector3 name="size">
                <X>10</X>
                <Y>1</Y>
                <Z>10</Z>
              </Vector3>
              <int64 name="SourceAssetId">-1</int64>
              <BinaryString name="Tags"></BinaryString>
              <float name="TopParamA">-0.5</float>
              <float name="TopParamB">0.5</float>
              <token name="TopSurface">0</token>
              <token name="TopSurfaceInput">0</token>
              <float name="Transparency">0</float>
              <Vector3 name="Velocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
            </Properties>
          </Item>
          <Item class="Part" referent="821">
            <Properties>
              <string name="Name">platform</string>
              <bool name="Anchored">true</bool>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <float name="BackParamA">-0.5</float>
              <float name="BackParamB">0.5</float>
              <token name="BackSurface">0</token>
              <token name="BackSurfaceInput">0</token>
              <float name="BottomParamA">-0.5</float>
              <float name="BottomParamB">0.5</float>
              <token name="BottomSurface">0</token>
              <token name="BottomSurfaceInput">0</token>
              <CoordinateFrame name="CFrame">
                <X>0</X>
                <Y>5</Y>
                <Z>22.5</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <bool name="CanCollide">true</bool>
              <bool name="CanQuery">true</bool>
              <bool name="CanTouch">true</bool>
              <bool name="CastShadow">false</bool>
              <string name="CollisionGroup">Default</string>
              <int name="CollisionGroupId">0</int>
              <Color3uint8 name="Color3uint8">12147790</Color3uint8>
              <PhysicalProperties name="CustomPhysicalProperties">
                <CustomPhysics>false</CustomPhysics>
              </PhysicalProperties>
              <bool name="DefinesCapabilities">false</bool>
              <bool name="EnableFluidForces">true</bool>
              <token name="formFactorRaw">1</token>
              <float name="FrontParamA">-0.5</float>
              <float name="FrontParamB">0.5</float>
              <token name="FrontSurface">0</token>
              <token name="FrontSurfaceInput">0</token>
              <float name="LeftParamA">-0.5</float>
              <float name="LeftParamB">0.5</float>
              <token name="LeftSurface">0</token>
              <token name="LeftSurfaceInput">0</token>
              <bool name="Locked">false</bool>
              <bool name="Massless">false</bool>
              <token name="Material">272</token>
              <string name="MaterialVariantSerialized"></string>
              <CoordinateFrame name="PivotOffset">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <float name="Reflectance">0</float>
              <float name="RightParamA">-0.5</float>
              <float name="RightParamB">0.5</float>
              <token name="RightSurface">0</token>
              <token name="RightSurfaceInput">0</token>
              <int name="RootPriority">0</int>
              <Vector3 name="RotVelocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <token name="shape">1</token>
              <Vector3 name="size">
                <X>10</X>
                <Y>12</Y>
                <Z>10</Z>
              </Vector3>
              <int64 name="SourceAssetId">-1</int64>
              <BinaryString name="Tags"></BinaryString>
              <float name="TopParamA">-0.5</float>
              <float name="TopParamB">0.5</float>
              <token name="TopSurface">0</token>
              <token name="TopSurfaceInput">0</token>
              <float name="Transparency">0</float>
              <Vector3 name="Velocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
            </Properties>
          </Item>
          <Item class="Part" referent="822">
            <Properties>
              <string name="Name">platform</string>
              <bool name="Anchored">true</bool>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <float name="BackParamA">-0.5</float>
              <float name="BackParamB">0.5</float>
              <token name="BackSurface">0</token>
              <token name="BackSurfaceInput">0</token>
              <float name="BottomParamA">-0.5</float>
              <float name="BottomParamB">0.5</float>
              <token name="BottomSurface">0</token>
              <token name="BottomSurfaceInput">0</token>
              <CoordinateFrame name="CFrame">
                <X>-22.5</X>
                <Y>5.5</Y>
                <Z>-22.5</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <bool name="CanCollide">true</bool>
              <bool name="CanQuery">true</bool>
              <bool name="CanTouch">true</bool>
              <bool name="CastShadow">false</bool>
              <string name="CollisionGroup">Default</string>
              <int name="CollisionGroupId">0</int>
              <Color3uint8 name="Color3uint8">9979193</Color3uint8>
              <PhysicalProperties name="CustomPhysicalProperties">
                <CustomPhysics>false</CustomPhysics>
              </PhysicalProperties>
              <bool name="DefinesCapabilities">false</bool>
              <bool name="EnableFluidForces">true</bool>
              <token name="formFactorRaw">1</token>
              <float name="FrontParamA">-0.5</float>
              <float name="FrontParamB">0.5</float>
              <token name="FrontSurface">0</token>
              <token name="FrontSurfaceInput">0</token>
              <float name="LeftParamA">-0.5</float>
              <float name="LeftParamB">0.5</float>
              <token name="LeftSurface">0</token>
              <token name="LeftSurfaceInput">0</token>
              <bool name="Locked">false</bool>
              <bool name="Massless">false</bool>
              <token name="Material">272</token>
              <string name="MaterialVariantSerialized"></string>
              <CoordinateFrame name="PivotOffset">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <float name="Reflectance">0</float>
              <float name="RightParamA">-0.5</float>
              <float name="RightParamB">0.5</float>
              <token name="RightSurface">0</token>
              <token name="RightSurfaceInput">0</token>
              <int name="RootPriority">0</int>
              <Vector3 name="RotVelocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <token name="shape">1</token>
              <Vector3 name="size">
                <X>10</X>
                <Y>13</Y>
                <Z>10</Z>
              </Vector3>
              <int64 name="SourceAssetId">-1</int64>
              <BinaryString name="Tags"></BinaryString>
              <float name="TopParamA">-0.5</float>
              <float name="TopParamB">0.5</float>
              <token name="TopSurface">0</token>
              <token name="TopSurfaceInput">0</token>
              <float name="Transparency">0</float>
              <Vector3 name="Velocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
            </Properties>
          </Item>
          <Item class="Part" referent="823">
            <Properties>
              <string name="Name">platform</string>
              <bool name="Anchored">true</bool>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <float name="BackParamA">-0.5</float>
              <float name="BackParamB">0.5</float>
              <token name="BackSurface">0</token>
              <token name="BackSurfaceInput">0</token>
              <float name="BottomParamA">-0.5</float>
              <float name="BottomParamB">0.5</float>
              <token name="BottomSurface">0</token>
              <token name="BottomSurfaceInput">0</token>
              <CoordinateFrame name="CFrame">
                <X>-22.5</X>
                <Y>-0.5</Y>
                <Z>22.5</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <bool name="CanCollide">true</bool>
              <bool name="CanQuery">true</bool>
              <bool name="CanTouch">true</bool>
              <bool name="CastShadow">false</bool>
              <string name="CollisionGroup">Default</string>
              <int name="CollisionGroupId">0</int>
              <Color3uint8 name="Color3uint8">9979193</Color3uint8>
              <PhysicalProperties name="CustomPhysicalProperties">
                <CustomPhysics>false</CustomPhysics>
              </PhysicalProperties>
              <bool name="DefinesCapabilities">false</bool>
              <bool name="EnableFluidForces">true</bool>
              <token name="formFactorRaw">1</token>
              <float name="FrontParamA">-0.5</float>
              <float name="FrontParamB">0.5</float>
              <token name="FrontSurface">0</token>
              <token name="FrontSurfaceInput">0</token>
              <float name="LeftParamA">-0.5</float>
              <float name="LeftParamB">0.5</float>
              <token name="LeftSurface">0</token>
              <token name="LeftSurfaceInput">0</token>
              <bool name="Locked">false</bool>
              <bool name="Massless">false</bool>
              <token name="Material">272</token>
              <string name="MaterialVariantSerialized"></string>
              <CoordinateFrame name="PivotOffset">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <float name="Reflectance">0</float>
              <float name="RightParamA">-0.5</float>
              <float name="RightParamB">0.5</float>
              <token name="RightSurface">0</token>
              <token name="RightSurfaceInput">0</token>
              <int name="RootPriority">0</int>
              <Vector3 name="RotVelocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <token name="shape">1</token>
              <Vector3 name="size">
                <X>10</X>
                <Y>1</Y>
                <Z>10</Z>
              </Vector3>
              <int64 name="SourceAssetId">-1</int64>
              <BinaryString name="Tags"></BinaryString>
              <float name="TopParamA">-0.5</float>
              <float name="TopParamB">0.5</float>
              <token name="TopSurface">0</token>
              <token name="TopSurfaceInput">0</token>
              <float name="Transparency">0</float>
              <Vector3 name="Velocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
            </Properties>
          </Item>
          <Item class="Part" referent="824">
            <Properties>
              <string name="Name">platform</string>
              <bool name="Anchored">true</bool>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <float name="BackParamA">-0.5</float>
              <float name="BackParamB">0.5</float>
              <token name="BackSurface">0</token>
              <token name="BackSurfaceInput">0</token>
              <float name="BottomParamA">-0.5</float>
              <float name="BottomParamB">0.5</float>
              <token name="BottomSurface">0</token>
              <token name="BottomSurfaceInput">0</token>
              <CoordinateFrame name="CFrame">
                <X>-22.5</X>
                <Y>-0.5</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <bool name="CanCollide">true</bool>
              <bool name="CanQuery">true</bool>
              <bool name="CanTouch">true</bool>
              <bool name="CastShadow">false</bool>
              <string name="CollisionGroup">Default</string>
              <int name="CollisionGroupId">0</int>
              <Color3uint8 name="Color3uint8">12147790</Color3uint8>
              <PhysicalProperties name="CustomPhysicalProperties">
                <CustomPhysics>false</CustomPhysics>
              </PhysicalProperties>
              <bool name="DefinesCapabilities">false</bool>
              <bool name="EnableFluidForces">true</bool>
              <token name="formFactorRaw">1</token>
              <float name="FrontParamA">-0.5</float>
              <float name="FrontParamB">0.5</float>
              <token name="FrontSurface">0</token>
              <token name="FrontSurfaceInput">0</token>
              <float name="LeftParamA">-0.5</float>
              <float name="LeftParamB">0.5</float>
              <token name="LeftSurface">0</token>
              <token name="LeftSurfaceInput">0</token>
              <bool name="Locked">false</bool>
              <bool name="Massless">false</bool>
              <token name="Material">272</token>
              <string name="MaterialVariantSerialized"></string>
              <CoordinateFrame name="PivotOffset">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <float name="Reflectance">0</float>
              <float name="RightParamA">-0.5</float>
              <float name="RightParamB">0.5</float>
              <token name="RightSurface">0</token>
              <token name="RightSurfaceInput">0</token>
              <int name="RootPriority">0</int>
              <Vector3 name="RotVelocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <token name="shape">1</token>
              <Vector3 name="size">
                <X>10</X>
                <Y>1</Y>
                <Z>10</Z>
              </Vector3>
              <int64 name="SourceAssetId">-1</int64>
              <BinaryString name="Tags"></BinaryString>
              <float name="TopParamA">-0.5</float>
              <float name="TopParamB">0.5</float>
              <token name="TopSurface">0</token>
              <token name="TopSurfaceInput">0</token>
              <float name="Transparency">0</float>
              <Vector3 name="Velocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
            </Properties>
          </Item>
          <Item class="TrussPart" referent="825">
            <Properties>
              <string name="Name">truss</string>
              <bool name="Anchored">true</bool>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <float name="BackParamA">-0.5</float>
              <float name="BackParamB">0.5</float>
              <token name="BackSurface">0</token>
              <token name="BackSurfaceInput">0</token>
              <float name="BottomParamA">-0.5</float>
              <float name="BottomParamB">0.5</float>
              <token name="BottomSurface">0</token>
              <token name="BottomSurfaceInput">0</token>
              <CoordinateFrame name="CFrame">
                <X>-6</X>
                <Y>7</Y>
                <Z>22.5</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <bool name="CanCollide">true</bool>
              <bool name="CanQuery">true</bool>
              <bool name="CanTouch">true</bool>
              <bool name="CastShadow">false</bool>
              <string name="CollisionGroup">Default</string>
              <int name="CollisionGroupId">0</int>
              <Color3uint8 name="Color3uint8">8273205</Color3uint8>
              <PhysicalProperties name="CustomPhysicalProperties">
                <CustomPhysics>false</CustomPhysics>
              </PhysicalProperties>
              <bool name="DefinesCapabilities">false</bool>
              <bool name="EnableFluidForces">true</bool>
              <float name="FrontParamA">-0.5</float>
              <float name="FrontParamB">0.5</float>
              <token name="FrontSurface">0</token>
              <token name="FrontSurfaceInput">0</token>
              <float name="LeftParamA">-0.5</float>
              <float name="LeftParamB">0.5</float>
              <token name="LeftSurface">0</token>
              <token name="LeftSurfaceInput">0</token>
              <bool name="Locked">false</bool>
              <bool name="Massless">false</bool>
              <token name="Material">256</token>
              <string name="MaterialVariantSerialized"></string>
              <CoordinateFrame name="PivotOffset">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <float name="Reflectance">0</float>
              <float name="RightParamA">-0.5</float>
              <float name="RightParamB">0.5</float>
              <token name="RightSurface">0</token>
              <token name="RightSurfaceInput">0</token>
              <int name="RootPriority">0</int>
              <Vector3 name="RotVelocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <Vector3 name="size">
                <X>2</X>
                <Y>6</Y>
                <Z>2</Z>
              </Vector3>
              <int64 name="SourceAssetId">-1</int64>
              <BinaryString name="Tags"></BinaryString>
              <float name="TopParamA">-0.5</float>
              <float name="TopParamB">0.5</float>
              <token name="TopSurface">0</token>
              <token name="TopSurfaceInput">0</token>
              <float name="Transparency">0</float>
              <Vector3 name="Velocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <token name="style">0</token>
            </Properties>
          </Item>
          <Item class="TrussPart" referent="826">
            <Properties>
              <string name="Name">truss</string>
              <bool name="Anchored">true</bool>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <float name="BackParamA">-0.5</float>
              <float name="BackParamB">0.5</float>
              <token name="BackSurface">0</token>
              <token name="BackSurfaceInput">0</token>
              <float name="BottomParamA">-0.5</float>
              <float name="BottomParamB">0.5</float>
              <token name="BottomSurface">0</token>
              <token name="BottomSurfaceInput">0</token>
              <CoordinateFrame name="CFrame">
                <X>6</X>
                <Y>5.5</Y>
                <Z>22.5</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <bool name="CanCollide">true</bool>
              <bool name="CanQuery">true</bool>
              <bool name="CanTouch">true</bool>
              <bool name="CastShadow">false</bool>
              <string name="CollisionGroup">Default</string>
              <int name="CollisionGroupId">0</int>
              <Color3uint8 name="Color3uint8">8273205</Color3uint8>
              <PhysicalProperties name="CustomPhysicalProperties">
                <CustomPhysics>false</CustomPhysics>
              </PhysicalProperties>
              <bool name="DefinesCapabilities">false</bool>
              <bool name="EnableFluidForces">true</bool>
              <float name="FrontParamA">-0.5</float>
              <float name="FrontParamB">0.5</float>
              <token name="FrontSurface">0</token>
              <token name="FrontSurfaceInput">0</token>
              <float name="LeftParamA">-0.5</float>
              <float name="LeftParamB">0.5</float>
              <token name="LeftSurface">0</token>
              <token name="LeftSurfaceInput">0</token>
              <bool name="Locked">false</bool>
              <bool name="Massless">false</bool>
              <token name="Material">256</token>
              <string name="MaterialVariantSerialized"></string>
              <CoordinateFrame name="PivotOffset">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <float name="Reflectance">0</float>
              <float name="RightParamA">-0.5</float>
              <float name="RightParamB">0.5</float>
              <token name="RightSurface">0</token>
              <token name="RightSurfaceInput">0</token>
              <int name="RootPriority">0</int>
              <Vector3 name="RotVelocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <Vector3 name="size">
                <X>2</X>
                <Y>11</Y>
                <Z>2</Z>
              </Vector3>
              <int64 name="SourceAssetId">-1</int64>
              <BinaryString name="Tags"></BinaryString>
              <float name="TopParamA">-0.5</float>
              <float name="TopParamB">0.5</float>
              <token name="TopSurface">0</token>
              <token name="TopSurfaceInput">0</token>
              <float name="Transparency">0</float>
              <Vector3 name="Velocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <token name="style">0</token>
            </Properties>
          </Item>
          <Item class="TrussPart" referent="827">
            <Properties>
              <string name="Name">truss</string>
              <bool name="Anchored">true</bool>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <float name="BackParamA">-0.5</float>
              <float name="BackParamB">0.5</float>
              <token name="BackSurface">0</token>
              <token name="BackSurfaceInput">0</token>
              <float name="BottomParamA">-0.5</float>
              <float name="BottomParamB">0.5</float>
              <token name="BottomSurface">0</token>
              <token name="BottomSurfaceInput">0</token>
              <CoordinateFrame name="CFrame">
                <X>-22.5</X>
                <Y>8</Y>
                <Z>-16.5</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <bool name="CanCollide">true</bool>
              <bool name="CanQuery">true</bool>
              <bool name="CanTouch">true</bool>
              <bool name="CastShadow">false</bool>
              <string name="CollisionGroup">Default</string>
              <int name="CollisionGroupId">0</int>
              <Color3uint8 name="Color3uint8">6565674</Color3uint8>
              <PhysicalProperties name="CustomPhysicalProperties">
                <CustomPhysics>false</CustomPhysics>
              </PhysicalProperties>
              <bool name="DefinesCapabilities">false</bool>
              <bool name="EnableFluidForces">true</bool>
              <float name="FrontParamA">-0.5</float>
              <float name="FrontParamB">0.5</float>
              <token name="FrontSurface">0</token>
              <token name="FrontSurfaceInput">0</token>
              <float name="LeftParamA">-0.5</float>
              <float name="LeftParamB">0.5</float>
              <token name="LeftSurface">0</token>
              <token name="LeftSurfaceInput">0</token>
              <bool name="Locked">false</bool>
              <bool name="Massless">false</bool>
              <token name="Material">256</token>
              <string name="MaterialVariantSerialized"></string>
              <CoordinateFrame name="PivotOffset">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <float name="Reflectance">0</float>
              <float name="RightParamA">-0.5</float>
              <float name="RightParamB">0.5</float>
              <token name="RightSurface">0</token>
              <token name="RightSurfaceInput">0</token>
              <int name="RootPriority">0</int>
              <Vector3 name="RotVelocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <Vector3 name="size">
                <X>2</X>
                <Y>6</Y>
                <Z>2</Z>
              </Vector3>
              <int64 name="SourceAssetId">-1</int64>
              <BinaryString name="Tags"></BinaryString>
              <float name="TopParamA">-0.5</float>
              <float name="TopParamB">0.5</float>
              <token name="TopSurface">0</token>
              <token name="TopSurfaceInput">0</token>
              <float name="Transparency">0</float>
              <Vector3 name="Velocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <token name="style">0</token>
            </Properties>
          </Item>
          <Item class="TrussPart" referent="828">
            <Properties>
              <string name="Name">truss</string>
              <bool name="Anchored">true</bool>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <float name="BackParamA">-0.5</float>
              <float name="BackParamB">0.5</float>
              <token name="BackSurface">0</token>
              <token name="BackSurfaceInput">0</token>
              <float name="BottomParamA">-0.5</float>
              <float name="BottomParamB">0.5</float>
              <token name="BottomSurface">0</token>
              <token name="BottomSurfaceInput">0</token>
              <CoordinateFrame name="CFrame">
                <X>0</X>
                <Y>6.999999</Y>
                <Z>-0.5</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <bool name="CanCollide">true</bool>
              <bool name="CanQuery">true</bool>
              <bool name="CanTouch">true</bool>
              <bool name="CastShadow">false</bool>
              <string name="CollisionGroup">Default</string>
              <int name="CollisionGroupId">0</int>
              <Color3uint8 name="Color3uint8">6565674</Color3uint8>
              <PhysicalProperties name="CustomPhysicalProperties">
                <CustomPhysics>false</CustomPhysics>
              </PhysicalProperties>
              <bool name="DefinesCapabilities">false</bool>
              <bool name="EnableFluidForces">true</bool>
              <float name="FrontParamA">-0.5</float>
              <float name="FrontParamB">0.5</float>
              <token name="FrontSurface">0</token>
              <token name="FrontSurfaceInput">0</token>
              <float name="LeftParamA">-0.5</float>
              <float name="LeftParamB">0.5</float>
              <token name="LeftSurface">0</token>
              <token name="LeftSurfaceInput">0</token>
              <bool name="Locked">false</bool>
              <bool name="Massless">false</bool>
              <token name="Material">256</token>
              <string name="MaterialVariantSerialized"></string>
              <CoordinateFrame name="PivotOffset">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <float name="Reflectance">0</float>
              <float name="RightParamA">-0.5</float>
              <float name="RightParamB">0.5</float>
              <token name="RightSurface">0</token>
              <token name="RightSurfaceInput">0</token>
              <int name="RootPriority">0</int>
              <Vector3 name="RotVelocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <Vector3 name="size">
                <X>2</X>
                <Y>10</Y>
                <Z>2</Z>
              </Vector3>
              <int64 name="SourceAssetId">-1</int64>
              <BinaryString name="Tags"></BinaryString>
              <float name="TopParamA">-0.5</float>
              <float name="TopParamB">0.5</float>
              <token name="TopSurface">0</token>
              <token name="TopSurfaceInput">0</token>
              <float name="Transparency">0</float>
              <Vector3 name="Velocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <token name="style">0</token>
            </Properties>
          </Item>
          <Item class="Part" referent="829">
            <Properties>
              <string name="Name">platform</string>
              <bool name="Anchored">true</bool>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <float name="BackParamA">-0.5</float>
              <float name="BackParamB">0.5</float>
              <token name="BackSurface">0</token>
              <token name="BackSurfaceInput">0</token>
              <float name="BottomParamA">-0.5</float>
              <float name="BottomParamB">0.5</float>
              <token name="BottomSurface">0</token>
              <token name="BottomSurfaceInput">0</token>
              <CoordinateFrame name="CFrame">
                <X>0</X>
                <Y>12.499999</Y>
                <Z>-0.5</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <bool name="CanCollide">true</bool>
              <bool name="CanQuery">true</bool>
              <bool name="CanTouch">true</bool>
              <bool name="CastShadow">false</bool>
              <string name="CollisionGroup">Default</string>
              <int name="CollisionGroupId">0</int>
              <Color3uint8 name="Color3uint8">7614502</Color3uint8>
              <PhysicalProperties name="CustomPhysicalProperties">
                <CustomPhysics>false</CustomPhysics>
              </PhysicalProperties>
              <bool name="DefinesCapabilities">false</bool>
              <bool name="EnableFluidForces">true</bool>
              <token name="formFactorRaw">1</token>
              <float name="FrontParamA">-0.5</float>
              <float name="FrontParamB">0.5</float>
              <token name="FrontSurface">0</token>
              <token name="FrontSurfaceInput">0</token>
              <float name="LeftParamA">-0.5</float>
              <float name="LeftParamB">0.5</float>
              <token name="LeftSurface">0</token>
              <token name="LeftSurfaceInput">0</token>
              <bool name="Locked">false</bool>
              <bool name="Massless">false</bool>
              <token name="Material">272</token>
              <string name="MaterialVariantSerialized"></string>
              <CoordinateFrame name="PivotOffset">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <float name="Reflectance">0</float>
              <float name="RightParamA">-0.5</float>
              <float name="RightParamB">0.5</float>
              <token name="RightSurface">0</token>
              <token name="RightSurfaceInput">0</token>
              <int name="RootPriority">0</int>
              <Vector3 name="RotVelocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <token name="shape">1</token>
              <Vector3 name="size">
                <X>2</X>
                <Y>1</Y>
                <Z>2</Z>
              </Vector3>
              <int64 name="SourceAssetId">-1</int64>
              <BinaryString name="Tags"></BinaryString>
              <float name="TopParamA">-0.5</float>
              <float name="TopParamB">0.5</float>
              <token name="TopSurface">0</token>
              <token name="TopSurfaceInput">0</token>
              <float name="Transparency">0</float>
              <Vector3 name="Velocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
            </Properties>
          </Item>
        </Item>
      </Item>
    </Item>
    <Item class="Folder" referent="830">
      <Properties>
        <string name="Name">Models</string>
      </Properties>
      <Item class="Tool" referent="831">
        <Properties>
          <string name="Name">bomb</string>
          <BinaryString name="AttributesSerialize"></BinaryString>
          <bool name="CanBeDropped">false</bool>
          <bool name="DefinesCapabilities">false</bool>
          <bool name="Enabled">true</bool>
          <CoordinateFrame name="Grip">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
            <R00>1</R00>
            <R01>0</R01>
            <R02>0</R02>
            <R10>0</R10>
            <R11>1</R11>
            <R12>0</R12>
            <R20>0</R20>
            <R21>0</R21>
            <R22>1</R22>
          </CoordinateFrame>
          <token name="LevelOfDetail">0</token>
          <bool name="ManualActivationOnly">false</bool>
          <CoordinateFrame name="ModelMeshCFrame">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
            <R00>1</R00>
            <R01>0</R01>
            <R02>0</R02>
            <R10>0</R10>
            <R11>1</R11>
            <R12>0</R12>
            <R20>0</R20>
            <R21>0</R21>
            <R22>1</R22>
          </CoordinateFrame>
          <SharedString name="ModelMeshData">rxNJufX5oaagQE3qNtzJSQ==</SharedString>
          <Vector3 name="ModelMeshSize">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
          </Vector3>
          <token name="ModelStreamingMode">0</token>
          <bool name="NeedsPivotMigration">false</bool>
          <Ref name="PrimaryPart">null</Ref>
          <bool name="RequiresHandle">true</bool>
          <float name="ScaleFactor">1</float>
          <int64 name="SourceAssetId">-1</int64>
          <BinaryString name="Tags"></BinaryString>
          <Content name="TextureId">
            <null>
            </null>
          </Content>
          <string name="ToolTip"></string>
          <OptionalCoordinateFrame name="WorldPivotData">
          </OptionalCoordinateFrame>
        </Properties>
        <Item class="MeshPart" referent="832">
          <Properties>
            <string name="Name">Handle</string>
            <SharedString name="AeroMeshData">rxNJufX5oaagQE3qNtzJSQ==</SharedString>
            <bool name="Anchored">false</bool>
            <BinaryString name="AttributesSerialize"></BinaryString>
            <float name="BackParamA">-0.5</float>
            <float name="BackParamB">0.5</float>
            <token name="BackSurface">0</token>
            <token name="BackSurfaceInput">0</token>
            <float name="BottomParamA">-0.5</float>
            <float name="BottomParamB">0.5</float>
            <token name="BottomSurface">0</token>
            <token name="BottomSurfaceInput">0</token>
            <CoordinateFrame name="CFrame">
              <X>-53</X>
              <Y>1.5000002</Y>
              <Z>132</Z>
              <R00>1</R00>
              <R01>0</R01>
              <R02>0</R02>
              <R10>0</R10>
              <R11>1</R11>
              <R12>0</R12>
              <R20>0</R20>
              <R21>0</R21>
              <R22>1</R22>
            </CoordinateFrame>
            <bool name="CanCollide">true</bool>
            <bool name="CanQuery">true</bool>
            <bool name="CanTouch">true</bool>
            <bool name="CastShadow">false</bool>
            <string name="CollisionGroup">Default</string>
            <int name="CollisionGroupId">0</int>
            <Color3uint8 name="Color3uint8">4276546</Color3uint8>
            <PhysicalProperties name="CustomPhysicalProperties">
              <CustomPhysics>false</CustomPhysics>
            </PhysicalProperties>
            <bool name="DefinesCapabilities">false</bool>
            <bool name="DoubleSided">false</bool>
            <bool name="EnableFluidForces">false</bool>
            <token name="FluidFidelityInternal">0</token>
            <float name="FrontParamA">-0.5</float>
            <float name="FrontParamB">0.5</float>
            <token name="FrontSurface">0</token>
            <token name="FrontSurfaceInput">0</token>
            <bool name="HasJointOffset">false</bool>
            <bool name="HasSkinnedMesh">false</bool>
            <Vector3 name="InitialSize">
              <X>19.021156</X>
              <Y>20</Y>
              <Z>19.999998</Z>
            </Vector3>
            <Vector3 name="JointOffset">
              <X>0</X>
              <Y>0</Y>
              <Z>0</Z>
            </Vector3>
            <float name="LeftParamA">-0.5</float>
            <float name="LeftParamB">0.5</float>
            <token name="LeftSurface">0</token>
            <token name="LeftSurfaceInput">0</token>
            <bool name="Locked">false</bool>
            <bool name="Massless">false</bool>
            <token name="Material">272</token>
            <string name="MaterialVariantSerialized"></string>
            <Content name="MeshId">
              <url>rbxassetid://13632087654</url>
            </Content>
            <SharedString name="PhysicalConfigData">GbDiF4fDW4KBpjziN9wsdw==</SharedString>
            <BinaryString name="PhysicsData">
            </BinaryString>
            <CoordinateFrame name="PivotOffset">
              <X>0</X>
              <Y>0</Y>
              <Z>0</Z>
              <R00>1</R00>
              <R01>0</R01>
              <R02>0</R02>
              <R10>0</R10>
              <R11>1</R11>
              <R12>0</R12>
              <R20>0</R20>
              <R21>0</R21>
              <R22>1</R22>
            </CoordinateFrame>
            <float name="Reflectance">0</float>
            <token name="RenderFidelity">0</token>
            <float name="RightParamA">-0.5</float>
            <float name="RightParamB">0.5</float>
            <token name="RightSurface">0</token>
            <token name="RightSurfaceInput">0</token>
            <int name="RootPriority">0</int>
            <Vector3 name="RotVelocity">
              <X>0</X>
              <Y>0</Y>
              <Z>0</Z>
            </Vector3>
            <Vector3 name="size">
              <X>3</X>
              <Y>3</Y>
              <Z>3</Z>
            </Vector3>
            <int64 name="SourceAssetId">1111494598</int64>
            <BinaryString name="Tags"></BinaryString>
            <Content name="TextureID">
              <null>
              </null>
            </Content>
            <float name="TopParamA">-0.5</float>
            <float name="TopParamB">0.5</float>
            <token name="TopSurface">0</token>
            <token name="TopSurfaceInput">0</token>
            <float name="Transparency">0</float>
            <Vector3 name="Velocity">
              <X>0</X>
              <Y>0</Y>
              <Z>0</Z>
            </Vector3>
            <int name="VertexCount">42</int>
          </Properties>
          <Item class="MeshPart" referent="833">
            <Properties>
              <string name="Name">Top</string>
              <SharedString name="AeroMeshData">rxNJufX5oaagQE3qNtzJSQ==</SharedString>
              <bool name="Anchored">false</bool>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <float name="BackParamA">-0.5</float>
              <float name="BackParamB">0.5</float>
              <token name="BackSurface">0</token>
              <token name="BackSurfaceInput">0</token>
              <float name="BottomParamA">-0.5</float>
              <float name="BottomParamB">0.5</float>
              <token name="BottomSurface">0</token>
              <token name="BottomSurfaceInput">0</token>
              <CoordinateFrame name="CFrame">
                <X>-53</X>
                <Y>3.0000002</Y>
                <Z>132</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <bool name="CanCollide">false</bool>
              <bool name="CanQuery">true</bool>
              <bool name="CanTouch">false</bool>
              <bool name="CastShadow">false</bool>
              <string name="CollisionGroup">Default</string>
              <int name="CollisionGroupId">0</int>
              <Color3uint8 name="Color3uint8">4276546</Color3uint8>
              <PhysicalProperties name="CustomPhysicalProperties">
                <CustomPhysics>false</CustomPhysics>
              </PhysicalProperties>
              <bool name="DefinesCapabilities">false</bool>
              <bool name="DoubleSided">false</bool>
              <bool name="EnableFluidForces">false</bool>
              <token name="FluidFidelityInternal">0</token>
              <float name="FrontParamA">-0.5</float>
              <float name="FrontParamB">0.5</float>
              <token name="FrontSurface">0</token>
              <token name="FrontSurfaceInput">0</token>
              <bool name="HasJointOffset">false</bool>
              <bool name="HasSkinnedMesh">false</bool>
              <Vector3 name="InitialSize">
                <X>1.73205</X>
                <Y>2</Y>
                <Z>2</Z>
              </Vector3>
              <Vector3 name="JointOffset">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <float name="LeftParamA">-0.5</float>
              <float name="LeftParamB">0.5</float>
              <token name="LeftSurface">0</token>
              <token name="LeftSurfaceInput">0</token>
              <bool name="Locked">false</bool>
              <bool name="Massless">false</bool>
              <token name="Material">272</token>
              <string name="MaterialVariantSerialized"></string>
              <Content name="MeshId">
                <url>rbxassetid://4962971349</url>
              </Content>
              <SharedString name="PhysicalConfigData">WS4ivYhGCuu6obGWpbsDSQ==</SharedString>
              <BinaryString name="PhysicsData">
              </BinaryString>
              <CoordinateFrame name="PivotOffset">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <float name="Reflectance">0</float>
              <token name="RenderFidelity">0</token>
              <float name="RightParamA">-0.5</float>
              <float name="RightParamB">0.5</float>
              <token name="RightSurface">0</token>
              <token name="RightSurfaceInput">0</token>
              <int name="RootPriority">0</int>
              <Vector3 name="RotVelocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <Vector3 name="size">
                <X>1</X>
                <Y>0.5</Y>
                <Z>1</Z>
              </Vector3>
              <int64 name="SourceAssetId">4962971371</int64>
              <BinaryString name="Tags"></BinaryString>
              <Content name="TextureID">
                <null>
                </null>
              </Content>
              <float name="TopParamA">-0.5</float>
              <float name="TopParamB">0.5</float>
              <token name="TopSurface">0</token>
              <token name="TopSurfaceInput">0</token>
              <float name="Transparency">0</float>
              <Vector3 name="Velocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <int name="VertexCount">0</int>
            </Properties>
            <Item class="WeldConstraint" referent="834">
              <Properties>
                <string name="Name">WeldConstraint</string>
                <BinaryString name="AttributesSerialize"></BinaryString>
                <CoordinateFrame name="CFrame0">
                  <X>0</X>
                  <Y>-1.5</Y>
                  <Z>0.0000019073486</Z>
                  <R00>1</R00>
                  <R01>0</R01>
                  <R02>0</R02>
                  <R10>0</R10>
                  <R11>1</R11>
                  <R12>0</R12>
                  <R20>0</R20>
                  <R21>0</R21>
                  <R22>1</R22>
                </CoordinateFrame>
                <bool name="DefinesCapabilities">false</bool>
                <Ref name="Part0Internal">833</Ref>
                <Ref name="Part1Internal">832</Ref>
                <int64 name="SourceAssetId">-1</int64>
                <int name="State">3</int>
                <BinaryString name="Tags"></BinaryString>
              </Properties>
            </Item>
          </Item>
          <Item class="UnionOperation" referent="835">
            <Properties>
              <string name="Name">Stem</string>
              <SharedString name="AeroMeshData">rxNJufX5oaagQE3qNtzJSQ==</SharedString>
              <bool name="Anchored">false</bool>
              <Content name="AssetId">
                <null>
                </null>
              </Content>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <float name="BackParamA">-0.5</float>
              <float name="BackParamB">0.5</float>
              <token name="BackSurface">0</token>
              <token name="BackSurfaceInput">0</token>
              <float name="BottomParamA">-0.5</float>
              <float name="BottomParamB">0.5</float>
              <token name="BottomSurface">0</token>
              <token name="BottomSurfaceInput">0</token>
              <CoordinateFrame name="CFrame">
                <X>-53.053093</X>
                <Y>3.445742</Y>
                <Z>132</Z>
                <R00>0</R00>
                <R01>-1</R01>
                <R02>0</R02>
                <R10>1</R10>
                <R11>0</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <bool name="CanCollide">false</bool>
              <bool name="CanQuery">true</bool>
              <bool name="CanTouch">false</bool>
              <bool name="CastShadow">false</bool>
              <BinaryString name="ChildData">
              </BinaryString>
              <SharedString name="ChildData2">e2l2cilrOg0W4vrbirU2hQ==</SharedString>
              <string name="CollisionGroup">Default</string>
              <int name="CollisionGroupId">0</int>
              <Color3uint8 name="Color3uint8">14408414</Color3uint8>
              <PhysicalProperties name="CustomPhysicalProperties">
                <CustomPhysics>false</CustomPhysics>
              </PhysicalProperties>
              <bool name="DefinesCapabilities">false</bool>
              <bool name="EnableFluidForces">false</bool>
              <token name="FluidFidelityInternal">0</token>
              <token name="FormFactor">3</token>
              <float name="FrontParamA">-0.5</float>
              <float name="FrontParamB">0.5</float>
              <token name="FrontSurface">0</token>
              <token name="FrontSurfaceInput">0</token>
              <Vector3 name="InitialSize">
                <X>0.49148297</X>
                <Y>0.30618668</Y>
                <Z>0.2500019</Z>
              </Vector3>
              <float name="LeftParamA">-0.5</float>
              <float name="LeftParamB">0.5</float>
              <token name="LeftSurface">0</token>
              <token name="LeftSurfaceInput">0</token>
              <bool name="Locked">false</bool>
              <bool name="Massless">false</bool>
              <token name="Material">272</token>
              <string name="MaterialVariantSerialized"></string>
              <BinaryString name="MeshData">
              </BinaryString>
              <SharedString name="MeshData2">gWJyPu9ZoBhvicn76nwMgw==</SharedString>
              <SharedString name="PhysicalConfigData">tydPtctRAf/ddupRU4Bxaw==</SharedString>
              <BinaryString name="PhysicsData">
              </BinaryString>
              <CoordinateFrame name="PivotOffset">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R00>1</R00>
                <R01>0</R01>
                <R02>0</R02>
                <R10>0</R10>
                <R11>1</R11>
                <R12>0</R12>
                <R20>0</R20>
                <R21>0</R21>
                <R22>1</R22>
              </CoordinateFrame>
              <float name="Reflectance">0</float>
              <token name="RenderFidelity">1</token>
              <float name="RightParamA">-0.5</float>
              <float name="RightParamB">0.5</float>
              <token name="RightSurface">0</token>
              <token name="RightSurfaceInput">0</token>
              <int name="RootPriority">0</int>
              <Vector3 name="RotVelocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <Vector3 name="size">
                <X>0.59148306</X>
                <Y>0.30618668</Y>
                <Z>0.2500019</Z>
              </Vector3>
              <float name="SmoothingAngle">0</float>
              <int64 name="SourceAssetId">-1</int64>
              <BinaryString name="Tags"></BinaryString>
              <float name="TopParamA">-0.5</float>
              <float name="TopParamB">0.5</float>
              <token name="TopSurface">0</token>
              <token name="TopSurfaceInput">0</token>
              <float name="Transparency">0</float>
              <bool name="UsePartColor">false</bool>
              <Vector3 name="Velocity">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
            </Properties>
            <Item class="WeldConstraint" referent="836">
              <Properties>
                <string name="Name">WeldConstraint</string>
                <BinaryString name="AttributesSerialize"></BinaryString>
                <CoordinateFrame name="CFrame0">
                  <X>-0.44574165</X>
                  <Y>-0.053092957</Y>
                  <Z>0</Z>
                  <R00>0</R00>
                  <R01>1</R01>
                  <R02>-0</R02>
                  <R10>-1</R10>
                  <R11>0</R11>
                  <R12>0</R12>
                  <R20>0</R20>
                  <R21>0</R21>
                  <R22>1</R22>
                </CoordinateFrame>
                <bool name="DefinesCapabilities">false</bool>
                <Ref name="Part0Internal">835</Ref>
                <Ref name="Part1Internal">833</Ref>
                <int64 name="SourceAssetId">-1</int64>
                <int name="State">3</int>
                <BinaryString name="Tags"></BinaryString>
              </Properties>
            </Item>
            <Item class="ParticleEmitter" referent="837">
              <Properties>
                <string name="Name">ParticleEmitter</string>
                <Vector3 name="Acceleration">
                  <X>0</X>
                  <Y>0</Y>
                  <Z>0</Z>
                </Vector3>
                <BinaryString name="AttributesSerialize"></BinaryString>
                <float name="Brightness">1</float>
                <ColorSequence name="Color">0 0.972549 1 0.454902 0 0.510381 1 0.690196 0.439216 0 1 1 0.290196 0.290196 0 </ColorSequence>
                <bool name="DefinesCapabilities">false</bool>
                <float name="Drag">0</float>
                <token name="EmissionDirection">0</token>
                <bool name="Enabled">true</bool>
                <NumberRange name="FlipbookFramerate">1 1 </NumberRange>
                <string name="FlipbookIncompatible">Particle texture must be 1024 by 1024 to use flipbooks.</string>
                <token name="FlipbookLayout">0</token>
                <token name="FlipbookMode">0</token>
                <bool name="FlipbookStartRandom">false</bool>
                <NumberRange name="Lifetime">0.75 0.75 </NumberRange>
                <float name="LightEmission">0</float>
                <float name="LightInfluence">1</float>
                <bool name="LockedToPart">false</bool>
                <token name="Orientation">0</token>
                <float name="Rate">7</float>
                <NumberRange name="RotSpeed">0 0 </NumberRange>
                <NumberRange name="Rotation">15 15 </NumberRange>
                <token name="Shape">0</token>
                <token name="ShapeInOut">0</token>
                <float name="ShapePartial">1</float>
                <token name="ShapeStyle">0</token>
                <NumberSequence name="Size">0 0 0 0.302993 0.1875 0 1 0 0 </NumberSequence>
                <int64 name="SourceAssetId">-1</int64>
                <NumberRange name="Speed">1.5 1.5 </NumberRange>
                <Vector2 name="SpreadAngle">
                  <X>30</X>
                  <Y>30</Y>
                </Vector2>
                <NumberSequence name="Squash">0 0 0 1 0 0 </NumberSequence>
                <BinaryString name="Tags"></BinaryString>
                <Content name="Texture">
                  <url>rbxassetid://11612480230</url>
                </Content>
                <float name="TimeScale">1</float>
                <NumberSequence name="Transparency">0 0 0 1 1 0 </NumberSequence>
                <float name="VelocityInheritance">0</float>
                <bool name="WindAffectsDrag">false</bool>
                <float name="ZOffset">0</float>
              </Properties>
            </Item>
          </Item>
          <Item class="Decal" referent="838">
            <Properties>
              <string name="Name">Decal</string>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <Color3 name="Color3">
                <R>1</R>
                <G>1</G>
                <B>1</B>
              </Color3>
              <bool name="DefinesCapabilities">false</bool>
              <token name="Face">5</token>
              <int64 name="SourceAssetId">-1</int64>
              <BinaryString name="Tags"></BinaryString>
              <Content name="Texture">
                <null>
                </null>
              </Content>
              <float name="Transparency">0</float>
              <int name="ZIndex">1</int>
            </Properties>
          </Item>
        </Item>
      </Item>
      <Item class="Tool" referent="839">
        <Properties>
          <string name="Name">sword</string>
          <BinaryString name="AttributesSerialize"></BinaryString>
          <bool name="CanBeDropped">true</bool>
          <bool name="DefinesCapabilities">false</bool>
          <bool name="Enabled">true</bool>
          <CoordinateFrame name="Grip">
            <X>0</X>
            <Y>0</Y>
            <Z>-1.5</Z>
            <R00>0</R00>
            <R01>0</R01>
            <R02>1</R02>
            <R10>1</R10>
            <R11>0</R11>
            <R12>0</R12>
            <R20>0</R20>
            <R21>1</R21>
            <R22>0</R22>
          </CoordinateFrame>
          <token name="LevelOfDetail">0</token>
          <bool name="ManualActivationOnly">false</bool>
          <CoordinateFrame name="ModelMeshCFrame">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
            <R00>1</R00>
            <R01>0</R01>
            <R02>0</R02>
            <R10>0</R10>
            <R11>1</R11>
            <R12>0</R12>
            <R20>0</R20>
            <R21>0</R21>
            <R22>1</R22>
          </CoordinateFrame>
          <SharedString name="ModelMeshData">rxNJufX5oaagQE3qNtzJSQ==</SharedString>
          <Vector3 name="ModelMeshSize">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
          </Vector3>
          <token name="ModelStreamingMode">0</token>
          <bool name="NeedsPivotMigration">false</bool>
          <Ref name="PrimaryPart">null</Ref>
          <bool name="RequiresHandle">true</bool>
          <float name="ScaleFactor">1</float>
          <int64 name="SourceAssetId">47433</int64>
          <BinaryString name="Tags"></BinaryString>
          <Content name="TextureId">
            <url>rbxasset://Textures/Sword128.png</url>
          </Content>
          <string name="ToolTip"></string>
          <OptionalCoordinateFrame name="WorldPivotData">
            <CFrame>
              <X>-3.173831</X>
              <Y>1.570001</Y>
              <Z>3.039963</Z>
              <R00>0.09104404</R00>
              <R01>-0.88109946</R01>
              <R02>0.46408436</R02>
              <R10>0.5370117</R10>
              <R11>0.43589485</R11>
              <R12>0.7222291</R12>
              <R20>-0.83864856</R20>
              <R21>0.18346372</R21>
              <R22>0.5128456</R22>
            </CFrame>
          </OptionalCoordinateFrame>
        </Properties>
        <Item class="Part" referent="840">
          <Properties>
            <string name="Name">Handle</string>
            <bool name="Anchored">false</bool>
            <BinaryString name="AttributesSerialize"></BinaryString>
            <float name="BackParamA">-0.5</float>
            <float name="BackParamB">0.5</float>
            <token name="BackSurface">0</token>
            <token name="BackSurfaceInput">0</token>
            <float name="BottomParamA">-0.5</float>
            <float name="BottomParamB">0.5</float>
            <token name="BottomSurface">0</token>
            <token name="BottomSurfaceInput">0</token>
            <CoordinateFrame name="CFrame">
              <X>-3.173831</X>
              <Y>1.570001</Y>
              <Z>3.039963</Z>
              <R00>0.09104404</R00>
              <R01>-0.88109946</R01>
              <R02>0.46408436</R02>
              <R10>0.5370117</R10>
              <R11>0.43589485</R11>
              <R12>0.7222291</R12>
              <R20>-0.83864856</R20>
              <R21>0.18346372</R21>
              <R22>0.5128456</R22>
            </CoordinateFrame>
            <bool name="CanCollide">true</bool>
            <bool name="CanQuery">true</bool>
            <bool name="CanTouch">true</bool>
            <bool name="CastShadow">true</bool>
            <string name="CollisionGroup">Default</string>
            <int name="CollisionGroupId">0</int>
            <Color3uint8 name="Color3uint8">6512482</Color3uint8>
            <PhysicalProperties name="CustomPhysicalProperties">
              <CustomPhysics>false</CustomPhysics>
            </PhysicalProperties>
            <bool name="DefinesCapabilities">false</bool>
            <bool name="EnableFluidForces">true</bool>
            <token name="formFactorRaw">2</token>
            <float name="FrontParamA">-0.5</float>
            <float name="FrontParamB">0.5</float>
            <token name="FrontSurface">0</token>
            <token name="FrontSurfaceInput">0</token>
            <float name="LeftParamA">-0.5</float>
            <float name="LeftParamB">0.5</float>
            <token name="LeftSurface">0</token>
            <token name="LeftSurfaceInput">0</token>
            <bool name="Locked">true</bool>
            <bool name="Massless">false</bool>
            <token name="Material">256</token>
            <string name="MaterialVariantSerialized"></string>
            <CoordinateFrame name="PivotOffset">
              <X>0</X>
              <Y>0</Y>
              <Z>0</Z>
              <R00>1</R00>
              <R01>0</R01>
              <R02>0</R02>
              <R10>0</R10>
              <R11>1</R11>
              <R12>0</R12>
              <R20>0</R20>
              <R21>0</R21>
              <R22>1</R22>
            </CoordinateFrame>
            <float name="Reflectance">0.4</float>
            <float name="RightParamA">-0.5</float>
            <float name="RightParamB">0.5</float>
            <token name="RightSurface">0</token>
            <token name="RightSurfaceInput">0</token>
            <int name="RootPriority">0</int>
            <Vector3 name="RotVelocity">
              <X>0</X>
              <Y>0</Y>
              <Z>0</Z>
            </Vector3>
            <token name="shape">1</token>
            <Vector3 name="size">
              <X>1</X>
              <Y>0.8</Y>
              <Z>4</Z>
            </Vector3>
            <int64 name="SourceAssetId">-1</int64>
            <BinaryString name="Tags"></BinaryString>
            <float name="TopParamA">-0.5</float>
            <float name="TopParamB">0.5</float>
            <token name="TopSurface">0</token>
            <token name="TopSurfaceInput">0</token>
            <float name="Transparency">0</float>
            <Vector3 name="Velocity">
              <X>0</X>
              <Y>0</Y>
              <Z>0</Z>
            </Vector3>
          </Properties>
          <Item class="SpecialMesh" referent="841">
            <Properties>
              <string name="Name">Mesh</string>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <bool name="DefinesCapabilities">false</bool>
              <Content name="MeshId">
                <url>rbxasset://fonts/sword.mesh</url>
              </Content>
              <token name="MeshType">5</token>
              <Vector3 name="Offset">
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </Vector3>
              <Vector3 name="Scale">
                <X>1</X>
                <Y>1</Y>
                <Z>1</Z>
              </Vector3>
              <int64 name="SourceAssetId">-1</int64>
              <BinaryString name="Tags"></BinaryString>
              <Content name="TextureId">
                <url>rbxasset://textures/SwordTexture.png</url>
              </Content>
              <Vector3 name="VertexColor">
                <X>1</X>
                <Y>1</Y>
                <Z>1</Z>
              </Vector3>
            </Properties>
          </Item>
          <Item class="Sound" referent="842">
            <Properties>
              <string name="Name">SwordSlash</string>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <bool name="DefinesCapabilities">false</bool>
              <float name="EmitterSize">10</float>
              <NumberRange name="LoopRegion">0 60000 </NumberRange>
              <bool name="Looped">false</bool>
              <float name="xmlRead_MaxDistance_3">10000</float>
              <bool name="PlayOnRemove">false</bool>
              <NumberRange name="PlaybackRegion">0 60000 </NumberRange>
              <bool name="PlaybackRegionsEnabled">false</bool>
              <float name="PlaybackSpeed">1</float>
              <bool name="Playing">false</bool>
              <token name="RollOffMode">0</token>
              <Ref name="SoundGroup">null</Ref>
              <Content name="SoundId">
                <url>http://www.roblox.com/asset/?id=12222216</url>
              </Content>
              <int64 name="SourceAssetId">-1</int64>
              <BinaryString name="Tags"></BinaryString>
              <double name="TimePosition">0</double>
              <float name="Volume">0.7</float>
            </Properties>
          </Item>
          <Item class="Sound" referent="843">
            <Properties>
              <string name="Name">SwordLunge</string>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <bool name="DefinesCapabilities">false</bool>
              <float name="EmitterSize">10</float>
              <NumberRange name="LoopRegion">0 60000 </NumberRange>
              <bool name="Looped">false</bool>
              <float name="xmlRead_MaxDistance_3">10000</float>
              <bool name="PlayOnRemove">false</bool>
              <NumberRange name="PlaybackRegion">0 60000 </NumberRange>
              <bool name="PlaybackRegionsEnabled">false</bool>
              <float name="PlaybackSpeed">1</float>
              <bool name="Playing">false</bool>
              <token name="RollOffMode">0</token>
              <Ref name="SoundGroup">null</Ref>
              <Content name="SoundId">
                <url>http://www.roblox.com/asset/?id=12222208</url>
              </Content>
              <int64 name="SourceAssetId">-1</int64>
              <BinaryString name="Tags"></BinaryString>
              <double name="TimePosition">0</double>
              <float name="Volume">0.6</float>
            </Properties>
          </Item>
          <Item class="Sound" referent="844">
            <Properties>
              <string name="Name">Unsheath</string>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <bool name="DefinesCapabilities">false</bool>
              <float name="EmitterSize">10</float>
              <NumberRange name="LoopRegion">0 60000 </NumberRange>
              <bool name="Looped">false</bool>
              <float name="xmlRead_MaxDistance_3">10000</float>
              <bool name="PlayOnRemove">false</bool>
              <NumberRange name="PlaybackRegion">0 60000 </NumberRange>
              <bool name="PlaybackRegionsEnabled">false</bool>
              <float name="PlaybackSpeed">1</float>
              <bool name="Playing">false</bool>
              <token name="RollOffMode">0</token>
              <Ref name="SoundGroup">null</Ref>
              <Content name="SoundId">
                <url>http://www.roblox.com/asset/?id=12222225</url>
              </Content>
              <int64 name="SourceAssetId">-1</int64>
              <BinaryString name="Tags"></BinaryString>
              <double name="TimePosition">0</double>
              <float name="Volume">1</float>
            </Properties>
          </Item>
        </Item>
        <Item class="Script" referent="845">
          <Properties>
            <string name="Name">SwordScript</string>
            <BinaryString name="AttributesSerialize"></BinaryString>
            <bool name="DefinesCapabilities">false</bool>
            <bool name="Disabled">false</bool>
            <Content name="LinkedSource">
              <null>
              </null>
            </Content>
            <token name="RunContext">0</token>
            <string name="ScriptGuid">{1E0FB576-A765-4ADE-8698-7DE3F8669F73}</string>
            <string name="Source">--Rescripted by Luckymaxer
--EUROCOW WAS HERE BECAUSE I MADE THE PARTICLES AND THEREFORE THIS ENTIRE SWORD PRETTY AND LOOK PRETTY WORDS AND I'D LIKE TO DEDICATE THIS TO MY FRIENDS AND HI LUCKYMAXER PLS FIX SFOTH SWORDS TY LOVE Y'ALl
--Updated for R15 avatars by StarWars
--Re-updated by TakeoHonorable

Tool = script.Parent
Handle = Tool:WaitForChild("Handle")

function Create(ty)
	return function(data)
		local obj = Instance.new(ty)
		for k, v in pairs(data) do
			if type(k) == 'number' then
				v.Parent = obj
			else
				obj[k] = v
			end
		end
		return obj
	end
end

local BaseUrl = "rbxassetid://"

Players = game:GetService("Players")
Debris = game:GetService("Debris")
RunService = game:GetService("RunService")

DamageValues = {
	BaseDamage = 5,
	SlashDamage = 10,
	LungeDamage = 30
}

--For R15 avatars
Animations = {
	R15Slash = 522635514,
	R15Lunge = 522638767
}

Damage = DamageValues.BaseDamage

Grips = {
	Up = CFrame.new(0, 0, -1.70000005, 0, 0, 1, 1, 0, 0, 0, 1, 0),
	Out = CFrame.new(0, 0, -1.70000005, 0, 1, 0, 1, -0, 0, 0, 0, -1)
}

Sounds = {
	Slash = Handle:WaitForChild("SwordSlash"),
	Lunge = Handle:WaitForChild("SwordLunge"),
	Unsheath = Handle:WaitForChild("Unsheath")
}

ToolEquipped = false

--For Omega Rainbow Katana thumbnail to display a lot of particles.
for i, v in pairs(Handle:GetChildren()) do
	if v:IsA("ParticleEmitter") then
		v.Rate = 20
	end
end

Tool.Grip = Grips.Up
Tool.Enabled = true

function IsTeamMate(Player1, Player2)
	return (Player1 and Player2 and not Player1.Neutral and not Player2.Neutral and Player1.TeamColor == Player2.TeamColor)
end

function TagHumanoid(humanoid, player)
	local Creator_Tag = Instance.new("ObjectValue")
	Creator_Tag.Name = "creator"
	Creator_Tag.Value = player
	Debris:AddItem(Creator_Tag, 2)
	Creator_Tag.Parent = humanoid
end

function UntagHumanoid(humanoid)
	for i, v in pairs(humanoid:GetChildren()) do
		if v:IsA("ObjectValue") and v.Name == "creator" then
			v:Destroy()
		end
	end
end

function Blow(Hit)
	if not Hit or not Hit.Parent or not CheckIfAlive() or not ToolEquipped then
		return
	end
	local RightArm = Character:FindFirstChild("Right Arm") or Character:FindFirstChild("RightHand")
	if not RightArm then
		return
	end
	local RightGrip = RightArm:FindFirstChild("RightGrip")
	if not RightGrip or (RightGrip.Part0 ~= Handle and RightGrip.Part1 ~= Handle) then
		return
	end
	local character = Hit.Parent
	if character == Character then
		return
	end
	local humanoid = character:FindFirstChildOfClass("Humanoid")
	if not humanoid or humanoid.Health == 0 then
		return
	end
	local player = Players:GetPlayerFromCharacter(character)
	if player and (player == Player or IsTeamMate(Player, player)) then
		return
	end
	UntagHumanoid(humanoid)
	TagHumanoid(humanoid, Player)
	humanoid:TakeDamage(Damage)	
end


function Attack()
	Damage = DamageValues.SlashDamage
	Sounds.Slash:Play()

	if Humanoid then
		if Humanoid.RigType == Enum.HumanoidRigType.R6 then
			local Anim = Instance.new("StringValue")
			Anim.Name = "toolanim"
			Anim.Value = "Slash"
			Anim.Parent = Tool
		elseif Humanoid.RigType == Enum.HumanoidRigType.R15 then
			local Anim = Tool:FindFirstChild("R15Slash")
			if Anim then
				local Track = Humanoid:LoadAnimation(Anim)
				Track:Play(0)
			end
		end
	end	
end

function Lunge()
	Damage = DamageValues.LungeDamage

	Sounds.Lunge:Play()
	
	if Humanoid then
		if Humanoid.RigType == Enum.HumanoidRigType.R6 then
			local Anim = Instance.new("StringValue")
			Anim.Name = "toolanim"
			Anim.Value = "Lunge"
			Anim.Parent = Tool
		elseif Humanoid.RigType == Enum.HumanoidRigType.R15 then
			local Anim = Tool:FindFirstChild("R15Lunge")
			if Anim then
				local Track = Humanoid:LoadAnimation(Anim)
				Track:Play(0)
			end
		end
	end	
	--[[
	if CheckIfAlive() then
		local Force = Instance.new("BodyVelocity")
		Force.velocity = Vector3.new(0, 10, 0) 
		Force.maxForce = Vector3.new(0, 4000, 0)
		Debris:AddItem(Force, 0.4)
		Force.Parent = Torso
	end
	]]
	
	wait(0.2)
	Tool.Grip = Grips.Out
	wait(0.6)
	Tool.Grip = Grips.Up

	Damage = DamageValues.SlashDamage
end

Tool.Enabled = true
LastAttack = 0

function Activated()
	if not Tool.Enabled or not ToolEquipped or not CheckIfAlive() then
		return
	end
	Tool.Enabled = false
	local Tick = RunService.Stepped:wait()
	if (Tick - LastAttack &lt; 0.2) then
		Lunge()
	else
		Attack()
	end
	LastAttack = Tick
	--wait(0.5)
	Damage = DamageValues.BaseDamage
	local SlashAnim = (Tool:FindFirstChild("R15Slash") or Create("Animation"){
		Name = "R15Slash",
		AnimationId = BaseUrl .. Animations.R15Slash,
		Parent = Tool
	})
	
	local LungeAnim = (Tool:FindFirstChild("R15Lunge") or Create("Animation"){
		Name = "R15Lunge",
		AnimationId = BaseUrl .. Animations.R15Lunge,
		Parent = Tool
	})
	Tool.Enabled = true
end

function CheckIfAlive()
	return (((Player and Player.Parent and Character and Character.Parent and Humanoid and Humanoid.Parent and Humanoid.Health > 0 and Torso and Torso.Parent) and true) or false)
end

function Equipped()
	Character = Tool.Parent
	Player = Players:GetPlayerFromCharacter(Character)
	Humanoid = Character:FindFirstChildOfClass("Humanoid")
	Torso = Character:FindFirstChild("Torso") or Character:FindFirstChild("HumanoidRootPart")
	if not CheckIfAlive() then
		return
	end
	ToolEquipped = true
	Sounds.Unsheath:Play()
end

function Unequipped()
	Tool.Grip = Grips.Up
	ToolEquipped = false
end

Tool.Activated:Connect(Activated)
Tool.Equipped:Connect(Equipped)
Tool.Unequipped:Connect(Unequipped)

Connection = Handle.Touched:Connect(Blow)</string>
            <int64 name="SourceAssetId">-1</int64>
            <BinaryString name="Tags"></BinaryString>
          </Properties>
        </Item>
        <Item class="LocalScript" referent="846">
          <Properties>
            <string name="Name">MouseIcon</string>
            <BinaryString name="AttributesSerialize"></BinaryString>
            <bool name="DefinesCapabilities">false</bool>
            <bool name="Disabled">false</bool>
            <Content name="LinkedSource">
              <null>
              </null>
            </Content>
            <token name="RunContext">0</token>
            <string name="ScriptGuid">{5E54C876-9776-4CFC-89E9-4C7D48A46B8D}</string>
            <string name="Source"><![CDATA[--Made by Luckymaxer

Mouse_Icon = "rbxasset://textures/GunCursor.png"
Reloading_Icon = "rbxasset://textures/GunWaitCursor.png"

Tool = script.Parent

Mouse = nil

function UpdateIcon()
	if Mouse then
		Mouse.Icon = Tool.Enabled and Mouse_Icon or Reloading_Icon
	end
end

function OnEquipped(ToolMouse)
	Mouse = ToolMouse
	UpdateIcon()
end

function OnChanged(Property)
	if Property == "Enabled" then
		UpdateIcon()
	end
end

Tool.Equipped:Connect(OnEquipped)
Tool.Changed:Connect(OnChanged)
]]></string>
            <int64 name="SourceAssetId">-1</int64>
            <BinaryString name="Tags"></BinaryString>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="Folder" referent="847">
      <Properties>
        <string name="Name">TS</string>
      </Properties>
      <Item class="Folder" referent="848">
        <Properties>
          <string name="Name">components</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="849">
        <Properties>
          <string name="Name">gamemodes</string>
          <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.2.0
local TS = require(game:GetService("ReplicatedStorage"):WaitForChild("rbxts_include"):WaitForChild("RuntimeLib"))
-- import TestMode from "server/gamemodes/modes/TestMode";
local PassBomb = TS.import(script, game:GetService("ServerScriptService"), "TS", "gamemodes", "modes", "PassBomb")
local SwordFight = TS.import(script, game:GetService("ServerScriptService"), "TS", "gamemodes", "modes", "SwordFight")
local gamemodes = {
	pass_bomb = PassBomb,
	sword_fight = SwordFight,
}
return {
	gamemodes = gamemodes,
}
]]></string>
        </Properties>
        <Item class="Folder" referent="850">
          <Properties>
            <string name="Name">helpers</string>
          </Properties>
          <Item class="ModuleScript" referent="851">
            <Properties>
              <string name="Name">initializeGamemode</string>
              <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.2.0
local TS = require(game:GetService("ReplicatedStorage"):WaitForChild("rbxts_include"):WaitForChild("RuntimeLib"))
-- YEAH YEAH I KNOW ITS OVERABSTRACTION
-- SHUT UP IT REMOVES BOILERPLATE :sob:
local Players = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "services").Players
local Signal = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "beacon", "out").Signal
local Janitor = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "janitor", "src").Janitor
local promiseR6 = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "promise-character").promiseR6
local store = TS.import(script, game:GetService("ServerScriptService"), "TS", "store").store
local selectSurvivors = TS.import(script, game:GetService("ServerScriptService"), "TS", "store", "survivors").selectSurvivors
local Log = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "log", "out").default
local function initializeGamemode()
	local endGame = Signal.new()
	local obliterator = Janitor.new()
	obliterator:Add(endGame)
	obliterator:Add(store:subscribe(function(state)
		local survivors = state.survivorsSlice.survivors
		if survivors:len() < 2 then
			endGame:Fire(unpack(survivors:asPtr()))
		end
	end))
	-- for some sick and twisted reason the selector WILL NOT work here
	-- why??? IDK WHY
	-- honestly please try to fix this lmao
	--[[
		
		    obliterator.Add(
		        store.subscribe(selectSurvivors, (survivors) => {
		            if (survivors.len() < 2) endGame.Fire(...survivors.asPtr());
		        }),
		    );
		  
	]]
	local retrieved = store:getState(selectSurvivors)
	if retrieved:len() < 2 then
		Log.Error("not enough players!")
		endGame:Fire()
	end
	retrieved:iter():forEach(function(player)
		local character = player.Character or (player.CharacterAdded:Wait())
		local _exp = promiseR6(character)
		local _arg0 = function(model)
			return model.Humanoid.Died:Once(function()
				store.removeSurvivor(player)
			end)
		end
		_exp:andThen(_arg0)
	end)
	obliterator:Add(Players.PlayerRemoving:Connect(function(player)
		return store.removeSurvivor(player)
	end))
	local endGamePromise = TS.Promise.new(function(resolve, _reject, onCancel)
		onCancel(function()
			Log.Info("gamemode has been cancelled!")
			obliterator:Destroy()
		end)
		local winners = { endGame:Wait() }
		obliterator:Destroy()
		resolve(winners)
	end)
	return { obliterator, endGame, endGamePromise }
end
return {
	initializeGamemode = initializeGamemode,
}
]]></string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="852">
            <Properties>
              <string name="Name">lobbyVariant</string>
              <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.2.0
local TS = require(game:GetService("ReplicatedStorage"):WaitForChild("rbxts_include"):WaitForChild("RuntimeLib"))
local store = TS.import(script, game:GetService("ServerScriptService"), "TS", "store").store
local lobbyVariant = function()
	-- 50% chance
	local random = math.random(1, 2)
	print(random)
	if random == 1 then
		store.setRandomLobby()
	end
end
return {
	lobbyVariant = lobbyVariant,
}
]]></string>
            </Properties>
          </Item>
        </Item>
        <Item class="Folder" referent="853">
          <Properties>
            <string name="Name">modes</string>
          </Properties>
          <Item class="ModuleScript" referent="854">
            <Properties>
              <string name="Name">PassBomb</string>
              <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.2.0
local TS = require(game:GetService("ReplicatedStorage"):WaitForChild("rbxts_include"):WaitForChild("RuntimeLib"))
local _services = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "services")
local Players = _services.Players
local ServerScriptService = _services.ServerScriptService
local Workspace = _services.Workspace
local initializeGamemode = TS.import(script, game:GetService("ServerScriptService"), "TS", "gamemodes", "helpers", "initializeGamemode").initializeGamemode
local store = TS.import(script, game:GetService("ServerScriptService"), "TS", "store").store
local selectSurvivors = TS.import(script, game:GetService("ServerScriptService"), "TS", "store", "survivors").selectSurvivors
local Log = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "log", "out").default
local Option = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "rust-classes", "out").Option
local lobbyVariant = TS.import(script, game:GetService("ServerScriptService"), "TS", "gamemodes", "helpers", "lobbyVariant").lobbyVariant
local Events = TS.import(script, game:GetService("ServerScriptService"), "TS", "network").Events
--const round_length = 120;
local round_length = 30
local bomb_base = ServerScriptService.Models.bomb
local winCondition = TS.async(function()
	local _binding = initializeGamemode()
	local obliterator = _binding[1]
	local endGame = _binding[2]
	local endGamePromise = _binding[3]
	local bomb = bomb_base:Clone()
	local handle = bomb.Handle
	local assigned = Option:none()
	obliterator:Add(bomb)
	local assign_bomb = function(player)
		assigned = Option:some(player)
		local character = player.Character or (player.CharacterAdded:Wait())
		bomb.Parent = character
	end
	local assign_bomb_to_random = function()
		local survivors = store:getState(selectSurvivors)
		local random = survivors:get(math.random(0, survivors:len() - 1))
		if random:isNone() then
			Log.Error("lmao apparently we errored trying to select a player???")
			endGame:Fire()
			return nil
		end
		assign_bomb(random:unwrap())
	end
	-- yknow.. when the player holding the bomb leaves/dies
	obliterator:Add(store:subscribe(selectSurvivors, function(survivors)
		if assigned:isNone() then
			return nil
		end
		local holding = assigned:unwrap()
		local found = survivors:iter():any(function(player)
			return player == holding
		end)
		if found then
			assign_bomb_to_random()
		end
	end))
	-- when the bomb gets destroyed for some reason (it can fall off of the void)
	obliterator:Add(bomb.Destroying:Connect(function()
		return endGame:Fire()
	end))
	-- not adding onto janitor since the instance is already in it (and destroying instance auto disconnects all of its events)
	handle.Touched:Connect(function(touched)
		if assigned:isNone() then
			return nil
		end
		local holding = assigned:unwrap()
		local _humanoid = touched.Parent
		if _humanoid ~= nil then
			_humanoid = _humanoid:FindFirstChildWhichIsA("Humanoid")
		end
		local humanoid = _humanoid
		if not humanoid then
			return nil
		end
		local model = humanoid.Parent
		local player = Players:GetPlayerFromCharacter(model)
		if not player then
			return nil
		end
		if holding == player then
			return nil
		end
		assigned = Option:some(player)
		bomb.Parent = model
		handle.CanTouch = false
		task.wait(0.5)
		handle.CanTouch = true
	end)
	local _fn = obliterator
	local _exp = TS.Promise.delay(round_length)
	local _arg0 = function()
		local survivors = store:getState(selectSurvivors)
		if assigned:isSome() then
			local explosion = Instance.new("Explosion")
			explosion.Position = bomb.Handle.Position
			explosion.Parent = Workspace
			endGame:Fire(unpack(survivors:retain(function(current)
				return current ~= assigned:unwrap()
			end):asPtr()))
		else
			Log.Error("cant get person holding bomb so NOBODY wins!!!")
			endGame:Fire()
		end
	end
	_fn:AddPromise(_exp:andThen(_arg0))
	lobbyVariant()
	assign_bomb_to_random()
	return endGamePromise:tap(function()
		task.wait(1)
		Events.announce:broadcast(tostring(assigned:unwrap()) .. " has lost!")
	end)
end)
return winCondition
]]></string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="855">
            <Properties>
              <string name="Name">SwordFight</string>
              <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.2.0
local TS = require(game:GetService("ReplicatedStorage"):WaitForChild("rbxts_include"):WaitForChild("RuntimeLib"))
local ServerScriptService = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "services").ServerScriptService
local store = TS.import(script, game:GetService("ServerScriptService"), "TS", "store").store
local initializeGamemode = TS.import(script, game:GetService("ServerScriptService"), "TS", "gamemodes", "helpers", "initializeGamemode").initializeGamemode
local selectSurvivors = TS.import(script, game:GetService("ServerScriptService"), "TS", "store", "survivors").selectSurvivors
local promiseR6 = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "promise-character").promiseR6
local lobbyVariant = TS.import(script, game:GetService("ServerScriptService"), "TS", "gamemodes", "helpers", "lobbyVariant").lobbyVariant
local Events = TS.import(script, game:GetService("ServerScriptService"), "TS", "network").Events
local sword = ServerScriptService.Models.sword
local winCondition = TS.async(function()
	local _binding = initializeGamemode()
	local _obliterator = _binding[1]
	local _endGame = _binding[2]
	local endGamePromise = _binding[3]
	lobbyVariant()
	store:getState(selectSurvivors):iter():forEach(function(player)
		local model = player.Character or (player.CharacterAdded:Wait())
		local _exp = promiseR6(model)
		local _arg0 = function(character)
			local _exp_1 = sword:Clone()
			_exp_1.Parent = character
			return _exp_1.Parent
		end
		_exp:andThen(_arg0)
	end)
	return endGamePromise:tap(function(winners)
		task.wait(1)
		Events.announce:broadcast(tostring(winners[1]) .. " is the last standing!")
	end)
end)
return winCondition
]]></string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="856">
            <Properties>
              <string name="Name">TestMode</string>
              <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.2.0
local TS = require(game:GetService("ReplicatedStorage"):WaitForChild("rbxts_include"):WaitForChild("RuntimeLib"))
-- this is the template for all of the gamemodes!
-- yeah yeah stupid overabstraction at least I dont have to write a million lines of boilerplate
local initializeGamemode = TS.import(script, game:GetService("ServerScriptService"), "TS", "gamemodes", "helpers", "initializeGamemode").initializeGamemode
local winCondition = TS.async(function()
	local _binding = initializeGamemode()
	local _obliterator = _binding[1]
	local _endGame = _binding[2]
	local endGamePromise = _binding[3]
	return endGamePromise
end)
return winCondition
]]></string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="857">
            <Properties>
              <string name="Name">Trophy</string>
              <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.2.0
return nil
]]></string>
            </Properties>
          </Item>
        </Item>
      </Item>
      <Item class="ModuleScript" referent="858">
        <Properties>
          <string name="Name">network</string>
          <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.2.0
local TS = require(game:GetService("ReplicatedStorage"):WaitForChild("rbxts_include"):WaitForChild("RuntimeLib"))
local _network = TS.import(script, game:GetService("ReplicatedStorage"), "TS", "network")
local GlobalEvents = _network.GlobalEvents
local GlobalFunctions = _network.GlobalFunctions
local Events = GlobalEvents.server
local Functions = GlobalFunctions.server
return {
	Events = Events,
	Functions = Functions,
}
]]></string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="859">
        <Properties>
          <string name="Name">peppers</string>
          <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.2.0
local TS = require(game:GetService("ReplicatedStorage"):WaitForChild("rbxts_include"):WaitForChild("RuntimeLib"))
local Tabasco = TS.import(script, game:GetService("ServerScriptService"), "TS", "peppers", "tabasco").Tabasco
local BellPepper = TS.import(script, game:GetService("ServerScriptService"), "TS", "peppers", "bell_pepper").BellPepper
local Jalapeno = TS.import(script, game:GetService("ServerScriptService"), "TS", "peppers", "jalapeno").Jalapeno
local CarolinaReaper = TS.import(script, game:GetService("ServerScriptService"), "TS", "peppers", "carolina_reaper").CarolinaReaper
local IceCream = TS.import(script, game:GetService("ServerScriptService"), "TS", "peppers", "ice_cream").IceCream
local GhostPepper = TS.import(script, game:GetService("ServerScriptService"), "TS", "peppers", "ghost_pepper").GhostPepper
local peppers = {
	tabasco = Tabasco,
	bell_pepper = BellPepper,
	jalapeno = Jalapeno,
	carolina_reaper = CarolinaReaper,
	ice_cream = IceCream,
	ghost_pepper = GhostPepper,
}
return {
	peppers = peppers,
}
]]></string>
        </Properties>
        <Item class="ModuleScript" referent="860">
          <Properties>
            <string name="Name">bell_pepper</string>
            <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.2.0
local BellPepper = {
	option = {
		icon = "rbxgameasset://Images/bell_pepper",
		name = "bell_pepper",
		description = "half health n' speed, high jump!",
	},
	effect = function(rig)
		local humanoid = rig.Humanoid
		humanoid.MaxHealth = 50
		humanoid.Health = humanoid.MaxHealth
		humanoid.JumpPower = 100
		humanoid.WalkSpeed = 8
	end,
}
return {
	BellPepper = BellPepper,
}
]]></string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="861">
          <Properties>
            <string name="Name">carolina_reaper</string>
            <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.2.0
local CarolinaReaper = {
	option = {
		icon = "rbxgameasset://Images/carolina_reaper",
		name = "carolina_reaper",
		description = "fast but cant jump and 1 health lol",
	},
	effect = function(rig)
		local humanoid = rig.Humanoid
		humanoid.MaxHealth = 1
		humanoid.Health = humanoid.MaxHealth
		humanoid.JumpPower = 0
		humanoid.WalkSpeed = 64
	end,
}
return {
	CarolinaReaper = CarolinaReaper,
}
]]></string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="862">
          <Properties>
            <string name="Name">ghost_pepper</string>
            <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.2.0
local GhostPepper = {
	option = {
		icon = "rbxgameasset://Images/ghost_pepper",
		name = "ghost_pepper",
		description = "half jump funny float, also literal interpretation lol",
	},
	effect = function(rig)
		local rootpart = rig.HumanoidRootPart
		local linearVelocity = Instance.new("LinearVelocity")
		linearVelocity.Attachment0 = rootpart.RootAttachment
		linearVelocity.MaxForce = 2000
		linearVelocity.VectorVelocity = Vector3.yAxis * 1000
		linearVelocity.Parent = rootpart
		rig.Humanoid.JumpPower = 20
	end,
}
return {
	GhostPepper = GhostPepper,
}
]]></string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="863">
          <Properties>
            <string name="Name">ice_cream</string>
            <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.2.0
local IceCream = {
	option = {
		icon = "rbxgameasset://Images/ice_cream",
		name = "ice_cream",
		description = "health 1.25x but walk and jump 0.75x",
	},
	effect = function(rig)
		local humanoid = rig.Humanoid
		humanoid.MaxHealth = 125
		humanoid.Health = humanoid.MaxHealth
		-- actual number is like 37.5 but who cares
		humanoid.JumpPower = 35
		humanoid.WalkSpeed = 12
	end,
}
return {
	IceCream = IceCream,
}
]]></string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="864">
          <Properties>
            <string name="Name">jalapeno</string>
            <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.2.0
local Jalapeno = {
	option = {
		icon = "rbxgameasset://Images/jalapeno",
		name = "jalapeno",
		description = "walk and jump 1.25x but health is 25",
	},
	effect = function(rig)
		local humanoid = rig.Humanoid
		humanoid.MaxHealth = 25
		humanoid.Health = humanoid.MaxHealth
		humanoid.JumpPower = 75
		humanoid.WalkSpeed = 24
	end,
}
return {
	Jalapeno = Jalapeno,
}
]]></string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="865">
          <Properties>
            <string name="Name">tabasco</string>
            <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.2.0
local Tabasco = {
	option = {
		icon = "rbxgameasset://Images/tabasco",
		name = "tabasco",
		description = "half health n' jump, high speed!",
	},
	effect = function(rig)
		local humanoid = rig.Humanoid
		humanoid.MaxHealth = 50
		humanoid.Health = humanoid.MaxHealth
		humanoid.JumpPower = 25
		humanoid.WalkSpeed = 32
	end,
}
return {
	Tabasco = Tabasco,
}
]]></string>
          </Properties>
        </Item>
      </Item>
      <Item class="Script" referent="866">
        <Properties>
          <string name="Name">runtime</string>
          <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.2.0
local TS = require(game:GetService("ReplicatedStorage"):WaitForChild("rbxts_include"):WaitForChild("RuntimeLib"))
local _core = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@flamework", "core", "out")
local Flamework = _core.Flamework
local Modding = _core.Modding
local _log = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "log", "out")
local Log = _log.default
local Logger = _log.Logger
local Zircon = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "zircon", "out").default
Log.SetLogger(Logger:configure():WriteTo(Zircon.Log.Console()):Create())
-- Log.SetLogger(Logger.configure().WriteTo(Log.RobloxOutput()).Create());
Modding.registerDependency(function(ctor)
	return Log.ForContext(ctor)
end, "@rbxts/log:out/Logger@Logger")
Flamework._addPaths({ "ServerScriptService", "TS", "components" })
Flamework._addPaths({ "ServerScriptService", "TS", "services" })
Flamework._addPaths({ "ReplicatedStorage", "TS", "components" })
Flamework.ignite()
]]></string>
        </Properties>
      </Item>
      <Item class="Folder" referent="867">
        <Properties>
          <string name="Name">services</string>
        </Properties>
        <Item class="ModuleScript" referent="868">
          <Properties>
            <string name="Name">RoundManager</string>
            <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.2.0
local TS = require(game:GetService("ReplicatedStorage"):WaitForChild("rbxts_include"):WaitForChild("RuntimeLib"))
local Reflect = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@flamework", "core", "out").Reflect
local Service = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@flamework", "core", "out").Service
local _services = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "services")
local Players = _services.Players
local Workspace = _services.Workspace
local ServerScriptService = _services.ServerScriptService
local promiseR6 = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "promise-character").promiseR6
local Option = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "rust-classes", "out").Option
local Events = TS.import(script, game:GetService("ServerScriptService"), "TS", "network").Events
local gamemodes = TS.import(script, game:GetService("ServerScriptService"), "TS", "gamemodes").gamemodes
local peppers = TS.import(script, game:GetService("ServerScriptService"), "TS", "peppers").peppers
local store = TS.import(script, game:GetService("ServerScriptService"), "TS", "store").store
local selectVariant = TS.import(script, game:GetService("ServerScriptService"), "TS", "store", "lobbyVariants").selectVariant
-- i really want to split this up but cant because then itd be unnecessary abstraction
-- why is being a programmer so painful
local RoundManager
do
	RoundManager = setmetatable({}, {
		__tostring = function()
			return "RoundManager"
		end,
	})
	RoundManager.__index = RoundManager
	function RoundManager.new(...)
		local self = setmetatable({}, RoundManager)
		return self:constructor(...) or self
	end
	function RoundManager:constructor(logger)
		self.logger = logger
		self.winCondition = Option:none()
		self.pepperNames = {}
		self.gamemodeNames = {}
		self.canApplyPepper = false
		self.pepperApplied = {}
		self.variant = Option:none()
		self.lobby = Workspace.Lobby
		self.variantModel = Option:none()
		self.variants = ServerScriptService.Maps.lobby_variants
		self.automatedRound = Option:none()
		self.automating = false
		for key, _value in pairs(peppers) do
			table.insert(self.pepperNames, key)
		end
		for key, _value in pairs(gamemodes) do
			table.insert(self.gamemodeNames, key)
		end
	end
	function RoundManager:onStart()
		Events.confirmPepper:connect(function(player, pepperName)
			self.logger:Info("{player} attempted to apply {pepper}", player, pepperName)
			if not self.canApplyPepper then
				return nil
			end
			if not (peppers[pepperName] ~= nil) then
				return nil
			end
			local _pepperApplied = self.pepperApplied
			local _player = player
			if table.find(_pepperApplied, _player) ~= nil then
				return nil
			end
			local model = player.Character or (player.CharacterAdded:Wait())
			local _exp = promiseR6(model)
			local _arg0 = function(character)
				peppers[pepperName].effect(character)
				local _pepperApplied_1 = self.pepperApplied
				local _player_1 = player
				table.insert(_pepperApplied_1, _player_1)
			end
			_exp:andThen(_arg0)
		end)
		-- HACKY AND TERRIBLE CODE AHEAD!!! BEWARE!!
		-- wont revise because im lazy
		store:subscribe(selectVariant, function(variant)
			if variant:isNone() then
				self.logger:Info("load the lobby!!")
				if self.variantModel:isSome() then
					self.variantModel:unwrap():Destroy()
					self.variantModel = Option:none()
				end
				self.lobby.Parent = Workspace
				return nil
			end
			local map = self.variants:FindFirstChild(variant:unwrap())
			if not map then
				self.logger:Warn("for some sick and twisted reason a registered variant wasnt in the folder, wont load, cursed variant was " .. variant:unwrap())
				return nil
			end
			local clone = map:Clone()
			self.variantModel = Option:some(clone)
			clone.Parent = Workspace
			self.lobby.Parent = nil
			self.logger:Info("loaded variant {variant}!!!!", variant:unwrap())
		end)
		self:BeginAutomation()
	end
	function RoundManager:BeginAutomation()
		self.logger:Info("starting round automation")
		self.automating = true
		while self.automating do
			repeat
				do
					task.wait(5)
				end
			until not (#Players:GetPlayers() < 2)
			-- dunno if cancelling this will exactly work... but cant live life without risk
			local _exp = TS.Promise.new(function(resolve, _reject, onCancel)
				onCancel(function()
					self.canApplyPepper = false
					Events.cancelPepperPrompt:broadcast()
					self:CancelGamemode()
				end)
				store.setAllSurvivors()
				self:PepperPrompt()
				resolve(nil)
			end):andThenCall(TS.Promise.delay, 5):andThenCall(function()
				return self:RandomGamemode()
			end)
			local _arg0 = function(survivors)
				return TS.Promise.new(function(resolve)
					return resolve(survivors)
				end)
			end
			local round = _exp:andThen(_arg0):catch(function(reason)
				self.logger:Warn("round errored with reason {reason}", reason)
			end)
			--   ^^^^^^^^^^^^^^^^^^^^
			-- need a stupid `as` statement because APPPAARREENNTTTLYYY the fucking compiler wont stop fucking whining
			-- TS compiler is so annoying sometimes
			self.automatedRound = Option:some(round)
			round:await()
		end
	end
	function RoundManager:CancelAutomation()
		self.logger:Info("cancelling automation")
		self.automating = false
		if self.automatedRound:isSome() then
			self.automatedRound:unwrap():cancel()
			self.automatedRound = Option:none()
		end
	end
	function RoundManager:StopGamemode()
		store.clearSurvivors()
		self.winCondition = Option:none()
		store.setDefaultLobby()
		local _exp = Players:GetPlayers()
		local _arg0 = function(player)
			if not player.Character then
				return nil
			end
			player:LoadCharacter()
		end
		for _k, _v in _exp do
			_arg0(_v, _k - 1, _exp)
		end
	end
	function RoundManager:RunGamemode(gamemode)
		if not (gamemodes[gamemode] ~= nil) then
			self.logger:Error("input gamemode is not valid! use snake_case!")
			return {}
		end
		if self.winCondition:isSome() then
			self.logger:Error("a gamemode is already running!")
			return {}
		end
		self.logger:Info("Testing started!")
		local condition = gamemodes[gamemode]()
		self.winCondition = Option:some(condition)
		self.logger:Info("Currently running {gamemode} mode", gamemode)
		Events.announce:broadcast("gamemode is " .. (gamemode .. "!"))
		local winnersPromise = self.winCondition:unwrap()
		winnersPromise:catch(function(err)
			return self.logger:Error("Gamemode caught error: {error}", err)
		end)
		local winners = winnersPromise:expect()
		self:StopGamemode()
		self.logger:Info("Finished testing! The winners are {winners}", winners)
		return if winners then winners else {}
	end
	function RoundManager:CancelGamemode()
		if self.winCondition:isSome() then
			local winnersPromise = self.winCondition:unwrap()
			winnersPromise:cancel()
			self:StopGamemode()
			self.logger:Info("Ended gamemode and cleared survivors!")
		end
	end
	function RoundManager:RandomGamemode()
		local randomGamemode = function()
			return self.gamemodeNames[math.random(0, #self.gamemodeNames - 1) + 1]
		end
		return self:RunGamemode(randomGamemode())
	end
	function RoundManager:ApplyPepper(player, pepper)
		if not (peppers[pepper] ~= nil) then
			self.logger:Error("input pepper is not valid! use snake_case!")
			return nil
		end
		local definition = peppers[pepper]
		local model = player.Character or (player.CharacterAdded:Wait())
		self.logger:Info("Applying pepper effect")
		local _exp = promiseR6(model)
		local _arg0 = function(character)
			definition.effect(character)
		end
		_exp:andThen(_arg0)
	end
	function RoundManager:PepperPrompt()
		table.clear(self.pepperApplied)
		-- oh my god lord forgive me for this heresy
		-- APPARENTLY when it compiles it adds 1 so I have to negate the random params :(
		local randomPepper = function()
			return peppers[self.pepperNames[math.random(0, #self.pepperNames - 1) + 1]]
		end
		self.canApplyPepper = true
		-- this hurts me more than it hurts you
		Events.pepperPrompt:broadcast({ randomPepper().option, randomPepper().option, randomPepper().option })
		task.wait(5)
		self.canApplyPepper = false
		Events.cancelPepperPrompt:broadcast()
	end
	function RoundManager:SetVariant()
	end
	function RoundManager:SetRandomVariant()
	end
	function RoundManager:SetDefaultVariant()
	end
end
--(Flamework) RoundManager metadata
Reflect.defineMetadata(RoundManager, "identifier", "server/services/RoundManager@RoundManager")
Reflect.defineMetadata(RoundManager, "flamework:parameters", { "@rbxts/log:out/Logger@Logger" })
Reflect.defineMetadata(RoundManager, "flamework:implements", { "$:flamework@OnStart" })
Reflect.decorate(RoundManager, "$:flamework@Service", Service, {})
return {
	RoundManager = RoundManager,
}
]]></string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="869">
          <Properties>
            <string name="Name">ZirconProvider</string>
            <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.2.0
local TS = require(game:GetService("ReplicatedStorage"):WaitForChild("rbxts_include"):WaitForChild("RuntimeLib"))
local Reflect = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@flamework", "core", "out").Reflect
local Service = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@flamework", "core", "out").Service
local _zircon = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "zircon", "out")
local ZirconConfigurationBuilder = _zircon.ZirconConfigurationBuilder
local ZirconFunctionBuilder = _zircon.ZirconFunctionBuilder
local ZirconServer = _zircon.ZirconServer
local Events = TS.import(script, game:GetService("ServerScriptService"), "TS", "network").Events
local store = TS.import(script, game:GetService("ServerScriptService"), "TS", "store").store
local ZirconProvider
do
	ZirconProvider = setmetatable({}, {
		__tostring = function()
			return "ZirconProvider"
		end,
	})
	ZirconProvider.__index = ZirconProvider
	function ZirconProvider.new(...)
		local self = setmetatable({}, ZirconProvider)
		return self:constructor(...) or self
	end
	function ZirconProvider:constructor(logger, roundManager)
		self.logger = logger
		self.roundManager = roundManager
		self.TestGamemode = ZirconFunctionBuilder.new("test_gamemode"):AddArgument("string"):Bind(function(_context, mode)
			self.roundManager:RunGamemode(mode)
		end)
		self.CancelGamemode = ZirconFunctionBuilder.new("cancel_gamemode"):Bind(function(_context)
			return self.roundManager:CancelGamemode()
		end)
		self.RandomGamemode = ZirconFunctionBuilder.new("random_gamemode"):Bind(function(_context)
			self.roundManager:RandomGamemode()
		end)
		self.Announce = ZirconFunctionBuilder.new("announce"):AddArgument("string"):Bind(function(_context, message)
			return Events.announce:broadcast(message)
		end)
		self.TestPepper = ZirconFunctionBuilder.new("test_pepper"):AddArgument("string"):Bind(function(context, pepper)
			return self.roundManager:ApplyPepper(context:GetExecutor(), pepper)
		end)
		self.PepperPrompt = ZirconFunctionBuilder.new("pepper_prompt"):Bind(function(_context)
			return self.roundManager:PepperPrompt()
		end)
		self.AddSurvivor = ZirconFunctionBuilder.new("add_survivor"):AddArgument("player"):Bind(function(_context, player)
			store.addSurvivor(player)
		end)
		self.RemoveSurvivor = ZirconFunctionBuilder.new("remove_survivor"):AddArgument("player"):Bind(function(_context, player)
			store.removeSurvivor(player)
		end)
		self.ClearSurvivors = ZirconFunctionBuilder.new("clear_survivors"):Bind(function(_context)
			store.clearSurvivors()
		end)
		self.ListSurvivors = ZirconFunctionBuilder.new("list_survivors"):Bind(function(_context)
			self.logger:Info("survivors: {survivors}", store:getState().survivorsSlice.survivors:asPtr())
		end)
		self.SetAllSurvivors = ZirconFunctionBuilder.new("set_all_survivors"):Bind(function(_context)
			store.setAllSurvivors()
		end)
		self.BeginAutomation = ZirconFunctionBuilder.new("begin_automation"):Bind(function(_context)
			self.roundManager:BeginAutomation()
		end)
		self.CancelAutomation = ZirconFunctionBuilder.new("cancel_automation"):Bind(function(_context)
			self.roundManager:CancelAutomation()
		end)
	end
	function ZirconProvider:onInit()
		ZirconServer.Registry.Init(ZirconConfigurationBuilder:default():CreateGroup(254, "admin", function(group)
			return group:BindToUserIds({ 5199512481, 543918313, 3814464357 })
		end):AddFunction(self.TestGamemode, { "admin" }):AddFunction(self.CancelGamemode, { "admin" }):AddFunction(self.RandomGamemode, { "admin" }):AddFunction(self.Announce, { "admin" }):AddFunction(self.TestPepper, { "admin" }):AddFunction(self.PepperPrompt, { "admin" }):AddFunction(self.AddSurvivor, { "admin" }):AddFunction(self.RemoveSurvivor, { "admin" }):AddFunction(self.ClearSurvivors, { "admin" }):AddFunction(self.ListSurvivors, { "admin" }):AddFunction(self.SetAllSurvivors, { "admin" }):AddFunction(self.BeginAutomation, { "admin" }):AddFunction(self.CancelAutomation, { "admin" }):Build())
	end
end
--(Flamework) ZirconProvider metadata
Reflect.defineMetadata(ZirconProvider, "identifier", "server/services/ZirconProvider@ZirconProvider")
Reflect.defineMetadata(ZirconProvider, "flamework:parameters", { "@rbxts/log:out/Logger@Logger", "server/services/RoundManager@RoundManager" })
Reflect.defineMetadata(ZirconProvider, "flamework:implements", { "$:flamework@OnInit" })
Reflect.decorate(ZirconProvider, "$:flamework@Service", Service, {})
return {
	ZirconProvider = ZirconProvider,
}
]]></string>
          </Properties>
        </Item>
      </Item>
      <Item class="ModuleScript" referent="870">
        <Properties>
          <string name="Name">store</string>
          <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.2.0
local TS = require(game:GetService("ReplicatedStorage"):WaitForChild("rbxts_include"):WaitForChild("RuntimeLib"))
local combineProducers = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "reflex", "src").combineProducers
local survivorsSlice = TS.import(script, game:GetService("ServerScriptService"), "TS", "store", "survivors").survivorsSlice
local lobbyVariantsSlice = TS.import(script, game:GetService("ServerScriptService"), "TS", "store", "lobbyVariants").lobbyVariantsSlice
local store = combineProducers({
	survivorsSlice = survivorsSlice,
	lobbyVariantsSlice = lobbyVariantsSlice,
})
return {
	store = store,
}
]]></string>
        </Properties>
        <Item class="ModuleScript" referent="871">
          <Properties>
            <string name="Name">lobbyVariants</string>
            <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.2.0
local TS = require(game:GetService("ReplicatedStorage"):WaitForChild("rbxts_include"):WaitForChild("RuntimeLib"))
local ServerScriptService = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "services").ServerScriptService
local createProducer = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "reflex", "src").createProducer
local Option = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "rust-classes", "out").Option
local Log = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "log", "out").default
local variantNames = {}
local _exp = ServerScriptService.Maps.lobby_variants:GetChildren()
local _arg0 = function(map)
	local _name = map.Name
	table.insert(variantNames, _name)
end
for _k, _v in _exp do
	_arg0(_v, _k - 1, _exp)
end
local initialState = {
	variant = Option:none(),
}
local lobbyVariantsSlice = createProducer(initialState, {
	setLobby = function(state, variant)
		local _variant = variant
		if not (table.find(variantNames, _variant) ~= nil) then
			Log.Warn(variant .. " is not a lobby variant!")
			return state
		end
		local _object = {}
		for _k, _v in state do
			_object[_k] = _v
		end
		_object.variant = Option:some(variant)
		return _object
	end,
	setRandomLobby = function(state)
		local _object = {}
		for _k, _v in state do
			_object[_k] = _v
		end
		_object.variant = Option:some(variantNames[math.random(0, #variantNames - 1) + 1])
		return _object
	end,
	setDefaultLobby = function(state)
		local _object = {}
		for _k, _v in state do
			_object[_k] = _v
		end
		_object.variant = Option:none()
		return _object
	end,
})
local selectVariant = function(state)
	return state.lobbyVariantsSlice.variant
end
return {
	lobbyVariantsSlice = lobbyVariantsSlice,
	selectVariant = selectVariant,
}
]]></string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="872">
          <Properties>
            <string name="Name">survivors</string>
            <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.2.0
local TS = require(game:GetService("ReplicatedStorage"):WaitForChild("rbxts_include"):WaitForChild("RuntimeLib"))
local Players = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "services").Players
local createProducer = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "reflex", "src").createProducer
local Vec = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "rust-classes", "out").Vec
local initialState = {
	survivors = Vec:vec(),
}
local survivorsSlice = createProducer(initialState, {
	addSurvivor = function(state, player)
		local _object = {}
		for _k, _v in state do
			_object[_k] = _v
		end
		_object.survivors = state.survivors:push(player)
		return _object
	end,
	removeSurvivor = function(state, player)
		local _object = {}
		for _k, _v in state do
			_object[_k] = _v
		end
		_object.survivors = state.survivors:retain(function(current)
			return current ~= player
		end)
		return _object
	end,
	setSurvivors = function(state, players)
		local _object = {}
		for _k, _v in state do
			_object[_k] = _v
		end
		_object.survivors = Vec:vec(unpack(players))
		return _object
	end,
	setAllSurvivors = function(state)
		local _object = {}
		for _k, _v in state do
			_object[_k] = _v
		end
		_object.survivors = Vec:vec(unpack(Players:GetPlayers()))
		return _object
	end,
	clearSurvivors = function(state)
		local _object = {}
		for _k, _v in state do
			_object[_k] = _v
		end
		_object.survivors = Vec:vec()
		return _object
	end,
})
local selectSurvivors = function(state)
	return state.survivorsSlice.survivors
end
return {
	survivorsSlice = survivorsSlice,
	selectSurvivors = selectSurvivors,
}
]]></string>
          </Properties>
        </Item>
      </Item>
    </Item>
  </Item>
  <Item class="SoundService" referent="873">
    <Properties>
      <string name="Name">SoundService</string>
      <bool name="RespectFilteringEnabled">true</bool>
    </Properties>
  </Item>
  <Item class="StarterPlayer" referent="874">
    <Properties>
      <string name="Name">StarterPlayer</string>
    </Properties>
    <Item class="StarterPlayerScripts" referent="875">
      <Properties>
        <string name="Name">StarterPlayerScripts</string>
      </Properties>
      <Item class="Folder" referent="876">
        <Properties>
          <string name="Name">TS</string>
        </Properties>
        <Item class="Folder" referent="877">
          <Properties>
            <string name="Name">components</string>
          </Properties>
        </Item>
        <Item class="Folder" referent="878">
          <Properties>
            <string name="Name">controllers</string>
          </Properties>
          <Item class="ModuleScript" referent="879">
            <Properties>
              <string name="Name">UI</string>
              <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.2.0
local TS = require(game:GetService("ReplicatedStorage"):WaitForChild("rbxts_include"):WaitForChild("RuntimeLib"))
local Reflect = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@flamework", "core", "out").Reflect
local Controller = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@flamework", "core", "out").Controller
local _react_roblox = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "ReactRoblox")
local createPortal = _react_roblox.createPortal
local createRoot = _react_roblox.createRoot
local _roact = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "RoactTS")
local Roact = _roact
local StrictMode = _roact.StrictMode
local Players = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "services").Players
local Announcements = TS.import(script, script.Parent.Parent, "ui", "components", "announcements").Announcements
local PepperPrompt = TS.import(script, script.Parent.Parent, "ui", "components", "pepper_prompt").PepperPrompt
local UI
do
	UI = setmetatable({}, {
		__tostring = function()
			return "UI"
		end,
	})
	UI.__index = UI
	function UI.new(...)
		local self = setmetatable({}, UI)
		return self:constructor(...) or self
	end
	function UI:constructor()
	end
	function UI:onStart()
		local root = createRoot(Instance.new("Folder"))
		local target = Players.LocalPlayer:WaitForChild("PlayerGui")
		root:render(createPortal(Roact.createElement(StrictMode, {}, {
			Roact.createElement(Announcements),
			Roact.createElement(PepperPrompt),
		}), target))
	end
end
--(Flamework) UI metadata
Reflect.defineMetadata(UI, "identifier", "client/controllers/UI@UI")
Reflect.defineMetadata(UI, "flamework:implements", { "$:flamework@OnStart" })
Reflect.decorate(UI, "$:flamework@Controller", Controller, {})
return {
	UI = UI,
}
]]></string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="880">
            <Properties>
              <string name="Name">ZirconProvider</string>
              <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.2.0
local TS = require(game:GetService("ReplicatedStorage"):WaitForChild("rbxts_include"):WaitForChild("RuntimeLib"))
local Reflect = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@flamework", "core", "out").Reflect
local Controller = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@flamework", "core", "out").Controller
local ZirconClient = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "zircon", "out").ZirconClient
local ZirconProvider
do
	ZirconProvider = setmetatable({}, {
		__tostring = function()
			return "ZirconProvider"
		end,
	})
	ZirconProvider.__index = ZirconProvider
	function ZirconProvider.new(...)
		local self = setmetatable({}, ZirconProvider)
		return self:constructor(...) or self
	end
	function ZirconProvider:constructor(logger)
		self.logger = logger
	end
	function ZirconProvider:onInit()
		ZirconClient.Init({
			Keys = { Enum.KeyCode.Backquote },
		})
	end
end
--(Flamework) ZirconProvider metadata
Reflect.defineMetadata(ZirconProvider, "identifier", "client/controllers/ZirconProvider@ZirconProvider")
Reflect.defineMetadata(ZirconProvider, "flamework:parameters", { "@rbxts/log:out/Logger@Logger" })
Reflect.defineMetadata(ZirconProvider, "flamework:implements", { "$:flamework@OnInit" })
Reflect.decorate(ZirconProvider, "$:flamework@Controller", Controller, {})
return {
	ZirconProvider = ZirconProvider,
}
]]></string>
            </Properties>
          </Item>
        </Item>
        <Item class="ModuleScript" referent="881">
          <Properties>
            <string name="Name">network</string>
            <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.2.0
local TS = require(game:GetService("ReplicatedStorage"):WaitForChild("rbxts_include"):WaitForChild("RuntimeLib"))
local _network = TS.import(script, game:GetService("ReplicatedStorage"), "TS", "network")
local GlobalEvents = _network.GlobalEvents
local GlobalFunctions = _network.GlobalFunctions
local Events = GlobalEvents.client
local Functions = GlobalFunctions.client
return {
	Events = Events,
	Functions = Functions,
}
]]></string>
          </Properties>
        </Item>
        <Item class="LocalScript" referent="882">
          <Properties>
            <string name="Name">runtime</string>
            <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.2.0
local TS = require(game:GetService("ReplicatedStorage"):WaitForChild("rbxts_include"):WaitForChild("RuntimeLib"))
local _core = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@flamework", "core", "out")
local Flamework = _core.Flamework
local Modding = _core.Modding
local _log = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "log", "out")
local Log = _log.default
local Logger = _log.Logger
local Zircon = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "zircon", "out").default
Log.SetLogger(Logger:configure():WriteTo(Zircon.Log.Console()):Create())
Modding.registerDependency(function(ctor)
	return Log.ForContext(ctor)
end, "@rbxts/log:out/Logger@Logger")
Flamework._addPaths({ "StarterPlayer", "StarterPlayerScripts", "TS", "components" })
Flamework._addPaths({ "StarterPlayer", "StarterPlayerScripts", "TS", "controllers" })
Flamework._addPaths({ "ReplicatedStorage", "TS", "components" })
Flamework.ignite()
]]></string>
          </Properties>
        </Item>
        <Item class="Folder" referent="883">
          <Properties>
            <string name="Name">ui</string>
          </Properties>
          <Item class="Folder" referent="884">
            <Properties>
              <string name="Name">components</string>
            </Properties>
            <Item class="ModuleScript" referent="885">
              <Properties>
                <string name="Name">announcements</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.2.0
local TS = require(game:GetService("ReplicatedStorage"):WaitForChild("rbxts_include"):WaitForChild("RuntimeLib"))
local _roact = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "RoactTS")
local Roact = _roact
local useState = _roact.useState
local Announcement = TS.import(script, script, "announcement").Announcement
local Events = TS.import(script, script.Parent.Parent.Parent, "network").Events
local useEventListener = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "pretty-react-hooks").useEventListener
local function Announcements()
	local text, setText = useState("")
	local enabled, setEnabled = useState(false)
	-- disgusting hack, not an elegant solution at all.
	-- here because I want to refresh the 5 second disable deadline when new text abruptly comes up
	-- this is the simplest solution I could find though, so it stays
	local disablePromise, setPromise = useState()
	useEventListener(Events.announce, function(text)
		setText(text)
		setEnabled(true)
		local _result = disablePromise
		if _result ~= nil then
			_result:cancel()
		end
		local _exp = TS.Promise.delay(5)
		local _arg0 = function()
			return setEnabled(false)
		end
		setPromise(_exp:andThen(_arg0))
	end)
	return Roact.createElement("ScreenGui", {
		IgnoreGuiInset = true,
		ResetOnSpawn = false,
	}, {
		Roact.createElement(Announcement, {
			text = text,
			enabled = enabled,
		}),
	})
end
return {
	Announcements = Announcements,
}
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="886">
                <Properties>
                  <string name="Name">announcement</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.2.0
local TS = require(game:GetService("ReplicatedStorage"):WaitForChild("rbxts_include"):WaitForChild("RuntimeLib"))
local _roact = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "RoactTS")
local Roact = _roact
local useEffect = _roact.useEffect
local colorscheme = TS.import(script, script.Parent.Parent.Parent, "utils", "colorscheme")
local useMotion = TS.import(script, script.Parent.Parent.Parent, "hooks", "use-motion").useMotion
local springs = TS.import(script, script.Parent.Parent.Parent, "utils", "springs").springs
local isBinding = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "pretty-react-hooks").isBinding
local function Announcement(_param)
	local text = _param.text
	if text == nil then
		text = "demo"
	end
	local enabled = _param.enabled
	if enabled == nil then
		enabled = true
	end
	local position, motion = useMotion(0)
	useEffect(function()
		local appear = if isBinding(enabled) then enabled:getValue() else enabled
		if appear then
			motion:spring(1, springs.gentle)
		else
			motion:spring(0, springs.responsive)
		end
	end, { enabled })
	return Roact.createElement("TextLabel", {
		TextScaled = true,
		AnchorPoint = Vector2.xAxis * 0.5,
		Position = position:map(function(alpha)
			return UDim2.fromScale(0.5, -0.1):Lerp(UDim2.fromScale(0.5, 0.02), alpha)
		end),
		Transparency = position:map(function(alpha)
			return 1 - alpha
		end),
		Size = position:map(function(alpha)
			return UDim2.fromScale(0.1, 0.1):Lerp(UDim2.fromScale(0.2, 0.2), alpha)
		end),
		Font = colorscheme.font,
		BackgroundColor3 = colorscheme.background,
		TextColor3 = colorscheme.foreground,
		Text = if isBinding(text) then text:map(tostring) else text,
	}, {
		Roact.createElement("UIStroke", {
			key = "stroke",
			Transparency = position:map(function(alpha)
				return 1 - alpha
			end),
			ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
			Color = colorscheme.selection_background,
			Thickness = 3,
		}),
		Roact.createElement("UIAspectRatioConstraint", {
			key = "aspectratio",
			AspectRatio = 4,
		}),
	})
end
return {
	Announcement = Announcement,
}
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="887">
              <Properties>
                <string name="Name">pepper_prompt</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.2.0
local TS = require(game:GetService("ReplicatedStorage"):WaitForChild("rbxts_include"):WaitForChild("RuntimeLib"))
local _roact = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "RoactTS")
local Roact = _roact
local useState = _roact.useState
local Events = TS.import(script, script.Parent.Parent.Parent, "network").Events
local Cards = TS.import(script, script, "cards").Cards
local useEventListener = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "pretty-react-hooks").useEventListener
local PromptContext = TS.import(script, script, "promptContext").PromptContext
local function PepperPrompt()
	local visible, setVisible = useState(false)
	local enabled, setEnabled = useState(false)
	local cards, setCards = useState({ {
		icon = "",
		name = "first",
		description = "you didnt set this!",
	}, {
		icon = "",
		name = "second",
		description = "this either!",
	}, {
		icon = "",
		name = "third",
		description = "SET IT NOW!!!!",
	} })
	useEventListener(Events.pepperPrompt, function(passed_cards)
		setVisible(true)
		setEnabled(true)
		setCards(passed_cards)
	end)
	useEventListener(Events.cancelPepperPrompt, function()
		setEnabled(false)
		-- wait for fade out animation
		task.wait(1)
		setVisible(false)
		task.wait(0.15)
		setEnabled(false)
	end)
	local _attributes = {
		value = {
			enabled = enabled,
			pressedCallback = function(option)
				setEnabled(false)
				-- wait for fade out animation
				task.delay(1, function()
					return setVisible(false)
				end)
				Events.confirmPepper:fire(option.name)
			end,
		},
	}
	local _children = {}
	local _length = #_children
	local _child = visible and Roact.createElement("ScreenGui", {
		IgnoreGuiInset = true,
		ResetOnSpawn = false,
	}, {
		Roact.createElement(Cards, {
			cards = cards,
		}),
	})
	if _child then
		_children[_length + 1] = _child
	end
	return Roact.createElement(PromptContext.Provider, _attributes, _children)
end
return {
	PepperPrompt = PepperPrompt,
}
]]></string>
              </Properties>
              <Item class="ModuleScript" referent="888">
                <Properties>
                  <string name="Name">cards</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.2.0
local TS = require(game:GetService("ReplicatedStorage"):WaitForChild("rbxts_include"):WaitForChild("RuntimeLib"))
local useAsyncEffect = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "pretty-react-hooks").useAsyncEffect
local _roact = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "RoactTS")
local Roact = _roact
local useContext = _roact.useContext
local useState = _roact.useState
local useMotion = TS.import(script, script.Parent.Parent.Parent, "hooks", "use-motion").useMotion
local colorscheme = TS.import(script, script.Parent.Parent.Parent, "utils", "colorscheme")
local springs = TS.import(script, script.Parent.Parent.Parent, "utils", "springs").springs
local PromptContext = TS.import(script, script.Parent, "promptContext").PromptContext
local function Card(_param)
	local info = _param.info
	if info == nil then
		info = {
			icon = "rbxgameasset://Images/pepper",
			name = "none",
			description = "you didnt set anything",
		}
	end
	local angle_deg = _param.angle_deg
	if angle_deg == nil then
		angle_deg = 0
	end
	local index = _param.index
	if index == nil then
		index = 0
	end
	local promptContext = useContext(PromptContext)
	local enabled = promptContext.enabled
	local pressedCallback = promptContext.pressedCallback
	-- moving another cycle cuz we need the cos to start at 0
	local xposition = 0.5 + math.cos(math.rad(angle_deg + 90)) * 0.7
	-- using abs to keep the sign the same
	local yposition = 0.8 + math.abs(math.sin(math.rad(angle_deg)) * 0.2)
	local zindex, setZindex = useState(index)
	local position, positionMotion = useMotion(0)
	local size, sizeMotion = useMotion(0)
	local transparency, transparencyMotion = useMotion(1)
	useAsyncEffect(TS.async(function()
		TS.await(TS.Promise.delay(index * 0.05))
		transparencyMotion:spring(if enabled then 0 else 1)
	end), { enabled })
	return Roact.createElement("ImageButton", {
		AnchorPoint = Vector2.new(0.5, 1),
		AutoButtonColor = false,
		Image = "rbxgameasset://Images/card_background",
		BackgroundTransparency = transparency,
		ImageTransparency = transparency,
		Position = position:map(function(y)
			return UDim2.fromScale(xposition, yposition - y * 0.1)
		end),
		Size = size:map(function(alpha)
			return UDim2.fromScale(0.5 - 0.05 * alpha, 0.5 - 0.05 * alpha)
		end),
		Rotation = -angle_deg,
		ZIndex = zindex,
		[Roact.Event.MouseEnter] = function()
			positionMotion:spring(1, springs.responsive)
			setZindex(10)
		end,
		[Roact.Event.MouseLeave] = function()
			sizeMotion:spring(0, springs.bubbly)
			positionMotion:spring(0, springs.responsive)
			setZindex(index)
		end,
		[Roact.Event.MouseButton1Down] = function()
			sizeMotion:impulse(0.01)
			pressedCallback(info)
		end,
	}, {
		Roact.createElement("UIAspectRatioConstraint", {
			key = "aspectratio",
			AspectRatio = 0.7,
		}),
		Roact.createElement("UICorner", {
			key = "corner",
			CornerRadius = UDim.new(0, 15),
		}),
		Roact.createElement("ImageLabel", {
			key = "icon",
			AnchorPoint = Vector2.xAxis * 0.5,
			Position = UDim2.fromScale(0.5, 0.075),
			Size = UDim2.fromScale(0.8, 0.8),
			BorderSizePixel = 0,
			Image = info.icon,
			BackgroundColor3 = colorscheme.base01,
			BackgroundTransparency = transparency,
			ImageTransparency = transparency,
			ZIndex = zindex,
		}, {
			Roact.createElement("UIAspectRatioConstraint", {
				key = "aspectratio",
			}),
		}),
		Roact.createElement("TextLabel", {
			key = "title",
			AnchorPoint = Vector2.xAxis * 0.5,
			Position = UDim2.fromScale(0.5, 0.7),
			Size = UDim2.fromScale(0.8, 0.1),
			TextScaled = true,
			BorderSizePixel = 0,
			BackgroundColor3 = colorscheme.base01,
			TextColor3 = colorscheme.base08,
			BackgroundTransparency = transparency,
			TextTransparency = transparency,
			Font = colorscheme.font,
			Text = info.name,
			ZIndex = zindex,
		}),
		Roact.createElement("TextLabel", {
			key = "description",
			AnchorPoint = Vector2.xAxis * 0.5,
			Position = UDim2.fromScale(0.5, 0.8),
			Size = UDim2.fromScale(0.8, 0.15),
			TextScaled = true,
			BorderSizePixel = 0,
			BackgroundColor3 = colorscheme.base01,
			TextColor3 = colorscheme.base08,
			BackgroundTransparency = transparency,
			TextTransparency = transparency,
			Font = colorscheme.font,
			Text = info.description,
			ZIndex = zindex,
		}),
	})
end
local function Cards(_param)
	local cards = _param.cards
	if cards == nil then
		cards = { {
			icon = "rbxgameasset://Images/pepper",
			name = "first",
			description = "you didnt set this!",
		}, {
			icon = "rbxgameasset://Images/pepper",
			name = "second",
			description = "this either!",
		}, {
			icon = "rbxgameasset://Images/pepper",
			name = "third",
			description = "SET IT NOW!!!!",
		} }
	end
	local _arg0 = function(info, index)
		return Roact.createElement(Card, {
			key = "card" .. tostring(index),
			info = info,
			angle_deg = 15 - (15 * index),
			index = index,
		})
	end
	-- ▼ ReadonlyArray.map ▼
	local _newValue = table.create(#cards)
	for _k, _v in cards do
		_newValue[_k] = _arg0(_v, _k - 1, cards)
	end
	-- ▲ ReadonlyArray.map ▲
	local _children = {}
	local _length = #_children
	for _k, _v in _newValue do
		_children[_length + _k] = _v
	end
	return Roact.createFragment(_children)
end
return {
	Cards = Cards,
}
]]></string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="889">
                <Properties>
                  <string name="Name">promptContext</string>
                  <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.2.0
local TS = require(game:GetService("ReplicatedStorage"):WaitForChild("rbxts_include"):WaitForChild("RuntimeLib"))
local createContext = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "RoactTS").createContext
local PromptContext = createContext({})
return {
	PromptContext = PromptContext,
}
]]></string>
                </Properties>
              </Item>
            </Item>
          </Item>
          <Item class="Folder" referent="890">
            <Properties>
              <string name="Name">hooks</string>
            </Properties>
            <Item class="ModuleScript" referent="891">
              <Properties>
                <string name="Name">use-array</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.2.0
local TS = require(game:GetService("ReplicatedStorage"):WaitForChild("rbxts_include"):WaitForChild("RuntimeLib"))
local useState = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "RoactTS").useState
-- needs extends defined bc old.filter wont stop whining about it
local function useArray(defaultValue)
	local array, setArray = useState(defaultValue)
	local push = function(element)
		return setArray(function(old)
			local _array = {}
			local _length = #_array
			local _oldLength = #old
			table.move(old, 1, _oldLength, _length + 1, _array)
			_length += _oldLength
			_array[_length + 1] = element
			return _array
		end)
	end
	local remove = function(index)
		return setArray(function(old)
			local _old = old
			local _arg0 = function(_, i)
				return i ~= index
			end
			-- ▼ ReadonlyArray.filter ▼
			local _newValue = {}
			local _length = 0
			for _k, _v in _old do
				if _arg0(_v, _k - 1, _old) == true then
					_length += 1
					_newValue[_length] = _v
				end
			end
			-- ▲ ReadonlyArray.filter ▲
			return _newValue
		end)
	end
	return {
		array = array,
		set = setArray,
		push = push,
		remove = remove,
	}
end
return {
	useArray = useArray,
}
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="892">
              <Properties>
                <string name="Name">use-motion</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.2.0
local TS = require(game:GetService("ReplicatedStorage"):WaitForChild("rbxts_include"):WaitForChild("RuntimeLib"))
-- all credit to: https://github.com/littensy/rbxts-react-example/blob/main/src/client/hooks/use-motion.ts
local createMotion = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "ripple").createMotion
local _roact = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "RoactTS")
local useBinding = _roact.useBinding
local useEffect = _roact.useEffect
local useMemo = _roact.useMemo
local function useMotion(goal)
	local motion = useMemo(function()
		return createMotion(goal, {
			start = true,
		})
	end, {})
	local binding, setValue = useBinding(motion:get())
	useEffect(function()
		local disconnect = motion:onStep(setValue)
		return function()
			disconnect()
			motion:destroy()
		end
	end, {})
	return binding, motion
end
return {
	useMotion = useMotion,
}
]]></string>
              </Properties>
            </Item>
          </Item>
          <Item class="Folder" referent="893">
            <Properties>
              <string name="Name">stories</string>
            </Properties>
            <Item class="ModuleScript" referent="894">
              <Properties>
                <string name="Name">announcements.story</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.2.0
local TS = require(game:GetService("ReplicatedStorage"):WaitForChild("rbxts_include"):WaitForChild("RuntimeLib"))
-- ALWAYS PUT DEV MODE BEFORE ANY IMPORTS!!!!!!
_G.__DEV__ = true
local createRoot = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "ReactRoblox").createRoot
local Roact = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "RoactTS")
local Announcement = TS.import(script, script.Parent.Parent, "components", "announcements", "announcement").Announcement
return function(target)
	local root = createRoot(target)
	root:render(Roact.createElement(Announcement, {
		text = "demo",
		enabled = true,
	}))
	return function()
		root:unmount()
	end
end
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="895">
              <Properties>
                <string name="Name">cards.story</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.2.0
local TS = require(game:GetService("ReplicatedStorage"):WaitForChild("rbxts_include"):WaitForChild("RuntimeLib"))
-- ALWAYS PUT DEV MODE BEFORE ANY IMPORTS!!!!!!
_G.__DEV__ = true
local createRoot = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "ReactRoblox").createRoot
local Roact = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "RoactTS")
local Cards = TS.import(script, script.Parent.Parent, "components", "pepper_prompt", "cards").Cards
local PromptContext = TS.import(script, script.Parent.Parent, "components", "pepper_prompt", "promptContext").PromptContext
return function(target)
	local root = createRoot(target)
	root:render(Roact.createElement(PromptContext.Provider, {
		value = {
			enabled = true,
			pressedCallback = function()
				return print("SHIT!")
			end,
		},
	}, {
		Roact.createElement(Cards, {
			key = "cards",
		}),
	}))
	return function()
		root:unmount()
	end
end
]]></string>
              </Properties>
            </Item>
          </Item>
          <Item class="Folder" referent="896">
            <Properties>
              <string name="Name">utils</string>
            </Properties>
            <Item class="ModuleScript" referent="897">
              <Properties>
                <string name="Name">colorscheme</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.2.0
local colors = {
	base00 = Color3.fromHex("#59251d"),
	base01 = Color3.fromHex("#722c21"),
	base02 = Color3.fromHex("#8c3b2e"),
	base03 = Color3.fromHex("#a44b3d"),
	base04 = Color3.fromHex("#b95c4e"),
	base05 = Color3.fromHex("#cb6e60"),
	base06 = Color3.fromHex("#db8274"),
	base07 = Color3.fromHex("#e89689"),
	base08 = Color3.fromHex("#f2aba1"),
	base09 = Color3.fromHex("#f2aba1"),
	base0A = Color3.fromHex("#e5d390"),
	base0B = Color3.fromHex("#a8d58a"),
	base0C = Color3.fromHex("#8bddaf"),
	base0D = Color3.fromHex("#8dd3de"),
	base0E = Color3.fromHex("#acbefa"),
	base0F = Color3.fromHex("#d7a9f4"),
}
local _object = {}
for _k, _v in colors do
	_object[_k] = _v
end
_object.background = colors.base00
_object.lighter_background = colors.base01
_object.selection_background = colors.base02
_object.comment = colors.base03
_object.dark_foreground = colors.base04
_object.foreground = colors.base05
_object.light_foreground = colors.base06
_object.light_background = colors.base07
_object.red = colors.base08
_object.orange = colors.base09
_object.yellow = colors.base0A
_object.green = colors.base0B
_object.teal = colors.base0C
_object.blue = colors.base0D
_object.indigo = colors.base0E
_object.violet = colors.base0F
_object.font = Enum.Font.GothamMedium
return _object
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="898">
              <Properties>
                <string name="Name">springs</string>
                <string name="Source"><![CDATA[-- Compiled with roblox-ts v2.2.0
local TS = require(game:GetService("ReplicatedStorage"):WaitForChild("rbxts_include"):WaitForChild("RuntimeLib"))
local config = TS.import(script, game:GetService("ReplicatedStorage"), "rbxts_include", "node_modules", "@rbxts", "ripple").config
local _object = {}
for _k, _v in config.spring do
	_object[_k] = _v
end
_object.bubbly = {
	tension = 300,
	friction = 20,
	mass = 1.2,
}
_object.responsive = {
	tension = 600,
	friction = 34,
	mass = 0.7,
}
local springs = _object
return {
	springs = springs,
}
]]></string>
              </Properties>
            </Item>
          </Item>
        </Item>
      </Item>
    </Item>
  </Item>
  <Item class="Workspace" referent="899">
    <Properties>
      <string name="Name">Workspace</string>
      <bool name="FilteringEnabled">true</bool>
    </Properties>
    <Item class="Model" referent="900">
      <Properties>
        <string name="Name">Borders</string>
        <BinaryString name="AttributesSerialize"></BinaryString>
        <bool name="DefinesCapabilities">false</bool>
        <token name="LevelOfDetail">0</token>
        <CoordinateFrame name="ModelMeshCFrame">
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <R00>1</R00>
          <R01>0</R01>
          <R02>0</R02>
          <R10>0</R10>
          <R11>1</R11>
          <R12>0</R12>
          <R20>0</R20>
          <R21>0</R21>
          <R22>1</R22>
        </CoordinateFrame>
        <SharedString name="ModelMeshData">rxNJufX5oaagQE3qNtzJSQ==</SharedString>
        <Vector3 name="ModelMeshSize">
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
        </Vector3>
        <token name="ModelStreamingMode">0</token>
        <bool name="NeedsPivotMigration">false</bool>
        <Ref name="PrimaryPart">null</Ref>
        <float name="ScaleFactor">1</float>
        <int64 name="SourceAssetId">-1</int64>
        <BinaryString name="Tags"></BinaryString>
        <OptionalCoordinateFrame name="WorldPivotData">
          <CFrame>
            <X>-0.00000013113402</X>
            <Y>75.500015</Y>
            <Z>0</Z>
            <R00>-0.00000004371139</R00>
            <R01>0</R01>
            <R02>1</R02>
            <R10>0</R10>
            <R11>0.99999994</R11>
            <R12>0</R12>
            <R20>-1</R20>
            <R21>0</R21>
            <R22>-0.00000004371139</R22>
          </CFrame>
        </OptionalCoordinateFrame>
      </Properties>
      <Item class="Part" referent="901">
        <Properties>
          <string name="Name">border</string>
          <bool name="Anchored">true</bool>
          <BinaryString name="AttributesSerialize"></BinaryString>
          <float name="BackParamA">-0.5</float>
          <float name="BackParamB">0.5</float>
          <token name="BackSurface">0</token>
          <token name="BackSurfaceInput">0</token>
          <float name="BottomParamA">-0.5</float>
          <float name="BottomParamB">0.5</float>
          <token name="BottomSurface">0</token>
          <token name="BottomSurfaceInput">0</token>
          <CoordinateFrame name="CFrame">
            <X>-46.5</X>
            <Y>74</Y>
            <Z>0</Z>
            <R00>1</R00>
            <R01>0</R01>
            <R02>0</R02>
            <R10>0</R10>
            <R11>1</R11>
            <R12>0</R12>
            <R20>0</R20>
            <R21>0</R21>
            <R22>1</R22>
          </CoordinateFrame>
          <bool name="CanCollide">true</bool>
          <bool name="CanQuery">true</bool>
          <bool name="CanTouch">true</bool>
          <bool name="CastShadow">true</bool>
          <string name="CollisionGroup">Default</string>
          <int name="CollisionGroupId">0</int>
          <Color3uint8 name="Color3uint8">8836474</Color3uint8>
          <PhysicalProperties name="CustomPhysicalProperties">
            <CustomPhysics>false</CustomPhysics>
          </PhysicalProperties>
          <bool name="DefinesCapabilities">false</bool>
          <bool name="EnableFluidForces">true</bool>
          <token name="formFactorRaw">1</token>
          <float name="FrontParamA">-0.5</float>
          <float name="FrontParamB">0.5</float>
          <token name="FrontSurface">0</token>
          <token name="FrontSurfaceInput">0</token>
          <float name="LeftParamA">-0.5</float>
          <float name="LeftParamB">0.5</float>
          <token name="LeftSurface">0</token>
          <token name="LeftSurfaceInput">0</token>
          <bool name="Locked">false</bool>
          <bool name="Massless">false</bool>
          <token name="Material">272</token>
          <string name="MaterialVariantSerialized"></string>
          <CoordinateFrame name="PivotOffset">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
            <R00>1</R00>
            <R01>0</R01>
            <R02>0</R02>
            <R10>0</R10>
            <R11>1</R11>
            <R12>0</R12>
            <R20>0</R20>
            <R21>0</R21>
            <R22>1</R22>
          </CoordinateFrame>
          <float name="Reflectance">0</float>
          <float name="RightParamA">-0.5</float>
          <float name="RightParamB">0.5</float>
          <token name="RightSurface">0</token>
          <token name="RightSurfaceInput">0</token>
          <int name="RootPriority">0</int>
          <Vector3 name="RotVelocity">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
          </Vector3>
          <token name="shape">1</token>
          <Vector3 name="size">
            <X>3</X>
            <Y>150</Y>
            <Z>90</Z>
          </Vector3>
          <int64 name="SourceAssetId">-1</int64>
          <BinaryString name="Tags"></BinaryString>
          <float name="TopParamA">-0.5</float>
          <float name="TopParamB">0.5</float>
          <token name="TopSurface">0</token>
          <token name="TopSurfaceInput">0</token>
          <float name="Transparency">1</float>
          <Vector3 name="Velocity">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
          </Vector3>
        </Properties>
      </Item>
      <Item class="Part" referent="902">
        <Properties>
          <string name="Name">border</string>
          <bool name="Anchored">true</bool>
          <BinaryString name="AttributesSerialize"></BinaryString>
          <float name="BackParamA">-0.5</float>
          <float name="BackParamB">0.5</float>
          <token name="BackSurface">0</token>
          <token name="BackSurfaceInput">0</token>
          <float name="BottomParamA">-0.5</float>
          <float name="BottomParamB">0.5</float>
          <token name="BottomSurface">0</token>
          <token name="BottomSurfaceInput">0</token>
          <CoordinateFrame name="CFrame">
            <X>-0.0000020325795</X>
            <Y>74</Y>
            <Z>-46.5</Z>
            <R00>-0.00000004371139</R00>
            <R01>0</R01>
            <R02>1</R02>
            <R10>0</R10>
            <R11>0.99999994</R11>
            <R12>0</R12>
            <R20>-1</R20>
            <R21>0</R21>
            <R22>-0.00000004371139</R22>
          </CoordinateFrame>
          <bool name="CanCollide">true</bool>
          <bool name="CanQuery">true</bool>
          <bool name="CanTouch">true</bool>
          <bool name="CastShadow">true</bool>
          <string name="CollisionGroup">Default</string>
          <int name="CollisionGroupId">0</int>
          <Color3uint8 name="Color3uint8">8836474</Color3uint8>
          <PhysicalProperties name="CustomPhysicalProperties">
            <CustomPhysics>false</CustomPhysics>
          </PhysicalProperties>
          <bool name="DefinesCapabilities">false</bool>
          <bool name="EnableFluidForces">true</bool>
          <token name="formFactorRaw">1</token>
          <float name="FrontParamA">-0.5</float>
          <float name="FrontParamB">0.5</float>
          <token name="FrontSurface">0</token>
          <token name="FrontSurfaceInput">0</token>
          <float name="LeftParamA">-0.5</float>
          <float name="LeftParamB">0.5</float>
          <token name="LeftSurface">0</token>
          <token name="LeftSurfaceInput">0</token>
          <bool name="Locked">false</bool>
          <bool name="Massless">false</bool>
          <token name="Material">272</token>
          <string name="MaterialVariantSerialized"></string>
          <CoordinateFrame name="PivotOffset">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
            <R00>1</R00>
            <R01>0</R01>
            <R02>0</R02>
            <R10>0</R10>
            <R11>1</R11>
            <R12>0</R12>
            <R20>0</R20>
            <R21>0</R21>
            <R22>1</R22>
          </CoordinateFrame>
          <float name="Reflectance">0</float>
          <float name="RightParamA">-0.5</float>
          <float name="RightParamB">0.5</float>
          <token name="RightSurface">0</token>
          <token name="RightSurfaceInput">0</token>
          <int name="RootPriority">0</int>
          <Vector3 name="RotVelocity">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
          </Vector3>
          <token name="shape">1</token>
          <Vector3 name="size">
            <X>3</X>
            <Y>150</Y>
            <Z>90</Z>
          </Vector3>
          <int64 name="SourceAssetId">-1</int64>
          <BinaryString name="Tags"></BinaryString>
          <float name="TopParamA">-0.5</float>
          <float name="TopParamB">0.5</float>
          <token name="TopSurface">0</token>
          <token name="TopSurfaceInput">0</token>
          <float name="Transparency">1</float>
          <Vector3 name="Velocity">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
          </Vector3>
        </Properties>
      </Item>
      <Item class="Part" referent="903">
        <Properties>
          <string name="Name">border</string>
          <bool name="Anchored">true</bool>
          <BinaryString name="AttributesSerialize"></BinaryString>
          <float name="BackParamA">-0.5</float>
          <float name="BackParamB">0.5</float>
          <token name="BackSurface">0</token>
          <token name="BackSurfaceInput">0</token>
          <float name="BottomParamA">-0.5</float>
          <float name="BottomParamB">0.5</float>
          <token name="BottomSurface">0</token>
          <token name="BottomSurfaceInput">0</token>
          <CoordinateFrame name="CFrame">
            <X>0.0000020325795</X>
            <Y>74</Y>
            <Z>46.5</Z>
            <R00>-0.00000004371139</R00>
            <R01>0</R01>
            <R02>1</R02>
            <R10>0</R10>
            <R11>0.99999994</R11>
            <R12>0</R12>
            <R20>-1</R20>
            <R21>0</R21>
            <R22>-0.00000004371139</R22>
          </CoordinateFrame>
          <bool name="CanCollide">true</bool>
          <bool name="CanQuery">true</bool>
          <bool name="CanTouch">true</bool>
          <bool name="CastShadow">true</bool>
          <string name="CollisionGroup">Default</string>
          <int name="CollisionGroupId">0</int>
          <Color3uint8 name="Color3uint8">8836474</Color3uint8>
          <PhysicalProperties name="CustomPhysicalProperties">
            <CustomPhysics>false</CustomPhysics>
          </PhysicalProperties>
          <bool name="DefinesCapabilities">false</bool>
          <bool name="EnableFluidForces">true</bool>
          <token name="formFactorRaw">1</token>
          <float name="FrontParamA">-0.5</float>
          <float name="FrontParamB">0.5</float>
          <token name="FrontSurface">0</token>
          <token name="FrontSurfaceInput">0</token>
          <float name="LeftParamA">-0.5</float>
          <float name="LeftParamB">0.5</float>
          <token name="LeftSurface">0</token>
          <token name="LeftSurfaceInput">0</token>
          <bool name="Locked">false</bool>
          <bool name="Massless">false</bool>
          <token name="Material">272</token>
          <string name="MaterialVariantSerialized"></string>
          <CoordinateFrame name="PivotOffset">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
            <R00>1</R00>
            <R01>0</R01>
            <R02>0</R02>
            <R10>0</R10>
            <R11>1</R11>
            <R12>0</R12>
            <R20>0</R20>
            <R21>0</R21>
            <R22>1</R22>
          </CoordinateFrame>
          <float name="Reflectance">0</float>
          <float name="RightParamA">-0.5</float>
          <float name="RightParamB">0.5</float>
          <token name="RightSurface">0</token>
          <token name="RightSurfaceInput">0</token>
          <int name="RootPriority">0</int>
          <Vector3 name="RotVelocity">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
          </Vector3>
          <token name="shape">1</token>
          <Vector3 name="size">
            <X>3</X>
            <Y>150</Y>
            <Z>90</Z>
          </Vector3>
          <int64 name="SourceAssetId">-1</int64>
          <BinaryString name="Tags"></BinaryString>
          <float name="TopParamA">-0.5</float>
          <float name="TopParamB">0.5</float>
          <token name="TopSurface">0</token>
          <token name="TopSurfaceInput">0</token>
          <float name="Transparency">1</float>
          <Vector3 name="Velocity">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
          </Vector3>
        </Properties>
      </Item>
      <Item class="Part" referent="904">
        <Properties>
          <string name="Name">border</string>
          <bool name="Anchored">true</bool>
          <BinaryString name="AttributesSerialize"></BinaryString>
          <float name="BackParamA">-0.5</float>
          <float name="BackParamB">0.5</float>
          <token name="BackSurface">0</token>
          <token name="BackSurfaceInput">0</token>
          <float name="BottomParamA">-0.5</float>
          <float name="BottomParamB">0.5</float>
          <token name="BottomSurface">0</token>
          <token name="BottomSurfaceInput">0</token>
          <CoordinateFrame name="CFrame">
            <X>46.5</X>
            <Y>74</Y>
            <Z>0</Z>
            <R00>1</R00>
            <R01>0</R01>
            <R02>0</R02>
            <R10>0</R10>
            <R11>1</R11>
            <R12>0</R12>
            <R20>0</R20>
            <R21>0</R21>
            <R22>1</R22>
          </CoordinateFrame>
          <bool name="CanCollide">true</bool>
          <bool name="CanQuery">true</bool>
          <bool name="CanTouch">true</bool>
          <bool name="CastShadow">true</bool>
          <string name="CollisionGroup">Default</string>
          <int name="CollisionGroupId">0</int>
          <Color3uint8 name="Color3uint8">8836474</Color3uint8>
          <PhysicalProperties name="CustomPhysicalProperties">
            <CustomPhysics>false</CustomPhysics>
          </PhysicalProperties>
          <bool name="DefinesCapabilities">false</bool>
          <bool name="EnableFluidForces">true</bool>
          <token name="formFactorRaw">1</token>
          <float name="FrontParamA">-0.5</float>
          <float name="FrontParamB">0.5</float>
          <token name="FrontSurface">0</token>
          <token name="FrontSurfaceInput">0</token>
          <float name="LeftParamA">-0.5</float>
          <float name="LeftParamB">0.5</float>
          <token name="LeftSurface">0</token>
          <token name="LeftSurfaceInput">0</token>
          <bool name="Locked">false</bool>
          <bool name="Massless">false</bool>
          <token name="Material">272</token>
          <string name="MaterialVariantSerialized"></string>
          <CoordinateFrame name="PivotOffset">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
            <R00>1</R00>
            <R01>0</R01>
            <R02>0</R02>
            <R10>0</R10>
            <R11>1</R11>
            <R12>0</R12>
            <R20>0</R20>
            <R21>0</R21>
            <R22>1</R22>
          </CoordinateFrame>
          <float name="Reflectance">0</float>
          <float name="RightParamA">-0.5</float>
          <float name="RightParamB">0.5</float>
          <token name="RightSurface">0</token>
          <token name="RightSurfaceInput">0</token>
          <int name="RootPriority">0</int>
          <Vector3 name="RotVelocity">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
          </Vector3>
          <token name="shape">1</token>
          <Vector3 name="size">
            <X>3</X>
            <Y>150</Y>
            <Z>90</Z>
          </Vector3>
          <int64 name="SourceAssetId">-1</int64>
          <BinaryString name="Tags"></BinaryString>
          <float name="TopParamA">-0.5</float>
          <float name="TopParamB">0.5</float>
          <token name="TopSurface">0</token>
          <token name="TopSurfaceInput">0</token>
          <float name="Transparency">1</float>
          <Vector3 name="Velocity">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
          </Vector3>
        </Properties>
      </Item>
      <Item class="Part" referent="905">
        <Properties>
          <string name="Name">border</string>
          <bool name="Anchored">true</bool>
          <BinaryString name="AttributesSerialize"></BinaryString>
          <float name="BackParamA">-0.5</float>
          <float name="BackParamB">0.5</float>
          <token name="BackSurface">0</token>
          <token name="BackSurfaceInput">0</token>
          <float name="BottomParamA">-0.5</float>
          <float name="BottomParamB">0.5</float>
          <token name="BottomSurface">0</token>
          <token name="BottomSurfaceInput">0</token>
          <CoordinateFrame name="CFrame">
            <X>-0.00000013113402</X>
            <Y>150.5</Y>
            <Z>0</Z>
            <R00>-0.00000004371139</R00>
            <R01>0</R01>
            <R02>1</R02>
            <R10>0</R10>
            <R11>0.99999994</R11>
            <R12>0</R12>
            <R20>-1</R20>
            <R21>0</R21>
            <R22>-0.00000004371139</R22>
          </CoordinateFrame>
          <bool name="CanCollide">true</bool>
          <bool name="CanQuery">true</bool>
          <bool name="CanTouch">true</bool>
          <bool name="CastShadow">true</bool>
          <string name="CollisionGroup">Default</string>
          <int name="CollisionGroupId">0</int>
          <Color3uint8 name="Color3uint8">8836474</Color3uint8>
          <PhysicalProperties name="CustomPhysicalProperties">
            <CustomPhysics>false</CustomPhysics>
          </PhysicalProperties>
          <bool name="DefinesCapabilities">false</bool>
          <bool name="EnableFluidForces">true</bool>
          <token name="formFactorRaw">1</token>
          <float name="FrontParamA">-0.5</float>
          <float name="FrontParamB">0.5</float>
          <token name="FrontSurface">0</token>
          <token name="FrontSurfaceInput">0</token>
          <float name="LeftParamA">-0.5</float>
          <float name="LeftParamB">0.5</float>
          <token name="LeftSurface">0</token>
          <token name="LeftSurfaceInput">0</token>
          <bool name="Locked">false</bool>
          <bool name="Massless">false</bool>
          <token name="Material">272</token>
          <string name="MaterialVariantSerialized"></string>
          <CoordinateFrame name="PivotOffset">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
            <R00>1</R00>
            <R01>0</R01>
            <R02>0</R02>
            <R10>0</R10>
            <R11>1</R11>
            <R12>0</R12>
            <R20>0</R20>
            <R21>0</R21>
            <R22>1</R22>
          </CoordinateFrame>
          <float name="Reflectance">0</float>
          <float name="RightParamA">-0.5</float>
          <float name="RightParamB">0.5</float>
          <token name="RightSurface">0</token>
          <token name="RightSurfaceInput">0</token>
          <int name="RootPriority">0</int>
          <Vector3 name="RotVelocity">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
          </Vector3>
          <token name="shape">1</token>
          <Vector3 name="size">
            <X>90</X>
            <Y>3</Y>
            <Z>90</Z>
          </Vector3>
          <int64 name="SourceAssetId">-1</int64>
          <BinaryString name="Tags"></BinaryString>
          <float name="TopParamA">-0.5</float>
          <float name="TopParamB">0.5</float>
          <token name="TopSurface">0</token>
          <token name="TopSurfaceInput">0</token>
          <float name="Transparency">1</float>
          <Vector3 name="Velocity">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
          </Vector3>
        </Properties>
      </Item>
    </Item>
    <Item class="Model" referent="906">
      <Properties>
        <string name="Name">Lobby</string>
        <BinaryString name="AttributesSerialize"></BinaryString>
        <bool name="DefinesCapabilities">false</bool>
        <token name="LevelOfDetail">0</token>
        <CoordinateFrame name="ModelMeshCFrame">
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <R00>1</R00>
          <R01>0</R01>
          <R02>0</R02>
          <R10>0</R10>
          <R11>1</R11>
          <R12>0</R12>
          <R20>0</R20>
          <R21>0</R21>
          <R22>1</R22>
        </CoordinateFrame>
        <SharedString name="ModelMeshData">rxNJufX5oaagQE3qNtzJSQ==</SharedString>
        <Vector3 name="ModelMeshSize">
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
        </Vector3>
        <token name="ModelStreamingMode">0</token>
        <bool name="NeedsPivotMigration">false</bool>
        <Ref name="PrimaryPart">null</Ref>
        <float name="ScaleFactor">1</float>
        <int64 name="SourceAssetId">-1</int64>
        <BinaryString name="Tags"></BinaryString>
        <OptionalCoordinateFrame name="WorldPivotData">
          <CFrame>
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
            <R00>1</R00>
            <R01>0</R01>
            <R02>0</R02>
            <R10>0</R10>
            <R11>1</R11>
            <R12>0</R12>
            <R20>0</R20>
            <R21>0</R21>
            <R22>1</R22>
          </CFrame>
        </OptionalCoordinateFrame>
      </Properties>
      <Item class="Part" referent="907">
        <Properties>
          <string name="Name">platform</string>
          <bool name="Anchored">true</bool>
          <BinaryString name="AttributesSerialize"></BinaryString>
          <float name="BackParamA">-0.5</float>
          <float name="BackParamB">0.5</float>
          <token name="BackSurface">0</token>
          <token name="BackSurfaceInput">0</token>
          <float name="BottomParamA">-0.5</float>
          <float name="BottomParamB">0.5</float>
          <token name="BottomSurface">0</token>
          <token name="BottomSurfaceInput">0</token>
          <CoordinateFrame name="CFrame">
            <X>0</X>
            <Y>-0.49999952</Y>
            <Z>-22.5</Z>
            <R00>1</R00>
            <R01>0</R01>
            <R02>0</R02>
            <R10>0</R10>
            <R11>1</R11>
            <R12>0</R12>
            <R20>0</R20>
            <R21>0</R21>
            <R22>1</R22>
          </CoordinateFrame>
          <bool name="CanCollide">true</bool>
          <bool name="CanQuery">true</bool>
          <bool name="CanTouch">true</bool>
          <bool name="CastShadow">true</bool>
          <string name="CollisionGroup">Default</string>
          <int name="CollisionGroupId">0</int>
          <Color3uint8 name="Color3uint8">12147790</Color3uint8>
          <PhysicalProperties name="CustomPhysicalProperties">
            <CustomPhysics>false</CustomPhysics>
          </PhysicalProperties>
          <bool name="DefinesCapabilities">false</bool>
          <bool name="EnableFluidForces">true</bool>
          <token name="formFactorRaw">1</token>
          <float name="FrontParamA">-0.5</float>
          <float name="FrontParamB">0.5</float>
          <token name="FrontSurface">0</token>
          <token name="FrontSurfaceInput">0</token>
          <float name="LeftParamA">-0.5</float>
          <float name="LeftParamB">0.5</float>
          <token name="LeftSurface">0</token>
          <token name="LeftSurfaceInput">0</token>
          <bool name="Locked">false</bool>
          <bool name="Massless">false</bool>
          <token name="Material">272</token>
          <string name="MaterialVariantSerialized"></string>
          <CoordinateFrame name="PivotOffset">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
            <R00>1</R00>
            <R01>0</R01>
            <R02>0</R02>
            <R10>0</R10>
            <R11>1</R11>
            <R12>0</R12>
            <R20>0</R20>
            <R21>0</R21>
            <R22>1</R22>
          </CoordinateFrame>
          <float name="Reflectance">0</float>
          <float name="RightParamA">-0.5</float>
          <float name="RightParamB">0.5</float>
          <token name="RightSurface">0</token>
          <token name="RightSurfaceInput">0</token>
          <int name="RootPriority">0</int>
          <Vector3 name="RotVelocity">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
          </Vector3>
          <token name="shape">1</token>
          <Vector3 name="size">
            <X>10</X>
            <Y>1</Y>
            <Z>10</Z>
          </Vector3>
          <int64 name="SourceAssetId">-1</int64>
          <BinaryString name="Tags"></BinaryString>
          <float name="TopParamA">-0.5</float>
          <float name="TopParamB">0.5</float>
          <token name="TopSurface">0</token>
          <token name="TopSurfaceInput">0</token>
          <float name="Transparency">0</float>
          <Vector3 name="Velocity">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
          </Vector3>
        </Properties>
      </Item>
      <Item class="Part" referent="908">
        <Properties>
          <string name="Name">plate</string>
          <bool name="Anchored">true</bool>
          <BinaryString name="AttributesSerialize"></BinaryString>
          <float name="BackParamA">-0.5</float>
          <float name="BackParamB">0.5</float>
          <token name="BackSurface">0</token>
          <token name="BackSurfaceInput">0</token>
          <float name="BottomParamA">-0.5</float>
          <float name="BottomParamB">0.5</float>
          <token name="BottomSurface">0</token>
          <token name="BottomSurfaceInput">0</token>
          <CoordinateFrame name="CFrame">
            <X>0</X>
            <Y>-1.4999995</Y>
            <Z>0</Z>
            <R00>1</R00>
            <R01>0</R01>
            <R02>0</R02>
            <R10>0</R10>
            <R11>1</R11>
            <R12>0</R12>
            <R20>0</R20>
            <R21>0</R21>
            <R22>1</R22>
          </CoordinateFrame>
          <bool name="CanCollide">true</bool>
          <bool name="CanQuery">true</bool>
          <bool name="CanTouch">true</bool>
          <bool name="CastShadow">true</bool>
          <string name="CollisionGroup">Default</string>
          <int name="CollisionGroupId">0</int>
          <Color3uint8 name="Color3uint8">8836474</Color3uint8>
          <PhysicalProperties name="CustomPhysicalProperties">
            <CustomPhysics>false</CustomPhysics>
          </PhysicalProperties>
          <bool name="DefinesCapabilities">false</bool>
          <bool name="EnableFluidForces">true</bool>
          <token name="formFactorRaw">1</token>
          <float name="FrontParamA">-0.5</float>
          <float name="FrontParamB">0.5</float>
          <token name="FrontSurface">0</token>
          <token name="FrontSurfaceInput">0</token>
          <float name="LeftParamA">-0.5</float>
          <float name="LeftParamB">0.5</float>
          <token name="LeftSurface">0</token>
          <token name="LeftSurfaceInput">0</token>
          <bool name="Locked">false</bool>
          <bool name="Massless">false</bool>
          <token name="Material">272</token>
          <string name="MaterialVariantSerialized"></string>
          <CoordinateFrame name="PivotOffset">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
            <R00>1</R00>
            <R01>0</R01>
            <R02>0</R02>
            <R10>0</R10>
            <R11>1</R11>
            <R12>0</R12>
            <R20>0</R20>
            <R21>0</R21>
            <R22>1</R22>
          </CoordinateFrame>
          <float name="Reflectance">0</float>
          <float name="RightParamA">-0.5</float>
          <float name="RightParamB">0.5</float>
          <token name="RightSurface">0</token>
          <token name="RightSurfaceInput">0</token>
          <int name="RootPriority">0</int>
          <Vector3 name="RotVelocity">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
          </Vector3>
          <token name="shape">1</token>
          <Vector3 name="size">
            <X>90</X>
            <Y>1</Y>
            <Z>90</Z>
          </Vector3>
          <int64 name="SourceAssetId">-1</int64>
          <BinaryString name="Tags"></BinaryString>
          <float name="TopParamA">-0.5</float>
          <float name="TopParamB">0.5</float>
          <token name="TopSurface">0</token>
          <token name="TopSurfaceInput">0</token>
          <float name="Transparency">0</float>
          <Vector3 name="Velocity">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
          </Vector3>
        </Properties>
        <Item class="Texture" referent="909">
          <Properties>
            <string name="Name">Texture</string>
            <BinaryString name="AttributesSerialize"></BinaryString>
            <Color3 name="Color3">
              <R>0.1254902</R>
              <G>0.4039216</G>
              <B>0.17254902</B>
            </Color3>
            <bool name="DefinesCapabilities">false</bool>
            <token name="Face">1</token>
            <float name="OffsetStudsU">0</float>
            <float name="OffsetStudsV">0</float>
            <int64 name="SourceAssetId">-1</int64>
            <float name="StudsPerTileU">7.5</float>
            <float name="StudsPerTileV">7.5</float>
            <BinaryString name="Tags"></BinaryString>
            <Content name="Texture">
              <url>rbxassetid://6372755229</url>
            </Content>
            <float name="Transparency">0.75</float>
            <int name="ZIndex">1</int>
          </Properties>
        </Item>
      </Item>
      <Item class="Part" referent="910">
        <Properties>
          <string name="Name">platform</string>
          <bool name="Anchored">true</bool>
          <BinaryString name="AttributesSerialize"></BinaryString>
          <float name="BackParamA">-0.5</float>
          <float name="BackParamB">0.5</float>
          <token name="BackSurface">0</token>
          <token name="BackSurfaceInput">0</token>
          <float name="BottomParamA">-0.5</float>
          <float name="BottomParamB">0.5</float>
          <token name="BottomSurface">0</token>
          <token name="BottomSurfaceInput">0</token>
          <CoordinateFrame name="CFrame">
            <X>22.5</X>
            <Y>-0.49999952</Y>
            <Z>-22.5</Z>
            <R00>1</R00>
            <R01>0</R01>
            <R02>0</R02>
            <R10>0</R10>
            <R11>1</R11>
            <R12>0</R12>
            <R20>0</R20>
            <R21>0</R21>
            <R22>1</R22>
          </CoordinateFrame>
          <bool name="CanCollide">true</bool>
          <bool name="CanQuery">true</bool>
          <bool name="CanTouch">true</bool>
          <bool name="CastShadow">true</bool>
          <string name="CollisionGroup">Default</string>
          <int name="CollisionGroupId">0</int>
          <Color3uint8 name="Color3uint8">9979193</Color3uint8>
          <PhysicalProperties name="CustomPhysicalProperties">
            <CustomPhysics>false</CustomPhysics>
          </PhysicalProperties>
          <bool name="DefinesCapabilities">false</bool>
          <bool name="EnableFluidForces">true</bool>
          <token name="formFactorRaw">1</token>
          <float name="FrontParamA">-0.5</float>
          <float name="FrontParamB">0.5</float>
          <token name="FrontSurface">0</token>
          <token name="FrontSurfaceInput">0</token>
          <float name="LeftParamA">-0.5</float>
          <float name="LeftParamB">0.5</float>
          <token name="LeftSurface">0</token>
          <token name="LeftSurfaceInput">0</token>
          <bool name="Locked">false</bool>
          <bool name="Massless">false</bool>
          <token name="Material">272</token>
          <string name="MaterialVariantSerialized"></string>
          <CoordinateFrame name="PivotOffset">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
            <R00>1</R00>
            <R01>0</R01>
            <R02>0</R02>
            <R10>0</R10>
            <R11>1</R11>
            <R12>0</R12>
            <R20>0</R20>
            <R21>0</R21>
            <R22>1</R22>
          </CoordinateFrame>
          <float name="Reflectance">0</float>
          <float name="RightParamA">-0.5</float>
          <float name="RightParamB">0.5</float>
          <token name="RightSurface">0</token>
          <token name="RightSurfaceInput">0</token>
          <int name="RootPriority">0</int>
          <Vector3 name="RotVelocity">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
          </Vector3>
          <token name="shape">1</token>
          <Vector3 name="size">
            <X>10</X>
            <Y>1</Y>
            <Z>10</Z>
          </Vector3>
          <int64 name="SourceAssetId">-1</int64>
          <BinaryString name="Tags"></BinaryString>
          <float name="TopParamA">-0.5</float>
          <float name="TopParamB">0.5</float>
          <token name="TopSurface">0</token>
          <token name="TopSurfaceInput">0</token>
          <float name="Transparency">0</float>
          <Vector3 name="Velocity">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
          </Vector3>
        </Properties>
      </Item>
      <Item class="Part" referent="911">
        <Properties>
          <string name="Name">platform</string>
          <bool name="Anchored">true</bool>
          <BinaryString name="AttributesSerialize"></BinaryString>
          <float name="BackParamA">-0.5</float>
          <float name="BackParamB">0.5</float>
          <token name="BackSurface">0</token>
          <token name="BackSurfaceInput">0</token>
          <float name="BottomParamA">-0.5</float>
          <float name="BottomParamB">0.5</float>
          <token name="BottomSurface">0</token>
          <token name="BottomSurfaceInput">0</token>
          <CoordinateFrame name="CFrame">
            <X>22.5</X>
            <Y>-0.49999952</Y>
            <Z>22.5</Z>
            <R00>1</R00>
            <R01>0</R01>
            <R02>0</R02>
            <R10>0</R10>
            <R11>1</R11>
            <R12>0</R12>
            <R20>0</R20>
            <R21>0</R21>
            <R22>1</R22>
          </CoordinateFrame>
          <bool name="CanCollide">true</bool>
          <bool name="CanQuery">true</bool>
          <bool name="CanTouch">true</bool>
          <bool name="CastShadow">true</bool>
          <string name="CollisionGroup">Default</string>
          <int name="CollisionGroupId">0</int>
          <Color3uint8 name="Color3uint8">9979193</Color3uint8>
          <PhysicalProperties name="CustomPhysicalProperties">
            <CustomPhysics>false</CustomPhysics>
          </PhysicalProperties>
          <bool name="DefinesCapabilities">false</bool>
          <bool name="EnableFluidForces">true</bool>
          <token name="formFactorRaw">1</token>
          <float name="FrontParamA">-0.5</float>
          <float name="FrontParamB">0.5</float>
          <token name="FrontSurface">0</token>
          <token name="FrontSurfaceInput">0</token>
          <float name="LeftParamA">-0.5</float>
          <float name="LeftParamB">0.5</float>
          <token name="LeftSurface">0</token>
          <token name="LeftSurfaceInput">0</token>
          <bool name="Locked">false</bool>
          <bool name="Massless">false</bool>
          <token name="Material">272</token>
          <string name="MaterialVariantSerialized"></string>
          <CoordinateFrame name="PivotOffset">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
            <R00>1</R00>
            <R01>0</R01>
            <R02>0</R02>
            <R10>0</R10>
            <R11>1</R11>
            <R12>0</R12>
            <R20>0</R20>
            <R21>0</R21>
            <R22>1</R22>
          </CoordinateFrame>
          <float name="Reflectance">0</float>
          <float name="RightParamA">-0.5</float>
          <float name="RightParamB">0.5</float>
          <token name="RightSurface">0</token>
          <token name="RightSurfaceInput">0</token>
          <int name="RootPriority">0</int>
          <Vector3 name="RotVelocity">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
          </Vector3>
          <token name="shape">1</token>
          <Vector3 name="size">
            <X>10</X>
            <Y>1</Y>
            <Z>10</Z>
          </Vector3>
          <int64 name="SourceAssetId">-1</int64>
          <BinaryString name="Tags"></BinaryString>
          <float name="TopParamA">-0.5</float>
          <float name="TopParamB">0.5</float>
          <token name="TopSurface">0</token>
          <token name="TopSurfaceInput">0</token>
          <float name="Transparency">0</float>
          <Vector3 name="Velocity">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
          </Vector3>
        </Properties>
      </Item>
      <Item class="Part" referent="912">
        <Properties>
          <string name="Name">platform</string>
          <bool name="Anchored">true</bool>
          <BinaryString name="AttributesSerialize"></BinaryString>
          <float name="BackParamA">-0.5</float>
          <float name="BackParamB">0.5</float>
          <token name="BackSurface">0</token>
          <token name="BackSurfaceInput">0</token>
          <float name="BottomParamA">-0.5</float>
          <float name="BottomParamB">0.5</float>
          <token name="BottomSurface">0</token>
          <token name="BottomSurfaceInput">0</token>
          <CoordinateFrame name="CFrame">
            <X>0</X>
            <Y>0.49999952</Y>
            <Z>-0.25</Z>
            <R00>1</R00>
            <R01>0</R01>
            <R02>0</R02>
            <R10>0</R10>
            <R11>1</R11>
            <R12>0</R12>
            <R20>0</R20>
            <R21>0</R21>
            <R22>1</R22>
          </CoordinateFrame>
          <bool name="CanCollide">true</bool>
          <bool name="CanQuery">true</bool>
          <bool name="CanTouch">true</bool>
          <bool name="CastShadow">true</bool>
          <string name="CollisionGroup">Default</string>
          <int name="CollisionGroupId">0</int>
          <Color3uint8 name="Color3uint8">7614502</Color3uint8>
          <PhysicalProperties name="CustomPhysicalProperties">
            <CustomPhysics>false</CustomPhysics>
          </PhysicalProperties>
          <bool name="DefinesCapabilities">false</bool>
          <bool name="EnableFluidForces">true</bool>
          <token name="formFactorRaw">1</token>
          <float name="FrontParamA">-0.5</float>
          <float name="FrontParamB">0.5</float>
          <token name="FrontSurface">0</token>
          <token name="FrontSurfaceInput">0</token>
          <float name="LeftParamA">-0.5</float>
          <float name="LeftParamB">0.5</float>
          <token name="LeftSurface">0</token>
          <token name="LeftSurfaceInput">0</token>
          <bool name="Locked">false</bool>
          <bool name="Massless">false</bool>
          <token name="Material">272</token>
          <string name="MaterialVariantSerialized"></string>
          <CoordinateFrame name="PivotOffset">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
            <R00>1</R00>
            <R01>0</R01>
            <R02>0</R02>
            <R10>0</R10>
            <R11>1</R11>
            <R12>0</R12>
            <R20>0</R20>
            <R21>0</R21>
            <R22>1</R22>
          </CoordinateFrame>
          <float name="Reflectance">0</float>
          <float name="RightParamA">-0.5</float>
          <float name="RightParamB">0.5</float>
          <token name="RightSurface">0</token>
          <token name="RightSurfaceInput">0</token>
          <int name="RootPriority">0</int>
          <Vector3 name="RotVelocity">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
          </Vector3>
          <token name="shape">1</token>
          <Vector3 name="size">
            <X>13</X>
            <Y>3</Y>
            <Z>13.5</Z>
          </Vector3>
          <int64 name="SourceAssetId">-1</int64>
          <BinaryString name="Tags"></BinaryString>
          <float name="TopParamA">-0.5</float>
          <float name="TopParamB">0.5</float>
          <token name="TopSurface">0</token>
          <token name="TopSurfaceInput">0</token>
          <float name="Transparency">0</float>
          <Vector3 name="Velocity">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
          </Vector3>
        </Properties>
      </Item>
      <Item class="Part" referent="913">
        <Properties>
          <string name="Name">platform</string>
          <bool name="Anchored">true</bool>
          <BinaryString name="AttributesSerialize"></BinaryString>
          <float name="BackParamA">-0.5</float>
          <float name="BackParamB">0.5</float>
          <token name="BackSurface">0</token>
          <token name="BackSurfaceInput">0</token>
          <float name="BottomParamA">-0.5</float>
          <float name="BottomParamB">0.5</float>
          <token name="BottomSurface">0</token>
          <token name="BottomSurfaceInput">0</token>
          <CoordinateFrame name="CFrame">
            <X>22.5</X>
            <Y>-0.49999952</Y>
            <Z>0</Z>
            <R00>1</R00>
            <R01>0</R01>
            <R02>0</R02>
            <R10>0</R10>
            <R11>1</R11>
            <R12>0</R12>
            <R20>0</R20>
            <R21>0</R21>
            <R22>1</R22>
          </CoordinateFrame>
          <bool name="CanCollide">true</bool>
          <bool name="CanQuery">true</bool>
          <bool name="CanTouch">true</bool>
          <bool name="CastShadow">true</bool>
          <string name="CollisionGroup">Default</string>
          <int name="CollisionGroupId">0</int>
          <Color3uint8 name="Color3uint8">12147790</Color3uint8>
          <PhysicalProperties name="CustomPhysicalProperties">
            <CustomPhysics>false</CustomPhysics>
          </PhysicalProperties>
          <bool name="DefinesCapabilities">false</bool>
          <bool name="EnableFluidForces">true</bool>
          <token name="formFactorRaw">1</token>
          <float name="FrontParamA">-0.5</float>
          <float name="FrontParamB">0.5</float>
          <token name="FrontSurface">0</token>
          <token name="FrontSurfaceInput">0</token>
          <float name="LeftParamA">-0.5</float>
          <float name="LeftParamB">0.5</float>
          <token name="LeftSurface">0</token>
          <token name="LeftSurfaceInput">0</token>
          <bool name="Locked">false</bool>
          <bool name="Massless">false</bool>
          <token name="Material">272</token>
          <string name="MaterialVariantSerialized"></string>
          <CoordinateFrame name="PivotOffset">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
            <R00>1</R00>
            <R01>0</R01>
            <R02>0</R02>
            <R10>0</R10>
            <R11>1</R11>
            <R12>0</R12>
            <R20>0</R20>
            <R21>0</R21>
            <R22>1</R22>
          </CoordinateFrame>
          <float name="Reflectance">0</float>
          <float name="RightParamA">-0.5</float>
          <float name="RightParamB">0.5</float>
          <token name="RightSurface">0</token>
          <token name="RightSurfaceInput">0</token>
          <int name="RootPriority">0</int>
          <Vector3 name="RotVelocity">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
          </Vector3>
          <token name="shape">1</token>
          <Vector3 name="size">
            <X>10</X>
            <Y>1</Y>
            <Z>10</Z>
          </Vector3>
          <int64 name="SourceAssetId">-1</int64>
          <BinaryString name="Tags"></BinaryString>
          <float name="TopParamA">-0.5</float>
          <float name="TopParamB">0.5</float>
          <token name="TopSurface">0</token>
          <token name="TopSurfaceInput">0</token>
          <float name="Transparency">0</float>
          <Vector3 name="Velocity">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
          </Vector3>
        </Properties>
      </Item>
      <Item class="Part" referent="914">
        <Properties>
          <string name="Name">platform</string>
          <bool name="Anchored">true</bool>
          <BinaryString name="AttributesSerialize"></BinaryString>
          <float name="BackParamA">-0.5</float>
          <float name="BackParamB">0.5</float>
          <token name="BackSurface">0</token>
          <token name="BackSurfaceInput">0</token>
          <float name="BottomParamA">-0.5</float>
          <float name="BottomParamB">0.5</float>
          <token name="BottomSurface">0</token>
          <token name="BottomSurfaceInput">0</token>
          <CoordinateFrame name="CFrame">
            <X>0</X>
            <Y>-0.49999952</Y>
            <Z>22.5</Z>
            <R00>1</R00>
            <R01>0</R01>
            <R02>0</R02>
            <R10>0</R10>
            <R11>1</R11>
            <R12>0</R12>
            <R20>0</R20>
            <R21>0</R21>
            <R22>1</R22>
          </CoordinateFrame>
          <bool name="CanCollide">true</bool>
          <bool name="CanQuery">true</bool>
          <bool name="CanTouch">true</bool>
          <bool name="CastShadow">true</bool>
          <string name="CollisionGroup">Default</string>
          <int name="CollisionGroupId">0</int>
          <Color3uint8 name="Color3uint8">12147790</Color3uint8>
          <PhysicalProperties name="CustomPhysicalProperties">
            <CustomPhysics>false</CustomPhysics>
          </PhysicalProperties>
          <bool name="DefinesCapabilities">false</bool>
          <bool name="EnableFluidForces">true</bool>
          <token name="formFactorRaw">1</token>
          <float name="FrontParamA">-0.5</float>
          <float name="FrontParamB">0.5</float>
          <token name="FrontSurface">0</token>
          <token name="FrontSurfaceInput">0</token>
          <float name="LeftParamA">-0.5</float>
          <float name="LeftParamB">0.5</float>
          <token name="LeftSurface">0</token>
          <token name="LeftSurfaceInput">0</token>
          <bool name="Locked">false</bool>
          <bool name="Massless">false</bool>
          <token name="Material">272</token>
          <string name="MaterialVariantSerialized"></string>
          <CoordinateFrame name="PivotOffset">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
            <R00>1</R00>
            <R01>0</R01>
            <R02>0</R02>
            <R10>0</R10>
            <R11>1</R11>
            <R12>0</R12>
            <R20>0</R20>
            <R21>0</R21>
            <R22>1</R22>
          </CoordinateFrame>
          <float name="Reflectance">0</float>
          <float name="RightParamA">-0.5</float>
          <float name="RightParamB">0.5</float>
          <token name="RightSurface">0</token>
          <token name="RightSurfaceInput">0</token>
          <int name="RootPriority">0</int>
          <Vector3 name="RotVelocity">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
          </Vector3>
          <token name="shape">1</token>
          <Vector3 name="size">
            <X>10</X>
            <Y>1</Y>
            <Z>10</Z>
          </Vector3>
          <int64 name="SourceAssetId">-1</int64>
          <BinaryString name="Tags"></BinaryString>
          <float name="TopParamA">-0.5</float>
          <float name="TopParamB">0.5</float>
          <token name="TopSurface">0</token>
          <token name="TopSurfaceInput">0</token>
          <float name="Transparency">0</float>
          <Vector3 name="Velocity">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
          </Vector3>
        </Properties>
      </Item>
      <Item class="Part" referent="915">
        <Properties>
          <string name="Name">platform</string>
          <bool name="Anchored">true</bool>
          <BinaryString name="AttributesSerialize"></BinaryString>
          <float name="BackParamA">-0.5</float>
          <float name="BackParamB">0.5</float>
          <token name="BackSurface">0</token>
          <token name="BackSurfaceInput">0</token>
          <float name="BottomParamA">-0.5</float>
          <float name="BottomParamB">0.5</float>
          <token name="BottomSurface">0</token>
          <token name="BottomSurfaceInput">0</token>
          <CoordinateFrame name="CFrame">
            <X>-22.5</X>
            <Y>-0.49999952</Y>
            <Z>-22.5</Z>
            <R00>1</R00>
            <R01>0</R01>
            <R02>0</R02>
            <R10>0</R10>
            <R11>1</R11>
            <R12>0</R12>
            <R20>0</R20>
            <R21>0</R21>
            <R22>1</R22>
          </CoordinateFrame>
          <bool name="CanCollide">true</bool>
          <bool name="CanQuery">true</bool>
          <bool name="CanTouch">true</bool>
          <bool name="CastShadow">true</bool>
          <string name="CollisionGroup">Default</string>
          <int name="CollisionGroupId">0</int>
          <Color3uint8 name="Color3uint8">9979193</Color3uint8>
          <PhysicalProperties name="CustomPhysicalProperties">
            <CustomPhysics>false</CustomPhysics>
          </PhysicalProperties>
          <bool name="DefinesCapabilities">false</bool>
          <bool name="EnableFluidForces">true</bool>
          <token name="formFactorRaw">1</token>
          <float name="FrontParamA">-0.5</float>
          <float name="FrontParamB">0.5</float>
          <token name="FrontSurface">0</token>
          <token name="FrontSurfaceInput">0</token>
          <float name="LeftParamA">-0.5</float>
          <float name="LeftParamB">0.5</float>
          <token name="LeftSurface">0</token>
          <token name="LeftSurfaceInput">0</token>
          <bool name="Locked">false</bool>
          <bool name="Massless">false</bool>
          <token name="Material">272</token>
          <string name="MaterialVariantSerialized"></string>
          <CoordinateFrame name="PivotOffset">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
            <R00>1</R00>
            <R01>0</R01>
            <R02>0</R02>
            <R10>0</R10>
            <R11>1</R11>
            <R12>0</R12>
            <R20>0</R20>
            <R21>0</R21>
            <R22>1</R22>
          </CoordinateFrame>
          <float name="Reflectance">0</float>
          <float name="RightParamA">-0.5</float>
          <float name="RightParamB">0.5</float>
          <token name="RightSurface">0</token>
          <token name="RightSurfaceInput">0</token>
          <int name="RootPriority">0</int>
          <Vector3 name="RotVelocity">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
          </Vector3>
          <token name="shape">1</token>
          <Vector3 name="size">
            <X>10</X>
            <Y>1</Y>
            <Z>10</Z>
          </Vector3>
          <int64 name="SourceAssetId">-1</int64>
          <BinaryString name="Tags"></BinaryString>
          <float name="TopParamA">-0.5</float>
          <float name="TopParamB">0.5</float>
          <token name="TopSurface">0</token>
          <token name="TopSurfaceInput">0</token>
          <float name="Transparency">0</float>
          <Vector3 name="Velocity">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
          </Vector3>
        </Properties>
      </Item>
      <Item class="Part" referent="916">
        <Properties>
          <string name="Name">platform</string>
          <bool name="Anchored">true</bool>
          <BinaryString name="AttributesSerialize"></BinaryString>
          <float name="BackParamA">-0.5</float>
          <float name="BackParamB">0.5</float>
          <token name="BackSurface">0</token>
          <token name="BackSurfaceInput">0</token>
          <float name="BottomParamA">-0.5</float>
          <float name="BottomParamB">0.5</float>
          <token name="BottomSurface">0</token>
          <token name="BottomSurfaceInput">0</token>
          <CoordinateFrame name="CFrame">
            <X>-22.5</X>
            <Y>-0.49999952</Y>
            <Z>22.5</Z>
            <R00>1</R00>
            <R01>0</R01>
            <R02>0</R02>
            <R10>0</R10>
            <R11>1</R11>
            <R12>0</R12>
            <R20>0</R20>
            <R21>0</R21>
            <R22>1</R22>
          </CoordinateFrame>
          <bool name="CanCollide">true</bool>
          <bool name="CanQuery">true</bool>
          <bool name="CanTouch">true</bool>
          <bool name="CastShadow">true</bool>
          <string name="CollisionGroup">Default</string>
          <int name="CollisionGroupId">0</int>
          <Color3uint8 name="Color3uint8">9979193</Color3uint8>
          <PhysicalProperties name="CustomPhysicalProperties">
            <CustomPhysics>false</CustomPhysics>
          </PhysicalProperties>
          <bool name="DefinesCapabilities">false</bool>
          <bool name="EnableFluidForces">true</bool>
          <token name="formFactorRaw">1</token>
          <float name="FrontParamA">-0.5</float>
          <float name="FrontParamB">0.5</float>
          <token name="FrontSurface">0</token>
          <token name="FrontSurfaceInput">0</token>
          <float name="LeftParamA">-0.5</float>
          <float name="LeftParamB">0.5</float>
          <token name="LeftSurface">0</token>
          <token name="LeftSurfaceInput">0</token>
          <bool name="Locked">false</bool>
          <bool name="Massless">false</bool>
          <token name="Material">272</token>
          <string name="MaterialVariantSerialized"></string>
          <CoordinateFrame name="PivotOffset">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
            <R00>1</R00>
            <R01>0</R01>
            <R02>0</R02>
            <R10>0</R10>
            <R11>1</R11>
            <R12>0</R12>
            <R20>0</R20>
            <R21>0</R21>
            <R22>1</R22>
          </CoordinateFrame>
          <float name="Reflectance">0</float>
          <float name="RightParamA">-0.5</float>
          <float name="RightParamB">0.5</float>
          <token name="RightSurface">0</token>
          <token name="RightSurfaceInput">0</token>
          <int name="RootPriority">0</int>
          <Vector3 name="RotVelocity">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
          </Vector3>
          <token name="shape">1</token>
          <Vector3 name="size">
            <X>10</X>
            <Y>1</Y>
            <Z>10</Z>
          </Vector3>
          <int64 name="SourceAssetId">-1</int64>
          <BinaryString name="Tags"></BinaryString>
          <float name="TopParamA">-0.5</float>
          <float name="TopParamB">0.5</float>
          <token name="TopSurface">0</token>
          <token name="TopSurfaceInput">0</token>
          <float name="Transparency">0</float>
          <Vector3 name="Velocity">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
          </Vector3>
        </Properties>
      </Item>
      <Item class="Part" referent="917">
        <Properties>
          <string name="Name">platform</string>
          <bool name="Anchored">true</bool>
          <BinaryString name="AttributesSerialize"></BinaryString>
          <float name="BackParamA">-0.5</float>
          <float name="BackParamB">0.5</float>
          <token name="BackSurface">0</token>
          <token name="BackSurfaceInput">0</token>
          <float name="BottomParamA">-0.5</float>
          <float name="BottomParamB">0.5</float>
          <token name="BottomSurface">0</token>
          <token name="BottomSurfaceInput">0</token>
          <CoordinateFrame name="CFrame">
            <X>-22.5</X>
            <Y>-0.49999952</Y>
            <Z>0</Z>
            <R00>1</R00>
            <R01>0</R01>
            <R02>0</R02>
            <R10>0</R10>
            <R11>1</R11>
            <R12>0</R12>
            <R20>0</R20>
            <R21>0</R21>
            <R22>1</R22>
          </CoordinateFrame>
          <bool name="CanCollide">true</bool>
          <bool name="CanQuery">true</bool>
          <bool name="CanTouch">true</bool>
          <bool name="CastShadow">true</bool>
          <string name="CollisionGroup">Default</string>
          <int name="CollisionGroupId">0</int>
          <Color3uint8 name="Color3uint8">12147790</Color3uint8>
          <PhysicalProperties name="CustomPhysicalProperties">
            <CustomPhysics>false</CustomPhysics>
          </PhysicalProperties>
          <bool name="DefinesCapabilities">false</bool>
          <bool name="EnableFluidForces">true</bool>
          <token name="formFactorRaw">1</token>
          <float name="FrontParamA">-0.5</float>
          <float name="FrontParamB">0.5</float>
          <token name="FrontSurface">0</token>
          <token name="FrontSurfaceInput">0</token>
          <float name="LeftParamA">-0.5</float>
          <float name="LeftParamB">0.5</float>
          <token name="LeftSurface">0</token>
          <token name="LeftSurfaceInput">0</token>
          <bool name="Locked">false</bool>
          <bool name="Massless">false</bool>
          <token name="Material">272</token>
          <string name="MaterialVariantSerialized"></string>
          <CoordinateFrame name="PivotOffset">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
            <R00>1</R00>
            <R01>0</R01>
            <R02>0</R02>
            <R10>0</R10>
            <R11>1</R11>
            <R12>0</R12>
            <R20>0</R20>
            <R21>0</R21>
            <R22>1</R22>
          </CoordinateFrame>
          <float name="Reflectance">0</float>
          <float name="RightParamA">-0.5</float>
          <float name="RightParamB">0.5</float>
          <token name="RightSurface">0</token>
          <token name="RightSurfaceInput">0</token>
          <int name="RootPriority">0</int>
          <Vector3 name="RotVelocity">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
          </Vector3>
          <token name="shape">1</token>
          <Vector3 name="size">
            <X>10</X>
            <Y>1</Y>
            <Z>10</Z>
          </Vector3>
          <int64 name="SourceAssetId">-1</int64>
          <BinaryString name="Tags"></BinaryString>
          <float name="TopParamA">-0.5</float>
          <float name="TopParamB">0.5</float>
          <token name="TopSurface">0</token>
          <token name="TopSurfaceInput">0</token>
          <float name="Transparency">0</float>
          <Vector3 name="Velocity">
            <X>0</X>
            <Y>0</Y>
            <Z>0</Z>
          </Vector3>
        </Properties>
      </Item>
    </Item>
    <Item class="Terrain" referent="918">
      <Properties>
        <string name="Name">Terrain</string>
        <token name="AcquisitionMethod">0</token>
        <bool name="Anchored">true</bool>
        <BinaryString name="AttributesSerialize"></BinaryString>
        <float name="BackParamA">-0.5</float>
        <float name="BackParamB">0.5</float>
        <token name="BackSurface">0</token>
        <token name="BackSurfaceInput">0</token>
        <float name="BottomParamA">-0.5</float>
        <float name="BottomParamB">0.5</float>
        <token name="BottomSurface">4</token>
        <token name="BottomSurfaceInput">0</token>
        <CoordinateFrame name="CFrame">
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <R00>1</R00>
          <R01>0</R01>
          <R02>0</R02>
          <R10>0</R10>
          <R11>1</R11>
          <R12>0</R12>
          <R20>0</R20>
          <R21>0</R21>
          <R22>1</R22>
        </CoordinateFrame>
        <bool name="CanCollide">true</bool>
        <bool name="CanQuery">true</bool>
        <bool name="CanTouch">true</bool>
        <bool name="CastShadow">true</bool>
        <string name="CollisionGroup">Default</string>
        <int name="CollisionGroupId">0</int>
        <Color3uint8 name="Color3uint8">10724005</Color3uint8>
        <PhysicalProperties name="CustomPhysicalProperties">
          <CustomPhysics>false</CustomPhysics>
        </PhysicalProperties>
        <bool name="Decoration">false</bool>
        <bool name="DefinesCapabilities">false</bool>
        <bool name="EnableFluidForces">true</bool>
        <float name="FrontParamA">-0.5</float>
        <float name="FrontParamB">0.5</float>
        <token name="FrontSurface">0</token>
        <token name="FrontSurfaceInput">0</token>
        <float name="GrassLength">0.7</float>
        <float name="LeftParamA">-0.5</float>
        <float name="LeftParamB">0.5</float>
        <token name="LeftSurface">0</token>
        <token name="LeftSurfaceInput">0</token>
        <bool name="Locked">true</bool>
        <bool name="Massless">false</bool>
        <token name="Material">256</token>
        <BinaryString name="MaterialColors"><![CDATA[AAAAAAAAan8/P39rf2Y/ilY+j35fi21PZmxvZbDqw8faiVpHOi4kHh4lZlw76JxKc3trhHtagcLgc4RKxr21zq2UlJSM]]></BinaryString>
        <string name="MaterialVariantSerialized"></string>
        <BinaryString name="PhysicsGrid"><![CDATA[AgMAAAAAAAAAAAAAAAA=]]></BinaryString>
        <CoordinateFrame name="PivotOffset">
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <R00>1</R00>
          <R01>0</R01>
          <R02>0</R02>
          <R10>0</R10>
          <R11>1</R11>
          <R12>0</R12>
          <R20>0</R20>
          <R21>0</R21>
          <R22>1</R22>
        </CoordinateFrame>
        <float name="Reflectance">0</float>
        <float name="RightParamA">-0.5</float>
        <float name="RightParamB">0.5</float>
        <token name="RightSurface">0</token>
        <token name="RightSurfaceInput">0</token>
        <int name="RootPriority">0</int>
        <Vector3 name="RotVelocity">
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
        </Vector3>
        <bool name="ShorelinesUpgraded">false</bool>
        <Vector3 name="size">
          <X>2044</X>
          <Y>252</Y>
          <Z>2044</Z>
        </Vector3>
        <BinaryString name="SmoothGrid"><![CDATA[AQU=]]></BinaryString>
        <bool name="SmoothVoxelsUpgraded">false</bool>
        <int64 name="SourceAssetId">-1</int64>
        <BinaryString name="Tags"></BinaryString>
        <float name="TopParamA">-0.5</float>
        <float name="TopParamB">0.5</float>
        <token name="TopSurface">3</token>
        <token name="TopSurfaceInput">0</token>
        <float name="Transparency">0</float>
        <Vector3 name="Velocity">
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
        </Vector3>
        <Color3 name="WaterColor">
          <R>0.05</R>
          <G>0.33</G>
          <B>0.36</B>
        </Color3>
        <float name="WaterReflectance">1</float>
        <float name="WaterTransparency">0.3</float>
        <float name="WaterWaveSize">0.15</float>
        <float name="WaterWaveSpeed">10</float>
      </Properties>
    </Item>
  </Item>
  <SharedStrings>
    <SharedString md5="GbDiF4fDW4KBpjziN9wsdw==">Q1NHUEhTBwAAAAFkq2RFG3MWMimTULP7hOcyLLICSHBsBL2Y7Ik6H7ICSLT6z7oysgJIEAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAACAP34AAAAEAAAAZhe8QAvosDVTcQHBVCsYQYIkBzWhxEXAejjcQE48qMDB/5/AfX2wJh6r2jX//x/BbjwoQHA8qEAdcQHBZRe8wAvosDVTcQHBVCsYwYIkBzWhxEXAeTjcwFE8qEC+/5/AbTwowGs8qMAfcQHBZhe8wAvosLVTcQFB6Y3nwDscj8BoO6hAbjwowHA8qMAdcQFBfX2wph6r2rX//x9BZRe8QAvosLVTcQFB6Y3nQDccj0BsO6hAbTwoQGs8qEAfcQFBVCsYwYIkB7WhxEVAejjcwE48qEDB/59AiRoIwUk8qMB47GW1VCsYQYIkB7WhxEVAeTjcQFE8qMC+/59AiRoIQUk8qEB47GU1yDuowLEaCEG7Aro1ijRxmwAAIEEfq9o1cPHPv84aCEGa/5/AcPHPv80aCEGg/59AyDuoQLEaCMG7Arq1ijRxGwAAIMEfq9q1cPHPP80aCMGg/5/AcPHPP88aCMGa/59AbxqIQMwaCEFpxEXAbxqIwMsaCMFzxEXAauMwwD0cj0CZGghBauMwQEMcj8CXGghBauMwwEMcj0CXGgjBauMwQD0cj8CZGgjB6Y3nwDccj8BsO6jA6Y3nQDscj0BoO6jAsxsPQecbj8B5lUO1sxsPwecbj0B5lUM1bxqIQMsaCEFzxEVAbxqIwMwaCMFpxEVA8AAAAAAAAAABAAAAAgAAAAAAAAADAAAABAAAAAUAAAAGAAAABwAAAAUAAAADAAAACAAAAAkAAAAKAAAACwAAAAkAAAALAAAADAAAAA0AAAAOAAAADwAAAA0AAAAPAAAADAAAABAAAAAKAAAACQAAABAAAAAJAAAAEQAAABAAAAAGAAAAEgAAABAAAAASAAAACgAAABMAAAAOAAAADQAAABMAAAANAAAAFAAAABMAAAABAAAAFQAAABMAAAAVAAAADgAAABYAAAAXAAAAGAAAABYAAAAYAAAABwAAABYAAAARAAAAGQAAABYAAAAZAAAAFwAAABoAAAAbAAAAHAAAABoAAAAcAAAAAgAAABoAAAAUAAAAHQAAABoAAAAdAAAAGwAAAB4AAAAEAAAAGAAAAB4AAAAYAAAAFwAAAB8AAAAIAAAAHAAAAB8AAAAcAAAAGwAAACAAAAAPAAAAGQAAACAAAAAZAAAAEQAAACAAAAARAAAACQAAACAAAAAJAAAADAAAACAAAAAMAAAADwAAACEAAAALAAAAHQAAACEAAAAdAAAAFAAAACEAAAAUAAAADQAAACEAAAANAAAADAAAACEAAAAMAAAACwAAACIAAAAHAAAAGAAAACIAAAAYAAAABAAAACIAAAADAAAABQAAACIAAAAFAAAABwAAACIAAAAEAAAAAwAAACMAAAACAAAAHAAAACMAAAAcAAAACAAAACMAAAADAAAAAAAAACMAAAAAAAAAAgAAACMAAAAIAAAAAwAAACQAAAAIAAAAHwAAACQAAAAfAAAAEgAAACQAAAAGAAAABQAAACQAAAAFAAAACAAAACQAAAASAAAABgAAACUAAAAEAAAAHgAAACUAAAAeAAAAFQAAACUAAAABAAAAAAAAACUAAAAAAAAABAAAACUAAAAVAAAAAQAAACYAAAAUAAAAGgAAACYAAAAaAAAAAgAAACYAAAABAAAAEwAAACYAAAATAAAAFAAAACYAAAACAAAAAQAAACcAAAARAAAAFgAAACcAAAAWAAAABwAAACcAAAAGAAAAEAAAACcAAAAQAAAAEQAAACcAAAAHAAAABgAAACgAAAAVAAAAHgAAACgAAAAeAAAAFwAAACgAAAAXAAAAGQAAACgAAAAZAAAADwAAACgAAAAPAAAADgAAACgAAAAOAAAAFQAAACkAAAASAAAAHwAAACkAAAAfAAAAGwAAACkAAAAbAAAAHQAAACkAAAAdAAAACwAAACkAAAALAAAACgAAACkAAAAKAAAAEgAAAA==</SharedString>
    <SharedString md5="WS4ivYhGCuu6obGWpbsDSQ==">Q1NHUEhTBgAAANxGpkAAAAAAAAAAAAAAAAAZIjRAAAAAAAAAAABdkApAAAAAABQiNEAQAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAIA/JAAAAAQAAAAAAAAAAACAPwAAgD/Qs12/AACAPwAAAD8AAAAAAACAvwAAgD/Qs10/AACAPwAAAD/Qs12/AACAPwAAAL/Qs12/AACAvwAAAD/Qs10/AACAvwAAAD/Qs10/AACAPwAAAL8AAAAAAACAPwAAgL/Qs12/AACAvwAAAL/Qs10/AACAvwAAAL8AAAAAAACAvwAAgL88AAAAAAAAAAEAAAAFAAAAAAAAAAUAAAACAAAAAAAAAAIAAAAGAAAAAAAAAAYAAAADAAAAAAAAAAMAAAAHAAAAAAAAAAcAAAAIAAAAAAAAAAgAAAAEAAAAAAAAAAQAAAABAAAAAQAAAAQAAAAJAAAAAQAAAAkAAAAFAAAAAgAAAAUAAAAJAAAAAgAAAAkAAAALAAAAAgAAAAsAAAAKAAAAAgAAAAoAAAAGAAAAAwAAAAYAAAAKAAAAAwAAAAoAAAAHAAAABAAAAAgAAAALAAAABAAAAAsAAAAJAAAABwAAAAoAAAALAAAABwAAAAsAAAAIAAAA</SharedString>
    <SharedString md5="e2l2cilrOg0W4vrbirU2hQ==">PHJvYmxveCGJ/w0KGgoAAAEAAAACAAAAAAAAAAAAAABJTlNUGwAAABkAAAAAAAAA8AoAAAAABAAAAFBhcnQAAgAAAAAAAAAAAAACUFJPUBUAAAATAAAAAAAAAPAEAAAAAAgAAABBbmNob3JlZAIAAFBST1AmAAAAJAAAAAAAAADwFQAAAAATAAAAQXR0cmlidXRlc1NlcmlhbGl6ZQEAAAAAAAAAAFBST1AdAAAAGwAAAAAAAADwDAAAAAAKAAAAQmFja1BhcmFtQQR+fgAAAAABAVBST1AdAAAAGwAAAAAAAADwDAAAAAAKAAAAQmFja1BhcmFtQgR+fgAAAAAAAFBST1AeAAAAHAAAAAAAAADwDQAAAAALAAAAQmFja1N1cmZhY2USAAAAAAAAAABQUk9QIwAAACEAAAAAAAAA8BIAAAAAEAAAAEJhY2tTdXJmYWNlSW5wdXQSAAAAAAAAAABQUk9QHwAAAB0AAAAAAAAA8A4AAAAADAAAAEJvdHRvbVBhcmFtQQR+fgAAAAABAVBST1AfAAAAHQAAAAAAAADwDgAAAAAMAAAAQm90dG9tUGFyYW1CBH5+AAAAAAAAUFJPUCAAAAAeAAAAAAAAAPAPAAAAAA0AAABCb3R0b21TdXJmYWNlEgAAAAAAAAAAUFJPUCUAAAAjAAAAAAAAAPAUAAAAABIAAABCb3R0b21TdXJmYWNlSW5wdXQSAAAAAAAAAABQUk9QRgAAAE0AAAAAAAAA8AoAAAAABgAAAENGcmFtZRACAOpGdz/ug4S+GQBA7oOEPhAAAAwABgIA8AuAP3t77nuOfYGAeQDMAEAAAQBsbAAAAAABAVBST1AXAAAAFQAAAAAAAADwBgAAAAAKAAAAQ2FuQ29sbGlkZQIBAVBST1AVAAAAEwAAAAAAAADwBAAAAAAIAAAAQ2FuUXVlcnkCAQFQUk9QFQAAABMAAAAAAAAA8AQAAAAACAAAAENhblRvdWNoAgEBUFJPUBcAAAAVAAAAAAAAAPAGAAAAAAoAAABDYXN0U2hhZG93AgAAUFJPUC8AAAAtAAAAAAAAAPAeAAAAAA4AAABDb2xsaXNpb25Hcm91cAEHAAAARGVmYXVsdAcAAABEZWZhdWx0UFJPUCMAAAAhAAAAAAAAAPASAAAAABAAAABDb2xsaXNpb25Hcm91cElkAwAAAAAAAAAAUFJPUBwAAAAaAAAAAAAAAPALAAAAAAsAAABDb2xvcjN1aW50OBrb29ra3t5QUk9QJQAAACMAAAAAAAAA8BQAAAAAGAAAAEN1c3RvbVBoeXNpY2FsUHJvcGVydGllcxkAAFBST1AeAAAAHAAAAAAAAADwDQAAAAALAAAARnJvbnRQYXJhbUEEfn4AAAAAAQFQUk9QHgAAABwAAAAAAAAA8A0AAAAACwAAAEZyb250UGFyYW1CBH5+AAAAAAAAUFJPUB8AAAAdAAAAAAAAAPAOAAAAAAwAAABGcm9udFN1cmZhY2USAAAAAAAAAABQUk9QJAAAACIAAAAAAAAA8BMAAAAAEQAAAEZyb250U3VyZmFjZUlucHV0EgAAAAAAAAAAUFJPUB0AAAAbAAAAAAAAAPAMAAAAAAoAAABMZWZ0UGFyYW1BBH5+AAAAAAEBUFJPUB0AAAAbAAAAAAAAAPAMAAAAAAoAAABMZWZ0UGFyYW1CBH5+AAAAAAAAUFJPUB4AAAAcAAAAAAAAAPANAAAAAAsAAABMZWZ0U3VyZmFjZRIAAAAAAAAAAFBST1AjAAAAIQAAAAAAAADwEgAAAAAQAAAATGVmdFN1cmZhY2VJbnB1dBIAAAAAAAAAAFBST1ATAAAAEQAAAAAAAADwAgAAAAAGAAAATG9ja2VkAgAAUFJPUBUAAAATAAAAAAAAAPAEAAAAAAgAAABNYXNzbGVzcwIAAFBST1AbAAAAGQAAAAAAAADwCgAAAAAIAAAATWF0ZXJpYWwSAAAAAAEBEBBQUk9QKgAAACoAAAAAAAAA8QkAAAAAGQAAAE1hdGVyaWFsVmFyaWFudFMNANBpemVkAQAAAAAAAAAAUFJPUB0AAAAdAAAAAAAAANAAAAAABAAAAE5hbWUBCQDAUGFydAQAAABQYXJ0UFJPUCMAAAAuAAAAAAAAAPAHAAAAAAsAAABQaXZvdE9mZnNldBACAhYACwIAUAAAAAAAUFJPUB4AAAAcAAAAAAAAAPANAAAAAAsAAABSZWZsZWN0YW5jZQQAAAAAAAAAAFBST1AeAAAAHAAAAAAAAADwDQAAAAALAAAAUmlnaHRQYXJhbUEEfn4AAAAAAQFQUk9QHgAAABwAAAAAAAAA8A0AAAAACwAAAFJpZ2h0UGFyYW1CBH5+AAAAAAAAUFJPUB8AAAAdAAAAAAAAAPAOAAAAAAwAAABSaWdodFN1cmZhY2USAAAAAAAAAABQUk9QJAAAACIAAAAAAAAA8BMAAAAAEQAAAFJpZ2h0U3VyZmFjZUlucHV0EgAAAAAAAAAAUFJPUB8AAAAdAAAAAAAAAPAOAAAAAAwAAABSb290UHJpb3JpdHkDAAAAAAAAAABQUk9QIQAAACwAAAAAAAAA8AUAAAAACwAAAFJvdFZlbG9jaXR5DhQACwIAUAAAAAAAUFJPUCMAAAAmAAAAAAAAAPAHAAAAAA0AAABTb3VyY2VBc3NldElkGxYAAwIAUAAAAAEBUFJPUBcAAAAVAAAAAAAAAPAGAAAAAAQAAABUYWdzAQAAAAAAAAAAUFJPUBwAAAAaAAAAAAAAAPALAAAAAAkAAABUb3BQYXJhbUEEfn4AAAAAAQFQUk9QHAAAABoAAAAAAAAA8AsAAAAACQAAAFRvcFBhcmFtQgR+fgAAAAAAAFBST1AdAAAAGwAAAAAAAADwDAAAAAAKAAAAVG9wU3VyZmFjZRIAAAAAAAAAAFBST1AiAAAAIAAAAAAAAADwEQAAAAAPAAAAVG9wU3VyZmFjZUlucHV0EgAAAAAAAAAAUFJPUB8AAAAdAAAAAAAAAPAOAAAAAAwAAABUcmFuc3BhcmVuY3kEAAAAAAAAAABQUk9QHgAAACkAAAAAAAAA8AIAAAAACAAAAFZlbG9jaXR5DhEACwIAUAAAAAAAUFJPUCAAAAAeAAAAAAAAAPAPAAAAAA0AAABmb3JtRmFjdG9yUmF3EgAAAAAAAAEBUFJPUBgAAAAWAAAAAAAAAPAHAAAAAAUAAABzaGFwZRIAAAAAAAACAlBST1AhAAAAJQAAAAAAAADwAAAAAAAEAAAAc2l6ZQ59fQ8AJAAACACAf38AAAAAAABQUk5UEAAAABUAAAAAAAAANQACAAEAkAIAAAAAAAABAEVORAAAAAAACQAAAAAAAAA8L3JvYmxveD4=</SharedString>
    <SharedString md5="gWJyPu9ZoBhvicn76nwMgw=="></SharedString>
    <SharedString md5="rxNJufX5oaagQE3qNtzJSQ=="></SharedString>
    <SharedString md5="tydPtctRAf/ddupRU4Bxaw=="></SharedString>
  </SharedStrings>
</roblox>